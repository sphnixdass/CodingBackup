{
  "meta": {
    "index": 1664,
    "hitid": "3LN50BUKPV5LWISKXIGL4DGYV70PL2",
    "workerid": "AIWEXPJAU66D9",
    "probid": "17A",
    "subid": "48774568"
  },
  "lines": [
    {
      "line": 0,
      "text": "let m be an array of integers of length 100001",
      "code": "int m [ 100001 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "function check with integer argument a",
      "code": "bool check ( int a )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "if a is less than 2 return false",
      "code": "if ( a < 2 ) return false ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 2 to square root of a inclusive",
      "code": "for ( int i = 2 ; i * i <= a ; ++ i )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if a divides by i without remainder return false",
      "code": "if ( a % i == 0 ) return false ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "return true",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "good = array of booleans with size 100001",
      "code": "bool good [ 100001 ] ;",
      "indent": 0
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 9,
      "text": "let k , n , s , ans , x be integers with value of x = - 1",
      "code": "int k , n , s , ans , x = - 1 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for integer i = 0 to 1000 inclusive",
      "code": "for ( int i = 0 ; i <= 1000 ; ++ i )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if check ( i ) returns true",
      "code": "if ( check ( i ) )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if x is not equal to - 1 set good [ i + x + 1 ] to true",
      "code": "if ( x != - 1 ) good [ i + x + 1 ] = true ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "set x to i",
      "code": "x = i ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "for integer i = 0 to 1000 inclusive",
      "code": "for ( int i = 0 ; i <= 1000 ; ++ i )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if check ( s ) is false set good [ i ] to false",
      "code": "if ( ! check ( i ) ) good [ i ] = false ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "create integer m with value 0",
      "code": "int m = 0 ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i = 2 to n inclusive",
      "code": "for ( int i = 2 ; i <= n ; ++ i )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "increase m if good [ i ] is true",
      "code": "if ( good [ i ] ) m ++ ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if m is greater than or equal to k",
      "code": "if ( m >= k )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "void check ( int a )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int k , n , s = - 1 , ans = - 1 ;"
      ],
      "err_line": 12,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 2 ; i <= sqrt ( a ) ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int k , n , s , ans = - 1 ;"
      ],
      "err_line": 12,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "void check ( int a )",
        "if ( ! a % i ) return false ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        4,
        9
      ],
      "mod_code": [
        "void check ( int a )",
        "if ( ! a % i ) return false ;",
        "int k , n , s = - 1 , ans = - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        4,
        9,
        16
      ],
      "mod_code": [
        "void check ( int a )",
        "if ( ! a % i ) return false ;",
        "int k , n , s = - 1 , ans = - 1 ;",
        "if ( check ( s ) == false ) good [ i ] = false ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        4,
        9,
        19
      ],
      "mod_code": [
        "void check ( int a )",
        "if ( ! a % i ) return false ;",
        "int k , n , s = - 1 , ans = - 1 ;",
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        4,
        9,
        16
      ],
      "mod_code": [
        "void check ( int a )",
        "if ( ! a % i ) return false ;",
        "int k , n , s = - 1 , ans = - 1 ;",
        "if ( check ( s ) == false ) { good [ i ] = false ; }"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        4,
        16
      ],
      "mod_code": [
        "void check ( int a )",
        "if ( ! a % i ) return false ;",
        "if ( check ( s ) == false ) good [ i ] = false ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        4,
        16,
        19
      ],
      "mod_code": [
        "void check ( int a )",
        "if ( ! a % i ) return false ;",
        "if ( check ( s ) == false ) good [ i ] = false ;",
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        4,
        19
      ],
      "mod_code": [
        "void check ( int a )",
        "if ( ! a % i ) return false ;",
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        4,
        19,
        16
      ],
      "mod_code": [
        "void check ( int a )",
        "if ( ! a % i ) return false ;",
        "for ( i = 2 ; i <= n ; i ++ )",
        "if ( check ( s ) == false ) { good [ i ] = false ; }"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        4,
        16
      ],
      "mod_code": [
        "void check ( int a )",
        "if ( ! a % i ) return false ;",
        "if ( check ( s ) == false ) { good [ i ] = false ; }"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "void check ( int a )",
        "int k , n , s = - 1 , ans = - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        16
      ],
      "mod_code": [
        "void check ( int a )",
        "int k , n , s = - 1 , ans = - 1 ;",
        "if ( check ( s ) == false ) good [ i ] = false ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        16,
        19
      ],
      "mod_code": [
        "void check ( int a )",
        "int k , n , s = - 1 , ans = - 1 ;",
        "if ( check ( s ) == false ) good [ i ] = false ;",
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        19
      ],
      "mod_code": [
        "void check ( int a )",
        "int k , n , s = - 1 , ans = - 1 ;",
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        19,
        16
      ],
      "mod_code": [
        "void check ( int a )",
        "int k , n , s = - 1 , ans = - 1 ;",
        "for ( i = 2 ; i <= n ; i ++ )",
        "if ( check ( s ) == false ) { good [ i ] = false ; }"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        16
      ],
      "mod_code": [
        "void check ( int a )",
        "int k , n , s = - 1 , ans = - 1 ;",
        "if ( check ( s ) == false ) { good [ i ] = false ; }"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "void check ( int a )",
        "if ( check ( s ) == false ) good [ i ] = false ;"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        16,
        19
      ],
      "mod_code": [
        "void check ( int a )",
        "if ( check ( s ) == false ) good [ i ] = false ;",
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        19
      ],
      "mod_code": [
        "void check ( int a )",
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        19,
        16
      ],
      "mod_code": [
        "void check ( int a )",
        "for ( i = 2 ; i <= n ; i ++ )",
        "if ( check ( s ) == false ) { good [ i ] = false ; }"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "void check ( int a )",
        "if ( check ( s ) == false ) { good [ i ] = false ; }"
      ],
      "err_line": 2,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "if ( ! a % i ) return false ;",
        "int k , n , s = - 1 , ans = - 1 ;"
      ],
      "err_line": 12,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        16
      ],
      "mod_code": [
        "if ( ! a % i ) return false ;",
        "int k , n , s = - 1 , ans = - 1 ;",
        "if ( check ( s ) == false ) good [ i ] = false ;"
      ],
      "err_line": 12,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        16,
        19
      ],
      "mod_code": [
        "if ( ! a % i ) return false ;",
        "int k , n , s = - 1 , ans = - 1 ;",
        "if ( check ( s ) == false ) good [ i ] = false ;",
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        19
      ],
      "mod_code": [
        "if ( ! a % i ) return false ;",
        "int k , n , s = - 1 , ans = - 1 ;",
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        19,
        16
      ],
      "mod_code": [
        "if ( ! a % i ) return false ;",
        "int k , n , s = - 1 , ans = - 1 ;",
        "for ( i = 2 ; i <= n ; i ++ )",
        "if ( check ( s ) == false ) { good [ i ] = false ; }"
      ],
      "err_line": 12,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        16
      ],
      "mod_code": [
        "if ( ! a % i ) return false ;",
        "int k , n , s = - 1 , ans = - 1 ;",
        "if ( check ( s ) == false ) { good [ i ] = false ; }"
      ],
      "err_line": 12,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        16,
        19
      ],
      "mod_code": [
        "if ( ! a % i ) return false ;",
        "if ( check ( s ) == false ) good [ i ] = false ;",
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        19
      ],
      "mod_code": [
        "if ( ! a % i ) return false ;",
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        19,
        16
      ],
      "mod_code": [
        "if ( ! a % i ) return false ;",
        "for ( i = 2 ; i <= n ; i ++ )",
        "if ( check ( s ) == false ) { good [ i ] = false ; }"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        16
      ],
      "mod_code": [
        "int k , n , s = - 1 , ans = - 1 ;",
        "if ( check ( s ) == false ) good [ i ] = false ;"
      ],
      "err_line": 12,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        16,
        19
      ],
      "mod_code": [
        "int k , n , s = - 1 , ans = - 1 ;",
        "if ( check ( s ) == false ) good [ i ] = false ;",
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        19
      ],
      "mod_code": [
        "int k , n , s = - 1 , ans = - 1 ;",
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        19,
        16
      ],
      "mod_code": [
        "int k , n , s = - 1 , ans = - 1 ;",
        "for ( i = 2 ; i <= n ; i ++ )",
        "if ( check ( s ) == false ) { good [ i ] = false ; }"
      ],
      "err_line": 12,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        16
      ],
      "mod_code": [
        "int k , n , s = - 1 , ans = - 1 ;",
        "if ( check ( s ) == false ) { good [ i ] = false ; }"
      ],
      "err_line": 12,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        19
      ],
      "mod_code": [
        "if ( check ( s ) == false ) good [ i ] = false ;",
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        16
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "if ( check ( s ) == false ) { good [ i ] = false ; }"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}