{
  "meta": {
    "index": 2333,
    "hitid": "3BAKUKE49H6TIO4VH02RPT7ZZL1R1D",
    "workerid": "AIWEXPJAU66D9",
    "probid": "834A",
    "subid": "45749816"
  },
  "lines": [
    {
      "line": 0,
      "text": "define ints a and b",
      "code": "int a , b ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create new integer cnt",
      "code": "int cnt ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "define new chars s and t",
      "code": "char s , t ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "mp = map from characters to integers",
      "code": "map < char , int > mp ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "read from the input to s and t",
      "code": "cin >> s >> t ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read input to cnt",
      "code": "cin >> cnt ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "change cnt to the remainder of cnt divided by 4",
      "code": "cnt %= 4 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set the value of mp [ ' v ' ] to 0",
      "code": "mp [ ' v ' ] = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "assign 1 to mp [ ' < ' ]",
      "code": "mp [ ' < ' ] = 1 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "set the value of mp [ ' ^ ' ] to 2",
      "code": "mp [ ' ^ ' ] = 2 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "change mp [ ' > ' ] to 3",
      "code": "mp [ ' > ' ] = 3 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "assign mp [ s ] to a",
      "code": "a = mp [ s ] ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "set the value of b to mp [ t ]",
      "code": "b = mp [ t ] ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if ( a - b + 4 ) % 4 is equal to cnt",
      "code": "if ( ( a - b + 4 ) % 4 == cnt )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if ( b - a + 4 ) % 4 = cnt",
      "code": "if ( ( b - a + 4 ) % 4 == cnt )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print \" undefined \\ n \"",
      "code": "cout << \" undefined\\n \" ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print \" ccw \\ n \"",
      "code": "cout << \" ccw\\n \" ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if ( b - a + 4 ) % 4 is equal to cnt",
      "code": "if ( ( b - a + 4 ) % 4 == cnt )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print \" cw \\ n \"",
      "code": "cout << \" cw\\n \" ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char s and t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "map < characters , int > mp ;"
      ],
      "err_line": 3,
      "err_msg": "‘characters’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int s >> t ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 6,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "mp [ ' ' < ' ] = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "mp [ ' ' > ' ] = 3 ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "* b = mp [ t ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "<< \" \\n \" ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "<< \" \\n \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "if ( ( b - i + 4 ) % 4 == cnt )"
      ],
      "err_line": 22,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        19,
        23,
        9
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "cout << \" \\n \" ;",
        "cout << \" RU\\n \" ;",
        "mp [ ' ' < ' ] = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        16,
        19,
        23,
        2
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "cout << \" \\n \" ;",
        "cout << \" RU\\n \" ;",
        "char s and t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        16,
        19,
        9
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "cout << \" \\n \" ;",
        "mp [ ' ' < ' ] = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        16,
        19,
        9,
        2
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "cout << \" \\n \" ;",
        "mp [ ' ' < ' ] = 1 ;",
        "char s and t ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        16,
        19,
        2
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "cout << \" \\n \" ;",
        "char s and t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        16,
        23,
        9
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "cout << \" RU\\n \" ;",
        "mp [ ' ' < ' ] = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        16,
        23,
        9,
        19
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "cout << \" RU\\n \" ;",
        "mp [ ' ' < ' ] = 1 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        16,
        23,
        9,
        2
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "cout << \" RU\\n \" ;",
        "mp [ ' ' < ' ] = 1 ;",
        "char s and t ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        16,
        23,
        19
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "cout << \" RU\\n \" ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        23,
        19,
        2
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "cout << \" RU\\n \" ;",
        "<< \" \\n \" ;",
        "char s and t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        16,
        23,
        2
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "cout << \" RU\\n \" ;",
        "char s and t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        16,
        9
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "mp [ ' ' < ' ] = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        16,
        9,
        19
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "mp [ ' ' < ' ] = 1 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        16,
        9,
        19,
        2
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "mp [ ' ' < ' ] = 1 ;",
        "<< \" \\n \" ;",
        "char s and t ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        16,
        9,
        2
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "mp [ ' ' < ' ] = 1 ;",
        "char s and t ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        16,
        19
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        19,
        2
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "<< \" \\n \" ;",
        "char s and t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        16,
        2
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "char s and t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        19,
        23,
        9
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "cout << \" RU\\n \" ;",
        "mp [ ' ' < ' ] = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        19,
        23,
        9,
        2
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "cout << \" RU\\n \" ;",
        "mp [ ' ' < ' ] = 1 ;",
        "char s and t ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        19,
        23,
        2
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "cout << \" RU\\n \" ;",
        "char s and t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        19,
        9
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "mp [ ' ' < ' ] = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        19,
        9,
        2
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "mp [ ' ' < ' ] = 1 ;",
        "char s and t ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        19,
        2
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "char s and t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        23,
        9
      ],
      "mod_code": [
        "cout << \" RU\\n \" ;",
        "mp [ ' ' < ' ] = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        23,
        9,
        19
      ],
      "mod_code": [
        "cout << \" RU\\n \" ;",
        "mp [ ' ' < ' ] = 1 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        23,
        9,
        19,
        2
      ],
      "mod_code": [
        "cout << \" RU\\n \" ;",
        "mp [ ' ' < ' ] = 1 ;",
        "<< \" \\n \" ;",
        "char s and t ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        23,
        9,
        2
      ],
      "mod_code": [
        "cout << \" RU\\n \" ;",
        "mp [ ' ' < ' ] = 1 ;",
        "char s and t ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        23,
        19
      ],
      "mod_code": [
        "cout << \" RU\\n \" ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        23,
        19,
        2
      ],
      "mod_code": [
        "cout << \" RU\\n \" ;",
        "<< \" \\n \" ;",
        "char s and t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        23,
        2
      ],
      "mod_code": [
        "cout << \" RU\\n \" ;",
        "char s and t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        9,
        19
      ],
      "mod_code": [
        "mp [ ' ' < ' ] = 1 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        19,
        2
      ],
      "mod_code": [
        "mp [ ' ' < ' ] = 1 ;",
        "<< \" \\n \" ;",
        "char s and t ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "mp [ ' ' < ' ] = 1 ;",
        "char s and t ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        19,
        2
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "char s and t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘and’ token"
    }
  ]
}