{
  "meta": {
    "index": 2031,
    "hitid": "3XJOUITW8ULUF71464X1Q9GPVIPTQM",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1027A",
    "subid": "42442758"
  },
  "lines": [
    {
      "line": 0,
      "text": "check_palindrome is a boolean function with string argument str",
      "code": "bool check_palindrome ( string str )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create new integers i = 0 and j = length of str - 1",
      "code": "int i = 0 , j = str . length ( ) - 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while i < j",
      "code": "while ( i < j )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if str [ i ] = str [ j ]",
      "code": "if ( str [ i ] == str [ j ] )",
      "indent": 2
    },
    {
      "line": 4,
      "text": "increment i by one",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 5,
      "text": "decrement j",
      "code": "j -- ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "skip the rest of the loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 8,
      "text": "define characters a1 , a2 , b1 and b2",
      "code": "char a1 , a2 , b1 , b2 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if str [ i ] = ' a '",
      "code": "if ( str [ i ] == ' a ' )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "change the values of a1 and a2 to ' b '",
      "code": "a1 = a2 = ' b ' ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if str [ i ] is equal to ' z '",
      "code": "else if ( str [ i ] == ' z ' )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set both a1 and a2 to ' y '",
      "code": "a1 = a2 = ' y ' ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set a1 to the next character after str [ i ] , in alphabetic order",
      "code": "a1 = ( char ) str [ i ] + 1 ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "set a2 to the previous character before str [ i ] , in alphabetic order",
      "code": "a2 = ( char ) str [ i ] - 1 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if str [ j ] = ' a '",
      "code": "if ( str [ j ] == ' a ' )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "change the value of b1 and b2 to ' b '",
      "code": "b1 = b2 = ' b ' ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "else if str [ j ] = ' z '",
      "code": "else if ( str [ j ] == ' z ' )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "set b1 and b2 to ' b '",
      "code": "b1 = b2 = ' y ' ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 22,
      "text": "change b1 to the character with code = str [ j ] + 1",
      "code": "b1 = ( char ) str [ j ] + 1 ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "set b2 to the character before str [ j ] - 1 in the alphabetic order",
      "code": "b2 = ( char ) str [ j ] - 1 ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if a1 = b1 or a1 = b2 or a2 = b1 or a2 = b2",
      "code": "if ( a1 == b1 || a1 == b2 || a2 == b1 || a2 == b2 )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "decrement j",
      "code": "j -- ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "go to the start of the loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "return false",
      "code": "return false ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "return true",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 35,
      "text": "declare new integer lines",
      "code": "int lines ;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "read lines from the input",
      "code": "cin >> lines ;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "for integer i = 0 to lines exclusive incrementing i",
      "code": "for ( int i = 0 ; i < lines ; i ++ )",
      "indent": 1
    },
    {
      "line": 38,
      "text": "create new integer variable size",
      "code": "int size ;",
      "indent": 2
    },
    {
      "line": 39,
      "text": "read size from the input",
      "code": "cin >> size ;",
      "indent": 2
    },
    {
      "line": 40,
      "text": "define new string s",
      "code": "string s ;",
      "indent": 2
    },
    {
      "line": 41,
      "text": "read s from the input",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 42,
      "text": "if check_palindrome ( s ) returned true",
      "code": "if ( check_palindrome ( s ) )",
      "indent": 2
    },
    {
      "line": 43,
      "text": "print \" YES \\ n \"",
      "code": "cout << \" YES\\n \" ;",
      "indent": 3
    },
    {
      "line": 44,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 45,
      "text": "print \" NO \\ n \"",
      "code": "cout << \" NO\\n \" ;",
      "indent": 3
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool check_palindrome ( string str ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int j = 0 , j = str . length ( ) - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( i < j ) ;"
      ],
      "err_line": 6,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "char a1 , a2 , b1 , n ;"
      ],
      "err_line": 18,
      "err_msg": "‘b2’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( str [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else if ( str [ i ] ] == ' z ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "a2 = push ( str [ i ] ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘push’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( str [ j ] == ' a ' ) j ++ ;"
      ],
      "err_line": 19,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "else if ( str [ j ] == ' z ' ) j ++ ;"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "the ;"
      ],
      "err_line": 28,
      "err_msg": "‘the’ was not declared in this scope"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "cin . get ( lines ) ;"
      ],
      "err_line": 36,
      "err_msg": "invalid initialization of non-const reference of type ‘std::basic_istream<char>::char_type& {aka char&}’ from an rvalue of type ‘std::basic_istream<char>::char_type {aka char}’"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "int size [ 8 ] ;"
      ],
      "err_line": 39,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [8]’)"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 42,
      "err_msg": "could not convert ‘s’ from ‘char’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "cin . get ( s ) ;"
      ],
      "err_line": 41,
      "err_msg": "no matching function for call to ‘std::basic_istream<char>::get(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        14,
        15,
        20,
        1
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "a2 = ( char ) str [ i ] ;",
        "b1 = b2 = ' b ' ;",
        "int j = 0 , j = str . length ( ) - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        14,
        15,
        20,
        36
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "a2 = ( char ) str [ i ] ;",
        "b1 = b2 = ' b ' ;",
        "cin . get ( lines ) ;"
      ],
      "err_line": 36,
      "err_msg": "invalid initialization of non-const reference of type ‘std::basic_istream<char>::char_type& {aka char&}’ from an rvalue of type ‘std::basic_istream<char>::char_type {aka char}’"
    },
    {
      "mod_line": [
        14,
        15,
        20,
        3
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "a2 = ( char ) str [ i ] ;",
        "b1 = b2 = ' b ' ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        15,
        1
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "a2 = ( char ) str [ i ] ;",
        "int j = 0 , j = str . length ( ) - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        14,
        15,
        1,
        36
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "a2 = ( char ) str [ i ] ;",
        "int j = 0 , j = str . length ( ) - 1 ;",
        "cin . get ( lines ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        14,
        15,
        1,
        3
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "a2 = ( char ) str [ i ] ;",
        "int j = 0 , j = str . length ( ) - 1 ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        14,
        15,
        36
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "a2 = ( char ) str [ i ] ;",
        "cin . get ( lines ) ;"
      ],
      "err_line": 36,
      "err_msg": "invalid initialization of non-const reference of type ‘std::basic_istream<char>::char_type& {aka char&}’ from an rvalue of type ‘std::basic_istream<char>::char_type {aka char}’"
    },
    {
      "mod_line": [
        14,
        15,
        36,
        3
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "a2 = ( char ) str [ i ] ;",
        "cin . get ( lines ) ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        15,
        3
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "a2 = ( char ) str [ i ] ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        20,
        1
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "b1 = b2 = ' b ' ;",
        "int j = 0 , j = str . length ( ) - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        14,
        20,
        1,
        36
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "b1 = b2 = ' b ' ;",
        "int j = 0 , j = str . length ( ) - 1 ;",
        "cin . get ( lines ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        14,
        20,
        1,
        3
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "b1 = b2 = ' b ' ;",
        "int j = 0 , j = str . length ( ) - 1 ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        14,
        20,
        36
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "b1 = b2 = ' b ' ;",
        "cin . get ( lines ) ;"
      ],
      "err_line": 36,
      "err_msg": "invalid initialization of non-const reference of type ‘std::basic_istream<char>::char_type& {aka char&}’ from an rvalue of type ‘std::basic_istream<char>::char_type {aka char}’"
    },
    {
      "mod_line": [
        14,
        20,
        36,
        3
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "b1 = b2 = ' b ' ;",
        "cin . get ( lines ) ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        20,
        3
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "b1 = b2 = ' b ' ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        1
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "int j = 0 , j = str . length ( ) - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        14,
        1,
        36
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "int j = 0 , j = str . length ( ) - 1 ;",
        "cin . get ( lines ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        14,
        1,
        36,
        3
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "int j = 0 , j = str . length ( ) - 1 ;",
        "cin . get ( lines ) ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        14,
        1,
        3
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "int j = 0 , j = str . length ( ) - 1 ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        14,
        36
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "cin . get ( lines ) ;"
      ],
      "err_line": 36,
      "err_msg": "invalid initialization of non-const reference of type ‘std::basic_istream<char>::char_type& {aka char&}’ from an rvalue of type ‘std::basic_istream<char>::char_type {aka char}’"
    },
    {
      "mod_line": [
        14,
        36,
        3
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "cin . get ( lines ) ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        3
      ],
      "mod_code": [
        "a1 = ! str [ i ] ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        15,
        20,
        1
      ],
      "mod_code": [
        "a2 = ( char ) str [ i ] ;",
        "b1 = b2 = ' b ' ;",
        "int j = 0 , j = str . length ( ) - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        15,
        20,
        1,
        36
      ],
      "mod_code": [
        "a2 = ( char ) str [ i ] ;",
        "b1 = b2 = ' b ' ;",
        "int j = 0 , j = str . length ( ) - 1 ;",
        "cin . get ( lines ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        15,
        20,
        1,
        3
      ],
      "mod_code": [
        "a2 = ( char ) str [ i ] ;",
        "b1 = b2 = ' b ' ;",
        "int j = 0 , j = str . length ( ) - 1 ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        15,
        20,
        36
      ],
      "mod_code": [
        "a2 = ( char ) str [ i ] ;",
        "b1 = b2 = ' b ' ;",
        "cin . get ( lines ) ;"
      ],
      "err_line": 36,
      "err_msg": "invalid initialization of non-const reference of type ‘std::basic_istream<char>::char_type& {aka char&}’ from an rvalue of type ‘std::basic_istream<char>::char_type {aka char}’"
    },
    {
      "mod_line": [
        15,
        20,
        36,
        3
      ],
      "mod_code": [
        "a2 = ( char ) str [ i ] ;",
        "b1 = b2 = ' b ' ;",
        "cin . get ( lines ) ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        15,
        20,
        3
      ],
      "mod_code": [
        "a2 = ( char ) str [ i ] ;",
        "b1 = b2 = ' b ' ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        15,
        1
      ],
      "mod_code": [
        "a2 = ( char ) str [ i ] ;",
        "int j = 0 , j = str . length ( ) - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        15,
        1,
        36
      ],
      "mod_code": [
        "a2 = ( char ) str [ i ] ;",
        "int j = 0 , j = str . length ( ) - 1 ;",
        "cin . get ( lines ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        15,
        1,
        36,
        3
      ],
      "mod_code": [
        "a2 = ( char ) str [ i ] ;",
        "int j = 0 , j = str . length ( ) - 1 ;",
        "cin . get ( lines ) ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        15,
        1,
        3
      ],
      "mod_code": [
        "a2 = ( char ) str [ i ] ;",
        "int j = 0 , j = str . length ( ) - 1 ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        15,
        36
      ],
      "mod_code": [
        "a2 = ( char ) str [ i ] ;",
        "cin . get ( lines ) ;"
      ],
      "err_line": 36,
      "err_msg": "invalid initialization of non-const reference of type ‘std::basic_istream<char>::char_type& {aka char&}’ from an rvalue of type ‘std::basic_istream<char>::char_type {aka char}’"
    },
    {
      "mod_line": [
        15,
        36,
        3
      ],
      "mod_code": [
        "a2 = ( char ) str [ i ] ;",
        "cin . get ( lines ) ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        15,
        3
      ],
      "mod_code": [
        "a2 = ( char ) str [ i ] ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        20,
        1
      ],
      "mod_code": [
        "b1 = b2 = ' b ' ;",
        "int j = 0 , j = str . length ( ) - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        20,
        1,
        36
      ],
      "mod_code": [
        "b1 = b2 = ' b ' ;",
        "int j = 0 , j = str . length ( ) - 1 ;",
        "cin . get ( lines ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        20,
        1,
        36,
        3
      ],
      "mod_code": [
        "b1 = b2 = ' b ' ;",
        "int j = 0 , j = str . length ( ) - 1 ;",
        "cin . get ( lines ) ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        20,
        1,
        3
      ],
      "mod_code": [
        "b1 = b2 = ' b ' ;",
        "int j = 0 , j = str . length ( ) - 1 ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        20,
        36
      ],
      "mod_code": [
        "b1 = b2 = ' b ' ;",
        "cin . get ( lines ) ;"
      ],
      "err_line": 36,
      "err_msg": "invalid initialization of non-const reference of type ‘std::basic_istream<char>::char_type& {aka char&}’ from an rvalue of type ‘std::basic_istream<char>::char_type {aka char}’"
    },
    {
      "mod_line": [
        20,
        36,
        3
      ],
      "mod_code": [
        "b1 = b2 = ' b ' ;",
        "cin . get ( lines ) ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        20,
        3
      ],
      "mod_code": [
        "b1 = b2 = ' b ' ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        36
      ],
      "mod_code": [
        "int j = 0 , j = str . length ( ) - 1 ;",
        "cin . get ( lines ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        1,
        36,
        3
      ],
      "mod_code": [
        "int j = 0 , j = str . length ( ) - 1 ;",
        "cin . get ( lines ) ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int j = 0 , j = str . length ( ) - 1 ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        36,
        3
      ],
      "mod_code": [
        "cin . get ( lines ) ;",
        "if ( str [ i ] ] == str [ j ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘]’ token"
    }
  ]
}