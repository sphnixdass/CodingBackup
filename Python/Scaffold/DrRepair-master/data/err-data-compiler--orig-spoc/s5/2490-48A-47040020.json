{
  "meta": {
    "index": 2490,
    "hitid": "3JMQI2OLFZZ2VLSF4M55HB3YMJYDNF",
    "workerid": "AIWEXPJAU66D9",
    "probid": "48A",
    "subid": "47040020"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create a map from strings to strings with name ms",
      "code": "map < string , string > ms ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "set value of \" scissors \" key in the ms to \" paper \"",
      "code": "ms [ \" scissors \" ] = \" paper \" ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set value of \" paper \" key in the ms to \" rock \"",
      "code": "ms [ \" paper \" ] = \" rock \" ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set value of \" rock \" key in the ms to \" scissors \"",
      "code": "ms [ \" rock \" ] = \" scissors \" ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let f , m and s be strings",
      "code": "string f , m , s ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read f , m and s",
      "code": "cin >> f >> m >> s ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if ms [ f ] = m & & ms [ f ] = s",
      "code": "if ( ms [ f ] == m && ms [ f ] == s )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print \" F \" and a new line",
      "code": "cout << \" F \" << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else if ms [ m ] = f and ms [ m ] = s",
      "code": "else if ( ms [ m ] == f && ms [ m ] == s )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print \" M \" and a new line",
      "code": "cout << \" M \" << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else if ms [ s ] = f and ms [ s ] = m",
      "code": "else if ( ms [ s ] == f && ms [ s ] == m )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print \" S \" and a new line",
      "code": "cout << \" S \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" ? \" and a new line",
      "code": "cout << \" ? \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "ms = \" paper \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [6]’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "ms = \" rock \" ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [5]’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "ms = \" scissors \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [9]’)"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "map < from , string > ms ;"
      ],
      "err_line": 1,
      "err_msg": "‘from’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "ms = \" paper \" , ms = \" paper \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [6]’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "ms . \" = \" rock \" ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "ms = \" scissors \" , ms = \" scissors \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [9]’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "string f , m , n ;"
      ],
      "err_line": 6,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( ms [ f ] == ' m ' && ms [ f ] == s )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >::mapped_type {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >::mapped_type {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else if ( ms [ s ] == ' f ' && ms [ s ] == m )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >::mapped_type {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "ms = \" paper \" ;",
        "ms = \" rock \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [6]’)"
    },
    {
      "mod_line": [
        2,
        3,
        4
      ],
      "mod_code": [
        "ms = \" paper \" ;",
        "ms = \" rock \" ;",
        "ms = \" scissors \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [6]’)"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        8
      ],
      "mod_code": [
        "ms = \" paper \" ;",
        "ms = \" rock \" ;",
        "ms = \" scissors \" ;",
        "cout << \" F \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [6]’)"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        9
      ],
      "mod_code": [
        "ms = \" paper \" ;",
        "ms = \" rock \" ;",
        "ms = \" scissors \" ;",
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [6]’)"
    },
    {
      "mod_line": [
        2,
        3,
        8
      ],
      "mod_code": [
        "ms = \" paper \" ;",
        "ms = \" rock \" ;",
        "cout << \" F \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [6]’)"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        9
      ],
      "mod_code": [
        "ms = \" paper \" ;",
        "ms = \" rock \" ;",
        "cout << \" F \" ;",
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [6]’)"
    },
    {
      "mod_line": [
        2,
        3,
        9
      ],
      "mod_code": [
        "ms = \" paper \" ;",
        "ms = \" rock \" ;",
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [6]’)"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "ms = \" paper \" ;",
        "ms = \" scissors \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [6]’)"
    },
    {
      "mod_line": [
        2,
        4,
        3
      ],
      "mod_code": [
        "ms = \" paper \" ;",
        "ms = \" scissors \" ;",
        "ms . \" = \" rock \" ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        4,
        3,
        8
      ],
      "mod_code": [
        "ms = \" paper \" ;",
        "ms = \" scissors \" ;",
        "ms . \" = \" rock \" ;",
        "cout << \" F \" ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        4,
        3,
        9
      ],
      "mod_code": [
        "ms = \" paper \" ;",
        "ms = \" scissors \" ;",
        "ms . \" = \" rock \" ;",
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        4,
        8
      ],
      "mod_code": [
        "ms = \" paper \" ;",
        "ms = \" scissors \" ;",
        "cout << \" F \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [6]’)"
    },
    {
      "mod_line": [
        2,
        4,
        8,
        9
      ],
      "mod_code": [
        "ms = \" paper \" ;",
        "ms = \" scissors \" ;",
        "cout << \" F \" ;",
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [6]’)"
    },
    {
      "mod_line": [
        2,
        4,
        9
      ],
      "mod_code": [
        "ms = \" paper \" ;",
        "ms = \" scissors \" ;",
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [6]’)"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "ms = \" paper \" ;",
        "ms . \" = \" rock \" ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        3,
        8
      ],
      "mod_code": [
        "ms = \" paper \" ;",
        "ms . \" = \" rock \" ;",
        "cout << \" F \" ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        9
      ],
      "mod_code": [
        "ms = \" paper \" ;",
        "ms . \" = \" rock \" ;",
        "cout << \" F \" ;",
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        3,
        9
      ],
      "mod_code": [
        "ms = \" paper \" ;",
        "ms . \" = \" rock \" ;",
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "ms = \" paper \" ;",
        "cout << \" F \" ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [6]’)"
    },
    {
      "mod_line": [
        2,
        8,
        9
      ],
      "mod_code": [
        "ms = \" paper \" ;",
        "cout << \" F \" ;",
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [6]’)"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "ms = \" paper \" ;",
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [6]’)"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "ms = \" rock \" ;",
        "ms = \" scissors \" ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [5]’)"
    },
    {
      "mod_line": [
        3,
        4,
        8
      ],
      "mod_code": [
        "ms = \" rock \" ;",
        "ms = \" scissors \" ;",
        "cout << \" F \" ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [5]’)"
    },
    {
      "mod_line": [
        3,
        4,
        8,
        9
      ],
      "mod_code": [
        "ms = \" rock \" ;",
        "ms = \" scissors \" ;",
        "cout << \" F \" ;",
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [5]’)"
    },
    {
      "mod_line": [
        3,
        4,
        9
      ],
      "mod_code": [
        "ms = \" rock \" ;",
        "ms = \" scissors \" ;",
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [5]’)"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "ms = \" rock \" ;",
        "cout << \" F \" ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [5]’)"
    },
    {
      "mod_line": [
        3,
        8,
        9
      ],
      "mod_code": [
        "ms = \" rock \" ;",
        "cout << \" F \" ;",
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [5]’)"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "ms = \" rock \" ;",
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [5]’)"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "ms = \" scissors \" ;",
        "ms . \" = \" rock \" ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        3,
        8
      ],
      "mod_code": [
        "ms = \" scissors \" ;",
        "ms . \" = \" rock \" ;",
        "cout << \" F \" ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        3,
        8,
        9
      ],
      "mod_code": [
        "ms = \" scissors \" ;",
        "ms . \" = \" rock \" ;",
        "cout << \" F \" ;",
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        3,
        9
      ],
      "mod_code": [
        "ms = \" scissors \" ;",
        "ms . \" = \" rock \" ;",
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "ms = \" scissors \" ;",
        "cout << \" F \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [9]’)"
    },
    {
      "mod_line": [
        4,
        8,
        9
      ],
      "mod_code": [
        "ms = \" scissors \" ;",
        "cout << \" F \" ;",
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [9]’)"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "ms = \" scissors \" ;",
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >’ and ‘const char [9]’)"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "ms . \" = \" rock \" ;",
        "cout << \" F \" ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        8,
        9
      ],
      "mod_code": [
        "ms . \" = \" rock \" ;",
        "cout << \" F \" ;",
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "ms . \" = \" rock \" ;",
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "else if ( ms [ m ] == ' f ' && ms [ m ] == s )"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >::mapped_type {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    }
  ]
}