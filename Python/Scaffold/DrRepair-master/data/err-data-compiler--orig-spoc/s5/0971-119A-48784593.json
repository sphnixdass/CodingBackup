{
  "meta": {
    "index": 971,
    "hitid": "341H3G5YF082DQ54VYS4XRQO3A5Z02",
    "workerid": "A1APYLD4DUK33J",
    "probid": "119A",
    "subid": "48784593"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare gcd with integer , integer as arguments , returning integer",
      "code": "int gcd ( int , int ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create integers n , m , k , a , b",
      "code": "int n , m , k , a , b ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n read m read k",
      "code": "cin >> n >> m >> k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for k is greater than 0",
      "code": "for ( ; k > 0 ; )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set a to result of run gcd with n , k as arguments",
      "code": "a = gcd ( n , k ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set k to k - a",
      "code": "k = k - a ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if k is 0",
      "code": "if ( k == 0 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "print ' 0 ' print newline",
      "code": "cout << ' 0 ' << endl ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if k is less than 0",
      "code": "if ( k < 0 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print ' 1 ' print newline",
      "code": "cout << ' 1 ' << endl ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "set b to result of run gcd with m , k as arguments",
      "code": "b = gcd ( m , k ) ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set k to k - b",
      "code": "k = k - b ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if k is 0",
      "code": "if ( k == 0 )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print ' 1 ' print newline",
      "code": "cout << ' 1 ' << endl ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if k is less than 0",
      "code": "if ( k < 0 )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print ' 0 ' print newline",
      "code": "cout << ' 0 ' << endl ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 27,
      "text": "declare gcd with integers a , b as arguments , returning integer",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 28,
      "text": "create integers m , n , r",
      "code": "int m , n , r ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "if a is greater than b",
      "code": "if ( a > b )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "set m to a",
      "code": "m = a ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "set n to b",
      "code": "n = b ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 33,
      "text": "set n to a",
      "code": "n = a ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "set m to b",
      "code": "m = b ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 36,
      "text": "set r to m",
      "code": "r = m ;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "while r is not 0",
      "code": "while ( r != 0 )",
      "indent": 1
    },
    {
      "line": 38,
      "text": "set r to n % m",
      "code": "r = n % m ;",
      "indent": 2
    },
    {
      "line": 39,
      "text": "set n to m",
      "code": "n = m ;",
      "indent": 2
    },
    {
      "line": 40,
      "text": "set m to r",
      "code": "m = r ;",
      "indent": 2
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 42,
      "text": "return n from function",
      "code": "return n ;",
      "indent": 1
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int gcd ( int a )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "a = gcd ( n ) ;"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "b = gcd ( m ) ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 28,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "int r = m ;"
      ],
      "err_line": 36,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        4,
        0
      ],
      "mod_code": [
        "for ( ; k > 0 ; k -- )",
        "int gcd ( int a )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        0,
        15
      ],
      "mod_code": [
        "for ( ; k > 0 ; k -- )",
        "int gcd ( int a )",
        "b = gcd ( m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        0,
        15,
        40
      ],
      "mod_code": [
        "for ( ; k > 0 ; k -- )",
        "int gcd ( int a )",
        "b = gcd ( m ) ;",
        "int m = r ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        0,
        15,
        36
      ],
      "mod_code": [
        "for ( ; k > 0 ; k -- )",
        "int gcd ( int a )",
        "b = gcd ( m ) ;",
        "int r = m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        0,
        40
      ],
      "mod_code": [
        "for ( ; k > 0 ; k -- )",
        "int gcd ( int a )",
        "int m = r ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        0,
        40,
        36
      ],
      "mod_code": [
        "for ( ; k > 0 ; k -- )",
        "int gcd ( int a )",
        "int m = r ;",
        "int r = m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        0,
        36
      ],
      "mod_code": [
        "for ( ; k > 0 ; k -- )",
        "int gcd ( int a )",
        "int r = m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        4,
        15
      ],
      "mod_code": [
        "for ( ; k > 0 ; k -- )",
        "b = gcd ( m ) ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        15,
        40
      ],
      "mod_code": [
        "for ( ; k > 0 ; k -- )",
        "b = gcd ( m ) ;",
        "int m = r ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        15,
        40,
        36
      ],
      "mod_code": [
        "for ( ; k > 0 ; k -- )",
        "b = gcd ( m ) ;",
        "int m = r ;",
        "int r = m ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        15,
        36
      ],
      "mod_code": [
        "for ( ; k > 0 ; k -- )",
        "b = gcd ( m ) ;",
        "int r = m ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        40,
        36
      ],
      "mod_code": [
        "for ( ; k > 0 ; k -- )",
        "int m = r ;",
        "int r = m ;"
      ],
      "err_line": 36,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        4,
        36
      ],
      "mod_code": [
        "for ( ; k > 0 ; k -- )",
        "int r = m ;"
      ],
      "err_line": 36,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "int gcd ( int a )",
        "b = gcd ( m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        15,
        4
      ],
      "mod_code": [
        "int gcd ( int a )",
        "b = gcd ( m ) ;",
        "for ( ; k > 0 ; -- k )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        15,
        4,
        40
      ],
      "mod_code": [
        "int gcd ( int a )",
        "b = gcd ( m ) ;",
        "for ( ; k > 0 ; -- k )",
        "int m = r ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        15,
        4,
        36
      ],
      "mod_code": [
        "int gcd ( int a )",
        "b = gcd ( m ) ;",
        "for ( ; k > 0 ; -- k )",
        "int r = m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        15,
        40
      ],
      "mod_code": [
        "int gcd ( int a )",
        "b = gcd ( m ) ;",
        "int m = r ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        15,
        40,
        36
      ],
      "mod_code": [
        "int gcd ( int a )",
        "b = gcd ( m ) ;",
        "int m = r ;",
        "int r = m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        15,
        36
      ],
      "mod_code": [
        "int gcd ( int a )",
        "b = gcd ( m ) ;",
        "int r = m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "int gcd ( int a )",
        "for ( ; k > 0 ; -- k )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        4,
        40
      ],
      "mod_code": [
        "int gcd ( int a )",
        "for ( ; k > 0 ; -- k )",
        "int m = r ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        4,
        40,
        36
      ],
      "mod_code": [
        "int gcd ( int a )",
        "for ( ; k > 0 ; -- k )",
        "int m = r ;",
        "int r = m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        4,
        36
      ],
      "mod_code": [
        "int gcd ( int a )",
        "for ( ; k > 0 ; -- k )",
        "int r = m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        40
      ],
      "mod_code": [
        "int gcd ( int a )",
        "int m = r ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        40,
        36
      ],
      "mod_code": [
        "int gcd ( int a )",
        "int m = r ;",
        "int r = m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        36
      ],
      "mod_code": [
        "int gcd ( int a )",
        "int r = m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        15,
        4
      ],
      "mod_code": [
        "b = gcd ( m ) ;",
        "for ( ; k > 0 ; -- k )"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        15,
        4,
        40
      ],
      "mod_code": [
        "b = gcd ( m ) ;",
        "for ( ; k > 0 ; -- k )",
        "int m = r ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        15,
        4,
        40,
        36
      ],
      "mod_code": [
        "b = gcd ( m ) ;",
        "for ( ; k > 0 ; -- k )",
        "int m = r ;",
        "int r = m ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        15,
        4,
        36
      ],
      "mod_code": [
        "b = gcd ( m ) ;",
        "for ( ; k > 0 ; -- k )",
        "int r = m ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        15,
        40
      ],
      "mod_code": [
        "b = gcd ( m ) ;",
        "int m = r ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        15,
        40,
        36
      ],
      "mod_code": [
        "b = gcd ( m ) ;",
        "int m = r ;",
        "int r = m ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        15,
        36
      ],
      "mod_code": [
        "b = gcd ( m ) ;",
        "int r = m ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        40,
        36
      ],
      "mod_code": [
        "for ( ; k > 0 ; -- k )",
        "int m = r ;",
        "int r = m ;"
      ],
      "err_line": 36,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        4,
        36
      ],
      "mod_code": [
        "for ( ; k > 0 ; -- k )",
        "int r = m ;"
      ],
      "err_line": 36,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        40,
        36
      ],
      "mod_code": [
        "int m = r ;",
        "int r = m ;"
      ],
      "err_line": 36,
      "err_msg": "redeclaration of ‘int r’"
    }
  ]
}