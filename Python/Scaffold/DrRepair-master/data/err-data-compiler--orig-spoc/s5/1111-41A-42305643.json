{
  "meta": {
    "index": 1111,
    "hitid": "30OITAWPBQXYIZTNP85QQVNC9MA9HL",
    "workerid": "AIWEXPJAU66D9",
    "probid": "41A",
    "subid": "42305643"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "i and j = integers",
      "code": "int i , j ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "f = boolean",
      "code": "bool f ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let a and b be arrays of chars with size 1111",
      "code": "char a [ 1111 ] , b [ 1111 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set f to true",
      "code": "f = true ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read b",
      "code": "cin >> b ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "j = length of b - 1",
      "code": "j = strlen ( b ) - 1 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to length of a - 1 inclusive",
      "code": "for ( i = 0 ; i <= strlen ( a ) - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if a [ i ] ! = b [ j ] , set f to false",
      "code": "if ( a [ i ] != b [ j ] ) f = false ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "decrease j",
      "code": "j -- ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if f is false",
      "code": "if ( f == false )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int j = b . length ( ) - 1 ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘length’ in ‘a’, which is of non-class type ‘char [1111]’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "bool f = true ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘bool f’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 5,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "j = b . length ( ) - 1 ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘length’ in ‘b’, which is of non-class type ‘char [1111]’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= a . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [1111]’"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "int j = b . length ( ) - 1 ;",
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        7,
        8,
        13
      ],
      "mod_code": [
        "int j = b . length ( ) - 1 ;",
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        7,
        8,
        13,
        15
      ],
      "mod_code": [
        "int j = b . length ( ) - 1 ;",
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )",
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        7,
        8,
        13,
        3
      ],
      "mod_code": [
        "int j = b . length ( ) - 1 ;",
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )",
        "cout << \" NO \" << endl ;",
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        7,
        8,
        15
      ],
      "mod_code": [
        "int j = b . length ( ) - 1 ;",
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        7,
        8,
        15,
        3
      ],
      "mod_code": [
        "int j = b . length ( ) - 1 ;",
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )",
        "cout << \" YES \" << endl ;",
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        7,
        8,
        3
      ],
      "mod_code": [
        "int j = b . length ( ) - 1 ;",
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )",
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        7,
        13
      ],
      "mod_code": [
        "int j = b . length ( ) - 1 ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        7,
        13,
        15
      ],
      "mod_code": [
        "int j = b . length ( ) - 1 ;",
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        7,
        13,
        15,
        3
      ],
      "mod_code": [
        "int j = b . length ( ) - 1 ;",
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        7,
        13,
        3
      ],
      "mod_code": [
        "int j = b . length ( ) - 1 ;",
        "cout << \" NO \" << endl ;",
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        7,
        15
      ],
      "mod_code": [
        "int j = b . length ( ) - 1 ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        7,
        15,
        3
      ],
      "mod_code": [
        "int j = b . length ( ) - 1 ;",
        "cout << \" YES \" << endl ;",
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "int j = b . length ( ) - 1 ;",
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘length’ in ‘a’, which is of non-class type ‘char [1111]’"
    },
    {
      "mod_line": [
        8,
        13,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )",
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘length’ in ‘a’, which is of non-class type ‘char [1111]’"
    },
    {
      "mod_line": [
        8,
        13,
        15,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )",
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "j = b . length ( ) - 1 ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘length’ in ‘b’, which is of non-class type ‘char [1111]’"
    },
    {
      "mod_line": [
        8,
        13,
        15,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )",
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        8,
        13,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )",
        "cout << \" NO \" << endl ;",
        "j = b . length ( ) - 1 ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘length’ in ‘b’, which is of non-class type ‘char [1111]’"
    },
    {
      "mod_line": [
        8,
        13,
        7,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )",
        "cout << \" NO \" << endl ;",
        "j = b . length ( ) - 1 ;",
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        8,
        13,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )",
        "cout << \" NO \" << endl ;",
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        8,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘length’ in ‘a’, which is of non-class type ‘char [1111]’"
    },
    {
      "mod_line": [
        8,
        15,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )",
        "cout << \" YES \" << endl ;",
        "j = b . length ( ) - 1 ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘length’ in ‘b’, which is of non-class type ‘char [1111]’"
    },
    {
      "mod_line": [
        8,
        15,
        7,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )",
        "cout << \" YES \" << endl ;",
        "j = b . length ( ) - 1 ;",
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        8,
        15,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )",
        "cout << \" YES \" << endl ;",
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )",
        "j = b . length ( ) - 1 ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘length’ in ‘b’, which is of non-class type ‘char [1111]’"
    },
    {
      "mod_line": [
        8,
        7,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )",
        "j = b . length ( ) - 1 ;",
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= a . length ( ) - 1 ; i ++ )",
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        13,
        15,
        7
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "j = b . length ( ) - 1 ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘length’ in ‘b’, which is of non-class type ‘char [1111]’"
    },
    {
      "mod_line": [
        13,
        15,
        7,
        3
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "j = b . length ( ) - 1 ;",
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        13,
        15,
        3
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES \" << endl ;",
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "j = b . length ( ) - 1 ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘length’ in ‘b’, which is of non-class type ‘char [1111]’"
    },
    {
      "mod_line": [
        13,
        7,
        3
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "j = b . length ( ) - 1 ;",
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        13,
        3
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        15,
        7
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "j = b . length ( ) - 1 ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘length’ in ‘b’, which is of non-class type ‘char [1111]’"
    },
    {
      "mod_line": [
        15,
        7,
        3
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "j = b . length ( ) - 1 ;",
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        15,
        3
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "j = b . length ( ) - 1 ;",
        "char a [ 1111 ] and b [ 1111 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘and’ token"
    }
  ]
}