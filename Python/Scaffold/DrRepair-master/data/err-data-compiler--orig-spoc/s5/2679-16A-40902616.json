{
  "meta": {
    "index": 2679,
    "hitid": "3INZSNUD80KH6JOL3CM0ZA8EHUHD9G",
    "workerid": "A1APYLD4DUK33J",
    "probid": "16A",
    "subid": "40902616"
  },
  "lines": [
    {
      "line": 0,
      "text": "create string array st with size 110",
      "code": "string st [ 110 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create integers n , m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n read m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create bool flg with flg = false",
      "code": "bool flg = false ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read st [ i ]",
      "code": "cin >> st [ i ] ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for j = 1 to size of st [ i ] exclusive",
      "code": "for ( int j = 1 ; j < st [ i ] . size ( ) ; j ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if st [ i ] [ j ] is not st [ i ] [ j - 1 ] or i is greater than 1 and st [ i ] [ j ] is st [ i - 1 ] [ j ]",
      "code": "if ( st [ i ] [ j ] != st [ i ] [ j - 1 ] || i > 1 && st [ i ] [ j ] == st [ i - 1 ] [ j ] )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "set flg to true",
      "code": "flg = true ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if flg is true",
      "code": "if ( flg )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string * st [ 110 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> n read m ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( j = 1 ; j < st [ i ] . size ( ) ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( st [ i ] [ j ] != st [ i ] [ j - 1 ] || st > 1 && st [ i ] [ j ] == st [ i - 1 ] [ j ] )"
      ],
      "err_line": 8,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "if ( flg ) return ;"
      ],
      "err_line": 14,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "cin >> n read m ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        5,
        3,
        10
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "cin >> n read m ;",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        5,
        3,
        10,
        4
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "cin >> n read m ;",
        "break break ;",
        "bool flg = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        5,
        3,
        10,
        6
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "cin >> n read m ;",
        "break break ;",
        "cout << st [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        5,
        3,
        10,
        0
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "cin >> n read m ;",
        "break break ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        5,
        3,
        4
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "cin >> n read m ;",
        "bool flg = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        5,
        3,
        4,
        6
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "cin >> n read m ;",
        "bool flg = 1 ;",
        "cout << st [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        5,
        3,
        4,
        0
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "cin >> n read m ;",
        "bool flg = 1 ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        5,
        3,
        6
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "cin >> n read m ;",
        "cout << st [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        5,
        3,
        6,
        0
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "cin >> n read m ;",
        "cout << st [ i ] ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        5,
        3,
        0
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "cin >> n read m ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10,
        4
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;",
        "bool flg = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10,
        4,
        6
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;",
        "bool flg = 1 ;",
        "cout << st [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10,
        4,
        0
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;",
        "bool flg = 1 ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10,
        6
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;",
        "cout << st [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10,
        6,
        0
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;",
        "cout << st [ i ] ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10,
        0
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool flg = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        4,
        6
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool flg = 1 ;",
        "cout << st [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        4,
        6,
        0
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool flg = 1 ;",
        "cout << st [ i ] ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        4,
        0
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool flg = 1 ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "cout << st [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        0
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "cout << st [ i ] ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        0
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "string * st [ 110 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "cin >> n read m ;",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        3,
        10,
        4
      ],
      "mod_code": [
        "cin >> n read m ;",
        "break break ;",
        "bool flg = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        3,
        10,
        4,
        6
      ],
      "mod_code": [
        "cin >> n read m ;",
        "break break ;",
        "bool flg = 1 ;",
        "cout << st [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        3,
        10,
        4,
        0
      ],
      "mod_code": [
        "cin >> n read m ;",
        "break break ;",
        "bool flg = 1 ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        3,
        10,
        6
      ],
      "mod_code": [
        "cin >> n read m ;",
        "break break ;",
        "cout << st [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        3,
        10,
        6,
        0
      ],
      "mod_code": [
        "cin >> n read m ;",
        "break break ;",
        "cout << st [ i ] ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        3,
        10,
        0
      ],
      "mod_code": [
        "cin >> n read m ;",
        "break break ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "cin >> n read m ;",
        "bool flg = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        3,
        4,
        6
      ],
      "mod_code": [
        "cin >> n read m ;",
        "bool flg = 1 ;",
        "cout << st [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        0
      ],
      "mod_code": [
        "cin >> n read m ;",
        "bool flg = 1 ;",
        "cout << st [ i ] ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        3,
        4,
        0
      ],
      "mod_code": [
        "cin >> n read m ;",
        "bool flg = 1 ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "cin >> n read m ;",
        "cout << st [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        3,
        6,
        0
      ],
      "mod_code": [
        "cin >> n read m ;",
        "cout << st [ i ] ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        3,
        0
      ],
      "mod_code": [
        "cin >> n read m ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "break break ;",
        "bool flg = 1 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        4,
        6
      ],
      "mod_code": [
        "break break ;",
        "bool flg = 1 ;",
        "cout << st [ i ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        4,
        6,
        0
      ],
      "mod_code": [
        "break break ;",
        "bool flg = 1 ;",
        "cout << st [ i ] ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘size’ in ‘st[i]’, which is of pointer type ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ (maybe you meant to use ‘->’ ?)"
    },
    {
      "mod_line": [
        10,
        4,
        0
      ],
      "mod_code": [
        "break break ;",
        "bool flg = 1 ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "break break ;",
        "cout << st [ i ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        6,
        0
      ],
      "mod_code": [
        "break break ;",
        "cout << st [ i ] ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘size’ in ‘st[i]’, which is of pointer type ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ (maybe you meant to use ‘->’ ?)"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "break break ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        4,
        6,
        0
      ],
      "mod_code": [
        "bool flg = 1 ;",
        "cout << st [ i ] ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘size’ in ‘st[i]’, which is of pointer type ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ (maybe you meant to use ‘->’ ?)"
    },
    {
      "mod_line": [
        4,
        0
      ],
      "mod_code": [
        "bool flg = 1 ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        6,
        0
      ],
      "mod_code": [
        "cout << st [ i ] ;",
        "string * st [ 110 ] ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘size’ in ‘st[i]’, which is of pointer type ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ (maybe you meant to use ‘->’ ?)"
    }
  ]
}