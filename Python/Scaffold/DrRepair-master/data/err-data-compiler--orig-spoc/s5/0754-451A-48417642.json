{
  "meta": {
    "index": 754,
    "hitid": "3FW4EL5A3LIJ3P56LEN4T49WFZT22K",
    "workerid": "AIWEXPJAU66D9",
    "probid": "451A",
    "subid": "48417642"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare long long int variables n and m",
      "code": "long long int n , m ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create bool b = true",
      "code": "bool b = true ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while n is not 0 & & m is not 0",
      "code": "while ( n != 0 && m != 0 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "invert b",
      "code": "b = ! b ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "decrement n",
      "code": "n -- ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "decrement m",
      "code": "m -- ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if b is false",
      "code": "if ( ! b )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print \" Akshat \"",
      "code": "cout << \" Akshat \"",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print a new line",
      "code": "<< \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" Malvika \"",
      "code": "cout << \" Malvika \"",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print a new line",
      "code": "<< \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cout << \" Akshat \" << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "cout << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cout << \" Malvika \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "cout << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long int n , n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int n’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cout << \" Akshat \" ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cout << \" Malvika \" ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "b = b ;",
        "cout << \" Akshat \" << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        10,
        11,
        13
      ],
      "mod_code": [
        "b = b ;",
        "cout << \" Akshat \" << endl ;",
        "cout << endl ;",
        "cout << \" Malvika \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        10,
        11,
        14
      ],
      "mod_code": [
        "b = b ;",
        "cout << \" Akshat \" << endl ;",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        10,
        13
      ],
      "mod_code": [
        "b = b ;",
        "cout << \" Akshat \" << endl ;",
        "cout << \" Malvika \" << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        10,
        13,
        14
      ],
      "mod_code": [
        "b = b ;",
        "cout << \" Akshat \" << endl ;",
        "cout << \" Malvika \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        10,
        14
      ],
      "mod_code": [
        "b = b ;",
        "cout << \" Akshat \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "b = b ;",
        "cout << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        11,
        13
      ],
      "mod_code": [
        "b = b ;",
        "cout << endl ;",
        "cout << \" Malvika \" << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        11,
        13,
        14
      ],
      "mod_code": [
        "b = b ;",
        "cout << endl ;",
        "cout << \" Malvika \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        11,
        14
      ],
      "mod_code": [
        "b = b ;",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "b = b ;",
        "cout << \" Malvika \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        14
      ],
      "mod_code": [
        "b = b ;",
        "cout << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        10,
        11,
        13
      ],
      "mod_code": [
        "cout << \" Akshat \" << endl ;",
        "cout << endl ;",
        "cout << \" Malvika \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        11,
        13,
        5
      ],
      "mod_code": [
        "cout << \" Akshat \" << endl ;",
        "cout << endl ;",
        "cout << \" Malvika \" << endl ;",
        "b = 0 ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        11,
        14
      ],
      "mod_code": [
        "cout << \" Akshat \" << endl ;",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        10,
        11,
        14,
        5
      ],
      "mod_code": [
        "cout << \" Akshat \" << endl ;",
        "cout << endl ;",
        "cout << endl ;",
        "b = 0 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "cout << \" Akshat \" << endl ;",
        "cout << \" Malvika \" << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        13,
        14
      ],
      "mod_code": [
        "cout << \" Akshat \" << endl ;",
        "cout << \" Malvika \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        13,
        14,
        5
      ],
      "mod_code": [
        "cout << \" Akshat \" << endl ;",
        "cout << \" Malvika \" << endl ;",
        "cout << endl ;",
        "b = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        13,
        5
      ],
      "mod_code": [
        "cout << \" Akshat \" << endl ;",
        "cout << \" Malvika \" << endl ;",
        "b = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        14
      ],
      "mod_code": [
        "cout << \" Akshat \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        14,
        5
      ],
      "mod_code": [
        "cout << \" Akshat \" << endl ;",
        "cout << endl ;",
        "b = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        10,
        5
      ],
      "mod_code": [
        "cout << \" Akshat \" << endl ;",
        "b = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" Malvika \" << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        11,
        13,
        14
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" Malvika \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        11,
        13,
        14,
        5
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" Malvika \" << endl ;",
        "cout << endl ;",
        "b = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        11,
        13,
        5
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" Malvika \" << endl ;",
        "b = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        11,
        14,
        5
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << endl ;",
        "b = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        11,
        5
      ],
      "mod_code": [
        "cout << endl ;",
        "b = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        13,
        5
      ],
      "mod_code": [
        "cout << \" Malvika \" << endl ;",
        "b = 0 ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        5
      ],
      "mod_code": [
        "cout << endl ;",
        "b = 0 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘cout’"
    }
  ]
}