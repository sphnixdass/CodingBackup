{
  "meta": {
    "index": 1407,
    "hitid": "3BO3NEOQM0BCJDECNW1BM2ZBGJMIAM",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "259A",
    "subid": "47264663"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string array of size 8",
      "code": "string s [ 8 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 0 to 7 , read s [ i ]",
      "code": "for ( int i = 0 ; i < 8 ; i ++ ) cin >> s [ i ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "fg = integer with fg = 0",
      "code": "int fg = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 7",
      "code": "for ( int i = 0 ; i < 8 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "fg = 0",
      "code": "fg = 0 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "for j = 0 to 6",
      "code": "for ( int j = 0 ; j < 7 ; j ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if ( s [ i ] [ j ] is s [ i ] [ j + 1 ] )",
      "code": "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "fg = 1",
      "code": "fg = 1 ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if ( fg is 1 ) , break loop",
      "code": "if ( fg == 1 ) { break ; }",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if ( fg )",
      "code": "if ( fg )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string * s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( j = 0 ; j < 6 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "else"
      ],
      "err_line": 14,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        14
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "else"
      ],
      "err_line": 14,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        14,
        7
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "else",
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        14,
        7,
        1
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "else",
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "string * s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        5,
        14,
        7,
        8
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "else",
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "long long fg = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        14,
        7,
        9
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "else",
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        14,
        1
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "else",
        "string * s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        5,
        14,
        1,
        8
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "else",
        "string * s [ 8 ] ;",
        "long long fg = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        5,
        14,
        1,
        9
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "else",
        "string * s [ 8 ] ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        5,
        14,
        8
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "else",
        "long long fg = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        14,
        8,
        9
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "else",
        "long long fg = 1 ;",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        14,
        9
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "else",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        7,
        1
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "string * s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        5,
        7,
        1,
        8
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "string * s [ 8 ] ;",
        "long long fg = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        5,
        7,
        1,
        9
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "string * s [ 8 ] ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        5,
        7,
        8
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "long long fg = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        7,
        8,
        9
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "long long fg = 1 ;",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        7,
        9
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "string * s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        5,
        1,
        8
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "string * s [ 8 ] ;",
        "long long fg = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        5,
        1,
        8,
        9
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "string * s [ 8 ] ;",
        "long long fg = 1 ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        5,
        1,
        9
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "string * s [ 8 ] ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        5,
        8,
        9
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "long long fg = 1 ;",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "long long fg = 0 ;",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        7
      ],
      "mod_code": [
        "else",
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        14,
        7,
        1
      ],
      "mod_code": [
        "else",
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "string * s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        14,
        7,
        1,
        8
      ],
      "mod_code": [
        "else",
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "string * s [ 8 ] ;",
        "long long fg = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        14,
        7,
        1,
        9
      ],
      "mod_code": [
        "else",
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "string * s [ 8 ] ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        14,
        7,
        8
      ],
      "mod_code": [
        "else",
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "long long fg = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        14,
        7,
        8,
        9
      ],
      "mod_code": [
        "else",
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "long long fg = 1 ;",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        14,
        7,
        9
      ],
      "mod_code": [
        "else",
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        14,
        1
      ],
      "mod_code": [
        "else",
        "string * s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        14,
        1,
        8
      ],
      "mod_code": [
        "else",
        "string * s [ 8 ] ;",
        "long long fg = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        14,
        1,
        8,
        9
      ],
      "mod_code": [
        "else",
        "string * s [ 8 ] ;",
        "long long fg = 1 ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        14,
        1,
        9
      ],
      "mod_code": [
        "else",
        "string * s [ 8 ] ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        14,
        8
      ],
      "mod_code": [
        "else",
        "long long fg = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        14,
        8,
        9
      ],
      "mod_code": [
        "else",
        "long long fg = 1 ;",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        9
      ],
      "mod_code": [
        "else",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "string * s [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        7,
        1,
        8
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "string * s [ 8 ] ;",
        "long long fg = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        7,
        1,
        8,
        9
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "string * s [ 8 ] ;",
        "long long fg = 1 ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        7,
        1,
        9
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "string * s [ 8 ] ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "long long fg = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        8,
        9
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "long long fg = 1 ;",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == s [ i ] [ j + 1 ] ) )",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "string * s [ 8 ] ;",
        "long long fg = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        1,
        8,
        9
      ],
      "mod_code": [
        "string * s [ 8 ] ;",
        "long long fg = 1 ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "string * s [ 8 ] ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’)"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "long long fg = 1 ;",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}