{
  "meta": {
    "index": 1880,
    "hitid": "3UL5XDRDNCDMO1QIJEY312PBL9J58Y",
    "workerid": "A1AYVATMT88U1W",
    "probid": "572A",
    "subid": "46822785"
  },
  "lines": [
    {
      "line": 0,
      "text": "let r1 , r2 be integer array of size 100001",
      "code": "int r1 [ 100001 ] , r2 [ 100001 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let a , b , c , d , e , f , g , h be integers",
      "code": "int a , b , c , d , e , f , g , h ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let v be a vector of integers",
      "code": "vector < int > v ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while read a , b",
      "code": "while ( cin >> a >> b )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read c , d",
      "code": "cin >> c >> d ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "for e = 1 to a inclusive , read r1 [ e ]",
      "code": "for ( e = 1 ; e <= a ; e ++ ) { cin >> r1 [ e ] ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "f equals 0",
      "code": "f = 0 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for e = 1 to b inclusive",
      "code": "for ( e = 1 ; e <= b ; e ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "read r2 [ e ]",
      "code": "cin >> r2 [ e ] ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if r2 [ e ] > r1 [ c ] , increase f by 1",
      "code": "if ( r2 [ e ] > r1 [ c ] ) { f ++ ; }",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if f is greater than or equal to d",
      "code": "if ( f >= d )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "print YES and newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 15,
      "text": "print NO and newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int r1 [ 100001 ] , r2 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( { cin >> a >> b )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "int r1 [ 100001 ] , r2 ;",
        "cout << r2 [ e ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        9,
        5
      ],
      "mod_code": [
        "int r1 [ 100001 ] , r2 ;",
        "cout << r2 [ e ] ;",
        "while ( cin >> c >> d )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        9,
        5,
        4
      ],
      "mod_code": [
        "int r1 [ 100001 ] , r2 ;",
        "cout << r2 [ e ] ;",
        "while ( cin >> c >> d )",
        "while ( { cin >> a >> b )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        5,
        12
      ],
      "mod_code": [
        "int r1 [ 100001 ] , r2 ;",
        "cout << r2 [ e ] ;",
        "while ( cin >> c >> d )",
        "if ( f <= d )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        9,
        4
      ],
      "mod_code": [
        "int r1 [ 100001 ] , r2 ;",
        "cout << r2 [ e ] ;",
        "while ( { cin >> a >> b )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        4,
        12
      ],
      "mod_code": [
        "int r1 [ 100001 ] , r2 ;",
        "cout << r2 [ e ] ;",
        "while ( { cin >> a >> b )",
        "if ( f <= d )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        12
      ],
      "mod_code": [
        "int r1 [ 100001 ] , r2 ;",
        "cout << r2 [ e ] ;",
        "if ( f <= d )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "int r1 [ 100001 ] , r2 ;",
        "while ( cin >> c >> d )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        5,
        4
      ],
      "mod_code": [
        "int r1 [ 100001 ] , r2 ;",
        "while ( cin >> c >> d )",
        "while ( { cin >> a >> b )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        4,
        12
      ],
      "mod_code": [
        "int r1 [ 100001 ] , r2 ;",
        "while ( cin >> c >> d )",
        "while ( { cin >> a >> b )",
        "if ( f <= d )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        12
      ],
      "mod_code": [
        "int r1 [ 100001 ] , r2 ;",
        "while ( cin >> c >> d )",
        "if ( f <= d )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "int r1 [ 100001 ] , r2 ;",
        "while ( { cin >> a >> b )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4,
        12
      ],
      "mod_code": [
        "int r1 [ 100001 ] , r2 ;",
        "while ( { cin >> a >> b )",
        "if ( f <= d )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "int r1 [ 100001 ] , r2 ;",
        "if ( f <= d )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        5,
        4
      ],
      "mod_code": [
        "cout << r2 [ e ] ;",
        "while ( cin >> c >> d )",
        "while ( { cin >> a >> b )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        5,
        4,
        12
      ],
      "mod_code": [
        "cout << r2 [ e ] ;",
        "while ( cin >> c >> d )",
        "while ( { cin >> a >> b )",
        "if ( f <= d )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "cout << r2 [ e ] ;",
        "while ( { cin >> a >> b )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        4,
        12
      ],
      "mod_code": [
        "cout << r2 [ e ] ;",
        "while ( { cin >> a >> b )",
        "if ( f <= d )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "while ( cin >> c >> d )",
        "while ( { cin >> a >> b )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        4,
        12
      ],
      "mod_code": [
        "while ( cin >> c >> d )",
        "while ( { cin >> a >> b )",
        "if ( f <= d )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "while ( { cin >> a >> b )",
        "if ( f <= d )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘{’ token"
    }
  ]
}