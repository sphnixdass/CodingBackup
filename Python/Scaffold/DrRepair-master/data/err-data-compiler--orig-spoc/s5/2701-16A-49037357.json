{
  "meta": {
    "index": 2701,
    "hitid": "35ZRNT9RUISMVEQUCCZ6JRHRLGE3OM",
    "workerid": "A1APYLD4DUK33J",
    "probid": "16A",
    "subid": "49037357"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n read m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create 2d character array e with size n by m",
      "code": "char e [ n ] [ m ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integer flag with flag = 0",
      "code": "int flag = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for j = 0 to m exclusive , read e [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < m ; j ++ ) cin >> e [ i ] [ j ] ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create character t with t = e [ i ] [ 0 ]",
      "code": "char t = e [ i ] [ 0 ] ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "for j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if t is not e [ i ] [ j ] , set flag to 1",
      "code": "if ( t != e [ i ] [ j ] ) flag = 1 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 0 to n - 1 exclusive",
      "code": "for ( int i = 0 ; i < n - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if e [ i ] [ 0 ] is e [ i + 1 ] [ 0 ] , set flag to 1",
      "code": "if ( e [ i ] [ 0 ] == e [ i + 1 ] [ 0 ] ) flag = 1 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if flag is true",
      "code": "if ( flag )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> n read m ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char e [ n n ] [ m ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "char t = e [ i ] [ ' 0 ' ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( flag ) return ;"
      ],
      "err_line": 16,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "cin >> n read m ;",
        "char t = e [ i ] [ ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        8,
        7
      ],
      "mod_code": [
        "cin >> n read m ;",
        "char t = e [ i ] [ ' 0 ' ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        8,
        7,
        9
      ],
      "mod_code": [
        "cin >> n read m ;",
        "char t = e [ i ] [ ' 0 ' ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        8,
        7,
        16
      ],
      "mod_code": [
        "cin >> n read m ;",
        "char t = e [ i ] [ ' 0 ' ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( flag ) return ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        8,
        7,
        13
      ],
      "mod_code": [
        "cin >> n read m ;",
        "char t = e [ i ] [ ' 0 ' ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        8,
        9
      ],
      "mod_code": [
        "cin >> n read m ;",
        "char t = e [ i ] [ ' 0 ' ;",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        8,
        9,
        16
      ],
      "mod_code": [
        "cin >> n read m ;",
        "char t = e [ i ] [ ' 0 ' ;",
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( flag ) return ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        8,
        9,
        13
      ],
      "mod_code": [
        "cin >> n read m ;",
        "char t = e [ i ] [ ' 0 ' ;",
        "for ( j = 0 ; j < m ; j ++ )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        8,
        16
      ],
      "mod_code": [
        "cin >> n read m ;",
        "char t = e [ i ] [ ' 0 ' ;",
        "if ( flag ) return ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        8,
        16,
        13
      ],
      "mod_code": [
        "cin >> n read m ;",
        "char t = e [ i ] [ ' 0 ' ;",
        "if ( flag ) return ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        8,
        13
      ],
      "mod_code": [
        "cin >> n read m ;",
        "char t = e [ i ] [ ' 0 ' ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "cin >> n read m ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        7,
        9
      ],
      "mod_code": [
        "cin >> n read m ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        7,
        9,
        16
      ],
      "mod_code": [
        "cin >> n read m ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( flag ) return ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        7,
        9,
        13
      ],
      "mod_code": [
        "cin >> n read m ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < m ; j ++ )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        7,
        16
      ],
      "mod_code": [
        "cin >> n read m ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( flag ) return ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        7,
        16,
        13
      ],
      "mod_code": [
        "cin >> n read m ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( flag ) return ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        7,
        13
      ],
      "mod_code": [
        "cin >> n read m ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "cin >> n read m ;",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        9,
        16
      ],
      "mod_code": [
        "cin >> n read m ;",
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( flag ) return ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        9,
        16,
        13
      ],
      "mod_code": [
        "cin >> n read m ;",
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( flag ) return ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        9,
        13
      ],
      "mod_code": [
        "cin >> n read m ;",
        "for ( j = 0 ; j < m ; j ++ )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        16
      ],
      "mod_code": [
        "cin >> n read m ;",
        "if ( flag ) return ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        16,
        13
      ],
      "mod_code": [
        "cin >> n read m ;",
        "if ( flag ) return ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "cin >> n read m ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "char t = e [ i ] [ ' 0 ' ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7,
        9
      ],
      "mod_code": [
        "char t = e [ i ] [ ' 0 ' ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7,
        9,
        16
      ],
      "mod_code": [
        "char t = e [ i ] [ ' 0 ' ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( flag ) return ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7,
        9,
        13
      ],
      "mod_code": [
        "char t = e [ i ] [ ' 0 ' ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < m ; j ++ )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7,
        16
      ],
      "mod_code": [
        "char t = e [ i ] [ ' 0 ' ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( flag ) return ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7,
        16,
        13
      ],
      "mod_code": [
        "char t = e [ i ] [ ' 0 ' ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( flag ) return ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7,
        13
      ],
      "mod_code": [
        "char t = e [ i ] [ ' 0 ' ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "char t = e [ i ] [ ' 0 ' ;",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        9,
        16
      ],
      "mod_code": [
        "char t = e [ i ] [ ' 0 ' ;",
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( flag ) return ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        9,
        16,
        13
      ],
      "mod_code": [
        "char t = e [ i ] [ ' 0 ' ;",
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( flag ) return ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        9,
        13
      ],
      "mod_code": [
        "char t = e [ i ] [ ' 0 ' ;",
        "for ( j = 0 ; j < m ; j ++ )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        16
      ],
      "mod_code": [
        "char t = e [ i ] [ ' 0 ' ;",
        "if ( flag ) return ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        16,
        13
      ],
      "mod_code": [
        "char t = e [ i ] [ ' 0 ' ;",
        "if ( flag ) return ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "char t = e [ i ] [ ' 0 ' ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        16
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( flag ) return ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        16,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( flag ) return ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < m ; j ++ )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        16
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( flag ) return ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        16,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( flag ) return ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        16
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( flag ) return ;"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        16,
        13
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( flag ) return ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        13
      ],
      "mod_code": [
        "if ( flag ) return ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}