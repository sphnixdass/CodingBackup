{
  "meta": {
    "index": 1112,
    "hitid": "3NFWQRSHVE8TJDPP8ON0FRXMXKSGFL",
    "workerid": "AIWEXPJAU66D9",
    "probid": "41A",
    "subid": "42118916"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare strings s and t",
      "code": "string s , t ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s and t",
      "code": "cin >> s >> t ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "reverse string s",
      "code": "reverse ( s . begin ( ) , s . end ( ) ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if s = t",
      "code": "if ( s == t )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string s declare t ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cout << s >> t ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "reverse ( s . begin ( ) + s . end ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( s == ' t ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "if ( s == ' t ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        5,
        4,
        1
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "if ( s == ' t ' )",
        "string s declare t ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        5,
        4,
        1,
        3
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "if ( s == ' t ' )",
        "string s declare t ;",
        "reverse ( s . begin ( ) + s . end ( ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        5,
        4,
        1,
        2
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "if ( s == ' t ' )",
        "string s declare t ;",
        "cout << s >> t ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        5,
        4,
        3
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "if ( s == ' t ' )",
        "reverse ( s . begin ( ) + s . end ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        4,
        3,
        2
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "if ( s == ' t ' )",
        "reverse ( s . begin ( ) + s . end ( ) ) ;",
        "cout << s >> t ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        4,
        2
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "if ( s == ' t ' )",
        "cout << s >> t ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "string s declare t ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        5,
        1,
        3
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "string s declare t ;",
        "reverse ( s . begin ( ) + s . end ( ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        5,
        1,
        3,
        2
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "string s declare t ;",
        "reverse ( s . begin ( ) + s . end ( ) ) ;",
        "cout << s >> t ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        5,
        1,
        2
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "string s declare t ;",
        "cout << s >> t ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "reverse ( s . begin ( ) + s . end ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        3,
        2
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "reverse ( s . begin ( ) + s . end ( ) ) ;",
        "cout << s >> t ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "cout << s >> t ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "if ( s == ' t ' )",
        "string s declare t ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        4,
        1,
        3
      ],
      "mod_code": [
        "if ( s == ' t ' )",
        "string s declare t ;",
        "reverse ( s . begin ( ) + s . end ( ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        4,
        1,
        3,
        2
      ],
      "mod_code": [
        "if ( s == ' t ' )",
        "string s declare t ;",
        "reverse ( s . begin ( ) + s . end ( ) ) ;",
        "cout << s >> t ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        4,
        1,
        2
      ],
      "mod_code": [
        "if ( s == ' t ' )",
        "string s declare t ;",
        "cout << s >> t ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "if ( s == ' t ' )",
        "reverse ( s . begin ( ) + s . end ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        3,
        2
      ],
      "mod_code": [
        "if ( s == ' t ' )",
        "reverse ( s . begin ( ) + s . end ( ) ) ;",
        "cout << s >> t ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "if ( s == ' t ' )",
        "cout << s >> t ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "string s declare t ;",
        "reverse ( s . begin ( ) + s . end ( ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        3,
        2
      ],
      "mod_code": [
        "string s declare t ;",
        "reverse ( s . begin ( ) + s . end ( ) ) ;",
        "cout << s >> t ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "string s declare t ;",
        "cout << s >> t ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "reverse ( s . begin ( ) + s . end ( ) ) ;",
        "cout << s >> t ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}