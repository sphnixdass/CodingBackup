{
  "meta": {
    "index": 1708,
    "hitid": "3R5OYNIC2C39FV0P6RICQ4QFQM5TPX",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "975A",
    "subid": "48770928"
  },
  "lines": [
    {
      "line": 0,
      "text": "in string function raiz taking c = string",
      "code": "string raiz ( string c )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "abs = int array of length 26 with abs [ 0 ] = 0",
      "code": "int abc [ 26 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "resp = string",
      "code": "string resp ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for long long i = 0 to size of c to long long , then increment abc [ c [ i ] - ' a ' ]",
      "code": "for ( long long i = 0 ; i < ( long long ) c . size ( ) ; i ++ ) { abc [ c [ i ] - ' a ' ] ++ ; }",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for long long i = 0 to long long ( 26 )",
      "code": "for ( long long i = 0 ; i < ( long long ) 26 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if abc at i > 0 then push back ( i + ' a ' ) to char into resp",
      "code": "if ( abc [ i ] > 0 ) resp . push_back ( ( char ) ( i + ' a ' ) ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "return resp",
      "code": "return resp ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 10,
      "text": "n = long long",
      "code": "long long n ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "arr = string array length n",
      "code": "string arr [ n ] ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for long long i = 0 to long long n exclusive then read arr [ i ]",
      "code": "for ( long long i = 0 ; i < ( long long ) n ; i ++ ) { cin >> arr [ i ] ; }",
      "indent": 1
    },
    {
      "line": 14,
      "text": "raices = vector of string",
      "code": "vector < string > raices ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for long i = 0 to long long n",
      "code": "for ( long long i = 0 ; i < ( long long ) n ; i ++ )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "aux = string = raiz of arr [ i ]",
      "code": "string aux = raiz ( arr [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "no_encont = true = bool",
      "code": "bool no_encont = true ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "for long long k = 0 to long long size fo raices",
      "code": "for ( long long k = 0 ; k < ( long long ) raices . size ( ) ; k ++ )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if compare aux form raices [ k ] = 0 then n_encont = flase",
      "code": "if ( raices [ k ] . compare ( aux ) == 0 ) no_encont = false ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if n_encont then push back aux into raices",
      "code": "if ( no_encont ) raices . push_back ( aux ) ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print size of raices",
      "code": "cout << raices . size ( ) << endl ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( long long k = 0 ; k < raices ; k ++ )"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator<’ (operand types are ‘long long int’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }"
      ],
      "err_line": 19,
      "err_msg": "‘n_encont’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( n_encont ) raices . push_back ( aux ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘n_encont’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int abs [ 26 ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( long long i = 0 ; i < long long ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "return resp"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 13,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "char arr [ n ] ;"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘arr[i]’ from ‘char’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "vector < vector < string > raices ;"
      ],
      "err_line": 14,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "string * aux = raiz ( arr [ i ] ) ;"
      ],
      "err_line": 16,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( long long k = 0 ; k < raices ; ++ k )"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator<’ (operand types are ‘long long int’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = false ; }"
      ],
      "err_line": 19,
      "err_msg": "‘n_encont’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( n_encont ) { raices . push_back ( aux ) ; }"
      ],
      "err_line": 21,
      "err_msg": "‘n_encont’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        18
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "for ( long long k = 0 ; k < raices ; k ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        18,
        19
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        18,
        21
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "if ( n_encont ) raices . push_back ( aux ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        18,
        12
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "char arr [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        19
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        19,
        21
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }",
        "if ( n_encont ) raices . push_back ( aux ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        19,
        12
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }",
        "char arr [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        21
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "if ( n_encont ) raices . push_back ( aux ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        21,
        12
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "if ( n_encont ) raices . push_back ( aux ) ;",
        "char arr [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        12
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "char arr [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "for ( long long k = 0 ; k < raices ; k ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        18,
        19
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        18,
        19,
        21
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }",
        "if ( n_encont ) raices . push_back ( aux ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        18,
        19,
        12
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }",
        "char arr [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        18,
        21
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "if ( n_encont ) raices . push_back ( aux ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        18,
        21,
        12
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "if ( n_encont ) raices . push_back ( aux ) ;",
        "char arr [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        18,
        12
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "char arr [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        19
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        19,
        21
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }",
        "if ( n_encont ) raices . push_back ( aux ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        19,
        21,
        12
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }",
        "if ( n_encont ) raices . push_back ( aux ) ;",
        "char arr [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        19,
        12
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }",
        "char arr [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        21
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "if ( n_encont ) raices . push_back ( aux ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        21,
        12
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "if ( n_encont ) raices . push_back ( aux ) ;",
        "char arr [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int abs [ 26 ] = { 0 } ;",
        "char arr [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘abc’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        18
      ],
      "mod_code": [
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "for ( long long k = 0 ; k < raices ; k ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        4,
        18,
        19
      ],
      "mod_code": [
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        4,
        18,
        19,
        21
      ],
      "mod_code": [
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }",
        "if ( n_encont ) raices . push_back ( aux ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        4,
        18,
        19,
        12
      ],
      "mod_code": [
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }",
        "char arr [ n ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        4,
        18,
        21
      ],
      "mod_code": [
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "if ( n_encont ) raices . push_back ( aux ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        4,
        18,
        21,
        12
      ],
      "mod_code": [
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "if ( n_encont ) raices . push_back ( aux ) ;",
        "char arr [ n ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        4,
        18,
        12
      ],
      "mod_code": [
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "char arr [ n ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        4,
        19
      ],
      "mod_code": [
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        4,
        19,
        21
      ],
      "mod_code": [
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }",
        "if ( n_encont ) raices . push_back ( aux ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        4,
        19,
        21,
        12
      ],
      "mod_code": [
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }",
        "if ( n_encont ) raices . push_back ( aux ) ;",
        "char arr [ n ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        4,
        19,
        12
      ],
      "mod_code": [
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }",
        "char arr [ n ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        4,
        21
      ],
      "mod_code": [
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "if ( n_encont ) raices . push_back ( aux ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        4,
        21,
        12
      ],
      "mod_code": [
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "if ( n_encont ) raices . push_back ( aux ) ;",
        "char arr [ n ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "for ( long long i = 0 ; i < long long ( 26 ) ; i ++ )",
        "char arr [ n ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        18,
        19
      ],
      "mod_code": [
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator<’ (operand types are ‘long long int’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        18,
        19,
        21
      ],
      "mod_code": [
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }",
        "if ( n_encont ) raices . push_back ( aux ) ;"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator<’ (operand types are ‘long long int’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        18,
        19,
        21,
        12
      ],
      "mod_code": [
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }",
        "if ( n_encont ) raices . push_back ( aux ) ;",
        "char arr [ n ] ;"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘arr[i]’ from ‘char’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        18,
        19,
        12
      ],
      "mod_code": [
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }",
        "char arr [ n ] ;"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘arr[i]’ from ‘char’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        18,
        21
      ],
      "mod_code": [
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "if ( n_encont ) raices . push_back ( aux ) ;"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator<’ (operand types are ‘long long int’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        18,
        21,
        12
      ],
      "mod_code": [
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "if ( n_encont ) raices . push_back ( aux ) ;",
        "char arr [ n ] ;"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘arr[i]’ from ‘char’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        18,
        12
      ],
      "mod_code": [
        "for ( long long k = 0 ; k < raices ; k ++ )",
        "char arr [ n ] ;"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘arr[i]’ from ‘char’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        19,
        21
      ],
      "mod_code": [
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }",
        "if ( n_encont ) raices . push_back ( aux ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘n_encont’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        21,
        12
      ],
      "mod_code": [
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }",
        "if ( n_encont ) raices . push_back ( aux ) ;",
        "char arr [ n ] ;"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘arr[i]’ from ‘char’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        19,
        12
      ],
      "mod_code": [
        "if ( aux . compare ( raices [ k ] ) == 0 ) { n_encont = true ; }",
        "char arr [ n ] ;"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘arr[i]’ from ‘char’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        21,
        12
      ],
      "mod_code": [
        "if ( n_encont ) raices . push_back ( aux ) ;",
        "char arr [ n ] ;"
      ],
      "err_line": 16,
      "err_msg": "could not convert ‘arr[i]’ from ‘char’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    }
  ]
}