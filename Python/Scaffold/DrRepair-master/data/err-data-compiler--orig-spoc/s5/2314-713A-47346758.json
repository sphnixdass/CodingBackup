{
  "meta": {
    "index": 2314,
    "hitid": "3RIHDBQ1NESDPJCHEH9VVHTWANVMHG",
    "workerid": "AIWEXPJAU66D9",
    "probid": "713A",
    "subid": "47346758"
  },
  "lines": [
    {
      "line": 0,
      "text": "a = map from long long integers to long long integers",
      "code": "map < long long int , long long int > a ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "long long int function getsolved with long long int argument x",
      "code": "long long int getsolved ( long long int x )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "s is a new string = \" \"",
      "code": "string s = \" \" ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while x > 0",
      "code": "while ( x > 0 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "add x % 2 to s",
      "code": "s += x % 2 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "assign the new value = x / 10 to x",
      "code": "x = x / 10 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "reverse s",
      "code": "reverse ( s . begin ( ) , s . end ( ) ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "declare new long long integer alpha = 0",
      "code": "long long int alpha = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to length of s exclusive , set alpha to s [ i ] + 10 * alpha",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ ) alpha = ( long long int ) s [ i ] + 10 * alpha ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "return alpha",
      "code": "return alpha ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 13,
      "text": "declare new long long integer t",
      "code": "long long int t ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read user input to t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "create new character c",
      "code": "char c ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "create new long long integer num",
      "code": "long long int num ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "decrement t and loop further , while t is not 0",
      "code": "while ( t -- )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "read c and num from the input",
      "code": "cin >> c >> num ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "create new long long int y with value = the result of getsolved ( num )",
      "code": "long long int y = getsolved ( num ) ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if c is equal to ' + '",
      "code": "if ( c == ' + ' )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "increment a [ y ]",
      "code": "a [ y ] ++ ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "else if c = ' - '",
      "code": "else if ( c == ' - ' )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "decrement a [ y ]",
      "code": "a [ y ] -- ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 25,
      "text": "print a [ y ] and \" \\ n \"",
      "code": "cout << a [ y ] << \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long int getsolved ( long long int x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string s , \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s = s + 2 % 2 ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 14,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "char n ;"
      ],
      "err_line": 18,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "int c >> num ;"
      ],
      "err_line": 18,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "if ( c == ' + ' ) break ;"
      ],
      "err_line": 22,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "string s , \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        4,
        2,
        25
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "string s , \" \" ;",
        "cout << a [ y ] << \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        4,
        2,
        25,
        20
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "string s , \" \" ;",
        "cout << a [ y ] << \" \\0 \" ;",
        "if ( c == ' + ' ) break ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        4,
        2,
        25,
        22
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "string s , \" \" ;",
        "cout << a [ y ] << \" \\0 \" ;",
        "else if ( c = ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        4,
        2,
        25,
        14
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "string s , \" \" ;",
        "cout << a [ y ] << \" \\0 \" ;",
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        4,
        2,
        20
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "string s , \" \" ;",
        "if ( c == ' + ' ) break ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        4,
        2,
        20,
        22
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "string s , \" \" ;",
        "if ( c == ' + ' ) break ;",
        "else if ( c = ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        4,
        2,
        20,
        14
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "string s , \" \" ;",
        "if ( c == ' + ' ) break ;",
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        4,
        2,
        22
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "string s , \" \" ;",
        "else if ( c = ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        4,
        2,
        22,
        14
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "string s , \" \" ;",
        "else if ( c = ' - ' )",
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        4,
        2,
        14
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "string s , \" \" ;",
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        4,
        25
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "cout << a [ y ] << \" \\0 \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        4,
        25,
        20
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "cout << a [ y ] << \" \\0 \" ;",
        "if ( c == ' + ' ) break ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        4,
        25,
        20,
        22
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "cout << a [ y ] << \" \\0 \" ;",
        "if ( c == ' + ' ) break ;",
        "else if ( c = ' - ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        4,
        25,
        20,
        14
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "cout << a [ y ] << \" \\0 \" ;",
        "if ( c == ' + ' ) break ;",
        "cin >> n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        4,
        25,
        22
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "cout << a [ y ] << \" \\0 \" ;",
        "else if ( c = ' - ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        4,
        25,
        22,
        14
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "cout << a [ y ] << \" \\0 \" ;",
        "else if ( c = ' - ' )",
        "cin >> n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        4,
        25,
        14
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "cout << a [ y ] << \" \\0 \" ;",
        "cin >> n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        4,
        20
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "if ( c == ' + ' ) break ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        4,
        20,
        22
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "if ( c == ' + ' ) break ;",
        "else if ( c = ' - ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        4,
        20,
        22,
        14
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "if ( c == ' + ' ) break ;",
        "else if ( c = ' - ' )",
        "cin >> n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        4,
        20,
        14
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "if ( c == ' + ' ) break ;",
        "cin >> n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        4,
        22
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "else if ( c = ' - ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        4,
        22,
        14
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "else if ( c = ' - ' )",
        "cin >> n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "s = s + 2 % 2 ;",
        "cin >> n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator+’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        2,
        25
      ],
      "mod_code": [
        "string s , \" \" ;",
        "cout << a [ y ] << \" \\0 \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2,
        25,
        20
      ],
      "mod_code": [
        "string s , \" \" ;",
        "cout << a [ y ] << \" \\0 \" ;",
        "if ( c == ' + ' ) break ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2,
        25,
        20,
        22
      ],
      "mod_code": [
        "string s , \" \" ;",
        "cout << a [ y ] << \" \\0 \" ;",
        "if ( c == ' + ' ) break ;",
        "else if ( c = ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2,
        25,
        20,
        14
      ],
      "mod_code": [
        "string s , \" \" ;",
        "cout << a [ y ] << \" \\0 \" ;",
        "if ( c == ' + ' ) break ;",
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2,
        25,
        22
      ],
      "mod_code": [
        "string s , \" \" ;",
        "cout << a [ y ] << \" \\0 \" ;",
        "else if ( c = ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2,
        25,
        22,
        14
      ],
      "mod_code": [
        "string s , \" \" ;",
        "cout << a [ y ] << \" \\0 \" ;",
        "else if ( c = ' - ' )",
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2,
        25,
        14
      ],
      "mod_code": [
        "string s , \" \" ;",
        "cout << a [ y ] << \" \\0 \" ;",
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2,
        20
      ],
      "mod_code": [
        "string s , \" \" ;",
        "if ( c == ' + ' ) break ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2,
        20,
        22
      ],
      "mod_code": [
        "string s , \" \" ;",
        "if ( c == ' + ' ) break ;",
        "else if ( c = ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2,
        20,
        22,
        14
      ],
      "mod_code": [
        "string s , \" \" ;",
        "if ( c == ' + ' ) break ;",
        "else if ( c = ' - ' )",
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2,
        20,
        14
      ],
      "mod_code": [
        "string s , \" \" ;",
        "if ( c == ' + ' ) break ;",
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2,
        22
      ],
      "mod_code": [
        "string s , \" \" ;",
        "else if ( c = ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2,
        22,
        14
      ],
      "mod_code": [
        "string s , \" \" ;",
        "else if ( c = ' - ' )",
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "string s , \" \" ;",
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        25,
        20
      ],
      "mod_code": [
        "cout << a [ y ] << \" \\0 \" ;",
        "if ( c == ' + ' ) break ;"
      ],
      "err_line": 22,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        25,
        20,
        22
      ],
      "mod_code": [
        "cout << a [ y ] << \" \\0 \" ;",
        "if ( c == ' + ' ) break ;",
        "else if ( c = ' - ' )"
      ],
      "err_line": 22,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        25,
        20,
        22,
        14
      ],
      "mod_code": [
        "cout << a [ y ] << \" \\0 \" ;",
        "if ( c == ' + ' ) break ;",
        "else if ( c = ' - ' )",
        "cin >> n ;"
      ],
      "err_line": 14,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        20,
        14
      ],
      "mod_code": [
        "cout << a [ y ] << \" \\0 \" ;",
        "if ( c == ' + ' ) break ;",
        "cin >> n ;"
      ],
      "err_line": 14,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        22,
        14
      ],
      "mod_code": [
        "cout << a [ y ] << \" \\0 \" ;",
        "else if ( c = ' - ' )",
        "cin >> n ;"
      ],
      "err_line": 14,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        14
      ],
      "mod_code": [
        "cout << a [ y ] << \" \\0 \" ;",
        "cin >> n ;"
      ],
      "err_line": 14,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        22
      ],
      "mod_code": [
        "if ( c == ' + ' ) break ;",
        "else if ( c = ' - ' )"
      ],
      "err_line": 22,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        20,
        22,
        14
      ],
      "mod_code": [
        "if ( c == ' + ' ) break ;",
        "else if ( c = ' - ' )",
        "cin >> n ;"
      ],
      "err_line": 14,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        14
      ],
      "mod_code": [
        "if ( c == ' + ' ) break ;",
        "cin >> n ;"
      ],
      "err_line": 14,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        14
      ],
      "mod_code": [
        "else if ( c = ' - ' )",
        "cin >> n ;"
      ],
      "err_line": 14,
      "err_msg": "‘n’ was not declared in this scope"
    }
  ]
}