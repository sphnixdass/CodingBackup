{
  "meta": {
    "index": 150,
    "hitid": "3FI30CQHVKD193O3R9SIKATCPACB6G",
    "workerid": "A1MJVTR0PCKBWW",
    "probid": "915A",
    "subid": "48495499"
  },
  "lines": [
    {
      "line": 0,
      "text": "integers = cmp ( integer a , integer b )",
      "code": "bool cmp ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return a > b",
      "code": "return a > b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "integers = n , k",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n , k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "integers = a [ n + 1 ] , i",
      "code": "int a [ n + 1 ] , i ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read a [ i ]",
      "code": "for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 8,
      "text": "sort the values of 1 to a + n + 1",
      "code": "sort ( a + 1 , a + n + 1 , cmp ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for = 1 to less than or equal to n do the following",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if k modulo a [ i ] is 0 then do the following",
      "code": "if ( k % a [ i ] == 0 )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "output k / a [ i ]",
      "code": "cout << k / a [ i ] << endl ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void cmp ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 1 ; j <= n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        8,
        5,
        0
      ],
      "mod_code": [
        "cin >> a [ i ] ;",
        "sort ( a , a + n + 1 ) ;",
        "cin >> n >> n ;",
        "void cmp ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        10,
        0
      ],
      "mod_code": [
        "cin >> a [ i ] ;",
        "sort ( a , a + n + 1 ) ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "void cmp ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        0
      ],
      "mod_code": [
        "cin >> a [ i ] ;",
        "sort ( a , a + n + 1 ) ;",
        "void cmp ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        5,
        10,
        0
      ],
      "mod_code": [
        "cin >> a [ i ] ;",
        "cin >> n >> n ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "void cmp ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        5,
        0
      ],
      "mod_code": [
        "cin >> a [ i ] ;",
        "cin >> n >> n ;",
        "void cmp ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10,
        0
      ],
      "mod_code": [
        "cin >> a [ i ] ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "void cmp ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "cin >> a [ i ] ;",
        "void cmp ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        5,
        10,
        0
      ],
      "mod_code": [
        "sort ( a , a + n + 1 ) ;",
        "cin >> n >> n ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "void cmp ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        5,
        0
      ],
      "mod_code": [
        "sort ( a , a + n + 1 ) ;",
        "cin >> n >> n ;",
        "void cmp ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        5,
        0,
        7
      ],
      "mod_code": [
        "sort ( a , a + n + 1 ) ;",
        "cin >> n >> n ;",
        "void cmp ( int a , int b )",
        "cout << a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        10,
        0
      ],
      "mod_code": [
        "sort ( a , a + n + 1 ) ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "void cmp ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        10,
        0,
        7
      ],
      "mod_code": [
        "sort ( a , a + n + 1 ) ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "void cmp ( int a , int b )",
        "cout << a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "sort ( a , a + n + 1 ) ;",
        "void cmp ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        0,
        7
      ],
      "mod_code": [
        "sort ( a , a + n + 1 ) ;",
        "void cmp ( int a , int b )",
        "cout << a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        0
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "void cmp ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        0,
        7
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "if ( k % a [ i ] == ' 0 ' )",
        "void cmp ( int a , int b )",
        "cout << a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        0
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "void cmp ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        0,
        7
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "void cmp ( int a , int b )",
        "cout << a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "if ( k % a [ i ] == ' 0 ' )",
        "void cmp ( int a , int b )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        0,
        7
      ],
      "mod_code": [
        "if ( k % a [ i ] == ' 0 ' )",
        "void cmp ( int a , int b )",
        "cout << a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "void cmp ( int a , int b )",
        "cout << a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    }
  ]
}