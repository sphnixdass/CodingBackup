{
  "meta": {
    "index": 2348,
    "hitid": "34F34TZU7WTJ9L3ESZTWSLVDHAF2J7",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "284A",
    "subid": "48080365"
  },
  "lines": [
    {
      "line": 0,
      "text": "MAXN = 2200",
      "code": "const int MAXN = 2200 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = int",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "q = array of MAXN int",
      "code": "int q [ MAXN ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "function fpow ( get int a and x , return int )",
      "code": "int fpow ( int a , int x )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "rtn = 1",
      "code": "int rtn = 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while x is not 0 right shift x , a = 1ll * a * a modulo n",
      "code": "for ( ; x ; x >>= 1 , a = 1ll * a * a % n )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if x and 1 rtn = 1ll * rtn * a modulo n",
      "code": "if ( x & 1 ) rtn = 1ll * rtn * a % n ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "return rtn",
      "code": "return rtn ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 10,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "top = 0",
      "code": "int top = 0 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "ans = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 2 to n exclusive",
      "code": "for ( int i = 2 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "p = true",
      "code": "bool p = 1 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "for j = 1 to n - 1 exclusive while p not 0",
      "code": "for ( int j = 1 ; j < n - 1 && p ; j ++ )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if fpow ( i , j ) is 1 p = false",
      "code": "if ( fpow ( i , j ) == 1 ) p = 0 ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "if p increment ans",
      "code": "if ( p ) ans ++ ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if n is 2 increment ans",
      "code": "if ( n == 2 ) ans ++ ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( x == 1 && rtn == 1ll % rtn % a % n )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "void fpow ( int a , int x )"
      ],
      "err_line": 7,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "rtn = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘rtn’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( x == 1 && rtn == 1ll % rtn * a % n )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "top = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "‘top’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( i = 2 ; i < n ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "p = true ;"
      ],
      "err_line": 14,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( j = 1 ; j < n - 1 ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "while ( x != 0 ) a = 1ll * a * a % n ;",
        "if ( x == 1 && rtn == 1ll % rtn % a % n )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        6,
        13
      ],
      "mod_code": [
        "while ( x != 0 ) a = 1ll * a * a % n ;",
        "if ( x == 1 && rtn == 1ll % rtn % a % n )",
        "for ( i = 2 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        6,
        13,
        15
      ],
      "mod_code": [
        "while ( x != 0 ) a = 1ll * a * a % n ;",
        "if ( x == 1 && rtn == 1ll % rtn % a % n )",
        "for ( i = 2 ; i < n ; i ++ )",
        "for ( j = 1 ; j < n - 1 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        6,
        13,
        16
      ],
      "mod_code": [
        "while ( x != 0 ) a = 1ll * a * a % n ;",
        "if ( x == 1 && rtn == 1ll % rtn % a % n )",
        "for ( i = 2 ; i < n ; i ++ )",
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        6,
        15
      ],
      "mod_code": [
        "while ( x != 0 ) a = 1ll * a * a % n ;",
        "if ( x == 1 && rtn == 1ll % rtn % a % n )",
        "for ( j = 1 ; j < n - 1 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        6,
        15,
        16
      ],
      "mod_code": [
        "while ( x != 0 ) a = 1ll * a * a % n ;",
        "if ( x == 1 && rtn == 1ll % rtn % a % n )",
        "for ( j = 1 ; j < n - 1 ; j ++ )",
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        6,
        16
      ],
      "mod_code": [
        "while ( x != 0 ) a = 1ll * a * a % n ;",
        "if ( x == 1 && rtn == 1ll % rtn % a % n )",
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "while ( x != 0 ) a = 1ll * a * a % n ;",
        "for ( i = 2 ; i < n ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        13,
        6
      ],
      "mod_code": [
        "while ( x != 0 ) a = 1ll * a * a % n ;",
        "for ( i = 2 ; i < n ; i ++ )",
        "if ( x == 1 && rtn == 1ll % rtn * a % n )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        13,
        6,
        15
      ],
      "mod_code": [
        "while ( x != 0 ) a = 1ll * a * a % n ;",
        "for ( i = 2 ; i < n ; i ++ )",
        "if ( x == 1 && rtn == 1ll % rtn * a % n )",
        "for ( j = 1 ; j < n - 1 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        13,
        6,
        16
      ],
      "mod_code": [
        "while ( x != 0 ) a = 1ll * a * a % n ;",
        "for ( i = 2 ; i < n ; i ++ )",
        "if ( x == 1 && rtn == 1ll % rtn * a % n )",
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        13,
        15
      ],
      "mod_code": [
        "while ( x != 0 ) a = 1ll * a * a % n ;",
        "for ( i = 2 ; i < n ; i ++ )",
        "for ( j = 1 ; j < n - 1 ; j ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        13,
        15,
        16
      ],
      "mod_code": [
        "while ( x != 0 ) a = 1ll * a * a % n ;",
        "for ( i = 2 ; i < n ; i ++ )",
        "for ( j = 1 ; j < n - 1 ; j ++ )",
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        13,
        16
      ],
      "mod_code": [
        "while ( x != 0 ) a = 1ll * a * a % n ;",
        "for ( i = 2 ; i < n ; i ++ )",
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "while ( x != 0 ) a = 1ll * a * a % n ;",
        "if ( x == 1 && rtn == 1ll % rtn * a % n )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        6,
        15
      ],
      "mod_code": [
        "while ( x != 0 ) a = 1ll * a * a % n ;",
        "if ( x == 1 && rtn == 1ll % rtn * a % n )",
        "for ( j = 1 ; j < n - 1 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        6,
        15,
        16
      ],
      "mod_code": [
        "while ( x != 0 ) a = 1ll * a * a % n ;",
        "if ( x == 1 && rtn == 1ll % rtn * a % n )",
        "for ( j = 1 ; j < n - 1 ; j ++ )",
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        6,
        16
      ],
      "mod_code": [
        "while ( x != 0 ) a = 1ll * a * a % n ;",
        "if ( x == 1 && rtn == 1ll % rtn * a % n )",
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        15
      ],
      "mod_code": [
        "while ( x != 0 ) a = 1ll * a * a % n ;",
        "for ( j = 1 ; j < n - 1 ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        15,
        16
      ],
      "mod_code": [
        "while ( x != 0 ) a = 1ll * a * a % n ;",
        "for ( j = 1 ; j < n - 1 ; j ++ )",
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        16
      ],
      "mod_code": [
        "while ( x != 0 ) a = 1ll * a * a % n ;",
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "if ( x == 1 && rtn == 1ll % rtn % a % n )",
        "for ( i = 2 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        13,
        15
      ],
      "mod_code": [
        "if ( x == 1 && rtn == 1ll % rtn % a % n )",
        "for ( i = 2 ; i < n ; i ++ )",
        "for ( j = 1 ; j < n - 1 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        13,
        15,
        16
      ],
      "mod_code": [
        "if ( x == 1 && rtn == 1ll % rtn % a % n )",
        "for ( i = 2 ; i < n ; i ++ )",
        "for ( j = 1 ; j < n - 1 ; j ++ )",
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        13,
        16
      ],
      "mod_code": [
        "if ( x == 1 && rtn == 1ll % rtn % a % n )",
        "for ( i = 2 ; i < n ; i ++ )",
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "if ( x == 1 && rtn == 1ll % rtn % a % n )",
        "for ( j = 1 ; j < n - 1 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        15,
        16
      ],
      "mod_code": [
        "if ( x == 1 && rtn == 1ll % rtn % a % n )",
        "for ( j = 1 ; j < n - 1 ; j ++ )",
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        16
      ],
      "mod_code": [
        "if ( x == 1 && rtn == 1ll % rtn % a % n )",
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        6
      ],
      "mod_code": [
        "for ( i = 2 ; i < n ; i ++ )",
        "if ( x == 1 && rtn == 1ll % rtn * a % n )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        6,
        15
      ],
      "mod_code": [
        "for ( i = 2 ; i < n ; i ++ )",
        "if ( x == 1 && rtn == 1ll % rtn * a % n )",
        "for ( j = 1 ; j < n - 1 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        6,
        15,
        16
      ],
      "mod_code": [
        "for ( i = 2 ; i < n ; i ++ )",
        "if ( x == 1 && rtn == 1ll % rtn * a % n )",
        "for ( j = 1 ; j < n - 1 ; j ++ )",
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        6,
        16
      ],
      "mod_code": [
        "for ( i = 2 ; i < n ; i ++ )",
        "if ( x == 1 && rtn == 1ll % rtn * a % n )",
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "for ( i = 2 ; i < n ; i ++ )",
        "for ( j = 1 ; j < n - 1 ; j ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        16
      ],
      "mod_code": [
        "for ( i = 2 ; i < n ; i ++ )",
        "for ( j = 1 ; j < n - 1 ; j ++ )",
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        16
      ],
      "mod_code": [
        "for ( i = 2 ; i < n ; i ++ )",
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "if ( x == 1 && rtn == 1ll % rtn * a % n )",
        "for ( j = 1 ; j < n - 1 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        15,
        16
      ],
      "mod_code": [
        "if ( x == 1 && rtn == 1ll % rtn * a % n )",
        "for ( j = 1 ; j < n - 1 ; j ++ )",
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        16
      ],
      "mod_code": [
        "if ( x == 1 && rtn == 1ll % rtn * a % n )",
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        16
      ],
      "mod_code": [
        "for ( j = 1 ; j < n - 1 ; j ++ )",
        "if ( fpow ( i , j ) == 1 )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    }
  ]
}