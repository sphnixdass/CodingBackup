{
  "meta": {
    "index": 594,
    "hitid": "3I4E7AFQ2KTDTKXRBEDST843HNRJTF",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "999A",
    "subid": "49100218"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int n , k , i , a [ 105 ]",
      "code": "int n , k , i , a [ 105 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while read n and k",
      "code": "while ( cin >> n >> k )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set cnt to 0",
      "code": "int cnt = 0 ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "for i = 1 to n inclusive , read a [ i ]",
      "code": "for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "for i = 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if a [ i ] < = k",
      "code": "if ( a [ i ] <= k )",
      "indent": 3
    },
    {
      "line": 7,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 9,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "for i = n to 0 inclusive",
      "code": "for ( i = n ; i >= 0 ; i -- )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if a [ i ] < = k",
      "code": "if ( a [ i ] <= k )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 15,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "print min of cnt and n",
      "code": "cout << min ( cnt , n ) << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cnt = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char n , k , i , a [ 105 ] ;"
      ],
      "err_line": 17,
      "err_msg": "no matching function for call to ‘min(int&, char&)’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( { cin >> n >> k )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "cnt = 0 ;",
        "while ( { cin >> n >> k )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        12
      ],
      "mod_code": [
        "cnt = 0 ;",
        "while ( { cin >> n >> k )",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        12,
        9
      ],
      "mod_code": [
        "cnt = 0 ;",
        "while ( { cin >> n >> k )",
        "if ( a [ i ] <= ' k ' )",
        "break the ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        12,
        1
      ],
      "mod_code": [
        "cnt = 0 ;",
        "while ( { cin >> n >> k )",
        "if ( a [ i ] <= ' k ' )",
        "char n , k , i , a [ 105 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        12,
        6
      ],
      "mod_code": [
        "cnt = 0 ;",
        "while ( { cin >> n >> k )",
        "if ( a [ i ] <= ' k ' )",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        9
      ],
      "mod_code": [
        "cnt = 0 ;",
        "while ( { cin >> n >> k )",
        "break the ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        9,
        1
      ],
      "mod_code": [
        "cnt = 0 ;",
        "while ( { cin >> n >> k )",
        "break the ;",
        "char n , k , i , a [ 105 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        9,
        6
      ],
      "mod_code": [
        "cnt = 0 ;",
        "while ( { cin >> n >> k )",
        "break the ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        1
      ],
      "mod_code": [
        "cnt = 0 ;",
        "while ( { cin >> n >> k )",
        "char n , k , i , a [ 105 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        1,
        6
      ],
      "mod_code": [
        "cnt = 0 ;",
        "while ( { cin >> n >> k )",
        "char n , k , i , a [ 105 ] ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        2,
        6
      ],
      "mod_code": [
        "cnt = 0 ;",
        "while ( { cin >> n >> k )",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "cnt = 0 ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 3,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        9
      ],
      "mod_code": [
        "cnt = 0 ;",
        "if ( a [ i ] <= ' k ' )",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        9,
        1
      ],
      "mod_code": [
        "cnt = 0 ;",
        "if ( a [ i ] <= ' k ' )",
        "break the ;",
        "char n , k , i , a [ 105 ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        9,
        6
      ],
      "mod_code": [
        "cnt = 0 ;",
        "if ( a [ i ] <= ' k ' )",
        "break the ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 3,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        1
      ],
      "mod_code": [
        "cnt = 0 ;",
        "if ( a [ i ] <= ' k ' )",
        "char n , k , i , a [ 105 ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        1,
        6
      ],
      "mod_code": [
        "cnt = 0 ;",
        "if ( a [ i ] <= ' k ' )",
        "char n , k , i , a [ 105 ] ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 3,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        6
      ],
      "mod_code": [
        "cnt = 0 ;",
        "if ( a [ i ] <= ' k ' )",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 3,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "cnt = 0 ;",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        1
      ],
      "mod_code": [
        "cnt = 0 ;",
        "break the ;",
        "char n , k , i , a [ 105 ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        1,
        6
      ],
      "mod_code": [
        "cnt = 0 ;",
        "break the ;",
        "char n , k , i , a [ 105 ] ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 3,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        6
      ],
      "mod_code": [
        "cnt = 0 ;",
        "break the ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 3,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "cnt = 0 ;",
        "char n , k , i , a [ 105 ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        1,
        6
      ],
      "mod_code": [
        "cnt = 0 ;",
        "char n , k , i , a [ 105 ] ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 3,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "cnt = 0 ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 3,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        12,
        9
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "if ( a [ i ] <= ' k ' )",
        "break the ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        12,
        9,
        1
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "if ( a [ i ] <= ' k ' )",
        "break the ;",
        "char n , k , i , a [ 105 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        12,
        9,
        6
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "if ( a [ i ] <= ' k ' )",
        "break the ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        12,
        1
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "if ( a [ i ] <= ' k ' )",
        "char n , k , i , a [ 105 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        12,
        1,
        6
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "if ( a [ i ] <= ' k ' )",
        "char n , k , i , a [ 105 ] ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        12,
        6
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "if ( a [ i ] <= ' k ' )",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "break the ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        9,
        1
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "break the ;",
        "char n , k , i , a [ 105 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        9,
        1,
        6
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "break the ;",
        "char n , k , i , a [ 105 ] ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        9,
        6
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "break the ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "char n , k , i , a [ 105 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1,
        6
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "char n , k , i , a [ 105 ] ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        9
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "break the ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        12,
        9,
        1
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "break the ;",
        "char n , k , i , a [ 105 ] ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        12,
        9,
        1,
        6
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "break the ;",
        "char n , k , i , a [ 105 ] ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        12,
        9,
        6
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "break the ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        12,
        1
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "char n , k , i , a [ 105 ] ;"
      ],
      "err_line": 17,
      "err_msg": "no matching function for call to ‘min(int&, char&)’"
    },
    {
      "mod_line": [
        12,
        1,
        6
      ],
      "mod_code": [
        "if ( a [ i ] <= ' k ' )",
        "char n , k , i , a [ 105 ] ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 17,
      "err_msg": "no matching function for call to ‘min(int&, char&)’"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "break the ;",
        "char n , k , i , a [ 105 ] ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        9,
        1,
        6
      ],
      "mod_code": [
        "break the ;",
        "char n , k , i , a [ 105 ] ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "break the ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "char n , k , i , a [ 105 ] ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 17,
      "err_msg": "no matching function for call to ‘min(int&, char&)’"
    }
  ]
}