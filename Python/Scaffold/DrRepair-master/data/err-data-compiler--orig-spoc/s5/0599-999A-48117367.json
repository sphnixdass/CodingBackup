{
  "meta": {
    "index": 599,
    "hitid": "3KA7IJSNW6Z9J96865RRQAKTKFXBPH",
    "workerid": "A24WRPQYGMQLGF",
    "probid": "999A",
    "subid": "48117367"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "i , j , k , l , m , n = long longs , ans = long long = 0",
      "code": "long long i , j , k , l , m , n , ans = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "a = long long array of size n + 10",
      "code": "long long a [ n + 10 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "b = long long array of size n + 10",
      "code": "long long b [ n + 10 ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set all elements of b to 0",
      "code": "memset ( b , 0 , sizeof b ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive , then read a [ i ]",
      "code": "for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if a [ i ] < = k",
      "code": "if ( a [ i ] <= k )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increase ans by 1 , then b [ i ] = 1",
      "code": "ans ++ , b [ i ] = 1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "exit the for loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = n - 1 to 0 inclusive , decrease i by 1",
      "code": "for ( i = n - 1 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if a [ i ] < = k and b [ i ] is 0",
      "code": "if ( a [ i ] <= k && b [ i ] == 0 )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "increase ans by 1",
      "code": "ans ++ ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 17,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "ans [ i ] = b [ i ] = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long i , j , k , l , m , n , n = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int n’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ ) { b = 0 ; }"
      ],
      "err_line": 5,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘long long int [n]’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "ans [ i ] = b [ i ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        9,
        2
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "ans [ i ] = b [ i ] = 1 ;",
        "cin >> n >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        9,
        2,
        17
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "ans [ i ] = b [ i ] = 1 ;",
        "cin >> n >> n ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        9,
        2,
        14
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "ans [ i ] = b [ i ] = 1 ;",
        "cin >> n >> n ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        9,
        2,
        8
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "ans [ i ] = b [ i ] = 1 ;",
        "cin >> n >> n ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        9,
        17
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "ans [ i ] = b [ i ] = 1 ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        9,
        17,
        14
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "ans [ i ] = b [ i ] = 1 ;",
        "break break ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        9,
        17,
        8
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "ans [ i ] = b [ i ] = 1 ;",
        "break break ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        9,
        14
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "ans [ i ] = b [ i ] = 1 ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        9,
        14,
        8
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "ans [ i ] = b [ i ] = 1 ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        9,
        8
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "ans [ i ] = b [ i ] = 1 ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "cin >> n >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        2,
        17
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "cin >> n >> n ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        2,
        17,
        14
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "cin >> n >> n ;",
        "break break ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        2,
        17,
        8
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "cin >> n >> n ;",
        "break break ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        2,
        14
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "cin >> n >> n ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        2,
        14,
        8
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "cin >> n >> n ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        2,
        8
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "cin >> n >> n ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        17
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        17,
        14
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "break break ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        17,
        14,
        8
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "break break ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        17,
        8
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "break break ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        14,
        8
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "long long i , j , k , l , m , m , n = 0 ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int m’"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "ans [ i ] = b [ i ] = 1 ;",
        "cin >> n >> n ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        2,
        17
      ],
      "mod_code": [
        "ans [ i ] = b [ i ] = 1 ;",
        "cin >> n >> n ;",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        2,
        17,
        14
      ],
      "mod_code": [
        "ans [ i ] = b [ i ] = 1 ;",
        "cin >> n >> n ;",
        "break break ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        2,
        17,
        8
      ],
      "mod_code": [
        "ans [ i ] = b [ i ] = 1 ;",
        "cin >> n >> n ;",
        "break break ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        2,
        14
      ],
      "mod_code": [
        "ans [ i ] = b [ i ] = 1 ;",
        "cin >> n >> n ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        2,
        14,
        8
      ],
      "mod_code": [
        "ans [ i ] = b [ i ] = 1 ;",
        "cin >> n >> n ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        2,
        8
      ],
      "mod_code": [
        "ans [ i ] = b [ i ] = 1 ;",
        "cin >> n >> n ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        17
      ],
      "mod_code": [
        "ans [ i ] = b [ i ] = 1 ;",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        17,
        14
      ],
      "mod_code": [
        "ans [ i ] = b [ i ] = 1 ;",
        "break break ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        17,
        14,
        8
      ],
      "mod_code": [
        "ans [ i ] = b [ i ] = 1 ;",
        "break break ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        17,
        8
      ],
      "mod_code": [
        "ans [ i ] = b [ i ] = 1 ;",
        "break break ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "ans [ i ] = b [ i ] = 1 ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        14,
        8
      ],
      "mod_code": [
        "ans [ i ] = b [ i ] = 1 ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "ans [ i ] = b [ i ] = 1 ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        17
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        2,
        17,
        14
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "break break ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        2,
        17,
        14,
        8
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "break break ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        2,
        17,
        8
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "break break ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        17,
        14
      ],
      "mod_code": [
        "break break ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        17,
        14,
        8
      ],
      "mod_code": [
        "break break ;",
        "if ( a [ i ] <= k && b [ i ] == ' 0 ' )",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        17,
        8
      ],
      "mod_code": [
        "break break ;",
        "if ( a [ i ] <= ' k ' )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}