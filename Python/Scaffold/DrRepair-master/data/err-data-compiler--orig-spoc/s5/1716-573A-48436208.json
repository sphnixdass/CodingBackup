{
  "meta": {
    "index": 1716,
    "hitid": "32XN26MTXZDI81O0GX1VPCFQO120LP",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "573A",
    "subid": "48436208"
  },
  "lines": [
    {
      "line": 0,
      "text": "PI = const double with PI = 2 * acos ( 0 . 0 )",
      "code": "const double PI = 2 * acos ( 0.0 ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "EPS = const double with EPS = 1e - 11",
      "code": "const double EPS = 1e-11 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "SIZE = const integer with SIZE = 2 * 1e5 + 2",
      "code": "const int SIZE = 2 * 1e5 + 2 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "ar = integer array of size SIZE",
      "code": "int ar [ SIZE ] ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "tcases , I , J , K , N , n , m , cnt , len = integers with cnt = 0",
      "code": "int tcases , I , J , K , N , n , m , cnt = 0 , len ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for I = 0 to n exclusive",
      "code": "for ( I = 0 ; I < n ; I ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read ar [ I ]",
      "code": "cin >> ar [ I ] ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "while ar [ I ] modulo 2 is 0 , ar [ I ] = ar [ I ] / 2",
      "code": "while ( ar [ I ] % 2 == 0 ) ar [ I ] /= 2 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "while ar [ I ] modulo 3 is 0 , ar [ I ] = ar [ I ] / 3",
      "code": "while ( ar [ I ] % 3 == 0 ) ar [ I ] /= 3 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for I = 0 to n - 1",
      "code": "for ( I = 0 ; I < n - 1 ; I ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if ar [ I ] is not ar [ I + 1 ]",
      "code": "if ( ar [ I ] != ar [ I + 1 ] )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print No",
      "code": "cout << \" No\\n \" ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print Yes",
      "code": "cout << \" Yes\\n \" ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( int I = 0 ; I < n - 1 ; I I 1 )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘I’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int tcases , I , J , K , N , n , m , m , len = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( I I 0 ; I < n ; I ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘I’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "{ cin >> ar [ I ] ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( ar [ I ] ] != ar [ I + 1 ] )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        7
      ],
      "mod_code": [
        "for ( int I = 0 ; I < n - 1 ; I I 1 )",
        "for ( I I 0 ; I < n ; I ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘I’"
    },
    {
      "mod_line": [
        12,
        7,
        13
      ],
      "mod_code": [
        "for ( int I = 0 ; I < n - 1 ; I I 1 )",
        "for ( I I 0 ; I < n ; I ++ )",
        "if ( ar [ I ] ] != ar [ I + 1 ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘I’"
    },
    {
      "mod_line": [
        12,
        7,
        13,
        8
      ],
      "mod_code": [
        "for ( int I = 0 ; I < n - 1 ; I I 1 )",
        "for ( I I 0 ; I < n ; I ++ )",
        "if ( ar [ I ] ] != ar [ I + 1 ] )",
        "{ cin >> ar [ I ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘I’"
    },
    {
      "mod_line": [
        12,
        7,
        13,
        5
      ],
      "mod_code": [
        "for ( int I = 0 ; I < n - 1 ; I I 1 )",
        "for ( I I 0 ; I < n ; I ++ )",
        "if ( ar [ I ] ] != ar [ I + 1 ] )",
        "int tcases , I , J , K , N , n , m , m , len = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        12,
        7,
        8
      ],
      "mod_code": [
        "for ( int I = 0 ; I < n - 1 ; I I 1 )",
        "for ( I I 0 ; I < n ; I ++ )",
        "{ cin >> ar [ I ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘I’"
    },
    {
      "mod_line": [
        12,
        7,
        8,
        5
      ],
      "mod_code": [
        "for ( int I = 0 ; I < n - 1 ; I I 1 )",
        "for ( I I 0 ; I < n ; I ++ )",
        "{ cin >> ar [ I ] ;",
        "int tcases , I , J , K , N , n , m , m , len = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        12,
        7,
        5
      ],
      "mod_code": [
        "for ( int I = 0 ; I < n - 1 ; I I 1 )",
        "for ( I I 0 ; I < n ; I ++ )",
        "int tcases , I , J , K , N , n , m , m , len = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "for ( int I = 0 ; I < n - 1 ; I I 1 )",
        "if ( ar [ I ] ] != ar [ I + 1 ] )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘I’"
    },
    {
      "mod_line": [
        12,
        13,
        8
      ],
      "mod_code": [
        "for ( int I = 0 ; I < n - 1 ; I I 1 )",
        "if ( ar [ I ] ] != ar [ I + 1 ] )",
        "{ cin >> ar [ I ] ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘I’"
    },
    {
      "mod_line": [
        12,
        13,
        8,
        5
      ],
      "mod_code": [
        "for ( int I = 0 ; I < n - 1 ; I I 1 )",
        "if ( ar [ I ] ] != ar [ I + 1 ] )",
        "{ cin >> ar [ I ] ;",
        "int tcases , I , J , K , N , n , m , m , len = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        12,
        13,
        5
      ],
      "mod_code": [
        "for ( int I = 0 ; I < n - 1 ; I I 1 )",
        "if ( ar [ I ] ] != ar [ I + 1 ] )",
        "int tcases , I , J , K , N , n , m , m , len = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        12,
        8
      ],
      "mod_code": [
        "for ( int I = 0 ; I < n - 1 ; I I 1 )",
        "{ cin >> ar [ I ] ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘I’"
    },
    {
      "mod_line": [
        12,
        8,
        5
      ],
      "mod_code": [
        "for ( int I = 0 ; I < n - 1 ; I I 1 )",
        "{ cin >> ar [ I ] ;",
        "int tcases , I , J , K , N , n , m , m , len = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "for ( int I = 0 ; I < n - 1 ; I I 1 )",
        "int tcases , I , J , K , N , n , m , m , len = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        7,
        13
      ],
      "mod_code": [
        "for ( I I 0 ; I < n ; I ++ )",
        "if ( ar [ I ] ] != ar [ I + 1 ] )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘I’"
    },
    {
      "mod_line": [
        7,
        13,
        8
      ],
      "mod_code": [
        "for ( I I 0 ; I < n ; I ++ )",
        "if ( ar [ I ] ] != ar [ I + 1 ] )",
        "{ cin >> ar [ I ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘I’"
    },
    {
      "mod_line": [
        7,
        13,
        8,
        5
      ],
      "mod_code": [
        "for ( I I 0 ; I < n ; I ++ )",
        "if ( ar [ I ] ] != ar [ I + 1 ] )",
        "{ cin >> ar [ I ] ;",
        "int tcases , I , J , K , N , n , m , m , len = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        7,
        13,
        5
      ],
      "mod_code": [
        "for ( I I 0 ; I < n ; I ++ )",
        "if ( ar [ I ] ] != ar [ I + 1 ] )",
        "int tcases , I , J , K , N , n , m , m , len = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "for ( I I 0 ; I < n ; I ++ )",
        "{ cin >> ar [ I ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘I’"
    },
    {
      "mod_line": [
        7,
        8,
        5
      ],
      "mod_code": [
        "for ( I I 0 ; I < n ; I ++ )",
        "{ cin >> ar [ I ] ;",
        "int tcases , I , J , K , N , n , m , m , len = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "for ( I I 0 ; I < n ; I ++ )",
        "int tcases , I , J , K , N , n , m , m , len = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        13,
        8
      ],
      "mod_code": [
        "if ( ar [ I ] ] != ar [ I + 1 ] )",
        "{ cin >> ar [ I ] ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        13,
        8,
        5
      ],
      "mod_code": [
        "if ( ar [ I ] ] != ar [ I + 1 ] )",
        "{ cin >> ar [ I ] ;",
        "int tcases , I , J , K , N , n , m , m , len = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        13,
        5
      ],
      "mod_code": [
        "if ( ar [ I ] ] != ar [ I + 1 ] )",
        "int tcases , I , J , K , N , n , m , m , len = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "{ cin >> ar [ I ] ;",
        "int tcases , I , J , K , N , n , m , m , len = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int m’"
    }
  ]
}