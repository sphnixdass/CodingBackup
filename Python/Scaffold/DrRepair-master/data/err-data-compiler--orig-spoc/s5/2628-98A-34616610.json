{
  "meta": {
    "index": 2628,
    "hitid": "33QQ60S6ASCLRRBUPBTWGZB91S0U0I",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "98A",
    "subid": "34616610"
  },
  "lines": [
    {
      "line": 0,
      "text": "create const int MAXN = 5005",
      "code": "int const MAXN = 5005 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare izq taking in string c and returning string",
      "code": "string izq ( string c )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create string temp = c",
      "code": "string temp = c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set temp [ 0 ] to c [ 3 ]",
      "code": "temp [ 0 ] = c [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set temp [ 1 ] to c [ 5 ]",
      "code": "temp [ 1 ] = c [ 5 ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set temp [ 3 ] to c [ 1 ]",
      "code": "temp [ 3 ] = c [ 1 ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set temp [ 5 ] to c [ 0 ]",
      "code": "temp [ 5 ] = c [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "return temp",
      "code": "return temp ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "declare abajo taking in string c and returning string",
      "code": "string abajo ( string c )",
      "indent": 0
    },
    {
      "line": 10,
      "text": "make string temp = c",
      "code": "string temp = c ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 2 to 5 exclusive , swap values of temp [ i ] and temp [ i + 1 ]",
      "code": "for ( int i = 2 ; i < 5 ; ++ i ) swap ( temp [ i ] , temp [ i + 1 ] ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "return temp",
      "code": "return temp ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 14,
      "text": "declare last taking in string c and returning string",
      "code": "string last ( string c )",
      "indent": 0
    },
    {
      "line": 15,
      "text": "make string ans = c",
      "code": "string ans = c ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for i = 0 to 4 exclusive",
      "code": "for ( int i = 0 ; i < 4 ; ++ i )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for j = 0 to 4 exclusive",
      "code": "for ( int j = 0 ; j < 4 ; ++ j )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "for k = 0 to 4 exclusive",
      "code": "for ( int k = 0 ; k < 4 ; ++ k )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "set ans to max of ans and c",
      "code": "ans = max ( ans , c ) ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "set c to izq ( c )",
      "code": "c = izq ( c ) ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 22,
      "text": "set c to abajo ( c )",
      "code": "c = abajo ( c ) ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "set c to izq ( c )",
      "code": "c = izq ( c ) ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "return ans",
      "code": "return ans ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 29,
      "text": "make string color",
      "code": "string color ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "read color",
      "code": "cin >> color ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "sort color",
      "code": "sort ( color . begin ( ) , color . end ( ) ) ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "make string set ans",
      "code": "set < string > ans ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "do insert last ( color ) into ans while next_permutation ( color . begin ( ) , color . end ( ) ) returns true",
      "code": "do { ans . insert ( last ( color ) ) ; } while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "show ans . size ( )",
      "code": "cout << ans . size ( ) << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const const int MAXN = 5005 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string izq ( string c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string temp = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "temp [ 1 ++ ] = c [ 5 ] ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "temp [ 3 ++ ] = c [ 1 ] ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "temp [ 5 ++ ] = c [ 0 ] ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "string abajo ( string c ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "string temp = 1 ;"
      ],
      "err_line": 10,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( i = 2 ; i < 5 ; i ++ ) swap ( temp [ i ] , temp [ i + 1 ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "string last ( string c ) ;"
      ],
      "err_line": 15,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "string ans = 1 ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 16,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( j = 0 ; j < 4 ; j ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( k = 0 ; k < 4 ; k ++ )"
      ],
      "err_line": 18,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "int ans = max ( ans , c ) ;"
      ],
      "err_line": 19,
      "err_msg": "no matching function for call to ‘max(int&, std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "int c = izq ( c ) ;"
      ],
      "err_line": 20,
      "err_msg": "could not convert ‘c’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "int c = abajo ( c ) ;"
      ],
      "err_line": 22,
      "err_msg": "could not convert ‘c’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "int c = izq ( c ) ;"
      ],
      "err_line": 24,
      "err_msg": "could not convert ‘c’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 30,
      "err_msg": "‘color’ was not declared in this scope"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "gets ( color ) ;"
      ],
      "err_line": 30,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "sort ( color , color + n ) ;"
      ],
      "err_line": 31,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "string ans ;"
      ],
      "err_line": 33,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(std::__cxx11::string)’"
    },
    {
      "mod_line": [
        33,
        1
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "string izq ( string c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        33,
        1,
        18
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "string izq ( string c ) ;",
        "for ( k = 0 ; k < 4 ; k ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        33,
        1,
        18,
        16
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "string izq ( string c ) ;",
        "for ( k = 0 ; k < 4 ; k ++ )",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        33,
        1,
        18,
        6
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "string izq ( string c ) ;",
        "for ( k = 0 ; k < 4 ; k ++ )",
        "temp [ 5 ++ ] = c [ 0 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        33,
        1,
        18,
        24
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "string izq ( string c ) ;",
        "for ( k = 0 ; k < 4 ; k ++ )",
        "int c = izq ( c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        33,
        1,
        16
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "string izq ( string c ) ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        33,
        1,
        16,
        6
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "string izq ( string c ) ;",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "temp [ 5 ++ ] = c [ 0 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        33,
        1,
        16,
        24
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "string izq ( string c ) ;",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "int c = izq ( c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        33,
        1,
        6
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "string izq ( string c ) ;",
        "temp [ 5 ++ ] = c [ 0 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        33,
        1,
        6,
        24
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "string izq ( string c ) ;",
        "temp [ 5 ++ ] = c [ 0 ] ;",
        "int c = izq ( c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        33,
        1,
        24
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "string izq ( string c ) ;",
        "int c = izq ( c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        33,
        18
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "for ( k = 0 ; k < 4 ; k ++ )"
      ],
      "err_line": 18,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        33,
        18,
        16
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "for ( k = 0 ; k < 4 ; k ++ )",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 16,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        33,
        18,
        16,
        6
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "for ( k = 0 ; k < 4 ; k ++ )",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "temp [ 5 ++ ] = c [ 0 ] ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        33,
        18,
        16,
        24
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "for ( k = 0 ; k < 4 ; k ++ )",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "int c = izq ( c ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        33,
        18,
        6
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "for ( k = 0 ; k < 4 ; k ++ )",
        "temp [ 5 ++ ] = c [ 0 ] ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        33,
        18,
        6,
        24
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "for ( k = 0 ; k < 4 ; k ++ )",
        "temp [ 5 ++ ] = c [ 0 ] ;",
        "int c = izq ( c ) ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        33,
        18,
        24
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "for ( k = 0 ; k < 4 ; k ++ )",
        "int c = izq ( c ) ;"
      ],
      "err_line": 18,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        33,
        16
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 16,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        33,
        16,
        6
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "temp [ 5 ++ ] = c [ 0 ] ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        33,
        16,
        6,
        24
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "temp [ 5 ++ ] = c [ 0 ] ;",
        "int c = izq ( c ) ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        33,
        16,
        24
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "int c = izq ( c ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        33,
        6
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "temp [ 5 ++ ] = c [ 0 ] ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        33,
        6,
        24
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "temp [ 5 ++ ] = c [ 0 ] ;",
        "int c = izq ( c ) ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        33,
        24
      ],
      "mod_code": [
        "while ( next_permutation ( color . begin ( ) , color . end ( ) ) ) ) ;",
        "int c = izq ( c ) ;"
      ],
      "err_line": 24,
      "err_msg": "could not convert ‘c’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "string izq ( string c ) ;",
        "for ( k = 0 ; k < 4 ; k ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        18,
        16
      ],
      "mod_code": [
        "string izq ( string c ) ;",
        "for ( k = 0 ; k < 4 ; k ++ )",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        18,
        16,
        6
      ],
      "mod_code": [
        "string izq ( string c ) ;",
        "for ( k = 0 ; k < 4 ; k ++ )",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "temp [ 5 ++ ] = c [ 0 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        18,
        16,
        24
      ],
      "mod_code": [
        "string izq ( string c ) ;",
        "for ( k = 0 ; k < 4 ; k ++ )",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "int c = izq ( c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        18,
        6
      ],
      "mod_code": [
        "string izq ( string c ) ;",
        "for ( k = 0 ; k < 4 ; k ++ )",
        "temp [ 5 ++ ] = c [ 0 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        18,
        6,
        24
      ],
      "mod_code": [
        "string izq ( string c ) ;",
        "for ( k = 0 ; k < 4 ; k ++ )",
        "temp [ 5 ++ ] = c [ 0 ] ;",
        "int c = izq ( c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        18,
        24
      ],
      "mod_code": [
        "string izq ( string c ) ;",
        "for ( k = 0 ; k < 4 ; k ++ )",
        "int c = izq ( c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "string izq ( string c ) ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        16,
        6
      ],
      "mod_code": [
        "string izq ( string c ) ;",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "temp [ 5 ++ ] = c [ 0 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        16,
        6,
        24
      ],
      "mod_code": [
        "string izq ( string c ) ;",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "temp [ 5 ++ ] = c [ 0 ] ;",
        "int c = izq ( c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        16,
        24
      ],
      "mod_code": [
        "string izq ( string c ) ;",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "int c = izq ( c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "string izq ( string c ) ;",
        "temp [ 5 ++ ] = c [ 0 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        6,
        24
      ],
      "mod_code": [
        "string izq ( string c ) ;",
        "temp [ 5 ++ ] = c [ 0 ] ;",
        "int c = izq ( c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        24
      ],
      "mod_code": [
        "string izq ( string c ) ;",
        "int c = izq ( c ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        16
      ],
      "mod_code": [
        "for ( k = 0 ; k < 4 ; k ++ )",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 16,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        16,
        6
      ],
      "mod_code": [
        "for ( k = 0 ; k < 4 ; k ++ )",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "temp [ 5 ++ ] = c [ 0 ] ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        18,
        16,
        6,
        24
      ],
      "mod_code": [
        "for ( k = 0 ; k < 4 ; k ++ )",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "temp [ 5 ++ ] = c [ 0 ] ;",
        "int c = izq ( c ) ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        18,
        16,
        24
      ],
      "mod_code": [
        "for ( k = 0 ; k < 4 ; k ++ )",
        "for ( i = 0 ; i < 4 ; i ++ )",
        "int c = izq ( c ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        6
      ],
      "mod_code": [
        "for ( k = 0 ; k < 4 ; k ++ )",
        "temp [ 5 ++ ] = c [ 0 ] ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        18,
        6,
        24
      ],
      "mod_code": [
        "for ( k = 0 ; k < 4 ; k ++ )",
        "temp [ 5 ++ ] = c [ 0 ] ;",
        "int c = izq ( c ) ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        18,
        24
      ],
      "mod_code": [
        "for ( k = 0 ; k < 4 ; k ++ )",
        "int c = izq ( c ) ;"
      ],
      "err_line": 18,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < 4 ; i ++ )",
        "temp [ 5 ++ ] = c [ 0 ] ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        16,
        6,
        24
      ],
      "mod_code": [
        "for ( i = 0 ; i < 4 ; i ++ )",
        "temp [ 5 ++ ] = c [ 0 ] ;",
        "int c = izq ( c ) ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        16,
        24
      ],
      "mod_code": [
        "for ( i = 0 ; i < 4 ; i ++ )",
        "int c = izq ( c ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        24
      ],
      "mod_code": [
        "temp [ 5 ++ ] = c [ 0 ] ;",
        "int c = izq ( c ) ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as increment operand"
    }
  ]
}