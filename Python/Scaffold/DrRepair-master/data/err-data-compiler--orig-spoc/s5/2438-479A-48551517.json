{
  "meta": {
    "index": 2438,
    "hitid": "3F6045TU7DI53TB4RWHYDEPORBB999",
    "workerid": "AIWEXPJAU66D9",
    "probid": "479A",
    "subid": "48551517"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers a , b , c and k and an integer array d with 6 elements",
      "code": "int a , b , c , d [ 6 ] , k ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read input to a , b and c",
      "code": "cin >> a >> b >> c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "change d [ 0 ] to a + b + c",
      "code": "d [ 0 ] = a + b + c ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "change d [ 1 ] to a + b * c",
      "code": "d [ 1 ] = a + b * c ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "change d [ 2 ] to a * b * c",
      "code": "d [ 2 ] = a * b * c ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "change d [ 3 ] to a * b + c",
      "code": "d [ 3 ] = a * b + c ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "change d [ 4 ] to ( a + b ) * c",
      "code": "d [ 4 ] = ( a + b ) * c ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "change d [ 5 ] to a * ( b + c )",
      "code": "d [ 5 ] = a * ( b + c ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for integer i = 0 to 6 exclusive",
      "code": "for ( int i = 0 ; i < 6 ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for integer j = 5 to i exclusive counting down",
      "code": "for ( int j = 5 ; j > i ; j -- )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if d [ j - 1 ] is greater than d [ j ]",
      "code": "if ( d [ j - 1 ] > d [ j ] )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "set k to d [ j - 1 ]",
      "code": "k = d [ j - 1 ] ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "assign d [ j ] to d [ j - 1 ]",
      "code": "d [ j - 1 ] = d [ j ] ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "assign k to d [ j ]",
      "code": "d [ j ] = k ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print d [ 5 ]",
      "code": "cout << d [ 5 ] << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , k , k ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> a >> b >> n ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "d [ 4 ] = ( long a + b ) * c ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( d [ j - 1 ] ] > d [ j ] )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ 4 ] = ( long a + b ) * c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        7,
        5
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ 4 ] = ( long a + b ) * c ;",
        "d [ 2 ] *= c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        7,
        5,
        14
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ 4 ] = ( long a + b ) * c ;",
        "d [ 2 ] *= c ;",
        "d [ j ] = ' k ' ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        7,
        5,
        18
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ 4 ] = ( long a + b ) * c ;",
        "d [ 2 ] *= c ;",
        "cout << d [ 5 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        7,
        5,
        3
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ 4 ] = ( long a + b ) * c ;",
        "d [ 2 ] *= c ;",
        "d [ 0 ] += c + c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        7,
        14
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ 4 ] = ( long a + b ) * c ;",
        "d [ j ] = ' k ' ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        7,
        14,
        18
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ 4 ] = ( long a + b ) * c ;",
        "d [ j ] = ' k ' ;",
        "cout << d [ 5 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        7,
        14,
        3
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ 4 ] = ( long a + b ) * c ;",
        "d [ j ] = ' k ' ;",
        "d [ 0 ] += c + c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        7,
        18
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ 4 ] = ( long a + b ) * c ;",
        "cout << d [ 5 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        7,
        18,
        3
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ 4 ] = ( long a + b ) * c ;",
        "cout << d [ 5 ] ;",
        "d [ 0 ] += c + c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        7,
        3
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ 4 ] = ( long a + b ) * c ;",
        "d [ 0 ] += c + c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ 2 ] *= c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        5,
        14
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ 2 ] *= c ;",
        "d [ j ] = ' k ' ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        5,
        14,
        18
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ 2 ] *= c ;",
        "d [ j ] = ' k ' ;",
        "cout << d [ 5 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        5,
        14,
        3
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ 2 ] *= c ;",
        "d [ j ] = ' k ' ;",
        "d [ 0 ] += c + c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        5,
        18
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ 2 ] *= c ;",
        "cout << d [ 5 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        5,
        18,
        3
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ 2 ] *= c ;",
        "cout << d [ 5 ] ;",
        "d [ 0 ] += c + c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        5,
        3
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ 2 ] *= c ;",
        "d [ 0 ] += c + c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ j ] = ' k ' ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        14,
        18
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ j ] = ' k ' ;",
        "cout << d [ 5 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        14,
        18,
        3
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ j ] = ' k ' ;",
        "cout << d [ 5 ] ;",
        "d [ 0 ] += c + c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        14,
        3
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ j ] = ' k ' ;",
        "d [ 0 ] += c + c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "cout << d [ 5 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        18,
        3
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "cout << d [ 5 ] ;",
        "d [ 0 ] += c + c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int a [ 6 ] , b , c , c , k ;",
        "d [ 0 ] += c + c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "d [ 4 ] = ( long a + b ) * c ;",
        "d [ 2 ] *= c ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        7,
        5,
        14
      ],
      "mod_code": [
        "d [ 4 ] = ( long a + b ) * c ;",
        "d [ 2 ] *= c ;",
        "d [ j ] = ' k ' ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        7,
        5,
        14,
        18
      ],
      "mod_code": [
        "d [ 4 ] = ( long a + b ) * c ;",
        "d [ 2 ] *= c ;",
        "d [ j ] = ' k ' ;",
        "cout << d [ 5 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        7,
        5,
        14,
        3
      ],
      "mod_code": [
        "d [ 4 ] = ( long a + b ) * c ;",
        "d [ 2 ] *= c ;",
        "d [ j ] = ' k ' ;",
        "d [ 0 ] += c + c ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        7,
        5,
        18
      ],
      "mod_code": [
        "d [ 4 ] = ( long a + b ) * c ;",
        "d [ 2 ] *= c ;",
        "cout << d [ 5 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        7,
        5,
        18,
        3
      ],
      "mod_code": [
        "d [ 4 ] = ( long a + b ) * c ;",
        "d [ 2 ] *= c ;",
        "cout << d [ 5 ] ;",
        "d [ 0 ] += c + c ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        7,
        5,
        3
      ],
      "mod_code": [
        "d [ 4 ] = ( long a + b ) * c ;",
        "d [ 2 ] *= c ;",
        "d [ 0 ] += c + c ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        7,
        14
      ],
      "mod_code": [
        "d [ 4 ] = ( long a + b ) * c ;",
        "d [ j ] = ' k ' ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        7,
        14,
        18
      ],
      "mod_code": [
        "d [ 4 ] = ( long a + b ) * c ;",
        "d [ j ] = ' k ' ;",
        "cout << d [ 5 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        7,
        14,
        18,
        3
      ],
      "mod_code": [
        "d [ 4 ] = ( long a + b ) * c ;",
        "d [ j ] = ' k ' ;",
        "cout << d [ 5 ] ;",
        "d [ 0 ] += c + c ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        7,
        14,
        3
      ],
      "mod_code": [
        "d [ 4 ] = ( long a + b ) * c ;",
        "d [ j ] = ' k ' ;",
        "d [ 0 ] += c + c ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        7,
        18
      ],
      "mod_code": [
        "d [ 4 ] = ( long a + b ) * c ;",
        "cout << d [ 5 ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        7,
        18,
        3
      ],
      "mod_code": [
        "d [ 4 ] = ( long a + b ) * c ;",
        "cout << d [ 5 ] ;",
        "d [ 0 ] += c + c ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "d [ 4 ] = ( long a + b ) * c ;",
        "d [ 0 ] += c + c ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘long’"
    }
  ]
}