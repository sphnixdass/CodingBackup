{
  "meta": {
    "index": 962,
    "hitid": "3RHLQY6EDTYG9DI9MHQ9I2XYVHKD4V",
    "workerid": "AIWEXPJAU66D9",
    "probid": "119A",
    "subid": "48801323"
  },
  "lines": [
    {
      "line": 0,
      "text": "gcd is a integer function with integer arguments i and j",
      "code": "int gcd ( int i , int j )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer temp",
      "code": "int temp ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if j = 0",
      "code": "if ( j == 0 )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "assign value of i to temp",
      "code": "temp = i ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 5,
      "text": "temp = gcd of j and i % j",
      "code": "temp = gcd ( j , i % j ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "return temp",
      "code": "return temp ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 9,
      "text": "declare integer variables a , b , n , temp and ans",
      "code": "int a , b , n , temp , ans ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "loop when read a , b and n",
      "code": "while ( cin >> a >> b >> n )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for temp = 1 , incrementing by 1",
      "code": "for ( temp = 1 ; ; temp ++ )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if temp % 2 = 1",
      "code": "if ( temp % 2 == 1 )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "decrease n by gcd ( a , n )",
      "code": "n -= gcd ( a , n ) ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "if n is less than 0",
      "code": "if ( n < 0 )",
      "indent": 4
    },
    {
      "line": 15,
      "text": "print 1",
      "code": "cout << 1 << endl ;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "break the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 19,
      "text": "decrease n by gcd ( b , n )",
      "code": "n -= gcd ( b , n ) ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "if n is less than 0",
      "code": "if ( n < 0 )",
      "indent": 4
    },
    {
      "line": 21,
      "text": "print 0",
      "code": "cout << 0 << endl ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int gcd ( int i , int j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "if ( j == 0 ) continue ;"
      ],
      "err_line": 2,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "* temp = i ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( temp % 2 == 1 ) % 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "stop ;"
      ],
      "err_line": 22,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        19
      ],
      "mod_code": [
        "stop ;",
        "n *= gcd ( b , n ) ;"
      ],
      "err_line": 22,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        19,
        0
      ],
      "mod_code": [
        "stop ;",
        "n *= gcd ( b , n ) ;",
        "int gcd ( int i , int j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        22,
        19,
        0,
        3
      ],
      "mod_code": [
        "stop ;",
        "n *= gcd ( b , n ) ;",
        "int gcd ( int i , int j ) ;",
        "* temp = i ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        22,
        19,
        0,
        13
      ],
      "mod_code": [
        "stop ;",
        "n *= gcd ( b , n ) ;",
        "int gcd ( int i , int j ) ;",
        "n -= gcd ( n , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        22,
        19,
        0,
        5
      ],
      "mod_code": [
        "stop ;",
        "n *= gcd ( b , n ) ;",
        "int gcd ( int i , int j ) ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        22,
        19,
        3
      ],
      "mod_code": [
        "stop ;",
        "n *= gcd ( b , n ) ;",
        "* temp = i ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        22,
        19,
        3,
        13
      ],
      "mod_code": [
        "stop ;",
        "n *= gcd ( b , n ) ;",
        "* temp = i ;",
        "n -= gcd ( n , n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        22,
        19,
        3,
        5
      ],
      "mod_code": [
        "stop ;",
        "n *= gcd ( b , n ) ;",
        "* temp = i ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        22,
        19,
        13
      ],
      "mod_code": [
        "stop ;",
        "n *= gcd ( b , n ) ;",
        "n -= gcd ( n , n ) ;"
      ],
      "err_line": 22,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        19,
        13,
        5
      ],
      "mod_code": [
        "stop ;",
        "n *= gcd ( b , n ) ;",
        "n -= gcd ( n , n ) ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 22,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        19,
        5
      ],
      "mod_code": [
        "stop ;",
        "n *= gcd ( b , n ) ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 22,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        0
      ],
      "mod_code": [
        "stop ;",
        "int gcd ( int i , int j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        22,
        0,
        3
      ],
      "mod_code": [
        "stop ;",
        "int gcd ( int i , int j ) ;",
        "* temp = i ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        22,
        0,
        3,
        13
      ],
      "mod_code": [
        "stop ;",
        "int gcd ( int i , int j ) ;",
        "* temp = i ;",
        "n -= gcd ( n , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        22,
        0,
        3,
        5
      ],
      "mod_code": [
        "stop ;",
        "int gcd ( int i , int j ) ;",
        "* temp = i ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        22,
        0,
        13
      ],
      "mod_code": [
        "stop ;",
        "int gcd ( int i , int j ) ;",
        "n -= gcd ( n , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        22,
        0,
        13,
        5
      ],
      "mod_code": [
        "stop ;",
        "int gcd ( int i , int j ) ;",
        "n -= gcd ( n , n ) ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        22,
        0,
        5
      ],
      "mod_code": [
        "stop ;",
        "int gcd ( int i , int j ) ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        22,
        3
      ],
      "mod_code": [
        "stop ;",
        "* temp = i ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        22,
        3,
        13
      ],
      "mod_code": [
        "stop ;",
        "* temp = i ;",
        "n -= gcd ( n , n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        22,
        3,
        13,
        5
      ],
      "mod_code": [
        "stop ;",
        "* temp = i ;",
        "n -= gcd ( n , n ) ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        22,
        3,
        5
      ],
      "mod_code": [
        "stop ;",
        "* temp = i ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        22,
        13
      ],
      "mod_code": [
        "stop ;",
        "n -= gcd ( n , n ) ;"
      ],
      "err_line": 22,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        13,
        5
      ],
      "mod_code": [
        "stop ;",
        "n -= gcd ( n , n ) ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 22,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        5
      ],
      "mod_code": [
        "stop ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 22,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        0
      ],
      "mod_code": [
        "n *= gcd ( b , n ) ;",
        "int gcd ( int i , int j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        0,
        3
      ],
      "mod_code": [
        "n *= gcd ( b , n ) ;",
        "int gcd ( int i , int j ) ;",
        "* temp = i ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        0,
        3,
        13
      ],
      "mod_code": [
        "n *= gcd ( b , n ) ;",
        "int gcd ( int i , int j ) ;",
        "* temp = i ;",
        "n -= gcd ( n , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        0,
        3,
        5
      ],
      "mod_code": [
        "n *= gcd ( b , n ) ;",
        "int gcd ( int i , int j ) ;",
        "* temp = i ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        0,
        13
      ],
      "mod_code": [
        "n *= gcd ( b , n ) ;",
        "int gcd ( int i , int j ) ;",
        "n -= gcd ( n , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        0,
        13,
        5
      ],
      "mod_code": [
        "n *= gcd ( b , n ) ;",
        "int gcd ( int i , int j ) ;",
        "n -= gcd ( n , n ) ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        0,
        5
      ],
      "mod_code": [
        "n *= gcd ( b , n ) ;",
        "int gcd ( int i , int j ) ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        3
      ],
      "mod_code": [
        "n *= gcd ( b , n ) ;",
        "* temp = i ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        19,
        3,
        13
      ],
      "mod_code": [
        "n *= gcd ( b , n ) ;",
        "* temp = i ;",
        "n -= gcd ( n , n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        19,
        3,
        13,
        5
      ],
      "mod_code": [
        "n *= gcd ( b , n ) ;",
        "* temp = i ;",
        "n -= gcd ( n , n ) ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        19,
        3,
        5
      ],
      "mod_code": [
        "n *= gcd ( b , n ) ;",
        "* temp = i ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "int gcd ( int i , int j ) ;",
        "* temp = i ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        13
      ],
      "mod_code": [
        "int gcd ( int i , int j ) ;",
        "* temp = i ;",
        "n -= gcd ( n , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        13,
        5
      ],
      "mod_code": [
        "int gcd ( int i , int j ) ;",
        "* temp = i ;",
        "n -= gcd ( n , n ) ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        5
      ],
      "mod_code": [
        "int gcd ( int i , int j ) ;",
        "* temp = i ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "int gcd ( int i , int j ) ;",
        "n -= gcd ( n , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        5
      ],
      "mod_code": [
        "int gcd ( int i , int j ) ;",
        "n -= gcd ( n , n ) ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "int gcd ( int i , int j ) ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "* temp = i ;",
        "n -= gcd ( n , n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        13,
        5
      ],
      "mod_code": [
        "* temp = i ;",
        "n -= gcd ( n , n ) ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "* temp = i ;",
        "int temp = gcd ( j , i % j ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    }
  ]
}