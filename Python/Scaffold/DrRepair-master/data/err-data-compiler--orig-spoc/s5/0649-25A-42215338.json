{
  "meta": {
    "index": 649,
    "hitid": "3KI0JD2ZU1CE7RLDESG2F87G5I6766",
    "workerid": "AIWEXPJAU66D9",
    "probid": "25A",
    "subid": "42215338"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , j , even , odd and g , with even , odd and g = 0 , arr is an array of integers with size 101",
      "code": "int n , arr [ 101 ] , j , even = 0 , odd = 0 , g = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for j = 1 to n inclusive",
      "code": "for ( j = 1 ; j <= n ; j ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read arr [ j ]",
      "code": "cin >> arr [ j ] ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if arr [ j ] is odd",
      "code": "if ( arr [ j ] % 2 != 0 )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increase odd by j",
      "code": "odd += j ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increase even by j",
      "code": "even += j ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if odd is greater than even",
      "code": "if ( odd > even )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "g = even",
      "code": "g = even ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "set g to odd",
      "code": "g = odd ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print g and a new line",
      "code": "cout << g << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int arr [ 101 ] , j , j , odd = 0 , g = 0 , g = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , j , odd = 0 , odd = 0 , g = 0 , g = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int odd’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "g = % 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int arr [ 101 ] , j , j , odd = 0 , g = 0 , g = 0 ;",
        "g = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        1,
        12,
        14
      ],
      "mod_code": [
        "int arr [ 101 ] , j , j , odd = 0 , g = 0 , g = 0 ;",
        "g = 0 ;",
        "g = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        1,
        12,
        14,
        11
      ],
      "mod_code": [
        "int arr [ 101 ] , j , j , odd = 0 , g = 0 , g = 0 ;",
        "g = 0 ;",
        "g = 1 ;",
        "if ( odd > 0 )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        1,
        12,
        11
      ],
      "mod_code": [
        "int arr [ 101 ] , j , j , odd = 0 , g = 0 , g = 0 ;",
        "g = 0 ;",
        "if ( odd > 0 )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        1,
        12,
        11,
        14
      ],
      "mod_code": [
        "int arr [ 101 ] , j , j , odd = 0 , g = 0 , g = 0 ;",
        "g = 0 ;",
        "if ( odd > 0 )",
        "g = % 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        1,
        12,
        14
      ],
      "mod_code": [
        "int arr [ 101 ] , j , j , odd = 0 , g = 0 , g = 0 ;",
        "g = 0 ;",
        "g = % 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int arr [ 101 ] , j , j , odd = 0 , g = 0 , g = 0 ;",
        "g = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        1,
        14,
        11
      ],
      "mod_code": [
        "int arr [ 101 ] , j , j , odd = 0 , g = 0 , g = 0 ;",
        "g = 1 ;",
        "if ( odd > 0 )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        1,
        14,
        11,
        12
      ],
      "mod_code": [
        "int arr [ 101 ] , j , j , odd = 0 , g = 0 , g = 0 ;",
        "g = 1 ;",
        "if ( odd > 0 )",
        "int g = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        1,
        14,
        12
      ],
      "mod_code": [
        "int arr [ 101 ] , j , j , odd = 0 , g = 0 , g = 0 ;",
        "g = 1 ;",
        "int g = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int arr [ 101 ] , j , j , odd = 0 , g = 0 , g = 0 ;",
        "if ( odd > 0 )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        1,
        11,
        12
      ],
      "mod_code": [
        "int arr [ 101 ] , j , j , odd = 0 , g = 0 , g = 0 ;",
        "if ( odd > 0 )",
        "int g = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        1,
        11,
        12,
        14
      ],
      "mod_code": [
        "int arr [ 101 ] , j , j , odd = 0 , g = 0 , g = 0 ;",
        "if ( odd > 0 )",
        "int g = 0 ;",
        "g = % 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        1,
        11,
        14
      ],
      "mod_code": [
        "int arr [ 101 ] , j , j , odd = 0 , g = 0 , g = 0 ;",
        "if ( odd > 0 )",
        "g = % 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int arr [ 101 ] , j , j , odd = 0 , g = 0 , g = 0 ;",
        "int g = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        1,
        12,
        14
      ],
      "mod_code": [
        "int arr [ 101 ] , j , j , odd = 0 , g = 0 , g = 0 ;",
        "int g = 0 ;",
        "g = % 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int arr [ 101 ] , j , j , odd = 0 , g = 0 , g = 0 ;",
        "g = % 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        12,
        11,
        14
      ],
      "mod_code": [
        "g = 0 ;",
        "if ( odd > 0 )",
        "g = % 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "g = 0 ;",
        "g = % 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        11,
        12,
        14
      ],
      "mod_code": [
        "if ( odd > 0 )",
        "int g = 0 ;",
        "g = % 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "if ( odd > 0 )",
        "g = % 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "int g = 0 ;",
        "g = % 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘%’ token"
    }
  ]
}