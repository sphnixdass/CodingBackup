{
  "meta": {
    "index": 333,
    "hitid": "39XCQ6V3KYYZKN7UQZ15HOTKFEN566",
    "workerid": "AIWEXPJAU66D9",
    "probid": "340A",
    "subid": "40716676"
  },
  "lines": [
    {
      "line": 0,
      "text": "integer function gcd with int arguments a and b",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return a if b = 0 , or gcd ( b , a % b ) otherwise",
      "code": "return b == 0 ? a : gcd ( b , a % b ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "function lcm with int arguments a and b that returns integer",
      "code": "int lcm ( int a , int b )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "return a * ( b / gcd ( a , b ) )",
      "code": "return a * ( b / gcd ( a , b ) ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "declare integers x , y , a and b",
      "code": "int x , y , a , b ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read variables x , y , a and b from the input",
      "code": "cin >> x >> y >> a >> b ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "declare integer variable MCM with value = result of lcm ( x , y )",
      "code": "int MCM = lcm ( x , y ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print ( b / MCM ) - ( ( a - 1 ) / MCM ) to the standard output",
      "code": "cout << ( b / MCM ) - ( ( a - 1 ) / MCM ) << endl ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "return ( b == 0 ? a == gcd ( b , a % b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "return a * gcd ( a / gcd ( a , b ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int x , y , a , b ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return a * gcd ( a / gcd ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4,
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return a * gcd ( a / gcd ( a , b ) ) ;",
        "int x , y , a , b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4,
        8,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return a * gcd ( a / gcd ( a , b ) ) ;",
        "int x , y , a , b ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4,
        8,
        1
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return a * gcd ( a / gcd ( a , b ) ) ;",
        "int x , y , a , b ;",
        "return ( b == 0 ? a == gcd ( b , a % b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return a * gcd ( a / gcd ( a , b ) ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4,
        3,
        1
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return a * gcd ( a / gcd ( a , b ) ) ;",
        "int lcm ( int a , int b ) ;",
        "return ( b == 0 ? a == gcd ( b , a % b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4,
        1
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return a * gcd ( a / gcd ( a , b ) ) ;",
        "return ( b == 0 ? a == gcd ( b , a % b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int x , y , a , b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int x , y , a , b ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        3,
        1
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int x , y , a , b ;",
        "int lcm ( int a , int b ) ;",
        "return ( b == 0 ? a == gcd ( b , a % b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        1
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int x , y , a , b ;",
        "return ( b == 0 ? a == gcd ( b , a % b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        1
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int lcm ( int a , int b ) ;",
        "return ( b == 0 ? a == gcd ( b , a % b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return ( b == 0 ? a == gcd ( b , a % b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "return a * gcd ( a / gcd ( a , b ) ) ;",
        "int x , y , a , b ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        4,
        8,
        3
      ],
      "mod_code": [
        "return a * gcd ( a / gcd ( a , b ) ) ;",
        "int x , y , a , b ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        8,
        3,
        1
      ],
      "mod_code": [
        "return a * gcd ( a / gcd ( a , b ) ) ;",
        "int x , y , a , b ;",
        "int lcm ( int a , int b ) ;",
        "return ( b == 0 ? a == gcd ( b , a % b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        8,
        1
      ],
      "mod_code": [
        "return a * gcd ( a / gcd ( a , b ) ) ;",
        "int x , y , a , b ;",
        "return ( b == 0 ? a == gcd ( b , a % b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "return a * gcd ( a / gcd ( a , b ) ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        3,
        1
      ],
      "mod_code": [
        "return a * gcd ( a / gcd ( a , b ) ) ;",
        "int lcm ( int a , int b ) ;",
        "return ( b == 0 ? a == gcd ( b , a % b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "return a * gcd ( a / gcd ( a , b ) ) ;",
        "return ( b == 0 ? a == gcd ( b , a % b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "int x , y , a , b ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        3,
        1
      ],
      "mod_code": [
        "int x , y , a , b ;",
        "int lcm ( int a , int b ) ;",
        "return ( b == 0 ? a == gcd ( b , a % b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "int x , y , a , b ;",
        "return ( b == 0 ? a == gcd ( b , a % b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "int lcm ( int a , int b ) ;",
        "return ( b == 0 ? a == gcd ( b , a % b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘)’ token"
    }
  ]
}