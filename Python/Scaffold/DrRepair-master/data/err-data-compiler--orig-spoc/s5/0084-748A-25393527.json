{
  "meta": {
    "index": 84,
    "hitid": "3DFYDSXB2WUSTXCGBJ32Y4Q5ZE4JU1",
    "workerid": "AIWEXPJAU66D9",
    "probid": "748A",
    "subid": "25393527"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers a , k , r , m , n , b and d",
      "code": "int a , k , r , m , n , b , d ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create character s",
      "code": "char s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n , m and k",
      "code": "cin >> n >> m >> k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "a = k % ( 2 * m )",
      "code": "a = k % ( 2 * m ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if a = 0",
      "code": "if ( a == 0 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "r = k / ( 2 * m )",
      "code": "r = k / ( 2 * m ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "assign value of m to d",
      "code": "d = m ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 9,
      "text": "r = k / ( 2 * m ) + 1",
      "code": "r = k / ( 2 * m ) + 1 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "b = a % 2",
      "code": "b = a % 2 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if b = 0",
      "code": "if ( b == 0 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "d = a / 2",
      "code": "d = a / 2 ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 14,
      "text": "d = a / 2 + 1",
      "code": "d = a / 2 + 1 ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if k is even",
      "code": "if ( k % 2 == 0 )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "s = ' R '",
      "code": "s = ' R ' ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 19,
      "text": "s = ' L '",
      "code": "s = ' L ' ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "print r , \" \" , d , \" \" and s",
      "code": "cout << r << \" \" << d << \" \" << s << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char s [ 8 ] ;"
      ],
      "err_line": 17,
      "err_msg": "incompatible types in assignment of ‘char’ to ‘char [8]’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int a = k % ( 2 * m ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "string s = ' R ' ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "cout << r << \" \" << d , \" \" << s << endl ;"
      ],
      "err_line": 20,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘char’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        14,
        17
      ],
      "mod_code": [
        "int d = a / 2 + 1 ;",
        "string s = ' R ' ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        14,
        17,
        19
      ],
      "mod_code": [
        "int d = a / 2 + 1 ;",
        "string s = ' R ' ;",
        "char s = ' L ' ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        14,
        17,
        19,
        7
      ],
      "mod_code": [
        "int d = a / 2 + 1 ;",
        "string s = ' R ' ;",
        "char s = ' L ' ;",
        "d = d ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        14,
        17,
        19,
        9
      ],
      "mod_code": [
        "int d = a / 2 + 1 ;",
        "string s = ' R ' ;",
        "char s = ' L ' ;",
        "int r = k / ( 2 * m ) + 1 ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        14,
        17,
        19,
        3
      ],
      "mod_code": [
        "int d = a / 2 + 1 ;",
        "string s = ' R ' ;",
        "char s = ' L ' ;",
        "cin >> n >> m >> n ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        14,
        17,
        7
      ],
      "mod_code": [
        "int d = a / 2 + 1 ;",
        "string s = ' R ' ;",
        "d = d ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        14,
        17,
        7,
        9
      ],
      "mod_code": [
        "int d = a / 2 + 1 ;",
        "string s = ' R ' ;",
        "d = d ;",
        "int r = k / ( 2 * m ) + 1 ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        14,
        17,
        7,
        3
      ],
      "mod_code": [
        "int d = a / 2 + 1 ;",
        "string s = ' R ' ;",
        "d = d ;",
        "cin >> n >> m >> n ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        14,
        17,
        9
      ],
      "mod_code": [
        "int d = a / 2 + 1 ;",
        "string s = ' R ' ;",
        "int r = k / ( 2 * m ) + 1 ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        14,
        17,
        9,
        3
      ],
      "mod_code": [
        "int d = a / 2 + 1 ;",
        "string s = ' R ' ;",
        "int r = k / ( 2 * m ) + 1 ;",
        "cin >> n >> m >> n ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        14,
        17,
        3
      ],
      "mod_code": [
        "int d = a / 2 + 1 ;",
        "string s = ' R ' ;",
        "cin >> n >> m >> n ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        17,
        19
      ],
      "mod_code": [
        "string s = ' R ' ;",
        "char s = ' L ' ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        17,
        19,
        7
      ],
      "mod_code": [
        "string s = ' R ' ;",
        "char s = ' L ' ;",
        "d = d ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        17,
        19,
        7,
        9
      ],
      "mod_code": [
        "string s = ' R ' ;",
        "char s = ' L ' ;",
        "d = d ;",
        "int r = k / ( 2 * m ) + 1 ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        17,
        19,
        7,
        3
      ],
      "mod_code": [
        "string s = ' R ' ;",
        "char s = ' L ' ;",
        "d = d ;",
        "cin >> n >> m >> n ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        17,
        19,
        9
      ],
      "mod_code": [
        "string s = ' R ' ;",
        "char s = ' L ' ;",
        "int r = k / ( 2 * m ) + 1 ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        17,
        19,
        9,
        3
      ],
      "mod_code": [
        "string s = ' R ' ;",
        "char s = ' L ' ;",
        "int r = k / ( 2 * m ) + 1 ;",
        "cin >> n >> m >> n ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        17,
        19,
        3
      ],
      "mod_code": [
        "string s = ' R ' ;",
        "char s = ' L ' ;",
        "cin >> n >> m >> n ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        17,
        7
      ],
      "mod_code": [
        "string s = ' R ' ;",
        "d = d ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        17,
        7,
        9
      ],
      "mod_code": [
        "string s = ' R ' ;",
        "d = d ;",
        "int r = k / ( 2 * m ) + 1 ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        17,
        7,
        9,
        3
      ],
      "mod_code": [
        "string s = ' R ' ;",
        "d = d ;",
        "int r = k / ( 2 * m ) + 1 ;",
        "cin >> n >> m >> n ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        17,
        7,
        3
      ],
      "mod_code": [
        "string s = ' R ' ;",
        "d = d ;",
        "cin >> n >> m >> n ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        17,
        9
      ],
      "mod_code": [
        "string s = ' R ' ;",
        "int r = k / ( 2 * m ) + 1 ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        17,
        9,
        3
      ],
      "mod_code": [
        "string s = ' R ' ;",
        "int r = k / ( 2 * m ) + 1 ;",
        "cin >> n >> m >> n ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        17,
        3
      ],
      "mod_code": [
        "string s = ' R ' ;",
        "cin >> n >> m >> n ;"
      ],
      "err_line": 17,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    }
  ]
}