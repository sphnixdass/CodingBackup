{
  "meta": {
    "index": 973,
    "hitid": "3DWGDA5POFYLBVLCQK71QQW2KR61V8",
    "workerid": "A1APYLD4DUK33J",
    "probid": "119A",
    "subid": "48786555"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare gcd with integers a , b as arguments , returning integer",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if a is 0 , return b from function",
      "code": "if ( a == 0 ) return b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if b is 0 , return a from function",
      "code": "if ( b == 0 ) return a ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while b is true",
      "code": "while ( b )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integer r with r = a % b",
      "code": "int r = a % b ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "set a to b",
      "code": "a = b ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set b to r",
      "code": "b = r ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return a from function",
      "code": "return a ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "declare take with integer a , integer address k as arguments , returning integer",
      "code": "int take ( int a , int & k )",
      "indent": 0
    },
    {
      "line": 11,
      "text": "if k is less than result of run gcd with a , k as arguments , return - 1 from function",
      "code": "if ( k < gcd ( a , k ) ) { return - 1 ; }",
      "indent": 1
    },
    {
      "line": 12,
      "text": "decrement k by result of run gcd with a , k as arguments",
      "code": "k -= gcd ( a , k ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "return k from function",
      "code": "return k ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 16,
      "text": "create integers i , j , k",
      "code": "int i , j , k ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "read i read j read k",
      "code": "cin >> i >> j >> k ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "create integer s with s = 0",
      "code": "int s = 0 ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for a = 0 , incrementing a",
      "code": "for ( int a = 0 ; ; a ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if a % 2 is 0",
      "code": "if ( a % 2 == 0 )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "set k to result of run take with i , k as arguments",
      "code": "k = take ( i , k ) ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "if k is - 1",
      "code": "if ( k == - 1 )",
      "indent": 3
    },
    {
      "line": 23,
      "text": "print \" 1 \" print newline",
      "code": "cout << \" 1 \" << endl ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "if a % 2 is 1",
      "code": "if ( a % 2 == 1 )",
      "indent": 2
    },
    {
      "line": 28,
      "text": "set k to result of run take with j , k as arguments",
      "code": "k = take ( j , k ) ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "if k is - 1",
      "code": "if ( k == - 1 )",
      "indent": 3
    },
    {
      "line": 30,
      "text": "print \" 0 \" print newline",
      "code": "cout << \" 0 \" << endl ;",
      "indent": 4
    },
    {
      "line": 31,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "return ;"
      ],
      "err_line": 8,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "long long i , j , k ;"
      ],
      "err_line": 21,
      "err_msg": "invalid initialization of non-const reference of type ‘int&’ from an rvalue of type ‘int’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "cin >> i read j >> k ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( a = 0 ; ; a ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "k = take ( i ) ;"
      ],
      "err_line": 21,
      "err_msg": "too few arguments to function ‘int take(int, int&)’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "if ( k == - l )"
      ],
      "err_line": 22,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "k = take ( j ) ;"
      ],
      "err_line": 28,
      "err_msg": "too few arguments to function ‘int take(int, int&)’"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "if ( k == - l )"
      ],
      "err_line": 29,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        0
      ],
      "mod_code": [
        "int a = b ;",
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        0,
        31
      ],
      "mod_code": [
        "int a = b ;",
        "int gcd ( int a , int b ) ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        0,
        31,
        17
      ],
      "mod_code": [
        "int a = b ;",
        "int gcd ( int a , int b ) ;",
        "break break ;",
        "cin >> i read j >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        0,
        31,
        3
      ],
      "mod_code": [
        "int a = b ;",
        "int gcd ( int a , int b ) ;",
        "break break ;",
        "while ( b ) b ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        0,
        31,
        28
      ],
      "mod_code": [
        "int a = b ;",
        "int gcd ( int a , int b ) ;",
        "break break ;",
        "k = take ( j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        0,
        17
      ],
      "mod_code": [
        "int a = b ;",
        "int gcd ( int a , int b ) ;",
        "cin >> i read j >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        0,
        17,
        3
      ],
      "mod_code": [
        "int a = b ;",
        "int gcd ( int a , int b ) ;",
        "cin >> i read j >> k ;",
        "while ( b ) b ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        0,
        17,
        28
      ],
      "mod_code": [
        "int a = b ;",
        "int gcd ( int a , int b ) ;",
        "cin >> i read j >> k ;",
        "k = take ( j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        0,
        3
      ],
      "mod_code": [
        "int a = b ;",
        "int gcd ( int a , int b ) ;",
        "while ( b ) b ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        0,
        3,
        28
      ],
      "mod_code": [
        "int a = b ;",
        "int gcd ( int a , int b ) ;",
        "while ( b ) b ++ ;",
        "k = take ( j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        0,
        28
      ],
      "mod_code": [
        "int a = b ;",
        "int gcd ( int a , int b ) ;",
        "k = take ( j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        31
      ],
      "mod_code": [
        "int a = b ;",
        "break break ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        31,
        17
      ],
      "mod_code": [
        "int a = b ;",
        "break break ;",
        "cin >> i read j >> k ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        5,
        31,
        17,
        3
      ],
      "mod_code": [
        "int a = b ;",
        "break break ;",
        "cin >> i read j >> k ;",
        "while ( b ) b ++ ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        5,
        31,
        17,
        28
      ],
      "mod_code": [
        "int a = b ;",
        "break break ;",
        "cin >> i read j >> k ;",
        "k = take ( j ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        5,
        31,
        3
      ],
      "mod_code": [
        "int a = b ;",
        "break break ;",
        "while ( b ) b ++ ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        31,
        3,
        28
      ],
      "mod_code": [
        "int a = b ;",
        "break break ;",
        "while ( b ) b ++ ;",
        "k = take ( j ) ;"
      ],
      "err_line": 28,
      "err_msg": "too few arguments to function ‘int take(int, int&)’"
    },
    {
      "mod_line": [
        5,
        31,
        28
      ],
      "mod_code": [
        "int a = b ;",
        "break break ;",
        "k = take ( j ) ;"
      ],
      "err_line": 28,
      "err_msg": "too few arguments to function ‘int take(int, int&)’"
    },
    {
      "mod_line": [
        5,
        17
      ],
      "mod_code": [
        "int a = b ;",
        "cin >> i read j >> k ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        5,
        17,
        3
      ],
      "mod_code": [
        "int a = b ;",
        "cin >> i read j >> k ;",
        "while ( b ) b ++ ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        5,
        17,
        3,
        28
      ],
      "mod_code": [
        "int a = b ;",
        "cin >> i read j >> k ;",
        "while ( b ) b ++ ;",
        "k = take ( j ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        5,
        17,
        28
      ],
      "mod_code": [
        "int a = b ;",
        "cin >> i read j >> k ;",
        "k = take ( j ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        5,
        3,
        28
      ],
      "mod_code": [
        "int a = b ;",
        "while ( b ) b ++ ;",
        "k = take ( j ) ;"
      ],
      "err_line": 28,
      "err_msg": "too few arguments to function ‘int take(int, int&)’"
    },
    {
      "mod_line": [
        5,
        28
      ],
      "mod_code": [
        "int a = b ;",
        "k = take ( j ) ;"
      ],
      "err_line": 28,
      "err_msg": "too few arguments to function ‘int take(int, int&)’"
    },
    {
      "mod_line": [
        0,
        31
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        31,
        17
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "break break ;",
        "cin >> i read j >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        31,
        17,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "break break ;",
        "cin >> i read j >> k ;",
        "while ( b ) b ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        31,
        17,
        28
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "break break ;",
        "cin >> i read j >> k ;",
        "k = take ( j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        31,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "break break ;",
        "while ( b ) b ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        31,
        3,
        28
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "break break ;",
        "while ( b ) b ++ ;",
        "k = take ( j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        31,
        28
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "break break ;",
        "k = take ( j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        17
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "cin >> i read j >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        17,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "cin >> i read j >> k ;",
        "while ( b ) b ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        17,
        3,
        28
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "cin >> i read j >> k ;",
        "while ( b ) b ++ ;",
        "k = take ( j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        17,
        28
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "cin >> i read j >> k ;",
        "k = take ( j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "while ( b ) b ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        28
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "while ( b ) b ++ ;",
        "k = take ( j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        28
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "k = take ( j ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        31,
        17
      ],
      "mod_code": [
        "break break ;",
        "cin >> i read j >> k ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        31,
        17,
        3
      ],
      "mod_code": [
        "break break ;",
        "cin >> i read j >> k ;",
        "while ( b ) b ++ ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        31,
        17,
        3,
        28
      ],
      "mod_code": [
        "break break ;",
        "cin >> i read j >> k ;",
        "while ( b ) b ++ ;",
        "k = take ( j ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        31,
        17,
        28
      ],
      "mod_code": [
        "break break ;",
        "cin >> i read j >> k ;",
        "k = take ( j ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        31,
        3
      ],
      "mod_code": [
        "break break ;",
        "while ( b ) b ++ ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        31,
        3,
        28
      ],
      "mod_code": [
        "break break ;",
        "while ( b ) b ++ ;",
        "k = take ( j ) ;"
      ],
      "err_line": 28,
      "err_msg": "too few arguments to function ‘int take(int, int&)’"
    },
    {
      "mod_line": [
        31,
        28
      ],
      "mod_code": [
        "break break ;",
        "k = take ( j ) ;"
      ],
      "err_line": 28,
      "err_msg": "too few arguments to function ‘int take(int, int&)’"
    },
    {
      "mod_line": [
        17,
        3
      ],
      "mod_code": [
        "cin >> i read j >> k ;",
        "while ( b ) b ++ ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        17,
        3,
        28
      ],
      "mod_code": [
        "cin >> i read j >> k ;",
        "while ( b ) b ++ ;",
        "k = take ( j ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        17,
        28
      ],
      "mod_code": [
        "cin >> i read j >> k ;",
        "k = take ( j ) ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        3,
        28
      ],
      "mod_code": [
        "while ( b ) b ++ ;",
        "k = take ( j ) ;"
      ],
      "err_line": 28,
      "err_msg": "too few arguments to function ‘int take(int, int&)’"
    }
  ]
}