{
  "meta": {
    "index": 2543,
    "hitid": "3OWZNK3RYLJSN1E84YXAZN4OYQK2UA",
    "workerid": "A1APYLD4DUK33J",
    "probid": "779A",
    "subid": "46671252"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare MOD with integers a , b as arguments , returning integer",
      "code": "int MOD ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if a is greater than b",
      "code": "if ( a > b )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return a - b from function",
      "code": "return a - b ;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return b - a from function",
      "code": "return b - a ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "declare max3 with long long integers a , b , c as arguments , returning long long integer",
      "code": "long long int max3 ( long long int a , long long int b , long long int c )",
      "indent": 0
    },
    {
      "line": 7,
      "text": "return maximum of ( c and maxiimum of ( a and b ) )",
      "code": "return max ( c , max ( a , b ) ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "declare power with long long itnegers x , y , p as arguments , returning long long integer",
      "code": "long long int power ( long long int x , long long int y , long long int p )",
      "indent": 0
    },
    {
      "line": 10,
      "text": "declare long long integer res = 1",
      "code": "long long int res = 1 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "let x be x % p",
      "code": "x = x % p ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "while y is greater than 0",
      "code": "while ( y > 0 )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if y bitwise and 1 , let res be ( res * x ) % p",
      "code": "if ( y & 1 ) res = ( res * x ) % p ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "let y be y bitshift left 1",
      "code": "y = y >> 1 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "let x be ( x * x ) % p",
      "code": "x = ( x * x ) % p ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "return res from function",
      "code": "return res ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 19,
      "text": "declare max with long long integers a , b as arguments , returning long long integer",
      "code": "long long int max ( long long int a , long long int b )",
      "indent": 0
    },
    {
      "line": 20,
      "text": "return a if a is greater than b else b",
      "code": "return ( a > b ) ? a : b ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 22,
      "text": "declare min with long long integers a , b as arguments , returning long long integer",
      "code": "long long int min ( long long int a , long long int b )",
      "indent": 0
    },
    {
      "line": 23,
      "text": "return a if a is less than b else b",
      "code": "return ( a < b ) ? a : b ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 25,
      "text": "declare gcd with long long integers a , b as arguments , returning long long integer",
      "code": "long long int gcd ( long long int a , long long int b )",
      "indent": 0
    },
    {
      "line": 26,
      "text": "if b is 1",
      "code": "if ( b == 1 )",
      "indent": 1
    },
    {
      "line": 27,
      "text": "return 1 from function",
      "code": "return 1 ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "else if a % b is 0",
      "code": "else if ( a % b == 0 )",
      "indent": 1
    },
    {
      "line": 29,
      "text": "return b",
      "code": "return b ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 31,
      "text": "return result of run gcd ( b , a % b )",
      "code": "return gcd ( b , a % b ) ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 34,
      "text": "declare integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "declare integers i , j , k",
      "code": "int i , j , k ;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "declare integer arrays a size 6 , b size 6",
      "code": "int a [ 6 ] , b [ 6 ] ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "set bytes from a to size of a to value 0",
      "code": "memset ( a , 0 , sizeof ( a ) ) ;",
      "indent": 1
    },
    {
      "line": 39,
      "text": "set bytes from b to size of b to value 0",
      "code": "memset ( b , 0 , sizeof ( b ) ) ;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "for i = 0 to i is not n , incrementing i",
      "code": "for ( i = 0 ; i != n ; i ++ )",
      "indent": 1
    },
    {
      "line": 41,
      "text": "read j",
      "code": "cin >> j ;",
      "indent": 2
    },
    {
      "line": 42,
      "text": "increment a [ j ]",
      "code": "a [ j ] ++ ;",
      "indent": 2
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 44,
      "text": "for i = 0 to i is not n , incrementing i",
      "code": "for ( i = 0 ; i != n ; i ++ )",
      "indent": 1
    },
    {
      "line": 45,
      "text": "read j",
      "code": "cin >> j ;",
      "indent": 2
    },
    {
      "line": 46,
      "text": "increment b [ j ]",
      "code": "b [ j ] ++ ;",
      "indent": 2
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 48,
      "text": "declare integer mini = 0",
      "code": "int mini = 0 ;",
      "indent": 1
    },
    {
      "line": 49,
      "text": "for i = 1 to i is not 6 , incrementing i",
      "code": "for ( i = 1 ; i != 6 ; i ++ )",
      "indent": 1
    },
    {
      "line": 50,
      "text": "if ( a [ i ] + b [ i ] ) % 2 is 0",
      "code": "if ( ( a [ i ] + b [ i ] ) % 2 == 0 )",
      "indent": 2
    },
    {
      "line": 51,
      "text": "increment mini by maximum of ( a [ i ] and b [ i ] ) - ( a [ i ] + b [ i ] ) / 2",
      "code": "mini += max ( a [ i ] , b [ i ] ) - ( a [ i ] + b [ i ] ) / 2 ;",
      "indent": 3
    },
    {
      "line": 52,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 53,
      "text": "print \" - 1 \\ n \"",
      "code": "cout << \" -1\\n \" ;",
      "indent": 3
    },
    {
      "line": 54,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 55,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 57,
      "text": "if mini % 2 is 0",
      "code": "if ( mini % 2 == 0 )",
      "indent": 1
    },
    {
      "line": 58,
      "text": "print mini / 2 and \" \\ n \"",
      "code": "cout << mini / 2 << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 59,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 60,
      "text": "print \" - 1 \\ n \"",
      "code": "cout << \" -1\\n \" ;",
      "indent": 2
    },
    {
      "line": 61,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 62,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a , b ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int MOD ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "long long int max3 ( long long int a , long long int c , long long int c )"
      ],
      "err_line": 6,
      "err_msg": "redefinition of ‘long long int c’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a & b ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 40,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 39,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "{ cin >> j ;"
      ],
      "err_line": 62,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        45
      ],
      "mod_code": [
        "{ cin >> j ;"
      ],
      "err_line": 62,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        50
      ],
      "mod_code": [
        "if ( if ( a [ i ] + b [ i ] ) % 2 == 0 )"
      ],
      "err_line": 50,
      "err_msg": "expected primary-expression before ‘if’"
    },
    {
      "mod_line": [
        51
      ],
      "mod_code": [
        "mini = mini ( a [ i ] , b [ i ] ) - ( a [ i ] + b [ i ] ) / 2 ;"
      ],
      "err_line": 51,
      "err_msg": "‘mini’ cannot be used as a function"
    },
    {
      "mod_line": [
        7,
        41
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a , b ) ) ;",
        "{ cin >> j ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        41,
        45
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a , b ) ) ;",
        "{ cin >> j ;",
        "{ cin >> j ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        41,
        45,
        31
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a , b ) ) ;",
        "{ cin >> j ;",
        "{ cin >> j ;",
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        41,
        45,
        37
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a , b ) ) ;",
        "{ cin >> j ;",
        "{ cin >> j ;",
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        41,
        31
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a , b ) ) ;",
        "{ cin >> j ;",
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        41,
        31,
        37
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a , b ) ) ;",
        "{ cin >> j ;",
        "return gcd ( b , a % b ) ) ;",
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        41,
        37
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a , b ) ) ;",
        "{ cin >> j ;",
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        45
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a , b ) ) ;",
        "{ cin >> j ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        45,
        31
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a , b ) ) ;",
        "{ cin >> j ;",
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        45,
        31,
        37
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a , b ) ) ;",
        "{ cin >> j ;",
        "return gcd ( b , a % b ) ) ;",
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        45,
        37
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a , b ) ) ;",
        "{ cin >> j ;",
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        31
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a , b ) ) ;",
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        31,
        37
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a , b ) ) ;",
        "return gcd ( b , a % b ) ) ;",
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        37
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a , b ) ) ;",
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        41
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a & b ) ) ;",
        "{ cin >> j ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        41,
        45
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a & b ) ) ;",
        "{ cin >> j ;",
        "{ cin >> j ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        41,
        45,
        31
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a & b ) ) ;",
        "{ cin >> j ;",
        "{ cin >> j ;",
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        41,
        45,
        37
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a & b ) ) ;",
        "{ cin >> j ;",
        "{ cin >> j ;",
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        41,
        31
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a & b ) ) ;",
        "{ cin >> j ;",
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        41,
        31,
        37
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a & b ) ) ;",
        "{ cin >> j ;",
        "return gcd ( b , a % b ) ) ;",
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        41,
        37
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a & b ) ) ;",
        "{ cin >> j ;",
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        45
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a & b ) ) ;",
        "{ cin >> j ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        45,
        31
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a & b ) ) ;",
        "{ cin >> j ;",
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        45,
        31,
        37
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a & b ) ) ;",
        "{ cin >> j ;",
        "return gcd ( b , a % b ) ) ;",
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        45,
        37
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a & b ) ) ;",
        "{ cin >> j ;",
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        31
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a & b ) ) ;",
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        31,
        37
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a & b ) ) ;",
        "return gcd ( b , a % b ) ) ;",
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        37
      ],
      "mod_code": [
        "return max ( c , maxiimum ( a & b ) ) ;",
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘maxiimum’ was not declared in this scope"
    },
    {
      "mod_line": [
        41,
        45
      ],
      "mod_code": [
        "{ cin >> j ;",
        "{ cin >> j ;"
      ],
      "err_line": 62,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        41,
        45,
        31
      ],
      "mod_code": [
        "{ cin >> j ;",
        "{ cin >> j ;",
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        41,
        45,
        31,
        37
      ],
      "mod_code": [
        "{ cin >> j ;",
        "{ cin >> j ;",
        "return gcd ( b , a % b ) ) ;",
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        41,
        45,
        37
      ],
      "mod_code": [
        "{ cin >> j ;",
        "{ cin >> j ;",
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 39,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        41,
        31
      ],
      "mod_code": [
        "{ cin >> j ;",
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        41,
        31,
        37
      ],
      "mod_code": [
        "{ cin >> j ;",
        "return gcd ( b , a % b ) ) ;",
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        41,
        37
      ],
      "mod_code": [
        "{ cin >> j ;",
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 39,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        45,
        31
      ],
      "mod_code": [
        "{ cin >> j ;",
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        45,
        31,
        37
      ],
      "mod_code": [
        "{ cin >> j ;",
        "return gcd ( b , a % b ) ) ;",
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        45,
        37
      ],
      "mod_code": [
        "{ cin >> j ;",
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 39,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        37
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "int a [ 6 ] [ 6 ] ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    }
  ]
}