{
  "meta": {
    "index": 2312,
    "hitid": "3KLL7H3EGDVWF66QS9AMIDC91G7HVS",
    "workerid": "A1MJVTR0PCKBWW",
    "probid": "713A",
    "subid": "45346723"
  },
  "lines": [
    {
      "line": 0,
      "text": "integers = t integer maxn = 2e5 + 100",
      "code": "const int maxn = 2e5 + 100 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "integers = t integer mod = 998244353",
      "code": "const int mod = 998244353 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "integers = q",
      "code": "int q ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "make map called m using string and integer values",
      "code": "map < string , int > m ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "str = string array",
      "code": "string str ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read q ;",
      "code": "while ( cin >> q )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "remove all elements from vector m",
      "code": "m . clear ( ) ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if q is true do the following",
      "code": "while ( q -- )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "x , str = string array",
      "code": "string x , str ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "read str , x",
      "code": "cin >> str >> x ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "integers len = x . size ( )",
      "code": "int len = x . size ( ) ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "y = = string array",
      "code": "string y = \" \" ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "for i = 0 to less than 18 - len make y = 1",
      "code": "for ( int i = 0 ; i < 18 - len ; i ++ ) y += \" 0 \" ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "for i = 0 to less than len do the following",
      "code": "for ( int i = 0 ; i < len ; i ++ )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "integers = num = x [ i ] - 0",
      "code": "int num = x [ i ] - ' 0 ' ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "if num & 1 is true",
      "code": "if ( num & 1 )",
      "indent": 4
    },
    {
      "line": 17,
      "text": "set x [ i ] to 1",
      "code": "x [ i ] = ' 1 ' ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 19,
      "text": "set x [ i ] to 0",
      "code": "x [ i ] = ' 0 ' ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 21,
      "text": "y equals y plus x",
      "code": "y += x ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "if str is + then do the following",
      "code": "if ( str == \" + \" )",
      "indent": 3
    },
    {
      "line": 23,
      "text": "add one to m [ y ]",
      "code": "m [ y ] ++ ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "else if str is - then do the following",
      "code": "else if ( str == \" - \" )",
      "indent": 3
    },
    {
      "line": 25,
      "text": "minus 1 from m [ y ]",
      "code": "m [ y ] -- ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 27,
      "text": "output m [ y ]",
      "code": "cout << m [ y ] << endl ;",
      "indent": 4
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "map < string , string > m ;"
      ],
      "err_line": 23,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "if ( str == ' + ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "else if ( str == ' - ' )"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "while ( cin >> q ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "q . clear ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘clear’ in ‘q’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "string str , str ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘std::__cxx11::string str’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "while ( cin >> str >> x )"
      ],
      "err_line": 13,
      "err_msg": "‘len’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "m [ y ] += one ;"
      ],
      "err_line": 23,
      "err_msg": "‘one’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "map < string , string > m ;",
        "while ( q )"
      ],
      "err_line": 23,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        13
      ],
      "mod_code": [
        "map < string , string > m ;",
        "while ( q )",
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }"
      ],
      "err_line": 23,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        13,
        19
      ],
      "mod_code": [
        "map < string , string > m ;",
        "while ( q )",
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }",
        "x [ i ] = 0 ;"
      ],
      "err_line": 23,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        13,
        22
      ],
      "mod_code": [
        "map < string , string > m ;",
        "while ( q )",
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }",
        "if ( str == ' + ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        3,
        8,
        13,
        24
      ],
      "mod_code": [
        "map < string , string > m ;",
        "while ( q )",
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }",
        "else if ( str == ' - ' )"
      ],
      "err_line": 23,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        19
      ],
      "mod_code": [
        "map < string , string > m ;",
        "while ( q )",
        "x [ i ] = 0 ;"
      ],
      "err_line": 23,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        19,
        22
      ],
      "mod_code": [
        "map < string , string > m ;",
        "while ( q )",
        "x [ i ] = 0 ;",
        "if ( str == ' + ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        3,
        8,
        19,
        24
      ],
      "mod_code": [
        "map < string , string > m ;",
        "while ( q )",
        "x [ i ] = 0 ;",
        "else if ( str == ' - ' )"
      ],
      "err_line": 23,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        22
      ],
      "mod_code": [
        "map < string , string > m ;",
        "while ( q )",
        "if ( str == ' + ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        3,
        8,
        22,
        24
      ],
      "mod_code": [
        "map < string , string > m ;",
        "while ( q )",
        "if ( str == ' + ' )",
        "else if ( str == ' - ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        3,
        8,
        24
      ],
      "mod_code": [
        "map < string , string > m ;",
        "while ( q )",
        "else if ( str == ' - ' )"
      ],
      "err_line": 23,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "map < string , string > m ;",
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }"
      ],
      "err_line": 23,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        13,
        19
      ],
      "mod_code": [
        "map < string , string > m ;",
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }",
        "x [ i ] = 0 ;"
      ],
      "err_line": 23,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        13,
        19,
        22
      ],
      "mod_code": [
        "map < string , string > m ;",
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }",
        "x [ i ] = 0 ;",
        "if ( str == ' + ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        3,
        13,
        19,
        24
      ],
      "mod_code": [
        "map < string , string > m ;",
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }",
        "x [ i ] = 0 ;",
        "else if ( str == ' - ' )"
      ],
      "err_line": 23,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        13,
        22
      ],
      "mod_code": [
        "map < string , string > m ;",
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }",
        "if ( str == ' + ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        3,
        13,
        22,
        24
      ],
      "mod_code": [
        "map < string , string > m ;",
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }",
        "if ( str == ' + ' )",
        "else if ( str == ' - ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        3,
        13,
        24
      ],
      "mod_code": [
        "map < string , string > m ;",
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }",
        "else if ( str == ' - ' )"
      ],
      "err_line": 23,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        19
      ],
      "mod_code": [
        "map < string , string > m ;",
        "x [ i ] = 0 ;"
      ],
      "err_line": 23,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        19,
        22
      ],
      "mod_code": [
        "map < string , string > m ;",
        "x [ i ] = 0 ;",
        "if ( str == ' + ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        3,
        19,
        22,
        24
      ],
      "mod_code": [
        "map < string , string > m ;",
        "x [ i ] = 0 ;",
        "if ( str == ' + ' )",
        "else if ( str == ' - ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        3,
        19,
        24
      ],
      "mod_code": [
        "map < string , string > m ;",
        "x [ i ] = 0 ;",
        "else if ( str == ' - ' )"
      ],
      "err_line": 23,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        22
      ],
      "mod_code": [
        "map < string , string > m ;",
        "if ( str == ' + ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        3,
        22,
        24
      ],
      "mod_code": [
        "map < string , string > m ;",
        "if ( str == ' + ' )",
        "else if ( str == ' - ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        3,
        24
      ],
      "mod_code": [
        "map < string , string > m ;",
        "else if ( str == ' - ' )"
      ],
      "err_line": 23,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        13,
        19,
        22
      ],
      "mod_code": [
        "while ( q )",
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }",
        "x [ i ] = 0 ;",
        "if ( str == ' + ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        8,
        13,
        19,
        24
      ],
      "mod_code": [
        "while ( q )",
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }",
        "x [ i ] = 0 ;",
        "else if ( str == ' - ' )"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        8,
        13,
        22
      ],
      "mod_code": [
        "while ( q )",
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }",
        "if ( str == ' + ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        8,
        13,
        22,
        24
      ],
      "mod_code": [
        "while ( q )",
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }",
        "if ( str == ' + ' )",
        "else if ( str == ' - ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        8,
        13,
        24
      ],
      "mod_code": [
        "while ( q )",
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }",
        "else if ( str == ' - ' )"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        8,
        19,
        22
      ],
      "mod_code": [
        "while ( q )",
        "x [ i ] = 0 ;",
        "if ( str == ' + ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        8,
        19,
        22,
        24
      ],
      "mod_code": [
        "while ( q )",
        "x [ i ] = 0 ;",
        "if ( str == ' + ' )",
        "else if ( str == ' - ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        8,
        19,
        24
      ],
      "mod_code": [
        "while ( q )",
        "x [ i ] = 0 ;",
        "else if ( str == ' - ' )"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        8,
        22
      ],
      "mod_code": [
        "while ( q )",
        "if ( str == ' + ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        8,
        22,
        24
      ],
      "mod_code": [
        "while ( q )",
        "if ( str == ' + ' )",
        "else if ( str == ' - ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        8,
        24
      ],
      "mod_code": [
        "while ( q )",
        "else if ( str == ' - ' )"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        13,
        19,
        22
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }",
        "x [ i ] = 0 ;",
        "if ( str == ' + ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        13,
        19,
        22,
        24
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }",
        "x [ i ] = 0 ;",
        "if ( str == ' + ' )",
        "else if ( str == ' - ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        13,
        19,
        24
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }",
        "x [ i ] = 0 ;",
        "else if ( str == ' - ' )"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        13,
        22
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }",
        "if ( str == ' + ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        13,
        22,
        24
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }",
        "if ( str == ' + ' )",
        "else if ( str == ' - ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        13,
        24
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 18 - len ; i ++ ) { y = 1 ; }",
        "else if ( str == ' - ' )"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        19,
        22
      ],
      "mod_code": [
        "x [ i ] = 0 ;",
        "if ( str == ' + ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        19,
        22,
        24
      ],
      "mod_code": [
        "x [ i ] = 0 ;",
        "if ( str == ' + ' )",
        "else if ( str == ' - ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        19,
        24
      ],
      "mod_code": [
        "x [ i ] = 0 ;",
        "else if ( str == ' - ' )"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        22,
        24
      ],
      "mod_code": [
        "if ( str == ' + ' )",
        "else if ( str == ' - ' )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    }
  ]
}