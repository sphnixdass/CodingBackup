{
  "meta": {
    "index": 1395,
    "hitid": "32XN26MTXZDI81O0GX1VPCFQO14L0C",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "259A",
    "subid": "42590377"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , cnt = integers with n = 8 , cnt = 0",
      "code": "int n = 8 , cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while decrement n",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "a = string",
      "code": "string a ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if a is WBWBWBWB",
      "code": "if ( a == \" WBWBWBWB \" )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else if a is BWBWBWBW",
      "code": "else if ( a == \" BWBWBWBW \" )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if ( cnt is 8 )",
      "code": "if ( cnt == 8 )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print YES",
      "code": "cout << \" YES\\n \" ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print NO",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( a == WBWBWBWB )"
      ],
      "err_line": 5,
      "err_msg": "‘WBWBWBWB’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else if ( a == BWBWBWBW )"
      ],
      "err_line": 7,
      "err_msg": "‘BWBWBWBW’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( n -- decrement )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘decrement’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char a ;"
      ],
      "err_line": 5,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( a == ' WBWBWBWB ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else if ( a == ' BWBWBWBW ' )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;",
        "if ( a == WBWBWBWB )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        5,
        7
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;",
        "if ( a == WBWBWBWB )",
        "else if ( a == BWBWBWBW )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        5,
        7,
        10
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;",
        "if ( a == WBWBWBWB )",
        "else if ( a == BWBWBWBW )",
        "if ( cnt == ' 8 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        5,
        7,
        2
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;",
        "if ( a == WBWBWBWB )",
        "else if ( a == BWBWBWBW )",
        "while ( n -- decrement )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        5,
        10
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;",
        "if ( a == WBWBWBWB )",
        "if ( cnt == ' 8 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        5,
        10,
        2
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;",
        "if ( a == WBWBWBWB )",
        "if ( cnt == ' 8 ' )",
        "while ( n -- decrement )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        5,
        2
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;",
        "if ( a == WBWBWBWB )",
        "while ( n -- decrement )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;",
        "else if ( a == BWBWBWBW )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        7,
        10
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;",
        "else if ( a == BWBWBWBW )",
        "if ( cnt == ' 8 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        7,
        10,
        5
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;",
        "else if ( a == BWBWBWBW )",
        "if ( cnt == ' 8 ' )",
        "if ( a == ' WBWBWBWB ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        7,
        10,
        2
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;",
        "else if ( a == BWBWBWBW )",
        "if ( cnt == ' 8 ' )",
        "while ( n -- decrement )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        7,
        5
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;",
        "else if ( a == BWBWBWBW )",
        "if ( a == ' WBWBWBWB ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        7,
        5,
        2
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;",
        "else if ( a == BWBWBWBW )",
        "if ( a == ' WBWBWBWB ' )",
        "while ( n -- decrement )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        7,
        2
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;",
        "else if ( a == BWBWBWBW )",
        "while ( n -- decrement )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;",
        "if ( cnt == ' 8 ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        10,
        5
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;",
        "if ( cnt == ' 8 ' )",
        "if ( a == ' WBWBWBWB ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        10,
        5,
        2
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;",
        "if ( cnt == ' 8 ' )",
        "if ( a == ' WBWBWBWB ' )",
        "while ( n -- decrement )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        10,
        2
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;",
        "if ( cnt == ' 8 ' )",
        "while ( n -- decrement )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;",
        "if ( a == ' WBWBWBWB ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        5,
        2
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;",
        "if ( a == ' WBWBWBWB ' )",
        "while ( n -- decrement )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt = 0 ;",
        "while ( n -- decrement )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "if ( a == WBWBWBWB )",
        "else if ( a == BWBWBWBW )"
      ],
      "err_line": 5,
      "err_msg": "‘WBWBWBWB’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        10
      ],
      "mod_code": [
        "if ( a == WBWBWBWB )",
        "else if ( a == BWBWBWBW )",
        "if ( cnt == ' 8 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘WBWBWBWB’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        10,
        2
      ],
      "mod_code": [
        "if ( a == WBWBWBWB )",
        "else if ( a == BWBWBWBW )",
        "if ( cnt == ' 8 ' )",
        "while ( n -- decrement )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘decrement’"
    },
    {
      "mod_line": [
        5,
        7,
        2
      ],
      "mod_code": [
        "if ( a == WBWBWBWB )",
        "else if ( a == BWBWBWBW )",
        "while ( n -- decrement )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘decrement’"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "if ( a == WBWBWBWB )",
        "if ( cnt == ' 8 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘WBWBWBWB’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10,
        2
      ],
      "mod_code": [
        "if ( a == WBWBWBWB )",
        "if ( cnt == ' 8 ' )",
        "while ( n -- decrement )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘decrement’"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "if ( a == WBWBWBWB )",
        "while ( n -- decrement )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘decrement’"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "else if ( a == BWBWBWBW )",
        "if ( cnt == ' 8 ' )"
      ],
      "err_line": 7,
      "err_msg": "‘BWBWBWBW’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10,
        5
      ],
      "mod_code": [
        "else if ( a == BWBWBWBW )",
        "if ( cnt == ' 8 ' )",
        "if ( a == ' WBWBWBWB ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        7,
        10,
        5,
        2
      ],
      "mod_code": [
        "else if ( a == BWBWBWBW )",
        "if ( cnt == ' 8 ' )",
        "if ( a == ' WBWBWBWB ' )",
        "while ( n -- decrement )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘decrement’"
    },
    {
      "mod_line": [
        7,
        10,
        2
      ],
      "mod_code": [
        "else if ( a == BWBWBWBW )",
        "if ( cnt == ' 8 ' )",
        "while ( n -- decrement )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘decrement’"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "else if ( a == BWBWBWBW )",
        "if ( a == ' WBWBWBWB ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        7,
        5,
        2
      ],
      "mod_code": [
        "else if ( a == BWBWBWBW )",
        "if ( a == ' WBWBWBWB ' )",
        "while ( n -- decrement )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘decrement’"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "else if ( a == BWBWBWBW )",
        "while ( n -- decrement )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘decrement’"
    },
    {
      "mod_line": [
        10,
        5
      ],
      "mod_code": [
        "if ( cnt == ' 8 ' )",
        "if ( a == ' WBWBWBWB ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        5,
        2
      ],
      "mod_code": [
        "if ( cnt == ' 8 ' )",
        "if ( a == ' WBWBWBWB ' )",
        "while ( n -- decrement )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘decrement’"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "if ( cnt == ' 8 ' )",
        "while ( n -- decrement )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘decrement’"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "if ( a == ' WBWBWBWB ' )",
        "while ( n -- decrement )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘decrement’"
    }
  ]
}