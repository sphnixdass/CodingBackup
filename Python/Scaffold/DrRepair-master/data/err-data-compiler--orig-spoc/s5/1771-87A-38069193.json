{
  "meta": {
    "index": 1771,
    "hitid": "306996CF6WE62HN6L3G1PE2VHZV1B7",
    "workerid": "A1AYVATMT88U1W",
    "probid": "87A",
    "subid": "38069193"
  },
  "lines": [
    {
      "line": 0,
      "text": "gcd be a function which accepts long integers a , b and returns a long integer",
      "code": "long long gcd ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if b = 0 , return a",
      "code": "if ( b == 0 ) return a ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return gcd of b , a modulo b",
      "code": "return gcd ( b , a % b ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "Let a , b be long integers",
      "code": "long long a , b ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "x , y , g are all long integers which equal 0",
      "code": "long long x = 0 , y = 0 , g = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "let string s be Dasha , t be Masha and w be Equal",
      "code": "string s = \" Dasha \" , t = \" Masha \" , w = \" Equal \" ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read a , b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if a is less than b",
      "code": "if ( a < b )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "swap the values of a , b",
      "code": "swap ( a , b ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "swap the values of s , t",
      "code": "swap ( s , t ) ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "g equals to gcd ( a , b )",
      "code": "g = gcd ( a , b ) ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "g equals to a * b / g",
      "code": "g = a * b / g ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for integer i = 1 to g inclusive",
      "code": "for ( int i = 1 ; i <= g ; i ++ )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if a * i > g , stop",
      "code": "if ( a * i > g ) break ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "increment x by 1",
      "code": "x ++ ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i = 1 to g inclusive",
      "code": "for ( int i = 1 ; i <= g ; i ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if b * i > g , stop",
      "code": "if ( b * i > g ) break ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if ( b * i ) % a not equals 0 , increment y by 1",
      "code": "if ( ( b * i ) % a != 0 ) y ++ ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "if x equals y",
      "code": "if ( x == y )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print w and new line",
      "code": "cout << w << endl ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "else if x > y",
      "code": "else if ( x > y )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print s and new line",
      "code": "cout << s << endl ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "else if x < y",
      "code": "else if ( x < y )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print t and new line",
      "code": "cout << t << endl ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "string s , t , Masha = Masha ;"
      ],
      "err_line": 24,
      "err_msg": "‘w’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "long long x , y , g , g = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘long long int g’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "string s , t , Masha = Equal ;"
      ],
      "err_line": 7,
      "err_msg": "‘Equal’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "swap ( s ) ;"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘swap(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "int g = gcd ( a , b ) ;"
      ],
      "err_line": 13,
      "err_msg": "conflicting declaration ‘int g’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( i = 1 ; i <= g ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "else if ( x == y )"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "long long x , y , g = 0 ;",
        "string s , t , Masha = Masha ;"
      ],
      "err_line": 24,
      "err_msg": "‘w’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        11
      ],
      "mod_code": [
        "long long x , y , g = 0 ;",
        "string s , t , Masha = Masha ;",
        "swap ( s ) ;"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘swap(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        6,
        7,
        11,
        23
      ],
      "mod_code": [
        "long long x , y , g = 0 ;",
        "string s , t , Masha = Masha ;",
        "swap ( s ) ;",
        "else if ( x == y )"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘swap(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        6,
        7,
        11,
        2
      ],
      "mod_code": [
        "long long x , y , g = 0 ;",
        "string s , t , Masha = Masha ;",
        "swap ( s ) ;",
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        23
      ],
      "mod_code": [
        "long long x , y , g = 0 ;",
        "string s , t , Masha = Masha ;",
        "else if ( x == y )"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        7,
        23,
        2
      ],
      "mod_code": [
        "long long x , y , g = 0 ;",
        "string s , t , Masha = Masha ;",
        "else if ( x == y )",
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        2
      ],
      "mod_code": [
        "long long x , y , g = 0 ;",
        "string s , t , Masha = Masha ;",
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "long long x , y , g = 0 ;",
        "swap ( s ) ;"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘swap(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        6,
        11,
        23
      ],
      "mod_code": [
        "long long x , y , g = 0 ;",
        "swap ( s ) ;",
        "else if ( x == y )"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘swap(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        6,
        11,
        23,
        2
      ],
      "mod_code": [
        "long long x , y , g = 0 ;",
        "swap ( s ) ;",
        "else if ( x == y )",
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        11,
        2
      ],
      "mod_code": [
        "long long x , y , g = 0 ;",
        "swap ( s ) ;",
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        23
      ],
      "mod_code": [
        "long long x , y , g = 0 ;",
        "else if ( x == y )"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        23,
        2
      ],
      "mod_code": [
        "long long x , y , g = 0 ;",
        "else if ( x == y )",
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "long long x , y , g = 0 ;",
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "string s , t , Masha = Masha ;",
        "swap ( s ) ;"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘swap(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        7,
        11,
        23
      ],
      "mod_code": [
        "string s , t , Masha = Masha ;",
        "swap ( s ) ;",
        "else if ( x == y )"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘swap(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        7,
        11,
        23,
        6
      ],
      "mod_code": [
        "string s , t , Masha = Masha ;",
        "swap ( s ) ;",
        "else if ( x == y )",
        "long long x , y , g , g = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘long long int g’"
    },
    {
      "mod_line": [
        7,
        11,
        23,
        2
      ],
      "mod_code": [
        "string s , t , Masha = Masha ;",
        "swap ( s ) ;",
        "else if ( x == y )",
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        11,
        6
      ],
      "mod_code": [
        "string s , t , Masha = Masha ;",
        "swap ( s ) ;",
        "long long x , y , g , g = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘long long int g’"
    },
    {
      "mod_line": [
        7,
        11,
        6,
        2
      ],
      "mod_code": [
        "string s , t , Masha = Masha ;",
        "swap ( s ) ;",
        "long long x , y , g , g = 0 ;",
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        11,
        2
      ],
      "mod_code": [
        "string s , t , Masha = Masha ;",
        "swap ( s ) ;",
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        23
      ],
      "mod_code": [
        "string s , t , Masha = Masha ;",
        "else if ( x == y )"
      ],
      "err_line": 23,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        23,
        6
      ],
      "mod_code": [
        "string s , t , Masha = Masha ;",
        "else if ( x == y )",
        "long long x , y , g , g = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘long long int g’"
    },
    {
      "mod_line": [
        7,
        23,
        6,
        2
      ],
      "mod_code": [
        "string s , t , Masha = Masha ;",
        "else if ( x == y )",
        "long long x , y , g , g = 0 ;",
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        23,
        2
      ],
      "mod_code": [
        "string s , t , Masha = Masha ;",
        "else if ( x == y )",
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "string s , t , Masha = Masha ;",
        "long long x , y , g , g = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘long long int g’"
    },
    {
      "mod_line": [
        7,
        6,
        2
      ],
      "mod_code": [
        "string s , t , Masha = Masha ;",
        "long long x , y , g , g = 0 ;",
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "string s , t , Masha = Masha ;",
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        23
      ],
      "mod_code": [
        "swap ( s ) ;",
        "else if ( x == y )"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘swap(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        11,
        23,
        6
      ],
      "mod_code": [
        "swap ( s ) ;",
        "else if ( x == y )",
        "long long x , y , g , g = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘long long int g’"
    },
    {
      "mod_line": [
        11,
        23,
        6,
        2
      ],
      "mod_code": [
        "swap ( s ) ;",
        "else if ( x == y )",
        "long long x , y , g , g = 0 ;",
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        23,
        2
      ],
      "mod_code": [
        "swap ( s ) ;",
        "else if ( x == y )",
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "swap ( s ) ;",
        "long long x , y , g , g = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘long long int g’"
    },
    {
      "mod_line": [
        11,
        6,
        2
      ],
      "mod_code": [
        "swap ( s ) ;",
        "long long x , y , g , g = 0 ;",
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "swap ( s ) ;",
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        6
      ],
      "mod_code": [
        "else if ( x == y )",
        "long long x , y , g , g = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘long long int g’"
    },
    {
      "mod_line": [
        23,
        6,
        2
      ],
      "mod_code": [
        "else if ( x == y )",
        "long long x , y , g , g = 0 ;",
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        2
      ],
      "mod_code": [
        "else if ( x == y )",
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "long long x , y , g , g = 0 ;",
        "return gcd gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, long long int)’ to ‘long long int’ [-fpermissive]"
    }
  ]
}