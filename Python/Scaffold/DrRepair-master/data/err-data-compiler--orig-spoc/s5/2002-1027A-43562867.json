{
  "meta": {
    "index": 2002,
    "hitid": "3GS542CVJVHM269SO64H1YKM5F095Q",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "1027A",
    "subid": "43562867"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let n , m , mi = 1e9 , ma = - 1e9 , l = 0 , r , a , k = 0 , x be ints , with a an array of length 1002 , set a [ 0 ] = 0",
      "code": "int n , m , mi = 1e9 , ma = - 1e9 , l = 0 , r , a [ 1002 ] = { 0 } , k = 0 , x ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read m",
      "code": "cin >> m ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set l to 0",
      "code": "l = 0 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for j = 0 to m / 2 exclusive and l = 0 , increment j after",
      "code": "for ( int j = 0 ; j < m / 2 && l == 0 ; j ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if abs ( s [ j ] - s [ m - 1 - j ] ) > 2 or abs ( s [ j ] - s [ m - 1 - j ] ) = = 1",
      "code": "if ( abs ( s [ j ] - s [ m - 1 - j ] ) > 2 || abs ( s [ j ] - s [ m - 1 - j ] ) == 1 )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "set l to 1",
      "code": "l = 1 ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 13,
      "text": "if l = 0 then print YES",
      "code": "if ( l == 0 ) cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a , x ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( int j = 0 ; j < m / 2 && l = 0 ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( int j = 0 ; j < m / 2 ; j ++ ) { l = 0 ; }"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) ) { abs ( s [ j ] - s [ m - 1 - j ] ) = 1 ; }"
      ],
      "err_line": 9,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a , x ;",
        "for ( int j = 0 ; j < m / 2 && l = 0 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        2,
        8,
        9
      ],
      "mod_code": [
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a , x ;",
        "for ( int j = 0 ; j < m / 2 && l = 0 ; j ++ )",
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) > 2 || abs ( s [ j ] - s [ m - 1 - j ] ) )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        2,
        8,
        9,
        10
      ],
      "mod_code": [
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a , x ;",
        "for ( int j = 0 ; j < m / 2 && l = 0 ; j ++ )",
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) > 2 || abs ( s [ j ] - s [ m - 1 - j ] ) )",
        "int l = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        2,
        8,
        10
      ],
      "mod_code": [
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a , x ;",
        "for ( int j = 0 ; j < m / 2 && l = 0 ; j ++ )",
        "int l = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        2,
        8,
        10,
        9
      ],
      "mod_code": [
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a , x ;",
        "for ( int j = 0 ; j < m / 2 && l = 0 ; j ++ )",
        "int l = 1 ;",
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) ) { abs ( s [ j ] - s [ m - 1 - j ] ) = 1 ; }"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        2,
        8,
        9
      ],
      "mod_code": [
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a , x ;",
        "for ( int j = 0 ; j < m / 2 && l = 0 ; j ++ )",
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) ) { abs ( s [ j ] - s [ m - 1 - j ] ) = 1 ; }"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a , x ;",
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) > 2 || abs ( s [ j ] - s [ m - 1 - j ] ) )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        2,
        9,
        10
      ],
      "mod_code": [
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a , x ;",
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) > 2 || abs ( s [ j ] - s [ m - 1 - j ] ) )",
        "int l = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a , x ;",
        "int l = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        2,
        10,
        9
      ],
      "mod_code": [
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a , x ;",
        "int l = 1 ;",
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) ) { abs ( s [ j ] - s [ m - 1 - j ] ) = 1 ; }"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a , x ;",
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) ) { abs ( s [ j ] - s [ m - 1 - j ] ) = 1 ; }"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "for ( int j = 0 ; j < m / 2 && l = 0 ; j ++ )",
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) > 2 || abs ( s [ j ] - s [ m - 1 - j ] ) )"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        9,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j < m / 2 && l = 0 ; j ++ )",
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) > 2 || abs ( s [ j ] - s [ m - 1 - j ] ) )",
        "int l = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        9,
        10,
        2
      ],
      "mod_code": [
        "for ( int j = 0 ; j < m / 2 && l = 0 ; j ++ )",
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) > 2 || abs ( s [ j ] - s [ m - 1 - j ] ) )",
        "int l = 1 ;",
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        8,
        9,
        2
      ],
      "mod_code": [
        "for ( int j = 0 ; j < m / 2 && l = 0 ; j ++ )",
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) > 2 || abs ( s [ j ] - s [ m - 1 - j ] ) )",
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j < m / 2 && l = 0 ; j ++ )",
        "int l = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        10,
        2
      ],
      "mod_code": [
        "for ( int j = 0 ; j < m / 2 && l = 0 ; j ++ )",
        "int l = 1 ;",
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        8,
        10,
        2,
        9
      ],
      "mod_code": [
        "for ( int j = 0 ; j < m / 2 && l = 0 ; j ++ )",
        "int l = 1 ;",
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a = 0 ;",
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) ) { abs ( s [ j ] - s [ m - 1 - j ] ) = 1 ; }"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        8,
        10,
        9
      ],
      "mod_code": [
        "for ( int j = 0 ; j < m / 2 && l = 0 ; j ++ )",
        "int l = 1 ;",
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) ) { abs ( s [ j ] - s [ m - 1 - j ] ) = 1 ; }"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "for ( int j = 0 ; j < m / 2 && l = 0 ; j ++ )",
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        8,
        2,
        9
      ],
      "mod_code": [
        "for ( int j = 0 ; j < m / 2 && l = 0 ; j ++ )",
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a = 0 ;",
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) ) { abs ( s [ j ] - s [ m - 1 - j ] ) = 1 ; }"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "for ( int j = 0 ; j < m / 2 && l = 0 ; j ++ )",
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) ) { abs ( s [ j ] - s [ m - 1 - j ] ) = 1 ; }"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        9,
        10,
        2
      ],
      "mod_code": [
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) > 2 || abs ( s [ j ] - s [ m - 1 - j ] ) )",
        "int l = 1 ;",
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) > 2 || abs ( s [ j ] - s [ m - 1 - j ] ) )",
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "int l = 1 ;",
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        10,
        2,
        9
      ],
      "mod_code": [
        "int l = 1 ;",
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a = 0 ;",
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) ) { abs ( s [ j ] - s [ m - 1 - j ] ) = 1 ; }"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "int l = 1 ;",
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) ) { abs ( s [ j ] - s [ m - 1 - j ] ) = 1 ; }"
      ],
      "err_line": 9,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "int n , m , mi = 1e9 , ma = - 1e9 , l = - 1e9 , l = 0 , a = 0 ;",
        "if ( abs ( s [ j ] - s [ m - 1 - j ] ) ) { abs ( s [ j ] - s [ m - 1 - j ] ) = 1 ; }"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int l’"
    }
  ]
}