{
  "meta": {
    "index": 1663,
    "hitid": "3UEBBGULPFICOVQKSTCHJ6YD6S6FUJ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "17A",
    "subid": "47102097"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer MAXN with value 1000005",
      "code": "const int MAXN = 1000005 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare array of integers prime with size MAXN and integer variable num = 0",
      "code": "int prime [ MAXN ] , num = 0 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "array of booleans pd with size MAXN",
      "code": "bool pd [ MAXN ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "void function find_prime",
      "code": "void find_prime ( )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare integers called i and j",
      "code": "int i , j ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set pd [ 0 ] and pd [ 1 ] to true",
      "code": "pd [ 0 ] = pd [ 1 ] = true ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 2 to MAXN inclusive",
      "code": "for ( i = 2 ; i <= MAXN ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if pd [ i ] os false , set prime [ num ] to i and increment num",
      "code": "if ( ! pd [ i ] ) prime [ num ++ ] = i ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for j = 0 to num exclusive",
      "code": "for ( j = 0 ; j < num ; j ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if i * prime [ j ] is greater than MAXN , break",
      "code": "if ( i * prime [ j ] > MAXN ) break ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "pd [ i * prime [ j ] ] = true",
      "code": "pd [ i * prime [ j ] ] = true ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if i % prime [ j ] is equal to 0 , break",
      "code": "if ( i % prime [ j ] == 0 ) break ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 15,
      "text": "in the function find with integer argument n that returns integer",
      "code": "int find ( int n )",
      "indent": 0
    },
    {
      "line": 16,
      "text": "create integers l , r and mid",
      "code": "int l , r , mid ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "l = 0",
      "code": "l = 0 ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "r = num - 1",
      "code": "r = num - 1 ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "while l < = r",
      "code": "while ( l <= r )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "mid = ( l + r ) / 2",
      "code": "mid = ( l + r ) / 2 ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if n is greater than prime [ mid ]",
      "code": "if ( n > prime [ mid ] )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "l = mid + 1",
      "code": "l = mid + 1 ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "else if n is less than prime [ mid ]",
      "code": "else if ( n < prime [ mid ] )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "r = mid - 1",
      "code": "r = mid - 1 ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 26,
      "text": "return mid",
      "code": "return mid ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "return - 1",
      "code": "return - 1 ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 30,
      "text": "integer function mz with integer arguments n",
      "code": "int mz ( int n )",
      "indent": 0
    },
    {
      "line": 31,
      "text": "integers pos and t , with = n",
      "code": "int pos , t = n ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "t = ( t - 1 ) / 2",
      "code": "t = ( t - 1 ) / 2 ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "while pd [ t ] is true , increment t",
      "code": "while ( pd [ t ] ) t ++ ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "set pos to result of find ( t )",
      "code": "pos = find ( t ) ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "if prime [ pos - 1 ] + prime [ pos ] + 1 is equal to n , return 1",
      "code": "if ( prime [ pos - 1 ] + prime [ pos ] + 1 == n ) return 1 ;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 39,
      "text": "n , k , num , i and flag are integers with num and flag = 0",
      "code": "int n , k , num = 0 , i , flag = 0 ;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 41,
      "text": "call method find_prime ( )",
      "code": "find_prime ( ) ;",
      "indent": 1
    },
    {
      "line": 42,
      "text": "for i = 0 to prime [ i ] < = n",
      "code": "for ( i = 0 ; prime [ i ] <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 43,
      "text": "if mz ( prime [ i ] ) is 1 , increment num",
      "code": "if ( mz ( prime [ i ] ) ) num ++ ;",
      "indent": 2
    },
    {
      "line": 44,
      "text": "if num > = k",
      "code": "if ( num >= k )",
      "indent": 2
    },
    {
      "line": 45,
      "text": "assign value of 1 to the flag",
      "code": "flag = 1 ;",
      "indent": 3
    },
    {
      "line": 46,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 49,
      "text": "if flag is equal to 1",
      "code": "if ( flag == 1 )",
      "indent": 1
    },
    {
      "line": 50,
      "text": "print \" YES \\ n \"",
      "code": "cout << \" YES\\n \" ;",
      "indent": 2
    },
    {
      "line": 51,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 52,
      "text": "print \" NO \\ n \"",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 53,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 54,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "int l = 0 ;"
      ],
      "err_line": 17,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "int pos , t , t ;"
      ],
      "err_line": 31,
      "err_msg": "redeclaration of ‘int t’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int prime [ MAXN ] , num [ MAXN ] ;"
      ],
      "err_line": 7,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "bool pd [ MAXN MAXN ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "void find_prime ( ) { }"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int i and j ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "int find ( int n ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( n [ mid ] > prime [ mid ] )"
      ],
      "err_line": 21,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "int mz ( int n ) ;"
      ],
      "err_line": 31,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "int pos , t , t = n ;"
      ],
      "err_line": 31,
      "err_msg": "redeclaration of ‘int t’"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "long long t = ( t - 1 ) / 2 ;"
      ],
      "err_line": 32,
      "err_msg": "conflicting declaration ‘long long int t’"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "int pos = find ( t ) ;"
      ],
      "err_line": 34,
      "err_msg": "redeclaration of ‘int pos’"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "int n , k , num = 0 , i , i , flag ;"
      ],
      "err_line": 39,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "int find_prime ( )"
      ],
      "err_line": 42,
      "err_msg": "expected initializer before ‘for’"
    },
    {
      "mod_line": [
        46
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        17,
        31
      ],
      "mod_code": [
        "int l = 0 ;",
        "int pos , t , t ;"
      ],
      "err_line": 17,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        17,
        31,
        34
      ],
      "mod_code": [
        "int l = 0 ;",
        "int pos , t , t ;",
        "int pos = find ( t ) ;"
      ],
      "err_line": 17,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        17,
        31,
        34,
        2
      ],
      "mod_code": [
        "int l = 0 ;",
        "int pos , t , t ;",
        "int pos = find ( t ) ;",
        "bool pd [ MAXN MAXN ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        17,
        31,
        34,
        15
      ],
      "mod_code": [
        "int l = 0 ;",
        "int pos , t , t ;",
        "int pos = find ( t ) ;",
        "int find ( int n ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        31,
        34,
        45
      ],
      "mod_code": [
        "int l = 0 ;",
        "int pos , t , t ;",
        "int pos = find ( t ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 17,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        17,
        31,
        2
      ],
      "mod_code": [
        "int l = 0 ;",
        "int pos , t , t ;",
        "bool pd [ MAXN MAXN ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        17,
        31,
        2,
        15
      ],
      "mod_code": [
        "int l = 0 ;",
        "int pos , t , t ;",
        "bool pd [ MAXN MAXN ] ;",
        "int find ( int n ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        17,
        31,
        2,
        45
      ],
      "mod_code": [
        "int l = 0 ;",
        "int pos , t , t ;",
        "bool pd [ MAXN MAXN ] ;",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        17,
        31,
        15
      ],
      "mod_code": [
        "int l = 0 ;",
        "int pos , t , t ;",
        "int find ( int n ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        31,
        15,
        45
      ],
      "mod_code": [
        "int l = 0 ;",
        "int pos , t , t ;",
        "int find ( int n ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        31,
        45
      ],
      "mod_code": [
        "int l = 0 ;",
        "int pos , t , t ;",
        "int flag = 1 ;"
      ],
      "err_line": 17,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        17,
        34
      ],
      "mod_code": [
        "int l = 0 ;",
        "int pos = find ( t ) ;"
      ],
      "err_line": 17,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        17,
        34,
        2
      ],
      "mod_code": [
        "int l = 0 ;",
        "int pos = find ( t ) ;",
        "bool pd [ MAXN MAXN ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        17,
        34,
        2,
        15
      ],
      "mod_code": [
        "int l = 0 ;",
        "int pos = find ( t ) ;",
        "bool pd [ MAXN MAXN ] ;",
        "int find ( int n ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        17,
        34,
        2,
        45
      ],
      "mod_code": [
        "int l = 0 ;",
        "int pos = find ( t ) ;",
        "bool pd [ MAXN MAXN ] ;",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        17,
        34,
        15
      ],
      "mod_code": [
        "int l = 0 ;",
        "int pos = find ( t ) ;",
        "int find ( int n ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        34,
        15,
        45
      ],
      "mod_code": [
        "int l = 0 ;",
        "int pos = find ( t ) ;",
        "int find ( int n ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        34,
        45
      ],
      "mod_code": [
        "int l = 0 ;",
        "int pos = find ( t ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 17,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        17,
        2
      ],
      "mod_code": [
        "int l = 0 ;",
        "bool pd [ MAXN MAXN ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        17,
        2,
        15
      ],
      "mod_code": [
        "int l = 0 ;",
        "bool pd [ MAXN MAXN ] ;",
        "int find ( int n ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        17,
        2,
        15,
        45
      ],
      "mod_code": [
        "int l = 0 ;",
        "bool pd [ MAXN MAXN ] ;",
        "int find ( int n ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        17,
        2,
        45
      ],
      "mod_code": [
        "int l = 0 ;",
        "bool pd [ MAXN MAXN ] ;",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        17,
        15
      ],
      "mod_code": [
        "int l = 0 ;",
        "int find ( int n ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        15,
        45
      ],
      "mod_code": [
        "int l = 0 ;",
        "int find ( int n ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        45
      ],
      "mod_code": [
        "int l = 0 ;",
        "int flag = 1 ;"
      ],
      "err_line": 17,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        31,
        34
      ],
      "mod_code": [
        "int pos , t , t ;",
        "int pos = find ( t ) ;"
      ],
      "err_line": 31,
      "err_msg": "redeclaration of ‘int t’"
    },
    {
      "mod_line": [
        31,
        34,
        2
      ],
      "mod_code": [
        "int pos , t , t ;",
        "int pos = find ( t ) ;",
        "bool pd [ MAXN MAXN ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        31,
        34,
        2,
        15
      ],
      "mod_code": [
        "int pos , t , t ;",
        "int pos = find ( t ) ;",
        "bool pd [ MAXN MAXN ] ;",
        "int find ( int n ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        31,
        34,
        2,
        45
      ],
      "mod_code": [
        "int pos , t , t ;",
        "int pos = find ( t ) ;",
        "bool pd [ MAXN MAXN ] ;",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        31,
        34,
        15
      ],
      "mod_code": [
        "int pos , t , t ;",
        "int pos = find ( t ) ;",
        "int find ( int n ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        31,
        34,
        15,
        45
      ],
      "mod_code": [
        "int pos , t , t ;",
        "int pos = find ( t ) ;",
        "int find ( int n ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        31,
        34,
        45
      ],
      "mod_code": [
        "int pos , t , t ;",
        "int pos = find ( t ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 31,
      "err_msg": "redeclaration of ‘int t’"
    },
    {
      "mod_line": [
        31,
        2
      ],
      "mod_code": [
        "int pos , t , t ;",
        "bool pd [ MAXN MAXN ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        31,
        2,
        15
      ],
      "mod_code": [
        "int pos , t , t ;",
        "bool pd [ MAXN MAXN ] ;",
        "int find ( int n ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        31,
        2,
        15,
        45
      ],
      "mod_code": [
        "int pos , t , t ;",
        "bool pd [ MAXN MAXN ] ;",
        "int find ( int n ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        31,
        2,
        45
      ],
      "mod_code": [
        "int pos , t , t ;",
        "bool pd [ MAXN MAXN ] ;",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        31,
        15
      ],
      "mod_code": [
        "int pos , t , t ;",
        "int find ( int n ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        31,
        15,
        45
      ],
      "mod_code": [
        "int pos , t , t ;",
        "int find ( int n ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        31,
        45
      ],
      "mod_code": [
        "int pos , t , t ;",
        "int flag = 1 ;"
      ],
      "err_line": 31,
      "err_msg": "redeclaration of ‘int t’"
    },
    {
      "mod_line": [
        34,
        2
      ],
      "mod_code": [
        "int pos = find ( t ) ;",
        "bool pd [ MAXN MAXN ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        34,
        2,
        15
      ],
      "mod_code": [
        "int pos = find ( t ) ;",
        "bool pd [ MAXN MAXN ] ;",
        "int find ( int n ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        34,
        2,
        15,
        45
      ],
      "mod_code": [
        "int pos = find ( t ) ;",
        "bool pd [ MAXN MAXN ] ;",
        "int find ( int n ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        34,
        2,
        45
      ],
      "mod_code": [
        "int pos = find ( t ) ;",
        "bool pd [ MAXN MAXN ] ;",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        34,
        15
      ],
      "mod_code": [
        "int pos = find ( t ) ;",
        "int find ( int n ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        34,
        15,
        45
      ],
      "mod_code": [
        "int pos = find ( t ) ;",
        "int find ( int n ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        34,
        45
      ],
      "mod_code": [
        "int pos = find ( t ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 34,
      "err_msg": "redeclaration of ‘int pos’"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "bool pd [ MAXN MAXN ] ;",
        "int find ( int n ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        2,
        15,
        45
      ],
      "mod_code": [
        "bool pd [ MAXN MAXN ] ;",
        "int find ( int n ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        2,
        45
      ],
      "mod_code": [
        "bool pd [ MAXN MAXN ] ;",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before ‘MAXN’"
    },
    {
      "mod_line": [
        15,
        45
      ],
      "mod_code": [
        "int find ( int n ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}