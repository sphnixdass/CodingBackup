{
  "meta": {
    "index": 683,
    "hitid": "3P7RGTLO6E73P840NZMNZIEO8NCAKQ",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "346A",
    "subid": "48424918"
  },
  "lines": [
    {
      "line": 0,
      "text": "in the function power that takes long long integer x , y and returns long long integer",
      "code": "long long int power ( long long int x , long long int y )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "temp = long long integer",
      "code": "long long int temp ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if ( y is 0 ) , return 1",
      "code": "if ( y == 0 ) return 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "temp = power of x and y / 2",
      "code": "temp = power ( x , y / 2 ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if ( y modulo 2 is 0 )",
      "code": "if ( y % 2 == 0 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "return temp * temp",
      "code": "return temp * temp ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if ( y > 0 )",
      "code": "if ( y > 0 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "return x * temp * temp",
      "code": "return x * temp * temp ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "return ( temp * temp ) / x",
      "code": "return ( temp * temp ) / x ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 13,
      "text": "prime = bool array of size 10000000",
      "code": "bool prime [ 10000000 ] ;",
      "indent": 0
    },
    {
      "line": 14,
      "text": "in the function sieve",
      "code": "void sieve ( )",
      "indent": 0
    },
    {
      "line": 15,
      "text": "set all contents of prime to true",
      "code": "memset ( prime , true , sizeof ( prime ) ) ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "prime [ 0 ] = prime [ 1 ] = false",
      "code": "prime [ 0 ] = prime [ 1 ] = false ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for p = 2 to p * p < = 10000000",
      "code": "for ( long long int p = 2 ; p * p <= 10000000 ; p ++ )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if ( prime [ p ] is true )",
      "code": "if ( prime [ p ] == true )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "for i = p * 2 to 10000000 , i = i + p , prime [ i ] = false",
      "code": "for ( long long int i = p * 2 ; i <= 10000000 ; i += p ) prime [ i ] = false ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 23,
      "text": "in the function gcd that takes long long integer a , b and returns long long integer",
      "code": "long long int gcd ( long long int a , long long int b )",
      "indent": 0
    },
    {
      "line": 24,
      "text": "if ( a is 0 ) , return b",
      "code": "if ( a == 0 ) return b ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "return gcd of b modulo a and a",
      "code": "return gcd ( b % a , a ) ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 28,
      "text": "n = long long integer",
      "code": "long long int n ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "a = long long integer array of size n",
      "code": "long long int a [ n ] ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "for i = 0 to n exclusive , read a [ i ]",
      "code": "for ( long long int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 32,
      "text": "g = long long integer",
      "code": "long long int g ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "g = gcd of a [ 0 ] and a [ 1 ]",
      "code": "g = __gcd ( a [ 0 ] , a [ 1 ] ) ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "for i = 0 to n exclusive , g = gcd of g and a [ i ]",
      "code": "for ( long long int i = 0 ; i < n ; i ++ ) { g = __gcd ( g , a [ i ] ) ; }",
      "indent": 1
    },
    {
      "line": 35,
      "text": "for i = 0 to n exclusive , a [ i ] = a [ i ] / g",
      "code": "for ( long long int i = 0 ; i < n ; i ++ ) { a [ i ] /= g ; }",
      "indent": 1
    },
    {
      "line": 36,
      "text": "mx = long long intege with mx = - 1",
      "code": "long long int mx = - 1 ;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "for i = 0 to n exclusive",
      "code": "for ( long long int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 38,
      "text": "if ( a [ i ] > mx ) , mx = a [ i ]",
      "code": "if ( a [ i ] > mx ) { mx = a [ i ] ; }",
      "indent": 2
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 40,
      "text": "if ( ( mx - n ) modulo 2 is 0 )",
      "code": "if ( ( mx - n ) % 2 == 0 )",
      "indent": 1
    },
    {
      "line": 41,
      "text": "print Bob",
      "code": "cout << \" Bob \" << endl ;",
      "indent": 2
    },
    {
      "line": 42,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 43,
      "text": "print Alice",
      "code": "cout << \" Alice \" << endl ;",
      "indent": 2
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;"
      ],
      "err_line": 33,
      "err_msg": "conflicting declaration ‘int g’"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "cout << Bob << endl ;"
      ],
      "err_line": 41,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        43
      ],
      "mod_code": [
        "cout << Alice << endl ;"
      ],
      "err_line": 43,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int temp = power ( x , y / 2 ) ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int temp’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "sieve ( ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected constructor, destructor, or type conversion before ‘;’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( p = 2 ; p * p <= 10000000 ; p ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( int i = p * 2 ; i <= 10000000 ; i ++ ) prime = i + p , prime [ i ] = false ;"
      ],
      "err_line": 19,
      "err_msg": "incompatible types in assignment of ‘long long int’ to ‘bool [10000000]’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "return gcd ( b % a and a ) ;"
      ],
      "err_line": 25,
      "err_msg": "too few arguments to function ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 31,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 37,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "cout << Bob ;"
      ],
      "err_line": 41,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        43
      ],
      "mod_code": [
        "cout << Alice ;"
      ],
      "err_line": 43,
      "err_msg": "‘Alice’ was not declared in this scope"
    },
    {
      "mod_line": [
        33,
        41
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;"
      ],
      "err_line": 33,
      "err_msg": "conflicting declaration ‘int g’"
    },
    {
      "mod_line": [
        33,
        41,
        43
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 33,
      "err_msg": "conflicting declaration ‘int g’"
    },
    {
      "mod_line": [
        33,
        41,
        43,
        25
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "return gcd ( b % a and a ) ;"
      ],
      "err_line": 25,
      "err_msg": "too few arguments to function ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        33,
        41,
        43,
        7
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        33,
        41,
        25
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "return gcd ( b % a and a ) ;"
      ],
      "err_line": 25,
      "err_msg": "too few arguments to function ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        33,
        41,
        25,
        7
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "return gcd ( b % a and a ) ;",
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        33,
        41,
        7
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob << endl ;",
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        33,
        43
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 33,
      "err_msg": "conflicting declaration ‘int g’"
    },
    {
      "mod_line": [
        33,
        43,
        25
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "return gcd ( b % a and a ) ;"
      ],
      "err_line": 25,
      "err_msg": "too few arguments to function ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        33,
        43,
        25,
        41
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "return gcd ( b % a and a ) ;",
        "cout << Bob ;"
      ],
      "err_line": 25,
      "err_msg": "too few arguments to function ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        33,
        43,
        25,
        7
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "return gcd ( b % a and a ) ;",
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        33,
        43,
        41
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "cout << Bob ;"
      ],
      "err_line": 33,
      "err_msg": "conflicting declaration ‘int g’"
    },
    {
      "mod_line": [
        33,
        43,
        41,
        7
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "cout << Bob ;",
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        33,
        43,
        7
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Alice << endl ;",
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        33,
        25
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;",
        "return gcd ( b % a and a ) ;"
      ],
      "err_line": 25,
      "err_msg": "too few arguments to function ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        33,
        25,
        41
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;",
        "return gcd ( b % a and a ) ;",
        "cout << Bob ;"
      ],
      "err_line": 25,
      "err_msg": "too few arguments to function ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        33,
        25,
        41,
        7
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;",
        "return gcd ( b % a and a ) ;",
        "cout << Bob ;",
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        33,
        25,
        7
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;",
        "return gcd ( b % a and a ) ;",
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        33,
        41
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob ;"
      ],
      "err_line": 33,
      "err_msg": "conflicting declaration ‘int g’"
    },
    {
      "mod_line": [
        33,
        41,
        7
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;",
        "cout << Bob ;",
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        33,
        7
      ],
      "mod_code": [
        "int g = gcd ( a [ 0 ] , a [ 1 ] ) ;",
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        41,
        43
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "cout << Alice << endl ;"
      ],
      "err_line": 41,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        41,
        43,
        25
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "return gcd ( b % a and a ) ;"
      ],
      "err_line": 25,
      "err_msg": "too few arguments to function ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        41,
        43,
        25,
        7
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "return gcd ( b % a and a ) ;",
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        41,
        43,
        7
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "cout << Alice << endl ;",
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        41,
        25
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "return gcd ( b % a and a ) ;"
      ],
      "err_line": 25,
      "err_msg": "too few arguments to function ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        41,
        25,
        7
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "return gcd ( b % a and a ) ;",
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        41,
        7
      ],
      "mod_code": [
        "cout << Bob << endl ;",
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        43,
        25
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "return gcd ( b % a and a ) ;"
      ],
      "err_line": 25,
      "err_msg": "too few arguments to function ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        43,
        25,
        41
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "return gcd ( b % a and a ) ;",
        "cout << Bob ;"
      ],
      "err_line": 25,
      "err_msg": "too few arguments to function ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        43,
        25,
        41,
        7
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "return gcd ( b % a and a ) ;",
        "cout << Bob ;",
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        43,
        25,
        7
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "return gcd ( b % a and a ) ;",
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        43,
        41
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "cout << Bob ;"
      ],
      "err_line": 41,
      "err_msg": "‘Bob’ was not declared in this scope"
    },
    {
      "mod_line": [
        43,
        41,
        7
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "cout << Bob ;",
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        43,
        7
      ],
      "mod_code": [
        "cout << Alice << endl ;",
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        41
      ],
      "mod_code": [
        "return gcd ( b % a and a ) ;",
        "cout << Bob ;"
      ],
      "err_line": 25,
      "err_msg": "too few arguments to function ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        25,
        41,
        7
      ],
      "mod_code": [
        "return gcd ( b % a and a ) ;",
        "cout << Bob ;",
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        25,
        7
      ],
      "mod_code": [
        "return gcd ( b % a and a ) ;",
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        41,
        7
      ],
      "mod_code": [
        "cout << Bob ;",
        "if ( y > 0 ) )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    }
  ]
}