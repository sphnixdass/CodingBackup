{
  "meta": {
    "index": 2687,
    "hitid": "3ZZAYRN1I6LRUVOORR5X14LPFFQTOS",
    "workerid": "A1APYLD4DUK33J",
    "probid": "16A",
    "subid": "42307431"
  },
  "lines": [
    {
      "line": 0,
      "text": "create shorts n , m",
      "code": "short n , m ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create 2d character array flag with size 100 by 100",
      "code": "char flag [ 100 ] [ 100 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read n read m read flag [ 0 ] [ 0 ]",
      "code": "cin >> n >> m >> flag [ 0 ] [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 1 to m exclusive",
      "code": "for ( int i = 1 ; i < m ; ++ i )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read flag [ 0 ] [ i ]",
      "code": "cin >> flag [ 0 ] [ i ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if flag [ 0 ] [ i ] is not flag [ 0 ] [ i - 1 ]",
      "code": "if ( flag [ 0 ] [ i ] != flag [ 0 ] [ i - 1 ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read flag [ i ] [ 0 ]",
      "code": "cin >> flag [ i ] [ 0 ] ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "for j = 1 to m exclusive",
      "code": "for ( int j = 1 ; j < m ; ++ j )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "read flag [ i ] [ j ]",
      "code": "cin >> flag [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if flag [ i ] [ j ] is not flag [ i ] [ j - 1 ] or flag [ i ] [ j ] is flag [ i - 1 ] [ j ]",
      "code": "if ( flag [ i ] [ j ] != flag [ i ] [ j - 1 ] || flag [ i ] [ j ] == flag [ i - 1 ] [ j ] )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "vector < int > n , m ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<int>’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘char [100][100]’)"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void n , m ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘n’ declared void"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char flag [ 100 + 100 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> n >> m >> flag >> flag >> 0 ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘char [100][100]’)"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "{ cin >> flag [ i ] [ j ] ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( flag [ i ] [ j ] != flag [ i ] [ j - 1 ] || flag [ i ] [ j ] == flag [ i - 1 ] )"
      ],
      "err_line": 15,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "vector < int > n , m ;",
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<int>’)"
    },
    {
      "mod_line": [
        0,
        3,
        21
      ],
      "mod_code": [
        "vector < int > n , m ;",
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<int>’)"
    },
    {
      "mod_line": [
        0,
        3,
        21,
        5
      ],
      "mod_code": [
        "vector < int > n , m ;",
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;",
        "cout << \" YES\\n \" << endl ;",
        "cout << flag [ 0 ] [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<int>’)"
    },
    {
      "mod_line": [
        0,
        3,
        21,
        4
      ],
      "mod_code": [
        "vector < int > n , m ;",
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;",
        "cout << \" YES\\n \" << endl ;",
        "for ( int i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<int>’)"
    },
    {
      "mod_line": [
        0,
        3,
        5
      ],
      "mod_code": [
        "vector < int > n , m ;",
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;",
        "cout << flag [ 0 ] [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<int>’)"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        4
      ],
      "mod_code": [
        "vector < int > n , m ;",
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;",
        "cout << flag [ 0 ] [ i ] ;",
        "for ( int i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<int>’)"
    },
    {
      "mod_line": [
        0,
        3,
        4
      ],
      "mod_code": [
        "vector < int > n , m ;",
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;",
        "for ( int i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<int>’)"
    },
    {
      "mod_line": [
        0,
        21
      ],
      "mod_code": [
        "vector < int > n , m ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<int>’)"
    },
    {
      "mod_line": [
        0,
        21,
        5
      ],
      "mod_code": [
        "vector < int > n , m ;",
        "cout << \" YES\\n \" << endl ;",
        "cout << flag [ 0 ] [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<int>’)"
    },
    {
      "mod_line": [
        0,
        21,
        5,
        4
      ],
      "mod_code": [
        "vector < int > n , m ;",
        "cout << \" YES\\n \" << endl ;",
        "cout << flag [ 0 ] [ i ] ;",
        "for ( int i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<int>’)"
    },
    {
      "mod_line": [
        0,
        21,
        4
      ],
      "mod_code": [
        "vector < int > n , m ;",
        "cout << \" YES\\n \" << endl ;",
        "for ( int i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<int>’)"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "vector < int > n , m ;",
        "cout << flag [ 0 ] [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<int>’)"
    },
    {
      "mod_line": [
        0,
        5,
        4
      ],
      "mod_code": [
        "vector < int > n , m ;",
        "cout << flag [ 0 ] [ i ] ;",
        "for ( int i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<int>’)"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "vector < int > n , m ;",
        "for ( int i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<int>’)"
    },
    {
      "mod_line": [
        3,
        21
      ],
      "mod_code": [
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘char [100][100]’)"
    },
    {
      "mod_line": [
        3,
        21,
        5
      ],
      "mod_code": [
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;",
        "cout << \" YES\\n \" << endl ;",
        "cout << flag [ 0 ] [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘char [100][100]’)"
    },
    {
      "mod_line": [
        3,
        21,
        5,
        0
      ],
      "mod_code": [
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;",
        "cout << \" YES\\n \" << endl ;",
        "cout << flag [ 0 ] [ i ] ;",
        "void n , m ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘n’ declared void"
    },
    {
      "mod_line": [
        3,
        21,
        5,
        4
      ],
      "mod_code": [
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;",
        "cout << \" YES\\n \" << endl ;",
        "cout << flag [ 0 ] [ i ] ;",
        "for ( int i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘char [100][100]’)"
    },
    {
      "mod_line": [
        3,
        21,
        0
      ],
      "mod_code": [
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;",
        "cout << \" YES\\n \" << endl ;",
        "void n , m ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘n’ declared void"
    },
    {
      "mod_line": [
        3,
        21,
        0,
        4
      ],
      "mod_code": [
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;",
        "cout << \" YES\\n \" << endl ;",
        "void n , m ;",
        "for ( int i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘n’ declared void"
    },
    {
      "mod_line": [
        3,
        21,
        4
      ],
      "mod_code": [
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;",
        "cout << \" YES\\n \" << endl ;",
        "for ( int i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘char [100][100]’)"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;",
        "cout << flag [ 0 ] [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘char [100][100]’)"
    },
    {
      "mod_line": [
        3,
        5,
        0
      ],
      "mod_code": [
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;",
        "cout << flag [ 0 ] [ i ] ;",
        "void n , m ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘n’ declared void"
    },
    {
      "mod_line": [
        3,
        5,
        0,
        4
      ],
      "mod_code": [
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;",
        "cout << flag [ 0 ] [ i ] ;",
        "void n , m ;",
        "for ( int i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘n’ declared void"
    },
    {
      "mod_line": [
        3,
        5,
        4
      ],
      "mod_code": [
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;",
        "cout << flag [ 0 ] [ i ] ;",
        "for ( int i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘char [100][100]’)"
    },
    {
      "mod_line": [
        3,
        0
      ],
      "mod_code": [
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;",
        "void n , m ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘n’ declared void"
    },
    {
      "mod_line": [
        3,
        0,
        4
      ],
      "mod_code": [
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;",
        "void n , m ;",
        "for ( int i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘n’ declared void"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "cin >> n >> m >> flag >> flag >> 0 >> 0 ;",
        "for ( int i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘char [100][100]’)"
    },
    {
      "mod_line": [
        21,
        5,
        0
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "cout << flag [ 0 ] [ i ] ;",
        "void n , m ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘n’ declared void"
    },
    {
      "mod_line": [
        21,
        5,
        0,
        4
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "cout << flag [ 0 ] [ i ] ;",
        "void n , m ;",
        "for ( int i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘n’ declared void"
    },
    {
      "mod_line": [
        21,
        0
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "void n , m ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘n’ declared void"
    },
    {
      "mod_line": [
        21,
        0,
        4
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "void n , m ;",
        "for ( int i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘n’ declared void"
    },
    {
      "mod_line": [
        5,
        0
      ],
      "mod_code": [
        "cout << flag [ 0 ] [ i ] ;",
        "void n , m ;"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘n’ declared void"
    },
    {
      "mod_line": [
        5,
        0,
        4
      ],
      "mod_code": [
        "cout << flag [ 0 ] [ i ] ;",
        "void n , m ;",
        "for ( int i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘n’ declared void"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "void n , m ;",
        "for ( int i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "variable or field ‘n’ declared void"
    }
  ]
}