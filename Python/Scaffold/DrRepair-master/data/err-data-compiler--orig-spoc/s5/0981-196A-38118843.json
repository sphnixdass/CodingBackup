{
  "meta": {
    "index": 981,
    "hitid": "337F8MIIMZ7MATHFA52E3VDF1SA04O",
    "workerid": "A2UFGZT4QUY5ON",
    "probid": "196A",
    "subid": "38118843"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "input = string",
      "code": "string input ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read input",
      "code": "cin >> input ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "output = empty string",
      "code": "string output = \" \" ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "maxm = last character of input string",
      "code": "char maxm = input [ input . size ( ) - 1 ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "output = output + last character of input string",
      "code": "output += input [ input . size ( ) - 1 ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = size of input - 2 to 0 inclusive , decrementing by 1",
      "code": "for ( int i = input . size ( ) - 2 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if input [ i ] is greater than or equal to maxm",
      "code": "if ( input [ i ] >= maxm )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set output to input [ i ] + output",
      "code": "output = input [ i ] + output ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "assign input [ i ] to maxm",
      "code": "maxm = input [ i ] ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print output",
      "code": "cout << output << endl ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "string maxm = getchar ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "output = input [ i ] + endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "string maxm [ input ] ;"
      ],
      "err_line": 4,
      "err_msg": "size of array ‘maxm’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = input . size ( ) - 2 ; i >= 0 ; i -- )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "string output = \" \" ;",
        "string maxm = getchar ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        4,
        5
      ],
      "mod_code": [
        "string output = \" \" ;",
        "string maxm = getchar ( ) ;",
        "cout << \" output \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        8
      ],
      "mod_code": [
        "string output = \" \" ;",
        "string maxm = getchar ( ) ;",
        "cout << \" output \" << endl ;",
        "output = input [ i ] + endl ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        1
      ],
      "mod_code": [
        "string output = \" \" ;",
        "string maxm = getchar ( ) ;",
        "cout << \" output \" << endl ;",
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        8
      ],
      "mod_code": [
        "string output = \" \" ;",
        "string maxm = getchar ( ) ;",
        "output = input [ i ] + endl ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        4,
        8,
        5
      ],
      "mod_code": [
        "string output = \" \" ;",
        "string maxm = getchar ( ) ;",
        "output = input [ i ] + endl ;",
        "cout << \" min_element \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        4,
        8,
        1
      ],
      "mod_code": [
        "string output = \" \" ;",
        "string maxm = getchar ( ) ;",
        "output = input [ i ] + endl ;",
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        5
      ],
      "mod_code": [
        "string output = \" \" ;",
        "string maxm = getchar ( ) ;",
        "cout << \" min_element \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        1
      ],
      "mod_code": [
        "string output = \" \" ;",
        "string maxm = getchar ( ) ;",
        "cout << \" min_element \" << endl ;",
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        1
      ],
      "mod_code": [
        "string output = \" \" ;",
        "string maxm = getchar ( ) ;",
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        8
      ],
      "mod_code": [
        "string output = \" \" ;",
        "cout << \" output \" << endl ;",
        "output = input [ i ] + endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        1
      ],
      "mod_code": [
        "string output = \" \" ;",
        "cout << \" output \" << endl ;",
        "output = input [ i ] + endl ;",
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        1
      ],
      "mod_code": [
        "string output = \" \" ;",
        "cout << \" output \" << endl ;",
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "string output = \" \" ;",
        "output = input [ i ] + endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        3,
        8,
        5
      ],
      "mod_code": [
        "string output = \" \" ;",
        "output = input [ i ] + endl ;",
        "cout << \" min_element \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        3,
        8,
        5,
        1
      ],
      "mod_code": [
        "string output = \" \" ;",
        "output = input [ i ] + endl ;",
        "cout << \" min_element \" << endl ;",
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        1
      ],
      "mod_code": [
        "string output = \" \" ;",
        "output = input [ i ] + endl ;",
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        1
      ],
      "mod_code": [
        "string output = \" \" ;",
        "cout << \" min_element \" << endl ;",
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "string output = \" \" ;",
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "string maxm = getchar ( ) ;",
        "cout << \" output \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        4,
        5,
        8
      ],
      "mod_code": [
        "string maxm = getchar ( ) ;",
        "cout << \" output \" << endl ;",
        "output = input [ i ] + endl ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        4,
        5,
        8,
        1
      ],
      "mod_code": [
        "string maxm = getchar ( ) ;",
        "cout << \" output \" << endl ;",
        "output = input [ i ] + endl ;",
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        1
      ],
      "mod_code": [
        "string maxm = getchar ( ) ;",
        "cout << \" output \" << endl ;",
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "string maxm = getchar ( ) ;",
        "output = input [ i ] + endl ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        4,
        8,
        5
      ],
      "mod_code": [
        "string maxm = getchar ( ) ;",
        "output = input [ i ] + endl ;",
        "cout << \" min_element \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        4,
        8,
        5,
        1
      ],
      "mod_code": [
        "string maxm = getchar ( ) ;",
        "output = input [ i ] + endl ;",
        "cout << \" min_element \" << endl ;",
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8,
        1
      ],
      "mod_code": [
        "string maxm = getchar ( ) ;",
        "output = input [ i ] + endl ;",
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "string maxm = getchar ( ) ;",
        "cout << \" min_element \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        4,
        5,
        1
      ],
      "mod_code": [
        "string maxm = getchar ( ) ;",
        "cout << \" min_element \" << endl ;",
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "string maxm = getchar ( ) ;",
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "cout << \" output \" << endl ;",
        "output = input [ i ] + endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        5,
        8,
        1
      ],
      "mod_code": [
        "cout << \" output \" << endl ;",
        "output = input [ i ] + endl ;",
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "cout << \" output \" << endl ;",
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "output = input [ i ] + endl ;",
        "cout << \" min_element \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘char’ and ‘<unresolved overloaded function type>’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        5,
        1
      ],
      "mod_code": [
        "output = input [ i ] + endl ;",
        "cout << \" min_element \" << endl ;",
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "output = input [ i ] + endl ;",
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "cout << \" min_element \" << endl ;",
        "string s ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    }
  ]
}