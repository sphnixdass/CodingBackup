{
  "meta": {
    "index": 1158,
    "hitid": "31D0ZWOD0AT1CIXWJ6C5GYZFUP1A0F",
    "workerid": "AIWEXPJAU66D9",
    "probid": "757A",
    "subid": "47346336"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integer array r with 100003 elements",
      "code": "int r [ 100003 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare integer variables a , b , c , d , e , f , g , h , i , j , k , l , flag and cnt and integer arrays r , r2 and r3 with 1000 elements",
      "code": "int a , b , c , d , e , f , g , r [ 1000 ] , r2 [ 1000 ] , r3 [ 1000 ] , h , i , j , k , l , flag , cnt ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create strings s and t",
      "code": "string s , t ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "loop , reading s from the input",
      "code": "while ( cin >> s )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "change cnt to 0",
      "code": "cnt = 0 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set first sizeof ( r ) bytes at the pointer r to 0",
      "code": "memset ( r , 0 , sizeof ( r ) ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for b from 0 to length of s exclusive",
      "code": "for ( b = 0 ; b < s . size ( ) ; b ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if s [ b ] = ' B '",
      "code": "if ( s [ b ] == ' B ' )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "increment r [ 1 ]",
      "code": "r [ 1 ] ++ ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "else if s [ b ] = ' u '",
      "code": "else if ( s [ b ] == ' u ' )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "increment r [ 2 ]",
      "code": "r [ 2 ] ++ ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "else if s [ b ] = ' l '",
      "code": "else if ( s [ b ] == ' l ' )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment r [ 3 ]",
      "code": "r [ 3 ] ++ ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "else if s [ b ] = ' b '",
      "code": "else if ( s [ b ] == ' b ' )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "increment r [ 4 ]",
      "code": "r [ 4 ] ++ ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "else if s [ b ] = ' a '",
      "code": "else if ( s [ b ] == ' a ' )",
      "indent": 3
    },
    {
      "line": 17,
      "text": "increment r [ 5 ]",
      "code": "r [ 5 ] ++ ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "else if s [ b ] = ' s '",
      "code": "else if ( s [ b ] == ' s ' )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "increment r [ 6 ]",
      "code": "r [ 6 ] ++ ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "else if s [ b ] = ' r '",
      "code": "else if ( s [ b ] == ' r ' )",
      "indent": 3
    },
    {
      "line": 21,
      "text": "increment r [ 7 ]",
      "code": "r [ 7 ] ++ ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "looping infinitely",
      "code": "while ( 1 )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "assign 1 to flag",
      "code": "flag = 1 ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "for c = 1 to 7 inclusive",
      "code": "for ( c = 1 ; c <= 7 ; c ++ )",
      "indent": 3
    },
    {
      "line": 27,
      "text": "if c = 1",
      "code": "if ( c == 1 )",
      "indent": 4
    },
    {
      "line": 28,
      "text": "if r [ 1 ] > = 1",
      "code": "if ( r [ 1 ] >= 1 )",
      "indent": 5
    },
    {
      "line": 29,
      "text": "decrease r [ 1 ] by 1",
      "code": "r [ 1 ] -= 1 ;",
      "indent": 6
    },
    {
      "line": 30,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 31,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 6
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 34,
      "text": "if c is equal to 2",
      "code": "if ( c == 2 )",
      "indent": 4
    },
    {
      "line": 35,
      "text": "if r [ 2 ] > = 2",
      "code": "if ( r [ 2 ] >= 2 )",
      "indent": 5
    },
    {
      "line": 36,
      "text": "subtract 2 from r [ 2 ]",
      "code": "r [ 2 ] -= 2 ;",
      "indent": 6
    },
    {
      "line": 37,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 38,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 6
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 41,
      "text": "if c is equal to 3",
      "code": "if ( c == 3 )",
      "indent": 4
    },
    {
      "line": 42,
      "text": "if r [ 3 ] > = 1",
      "code": "if ( r [ 3 ] >= 1 )",
      "indent": 5
    },
    {
      "line": 43,
      "text": "subtract 1 from r [ 3 ]",
      "code": "r [ 3 ] -= 1 ;",
      "indent": 6
    },
    {
      "line": 44,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 45,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 6
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 48,
      "text": "if c is equal to 4",
      "code": "if ( c == 4 )",
      "indent": 4
    },
    {
      "line": 49,
      "text": "if r [ 4 ] > = 1",
      "code": "if ( r [ 4 ] >= 1 )",
      "indent": 5
    },
    {
      "line": 50,
      "text": "decrease r [ 4 ] by 1",
      "code": "r [ 4 ] -= 1 ;",
      "indent": 6
    },
    {
      "line": 51,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 52,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 6
    },
    {
      "line": 53,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 54,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 55,
      "text": "if c is equal to 5",
      "code": "if ( c == 5 )",
      "indent": 4
    },
    {
      "line": 56,
      "text": "if r [ 5 ] > = 2",
      "code": "if ( r [ 5 ] >= 2 )",
      "indent": 5
    },
    {
      "line": 57,
      "text": "decrease r [ 5 ] by 2",
      "code": "r [ 5 ] -= 2 ;",
      "indent": 6
    },
    {
      "line": 58,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 59,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 6
    },
    {
      "line": 60,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 61,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 62,
      "text": "if c is equal to 6",
      "code": "if ( c == 6 )",
      "indent": 4
    },
    {
      "line": 63,
      "text": "if r [ 6 ] > = 1",
      "code": "if ( r [ 6 ] >= 1 )",
      "indent": 5
    },
    {
      "line": 64,
      "text": "decrease r [ 6 ] by 1",
      "code": "r [ 6 ] -= 1 ;",
      "indent": 6
    },
    {
      "line": 65,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 66,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 6
    },
    {
      "line": 67,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 68,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 69,
      "text": "if c is equal to 7",
      "code": "if ( c == 7 )",
      "indent": 4
    },
    {
      "line": 70,
      "text": "if r [ 7 ] > = 1",
      "code": "if ( r [ 7 ] >= 1 )",
      "indent": 5
    },
    {
      "line": 71,
      "text": "subtract 1 from r [ 7 ]",
      "code": "r [ 7 ] -= 1 ;",
      "indent": 6
    },
    {
      "line": 72,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 73,
      "text": "change flag to 0",
      "code": "flag = 0 ;",
      "indent": 6
    },
    {
      "line": 74,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 75,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 76,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 77,
      "text": "if flag is equal to 1",
      "code": "if ( flag == 1 )",
      "indent": 3
    },
    {
      "line": 78,
      "text": "increment cnt by one",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 79,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 80,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 81,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 82,
      "text": "create int z",
      "code": "int z ;",
      "indent": 3
    },
    {
      "line": 83,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 84,
      "text": "print cnt",
      "code": "cout << cnt << endl ;",
      "indent": 2
    },
    {
      "line": 85,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 86,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 87,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , g , k , l , r3 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string s create t ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( s >> s )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "memset ( r ) , sizeof ( r ) ;"
      ],
      "err_line": 6,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( s [ b ] == ' B ' ) b ++ ;"
      ],
      "err_line": 10,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else if ( s [ b ] ] == ' u ' )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else if ( s [ b ] == ' l ' ) b ++ ;"
      ],
      "err_line": 14,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "else if ( s [ b ] == ' b ' ) b ++ ;"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "else if ( s [ b ] == ' a ' ) b ++ ;"
      ],
      "err_line": 18,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "else if ( s [ b ] == ' s ' ) b ++ ;"
      ],
      "err_line": 20,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        62
      ],
      "mod_code": [
        "if ( c == \" 6 \" )"
      ],
      "err_line": 62,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        80
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 80,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "else if ( s [ b ] ] == ' u ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        10,
        6
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "else if ( s [ b ] ] == ' u ' )",
        "memset ( r ) , sizeof ( r ) ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        10,
        6,
        12
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "else if ( s [ b ] ] == ' u ' )",
        "memset ( r ) , sizeof ( r ) ;",
        "else if ( s [ b ] == ' l ' ) b ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        10,
        6,
        35
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "else if ( s [ b ] ] == ' u ' )",
        "memset ( r ) , sizeof ( r ) ;",
        "if ( r [ 2 ] >= ' 2 ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        10,
        6,
        49
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "else if ( s [ b ] ] == ' u ' )",
        "memset ( r ) , sizeof ( r ) ;",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        10,
        12
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "else if ( s [ b ] ] == ' u ' )",
        "else if ( s [ b ] == ' l ' ) b ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        10,
        12,
        35
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "else if ( s [ b ] ] == ' u ' )",
        "else if ( s [ b ] == ' l ' ) b ++ ;",
        "if ( r [ 2 ] >= ' 2 ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        10,
        12,
        49
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "else if ( s [ b ] ] == ' u ' )",
        "else if ( s [ b ] == ' l ' ) b ++ ;",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        10,
        35
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "else if ( s [ b ] ] == ' u ' )",
        "if ( r [ 2 ] >= ' 2 ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        10,
        35,
        49
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "else if ( s [ b ] ] == ' u ' )",
        "if ( r [ 2 ] >= ' 2 ' )",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        10,
        49
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "else if ( s [ b ] ] == ' u ' )",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "memset ( r ) , sizeof ( r ) ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        6,
        12
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "memset ( r ) , sizeof ( r ) ;",
        "else if ( s [ b ] == ' l ' ) b ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        6,
        12,
        35
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "memset ( r ) , sizeof ( r ) ;",
        "else if ( s [ b ] == ' l ' ) b ++ ;",
        "if ( r [ 2 ] >= ' 2 ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        6,
        12,
        49
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "memset ( r ) , sizeof ( r ) ;",
        "else if ( s [ b ] == ' l ' ) b ++ ;",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        6,
        35
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "memset ( r ) , sizeof ( r ) ;",
        "if ( r [ 2 ] >= ' 2 ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        6,
        35,
        49
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "memset ( r ) , sizeof ( r ) ;",
        "if ( r [ 2 ] >= ' 2 ' )",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        6,
        49
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "memset ( r ) , sizeof ( r ) ;",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "else if ( s [ b ] == ' l ' ) b ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        12,
        35
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "else if ( s [ b ] == ' l ' ) b ++ ;",
        "if ( r [ 2 ] >= ' 2 ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        12,
        35,
        49
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "else if ( s [ b ] == ' l ' ) b ++ ;",
        "if ( r [ 2 ] >= ' 2 ' )",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        12,
        49
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "else if ( s [ b ] == ' l ' ) b ++ ;",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        35
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "if ( r [ 2 ] >= ' 2 ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        35,
        49
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "if ( r [ 2 ] >= ' 2 ' )",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        2,
        49
      ],
      "mod_code": [
        "int a , b , c , d , e , f [ 1000 ] , g [ 1000 ] , g [ 1000 ] , g [ 1000 , j , k , l , r3 ;",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int g [1000]’"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "else if ( s [ b ] ] == ' u ' )",
        "memset ( r ) , sizeof ( r ) ;"
      ],
      "err_line": 6,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        6,
        12
      ],
      "mod_code": [
        "else if ( s [ b ] ] == ' u ' )",
        "memset ( r ) , sizeof ( r ) ;",
        "else if ( s [ b ] == ' l ' ) b ++ ;"
      ],
      "err_line": 6,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        6,
        12,
        35
      ],
      "mod_code": [
        "else if ( s [ b ] ] == ' u ' )",
        "memset ( r ) , sizeof ( r ) ;",
        "else if ( s [ b ] == ' l ' ) b ++ ;",
        "if ( r [ 2 ] >= ' 2 ' )"
      ],
      "err_line": 6,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        6,
        12,
        49
      ],
      "mod_code": [
        "else if ( s [ b ] ] == ' u ' )",
        "memset ( r ) , sizeof ( r ) ;",
        "else if ( s [ b ] == ' l ' ) b ++ ;",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 6,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        6,
        35
      ],
      "mod_code": [
        "else if ( s [ b ] ] == ' u ' )",
        "memset ( r ) , sizeof ( r ) ;",
        "if ( r [ 2 ] >= ' 2 ' )"
      ],
      "err_line": 6,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        6,
        35,
        49
      ],
      "mod_code": [
        "else if ( s [ b ] ] == ' u ' )",
        "memset ( r ) , sizeof ( r ) ;",
        "if ( r [ 2 ] >= ' 2 ' )",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 6,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        6,
        49
      ],
      "mod_code": [
        "else if ( s [ b ] ] == ' u ' )",
        "memset ( r ) , sizeof ( r ) ;",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 6,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "else if ( s [ b ] ] == ' u ' )",
        "else if ( s [ b ] == ' l ' ) b ++ ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        12,
        35
      ],
      "mod_code": [
        "else if ( s [ b ] ] == ' u ' )",
        "else if ( s [ b ] == ' l ' ) b ++ ;",
        "if ( r [ 2 ] >= ' 2 ' )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        12,
        35,
        49
      ],
      "mod_code": [
        "else if ( s [ b ] ] == ' u ' )",
        "else if ( s [ b ] == ' l ' ) b ++ ;",
        "if ( r [ 2 ] >= ' 2 ' )",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        12,
        49
      ],
      "mod_code": [
        "else if ( s [ b ] ] == ' u ' )",
        "else if ( s [ b ] == ' l ' ) b ++ ;",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        35
      ],
      "mod_code": [
        "else if ( s [ b ] ] == ' u ' )",
        "if ( r [ 2 ] >= ' 2 ' )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        35,
        49
      ],
      "mod_code": [
        "else if ( s [ b ] ] == ' u ' )",
        "if ( r [ 2 ] >= ' 2 ' )",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        49
      ],
      "mod_code": [
        "else if ( s [ b ] ] == ' u ' )",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "memset ( r ) , sizeof ( r ) ;",
        "else if ( s [ b ] == ' l ' ) b ++ ;"
      ],
      "err_line": 6,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        6,
        12,
        35
      ],
      "mod_code": [
        "memset ( r ) , sizeof ( r ) ;",
        "else if ( s [ b ] == ' l ' ) b ++ ;",
        "if ( r [ 2 ] >= ' 2 ' )"
      ],
      "err_line": 6,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        6,
        12,
        35,
        49
      ],
      "mod_code": [
        "memset ( r ) , sizeof ( r ) ;",
        "else if ( s [ b ] == ' l ' ) b ++ ;",
        "if ( r [ 2 ] >= ' 2 ' )",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 6,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        6,
        12,
        49
      ],
      "mod_code": [
        "memset ( r ) , sizeof ( r ) ;",
        "else if ( s [ b ] == ' l ' ) b ++ ;",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 6,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        6,
        35
      ],
      "mod_code": [
        "memset ( r ) , sizeof ( r ) ;",
        "if ( r [ 2 ] >= ' 2 ' )"
      ],
      "err_line": 6,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        6,
        35,
        49
      ],
      "mod_code": [
        "memset ( r ) , sizeof ( r ) ;",
        "if ( r [ 2 ] >= ' 2 ' )",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 6,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        6,
        49
      ],
      "mod_code": [
        "memset ( r ) , sizeof ( r ) ;",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 6,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        12,
        35
      ],
      "mod_code": [
        "else if ( s [ b ] == ' l ' ) b ++ ;",
        "if ( r [ 2 ] >= ' 2 ' )"
      ],
      "err_line": 14,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        12,
        35,
        49
      ],
      "mod_code": [
        "else if ( s [ b ] == ' l ' ) b ++ ;",
        "if ( r [ 2 ] >= ' 2 ' )",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 14,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        12,
        49
      ],
      "mod_code": [
        "else if ( s [ b ] == ' l ' ) b ++ ;",
        "if ( r [ 4 ] >= ' 1 ' )"
      ],
      "err_line": 14,
      "err_msg": "‘else’ without a previous ‘if’"
    }
  ]
}