{
  "meta": {
    "index": 2386,
    "hitid": "3A9LA2FRWS8OJVBLSOB46Y9UGP0XHR",
    "workerid": "A1APYLD4DUK33J",
    "probid": "13A",
    "subid": "42878360"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer INF with INF = 0x3f3f3f3f",
      "code": "const int INF = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare gcd with integers a , b as arguments , returning integer",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "if a is less than b , exchange a and b",
      "code": "if ( a < b ) swap ( a , b ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if not b , return a from function",
      "code": "if ( ! b ) return a ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return result of run gcd with arguments b , a % b",
      "code": "return gcd ( b , a % b ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "create integers i , j , k , l",
      "code": "int i , j , k , l ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create integers n , m , s with s = 0",
      "code": "int n , m , s = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 2 to n exclusive",
      "code": "for ( i = 2 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "set k to i",
      "code": "k = i ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set m to n",
      "code": "m = n ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "while m / k is not 0",
      "code": "while ( m / k != 0 )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "increment s by m % k",
      "code": "s += m % k ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "set m to m / k",
      "code": "m /= k ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "increment s by m % k",
      "code": "s += m % k ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "set k to result of run gcd with arguments s , n - 2",
      "code": "k = gcd ( s , n - 2 ) ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print s / k print \" / \" print ( n - 2 ) / k print newline",
      "code": "cout << s / k << \" / \" << ( n - 2 ) / k << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "if ( a < b ) exchange = a ;"
      ],
      "err_line": 2,
      "err_msg": "‘exchange’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "if ( a < b ) { a = exchange ; }"
      ],
      "err_line": 2,
      "err_msg": "‘exchange’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "return gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "if ( a < b ) exchange = a ;",
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1,
        19
      ],
      "mod_code": [
        "if ( a < b ) exchange = a ;",
        "int gcd ( int a , int b ) ;",
        "k = gcd ( s , n ) - 2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1,
        19,
        4
      ],
      "mod_code": [
        "if ( a < b ) exchange = a ;",
        "int gcd ( int a , int b ) ;",
        "k = gcd ( s , n ) - 2 ;",
        "return gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1,
        19,
        15
      ],
      "mod_code": [
        "if ( a < b ) exchange = a ;",
        "int gcd ( int a , int b ) ;",
        "k = gcd ( s , n ) - 2 ;",
        "int m = m / k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1,
        4
      ],
      "mod_code": [
        "if ( a < b ) exchange = a ;",
        "int gcd ( int a , int b ) ;",
        "return gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1,
        4,
        15
      ],
      "mod_code": [
        "if ( a < b ) exchange = a ;",
        "int gcd ( int a , int b ) ;",
        "return gcd gcd ( b , a % b ) ;",
        "int m = m / k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1,
        15
      ],
      "mod_code": [
        "if ( a < b ) exchange = a ;",
        "int gcd ( int a , int b ) ;",
        "int m = m / k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        19
      ],
      "mod_code": [
        "if ( a < b ) exchange = a ;",
        "k = gcd ( s , n ) - 2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘exchange’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        19,
        4
      ],
      "mod_code": [
        "if ( a < b ) exchange = a ;",
        "k = gcd ( s , n ) - 2 ;",
        "return gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘exchange’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        19,
        4,
        15
      ],
      "mod_code": [
        "if ( a < b ) exchange = a ;",
        "k = gcd ( s , n ) - 2 ;",
        "return gcd gcd ( b , a % b ) ;",
        "int m = m / k ;"
      ],
      "err_line": 2,
      "err_msg": "‘exchange’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        19,
        15
      ],
      "mod_code": [
        "if ( a < b ) exchange = a ;",
        "k = gcd ( s , n ) - 2 ;",
        "int m = m / k ;"
      ],
      "err_line": 2,
      "err_msg": "‘exchange’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "if ( a < b ) exchange = a ;",
        "return gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘exchange’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        15
      ],
      "mod_code": [
        "if ( a < b ) exchange = a ;",
        "return gcd gcd ( b , a % b ) ;",
        "int m = m / k ;"
      ],
      "err_line": 2,
      "err_msg": "‘exchange’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "if ( a < b ) exchange = a ;",
        "int m = m / k ;"
      ],
      "err_line": 2,
      "err_msg": "‘exchange’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "if ( a < b ) { a = exchange ; }",
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1,
        19
      ],
      "mod_code": [
        "if ( a < b ) { a = exchange ; }",
        "int gcd ( int a , int b ) ;",
        "k = gcd ( s , n ) - 2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1,
        19,
        4
      ],
      "mod_code": [
        "if ( a < b ) { a = exchange ; }",
        "int gcd ( int a , int b ) ;",
        "k = gcd ( s , n ) - 2 ;",
        "return gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1,
        19,
        15
      ],
      "mod_code": [
        "if ( a < b ) { a = exchange ; }",
        "int gcd ( int a , int b ) ;",
        "k = gcd ( s , n ) - 2 ;",
        "int m = m / k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1,
        4
      ],
      "mod_code": [
        "if ( a < b ) { a = exchange ; }",
        "int gcd ( int a , int b ) ;",
        "return gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1,
        4,
        15
      ],
      "mod_code": [
        "if ( a < b ) { a = exchange ; }",
        "int gcd ( int a , int b ) ;",
        "return gcd gcd ( b , a % b ) ;",
        "int m = m / k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1,
        15
      ],
      "mod_code": [
        "if ( a < b ) { a = exchange ; }",
        "int gcd ( int a , int b ) ;",
        "int m = m / k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        19
      ],
      "mod_code": [
        "if ( a < b ) { a = exchange ; }",
        "k = gcd ( s , n ) - 2 ;"
      ],
      "err_line": 2,
      "err_msg": "‘exchange’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        19,
        4
      ],
      "mod_code": [
        "if ( a < b ) { a = exchange ; }",
        "k = gcd ( s , n ) - 2 ;",
        "return gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘exchange’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        19,
        4,
        15
      ],
      "mod_code": [
        "if ( a < b ) { a = exchange ; }",
        "k = gcd ( s , n ) - 2 ;",
        "return gcd gcd ( b , a % b ) ;",
        "int m = m / k ;"
      ],
      "err_line": 2,
      "err_msg": "‘exchange’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        19,
        15
      ],
      "mod_code": [
        "if ( a < b ) { a = exchange ; }",
        "k = gcd ( s , n ) - 2 ;",
        "int m = m / k ;"
      ],
      "err_line": 2,
      "err_msg": "‘exchange’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "if ( a < b ) { a = exchange ; }",
        "return gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘exchange’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        15
      ],
      "mod_code": [
        "if ( a < b ) { a = exchange ; }",
        "return gcd gcd ( b , a % b ) ;",
        "int m = m / k ;"
      ],
      "err_line": 2,
      "err_msg": "‘exchange’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "if ( a < b ) { a = exchange ; }",
        "int m = m / k ;"
      ],
      "err_line": 2,
      "err_msg": "‘exchange’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        19
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "k = gcd ( s , n ) - 2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        19,
        4
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "k = gcd ( s , n ) - 2 ;",
        "return gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        19,
        4,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "k = gcd ( s , n ) - 2 ;",
        "return gcd gcd ( b , a % b ) ;",
        "int m = m / k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        19,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "k = gcd ( s , n ) - 2 ;",
        "int m = m / k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        4,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return gcd gcd ( b , a % b ) ;",
        "int m = m / k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int m = m / k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        4
      ],
      "mod_code": [
        "k = gcd ( s , n ) - 2 ;",
        "return gcd gcd ( b , a % b ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        4,
        15
      ],
      "mod_code": [
        "k = gcd ( s , n ) - 2 ;",
        "return gcd gcd ( b , a % b ) ;",
        "int m = m / k ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        15
      ],
      "mod_code": [
        "return gcd gcd ( b , a % b ) ;",
        "int m = m / k ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    }
  ]
}