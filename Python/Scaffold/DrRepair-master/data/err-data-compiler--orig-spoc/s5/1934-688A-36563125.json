{
  "meta": {
    "index": 1934,
    "hitid": "3FTID4TN8LSF5WKLO5C4H49A0EDLY7",
    "workerid": "A1AYVATMT88U1W",
    "probid": "688A",
    "subid": "36563125"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , d be integers",
      "code": "int n , d ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while read the values n and d",
      "code": "while ( cin >> n >> d )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let cnt , max_cnt , win be integers with cnt = 0 , max_cnt = 0",
      "code": "int cnt = 0 , max_cnt = 0 , win ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "for i = 0 to d exclusive",
      "code": "for ( int i = 0 ; i < d ; i ++ )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "present = array of characters of length 101",
      "code": "char present [ 101 ] ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "read present",
      "code": "cin >> present ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "set win to 1",
      "code": "win = 1 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "for int j is equal to 0 , present [ j ] , increase j by 1 , win is equal to win & ( present [ j ] - 0 )",
      "code": "for ( int j = 0 ; present [ j ] ; j ++ ) win = win & ( present [ j ] - ' 0 ' ) ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if win is true",
      "code": "if ( win )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "set cnt to 0",
      "code": "cnt = 0 ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "else do the following",
      "code": "else",
      "indent": 3
    },
    {
      "line": 12,
      "text": "increase cnt by 1",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "if cnt is greater than max_cnt , max_cnt is equal to cnt",
      "code": "if ( cnt > max_cnt ) max_cnt = cnt ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "print max_cnt and newline",
      "code": "cout << max_cnt << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( { cin >> n >> d )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < d ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "char a [ 101 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘present’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 0 ; j ++ ) win [ j ] = win & ( present [ j ] - ' 0 ' ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( win ) return ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        9
      ],
      "mod_code": [
        "getchar ( ) ;",
        "for ( int j = 0 ; j < 0 ; j ++ ) { win += ( present [ j ] - ' 0 ' ) ; }",
        "if ( win ) return ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        9,
        11
      ],
      "mod_code": [
        "getchar ( ) ;",
        "for ( int j = 0 ; j < 0 ; j ++ ) { win += ( present [ j ] - ' 0 ' ) ; }",
        "if ( win ) return ;",
        "while ( 1 )"
      ],
      "err_line": 9,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        9,
        10
      ],
      "mod_code": [
        "getchar ( ) ;",
        "for ( int j = 0 ; j < 0 ; j ++ ) { win += ( present [ j ] - ' 0 ' ) ; }",
        "if ( win ) return ;",
        "int cnt = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "getchar ( ) ;",
        "for ( int j = 0 ; j < 0 ; j ++ ) win [ j ] = win & ( present [ j ] - ' 0 ' ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        8,
        9
      ],
      "mod_code": [
        "getchar ( ) ;",
        "for ( int j = 0 ; j < 0 ; j ++ ) win [ j ] = win & ( present [ j ] - ' 0 ' ) ;",
        "if ( win ) return ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        8,
        9,
        11
      ],
      "mod_code": [
        "getchar ( ) ;",
        "for ( int j = 0 ; j < 0 ; j ++ ) win [ j ] = win & ( present [ j ] - ' 0 ' ) ;",
        "if ( win ) return ;",
        "while ( 1 )"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        8,
        9,
        10
      ],
      "mod_code": [
        "getchar ( ) ;",
        "for ( int j = 0 ; j < 0 ; j ++ ) win [ j ] = win & ( present [ j ] - ' 0 ' ) ;",
        "if ( win ) return ;",
        "int cnt = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        8,
        11
      ],
      "mod_code": [
        "getchar ( ) ;",
        "for ( int j = 0 ; j < 0 ; j ++ ) win [ j ] = win & ( present [ j ] - ' 0 ' ) ;",
        "while ( 1 )"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        8,
        11,
        10
      ],
      "mod_code": [
        "getchar ( ) ;",
        "for ( int j = 0 ; j < 0 ; j ++ ) win [ j ] = win & ( present [ j ] - ' 0 ' ) ;",
        "while ( 1 )",
        "int cnt = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        8,
        10
      ],
      "mod_code": [
        "getchar ( ) ;",
        "for ( int j = 0 ; j < 0 ; j ++ ) win [ j ] = win & ( present [ j ] - ' 0 ' ) ;",
        "int cnt = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "getchar ( ) ;",
        "if ( win ) return ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        9,
        11
      ],
      "mod_code": [
        "getchar ( ) ;",
        "if ( win ) return ;",
        "while ( 1 )"
      ],
      "err_line": 9,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        9,
        11,
        10
      ],
      "mod_code": [
        "getchar ( ) ;",
        "if ( win ) return ;",
        "while ( 1 )",
        "int cnt = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        9,
        10
      ],
      "mod_code": [
        "getchar ( ) ;",
        "if ( win ) return ;",
        "int cnt = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 0 ; j ++ ) { win += ( present [ j ] - ' 0 ' ) ; }",
        "if ( win ) return ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        9,
        11
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 0 ; j ++ ) { win += ( present [ j ] - ' 0 ' ) ; }",
        "if ( win ) return ;",
        "while ( 1 )"
      ],
      "err_line": 9,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        9,
        11,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 0 ; j ++ ) { win += ( present [ j ] - ' 0 ' ) ; }",
        "if ( win ) return ;",
        "while ( 1 )",
        "int cnt = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        9,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 0 ; j ++ ) { win += ( present [ j ] - ' 0 ' ) ; }",
        "if ( win ) return ;",
        "int cnt = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 0 ; j ++ ) win [ j ] = win & ( present [ j ] - ' 0 ' ) ;",
        "if ( win ) return ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        9,
        11
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 0 ; j ++ ) win [ j ] = win & ( present [ j ] - ' 0 ' ) ;",
        "if ( win ) return ;",
        "while ( 1 )"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        9,
        11,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 0 ; j ++ ) win [ j ] = win & ( present [ j ] - ' 0 ' ) ;",
        "if ( win ) return ;",
        "while ( 1 )",
        "int cnt = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        9,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 0 ; j ++ ) win [ j ] = win & ( present [ j ] - ' 0 ' ) ;",
        "if ( win ) return ;",
        "int cnt = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 0 ; j ++ ) win [ j ] = win & ( present [ j ] - ' 0 ' ) ;",
        "while ( 1 )"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        11,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 0 ; j ++ ) win [ j ] = win & ( present [ j ] - ' 0 ' ) ;",
        "while ( 1 )",
        "int cnt = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 0 ; j ++ ) win [ j ] = win & ( present [ j ] - ' 0 ' ) ;",
        "int cnt = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "if ( win ) return ;",
        "while ( 1 )"
      ],
      "err_line": 9,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        11,
        10
      ],
      "mod_code": [
        "if ( win ) return ;",
        "while ( 1 )",
        "int cnt = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "if ( win ) return ;",
        "int cnt = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    }
  ]
}