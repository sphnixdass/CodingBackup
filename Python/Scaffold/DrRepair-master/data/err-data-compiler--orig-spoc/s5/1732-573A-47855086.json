{
  "meta": {
    "index": 1732,
    "hitid": "3URJ6VVYUPH7DA9YCQ4PTW9X0IMO49",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "573A",
    "subid": "47855086"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare gcd taking in ints a and b and returning integer",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let int mini = min ( a , b )",
      "code": "int mini = min ( a , b ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create int maxi = max ( a , b )",
      "code": "int maxi = max ( a , b ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if mini is equal to 0 , return maxi",
      "code": "if ( mini == 0 ) { return maxi ; }",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return gcd ( mini , maxi % mini )",
      "code": "return gcd ( mini , maxi % mini ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "create int array a of size 100005",
      "code": "int a [ 100005 ] ;",
      "indent": 0
    },
    {
      "line": 7,
      "text": "let integer array d of size 1000005",
      "code": "int d [ 1000005 ] ;",
      "indent": 0
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 9,
      "text": "for i = 1 to 1000005 exclusive",
      "code": "for ( int i = 1 ; i < 1000005 ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if i modulo 2 is 0 or i modulo 3 is 0 , set d [ i ] to 1",
      "code": "if ( i % 2 == 0 || i % 3 == 0 ) { d [ i ] = 1 ; }",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 4 , loop while i * i < 1000005",
      "code": "for ( int i = 4 ; i * i < 1000005 ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if d [ i ] is falsy",
      "code": "if ( ! d [ i ] )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "for j = i to 1000005 exclusive by iterating j = j + i , set d [ j ] to 0",
      "code": "for ( int j = i ; j < 1000005 ; j = j + i ) { d [ j ] = 0 ; }",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "create ints n , g , and p",
      "code": "int n , g , p ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i = 0 to n exclusive , read a [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 20,
      "text": "let bool b = true",
      "code": "bool b = true ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "set g = a [ 0 ]",
      "code": "g = a [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "for i = 1 to n exclusive , set g to gcd ( a [ i ] , g )",
      "code": "for ( int i = 1 ; i < n ; i ++ ) { g = gcd ( a [ i ] , g ) ; }",
      "indent": 1
    },
    {
      "line": 23,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "create int temp = a [ i ] / g",
      "code": "int temp = a [ i ] / g ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "while temp modulo 2 is 0 and temp is greater than 1000004 , set temp to temp / 2",
      "code": "while ( temp % 2 == 0 && temp > 1000004 ) { temp = temp / 2 ; }",
      "indent": 2
    },
    {
      "line": 26,
      "text": "while temp % 3 is 0 and temp is greater than 1000004 , set temp to temp / 3",
      "code": "while ( temp % 3 == 0 && temp > 1000004 ) { temp = temp / 3 ; }",
      "indent": 2
    },
    {
      "line": 27,
      "text": "if temp is greater than 1000004 or if temp is not equal to 1 and d [ temp ] is falsy , set b to false",
      "code": "if ( temp > 1000004 || ( temp != 1 && ! d [ temp ] ) ) { b = false ; }",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "if b is truthy",
      "code": "if ( b )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print \" Yes \"",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "else do",
      "code": "else",
      "indent": 1
    },
    {
      "line": 32,
      "text": "print \" No \"",
      "code": "cout << \" No \" << endl ;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int gcd ( a , b ) ;"
      ],
      "err_line": 0,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int * mini = min ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int * d [ 1000005 ] ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( i = 4 ; i * i < 1000005 ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( j = i ; j < 1000005 ; j += i ) { d [ j ] = 0 ; }"
      ],
      "err_line": 14,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "int g = a [ 0 ] ;"
      ],
      "err_line": 21,
      "err_msg": "redeclaration of ‘int g’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 23,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "if ( b ) b ++ ;"
      ],
      "err_line": 31,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 34,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "char a [ 100005 ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        6,
        12
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "char a [ 100005 ] ;",
        "for ( i = 4 ; i * i < 1000005 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        6,
        12,
        23
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "char a [ 100005 ] ;",
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        6,
        12,
        13
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "char a [ 100005 ] ;",
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "if ( d [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        6,
        12,
        31
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "char a [ 100005 ] ;",
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        6,
        23
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "char a [ 100005 ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        6,
        23,
        13
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "char a [ 100005 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( d [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        6,
        23,
        31
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "char a [ 100005 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        6,
        13
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "char a [ 100005 ] ;",
        "if ( d [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        6,
        13,
        31
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "char a [ 100005 ] ;",
        "if ( d [ i ] )",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        6,
        31
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "char a [ 100005 ] ;",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "for ( i = 4 ; i * i < 1000005 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        12,
        23
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        12,
        23,
        13
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( d [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        12,
        23,
        31
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        12,
        13
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "if ( d [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        12,
        13,
        31
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "if ( d [ i ] )",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        12,
        31
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        23
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        23,
        13
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( d [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        23,
        13,
        31
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( d [ i ] )",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        23,
        31
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "if ( d [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        13,
        31
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "if ( d [ i ] )",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        31
      ],
      "mod_code": [
        "return gcd ( mini , maxi % mini ) ) ;",
        "else do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "char a [ 100005 ] ;",
        "for ( i = 4 ; i * i < 1000005 ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        12,
        23
      ],
      "mod_code": [
        "char a [ 100005 ] ;",
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        12,
        23,
        13
      ],
      "mod_code": [
        "char a [ 100005 ] ;",
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( d [ i ] )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        12,
        23,
        31
      ],
      "mod_code": [
        "char a [ 100005 ] ;",
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )",
        "else do"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        12,
        13
      ],
      "mod_code": [
        "char a [ 100005 ] ;",
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "if ( d [ i ] )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        12,
        13,
        31
      ],
      "mod_code": [
        "char a [ 100005 ] ;",
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "if ( d [ i ] )",
        "else do"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        12,
        31
      ],
      "mod_code": [
        "char a [ 100005 ] ;",
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "else do"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        23
      ],
      "mod_code": [
        "char a [ 100005 ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 23,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        23,
        13
      ],
      "mod_code": [
        "char a [ 100005 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( d [ i ] )"
      ],
      "err_line": 23,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        23,
        13,
        31
      ],
      "mod_code": [
        "char a [ 100005 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( d [ i ] )",
        "else do"
      ],
      "err_line": 23,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        23,
        31
      ],
      "mod_code": [
        "char a [ 100005 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "else do"
      ],
      "err_line": 23,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        13,
        31
      ],
      "mod_code": [
        "char a [ 100005 ] ;",
        "if ( d [ i ] )",
        "else do"
      ],
      "err_line": 34,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        31
      ],
      "mod_code": [
        "char a [ 100005 ] ;",
        "else do"
      ],
      "err_line": 34,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        23
      ],
      "mod_code": [
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        23,
        13
      ],
      "mod_code": [
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( d [ i ] )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        23,
        13,
        31
      ],
      "mod_code": [
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( d [ i ] )",
        "else do"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        23,
        31
      ],
      "mod_code": [
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "for ( i = 0 ; i < n ; i ++ )",
        "else do"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "if ( d [ i ] )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13,
        31
      ],
      "mod_code": [
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "if ( d [ i ] )",
        "else do"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        31
      ],
      "mod_code": [
        "for ( i = 4 ; i * i < 1000005 ; i ++ )",
        "else do"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( d [ i ] )"
      ],
      "err_line": 23,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        13,
        31
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( d [ i ] )",
        "else do"
      ],
      "err_line": 23,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        31
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "else do"
      ],
      "err_line": 23,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        31
      ],
      "mod_code": [
        "if ( d [ i ] )",
        "else do"
      ],
      "err_line": 34,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}