{
  "meta": {
    "index": 629,
    "hitid": "3OLZC0DJ8J9WB1HAYRS7IPDO0R8IV3",
    "workerid": "AIWEXPJAU66D9",
    "probid": "25A",
    "subid": "48911996"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , i , par , indpar , indimpar , impar , x , npar and nimpar be long longs with n , i , par , indpar , indimpar , impar , x , npar = 0 and nimpar = 0",
      "code": "long long n , i , par , indpar , indimpar , impar , x , npar = 0 , nimpar = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if x is even",
      "code": "if ( x % 2 == 0 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "assign value of x to the par",
      "code": "par = x ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment npar",
      "code": "npar ++ ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "assign value of 1 to the indpar",
      "code": "indpar = 1 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set value of impar to x",
      "code": "impar = x ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "increment nimpar",
      "code": "nimpar ++ ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "assign value of 1 to the indimpar",
      "code": "indimpar = 1 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 2 to n inclusive",
      "code": "for ( i = 2 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if x is even",
      "code": "if ( x % 2 == 0 )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "par = x",
      "code": "par = x ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "increase npar",
      "code": "npar ++ ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "indpar = i",
      "code": "indpar = i ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 20,
      "text": "set impar to x",
      "code": "impar = x ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "increase nimpar by one",
      "code": "nimpar ++ ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "set indimpar to i",
      "code": "indimpar = i ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if nimpar is equal to 1 print indimpar and a new line",
      "code": "if ( nimpar == 1 ) cout << indimpar << endl ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "if npar is equal to 1 print indpar and a new line",
      "code": "if ( npar == 1 ) cout << indpar << endl ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar = 0 , indimpar = 0 , npar = 0 , npar = 0 , nimpar = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "* impar = x ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "* impar = x ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        9,
        14
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "* impar = x ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        9,
        14,
        18
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "* impar = x ;",
        "cin >> n ;",
        "int indpar = i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        9,
        14,
        22
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "* impar = x ;",
        "cin >> n ;",
        "bool indimpar = i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        9,
        14,
        3
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "* impar = x ;",
        "cin >> n ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        9,
        18
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "* impar = x ;",
        "int indpar = i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        9,
        18,
        22
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "* impar = x ;",
        "int indpar = i ;",
        "bool indimpar = i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        9,
        18,
        3
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "* impar = x ;",
        "int indpar = i ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        9,
        22
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "* impar = x ;",
        "bool indimpar = i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        9,
        22,
        3
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "* impar = x ;",
        "bool indimpar = i ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        9,
        3
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "* impar = x ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        14,
        18
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "cin >> n ;",
        "int indpar = i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        14,
        18,
        22
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "cin >> n ;",
        "int indpar = i ;",
        "bool indimpar = i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        14,
        18,
        3
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "cin >> n ;",
        "int indpar = i ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        14,
        22
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "cin >> n ;",
        "bool indimpar = i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        14,
        22,
        3
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "cin >> n ;",
        "bool indimpar = i ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        14,
        3
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "cin >> n ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "int indpar = i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        18,
        22
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "int indpar = i ;",
        "bool indimpar = i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        18,
        22,
        3
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "int indpar = i ;",
        "bool indimpar = i ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        18,
        3
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "int indpar = i ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        22
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "bool indimpar = i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        22,
        3
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "bool indimpar = i ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "long long n , i , par , indpar , indimpar , indimpar , impar , indpar , indimpar , impar , x , npar = 0 , npar = 0 , nimpar = 0 ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int indimpar’"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "* impar = x ;",
        "cin >> n ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        9,
        14,
        18
      ],
      "mod_code": [
        "* impar = x ;",
        "cin >> n ;",
        "int indpar = i ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        9,
        14,
        18,
        22
      ],
      "mod_code": [
        "* impar = x ;",
        "cin >> n ;",
        "int indpar = i ;",
        "bool indimpar = i ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        9,
        14,
        18,
        3
      ],
      "mod_code": [
        "* impar = x ;",
        "cin >> n ;",
        "int indpar = i ;",
        "cin >> n ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        9,
        14,
        22
      ],
      "mod_code": [
        "* impar = x ;",
        "cin >> n ;",
        "bool indimpar = i ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        9,
        14,
        22,
        3
      ],
      "mod_code": [
        "* impar = x ;",
        "cin >> n ;",
        "bool indimpar = i ;",
        "cin >> n ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        9,
        14,
        3
      ],
      "mod_code": [
        "* impar = x ;",
        "cin >> n ;",
        "cin >> n ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        9,
        18
      ],
      "mod_code": [
        "* impar = x ;",
        "int indpar = i ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        9,
        18,
        22
      ],
      "mod_code": [
        "* impar = x ;",
        "int indpar = i ;",
        "bool indimpar = i ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        9,
        18,
        22,
        3
      ],
      "mod_code": [
        "* impar = x ;",
        "int indpar = i ;",
        "bool indimpar = i ;",
        "cin >> n ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        9,
        18,
        3
      ],
      "mod_code": [
        "* impar = x ;",
        "int indpar = i ;",
        "cin >> n ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        9,
        22
      ],
      "mod_code": [
        "* impar = x ;",
        "bool indimpar = i ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        9,
        22,
        3
      ],
      "mod_code": [
        "* impar = x ;",
        "bool indimpar = i ;",
        "cin >> n ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "* impar = x ;",
        "cin >> n ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    }
  ]
}