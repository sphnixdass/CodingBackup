{
  "meta": {
    "index": 1383,
    "hitid": "3SD15I2WD2OW68KQCGDC2RV00V063A",
    "workerid": "A1APYLD4DUK33J",
    "probid": "476A",
    "subid": "48760665"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers a , b , ans",
      "code": "int a , b , ans ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while read a read b is true",
      "code": "while ( cin >> a >> b )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if b is greater than a",
      "code": "if ( b > a )",
      "indent": 2
    },
    {
      "line": 4,
      "text": "set ans to ans - 1",
      "code": "ans = - 1 ;",
      "indent": 3
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if a % 2 is 0",
      "code": "if ( a % 2 == 0 )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "set ans to a / 2",
      "code": "ans = ( a / 2 ) ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 10,
      "text": "set ans to a / 2 + 1",
      "code": "ans = ( a / 2 ) + 1 ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 12,
      "text": "while ans % b is not 0 , increment ans",
      "code": "while ( ans % b != 0 ) { ans ++ ; }",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print ans print newline",
      "code": "cout << ans << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( { cin >> a >> b )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "ans = ans - 1 ;",
        "while ( { cin >> a >> b )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        2,
        3
      ],
      "mod_code": [
        "ans = ans - 1 ;",
        "while ( { cin >> a >> b )",
        "if ( b >= a )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        2,
        3,
        8
      ],
      "mod_code": [
        "ans = ans - 1 ;",
        "while ( { cin >> a >> b )",
        "if ( b >= a )",
        "ans /= 2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        2,
        3,
        10
      ],
      "mod_code": [
        "ans = ans - 1 ;",
        "while ( { cin >> a >> b )",
        "if ( b >= a )",
        "int ans = a / 2 + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        2,
        8
      ],
      "mod_code": [
        "ans = ans - 1 ;",
        "while ( { cin >> a >> b )",
        "ans /= 2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        2,
        8,
        10
      ],
      "mod_code": [
        "ans = ans - 1 ;",
        "while ( { cin >> a >> b )",
        "ans /= 2 ;",
        "int ans = a / 2 + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        2,
        10
      ],
      "mod_code": [
        "ans = ans - 1 ;",
        "while ( { cin >> a >> b )",
        "int ans = a / 2 + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "while ( { cin >> a >> b )",
        "if ( b >= a )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        8
      ],
      "mod_code": [
        "while ( { cin >> a >> b )",
        "if ( b >= a )",
        "ans /= 2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        10
      ],
      "mod_code": [
        "while ( { cin >> a >> b )",
        "if ( b >= a )",
        "ans /= 2 ;",
        "int ans = a / 2 + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        4
      ],
      "mod_code": [
        "while ( { cin >> a >> b )",
        "if ( b >= a )",
        "ans /= 2 ;",
        "ans -= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        10
      ],
      "mod_code": [
        "while ( { cin >> a >> b )",
        "if ( b >= a )",
        "int ans = a / 2 + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        10,
        4
      ],
      "mod_code": [
        "while ( { cin >> a >> b )",
        "if ( b >= a )",
        "int ans = a / 2 + 1 ;",
        "ans -= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        4
      ],
      "mod_code": [
        "while ( { cin >> a >> b )",
        "if ( b >= a )",
        "ans -= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "while ( { cin >> a >> b )",
        "ans /= 2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        10
      ],
      "mod_code": [
        "while ( { cin >> a >> b )",
        "ans /= 2 ;",
        "int ans = a / 2 + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        10,
        4
      ],
      "mod_code": [
        "while ( { cin >> a >> b )",
        "ans /= 2 ;",
        "int ans = a / 2 + 1 ;",
        "ans -= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        4
      ],
      "mod_code": [
        "while ( { cin >> a >> b )",
        "ans /= 2 ;",
        "ans -= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "while ( { cin >> a >> b )",
        "int ans = a / 2 + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        10,
        4
      ],
      "mod_code": [
        "while ( { cin >> a >> b )",
        "int ans = a / 2 + 1 ;",
        "ans -= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "while ( { cin >> a >> b )",
        "ans -= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    }
  ]
}