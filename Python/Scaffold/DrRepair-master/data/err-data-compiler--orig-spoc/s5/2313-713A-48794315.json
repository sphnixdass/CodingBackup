{
  "meta": {
    "index": 2313,
    "hitid": "3OKP4QVBP2RYNM8HX8181QMV16TAGL",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "713A",
    "subid": "48794315"
  },
  "lines": [
    {
      "line": 0,
      "text": "maxn = 2e5 + 5 = const int",
      "code": "const int maxn = 2e5 + 5 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "maxm = 1e5 + 5 = const int",
      "code": "const int maxm = 1e5 + 5 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "inf = 0x3f3f3f3f = const int",
      "code": "const int inf = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "let mp1 be a map from long long to int",
      "code": "map < long long , int > mp1 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "let mp2 be a map from string to int",
      "code": "map < string , int > mp2 ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "n = int",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "in void function conv that takes str = string address and num = long long",
      "code": "void conv ( string & str , long long num )",
      "indent": 0
    },
    {
      "line": 7,
      "text": "cnt = 0 = int",
      "code": "int cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "while num is not 0",
      "code": "while ( num )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "increment str by ( num mod 10 bit and 1 bit or 48 ) to char",
      "code": "str += ( char ) ( num % 10 & 1 | 48 ) ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "divide num by 10",
      "code": "num /= 10 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increment cnt",
      "code": "++ cnt ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "while cnt < 18 , increment str by ' 0 ' , increment cnt",
      "code": "while ( cnt < 18 ) str += ' 0 ' , ++ cnt ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 16,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "while decrementing n",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "ch = char",
      "code": "char ch ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "num = long long",
      "code": "long long num ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "read ch and num",
      "code": "cin >> ch >> num ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "str = string",
      "code": "string str ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "call conv on str and num",
      "code": "conv ( str , num ) ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if ch = ' + '",
      "code": "if ( ch == ' + ' )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "increment both mp1 [ num ] and mp2 [ str ]",
      "code": "++ mp1 [ num ] , ++ mp2 [ str ] ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "else if ch = ' - '",
      "code": "else if ( ch == ' - ' )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "decrement both mp1 [ num ] and mp2 [ str ]",
      "code": "-- mp1 [ num ] , -- mp2 [ str ] ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 28,
      "text": "print mp2 at str",
      "code": "cout << mp2 [ str ] << endl ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 || 48 ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, bool)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "vector < string , int > mp2 ;"
      ],
      "err_line": 24,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::vector<std::__cxx11::basic_string<char>, int>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "void conv ( string & str , string & num )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘num’ from ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘bool’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 ) , 48 ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, int)’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "while ( cnt < 18 ) str ++ , cnt ++ ;"
      ],
      "err_line": 13,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "char str ;"
      ],
      "err_line": 22,
      "err_msg": "invalid initialization of reference of type ‘std::__cxx11::string& {aka std::__cxx11::basic_string<char>&}’ from expression of type ‘char’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "conv ( str and num ) ;"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator&&’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘long long int’)"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "if ( ch == ' + ' ) break ;"
      ],
      "err_line": 25,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        17
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 || 48 ) ;",
        "while ( -- n )"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, bool)’"
    },
    {
      "mod_line": [
        9,
        17,
        5
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 || 48 ) ;",
        "while ( -- n )",
        "char n ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, bool)’"
    },
    {
      "mod_line": [
        9,
        17,
        5,
        24
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 || 48 ) ;",
        "while ( -- n )",
        "char n ;",
        "mp1 [ num ] += mp2 [ str ] ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, bool)’"
    },
    {
      "mod_line": [
        9,
        17,
        5,
        22
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 || 48 ) ;",
        "while ( -- n )",
        "char n ;",
        "conv ( str and num ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, bool)’"
    },
    {
      "mod_line": [
        9,
        17,
        24
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 || 48 ) ;",
        "while ( -- n )",
        "mp1 [ num ] += mp2 [ str ] ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, bool)’"
    },
    {
      "mod_line": [
        9,
        17,
        24,
        22
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 || 48 ) ;",
        "while ( -- n )",
        "mp1 [ num ] += mp2 [ str ] ;",
        "conv ( str and num ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, bool)’"
    },
    {
      "mod_line": [
        9,
        17,
        22
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 || 48 ) ;",
        "while ( -- n )",
        "conv ( str and num ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, bool)’"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 || 48 ) ;",
        "char n ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, bool)’"
    },
    {
      "mod_line": [
        9,
        5,
        24
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 || 48 ) ;",
        "char n ;",
        "mp1 [ num ] += mp2 [ str ] ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, bool)’"
    },
    {
      "mod_line": [
        9,
        5,
        24,
        22
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 || 48 ) ;",
        "char n ;",
        "mp1 [ num ] += mp2 [ str ] ;",
        "conv ( str and num ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, bool)’"
    },
    {
      "mod_line": [
        9,
        5,
        22
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 || 48 ) ;",
        "char n ;",
        "conv ( str and num ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, bool)’"
    },
    {
      "mod_line": [
        9,
        24
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 || 48 ) ;",
        "mp1 [ num ] += mp2 [ str ] ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, bool)’"
    },
    {
      "mod_line": [
        9,
        24,
        22
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 || 48 ) ;",
        "mp1 [ num ] += mp2 [ str ] ;",
        "conv ( str and num ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, bool)’"
    },
    {
      "mod_line": [
        9,
        22
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 || 48 ) ;",
        "conv ( str and num ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, bool)’"
    },
    {
      "mod_line": [
        9,
        17
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 ) , 48 ;",
        "while ( -- n )"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, int)’"
    },
    {
      "mod_line": [
        9,
        17,
        5
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 ) , 48 ;",
        "while ( -- n )",
        "char n ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, int)’"
    },
    {
      "mod_line": [
        9,
        17,
        5,
        24
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 ) , 48 ;",
        "while ( -- n )",
        "char n ;",
        "mp1 [ num ] += mp2 [ str ] ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, int)’"
    },
    {
      "mod_line": [
        9,
        17,
        5,
        22
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 ) , 48 ;",
        "while ( -- n )",
        "char n ;",
        "conv ( str and num ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, int)’"
    },
    {
      "mod_line": [
        9,
        17,
        24
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 ) , 48 ;",
        "while ( -- n )",
        "mp1 [ num ] += mp2 [ str ] ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, int)’"
    },
    {
      "mod_line": [
        9,
        17,
        24,
        22
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 ) , 48 ;",
        "while ( -- n )",
        "mp1 [ num ] += mp2 [ str ] ;",
        "conv ( str and num ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, int)’"
    },
    {
      "mod_line": [
        9,
        17,
        22
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 ) , 48 ;",
        "while ( -- n )",
        "conv ( str and num ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, int)’"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 ) , 48 ;",
        "char n ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, int)’"
    },
    {
      "mod_line": [
        9,
        5,
        24
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 ) , 48 ;",
        "char n ;",
        "mp1 [ num ] += mp2 [ str ] ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, int)’"
    },
    {
      "mod_line": [
        9,
        5,
        24,
        22
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 ) , 48 ;",
        "char n ;",
        "mp1 [ num ] += mp2 [ str ] ;",
        "conv ( str and num ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, int)’"
    },
    {
      "mod_line": [
        9,
        5,
        22
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 ) , 48 ;",
        "char n ;",
        "conv ( str and num ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, int)’"
    },
    {
      "mod_line": [
        9,
        24
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 ) , 48 ;",
        "mp1 [ num ] += mp2 [ str ] ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, int)’"
    },
    {
      "mod_line": [
        9,
        24,
        22
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 ) , 48 ;",
        "mp1 [ num ] += mp2 [ str ] ;",
        "conv ( str and num ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, int)’"
    },
    {
      "mod_line": [
        9,
        22
      ],
      "mod_code": [
        "str . insert ( num % 10 , 1 ) , 48 ;",
        "conv ( str and num ) ;"
      ],
      "err_line": 9,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::insert(long long int, int)’"
    },
    {
      "mod_line": [
        17,
        5,
        24,
        22
      ],
      "mod_code": [
        "while ( -- n )",
        "char n ;",
        "mp1 [ num ] += mp2 [ str ] ;",
        "conv ( str and num ) ;"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator&&’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘long long int’)"
    },
    {
      "mod_line": [
        17,
        5,
        22
      ],
      "mod_code": [
        "while ( -- n )",
        "char n ;",
        "conv ( str and num ) ;"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator&&’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘long long int’)"
    },
    {
      "mod_line": [
        17,
        24,
        22
      ],
      "mod_code": [
        "while ( -- n )",
        "mp1 [ num ] += mp2 [ str ] ;",
        "conv ( str and num ) ;"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator&&’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘long long int’)"
    },
    {
      "mod_line": [
        17,
        22
      ],
      "mod_code": [
        "while ( -- n )",
        "conv ( str and num ) ;"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator&&’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘long long int’)"
    },
    {
      "mod_line": [
        5,
        24,
        22
      ],
      "mod_code": [
        "char n ;",
        "mp1 [ num ] += mp2 [ str ] ;",
        "conv ( str and num ) ;"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator&&’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘long long int’)"
    },
    {
      "mod_line": [
        5,
        22
      ],
      "mod_code": [
        "char n ;",
        "conv ( str and num ) ;"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator&&’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘long long int’)"
    },
    {
      "mod_line": [
        24,
        22
      ],
      "mod_code": [
        "mp1 [ num ] += mp2 [ str ] ;",
        "conv ( str and num ) ;"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator&&’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘long long int’)"
    }
  ]
}