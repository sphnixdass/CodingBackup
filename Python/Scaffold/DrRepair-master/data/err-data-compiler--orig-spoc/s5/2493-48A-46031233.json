{
  "meta": {
    "index": 2493,
    "hitid": "3GKAWYFRAPN2Y64SK1IXL08TMYZDPB",
    "workerid": "AIWEXPJAU66D9",
    "probid": "48A",
    "subid": "46031233"
  },
  "lines": [
    {
      "line": 0,
      "text": "function winner with string arguments x , y and z that returns boolean",
      "code": "bool winner ( string x , string y , string z )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if x is equal to \" rock \"",
      "code": "if ( x == \" rock \" )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if y = z and y is equal to \" scissors \" return true",
      "code": "if ( y == z && y == \" scissors \" ) { return true ; }",
      "indent": 2
    },
    {
      "line": 3,
      "text": "else if x is equal to \" scissors \"",
      "code": "else if ( x == \" scissors \" )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if y = z and y is equal to \" paper \" return true",
      "code": "if ( y == z && y == \" paper \" ) { return true ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if y = z and y is equal to \" rock \" return true",
      "code": "if ( y == z && y == \" rock \" ) { return true ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return false",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 11,
      "text": "x , y and z = strings",
      "code": "string x , y , z ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read x , y and z",
      "code": "cin >> x >> y >> z ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if winner ( x , y , z ) is true",
      "code": "if ( winner ( x , y , z ) )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" F \"",
      "code": "cout << \" F \"",
      "indent": 2
    },
    {
      "line": 15,
      "text": "print \" \\ n \"",
      "code": "<< \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "else if winner ( y , x , z )",
      "code": "else if ( winner ( y , x , z ) )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print \" M \"",
      "code": "cout << \" M \"",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print \" \\ n \"",
      "code": "<< \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "else if winner ( z , x , y )",
      "code": "else if ( winner ( z , x , y ) )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print \" S \"",
      "code": "cout << \" S \"",
      "indent": 2
    },
    {
      "line": 21,
      "text": "print \" \\ n \"",
      "code": "<< \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print \" ? \"",
      "code": "cout << \" ? \"",
      "indent": 2
    },
    {
      "line": 24,
      "text": "print \" \\ n \"",
      "code": "<< \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "cout << \" F \" ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "cout << \" M \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "cout << \" S \" ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "cout << \" ? \" << endl ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool winner ( string x , string y , string z ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "else if ( x == \" rock \" )"
      ],
      "err_line": 1,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "string x , y , n ;"
      ],
      "err_line": 12,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( winner ( x , y ) == true )"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘bool winner(std::__cxx11::string, std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "cout << \" F \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "else if ( winner ( y , x ) == z )"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool winner(std::__cxx11::string, std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "cout << \" M \" ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 19,
      "err_msg": "too few arguments to function ‘bool winner(std::__cxx11::string, std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "cout << \" S \" << endl ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "cout << \" ? \" ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        14,
        17
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" M \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        17,
        20
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" M \" << endl ;",
        "cout << \" S \" ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        17,
        20,
        23
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" M \" << endl ;",
        "cout << \" S \" ;",
        "cout << \" ? \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        17,
        20,
        16
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" M \" << endl ;",
        "cout << \" S \" ;",
        "else if ( winner ( y , x ) == z )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        17,
        20,
        19
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" M \" << endl ;",
        "cout << \" S \" ;",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        17,
        23
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" M \" << endl ;",
        "cout << \" ? \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        17,
        23,
        16
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" M \" << endl ;",
        "cout << \" ? \" << endl ;",
        "else if ( winner ( y , x ) == z )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        17,
        23,
        19
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" M \" << endl ;",
        "cout << \" ? \" << endl ;",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        17,
        16
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" M \" << endl ;",
        "else if ( winner ( y , x ) == z )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        17,
        16,
        19
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" M \" << endl ;",
        "else if ( winner ( y , x ) == z )",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        17,
        19
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" M \" << endl ;",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        20
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" S \" ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        20,
        23
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" S \" ;",
        "cout << \" ? \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        20,
        23,
        16
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" S \" ;",
        "cout << \" ? \" << endl ;",
        "else if ( winner ( y , x ) == z )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        20,
        23,
        19
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" S \" ;",
        "cout << \" ? \" << endl ;",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        20,
        16
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" S \" ;",
        "else if ( winner ( y , x ) == z )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        20,
        16,
        19
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" S \" ;",
        "else if ( winner ( y , x ) == z )",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        20,
        19
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" S \" ;",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        23
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" ? \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        23,
        16
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" ? \" << endl ;",
        "else if ( winner ( y , x ) == z )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        23,
        16,
        19
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" ? \" << endl ;",
        "else if ( winner ( y , x ) == z )",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        23,
        19
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "cout << \" ? \" << endl ;",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        16
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "else if ( winner ( y , x ) == z )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        16,
        19
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "else if ( winner ( y , x ) == z )",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        19
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        20
      ],
      "mod_code": [
        "cout << \" M \" << endl ;",
        "cout << \" S \" ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        20,
        23
      ],
      "mod_code": [
        "cout << \" M \" << endl ;",
        "cout << \" S \" ;",
        "cout << \" ? \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        20,
        23,
        16
      ],
      "mod_code": [
        "cout << \" M \" << endl ;",
        "cout << \" S \" ;",
        "cout << \" ? \" << endl ;",
        "else if ( winner ( y , x ) == z )"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool winner(std::__cxx11::string, std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        17,
        20,
        23,
        19
      ],
      "mod_code": [
        "cout << \" M \" << endl ;",
        "cout << \" S \" ;",
        "cout << \" ? \" << endl ;",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        20,
        16
      ],
      "mod_code": [
        "cout << \" M \" << endl ;",
        "cout << \" S \" ;",
        "else if ( winner ( y , x ) == z )"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool winner(std::__cxx11::string, std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        17,
        20,
        16,
        19
      ],
      "mod_code": [
        "cout << \" M \" << endl ;",
        "cout << \" S \" ;",
        "else if ( winner ( y , x ) == z )",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool winner(std::__cxx11::string, std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        17,
        20,
        19
      ],
      "mod_code": [
        "cout << \" M \" << endl ;",
        "cout << \" S \" ;",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        23
      ],
      "mod_code": [
        "cout << \" M \" << endl ;",
        "cout << \" ? \" << endl ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        23,
        16
      ],
      "mod_code": [
        "cout << \" M \" << endl ;",
        "cout << \" ? \" << endl ;",
        "else if ( winner ( y , x ) == z )"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool winner(std::__cxx11::string, std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        17,
        23,
        16,
        19
      ],
      "mod_code": [
        "cout << \" M \" << endl ;",
        "cout << \" ? \" << endl ;",
        "else if ( winner ( y , x ) == z )",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool winner(std::__cxx11::string, std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        17,
        23,
        19
      ],
      "mod_code": [
        "cout << \" M \" << endl ;",
        "cout << \" ? \" << endl ;",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        16
      ],
      "mod_code": [
        "cout << \" M \" << endl ;",
        "else if ( winner ( y , x ) == z )"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool winner(std::__cxx11::string, std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        17,
        16,
        19
      ],
      "mod_code": [
        "cout << \" M \" << endl ;",
        "else if ( winner ( y , x ) == z )",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool winner(std::__cxx11::string, std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        17,
        19
      ],
      "mod_code": [
        "cout << \" M \" << endl ;",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        20,
        23
      ],
      "mod_code": [
        "cout << \" S \" ;",
        "cout << \" ? \" << endl ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        20,
        23,
        16
      ],
      "mod_code": [
        "cout << \" S \" ;",
        "cout << \" ? \" << endl ;",
        "else if ( winner ( y , x ) == z )"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool winner(std::__cxx11::string, std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        20,
        23,
        16,
        19
      ],
      "mod_code": [
        "cout << \" S \" ;",
        "cout << \" ? \" << endl ;",
        "else if ( winner ( y , x ) == z )",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool winner(std::__cxx11::string, std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        20,
        23,
        19
      ],
      "mod_code": [
        "cout << \" S \" ;",
        "cout << \" ? \" << endl ;",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 19,
      "err_msg": "too few arguments to function ‘bool winner(std::__cxx11::string, std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        20,
        16
      ],
      "mod_code": [
        "cout << \" S \" ;",
        "else if ( winner ( y , x ) == z )"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool winner(std::__cxx11::string, std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        20,
        16,
        19
      ],
      "mod_code": [
        "cout << \" S \" ;",
        "else if ( winner ( y , x ) == z )",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool winner(std::__cxx11::string, std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        20,
        19
      ],
      "mod_code": [
        "cout << \" S \" ;",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 19,
      "err_msg": "too few arguments to function ‘bool winner(std::__cxx11::string, std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        23,
        16
      ],
      "mod_code": [
        "cout << \" ? \" << endl ;",
        "else if ( winner ( y , x ) == z )"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool winner(std::__cxx11::string, std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        23,
        16,
        19
      ],
      "mod_code": [
        "cout << \" ? \" << endl ;",
        "else if ( winner ( y , x ) == z )",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool winner(std::__cxx11::string, std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        23,
        19
      ],
      "mod_code": [
        "cout << \" ? \" << endl ;",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 19,
      "err_msg": "too few arguments to function ‘bool winner(std::__cxx11::string, std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        16,
        19
      ],
      "mod_code": [
        "else if ( winner ( y , x ) == z )",
        "else if ( winner ( z , x ) == y )"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool winner(std::__cxx11::string, std::__cxx11::string, std::__cxx11::string)’"
    }
  ]
}