{
  "meta": {
    "index": 1165,
    "hitid": "3HYV4299H0QMKKJBUFR65WVOY2BE81",
    "workerid": "A1APYLD4DUK33J",
    "probid": "757A",
    "subid": "46508302"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integers B , u , l , b , a , S , r , with B = 0 , u = 0 , l = 0 , b = 0 , a = 0 , S = 0 , r = 0",
      "code": "int B = 0 , u = 0 , l = 0 , b = 0 , a = 0 , S = 0 , r = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integers Bulbasaur , k with Bulbasaur = 1e6",
      "code": "int Bulbasaur = 1e6 , k ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to length of s exclusive",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if s [ i ] is ' B '",
      "code": "if ( s [ i ] == ' B ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment B",
      "code": "B ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if s [ i ] is ' u '",
      "code": "else if ( s [ i ] == ' u ' )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment u",
      "code": "u ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if s [ i ] is ' l '",
      "code": "else if ( s [ i ] == ' l ' )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increment l",
      "code": "l ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else if s [ i ] is ' b '",
      "code": "else if ( s [ i ] == ' b ' )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "increment b",
      "code": "b ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else if s [ i ] is ' a '",
      "code": "else if ( s [ i ] == ' a ' )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "increment a",
      "code": "a ++ ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "else if s [ i ] is ' s '",
      "code": "else if ( s [ i ] == ' s ' )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "increment S",
      "code": "S ++ ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else if s [ i ] is ' r '",
      "code": "else if ( s [ i ] == ' r ' )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "increment r",
      "code": "r ++ ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "set Bulbasaur to minimum of ( Bulbasaur and B )",
      "code": "Bulbasaur = min ( Bulbasaur , B ) ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "set Bulbasaur to minimum of ( Bulbasaur and u / 2 )",
      "code": "Bulbasaur = min ( Bulbasaur , u / 2 ) ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "set Bulbasaur to minimum of ( Bulbasaur and l )",
      "code": "Bulbasaur = min ( Bulbasaur , l ) ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "set Bulbasaur to minimum of ( Bulbasaur and b )",
      "code": "Bulbasaur = min ( Bulbasaur , b ) ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "set Bulbasaur to minimum of ( Bulbasaur and a / 2 )",
      "code": "Bulbasaur = min ( Bulbasaur , a / 2 ) ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "set Bulbasaur to minimum of ( Bulbasaur and r )",
      "code": "Bulbasaur = min ( Bulbasaur , r ) ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "set Bulbasaur to minimum of ( Bulbasaur and S )",
      "code": "Bulbasaur = min ( Bulbasaur , S ) ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "print Bulbasaur print \" \\ n \"",
      "code": "cout << Bulbasaur << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , a = 0 , r = 0 ;"
      ],
      "err_line": 17,
      "err_msg": "‘S’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( s [ i ] == ' B ' ) i ++ ;"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "else if ( s [ i ] == ' u ' ) i ++ ;"
      ],
      "err_line": 10,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else if ( s [ i ] == ' l ' ) i ++ ;"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else if ( s [ i ] == ' b ' ) i ++ ;"
      ],
      "err_line": 14,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "else if ( s [ i ] == ' s ' ) i ++ ;"
      ],
      "err_line": 18,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , B ) ;"
      ],
      "err_line": 22,
      "err_msg": "redeclaration of ‘int Bulbasaur’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , u / 2 ) ;"
      ],
      "err_line": 23,
      "err_msg": "redeclaration of ‘int Bulbasaur’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , l ) ;"
      ],
      "err_line": 24,
      "err_msg": "redeclaration of ‘int Bulbasaur’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , b ) ;"
      ],
      "err_line": 25,
      "err_msg": "redeclaration of ‘int Bulbasaur’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , a / 2 ) ;"
      ],
      "err_line": 26,
      "err_msg": "redeclaration of ‘int Bulbasaur’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , r ) ;"
      ],
      "err_line": 27,
      "err_msg": "redeclaration of ‘int Bulbasaur’"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , S ) ;"
      ],
      "err_line": 28,
      "err_msg": "redeclaration of ‘int Bulbasaur’"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "<< Bulbasaur << \" \\n \" ;"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2,
        28
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , S ) ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        28,
        27
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "int Bulbasaur = min ( Bulbasaur , r ) ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        28,
        27,
        22
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        28,
        27,
        16
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        28,
        27,
        14
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        28,
        22
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        28,
        22,
        16
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        28,
        22,
        14
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        28,
        16
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        28,
        16,
        14
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        28,
        14
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        27
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , r ) ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        27,
        22
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        27,
        22,
        16
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        27,
        22,
        14
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        27,
        16
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        27,
        16,
        14
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        27,
        14
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        22
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        22,
        16
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        22,
        16,
        14
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        22,
        14
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        16
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        16,
        14
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "int B = 0 , u = 0 , l = 0 , b = 0 , b = 0 , r = 0 ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        28,
        27
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "int Bulbasaur = min ( Bulbasaur , r ) ;"
      ],
      "err_line": 27,
      "err_msg": "redeclaration of ‘int Bulbasaur’"
    },
    {
      "mod_line": [
        28,
        27,
        22
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;"
      ],
      "err_line": 22,
      "err_msg": "redeclaration of ‘int Bulbasaur’"
    },
    {
      "mod_line": [
        28,
        27,
        22,
        16
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;"
      ],
      "err_line": 18,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        28,
        27,
        22,
        14
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        28,
        27,
        16
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;"
      ],
      "err_line": 18,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        28,
        27,
        16,
        14
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        28,
        27,
        14
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        28,
        22
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;"
      ],
      "err_line": 22,
      "err_msg": "redeclaration of ‘int Bulbasaur’"
    },
    {
      "mod_line": [
        28,
        22,
        16
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;"
      ],
      "err_line": 18,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        28,
        22,
        16,
        14
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        28,
        22,
        14
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        28,
        16
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;"
      ],
      "err_line": 18,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        28,
        16,
        14
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        28,
        14
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , S ) ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        27,
        22
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;"
      ],
      "err_line": 22,
      "err_msg": "redeclaration of ‘int Bulbasaur’"
    },
    {
      "mod_line": [
        27,
        22,
        16
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;"
      ],
      "err_line": 18,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        27,
        22,
        16,
        14
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        27,
        22,
        14
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "int Bulbasaur = min ( Bulbasaur , B ) ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        27,
        16
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;"
      ],
      "err_line": 18,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        27,
        16,
        14
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        27,
        14
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , r ) ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        22,
        16
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , B ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;"
      ],
      "err_line": 18,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        22,
        16,
        14
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , B ) ;",
        "else if ( s [ i ] == ' s ' ) i ++ ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        22,
        14
      ],
      "mod_code": [
        "int Bulbasaur = min ( Bulbasaur , B ) ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        16,
        14
      ],
      "mod_code": [
        "else if ( s [ i ] == ' s ' ) i ++ ;",
        "else if ( s [ i ] == ' a ' ) i ++ ;"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    }
  ]
}