{
  "meta": {
    "index": 937,
    "hitid": "3PKJ68EHDNQNOB6WBKW3FP1F6TZJH8",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "106A",
    "subid": "47519155"
  },
  "lines": [
    {
      "line": 0,
      "text": "make const int maxn = 200010",
      "code": "const int maxn = 200010 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "make ints n , m , and k",
      "code": "int n , m , k ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create int arrays a of size maxn and sum of size maxn",
      "code": "int a [ maxn ] , sum [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "creat int array c of size maxn",
      "code": "int c [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "make ints ans , ct , cnt , tmp , and flag",
      "code": "int ans , ct , cnt , tmp , flag ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "let strings s , str1 , and str2",
      "code": "string s , str1 , str2 ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "for i = 6 to 10 exclusive , set a [ ( ' 0 ' + i ) ] to i",
      "code": "for ( int i = 6 ; i < 10 ; i ++ ) a [ ( ' 0 ' + i ) ] = i ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set a [ ' T ' ] to 100",
      "code": "a [ ' T ' ] = 100 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set a [ ' J ' ] to 101",
      "code": "a [ ' J ' ] = 101 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "set a [ ' Q ' ] to 102",
      "code": "a [ ' Q ' ] = 102 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "set a [ ' K ' ] to 103",
      "code": "a [ ' K ' ] = 103 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "set a [ ' A ' ] to 104",
      "code": "a [ ' A ' ] = 104 ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "create ints T and cas = 1",
      "code": "int T , cas = 1 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read s , str1 , and str2",
      "code": "cin >> s >> str1 >> str2 ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if str [ 1 ] is equal to s [ 0 ] and str2 [ 1 ] is not s [ 0 ]",
      "code": "if ( str1 [ 1 ] == s [ 0 ] && str2 [ 1 ] != s [ 0 ] )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print \" YES \"",
      "code": "puts ( \" YES \" ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else if str1 [ 1 ] is equal to str2 [ 1 ] and a [ str [ 0 ] ] is greater than ap [ str2 [ 0 ] ]",
      "code": "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str1 [ 0 ] ] > a [ str2 [ 0 ] ] )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print \" YES \"",
      "code": "puts ( \" YES \" ) ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "else if str1 [ 1 ] is equal to str2 [ 1 ] and a [ str1 [ 0 ] ] is less than or equal to a [ str2 [ 0 ] ]",
      "code": "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str1 [ 0 ] ] <= a [ str2 [ 0 ] ] )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print \" NO \"",
      "code": "puts ( \" NO \" ) ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "else if str1 [ 1 ] is equal to s [ 0 ]",
      "code": "else if ( str1 [ 1 ] == s [ 0 ] )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print \" YES \"",
      "code": "puts ( \" YES \" ) ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "else do",
      "code": "else",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print \" NO \"",
      "code": "puts ( \" NO \" ) ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( str [ 1 ] == s [ 0 ] && str2 [ 1 ] != s [ 0 ] )"
      ],
      "err_line": 15,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] ] )"
      ],
      "err_line": 17,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const double maxn = 200010 ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int ans , ct , cnt , tmp , tmp ;"
      ],
      "err_line": 4,
      "err_msg": "redefinition of ‘int tmp’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "strings = s , str1 , str2 ;"
      ],
      "err_line": 5,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "a [ ' ' T ] = 100 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘T’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "a [ ' K ' ] = \" 103 \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "104 [ ' A ' ] = 104 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( str [ 1 ] == s [ 0 ] and str2 [ 1 ] != s [ 0 ] )"
      ],
      "err_line": 15,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] )"
      ],
      "err_line": 17,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str1 [ 0 ] ] <= a [ str2 ] [ 0 ] )"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘int [200010]’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        17
      ],
      "mod_code": [
        "if ( str [ 1 ] == s [ 0 ] && str2 [ 1 ] != s [ 0 ] )",
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] ] )"
      ],
      "err_line": 15,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        17,
        8
      ],
      "mod_code": [
        "if ( str [ 1 ] == s [ 0 ] && str2 [ 1 ] != s [ 0 ] )",
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] ] )",
        "a [ ' ' T ] = 100 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘T’"
    },
    {
      "mod_line": [
        15,
        17,
        8,
        12
      ],
      "mod_code": [
        "if ( str [ 1 ] == s [ 0 ] && str2 [ 1 ] != s [ 0 ] )",
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] ] )",
        "a [ ' ' T ] = 100 ;",
        "104 [ ' A ' ] = 104 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘T’"
    },
    {
      "mod_line": [
        15,
        17,
        12
      ],
      "mod_code": [
        "if ( str [ 1 ] == s [ 0 ] && str2 [ 1 ] != s [ 0 ] )",
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] ] )",
        "104 [ ' A ' ] = 104 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        17
      ],
      "mod_code": [
        "if ( str [ 1 ] == s [ 0 ] && str2 [ 1 ] != s [ 0 ] )",
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] )"
      ],
      "err_line": 15,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        17,
        8
      ],
      "mod_code": [
        "if ( str [ 1 ] == s [ 0 ] && str2 [ 1 ] != s [ 0 ] )",
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] )",
        "a [ ' ' T ] = 100 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘T’"
    },
    {
      "mod_line": [
        15,
        17,
        8,
        12
      ],
      "mod_code": [
        "if ( str [ 1 ] == s [ 0 ] && str2 [ 1 ] != s [ 0 ] )",
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] )",
        "a [ ' ' T ] = 100 ;",
        "104 [ ' A ' ] = 104 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘T’"
    },
    {
      "mod_line": [
        15,
        17,
        12
      ],
      "mod_code": [
        "if ( str [ 1 ] == s [ 0 ] && str2 [ 1 ] != s [ 0 ] )",
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] )",
        "104 [ ' A ' ] = 104 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        8
      ],
      "mod_code": [
        "if ( str [ 1 ] == s [ 0 ] && str2 [ 1 ] != s [ 0 ] )",
        "a [ ' ' T ] = 100 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘T’"
    },
    {
      "mod_line": [
        15,
        8,
        12
      ],
      "mod_code": [
        "if ( str [ 1 ] == s [ 0 ] && str2 [ 1 ] != s [ 0 ] )",
        "a [ ' ' T ] = 100 ;",
        "104 [ ' A ' ] = 104 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘T’"
    },
    {
      "mod_line": [
        15,
        12
      ],
      "mod_code": [
        "if ( str [ 1 ] == s [ 0 ] && str2 [ 1 ] != s [ 0 ] )",
        "104 [ ' A ' ] = 104 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        17,
        15
      ],
      "mod_code": [
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] ] )",
        "if ( str [ 1 ] == s [ 0 ] and str2 [ 1 ] != s [ 0 ] )"
      ],
      "err_line": 15,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        15,
        8
      ],
      "mod_code": [
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] ] )",
        "if ( str [ 1 ] == s [ 0 ] and str2 [ 1 ] != s [ 0 ] )",
        "a [ ' ' T ] = 100 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘T’"
    },
    {
      "mod_line": [
        17,
        15,
        8,
        12
      ],
      "mod_code": [
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] ] )",
        "if ( str [ 1 ] == s [ 0 ] and str2 [ 1 ] != s [ 0 ] )",
        "a [ ' ' T ] = 100 ;",
        "104 [ ' A ' ] = 104 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘T’"
    },
    {
      "mod_line": [
        17,
        15,
        12
      ],
      "mod_code": [
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] ] )",
        "if ( str [ 1 ] == s [ 0 ] and str2 [ 1 ] != s [ 0 ] )",
        "104 [ ' A ' ] = 104 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        17,
        8
      ],
      "mod_code": [
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] ] )",
        "a [ ' ' T ] = 100 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘T’"
    },
    {
      "mod_line": [
        17,
        8,
        12
      ],
      "mod_code": [
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] ] )",
        "a [ ' ' T ] = 100 ;",
        "104 [ ' A ' ] = 104 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘T’"
    },
    {
      "mod_line": [
        17,
        12
      ],
      "mod_code": [
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] ] )",
        "104 [ ' A ' ] = 104 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        17
      ],
      "mod_code": [
        "if ( str [ 1 ] == s [ 0 ] and str2 [ 1 ] != s [ 0 ] )",
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] )"
      ],
      "err_line": 15,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        17,
        8
      ],
      "mod_code": [
        "if ( str [ 1 ] == s [ 0 ] and str2 [ 1 ] != s [ 0 ] )",
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] )",
        "a [ ' ' T ] = 100 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘T’"
    },
    {
      "mod_line": [
        15,
        17,
        8,
        12
      ],
      "mod_code": [
        "if ( str [ 1 ] == s [ 0 ] and str2 [ 1 ] != s [ 0 ] )",
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] )",
        "a [ ' ' T ] = 100 ;",
        "104 [ ' A ' ] = 104 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘T’"
    },
    {
      "mod_line": [
        15,
        17,
        12
      ],
      "mod_code": [
        "if ( str [ 1 ] == s [ 0 ] and str2 [ 1 ] != s [ 0 ] )",
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] )",
        "104 [ ' A ' ] = 104 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        8
      ],
      "mod_code": [
        "if ( str [ 1 ] == s [ 0 ] and str2 [ 1 ] != s [ 0 ] )",
        "a [ ' ' T ] = 100 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘T’"
    },
    {
      "mod_line": [
        15,
        8,
        12
      ],
      "mod_code": [
        "if ( str [ 1 ] == s [ 0 ] and str2 [ 1 ] != s [ 0 ] )",
        "a [ ' ' T ] = 100 ;",
        "104 [ ' A ' ] = 104 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘T’"
    },
    {
      "mod_line": [
        15,
        12
      ],
      "mod_code": [
        "if ( str [ 1 ] == s [ 0 ] and str2 [ 1 ] != s [ 0 ] )",
        "104 [ ' A ' ] = 104 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        17,
        8
      ],
      "mod_code": [
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] )",
        "a [ ' ' T ] = 100 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘T’"
    },
    {
      "mod_line": [
        17,
        8,
        12
      ],
      "mod_code": [
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] )",
        "a [ ' ' T ] = 100 ;",
        "104 [ ' A ' ] = 104 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘T’"
    },
    {
      "mod_line": [
        17,
        12
      ],
      "mod_code": [
        "else if ( str1 [ 1 ] == str2 [ 1 ] && a [ str [ 0 ] ] > ap [ str2 [ 0 ] )",
        "104 [ ' A ' ] = 104 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[char]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "a [ ' ' T ] = 100 ;",
        "104 [ ' A ' ] = 104 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘T’"
    }
  ]
}