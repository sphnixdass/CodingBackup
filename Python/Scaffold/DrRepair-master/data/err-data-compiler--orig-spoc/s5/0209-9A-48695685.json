{
  "meta": {
    "index": 209,
    "hitid": "3YKP7CX6G29KD328AJXAQOT8JJHB7V",
    "workerid": "AIWEXPJAU66D9",
    "probid": "9A",
    "subid": "48695685"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "y , w , A and gcd are integers with A and gcd = 0",
      "code": "int y , w , A = 0 , gcd = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read y and w",
      "code": "cin >> y >> w ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if y is greater than w",
      "code": "if ( y > w )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for integer i = y to 6 inclusive increment A",
      "code": "for ( int i = y ; i <= 6 ; i ++ ) { A += 1 ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "for i = 1 to 6 inclusive",
      "code": "for ( int i = 1 ; i <= 6 ; i ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if A % i = 0 and 6 % i is equal to 0 , set gcd to i",
      "code": "if ( A % i == 0 && 6 % i == 0 ) { gcd = i ; }",
      "indent": 3
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 8,
      "text": "print A / gcd , \" / \" and 6 / gcd and a new line",
      "code": "cout << A / gcd << \" / \" << 6 / gcd << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = w to 6 inclusive increment A",
      "code": "for ( int i = w ; i <= 6 ; i ++ ) { A += 1 ; }",
      "indent": 2
    },
    {
      "line": 11,
      "text": "for i = 1 to 6 inclusive",
      "code": "for ( int i = 1 ; i <= 6 ; i ++ )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if A % i = 0 and 6 % i is equal to 0 set gcd to i",
      "code": "if ( A % i == 0 && 6 % i == 0 ) { gcd = i ; }",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print A / gcd , \" / \" and 6 / gcd and a new line",
      "code": "cout << A / gcd << \" / \" << 6 / gcd << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;"
      ],
      "err_line": 14,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 6 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 6 ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "for ( int i = y ; i <= 6 ; i ++ )",
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        4,
        8,
        14
      ],
      "mod_code": [
        "for ( int i = y ; i <= 6 ; i ++ )",
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;",
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        4,
        8,
        14,
        10
      ],
      "mod_code": [
        "for ( int i = y ; i <= 6 ; i ++ )",
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;",
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;",
        "for ( int i = w ; i <= 6 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        4,
        8,
        14
      ],
      "mod_code": [
        "for ( int i = y ; i <= 6 ; i ++ )",
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;",
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        4,
        8,
        14,
        10
      ],
      "mod_code": [
        "for ( int i = y ; i <= 6 ; i ++ )",
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;",
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;",
        "for ( int i = w ; i <= 6 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        4,
        8,
        10
      ],
      "mod_code": [
        "for ( int i = y ; i <= 6 ; i ++ )",
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;",
        "for ( int i = w ; i <= 6 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "for ( int i = y ; i <= 6 ; i ++ )",
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;"
      ],
      "err_line": 14,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        4,
        14,
        10
      ],
      "mod_code": [
        "for ( int i = y ; i <= 6 ; i ++ )",
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;",
        "for ( int i = w ; i <= 6 ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        4,
        14,
        10,
        8
      ],
      "mod_code": [
        "for ( int i = y ; i <= 6 ; i ++ )",
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;",
        "for ( int i = w ; i <= 6 ; i ++ )",
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        14,
        8
      ],
      "mod_code": [
        "for ( int i = y ; i <= 6 ; i ++ )",
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;",
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "for ( int i = y ; i <= 6 ; i ++ )",
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        14,
        10
      ],
      "mod_code": [
        "for ( int i = y ; i <= 6 ; i ++ )",
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;",
        "for ( int i = w ; i <= 6 ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        14,
        10,
        8
      ],
      "mod_code": [
        "for ( int i = y ; i <= 6 ; i ++ )",
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;",
        "for ( int i = w ; i <= 6 ; i ++ )",
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        14,
        8
      ],
      "mod_code": [
        "for ( int i = y ; i <= 6 ; i ++ )",
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;",
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        10,
        8
      ],
      "mod_code": [
        "for ( int i = y ; i <= 6 ; i ++ )",
        "for ( int i = w ; i <= 6 ; i ++ )",
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "for ( int i = y ; i <= 6 ; i ++ )",
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;",
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        8,
        14,
        10
      ],
      "mod_code": [
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;",
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;",
        "for ( int i = w ; i <= 6 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;",
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        8,
        14,
        10
      ],
      "mod_code": [
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;",
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;",
        "for ( int i = w ; i <= 6 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;",
        "for ( int i = w ; i <= 6 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        14,
        10
      ],
      "mod_code": [
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;",
        "for ( int i = w ; i <= 6 ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        14,
        10,
        8
      ],
      "mod_code": [
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;",
        "for ( int i = w ; i <= 6 ; i ++ )",
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        14,
        8
      ],
      "mod_code": [
        "cout << A / gcd ( \" / \" , 6 / gcd ) << endl ;",
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        14,
        10
      ],
      "mod_code": [
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;",
        "for ( int i = w ; i <= 6 ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        14,
        10,
        8
      ],
      "mod_code": [
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;",
        "for ( int i = w ; i <= 6 ; i ++ )",
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        14,
        8
      ],
      "mod_code": [
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;",
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "for ( int i = w ; i <= 6 ; i ++ )",
        "cout << A / gcd , \" / \" << 6 / gcd << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘int’ to binary ‘operator<<’"
    }
  ]
}