{
  "meta": {
    "index": 82,
    "hitid": "3CO05SML7VZTBZJDLHYRBOOPT6V0R8",
    "workerid": "AEI394LG9CN94",
    "probid": "748A",
    "subid": "39536365"
  },
  "lines": [
    {
      "line": 0,
      "text": "Function f will take variables n , m",
      "code": "int f ( int n , int m )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if n modulo m equal 0 return n / m else return n / m + 1",
      "code": "return ( n % m == 0 ? n / m : n / m + 1 ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "create integers l , d , p",
      "code": "int l , d , p ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read l , d and p",
      "code": "cin >> l >> d >> p ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "create integer x , lr and y with x = f ( p , d * 2 ) , lr = p - d * 2 * ( x - 1 ) , and y = f ( lr , 2 )",
      "code": "int x = f ( p , d * 2 ) , lr = p - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if lr modulo 2 equal 0 print x y R else print x y L",
      "code": "cout << x << ' ' << y << ' ' << ( lr % 2 == 0 ? ' R ' : ' L ' ) << endl ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "f ( n , m ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "n = n - m ;"
      ],
      "err_line": 0,
      "err_msg": "‘n’ does not name a type"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "if ( n % m == 0 ) { return n / m + 1 : n / m + 1 ; }"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cin >> l >> d >> n ;"
      ],
      "err_line": 5,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "f ( n , m ) ;",
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        1,
        6
      ],
      "mod_code": [
        "f ( n , m ) ;",
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;",
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        1,
        6,
        7
      ],
      "mod_code": [
        "f ( n , m ) ;",
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;",
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;",
        "cout << ( lr % 2 == 0 ? x : x ) << \" \" << x << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        1,
        6,
        7
      ],
      "mod_code": [
        "f ( n , m ) ;",
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;",
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;",
        "cout << ( lr % 2 == 0 ? x : x ? x : x ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        1,
        6,
        5
      ],
      "mod_code": [
        "f ( n , m ) ;",
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;",
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;",
        "cin >> l >> d >> n ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        1,
        7
      ],
      "mod_code": [
        "f ( n , m ) ;",
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;",
        "cout << ( lr % 2 == 0 ? x : x ) << \" \" << x << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        1,
        7,
        5
      ],
      "mod_code": [
        "f ( n , m ) ;",
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;",
        "cout << ( lr % 2 == 0 ? x : x ) << \" \" << x << endl ;",
        "cin >> l >> d >> n ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        1,
        7
      ],
      "mod_code": [
        "f ( n , m ) ;",
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;",
        "cout << ( lr % 2 == 0 ? x : x ? x : x ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        1,
        7,
        5
      ],
      "mod_code": [
        "f ( n , m ) ;",
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;",
        "cout << ( lr % 2 == 0 ? x : x ? x : x ) << endl ;",
        "cin >> l >> d >> n ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        1,
        5
      ],
      "mod_code": [
        "f ( n , m ) ;",
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;",
        "cin >> l >> d >> n ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "f ( n , m ) ;",
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        6,
        7
      ],
      "mod_code": [
        "f ( n , m ) ;",
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;",
        "cout << ( lr % 2 == 0 ? x : x ) << \" \" << x << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        6,
        7,
        5
      ],
      "mod_code": [
        "f ( n , m ) ;",
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;",
        "cout << ( lr % 2 == 0 ? x : x ) << \" \" << x << endl ;",
        "cin >> l >> d >> n ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        6,
        7
      ],
      "mod_code": [
        "f ( n , m ) ;",
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;",
        "cout << ( lr % 2 == 0 ? x : x ? x : x ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        6,
        7,
        5
      ],
      "mod_code": [
        "f ( n , m ) ;",
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;",
        "cout << ( lr % 2 == 0 ? x : x ? x : x ) << endl ;",
        "cin >> l >> d >> n ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        6,
        5
      ],
      "mod_code": [
        "f ( n , m ) ;",
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;",
        "cin >> l >> d >> n ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "f ( n , m ) ;",
        "cout << ( lr % 2 == 0 ? x : x ) << \" \" << x << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        7,
        5
      ],
      "mod_code": [
        "f ( n , m ) ;",
        "cout << ( lr % 2 == 0 ? x : x ) << \" \" << x << endl ;",
        "cin >> l >> d >> n ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "f ( n , m ) ;",
        "cout << ( lr % 2 == 0 ? x : x ? x : x ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        7,
        5
      ],
      "mod_code": [
        "f ( n , m ) ;",
        "cout << ( lr % 2 == 0 ? x : x ? x : x ) << endl ;",
        "cin >> l >> d >> n ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "f ( n , m ) ;",
        "cin >> l >> d >> n ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;",
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        6,
        7
      ],
      "mod_code": [
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;",
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;",
        "cout << ( lr % 2 == 0 ? x : x ) << \" \" << x << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        6,
        7,
        5
      ],
      "mod_code": [
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;",
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;",
        "cout << ( lr % 2 == 0 ? x : x ) << \" \" << x << endl ;",
        "cin >> l >> d >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        6,
        7
      ],
      "mod_code": [
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;",
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;",
        "cout << ( lr % 2 == 0 ? x : x ? x : x ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        6,
        7,
        5
      ],
      "mod_code": [
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;",
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;",
        "cout << ( lr % 2 == 0 ? x : x ? x : x ) << endl ;",
        "cin >> l >> d >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        6,
        5
      ],
      "mod_code": [
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;",
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;",
        "cin >> l >> d >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;",
        "cout << ( lr % 2 == 0 ? x : x ) << \" \" << x << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        7,
        5
      ],
      "mod_code": [
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;",
        "cout << ( lr % 2 == 0 ? x : x ) << \" \" << x << endl ;",
        "cin >> l >> d >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;",
        "cout << ( lr % 2 == 0 ? x : x ? x : x ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        7,
        5
      ],
      "mod_code": [
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;",
        "cout << ( lr % 2 == 0 ? x : x ? x : x ) << endl ;",
        "cin >> l >> d >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "if ( n % m == 0 ) return n / m + 1 : n / m + 1 ;",
        "cin >> l >> d >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;",
        "cout << ( lr % 2 == 0 ? x : x ) << \" \" << x << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        5
      ],
      "mod_code": [
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;",
        "cout << ( lr % 2 == 0 ? x : x ) << \" \" << x << endl ;",
        "cin >> l >> d >> n ;"
      ],
      "err_line": 5,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;",
        "cout << ( lr % 2 == 0 ? x : x ? x : x ) << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        5
      ],
      "mod_code": [
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;",
        "cout << ( lr % 2 == 0 ? x : x ? x : x ) << endl ;",
        "cin >> l >> d >> n ;"
      ],
      "err_line": 5,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "int x = f ( p , d * 2 ) , lr = f - d * 2 * ( x - 1 ) , y = f ( lr , 2 ) ;",
        "cin >> l >> d >> n ;"
      ],
      "err_line": 5,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "cout << ( lr % 2 == 0 ? x : x ) << \" \" << x << endl ;",
        "cin >> l >> d >> n ;"
      ],
      "err_line": 5,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "cout << ( lr % 2 == 0 ? x : x ? x : x ) << endl ;",
        "cin >> l >> d >> n ;"
      ],
      "err_line": 5,
      "err_msg": "‘n’ was not declared in this scope"
    }
  ]
}