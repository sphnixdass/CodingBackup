{
  "meta": {
    "index": 899,
    "hitid": "3VMHWJRYHVA45ZKFXYN43DXH1CWXF7",
    "workerid": "A2O34N3Y3RJLJ6",
    "probid": "252A",
    "subid": "12410805"
  },
  "lines": [
    {
      "line": 0,
      "text": "define 150 - element int array a and 5 , 100 - element int array dp",
      "code": "int a [ 150 ] , dp [ 5100 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "define integers i , j , n , len , ans , flag , t",
      "code": "int i , j , n , len , ans , flag , t ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while input can be read to n , do",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "zero out dp",
      "code": "memset ( dp , 0 , sizeof ( dp ) ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "set flag to 0 ; for i from 0 to n ( exclusive ) by 1 , do",
      "code": "for ( i = 0 , flag = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read into a [ i ]",
      "code": "cin >> a [ i ] ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "set dp [ i ] to a [ i ]",
      "code": "dp [ i ] = a [ i ] ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "set len to i",
      "code": "len = i ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if flag < dp [ i ] then set flag to dp [ i ]",
      "code": "if ( flag < dp [ i ] ) flag = dp [ i ] ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "for i from 0 to n - 1 ( exclusive ) by 1 , do",
      "code": "for ( i = 0 ; i < n - 1 ; i ++ )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set ans to a [ i ] and t to len + 1 ; for j from i + 1 to n ( exclusive ) by 1 , do",
      "code": "for ( j = i + 1 , ans = a [ i ] , t = len + 1 ; j < n ; j ++ )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "set ans to itself XOR a [ j ]",
      "code": "ans ^= a [ j ] ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "assign ans to dp [ t ]",
      "code": "dp [ t ] = ans ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "if dp [ t ] > flag , set flag to dp [ t ]",
      "code": "if ( dp [ t ] > flag ) flag = dp [ t ] ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "increment t",
      "code": "t ++ ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 18,
      "text": "print flag and newline",
      "code": "cout << flag << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( cin >> n >> do )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘do’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "dp = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [5100]’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int 150 [ 5 ] [ 100 ] , dp [ 100 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int i , j , n , len , ans , ans , t ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "out = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘out’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "flag = 0 ; i < n ; i ++ ) { flag = 0 ; }"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "ans = n [ i ] = n + 1 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "dp [ t ] = \" ans \" ;"
      ],
      "err_line": 14,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "while ( cin >> n >> do )"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        3,
        4
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "while ( cin >> n >> do )",
        "dp = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        5
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "while ( cin >> n >> do )",
        "dp = 0 ;",
        "flag = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        12
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "while ( cin >> n >> do )",
        "dp = 0 ;",
        "ans = a [ i ] = n + 1 ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        13
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "while ( cin >> n >> do )",
        "dp = 0 ;",
        "ans = a [ j ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        3,
        5
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "while ( cin >> n >> do )",
        "flag = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        12
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "while ( cin >> n >> do )",
        "flag = 0 ;",
        "ans = a [ i ] = n + 1 ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        13
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "while ( cin >> n >> do )",
        "flag = 0 ;",
        "ans = a [ j ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        3,
        12
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "while ( cin >> n >> do )",
        "ans = a [ i ] = n + 1 ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        3,
        12,
        13
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "while ( cin >> n >> do )",
        "ans = a [ i ] = n + 1 ;",
        "ans = a [ j ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        3,
        13
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "while ( cin >> n >> do )",
        "ans = a [ j ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "dp = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        4,
        5
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "dp = 0 ;",
        "flag = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        4,
        5,
        12
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "dp = 0 ;",
        "flag = 0 ;",
        "ans = a [ i ] = n + 1 ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        4,
        5,
        13
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "dp = 0 ;",
        "flag = 0 ;",
        "ans = a [ j ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        4,
        12
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "dp = 0 ;",
        "ans = a [ i ] = n + 1 ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        4,
        12,
        13
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "dp = 0 ;",
        "ans = a [ i ] = n + 1 ;",
        "ans = a [ j ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        4,
        13
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "dp = 0 ;",
        "ans = a [ j ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "flag = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        5,
        12
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "flag = 0 ;",
        "ans = a [ i ] = n + 1 ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        5,
        12,
        13
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "flag = 0 ;",
        "ans = a [ i ] = n + 1 ;",
        "ans = a [ j ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        5,
        13
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "flag = 0 ;",
        "ans = a [ j ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "ans = a [ i ] = n + 1 ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        12,
        13
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "ans = a [ i ] = n + 1 ;",
        "ans = a [ j ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "int 150 [ 100 ] [ 100 ] , dp [ 100 ] ;",
        "ans = a [ j ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "while ( cin >> n >> do )",
        "dp = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘do’"
    },
    {
      "mod_line": [
        3,
        4,
        5
      ],
      "mod_code": [
        "while ( cin >> n >> do )",
        "dp = 0 ;",
        "flag = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘do’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        12
      ],
      "mod_code": [
        "while ( cin >> n >> do )",
        "dp = 0 ;",
        "flag = 0 ;",
        "ans = a [ i ] = n + 1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘do’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        13
      ],
      "mod_code": [
        "while ( cin >> n >> do )",
        "dp = 0 ;",
        "flag = 0 ;",
        "ans = a [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘do’"
    },
    {
      "mod_line": [
        3,
        4,
        12
      ],
      "mod_code": [
        "while ( cin >> n >> do )",
        "dp = 0 ;",
        "ans = a [ i ] = n + 1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘do’"
    },
    {
      "mod_line": [
        3,
        4,
        12,
        13
      ],
      "mod_code": [
        "while ( cin >> n >> do )",
        "dp = 0 ;",
        "ans = a [ i ] = n + 1 ;",
        "ans = a [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘do’"
    },
    {
      "mod_line": [
        3,
        4,
        13
      ],
      "mod_code": [
        "while ( cin >> n >> do )",
        "dp = 0 ;",
        "ans = a [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘do’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "while ( cin >> n >> do )",
        "flag = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘do’"
    },
    {
      "mod_line": [
        3,
        5,
        12
      ],
      "mod_code": [
        "while ( cin >> n >> do )",
        "flag = 0 ;",
        "ans = a [ i ] = n + 1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘do’"
    },
    {
      "mod_line": [
        3,
        5,
        12,
        13
      ],
      "mod_code": [
        "while ( cin >> n >> do )",
        "flag = 0 ;",
        "ans = a [ i ] = n + 1 ;",
        "ans = a [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘do’"
    },
    {
      "mod_line": [
        3,
        5,
        13
      ],
      "mod_code": [
        "while ( cin >> n >> do )",
        "flag = 0 ;",
        "ans = a [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘do’"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "while ( cin >> n >> do )",
        "ans = a [ i ] = n + 1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘do’"
    },
    {
      "mod_line": [
        3,
        12,
        13
      ],
      "mod_code": [
        "while ( cin >> n >> do )",
        "ans = a [ i ] = n + 1 ;",
        "ans = a [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘do’"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "while ( cin >> n >> do )",
        "ans = a [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘do’"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "dp = 0 ;",
        "flag = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [5100]’"
    },
    {
      "mod_line": [
        4,
        5,
        12
      ],
      "mod_code": [
        "dp = 0 ;",
        "flag = 0 ;",
        "ans = a [ i ] = n + 1 ;"
      ],
      "err_line": 4,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [5100]’"
    },
    {
      "mod_line": [
        4,
        5,
        12,
        13
      ],
      "mod_code": [
        "dp = 0 ;",
        "flag = 0 ;",
        "ans = a [ i ] = n + 1 ;",
        "ans = a [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [5100]’"
    },
    {
      "mod_line": [
        4,
        5,
        13
      ],
      "mod_code": [
        "dp = 0 ;",
        "flag = 0 ;",
        "ans = a [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [5100]’"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "dp = 0 ;",
        "ans = a [ i ] = n + 1 ;"
      ],
      "err_line": 4,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [5100]’"
    },
    {
      "mod_line": [
        4,
        12,
        13
      ],
      "mod_code": [
        "dp = 0 ;",
        "ans = a [ i ] = n + 1 ;",
        "ans = a [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [5100]’"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "dp = 0 ;",
        "ans = a [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [5100]’"
    }
  ]
}