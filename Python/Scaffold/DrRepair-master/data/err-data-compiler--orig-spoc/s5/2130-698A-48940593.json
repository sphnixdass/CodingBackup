{
  "meta": {
    "index": 2130,
    "hitid": "3UV0D2KX1MDD7XW5DNLZ620J8HV4F3",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "698A",
    "subid": "48940593"
  },
  "lines": [
    {
      "line": 0,
      "text": "a = integer array of size 1000",
      "code": "int a [ 1000 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "t = integer array of size 1000",
      "code": "int t [ 1000 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "n , count , i , j = integer with count = 0",
      "code": "int n , count = 0 , i , j ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive , read a [ i ]",
      "code": "for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if a [ 0 ] is 0 , t [ 0 ] = 1",
      "code": "if ( a [ 0 ] == 0 ) t [ 0 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if a [ 0 ] is 1 , t [ 0 ] = 3",
      "code": "if ( a [ 0 ] == 1 ) t [ 0 ] = 3 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if a [ 0 ] is 2 , t [ 0 ] = 2",
      "code": "if ( a [ 0 ] == 2 ) t [ 0 ] = 2 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if a [ 0 ] is 3",
      "code": "if ( a [ 0 ] == 3 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "j = 1",
      "code": "j = 1 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "while j < n",
      "code": "while ( j < n )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if a [ j ] is 0",
      "code": "if ( a [ j ] == 0 )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "t [ 0 ] = 2",
      "code": "t [ 0 ] = 2 ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 16,
      "text": "if a [ j ] is 1",
      "code": "if ( a [ j ] == 1 )",
      "indent": 3
    },
    {
      "line": 17,
      "text": "if j modulo 2 is 0",
      "code": "if ( j % 2 == 0 )",
      "indent": 4
    },
    {
      "line": 18,
      "text": "t [ 0 ] = 3",
      "code": "t [ 0 ] = 3 ;",
      "indent": 5
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 20,
      "text": "t [ 0 ] = 2",
      "code": "t [ 0 ] = 2 ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "else if a [ j ] is 2",
      "code": "else if ( a [ j ] == 2 )",
      "indent": 3
    },
    {
      "line": 23,
      "text": "if j modulo 2 is 0",
      "code": "if ( j % 2 == 0 )",
      "indent": 4
    },
    {
      "line": 24,
      "text": "t [ 0 ] = 2",
      "code": "t [ 0 ] = 2 ;",
      "indent": 5
    },
    {
      "line": 25,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 26,
      "text": "t [ 0 ] = 3",
      "code": "t [ 0 ] = 3 ;",
      "indent": 5
    },
    {
      "line": 27,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 29,
      "text": "incement j",
      "code": "j ++ ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 31,
      "text": "if j is n , t [ 0 ] = 2",
      "code": "if ( j == n ) t [ 0 ] = 2 ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 33,
      "text": "for i = 1 to n exclusive",
      "code": "for ( i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 34,
      "text": "if a [ i ] is 0",
      "code": "if ( a [ i ] == 0 )",
      "indent": 2
    },
    {
      "line": 35,
      "text": "t [ i ] = 1",
      "code": "t [ i ] = 1 ;",
      "indent": 3
    },
    {
      "line": 36,
      "text": "else if a [ i ] is 1",
      "code": "else if ( a [ i ] == 1 )",
      "indent": 2
    },
    {
      "line": 37,
      "text": "if t [ i - 1 ] is 1",
      "code": "if ( t [ i - 1 ] == 1 )",
      "indent": 3
    },
    {
      "line": 38,
      "text": "t [ i ] = 3",
      "code": "t [ i ] = 3 ;",
      "indent": 4
    },
    {
      "line": 39,
      "text": "else if t [ i - 1 ] is 2",
      "code": "else if ( t [ i - 1 ] == 2 )",
      "indent": 3
    },
    {
      "line": 40,
      "text": "t [ i ] = 3",
      "code": "t [ i ] = 3 ;",
      "indent": 4
    },
    {
      "line": 41,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 42,
      "text": "t [ i ] = 1",
      "code": "t [ i ] = 1 ;",
      "indent": 4
    },
    {
      "line": 43,
      "text": "else if ( a [ i ] is 2 )",
      "code": "else if ( a [ i ] == 2 )",
      "indent": 2
    },
    {
      "line": 44,
      "text": "if t [ i - 1 ] is 1",
      "code": "if ( t [ i - 1 ] == 1 )",
      "indent": 3
    },
    {
      "line": 45,
      "text": "t [ i ] = 2",
      "code": "t [ i ] = 2 ;",
      "indent": 4
    },
    {
      "line": 46,
      "text": "else if t [ i - 1 ] is 3",
      "code": "else if ( t [ i - 1 ] == 3 )",
      "indent": 3
    },
    {
      "line": 47,
      "text": "t [ i ] = 2",
      "code": "t [ i ] = 2 ;",
      "indent": 4
    },
    {
      "line": 48,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 49,
      "text": "t [ i ] = 1",
      "code": "t [ i ] = 1 ;",
      "indent": 4
    },
    {
      "line": 50,
      "text": "else if ( a [ i ] is 3 )",
      "code": "else if ( a [ i ] == 3 )",
      "indent": 2
    },
    {
      "line": 51,
      "text": "if ( t [ i - 1 ] is 1 )",
      "code": "if ( t [ i - 1 ] == 1 )",
      "indent": 3
    },
    {
      "line": 52,
      "text": "j = i + 1",
      "code": "j = i + 1 ;",
      "indent": 4
    },
    {
      "line": 53,
      "text": "while j < n",
      "code": "while ( j < n )",
      "indent": 4
    },
    {
      "line": 54,
      "text": "if a [ j ] is 0",
      "code": "if ( a [ j ] == 0 )",
      "indent": 5
    },
    {
      "line": 55,
      "text": "t [ i ] = 2",
      "code": "t [ i ] = 2 ;",
      "indent": 6
    },
    {
      "line": 56,
      "text": "break loop",
      "code": "break ;",
      "indent": 6
    },
    {
      "line": 57,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 58,
      "text": "if a [ j ] is 1",
      "code": "if ( a [ j ] == 1 )",
      "indent": 5
    },
    {
      "line": 59,
      "text": "if ( j - i ) modulo 2 is 0",
      "code": "if ( ( j - i ) % 2 == 0 )",
      "indent": 6
    },
    {
      "line": 60,
      "text": "t [ i ] = 3",
      "code": "t [ i ] = 3 ;",
      "indent": 7
    },
    {
      "line": 61,
      "text": "else",
      "code": "else",
      "indent": 6
    },
    {
      "line": 62,
      "text": "t [ i ] = 2",
      "code": "t [ i ] = 2 ;",
      "indent": 7
    },
    {
      "line": 63,
      "text": "break loop",
      "code": "break ;",
      "indent": 6
    },
    {
      "line": 64,
      "text": "else if ( a [ j ] is 2 )",
      "code": "else if ( a [ j ] == 2 )",
      "indent": 5
    },
    {
      "line": 65,
      "text": "if ( j - i ) modulo 2 is 0",
      "code": "if ( ( j - i ) % 2 == 0 )",
      "indent": 6
    },
    {
      "line": 66,
      "text": "t [ i ] = 2 ;",
      "code": "t [ i ] = 2 ;",
      "indent": 7
    },
    {
      "line": 67,
      "text": "else",
      "code": "else",
      "indent": 6
    },
    {
      "line": 68,
      "text": "t [ i ] = 3",
      "code": "t [ i ] = 3 ;",
      "indent": 7
    },
    {
      "line": 69,
      "text": "break loop",
      "code": "break ;",
      "indent": 6
    },
    {
      "line": 70,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 71,
      "text": "increment j",
      "code": "j ++ ;",
      "indent": 5
    },
    {
      "line": 72,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 73,
      "text": "if j is n , t [ i ] = 2",
      "code": "if ( j == n ) t [ i ] = 2 ;",
      "indent": 4
    },
    {
      "line": 74,
      "text": "else if ( t [ i - 1 ] is 2 )",
      "code": "else if ( t [ i - 1 ] == 2 )",
      "indent": 3
    },
    {
      "line": 75,
      "text": "t [ i ] = 3",
      "code": "t [ i ] = 3 ;",
      "indent": 4
    },
    {
      "line": 76,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 77,
      "text": "t [ i ] = 2",
      "code": "t [ i ] = 2 ;",
      "indent": 4
    },
    {
      "line": 78,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 79,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 80,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 81,
      "text": "if t [ i ] is 1 , increment count",
      "code": "if ( t [ i ] == 1 ) count ++ ;",
      "indent": 2
    },
    {
      "line": 82,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 83,
      "text": "print count",
      "code": "cout << count << endl ;",
      "indent": 1
    },
    {
      "line": 84,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 85,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int * a [ 1000 ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int * t [ 1000 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "while ( j < n ) ;"
      ],
      "err_line": 14,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 27,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "if ( j == n || t [ 0 ] == 2 )"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        56
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 56,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        63
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 63,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        66
      ],
      "mod_code": [
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 66,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        69
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 69,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        50,
        21
      ],
      "mod_code": [
        "else if ( a [ i ] == ' 3 ' )",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        50,
        21,
        37
      ],
      "mod_code": [
        "else if ( a [ i ] == ' 3 ' )",
        "break break ;",
        "if ( t [ i - 1 ] == ' 1 ' )"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        50,
        21,
        37,
        49
      ],
      "mod_code": [
        "else if ( a [ i ] == ' 3 ' )",
        "break break ;",
        "if ( t [ i - 1 ] == ' 1 ' )",
        "t [ i ] = ' 1 ' ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        50,
        21,
        37,
        46
      ],
      "mod_code": [
        "else if ( a [ i ] == ' 3 ' )",
        "break break ;",
        "if ( t [ i - 1 ] == ' 1 ' )",
        "else if ( t [ i - 1 ] == ' 3 ' )"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        50,
        21,
        37,
        66
      ],
      "mod_code": [
        "else if ( a [ i ] == ' 3 ' )",
        "break break ;",
        "if ( t [ i - 1 ] == ' 1 ' )",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        50,
        21,
        49
      ],
      "mod_code": [
        "else if ( a [ i ] == ' 3 ' )",
        "break break ;",
        "t [ i ] = ' 1 ' ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        50,
        21,
        49,
        46
      ],
      "mod_code": [
        "else if ( a [ i ] == ' 3 ' )",
        "break break ;",
        "t [ i ] = ' 1 ' ;",
        "else if ( t [ i - 1 ] == ' 3 ' )"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        50,
        21,
        49,
        66
      ],
      "mod_code": [
        "else if ( a [ i ] == ' 3 ' )",
        "break break ;",
        "t [ i ] = ' 1 ' ;",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        50,
        21,
        46
      ],
      "mod_code": [
        "else if ( a [ i ] == ' 3 ' )",
        "break break ;",
        "else if ( t [ i - 1 ] == ' 3 ' )"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        50,
        21,
        46,
        66
      ],
      "mod_code": [
        "else if ( a [ i ] == ' 3 ' )",
        "break break ;",
        "else if ( t [ i - 1 ] == ' 3 ' )",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        50,
        21,
        66
      ],
      "mod_code": [
        "else if ( a [ i ] == ' 3 ' )",
        "break break ;",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        50,
        37,
        49,
        66
      ],
      "mod_code": [
        "else if ( a [ i ] == ' 3 ' )",
        "if ( t [ i - 1 ] == ' 1 ' )",
        "t [ i ] = ' 1 ' ;",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 66,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        50,
        37,
        46,
        66
      ],
      "mod_code": [
        "else if ( a [ i ] == ' 3 ' )",
        "if ( t [ i - 1 ] == ' 1 ' )",
        "else if ( t [ i - 1 ] == ' 3 ' )",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 66,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        50,
        37,
        66
      ],
      "mod_code": [
        "else if ( a [ i ] == ' 3 ' )",
        "if ( t [ i - 1 ] == ' 1 ' )",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 66,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        50,
        49,
        46,
        66
      ],
      "mod_code": [
        "else if ( a [ i ] == ' 3 ' )",
        "t [ i ] = ' 1 ' ;",
        "else if ( t [ i - 1 ] == ' 3 ' )",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 66,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        50,
        49,
        66
      ],
      "mod_code": [
        "else if ( a [ i ] == ' 3 ' )",
        "t [ i ] = ' 1 ' ;",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 66,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        50,
        46,
        66
      ],
      "mod_code": [
        "else if ( a [ i ] == ' 3 ' )",
        "else if ( t [ i - 1 ] == ' 3 ' )",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 66,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        50,
        66
      ],
      "mod_code": [
        "else if ( a [ i ] == ' 3 ' )",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 66,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        21,
        37
      ],
      "mod_code": [
        "break break ;",
        "if ( t [ i - 1 ] == ' 1 ' )"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        21,
        37,
        49
      ],
      "mod_code": [
        "break break ;",
        "if ( t [ i - 1 ] == ' 1 ' )",
        "t [ i ] = ' 1 ' ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        21,
        37,
        49,
        46
      ],
      "mod_code": [
        "break break ;",
        "if ( t [ i - 1 ] == ' 1 ' )",
        "t [ i ] = ' 1 ' ;",
        "else if ( t [ i - 1 ] == ' 3 ' )"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        21,
        37,
        49,
        66
      ],
      "mod_code": [
        "break break ;",
        "if ( t [ i - 1 ] == ' 1 ' )",
        "t [ i ] = ' 1 ' ;",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        21,
        37,
        46
      ],
      "mod_code": [
        "break break ;",
        "if ( t [ i - 1 ] == ' 1 ' )",
        "else if ( t [ i - 1 ] == ' 3 ' )"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        21,
        37,
        46,
        66
      ],
      "mod_code": [
        "break break ;",
        "if ( t [ i - 1 ] == ' 1 ' )",
        "else if ( t [ i - 1 ] == ' 3 ' )",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        21,
        37,
        66
      ],
      "mod_code": [
        "break break ;",
        "if ( t [ i - 1 ] == ' 1 ' )",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        21,
        49
      ],
      "mod_code": [
        "break break ;",
        "t [ i ] = ' 1 ' ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        21,
        49,
        46
      ],
      "mod_code": [
        "break break ;",
        "t [ i ] = ' 1 ' ;",
        "else if ( t [ i - 1 ] == ' 3 ' )"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        21,
        49,
        46,
        66
      ],
      "mod_code": [
        "break break ;",
        "t [ i ] = ' 1 ' ;",
        "else if ( t [ i - 1 ] == ' 3 ' )",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        21,
        49,
        66
      ],
      "mod_code": [
        "break break ;",
        "t [ i ] = ' 1 ' ;",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        21,
        46
      ],
      "mod_code": [
        "break break ;",
        "else if ( t [ i - 1 ] == ' 3 ' )"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        21,
        46,
        66
      ],
      "mod_code": [
        "break break ;",
        "else if ( t [ i - 1 ] == ' 3 ' )",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        21,
        66
      ],
      "mod_code": [
        "break break ;",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        37,
        49,
        46,
        66
      ],
      "mod_code": [
        "if ( t [ i - 1 ] == ' 1 ' )",
        "t [ i ] = ' 1 ' ;",
        "else if ( t [ i - 1 ] == ' 3 ' )",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 66,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        37,
        49,
        66
      ],
      "mod_code": [
        "if ( t [ i - 1 ] == ' 1 ' )",
        "t [ i ] = ' 1 ' ;",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 66,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        37,
        46,
        66
      ],
      "mod_code": [
        "if ( t [ i - 1 ] == ' 1 ' )",
        "else if ( t [ i - 1 ] == ' 3 ' )",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 66,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        37,
        66
      ],
      "mod_code": [
        "if ( t [ i - 1 ] == ' 1 ' )",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 66,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        49,
        46,
        66
      ],
      "mod_code": [
        "t [ i ] = ' 1 ' ;",
        "else if ( t [ i - 1 ] == ' 3 ' )",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 66,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        49,
        66
      ],
      "mod_code": [
        "t [ i ] = ' 1 ' ;",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 66,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        46,
        66
      ],
      "mod_code": [
        "else if ( t [ i - 1 ] == ' 3 ' )",
        "if ( t [ i ] == 2 ;"
      ],
      "err_line": 66,
      "err_msg": "expected ‘)’ before ‘;’ token"
    }
  ]
}