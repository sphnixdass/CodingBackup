{
  "meta": {
    "index": 477,
    "hitid": "311HQEI8RSAGV15OGXDDC60BBOFZ76",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "937A",
    "subid": "49029263"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function gcd taking long long a , long long b and returning long long",
      "code": "long long gcd ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if b is 0 return a else return gcd of b , a mod b",
      "code": "return ( b == 0 ? a : gcd ( b , a % b ) ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "in function lcm taking long long a , long long b and returning long long",
      "code": "long long lcm ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "return a * ( b / gcd of a , b )",
      "code": "return a * ( b / gcd ( a , b ) ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "in function issquare taking long long w and returning bool",
      "code": "bool issquare ( long long w )",
      "indent": 0
    },
    {
      "line": 7,
      "text": "return ( trunc of sqrt of w ) * ( trunc of sqrt of w ) is w",
      "code": "return trunc ( sqrt ( w ) ) * trunc ( sqrt ( w ) ) == w ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "in function isprime taking long long u and returning bool",
      "code": "bool isprime ( long long u )",
      "indent": 0
    },
    {
      "line": 10,
      "text": "for i = 2 to sqrt of u inclusive",
      "code": "for ( long long i = 2 ; i <= ( long long ) sqrt ( u ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if u is multiple of i return 0",
      "code": "if ( u % i == 0 ) return 0 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "return 1",
      "code": "return 1 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 15,
      "text": "pi = const double with pi = acos of - 1",
      "code": "const double pi = acos ( - 1 ) ;",
      "indent": 0
    },
    {
      "line": 16,
      "text": "mod , MOD = const long long with mod = 998244353 and MOD = 1e9 + 7",
      "code": "const long long mod = 998244353 , MOD = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 18,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "s = int set",
      "code": "set < int > s ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "for i = 0 to n",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "x = int",
      "code": "int x ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "if x is not 0 insert x into s",
      "code": "if ( x != 0 ) s . insert ( x ) ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print size of s",
      "code": "cout << s . size ( ) << endl ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "return b == 0 ? gcd ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "bool issquare ( long long w ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "bool isprime ( long long u ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 24,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "set < int > :: s ;"
      ],
      "err_line": 20,
      "err_msg": "‘s’ is not a member of ‘std::set<int>’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "bool issquare ( long long w ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        6,
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "bool issquare ( long long w ) ;",
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        6,
        10,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "bool issquare ( long long w ) ;",
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "bool isprime ( long long u ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        6,
        10,
        23
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "bool issquare ( long long w ) ;",
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "cout << x << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        6,
        10,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "bool issquare ( long long w ) ;",
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "char x ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        6,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "bool issquare ( long long w ) ;",
        "bool isprime ( long long u ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        6,
        9,
        23
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "bool issquare ( long long w ) ;",
        "bool isprime ( long long u ) ;",
        "cout << x << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        6,
        9,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "bool issquare ( long long w ) ;",
        "bool isprime ( long long u ) ;",
        "char x ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        6,
        23
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "bool issquare ( long long w ) ;",
        "cout << x << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        6,
        23,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "bool issquare ( long long w ) ;",
        "cout << x << endl ;",
        "char x ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        6,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "bool issquare ( long long w ) ;",
        "char x ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        10,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "bool isprime ( long long u ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        10,
        9,
        23
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "bool isprime ( long long u ) ;",
        "cout << x << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        10,
        9,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "bool isprime ( long long u ) ;",
        "char x ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        10,
        23
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "cout << x << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        10,
        23,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "cout << x << endl ;",
        "char x ;"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        10,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "char x ;"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "bool isprime ( long long u ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        9,
        23
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "bool isprime ( long long u ) ;",
        "cout << x << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        9,
        23,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "bool isprime ( long long u ) ;",
        "cout << x << endl ;",
        "char x ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        9,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "bool isprime ( long long u ) ;",
        "char x ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        23
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << x << endl ;"
      ],
      "err_line": 21,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << x << endl ;",
        "char x ;"
      ],
      "err_line": 21,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "char x ;"
      ],
      "err_line": 21,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "bool issquare ( long long w ) ;",
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        10,
        9
      ],
      "mod_code": [
        "bool issquare ( long long w ) ;",
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "bool isprime ( long long u ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        10,
        9,
        23
      ],
      "mod_code": [
        "bool issquare ( long long w ) ;",
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "bool isprime ( long long u ) ;",
        "cout << x << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        10,
        9,
        22
      ],
      "mod_code": [
        "bool issquare ( long long w ) ;",
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "bool isprime ( long long u ) ;",
        "char x ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        10,
        23
      ],
      "mod_code": [
        "bool issquare ( long long w ) ;",
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "cout << x << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        10,
        23,
        22
      ],
      "mod_code": [
        "bool issquare ( long long w ) ;",
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "cout << x << endl ;",
        "char x ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        10,
        22
      ],
      "mod_code": [
        "bool issquare ( long long w ) ;",
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "char x ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "bool issquare ( long long w ) ;",
        "bool isprime ( long long u ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        9,
        23
      ],
      "mod_code": [
        "bool issquare ( long long w ) ;",
        "bool isprime ( long long u ) ;",
        "cout << x << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        9,
        23,
        22
      ],
      "mod_code": [
        "bool issquare ( long long w ) ;",
        "bool isprime ( long long u ) ;",
        "cout << x << endl ;",
        "char x ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        9,
        22
      ],
      "mod_code": [
        "bool issquare ( long long w ) ;",
        "bool isprime ( long long u ) ;",
        "char x ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        23
      ],
      "mod_code": [
        "bool issquare ( long long w ) ;",
        "cout << x << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        23,
        22
      ],
      "mod_code": [
        "bool issquare ( long long w ) ;",
        "cout << x << endl ;",
        "char x ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        22
      ],
      "mod_code": [
        "bool issquare ( long long w ) ;",
        "char x ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "bool isprime ( long long u ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        9,
        23
      ],
      "mod_code": [
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "bool isprime ( long long u ) ;",
        "cout << x << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        9,
        23,
        22
      ],
      "mod_code": [
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "bool isprime ( long long u ) ;",
        "cout << x << endl ;",
        "char x ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        9,
        22
      ],
      "mod_code": [
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "bool isprime ( long long u ) ;",
        "char x ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        23
      ],
      "mod_code": [
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "cout << x << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        23,
        22
      ],
      "mod_code": [
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "cout << x << endl ;",
        "char x ;"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        22
      ],
      "mod_code": [
        "for ( i = 2 ; i <= sqrt ( u ) ; i ++ )",
        "char x ;"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        23
      ],
      "mod_code": [
        "bool isprime ( long long u ) ;",
        "cout << x << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        23,
        22
      ],
      "mod_code": [
        "bool isprime ( long long u ) ;",
        "cout << x << endl ;",
        "char x ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        22
      ],
      "mod_code": [
        "bool isprime ( long long u ) ;",
        "char x ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}