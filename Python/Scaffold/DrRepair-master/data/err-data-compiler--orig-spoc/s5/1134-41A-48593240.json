{
  "meta": {
    "index": 1134,
    "hitid": "3SZYX62S5GUIONLZ996XN2TG9NV75Q",
    "workerid": "AIWEXPJAU66D9",
    "probid": "41A",
    "subid": "48593240"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s and t = strings",
      "code": "string s , t ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read line and store it into s",
      "code": "getline ( cin , s ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read line and store it into t",
      "code": "getline ( cin , t ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "integer sl = length of s",
      "code": "int sl = s . length ( ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "integer tl = length of t",
      "code": "int tl = t . length ( ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "char arrays c1 of length sl + 1 and c2 of length tl + 1",
      "code": "char c1 [ sl + 1 ] , c2 [ tl + 1 ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "copy s to c1",
      "code": "strcpy ( c1 , s . c_str ( ) ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "copy t to c2",
      "code": "strcpy ( c2 , t . c_str ( ) ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "decrease tl",
      "code": "tl -- ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "create integer k with value 0",
      "code": "int k = 0 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for integer i = 0 to sl exclusive",
      "code": "for ( int i = 0 ; i < sl ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if c1 [ i ] is equal to c2 [ tl ]",
      "code": "if ( c1 [ i ] == c2 [ tl ] )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "decrement tl",
      "code": "tl -- ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 15,
      "text": "increase k",
      "code": "k ++ ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if k is equal to 0",
      "code": "if ( k == 0 )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘2’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "strcpy ( t , t ) ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string s , tmp ;"
      ],
      "err_line": 3,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "getline ( cin , s ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gets ( t ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "char c1 [ sl + 1 ] + c2 [ tl + 1 ] ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "strcpy ( s , s ) ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "strcpy ( c2 , t ) ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘2’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( c1 [ i ] == c2 )"
      ],
      "err_line": 12,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "stop ;"
      ],
      "err_line": 16,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;",
        "strcpy ( t , t ) ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘2’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        7,
        8,
        16
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;",
        "strcpy ( t , t ) ;",
        "stop ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘2’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        7,
        8,
        16,
        2
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;",
        "strcpy ( t , t ) ;",
        "stop ;",
        "getline ( cin , s ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        8,
        16,
        3
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;",
        "strcpy ( t , t ) ;",
        "stop ;",
        "gets ( t ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        8,
        2
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;",
        "strcpy ( t , t ) ;",
        "getline ( cin , s ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        8,
        2,
        3
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;",
        "strcpy ( t , t ) ;",
        "getline ( cin , s ) ) ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        8,
        3
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;",
        "strcpy ( t , t ) ;",
        "gets ( t ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        16
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;",
        "stop ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘2’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        7,
        16,
        2
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;",
        "stop ;",
        "getline ( cin , s ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        16,
        2,
        3
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;",
        "stop ;",
        "getline ( cin , s ) ) ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        16,
        2,
        8
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;",
        "stop ;",
        "getline ( cin , s ) ) ;",
        "strcpy ( c2 , t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        16,
        3
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;",
        "stop ;",
        "gets ( t ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        16,
        3,
        8
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;",
        "stop ;",
        "gets ( t ) ;",
        "strcpy ( c2 , t ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        16,
        8
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;",
        "stop ;",
        "strcpy ( c2 , t ) ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘2’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;",
        "getline ( cin , s ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        2,
        3
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;",
        "getline ( cin , s ) ) ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        2,
        3,
        8
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;",
        "getline ( cin , s ) ) ;",
        "gets ( t ) ;",
        "strcpy ( c2 , t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        2,
        8
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;",
        "getline ( cin , s ) ) ;",
        "strcpy ( c2 , t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;",
        "gets ( t ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        3,
        8
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;",
        "gets ( t ) ;",
        "strcpy ( c2 , t ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "strcpy ( c1 , s ) ;",
        "strcpy ( c2 , t ) ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘2’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        8,
        16
      ],
      "mod_code": [
        "strcpy ( t , t ) ;",
        "stop ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        8,
        16,
        2
      ],
      "mod_code": [
        "strcpy ( t , t ) ;",
        "stop ;",
        "getline ( cin , s ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        16,
        2,
        3
      ],
      "mod_code": [
        "strcpy ( t , t ) ;",
        "stop ;",
        "getline ( cin , s ) ) ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        16,
        3
      ],
      "mod_code": [
        "strcpy ( t , t ) ;",
        "stop ;",
        "gets ( t ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "strcpy ( t , t ) ;",
        "getline ( cin , s ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        2,
        3
      ],
      "mod_code": [
        "strcpy ( t , t ) ;",
        "getline ( cin , s ) ) ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "strcpy ( t , t ) ;",
        "gets ( t ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        16,
        2
      ],
      "mod_code": [
        "stop ;",
        "getline ( cin , s ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        2,
        3
      ],
      "mod_code": [
        "stop ;",
        "getline ( cin , s ) ) ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        2,
        3,
        8
      ],
      "mod_code": [
        "stop ;",
        "getline ( cin , s ) ) ;",
        "gets ( t ) ;",
        "strcpy ( c2 , t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        2,
        8
      ],
      "mod_code": [
        "stop ;",
        "getline ( cin , s ) ) ;",
        "strcpy ( c2 , t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        3
      ],
      "mod_code": [
        "stop ;",
        "gets ( t ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        16,
        3,
        8
      ],
      "mod_code": [
        "stop ;",
        "gets ( t ) ;",
        "strcpy ( c2 , t ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        16,
        8
      ],
      "mod_code": [
        "stop ;",
        "strcpy ( c2 , t ) ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘2’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "getline ( cin , s ) ) ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        3,
        8
      ],
      "mod_code": [
        "getline ( cin , s ) ) ;",
        "gets ( t ) ;",
        "strcpy ( c2 , t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "getline ( cin , s ) ) ;",
        "strcpy ( c2 , t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "gets ( t ) ;",
        "strcpy ( c2 , t ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}