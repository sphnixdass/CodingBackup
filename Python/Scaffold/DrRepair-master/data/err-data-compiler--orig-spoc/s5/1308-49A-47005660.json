{
  "meta": {
    "index": 1308,
    "hitid": "3KA7IJSNW6Z9J96865RRQAKTJDNBP2",
    "workerid": "A1APYLD4DUK33J",
    "probid": "49A",
    "subid": "47005660"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare a with character c as argument , returning boolean",
      "code": "bool a ( char c )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "set c to lower case c",
      "code": "c = tolower ( c ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if c is ' a ' or c is ' e ' or c is ' i ' or c is ' o ' or c is ' u ' or c is ' y ' , return 1 from function",
      "code": "if ( c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' || c == ' y ' ) return 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "create string s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "read line from cin to s",
      "code": "getline ( cin , s ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = size of s - 2 to 0 inclusive , decrementing i",
      "code": "for ( int i = s . size ( ) - 2 ; i >= 0 ; -- i )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if s [ i ] is not ' '",
      "code": "if ( s [ i ] != ' ' )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if result of run a with s [ i ] as argument is true",
      "code": "if ( a ( s [ i ] ) )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 13,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "gets ( cin , s ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid user-defined conversion from ‘std::istream {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( int i = s - 2 ; i >= 0 ; i -- )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator-’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "gets ( cin , s ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid user-defined conversion from ‘std::istream {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        7,
        1
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "gets ( cin , s ) ;",
        "c = sqrt ( c ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid user-defined conversion from ‘std::istream {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        7,
        1,
        10
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "gets ( cin , s ) ;",
        "c = sqrt ( c ) ;",
        "if ( a ( s [ i ] ) != true )"
      ],
      "err_line": 7,
      "err_msg": "invalid user-defined conversion from ‘std::istream {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        7,
        1,
        8
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "gets ( cin , s ) ;",
        "c = sqrt ( c ) ;",
        "for ( int i = s - 2 ; i >= 0 ; i -- )"
      ],
      "err_line": 7,
      "err_msg": "invalid user-defined conversion from ‘std::istream {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        7,
        1,
        0
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "gets ( cin , s ) ;",
        "c = sqrt ( c ) ;",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        7,
        10
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "gets ( cin , s ) ;",
        "if ( a ( s [ i ] ) != true )"
      ],
      "err_line": 7,
      "err_msg": "invalid user-defined conversion from ‘std::istream {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        7,
        10,
        8
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "gets ( cin , s ) ;",
        "if ( a ( s [ i ] ) != true )",
        "for ( int i = s - 2 ; i >= 0 ; i -- )"
      ],
      "err_line": 7,
      "err_msg": "invalid user-defined conversion from ‘std::istream {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        7,
        10,
        0
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "gets ( cin , s ) ;",
        "if ( a ( s [ i ] ) != true )",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        7,
        8
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "gets ( cin , s ) ;",
        "for ( int i = s - 2 ; i >= 0 ; i -- )"
      ],
      "err_line": 7,
      "err_msg": "invalid user-defined conversion from ‘std::istream {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        7,
        8,
        0
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "gets ( cin , s ) ;",
        "for ( int i = s - 2 ; i >= 0 ; i -- )",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        7,
        0
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "gets ( cin , s ) ;",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        1,
        10,
        8
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "c = sqrt ( c ) ;",
        "if ( a ( s [ i ] ) != true )",
        "for ( int i = s - 2 ; i >= 0 ; i -- )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator-’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        11,
        1,
        10,
        0
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "c = sqrt ( c ) ;",
        "if ( a ( s [ i ] ) != true )",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        1,
        8
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "c = sqrt ( c ) ;",
        "for ( int i = s - 2 ; i >= 0 ; i -- )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator-’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        11,
        1,
        8,
        0
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "c = sqrt ( c ) ;",
        "for ( int i = s - 2 ; i >= 0 ; i -- )",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        1,
        0
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "c = sqrt ( c ) ;",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        10,
        8
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "if ( a ( s [ i ] ) != true )",
        "for ( int i = s - 2 ; i >= 0 ; i -- )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator-’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        11,
        10,
        8,
        0
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "if ( a ( s [ i ] ) != true )",
        "for ( int i = s - 2 ; i >= 0 ; i -- )",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        10,
        0
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "if ( a ( s [ i ] ) != true )",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "for ( int i = s - 2 ; i >= 0 ; i -- )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator-’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        11,
        8,
        0
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "for ( int i = s - 2 ; i >= 0 ; i -- )",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        0
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "gets ( cin , s ) ;",
        "c = sqrt ( c ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid user-defined conversion from ‘std::istream {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        1,
        10
      ],
      "mod_code": [
        "gets ( cin , s ) ;",
        "c = sqrt ( c ) ;",
        "if ( a ( s [ i ] ) != true )"
      ],
      "err_line": 7,
      "err_msg": "invalid user-defined conversion from ‘std::istream {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        1,
        10,
        8
      ],
      "mod_code": [
        "gets ( cin , s ) ;",
        "c = sqrt ( c ) ;",
        "if ( a ( s [ i ] ) != true )",
        "for ( int i = s - 2 ; i >= 0 ; i -- )"
      ],
      "err_line": 7,
      "err_msg": "invalid user-defined conversion from ‘std::istream {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        1,
        10,
        0
      ],
      "mod_code": [
        "gets ( cin , s ) ;",
        "c = sqrt ( c ) ;",
        "if ( a ( s [ i ] ) != true )",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        1,
        8
      ],
      "mod_code": [
        "gets ( cin , s ) ;",
        "c = sqrt ( c ) ;",
        "for ( int i = s - 2 ; i >= 0 ; i -- )"
      ],
      "err_line": 7,
      "err_msg": "invalid user-defined conversion from ‘std::istream {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        1,
        8,
        0
      ],
      "mod_code": [
        "gets ( cin , s ) ;",
        "c = sqrt ( c ) ;",
        "for ( int i = s - 2 ; i >= 0 ; i -- )",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        1,
        0
      ],
      "mod_code": [
        "gets ( cin , s ) ;",
        "c = sqrt ( c ) ;",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "gets ( cin , s ) ;",
        "if ( a ( s [ i ] ) != true )"
      ],
      "err_line": 7,
      "err_msg": "invalid user-defined conversion from ‘std::istream {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10,
        8
      ],
      "mod_code": [
        "gets ( cin , s ) ;",
        "if ( a ( s [ i ] ) != true )",
        "for ( int i = s - 2 ; i >= 0 ; i -- )"
      ],
      "err_line": 7,
      "err_msg": "invalid user-defined conversion from ‘std::istream {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10,
        8,
        0
      ],
      "mod_code": [
        "gets ( cin , s ) ;",
        "if ( a ( s [ i ] ) != true )",
        "for ( int i = s - 2 ; i >= 0 ; i -- )",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        10,
        0
      ],
      "mod_code": [
        "gets ( cin , s ) ;",
        "if ( a ( s [ i ] ) != true )",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "gets ( cin , s ) ;",
        "for ( int i = s - 2 ; i >= 0 ; i -- )"
      ],
      "err_line": 7,
      "err_msg": "invalid user-defined conversion from ‘std::istream {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        0
      ],
      "mod_code": [
        "gets ( cin , s ) ;",
        "for ( int i = s - 2 ; i >= 0 ; i -- )",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "gets ( cin , s ) ;",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        8
      ],
      "mod_code": [
        "c = sqrt ( c ) ;",
        "if ( a ( s [ i ] ) != true )",
        "for ( int i = s - 2 ; i >= 0 ; i -- )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator-’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        1,
        10,
        8,
        0
      ],
      "mod_code": [
        "c = sqrt ( c ) ;",
        "if ( a ( s [ i ] ) != true )",
        "for ( int i = s - 2 ; i >= 0 ; i -- )",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        0
      ],
      "mod_code": [
        "c = sqrt ( c ) ;",
        "if ( a ( s [ i ] ) != true )",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "c = sqrt ( c ) ;",
        "for ( int i = s - 2 ; i >= 0 ; i -- )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator-’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        1,
        8,
        0
      ],
      "mod_code": [
        "c = sqrt ( c ) ;",
        "for ( int i = s - 2 ; i >= 0 ; i -- )",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "c = sqrt ( c ) ;",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "if ( a ( s [ i ] ) != true )",
        "for ( int i = s - 2 ; i >= 0 ; i -- )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator-’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        8,
        0
      ],
      "mod_code": [
        "if ( a ( s [ i ] ) != true )",
        "for ( int i = s - 2 ; i >= 0 ; i -- )",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "if ( a ( s [ i ] ) != true )",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "for ( int i = s - 2 ; i >= 0 ; i -- )",
        "bool a ( char c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}