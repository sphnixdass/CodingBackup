{
  "meta": {
    "index": 2579,
    "hitid": "3ZURAPD288HWFYZMQ52X84TGVAQ1FH",
    "workerid": "A2UFGZT4QUY5ON",
    "probid": "154A",
    "subid": "34722157"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integer temp",
      "code": "int temp ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create int k",
      "code": "int k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create matrix of integers a of dimensions 27x27",
      "code": "int a [ 27 ] [ 27 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 26 inclusive",
      "code": "for ( int i = 0 ; i <= 26 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 0 to 26 inclusive set a [ i ] [ j ] to 0",
      "code": "for ( int j = 0 ; j <= 26 ; j ++ ) a [ i ] [ j ] = 0 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read k",
      "code": "cin >> k ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "b = string of length 14",
      "code": "string b [ 14 ] ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to k exclusive read b [ i ]",
      "code": "for ( int i = 0 ; i < k ; i ++ ) { cin >> b [ i ] ; }",
      "indent": 1
    },
    {
      "line": 11,
      "text": "create integer count and set count to 0",
      "code": "int count = 0 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "set counta to 0",
      "code": "int counta = 0 ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "set countb to 0",
      "code": "int countb = 0 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 0 to k exclusive",
      "code": "for ( int i = 0 ; i < k ; i ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "create string cur and set it to b [ i ]",
      "code": "string cur = b [ i ] ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "assign - 1 to integer start",
      "code": "int start = - 1 ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "let end be an int of value - 1",
      "code": "int end = - 1 ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "set flag to 0",
      "code": "int flag = 0 ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "set counta and countb to 0",
      "code": "counta = countb = 0 ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "for j = 0 to the size of s ( exclusive )",
      "code": "for ( int j = 0 ; j < s . size ( ) ; j ++ )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if s [ j ] is cur [ 0 ] or s [ j ] is cur [ 1 ]",
      "code": "if ( s [ j ] == cur [ 0 ] || s [ j ] == cur [ 1 ] )",
      "indent": 3
    },
    {
      "line": 22,
      "text": "if flag is not true",
      "code": "if ( ! flag )",
      "indent": 4
    },
    {
      "line": 23,
      "text": "assign 1 to flag",
      "code": "flag = 1 ;",
      "indent": 5
    },
    {
      "line": 24,
      "text": "set start to i",
      "code": "start = i ;",
      "indent": 5
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 26,
      "text": "assign i to end",
      "code": "end = i ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "if s [ j ] is cur [ 0 ]",
      "code": "if ( s [ j ] == cur [ 0 ] )",
      "indent": 4
    },
    {
      "line": 28,
      "text": "add 1 to counta",
      "code": "counta ++ ;",
      "indent": 5
    },
    {
      "line": 29,
      "text": "else do the following",
      "code": "else",
      "indent": 4
    },
    {
      "line": 30,
      "text": "add 1 to count b",
      "code": "countb ++ ;",
      "indent": 5
    },
    {
      "line": 31,
      "text": "else do the following",
      "code": "else",
      "indent": 3
    },
    {
      "line": 32,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 4
    },
    {
      "line": 33,
      "text": "increment count by the min of counta and countb",
      "code": "count += min ( counta , countb ) ;",
      "indent": 4
    },
    {
      "line": 34,
      "text": "assign 0 to counta and countb",
      "code": "counta = countb = 0 ;",
      "indent": 4
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 37,
      "text": "increment count by the min of counta and countb",
      "code": "count += min ( counta , countb ) ;",
      "indent": 2
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 39,
      "text": "print count",
      "code": "cout << count << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "counta = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "‘counta’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "countb = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "‘countb’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "int end [ 1 ] ;"
      ],
      "err_line": 26,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [1]’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "flag = 0 ;"
      ],
      "err_line": 18,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int n ;"
      ],
      "err_line": 8,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 3 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 26 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 20,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "string b = 14 ;"
      ],
      "err_line": 9,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int count = 0 , count = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "redeclaration of ‘int count’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( i = 0 ; i < k ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "string * cur = b [ i ] ;"
      ],
      "err_line": 15,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "start = - 1 ;"
      ],
      "err_line": 16,
      "err_msg": "‘start’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 20,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "if ( s [ j ] == cur )"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "b ++ ;"
      ],
      "err_line": 30,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "counta = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        12,
        13
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "counta = 0 ;",
        "countb = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        12,
        13,
        17
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "counta = 0 ;",
        "countb = 0 ;",
        "int end [ 1 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        12,
        13,
        18
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "counta = 0 ;",
        "countb = 0 ;",
        "flag = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        12,
        13,
        30
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "counta = 0 ;",
        "countb = 0 ;",
        "count ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        12,
        17
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "counta = 0 ;",
        "int end [ 1 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        12,
        17,
        18
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "counta = 0 ;",
        "int end [ 1 ] ;",
        "flag = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        12,
        17,
        30
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "counta = 0 ;",
        "int end [ 1 ] ;",
        "count ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        12,
        18
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "counta = 0 ;",
        "flag = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        12,
        18,
        30
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "counta = 0 ;",
        "flag = 0 ;",
        "count ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        12,
        30
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "counta = 0 ;",
        "count ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "countb = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        13,
        17
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "countb = 0 ;",
        "int end [ 1 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        13,
        17,
        18
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "countb = 0 ;",
        "int end [ 1 ] ;",
        "flag = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        13,
        17,
        30
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "countb = 0 ;",
        "int end [ 1 ] ;",
        "count ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        13,
        18
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "countb = 0 ;",
        "flag = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        13,
        18,
        30
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "countb = 0 ;",
        "flag = 0 ;",
        "count ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        13,
        30
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "countb = 0 ;",
        "count ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        17
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "int end [ 1 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        17,
        18
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "int end [ 1 ] ;",
        "flag = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        17,
        18,
        30
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "int end [ 1 ] ;",
        "flag = 0 ;",
        "count ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        17,
        30
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "int end [ 1 ] ;",
        "count ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        18
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "flag = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        18,
        30
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "flag = 0 ;",
        "count ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        3,
        30
      ],
      "mod_code": [
        "int a [ 27x27 ] [ 5 ] ;",
        "count ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid suffix \"x27\" on integer constant"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "counta = 0 ;",
        "countb = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "‘counta’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        17
      ],
      "mod_code": [
        "counta = 0 ;",
        "countb = 0 ;",
        "int end [ 1 ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘counta’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        17,
        18
      ],
      "mod_code": [
        "counta = 0 ;",
        "countb = 0 ;",
        "int end [ 1 ] ;",
        "flag = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "‘counta’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        17,
        30
      ],
      "mod_code": [
        "counta = 0 ;",
        "countb = 0 ;",
        "int end [ 1 ] ;",
        "count ++ ;"
      ],
      "err_line": 12,
      "err_msg": "‘counta’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        18
      ],
      "mod_code": [
        "counta = 0 ;",
        "countb = 0 ;",
        "flag = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "‘counta’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        18,
        30
      ],
      "mod_code": [
        "counta = 0 ;",
        "countb = 0 ;",
        "flag = 0 ;",
        "count ++ ;"
      ],
      "err_line": 12,
      "err_msg": "‘counta’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        30
      ],
      "mod_code": [
        "counta = 0 ;",
        "countb = 0 ;",
        "count ++ ;"
      ],
      "err_line": 12,
      "err_msg": "‘counta’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        17
      ],
      "mod_code": [
        "counta = 0 ;",
        "int end [ 1 ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘counta’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        17,
        18
      ],
      "mod_code": [
        "counta = 0 ;",
        "int end [ 1 ] ;",
        "flag = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "‘counta’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        17,
        18,
        30
      ],
      "mod_code": [
        "counta = 0 ;",
        "int end [ 1 ] ;",
        "flag = 0 ;",
        "count ++ ;"
      ],
      "err_line": 12,
      "err_msg": "‘counta’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        17,
        30
      ],
      "mod_code": [
        "counta = 0 ;",
        "int end [ 1 ] ;",
        "count ++ ;"
      ],
      "err_line": 12,
      "err_msg": "‘counta’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        18
      ],
      "mod_code": [
        "counta = 0 ;",
        "flag = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "‘counta’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        18,
        30
      ],
      "mod_code": [
        "counta = 0 ;",
        "flag = 0 ;",
        "count ++ ;"
      ],
      "err_line": 12,
      "err_msg": "‘counta’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        30
      ],
      "mod_code": [
        "counta = 0 ;",
        "count ++ ;"
      ],
      "err_line": 12,
      "err_msg": "‘counta’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        17
      ],
      "mod_code": [
        "countb = 0 ;",
        "int end [ 1 ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘countb’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        17,
        18
      ],
      "mod_code": [
        "countb = 0 ;",
        "int end [ 1 ] ;",
        "flag = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "‘countb’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        17,
        18,
        30
      ],
      "mod_code": [
        "countb = 0 ;",
        "int end [ 1 ] ;",
        "flag = 0 ;",
        "count ++ ;"
      ],
      "err_line": 13,
      "err_msg": "‘countb’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        17,
        30
      ],
      "mod_code": [
        "countb = 0 ;",
        "int end [ 1 ] ;",
        "count ++ ;"
      ],
      "err_line": 13,
      "err_msg": "‘countb’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        18
      ],
      "mod_code": [
        "countb = 0 ;",
        "flag = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "‘countb’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        18,
        30
      ],
      "mod_code": [
        "countb = 0 ;",
        "flag = 0 ;",
        "count ++ ;"
      ],
      "err_line": 13,
      "err_msg": "‘countb’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        30
      ],
      "mod_code": [
        "countb = 0 ;",
        "count ++ ;"
      ],
      "err_line": 13,
      "err_msg": "‘countb’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        18
      ],
      "mod_code": [
        "int end [ 1 ] ;",
        "flag = 0 ;"
      ],
      "err_line": 18,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        18,
        30
      ],
      "mod_code": [
        "int end [ 1 ] ;",
        "flag = 0 ;",
        "count ++ ;"
      ],
      "err_line": 18,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        30
      ],
      "mod_code": [
        "int end [ 1 ] ;",
        "count ++ ;"
      ],
      "err_line": 26,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [1]’"
    },
    {
      "mod_line": [
        18,
        30
      ],
      "mod_code": [
        "flag = 0 ;",
        "count ++ ;"
      ],
      "err_line": 18,
      "err_msg": "‘flag’ was not declared in this scope"
    }
  ]
}