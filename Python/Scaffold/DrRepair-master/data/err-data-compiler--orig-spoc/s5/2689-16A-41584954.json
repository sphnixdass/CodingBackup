{
  "meta": {
    "index": 2689,
    "hitid": "3BCRDCM0ODO226SXXM5BJDC2B266KB",
    "workerid": "AIWEXPJAU66D9",
    "probid": "16A",
    "subid": "41584954"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , m , l and k be integers with l and k = 0",
      "code": "int n , m , l = 0 , k = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare array of strings s with size n",
      "code": "string s [ n ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "a = string",
      "code": "string a ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for j = 0 to m - 1 exclusive",
      "code": "for ( int j = 0 ; j < m - 1 ; j ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if a [ j ] ! = a [ j + 1 ] , assign 1 to l",
      "code": "if ( a [ j ] != a [ j + 1 ] ) { l = 1 ; }",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "s [ i ] = a",
      "code": "s [ i ] = a ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if l is equal to 1",
      "code": "if ( l == 1 )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for j = 0 to n - 1 exclusive",
      "code": "for ( int j = 0 ; j < n - 1 ; j ++ )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if s [ j ] is equal to s [ j + 1 ] , assign 1 to k",
      "code": "if ( s [ j ] == s [ j + 1 ] ) { k = 1 ; }",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if k is equal to 1",
      "code": "if ( k == 1 )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 21,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string s [ n n ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "char a ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( j = 0 ; j < m - 1 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( j = 0 ; j < n - 1 ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        18,
        10,
        3
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "if ( k == ' 1 ' )",
        "s [ i ] = ' a ' ;",
        "string s [ n n ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        21,
        18,
        2,
        3
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "if ( k == ' 1 ' )",
        "cin >> m >> m ;",
        "string s [ n n ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        21,
        18,
        3
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "if ( k == ' 1 ' )",
        "string s [ n n ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        21,
        18,
        3,
        1
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "if ( k == ' 1 ' )",
        "string s [ n n ] ;",
        "int n , m , l = 0 , k ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        21,
        10,
        2,
        3
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "s [ i ] = ' a ' ;",
        "cin >> m >> m ;",
        "string s [ n n ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        21,
        10,
        3
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "s [ i ] = ' a ' ;",
        "string s [ n n ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        21,
        10,
        3,
        1
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "s [ i ] = ' a ' ;",
        "string s [ n n ] ;",
        "int n , m , l = 0 , k ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        21,
        2,
        3
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "cin >> m >> m ;",
        "string s [ n n ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        21,
        2,
        3,
        1
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "cin >> m >> m ;",
        "string s [ n n ] ;",
        "int n , m , l = 0 , k ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        21,
        3
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "string s [ n n ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        21,
        3,
        1
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "string s [ n n ] ;",
        "int n , m , l = 0 , k ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        18,
        10,
        2,
        3
      ],
      "mod_code": [
        "if ( k == ' 1 ' )",
        "s [ i ] = ' a ' ;",
        "cin >> m >> m ;",
        "string s [ n n ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        18,
        10,
        3
      ],
      "mod_code": [
        "if ( k == ' 1 ' )",
        "s [ i ] = ' a ' ;",
        "string s [ n n ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        18,
        10,
        3,
        1
      ],
      "mod_code": [
        "if ( k == ' 1 ' )",
        "s [ i ] = ' a ' ;",
        "string s [ n n ] ;",
        "int n , m , l = 0 , k ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        18,
        2,
        3
      ],
      "mod_code": [
        "if ( k == ' 1 ' )",
        "cin >> m >> m ;",
        "string s [ n n ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        18,
        2,
        3,
        1
      ],
      "mod_code": [
        "if ( k == ' 1 ' )",
        "cin >> m >> m ;",
        "string s [ n n ] ;",
        "int n , m , l = 0 , k ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        18,
        3
      ],
      "mod_code": [
        "if ( k == ' 1 ' )",
        "string s [ n n ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        18,
        3,
        1
      ],
      "mod_code": [
        "if ( k == ' 1 ' )",
        "string s [ n n ] ;",
        "int n , m , l = 0 , k ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        10,
        2,
        3
      ],
      "mod_code": [
        "s [ i ] = ' a ' ;",
        "cin >> m >> m ;",
        "string s [ n n ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        10,
        2,
        3,
        1
      ],
      "mod_code": [
        "s [ i ] = ' a ' ;",
        "cin >> m >> m ;",
        "string s [ n n ] ;",
        "int n , m , l = 0 , k ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "s [ i ] = ' a ' ;",
        "string s [ n n ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        10,
        3,
        1
      ],
      "mod_code": [
        "s [ i ] = ' a ' ;",
        "string s [ n n ] ;",
        "int n , m , l = 0 , k ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "string s [ n n ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        2,
        3,
        1
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "string s [ n n ] ;",
        "int n , m , l = 0 , k ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "string s [ n n ] ;",
        "int n , m , l = 0 , k ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘]’ before ‘n’"
    }
  ]
}