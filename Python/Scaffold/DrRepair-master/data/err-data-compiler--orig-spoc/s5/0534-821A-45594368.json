{
  "meta": {
    "index": 534,
    "hitid": "3XH7ZM9YX2OB7T7QLDHK4ZPIXXOR9L",
    "workerid": "AIWEXPJAU66D9",
    "probid": "821A",
    "subid": "45594368"
  },
  "lines": [
    {
      "line": 0,
      "text": "define new integer called n",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create new 2d array of integers arr 52 by 52",
      "code": "int arr [ 52 ] [ 52 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "function check with int arguments x , y and val that returns boolean",
      "code": "bool check ( int x , int y , int val )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for j from 1 to n inclusive",
      "code": "for ( int j = 1 ; j <= n ; j ++ )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if arr [ x ] [ i ] + arr [ j ] [ y ] = val , return true",
      "code": "if ( arr [ x ] [ i ] + arr [ j ] [ y ] == val ) return true ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return false",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 11,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "arr [ n + 1 ] [ n + 1 ]",
      "code": "arr [ n + 1 ] [ n + 1 ] ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "declare new integer variable cnt1 = 0",
      "code": "int cnt1 = 0 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 1 to n inclusive incrementing i",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "in a for loop , change j from 1 to n inclusive incrementing j",
      "code": "for ( int j = 1 ; j <= n ; j ++ )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "read input to arr [ i ] [ j ]",
      "code": "cin >> arr [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "increment cnt1 by one if arr [ i ] [ j ] is equal to 1",
      "code": "if ( arr [ i ] [ j ] == 1 ) cnt1 ++ ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "define integer variable ans with value 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "start for loop from i = 1 to n inclusive incrementing i",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "in a for loop , change j from 1 to n inclusive by steps of 1",
      "code": "for ( int j = 1 ; j <= n ; j ++ )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if arr [ i ] [ j ] ! = 1",
      "code": "if ( arr [ i ] [ j ] != 1 )",
      "indent": 3
    },
    {
      "line": 24,
      "text": "declare new integer variable val with value arr [ i ] [ j ]",
      "code": "int val = arr [ i ] [ j ] ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "if check ( i , j , val ) is true , increment ans",
      "code": "if ( check ( i , j , val ) ) ans ++ ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "if cnt1 + ans is equal to n squared",
      "code": "if ( cnt1 + ans == n * n )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print \" Yes \" to the standard output",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 32,
      "text": "print \" No \"",
      "code": "cout << \" No \" << endl ;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "bool check ( int x , int y , int val ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "{ cin >> arr [ i ] [ j ] ;"
      ],
      "err_line": 34,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "int val declare arr [ i ] [ j ] ;"
      ],
      "err_line": 24,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        15,
        1
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "char arr [ 52 ] [ 52 ] ;"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        1,
        24
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "char arr [ 52 ] [ 52 ] ;",
        "int val declare arr [ i ] [ j ] ;"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        1,
        24,
        2
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "char arr [ 52 ] [ 52 ] ;",
        "int val declare arr [ i ] [ j ] ;",
        "bool check ( int x , int y , int val ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        1,
        24,
        5
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "char arr [ 52 ] [ 52 ] ;",
        "int val declare arr [ i ] [ j ] ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        15,
        1,
        24,
        4
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "char arr [ 52 ] [ 52 ] ;",
        "int val declare arr [ i ] [ j ] ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        1,
        2
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "char arr [ 52 ] [ 52 ] ;",
        "bool check ( int x , int y , int val ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        1,
        2,
        5
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "char arr [ 52 ] [ 52 ] ;",
        "bool check ( int x , int y , int val ) ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        1,
        2,
        4
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "char arr [ 52 ] [ 52 ] ;",
        "bool check ( int x , int y , int val ) ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        1,
        5
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "char arr [ 52 ] [ 52 ] ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        15,
        1,
        5,
        4
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "char arr [ 52 ] [ 52 ] ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        1,
        4
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "char arr [ 52 ] [ 52 ] ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        24
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "int val declare arr [ i ] [ j ] ;"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        24,
        2
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "int val declare arr [ i ] [ j ] ;",
        "bool check ( int x , int y , int val ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        24,
        2,
        5
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "int val declare arr [ i ] [ j ] ;",
        "bool check ( int x , int y , int val ) ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        24,
        2,
        4
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "int val declare arr [ i ] [ j ] ;",
        "bool check ( int x , int y , int val ) ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        24,
        5
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "int val declare arr [ i ] [ j ] ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        15,
        24,
        5,
        4
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "int val declare arr [ i ] [ j ] ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        24,
        4
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "int val declare arr [ i ] [ j ] ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        2
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "bool check ( int x , int y , int val ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        2,
        5
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "bool check ( int x , int y , int val ) ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        2,
        5,
        4
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "bool check ( int x , int y , int val ) ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        2,
        4
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "bool check ( int x , int y , int val ) ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        5
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        15,
        5,
        4
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        4
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        24
      ],
      "mod_code": [
        "char arr [ 52 ] [ 52 ] ;",
        "int val declare arr [ i ] [ j ] ;"
      ],
      "err_line": 24,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        24,
        2
      ],
      "mod_code": [
        "char arr [ 52 ] [ 52 ] ;",
        "int val declare arr [ i ] [ j ] ;",
        "bool check ( int x , int y , int val ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        24,
        2,
        5
      ],
      "mod_code": [
        "char arr [ 52 ] [ 52 ] ;",
        "int val declare arr [ i ] [ j ] ;",
        "bool check ( int x , int y , int val ) ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        24,
        2,
        4
      ],
      "mod_code": [
        "char arr [ 52 ] [ 52 ] ;",
        "int val declare arr [ i ] [ j ] ;",
        "bool check ( int x , int y , int val ) ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        24,
        5
      ],
      "mod_code": [
        "char arr [ 52 ] [ 52 ] ;",
        "int val declare arr [ i ] [ j ] ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        24,
        5,
        4
      ],
      "mod_code": [
        "char arr [ 52 ] [ 52 ] ;",
        "int val declare arr [ i ] [ j ] ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        24,
        4
      ],
      "mod_code": [
        "char arr [ 52 ] [ 52 ] ;",
        "int val declare arr [ i ] [ j ] ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "char arr [ 52 ] [ 52 ] ;",
        "bool check ( int x , int y , int val ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "char arr [ 52 ] [ 52 ] ;",
        "bool check ( int x , int y , int val ) ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        4
      ],
      "mod_code": [
        "char arr [ 52 ] [ 52 ] ;",
        "bool check ( int x , int y , int val ) ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        4
      ],
      "mod_code": [
        "char arr [ 52 ] [ 52 ] ;",
        "bool check ( int x , int y , int val ) ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "char arr [ 52 ] [ 52 ] ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        5,
        4
      ],
      "mod_code": [
        "char arr [ 52 ] [ 52 ] ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "char arr [ 52 ] [ 52 ] ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        2
      ],
      "mod_code": [
        "int val declare arr [ i ] [ j ] ;",
        "bool check ( int x , int y , int val ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        24,
        2,
        5
      ],
      "mod_code": [
        "int val declare arr [ i ] [ j ] ;",
        "bool check ( int x , int y , int val ) ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        24,
        2,
        5,
        4
      ],
      "mod_code": [
        "int val declare arr [ i ] [ j ] ;",
        "bool check ( int x , int y , int val ) ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        24,
        2,
        4
      ],
      "mod_code": [
        "int val declare arr [ i ] [ j ] ;",
        "bool check ( int x , int y , int val ) ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        24,
        5
      ],
      "mod_code": [
        "int val declare arr [ i ] [ j ] ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        24,
        5,
        4
      ],
      "mod_code": [
        "int val declare arr [ i ] [ j ] ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        4
      ],
      "mod_code": [
        "int val declare arr [ i ] [ j ] ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "bool check ( int x , int y , int val ) ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        5,
        4
      ],
      "mod_code": [
        "bool check ( int x , int y , int val ) ;",
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "bool check ( int x , int y , int val ) ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "if ( arr [ x ] [ i ] + arr [ j ] [ y ] = val ) return true ;",
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘j’ was not declared in this scope"
    }
  ]
}