{
  "meta": {
    "index": 92,
    "hitid": "3KL228NDMVG4ZZH39ZEXV4PR5VPGKX",
    "workerid": "AIWEXPJAU66D9",
    "probid": "748A",
    "subid": "41751740"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant integer mod = 1e9 + 7",
      "code": "const int mod = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare integers n , m and k",
      "code": "int n , m , k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n , m and k",
      "code": "cin >> n >> m >> k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integer pl = k / 2 + ( k modulo 2 casted to bool )",
      "code": "int pl = k / 2 + bool ( k % 2 ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare integer variables ln and dsk",
      "code": "int ln , dsk ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "declare character variable ans",
      "code": "char ans ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "ln = pl / m + ( pl modulo m casted to bool )",
      "code": "ln = pl / m + bool ( pl % m ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "dsk = pl modulo m",
      "code": "dsk = pl % m ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if dsk = 0",
      "code": "if ( dsk == 0 ) dsk = m ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if k is even",
      "code": "if ( k % 2 == 0 )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "ans = ' R '",
      "code": "ans = ' R ' ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "ans = ' L '",
      "code": "ans = ' L ' ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print ln , \" \" , dsk , \" \" and ans",
      "code": "cout << ln << \" \" << dsk << \" \" << ans << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int * pl = k / 2 + ( k % 2 ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "char ans [ 8 ] [ 8 ] ;"
      ],
      "err_line": 11,
      "err_msg": "incompatible types in assignment of ‘char’ to ‘char [8][8]’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int ln = pl / m + ( pl % m ) ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int ln’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int dsk = pl % m ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int dsk’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( dsk == 0 ) continue ;"
      ],
      "err_line": 9,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘char’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        9,
        4
      ],
      "mod_code": [
        "ln = pl / m + ( pl % m ) ;",
        "if ( dsk == 0 )",
        "int * pl = k / 2 + ( k % 2 ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        4,
        3
      ],
      "mod_code": [
        "ln = pl / m + ( pl % m ) ;",
        "if ( dsk == 0 )",
        "int * pl = k / 2 + ( k % 2 ) ;",
        "cin >> n >> m >> n ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        4,
        11
      ],
      "mod_code": [
        "ln = pl / m + ( pl % m ) ;",
        "if ( dsk == 0 )",
        "int * pl = k / 2 + ( k % 2 ) ;",
        "char ans = ' R ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        4,
        14
      ],
      "mod_code": [
        "ln = pl / m + ( pl % m ) ;",
        "if ( dsk == 0 )",
        "int * pl = k / 2 + ( k % 2 ) ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        3,
        14
      ],
      "mod_code": [
        "ln = pl / m + ( pl % m ) ;",
        "if ( dsk == 0 )",
        "cin >> n >> m >> n ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘char’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        9,
        11,
        14
      ],
      "mod_code": [
        "ln = pl / m + ( pl % m ) ;",
        "if ( dsk == 0 )",
        "char ans = ' R ' ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘char’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        9,
        14
      ],
      "mod_code": [
        "ln = pl / m + ( pl % m ) ;",
        "if ( dsk == 0 )",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘char’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "ln = pl / m + ( pl % m ) ;",
        "int * pl = k / 2 + ( k % 2 ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        4,
        3
      ],
      "mod_code": [
        "ln = pl / m + ( pl % m ) ;",
        "int * pl = k / 2 + ( k % 2 ) ;",
        "cin >> n >> m >> n ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        4,
        3,
        11
      ],
      "mod_code": [
        "ln = pl / m + ( pl % m ) ;",
        "int * pl = k / 2 + ( k % 2 ) ;",
        "cin >> n >> m >> n ;",
        "char ans = ' R ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        4,
        3,
        14
      ],
      "mod_code": [
        "ln = pl / m + ( pl % m ) ;",
        "int * pl = k / 2 + ( k % 2 ) ;",
        "cin >> n >> m >> n ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        4,
        11
      ],
      "mod_code": [
        "ln = pl / m + ( pl % m ) ;",
        "int * pl = k / 2 + ( k % 2 ) ;",
        "char ans = ' R ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        4,
        11,
        14
      ],
      "mod_code": [
        "ln = pl / m + ( pl % m ) ;",
        "int * pl = k / 2 + ( k % 2 ) ;",
        "char ans = ' R ' ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        4,
        14
      ],
      "mod_code": [
        "ln = pl / m + ( pl % m ) ;",
        "int * pl = k / 2 + ( k % 2 ) ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        3,
        11,
        14
      ],
      "mod_code": [
        "ln = pl / m + ( pl % m ) ;",
        "cin >> n >> m >> n ;",
        "char ans = ' R ' ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘char’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        3,
        14
      ],
      "mod_code": [
        "ln = pl / m + ( pl % m ) ;",
        "cin >> n >> m >> n ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘char’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        11,
        14
      ],
      "mod_code": [
        "ln = pl / m + ( pl % m ) ;",
        "char ans = ' R ' ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘char’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        14
      ],
      "mod_code": [
        "ln = pl / m + ( pl % m ) ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘char’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "if ( dsk == 0 )",
        "int * pl = k / 2 + ( k % 2 ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        4,
        3
      ],
      "mod_code": [
        "if ( dsk == 0 )",
        "int * pl = k / 2 + ( k % 2 ) ;",
        "cin >> n >> m >> n ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        4,
        3,
        11
      ],
      "mod_code": [
        "if ( dsk == 0 )",
        "int * pl = k / 2 + ( k % 2 ) ;",
        "cin >> n >> m >> n ;",
        "char ans = ' R ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        4,
        3,
        14
      ],
      "mod_code": [
        "if ( dsk == 0 )",
        "int * pl = k / 2 + ( k % 2 ) ;",
        "cin >> n >> m >> n ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        4,
        11
      ],
      "mod_code": [
        "if ( dsk == 0 )",
        "int * pl = k / 2 + ( k % 2 ) ;",
        "char ans = ' R ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        4,
        11,
        14
      ],
      "mod_code": [
        "if ( dsk == 0 )",
        "int * pl = k / 2 + ( k % 2 ) ;",
        "char ans = ' R ' ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        4,
        14
      ],
      "mod_code": [
        "if ( dsk == 0 )",
        "int * pl = k / 2 + ( k % 2 ) ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        3,
        11,
        14
      ],
      "mod_code": [
        "if ( dsk == 0 )",
        "cin >> n >> m >> n ;",
        "char ans = ' R ' ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘char’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        3,
        14
      ],
      "mod_code": [
        "if ( dsk == 0 )",
        "cin >> n >> m >> n ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘char’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        11,
        14
      ],
      "mod_code": [
        "if ( dsk == 0 )",
        "char ans = ' R ' ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘char’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "if ( dsk == 0 )",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘char’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "int * pl = k / 2 + ( k % 2 ) ;",
        "cin >> n >> m >> n ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        3,
        11
      ],
      "mod_code": [
        "int * pl = k / 2 + ( k % 2 ) ;",
        "cin >> n >> m >> n ;",
        "char ans = ' R ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        3,
        11,
        14
      ],
      "mod_code": [
        "int * pl = k / 2 + ( k % 2 ) ;",
        "cin >> n >> m >> n ;",
        "char ans = ' R ' ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        3,
        14
      ],
      "mod_code": [
        "int * pl = k / 2 + ( k % 2 ) ;",
        "cin >> n >> m >> n ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "int * pl = k / 2 + ( k % 2 ) ;",
        "char ans = ' R ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        11,
        14
      ],
      "mod_code": [
        "int * pl = k / 2 + ( k % 2 ) ;",
        "char ans = ' R ' ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "int * pl = k / 2 + ( k % 2 ) ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        11,
        14
      ],
      "mod_code": [
        "cin >> n >> m >> n ;",
        "char ans = ' R ' ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘char’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "cin >> n >> m >> n ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘char’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "char ans = ' R ' ;",
        "cout << ln << \" \" << dsk , \" \" << ans << endl ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘const char [2]’ and ‘char’ to binary ‘operator<<’"
    }
  ]
}