{
  "meta": {
    "index": 887,
    "hitid": "3GKAWYFRAPN2Y64SK1IXL08TN07PD0",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "252A",
    "subid": "46897480"
  },
  "lines": [
    {
      "line": 0,
      "text": "maxn = const integer with maxn = 1e5 + 10",
      "code": "const int maxn = 1e5 + 10 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "mod = const integer with mod = 1e9 + 7",
      "code": "const int mod = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "maxl = const integer with maxl = 30 + 1",
      "code": "const int maxl = 30 + 1 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "a = integer array of size maxn",
      "code": "int a [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "rc , lc = integer arrays of size maxn * maxl",
      "code": "int rc [ maxn * maxl ] , lc [ maxn * maxl ] ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "newint = integer with newint = 2",
      "code": "int newint = 2 ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "in the function add that takes integer x",
      "code": "void add ( int x )",
      "indent": 0
    },
    {
      "line": 7,
      "text": "cur = integer with cur = 1",
      "code": "int cur = 1 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 29 down to 0",
      "code": "for ( int i = 29 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if x bitwise and ( left shift i 1 place )",
      "code": "if ( x & ( 1 << i ) )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if rc [ cur ] is 0 , rc [ cur ] = increment newint",
      "code": "if ( rc [ cur ] == 0 ) rc [ cur ] = newint ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "cur = rc [ cur ]",
      "code": "cur = rc [ cur ] ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if ( lc [ cur ] = = 0 ) , lc [ cur ] = increment newint",
      "code": "if ( lc [ cur ] == 0 ) lc [ cur ] = newint ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "cur = lc [ cur ]",
      "code": "cur = lc [ cur ] ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 18,
      "text": "in the function get that takes integer x and returns integer",
      "code": "int get ( int x )",
      "indent": 0
    },
    {
      "line": 19,
      "text": "cur , ret = integer with cur = 1 , ret = 0",
      "code": "int cur = 1 , ret = 0 ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "for i = 29 down to 0",
      "code": "for ( int i = 29 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if x bitwise and ( left shift i 1 place ) )",
      "code": "if ( x & ( 1 << i ) )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if lc [ cur ] is not 0",
      "code": "if ( lc [ cur ] != 0 )",
      "indent": 3
    },
    {
      "line": 23,
      "text": "cur = lc [ cur ]",
      "code": "cur = lc [ cur ] ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "ret = ret + ( 1 < < i )",
      "code": "ret += ( 1 << i ) ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 26,
      "text": "cur = rc [ cur ]",
      "code": "cur = rc [ cur ] ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 28,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 29,
      "text": "if rc [ cur ] is not 0",
      "code": "if ( rc [ cur ] != 0 )",
      "indent": 3
    },
    {
      "line": 30,
      "text": "cur = rc [ cur ]",
      "code": "cur = rc [ cur ] ;",
      "indent": 4
    },
    {
      "line": 31,
      "text": "ret = ret + ( left shift i 1 place )",
      "code": "ret += ( 1 << i ) ;",
      "indent": 4
    },
    {
      "line": 32,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 33,
      "text": "cur = lc [ cur ]",
      "code": "cur = lc [ cur ] ;",
      "indent": 4
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 37,
      "text": "return ret",
      "code": "return ret ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 40,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 41,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 42,
      "text": "ans , pre = integers with ans = 0 , pre = 0",
      "code": "int ans = 0 , pre = 0 ;",
      "indent": 1
    },
    {
      "line": 43,
      "text": "add 0",
      "code": "add ( 0 ) ;",
      "indent": 1
    },
    {
      "line": 44,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 45,
      "text": "a = integer",
      "code": "int a ;",
      "indent": 2
    },
    {
      "line": 46,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 2
    },
    {
      "line": 47,
      "text": "pre = pre bitwise XOR a",
      "code": "pre ^= a ;",
      "indent": 2
    },
    {
      "line": 48,
      "text": "ans = max of ans and get ( pre )",
      "code": "ans = max ( ans , get ( pre ) ) ;",
      "indent": 2
    },
    {
      "line": 49,
      "text": "call add on pre",
      "code": "add ( pre ) ;",
      "indent": 2
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 51,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 52,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int a [ 2 ] ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "const mod = 1e9 + 7 ;"
      ],
      "err_line": 1,
      "err_msg": "‘mod’ does not name a type"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int maxl = 30 + 1 ;"
      ],
      "err_line": 4,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int [ 2 ] = { } ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘[’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 29 ; i >= 0 ; i -- )"
      ],
      "err_line": 8,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( lc [ cur ] == 0 ) lc [ cur ] = cin [ cur ] ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "long long get ( int x )"
      ],
      "err_line": 48,
      "err_msg": "no matching function for call to ‘max(int&, long long int)’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "for ( i = 29 ; i >= 0 ; i -- )"
      ],
      "err_line": 20,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "while ( ret )"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 47,
      "err_msg": "‘pre’ was not declared in this scope"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "long long ans = 0 , pre = 0 ;"
      ],
      "err_line": 48,
      "err_msg": "no matching function for call to ‘max(long long int&, int)’"
    },
    {
      "mod_line": [
        44
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 44,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        48
      ],
      "mod_code": [
        "ans = max ( ans ) , get ( pre ) ;"
      ],
      "err_line": 48,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        49
      ],
      "mod_code": [
        "pre . add ( ) ;"
      ],
      "err_line": 49,
      "err_msg": "request for member ‘add’ in ‘pre’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        5,
        9
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        5,
        9,
        10
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        5,
        9,
        13
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        5,
        9,
        21
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( x & ( i << 1 ) )"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        5,
        9,
        31
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        5,
        9,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        5,
        10
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        5,
        10,
        13
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        5,
        10,
        21
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "if ( x & ( i << 1 ) )"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        5,
        10,
        31
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        5,
        10,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        5,
        13
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        5,
        13,
        21
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "if ( x & ( i << 1 ) )"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        5,
        13,
        31
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        5,
        13,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        5,
        21
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        5,
        21,
        31
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        5,
        21,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        5,
        31
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        5,
        31,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;",
        "ret += ( i << 1 ) ;",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        5,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "int a [ 2 ] ;",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( x & ( i << 1 ) )"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        9,
        10
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        9,
        10,
        13
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        9,
        10,
        21
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "if ( x & ( i << 1 ) )"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        9,
        10,
        31
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        9,
        10,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        9,
        13
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        9,
        13,
        21
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "if ( x & ( i << 1 ) )"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        9,
        13,
        31
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        9,
        13,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        9,
        21
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( x & ( i << 1 ) )"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        9,
        21,
        31
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( x & ( i << 1 ) )",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        9,
        21,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( x & ( i << 1 ) )",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        9,
        31
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( x & ( i << 1 ) )",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        9,
        31,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( x & ( i << 1 ) )",
        "ret += ( i << 1 ) ;",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        9,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( x & ( i << 1 ) )",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        10,
        13
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        10,
        13,
        21
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "if ( x & ( i << 1 ) )"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        10,
        13,
        31
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        10,
        13,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        10,
        21
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "if ( x & ( i << 1 ) )"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        10,
        21,
        31
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "if ( x & ( i << 1 ) )",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        10,
        21,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "if ( x & ( i << 1 ) )",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        10,
        31
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        10,
        31,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "ret += ( i << 1 ) ;",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        10,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        13,
        21
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "if ( x & ( i << 1 ) )"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        13,
        21,
        31
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "if ( x & ( i << 1 ) )",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        13,
        21,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "if ( x & ( i << 1 ) )",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        13,
        31
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        13,
        31,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "ret += ( i << 1 ) ;",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        13,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        21
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( x & ( i << 1 ) )"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        21,
        31
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( x & ( i << 1 ) )",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        21,
        31,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( x & ( i << 1 ) )",
        "ret += ( i << 1 ) ;",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        21,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "if ( x & ( i << 1 ) )",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        31
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        31,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "ret += ( i << 1 ) ;",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        4,
        47
      ],
      "mod_code": [
        "int rc [ maxn * maxn ] , lc [ maxn ] ;",
        "pre *= a ;"
      ],
      "err_line": 4,
      "err_msg": "overflow in constant expression"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        9,
        10
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        13
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        21
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "if ( x & ( i << 1 ) )"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        31
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        47
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "pre *= a ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        9,
        13
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        9,
        13,
        21
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "if ( x & ( i << 1 ) )"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        9,
        13,
        31
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        9,
        13,
        47
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "pre *= a ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        9,
        21
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( x & ( i << 1 ) )"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        9,
        21,
        31
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( x & ( i << 1 ) )",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        9,
        21,
        47
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "if ( x & ( i << 1 ) )",
        "pre *= a ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        9,
        31
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        9,
        31,
        47
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "ret += ( i << 1 ) ;",
        "pre *= a ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        9,
        47
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "pre *= a ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        10,
        13
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        10,
        13,
        21
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "if ( x & ( i << 1 ) )"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        10,
        13,
        31
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        10,
        13,
        47
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "pre *= a ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        10,
        21
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "if ( x & ( i << 1 ) )"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        10,
        21,
        31
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "if ( x & ( i << 1 ) )",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        10,
        21,
        47
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "if ( x & ( i << 1 ) )",
        "pre *= a ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        10,
        31
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        10,
        31,
        47
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "ret += ( i << 1 ) ;",
        "pre *= a ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        10,
        47
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( rc [ cur ] == 0 ) rc [ cur ] = 1 ;",
        "pre *= a ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        13,
        21
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "if ( x & ( i << 1 ) )"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        13,
        21,
        31
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "if ( x & ( i << 1 ) )",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        13,
        21,
        47
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "if ( x & ( i << 1 ) )",
        "pre *= a ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        13,
        31
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        13,
        31,
        47
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "ret += ( i << 1 ) ;",
        "pre *= a ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        13,
        47
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( lc [ cur ] == 0 ) lc [ cur ] = ++ cur ;",
        "pre *= a ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        21
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        21,
        31
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        21,
        31,
        47
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "ret += ( i << 1 ) ;",
        "pre *= a ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        21,
        47
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "if ( x & ( i << 1 ) )",
        "pre *= a ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        31
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "ret += ( i << 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        31,
        47
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "ret += ( i << 1 ) ;",
        "pre *= a ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    },
    {
      "mod_line": [
        5,
        47
      ],
      "mod_code": [
        "int a [ 2 ] ;",
        "pre *= a ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘int a [2]’"
    }
  ]
}