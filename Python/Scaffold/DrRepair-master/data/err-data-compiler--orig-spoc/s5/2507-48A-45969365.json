{
  "meta": {
    "index": 2507,
    "hitid": "3OEWW2KGQJ5KD6SR515IW033DVJODQ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "48A",
    "subid": "45969365"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare strings a , b and c",
      "code": "string a , b , c ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "cmp is a integer function with string arguments a and b",
      "code": "int cmp ( string a , string b )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "if a = b , return 0",
      "code": "if ( a == b ) return 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if a is equal to \" rock \" and b = \" scissors \" , return 1",
      "code": "if ( a == \" rock \" and b == \" scissors \" ) return 1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return - 1 if a is equal to \" rock \" and b = \" paper \"",
      "code": "if ( a == \" rock \" and b == \" paper \" ) return - 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "return 1 if a is equal to \" paper \" and b = \" rock \"",
      "code": "if ( a == \" paper \" and b == \" rock \" ) return 1 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if a is \" paper \" and b is \" scissors \" , return - 1",
      "code": "if ( a == \" paper \" and b == \" scissors \" ) return - 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if a is equal to \" scissors \" and b is equal to \" paper \" , return 1",
      "code": "if ( a == \" scissors \" and b == \" paper \" ) return 1 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if a = \" scissors \" and b = \" rock \" , return - 1",
      "code": "if ( a == \" scissors \" and b == \" rock \" ) return - 1 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 11,
      "text": "read from the input to a , b and c",
      "code": "cin >> a >> b >> c ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "define new integer called x = cmp ( a , b ) + cmp ( a , c )",
      "code": "int x = cmp ( a , b ) + cmp ( a , c ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "create new integer variable y = cmp ( b , c ) + cmp ( b , a )",
      "code": "int y = cmp ( b , c ) + cmp ( b , a ) ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "z is a new integer variable with value cmp ( c , a ) + cmp ( c , b )",
      "code": "int z = cmp ( c , a ) + cmp ( c , b ) ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if x is equal to 2",
      "code": "if ( x == 2 )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print \" F \"",
      "code": "cout << \" F \" , cout << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else if y is equal to 2",
      "code": "else if ( y == 2 )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print \" M \" to the standard output",
      "code": "cout << \" M \" , cout << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "else if z = 2",
      "code": "else if ( z == 2 )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print \" S \"",
      "code": "cout << \" S \" , cout << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print \" ? \"",
      "code": "cout << \" ? \" , cout << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string cmp ( string a , string b )"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string a , b , n ;"
      ],
      "err_line": 11,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int a , b , c ;"
      ],
      "err_line": 12,
      "err_msg": "could not convert ‘a’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "int x = cmp ( a , b ) + ( a , c ) ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator+’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "int y = cmp ( b , c ) + cmp ( b ) ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘int cmp(std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "else if ( x == 2 )"
      ],
      "err_line": 15,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "cout << \" F \" ;"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        16,
        11
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "cout << \" F \" ;",
        "int a , b , c ;"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        16,
        11,
        15
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "cout << \" F \" ;",
        "int a , b , c ;",
        "else if ( x == 2 )"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        16,
        11,
        13
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "cout << \" F \" ;",
        "int a , b , c ;",
        "int y = cmp ( b , c ) + cmp ( b ) ;"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        16,
        11,
        0
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "cout << \" F \" ;",
        "int a , b , c ;",
        "string a , b , n ;"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        16,
        15
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "cout << \" F \" ;",
        "else if ( x == 2 )"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        16,
        15,
        13
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "cout << \" F \" ;",
        "else if ( x == 2 )",
        "int y = cmp ( b , c ) + cmp ( b ) ;"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        16,
        15,
        0
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "cout << \" F \" ;",
        "else if ( x == 2 )",
        "string a , b , n ;"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        16,
        13
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "cout << \" F \" ;",
        "int y = cmp ( b , c ) + cmp ( b ) ;"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        16,
        13,
        0
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "cout << \" F \" ;",
        "int y = cmp ( b , c ) + cmp ( b ) ;",
        "string a , b , n ;"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        16,
        0
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "cout << \" F \" ;",
        "string a , b , n ;"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "int a , b , c ;"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        11,
        15
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "int a , b , c ;",
        "else if ( x == 2 )"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        11,
        15,
        13
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "int a , b , c ;",
        "else if ( x == 2 )",
        "int y = cmp ( b , c ) + cmp ( b ) ;"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        11,
        15,
        0
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "int a , b , c ;",
        "else if ( x == 2 )",
        "string a , b , n ;"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        11,
        13
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "int a , b , c ;",
        "int y = cmp ( b , c ) + cmp ( b ) ;"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        11,
        13,
        0
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "int a , b , c ;",
        "int y = cmp ( b , c ) + cmp ( b ) ;",
        "string a , b , n ;"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        11,
        0
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "int a , b , c ;",
        "string a , b , n ;"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "else if ( x == 2 )"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        15,
        13
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "else if ( x == 2 )",
        "int y = cmp ( b , c ) + cmp ( b ) ;"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        15,
        13,
        0
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "else if ( x == 2 )",
        "int y = cmp ( b , c ) + cmp ( b ) ;",
        "string a , b , n ;"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        15,
        0
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "else if ( x == 2 )",
        "string a , b , n ;"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "int y = cmp ( b , c ) + cmp ( b ) ;"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        13,
        0
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "int y = cmp ( b , c ) + cmp ( b ) ;",
        "string a , b , n ;"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "string cmp ( string a , string b )",
        "string a , b , n ;"
      ],
      "err_line": 3,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        16,
        11
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "int a , b , c ;"
      ],
      "err_line": 12,
      "err_msg": "could not convert ‘a’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        16,
        11,
        15
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "int a , b , c ;",
        "else if ( x == 2 )"
      ],
      "err_line": 12,
      "err_msg": "could not convert ‘a’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        16,
        11,
        15,
        13
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "int a , b , c ;",
        "else if ( x == 2 )",
        "int y = cmp ( b , c ) + cmp ( b ) ;"
      ],
      "err_line": 12,
      "err_msg": "could not convert ‘a’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        16,
        11,
        15,
        0
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "int a , b , c ;",
        "else if ( x == 2 )",
        "string a , b , n ;"
      ],
      "err_line": 12,
      "err_msg": "could not convert ‘a’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        16,
        11,
        13
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "int a , b , c ;",
        "int y = cmp ( b , c ) + cmp ( b ) ;"
      ],
      "err_line": 12,
      "err_msg": "could not convert ‘a’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        16,
        11,
        13,
        0
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "int a , b , c ;",
        "int y = cmp ( b , c ) + cmp ( b ) ;",
        "string a , b , n ;"
      ],
      "err_line": 12,
      "err_msg": "could not convert ‘a’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        16,
        11,
        0
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "int a , b , c ;",
        "string a , b , n ;"
      ],
      "err_line": 12,
      "err_msg": "could not convert ‘a’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        16,
        15
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "else if ( x == 2 )"
      ],
      "err_line": 15,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        16,
        15,
        13
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "else if ( x == 2 )",
        "int y = cmp ( b , c ) + cmp ( b ) ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘int cmp(std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        16,
        15,
        13,
        0
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "else if ( x == 2 )",
        "int y = cmp ( b , c ) + cmp ( b ) ;",
        "string a , b , n ;"
      ],
      "err_line": 11,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        15,
        0
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "else if ( x == 2 )",
        "string a , b , n ;"
      ],
      "err_line": 11,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        13
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "int y = cmp ( b , c ) + cmp ( b ) ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘int cmp(std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        16,
        13,
        0
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "int y = cmp ( b , c ) + cmp ( b ) ;",
        "string a , b , n ;"
      ],
      "err_line": 11,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        0
      ],
      "mod_code": [
        "cout << \" F \" ;",
        "string a , b , n ;"
      ],
      "err_line": 11,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        15
      ],
      "mod_code": [
        "int a , b , c ;",
        "else if ( x == 2 )"
      ],
      "err_line": 12,
      "err_msg": "could not convert ‘a’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        11,
        15,
        13
      ],
      "mod_code": [
        "int a , b , c ;",
        "else if ( x == 2 )",
        "int y = cmp ( b , c ) + cmp ( b ) ;"
      ],
      "err_line": 12,
      "err_msg": "could not convert ‘a’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        11,
        15,
        13,
        0
      ],
      "mod_code": [
        "int a , b , c ;",
        "else if ( x == 2 )",
        "int y = cmp ( b , c ) + cmp ( b ) ;",
        "string a , b , n ;"
      ],
      "err_line": 12,
      "err_msg": "could not convert ‘a’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        11,
        15,
        0
      ],
      "mod_code": [
        "int a , b , c ;",
        "else if ( x == 2 )",
        "string a , b , n ;"
      ],
      "err_line": 12,
      "err_msg": "could not convert ‘a’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "int a , b , c ;",
        "int y = cmp ( b , c ) + cmp ( b ) ;"
      ],
      "err_line": 12,
      "err_msg": "could not convert ‘a’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        11,
        13,
        0
      ],
      "mod_code": [
        "int a , b , c ;",
        "int y = cmp ( b , c ) + cmp ( b ) ;",
        "string a , b , n ;"
      ],
      "err_line": 12,
      "err_msg": "could not convert ‘a’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        11,
        0
      ],
      "mod_code": [
        "int a , b , c ;",
        "string a , b , n ;"
      ],
      "err_line": 12,
      "err_msg": "could not convert ‘a’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        15,
        13
      ],
      "mod_code": [
        "else if ( x == 2 )",
        "int y = cmp ( b , c ) + cmp ( b ) ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘int cmp(std::__cxx11::string, std::__cxx11::string)’"
    },
    {
      "mod_line": [
        15,
        13,
        0
      ],
      "mod_code": [
        "else if ( x == 2 )",
        "int y = cmp ( b , c ) + cmp ( b ) ;",
        "string a , b , n ;"
      ],
      "err_line": 11,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        0
      ],
      "mod_code": [
        "else if ( x == 2 )",
        "string a , b , n ;"
      ],
      "err_line": 11,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        0
      ],
      "mod_code": [
        "int y = cmp ( b , c ) + cmp ( b ) ;",
        "string a , b , n ;"
      ],
      "err_line": 11,
      "err_msg": "‘c’ was not declared in this scope"
    }
  ]
}