{
  "meta": {
    "index": 1141,
    "hitid": "3J9UN9O9J3MCDB00DCPI9X2YJAKJ0O",
    "workerid": "AIWEXPJAU66D9",
    "probid": "41A",
    "subid": "42307330"
  },
  "lines": [
    {
      "line": 0,
      "text": "let res , up and down be integers",
      "code": "int res , up , down ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let s and t be strings",
      "code": "string s , t ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read s and t",
      "code": "cin >> s >> t ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if length of s ! = length of t",
      "code": "if ( s . length ( ) != t . length ( ) )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for integer i = 0 to length of s exclusive",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if s [ i ] = t [ length of t - 1 - i ]",
      "code": "if ( s [ i ] == t [ t . length ( ) - 1 - i ] )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "increment res",
      "code": "res ++ ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 11,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if res = length of s",
      "code": "if ( res == s . length ( ) )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string s let , t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cout << s >> t ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "stop ;"
      ],
      "err_line": 11,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "cout << s >> t ;",
        "stop ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        11,
        2
      ],
      "mod_code": [
        "cout << s >> t ;",
        "stop ;",
        "string s let , t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        3,
        11,
        2,
        14
      ],
      "mod_code": [
        "cout << s >> t ;",
        "stop ;",
        "string s let , t ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        3,
        11,
        14
      ],
      "mod_code": [
        "cout << s >> t ;",
        "stop ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "cout << s >> t ;",
        "string s let , t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        3,
        2,
        14
      ],
      "mod_code": [
        "cout << s >> t ;",
        "string s let , t ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "cout << s >> t ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "stop ;",
        "string s let , t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        11,
        2,
        14
      ],
      "mod_code": [
        "stop ;",
        "string s let , t ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "stop ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 11,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "string s let , t ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘let’"
    }
  ]
}