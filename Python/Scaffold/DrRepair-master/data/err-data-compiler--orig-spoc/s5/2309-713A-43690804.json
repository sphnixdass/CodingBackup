{
  "meta": {
    "index": 2309,
    "hitid": "3IVKZBIBJ03GNEPMYE5H7QS22CDHSN",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "713A",
    "subid": "43690804"
  },
  "lines": [
    {
      "line": 0,
      "text": "i , j = integers",
      "code": "int i , j ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "M = const integer with M = 1e5 + 6",
      "code": "const int M = 1e5 + 6 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "query = integer array of size ( left shift 18 1 place ) + 6",
      "code": "int query [ ( 1 << 18 ) + 6 ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "t = integer",
      "code": "int t ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "while decrement t",
      "code": "while ( t -- )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "s , num = strings",
      "code": "string s , num ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "read s , num",
      "code": "cin >> s >> num ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "x = integer with x = 0",
      "code": "int x = 0 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if ( s is ? )",
      "code": "if ( s == \" ? \" )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "for ( i = num . size ( ) - 1 , j = 0 ; i > = 0 ; decrement i , increment j )",
      "code": "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- , j ++ )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "if ( num [ i ] is 1 ) , x = x + ( left shift j 1 place )",
      "code": "if ( num [ i ] == ' 1 ' ) x += ( 1 << j ) ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 14,
      "text": "print query [ x ]",
      "code": "cout << query [ x ] << \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "continue next iteration",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "for ( i = num . size ( ) - 1 , j = 0 , i > = 0 , decrement i , increment j )",
      "code": "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- , j ++ )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if ( ( cast to integer ) ( num [ i ] - 0 ) modulo 2 ) , x = x + ( left shift j 1 place )",
      "code": "if ( ( int ) ( num [ i ] - ' 0 ' ) % 2 ) x += ( 1 << j ) ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if ( s is + )",
      "code": "if ( s == \" + \" )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "increment query [ x ]",
      "code": "query [ x ] ++ ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 23,
      "text": "decrement query [ x ]",
      "code": "query [ x ] -- ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( s == ' ? ' )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "if ( s == ' + ' )"
      ],
      "err_line": 20,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int query ( 1 << 1 ) + 6 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cin . get ( t ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid initialization of non-const reference of type ‘std::basic_istream<char>::char_type& {aka char&}’ from an rvalue of type ‘std::basic_istream<char>::char_type {aka char}’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "string s ;"
      ],
      "err_line": 8,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "else"
      ],
      "err_line": 15,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "if ( ( num ) )"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘num’ from ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘bool’"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( s == ' ? ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        10,
        11
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        10,
        11,
        12
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        10,
        11,
        17
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        10,
        11,
        18
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        10,
        11,
        20
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( s == ' + ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        10,
        12
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( s == ' ? ' )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        10,
        12,
        17
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( s == ' ? ' )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        10,
        12,
        18
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( s == ' ? ' )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        10,
        12,
        20
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( s == ' ? ' )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "if ( s == ' + ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        10,
        17
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        10,
        17,
        18
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        10,
        17,
        20
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( s == ' + ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        10,
        18
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( s == ' ? ' )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        10,
        18,
        20
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( s == ' ? ' )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }",
        "if ( s == ' + ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        10,
        20
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( s == ' ? ' )",
        "if ( s == ' + ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        11,
        12
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        11,
        12,
        17
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        11,
        12,
        18
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        11,
        12,
        20
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "if ( s == ' + ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        11,
        17
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        11,
        17,
        18
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        11,
        17,
        20
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( s == ' + ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        11,
        18
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        11,
        18,
        20
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }",
        "if ( s == ' + ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        11,
        20
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( s == ' + ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        12,
        17
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        12,
        17,
        18
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        12,
        17,
        20
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( s == ' + ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        12,
        18
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        12,
        18,
        20
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }",
        "if ( s == ' + ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        12,
        20
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "if ( s == ' + ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        17
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        17,
        18
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        17,
        18,
        20
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }",
        "if ( s == ' + ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        17,
        20
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( s == ' + ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        18
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        18,
        20
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }",
        "if ( s == ' + ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        2,
        20
      ],
      "mod_code": [
        "int query ( 18 << 1 ) + 6 ;",
        "if ( s == ' + ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘+’ token"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        11,
        12
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        11,
        12,
        17
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        11,
        12,
        18
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        11,
        12,
        20
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "if ( s == ' + ' )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        11,
        17
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        11,
        17,
        18
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        11,
        17,
        20
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( s == ' + ' )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        11,
        18
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        11,
        18,
        20
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }",
        "if ( s == ' + ' )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        11,
        20
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( s == ' + ' )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        12,
        17
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        12,
        17,
        18
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        12,
        17,
        20
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( s == ' + ' )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        12,
        18
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        12,
        18,
        20
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }",
        "if ( s == ' + ' )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        12,
        20
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "if ( s == ' + ' )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        17
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        17,
        18
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        17,
        18,
        20
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }",
        "if ( s == ' + ' )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        17,
        20
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( s == ' + ' )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        18
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        18,
        20
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }",
        "if ( s == ' + ' )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        10,
        20
      ],
      "mod_code": [
        "if ( s == ' ? ' )",
        "if ( s == ' + ' )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        11,
        12,
        17,
        18
      ],
      "mod_code": [
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        11,
        12,
        17,
        20
      ],
      "mod_code": [
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( s == ' + ' )"
      ],
      "err_line": 20,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        11,
        12,
        18
      ],
      "mod_code": [
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        11,
        12,
        18,
        20
      ],
      "mod_code": [
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }",
        "if ( s == ' + ' )"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        11,
        12,
        20
      ],
      "mod_code": [
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "if ( s == ' + ' )"
      ],
      "err_line": 20,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        11,
        17,
        18
      ],
      "mod_code": [
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        11,
        17,
        18,
        20
      ],
      "mod_code": [
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }",
        "if ( s == ' + ' )"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        11,
        17,
        20
      ],
      "mod_code": [
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( s == ' + ' )"
      ],
      "err_line": 20,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        11,
        18
      ],
      "mod_code": [
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        11,
        18,
        20
      ],
      "mod_code": [
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }",
        "if ( s == ' + ' )"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        11,
        20
      ],
      "mod_code": [
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( s == ' + ' )"
      ],
      "err_line": 20,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        12,
        17,
        18
      ],
      "mod_code": [
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        12,
        17,
        18,
        20
      ],
      "mod_code": [
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }",
        "if ( s == ' + ' )"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        12,
        17,
        20
      ],
      "mod_code": [
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( s == ' + ' )"
      ],
      "err_line": 20,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        12,
        18
      ],
      "mod_code": [
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        12,
        18,
        20
      ],
      "mod_code": [
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }",
        "if ( s == ' + ' )"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        12,
        20
      ],
      "mod_code": [
        "if ( num [ i ] == 1 ) x += ( j << 1 ) ;",
        "if ( s == ' + ' )"
      ],
      "err_line": 20,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        17,
        18
      ],
      "mod_code": [
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        17,
        18,
        20
      ],
      "mod_code": [
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }",
        "if ( s == ' + ' )"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        17,
        20
      ],
      "mod_code": [
        "for ( i = num . size ( ) - 1 , j = 0 ; i >= 0 ; i -- )",
        "if ( s == ' + ' )"
      ],
      "err_line": 20,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        18,
        20
      ],
      "mod_code": [
        "if ( ( num ) == ( num [ i ] - ' 0 ' ) % 2 ) { x += ( j << 1 ) ; }",
        "if ( s == ' + ' )"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    }
  ]
}