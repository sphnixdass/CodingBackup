{
  "meta": {
    "index": 2337,
    "hitid": "3HO4MYYR12IG52X9R09DP0L0EVLU6I",
    "workerid": "A1APYLD4DUK33J",
    "probid": "834A",
    "subid": "47033993"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant integer N = 2e5 + 5",
      "code": "const int N = 2e5 + 5 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare Go with character x as argument , returning integer",
      "code": "int Go ( char x )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare integer f",
      "code": "int f ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if x is ' ^ ' , let f be 0",
      "code": "if ( x == ' ^ ' ) f = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if x is ' > ' , let f be 1",
      "code": "if ( x == ' > ' ) f = 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if x is ' v ' , let f be 2",
      "code": "if ( x == ' v ' ) f = 2 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if x is ' < ' , let f be 3",
      "code": "if ( x == ' < ' ) f = 3 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "return f from function",
      "code": "return f ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 10,
      "text": "declare characters A , B",
      "code": "char A , B ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "declare integers a , b , c",
      "code": "int a , b , c ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read A , B , c",
      "code": "cin >> A >> B >> c ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if c bitwise and 1",
      "code": "if ( c & 1 )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "let a be result of run Go ( A )",
      "code": "a = Go ( A ) ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "let b be result of run Go ( B )",
      "code": "b = Go ( B ) ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if ( a + c ) % 4 is b",
      "code": "if ( ( a + c ) % 4 == b )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "print \" cw \"",
      "code": "puts ( \" cw \" ) ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print \" ccw \"",
      "code": "puts ( \" ccw \" ) ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print \" undefined \"",
      "code": "puts ( \" undefined \" ) ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "char A , B , B ;"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘char B’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "a *= Go ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘int’ and ‘int(char)’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "b *= Go ;"
      ],
      "err_line": 15,
      "err_msg": "invalid operands of types ‘int’ and ‘int(char)’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "puts ( \" ) ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        17,
        21,
        10
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "cout << \" no\\n \" ;",
        "char A , B , B ;"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘char B’"
    },
    {
      "mod_line": [
        17,
        21,
        10,
        13
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "cout << \" no\\n \" ;",
        "char A , B , B ;",
        "if ( c & 2 )"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘char B’"
    },
    {
      "mod_line": [
        17,
        21,
        10,
        15
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "cout << \" no\\n \" ;",
        "char A , B , B ;",
        "b *= Go ;"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘char B’"
    },
    {
      "mod_line": [
        17,
        21,
        13,
        15
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "cout << \" no\\n \" ;",
        "if ( c & 2 )",
        "b *= Go ;"
      ],
      "err_line": 15,
      "err_msg": "invalid operands of types ‘int’ and ‘int(char)’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        17,
        21,
        15
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "cout << \" no\\n \" ;",
        "b *= Go ;"
      ],
      "err_line": 15,
      "err_msg": "invalid operands of types ‘int’ and ‘int(char)’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        17,
        10
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "char A , B , B ;"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘char B’"
    },
    {
      "mod_line": [
        17,
        10,
        21
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "char A , B , B ;",
        "puts ( \" ) ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        17,
        10,
        21,
        13
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "char A , B , B ;",
        "puts ( \" ) ;",
        "if ( c & 2 )"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        17,
        10,
        21,
        15
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "char A , B , B ;",
        "puts ( \" ) ;",
        "b *= Go ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        17,
        10,
        13
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "char A , B , B ;",
        "if ( c & 2 )"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘char B’"
    },
    {
      "mod_line": [
        17,
        10,
        13,
        15
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "char A , B , B ;",
        "if ( c & 2 )",
        "b *= Go ;"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘char B’"
    },
    {
      "mod_line": [
        17,
        10,
        15
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "char A , B , B ;",
        "b *= Go ;"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘char B’"
    },
    {
      "mod_line": [
        17,
        21
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "puts ( \" ) ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        17,
        21,
        13
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "puts ( \" ) ;",
        "if ( c & 2 )"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        17,
        21,
        13,
        15
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "puts ( \" ) ;",
        "if ( c & 2 )",
        "b *= Go ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        17,
        21,
        15
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "puts ( \" ) ;",
        "b *= Go ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        17,
        13,
        15
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "if ( c & 2 )",
        "b *= Go ;"
      ],
      "err_line": 15,
      "err_msg": "invalid operands of types ‘int’ and ‘int(char)’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        17,
        15
      ],
      "mod_code": [
        "cout << \" cw \" ;",
        "b *= Go ;"
      ],
      "err_line": 15,
      "err_msg": "invalid operands of types ‘int’ and ‘int(char)’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        21,
        10
      ],
      "mod_code": [
        "cout << \" no\\n \" ;",
        "char A , B , B ;"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘char B’"
    },
    {
      "mod_line": [
        21,
        10,
        13
      ],
      "mod_code": [
        "cout << \" no\\n \" ;",
        "char A , B , B ;",
        "if ( c & 2 )"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘char B’"
    },
    {
      "mod_line": [
        21,
        10,
        13,
        15
      ],
      "mod_code": [
        "cout << \" no\\n \" ;",
        "char A , B , B ;",
        "if ( c & 2 )",
        "b *= Go ;"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘char B’"
    },
    {
      "mod_line": [
        21,
        10,
        15
      ],
      "mod_code": [
        "cout << \" no\\n \" ;",
        "char A , B , B ;",
        "b *= Go ;"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘char B’"
    },
    {
      "mod_line": [
        21,
        13,
        15
      ],
      "mod_code": [
        "cout << \" no\\n \" ;",
        "if ( c & 2 )",
        "b *= Go ;"
      ],
      "err_line": 15,
      "err_msg": "invalid operands of types ‘int’ and ‘int(char)’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        21,
        15
      ],
      "mod_code": [
        "cout << \" no\\n \" ;",
        "b *= Go ;"
      ],
      "err_line": 15,
      "err_msg": "invalid operands of types ‘int’ and ‘int(char)’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        10,
        21
      ],
      "mod_code": [
        "char A , B , B ;",
        "puts ( \" ) ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        21,
        13
      ],
      "mod_code": [
        "char A , B , B ;",
        "puts ( \" ) ;",
        "if ( c & 2 )"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        21,
        13,
        15
      ],
      "mod_code": [
        "char A , B , B ;",
        "puts ( \" ) ;",
        "if ( c & 2 )",
        "b *= Go ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        21,
        15
      ],
      "mod_code": [
        "char A , B , B ;",
        "puts ( \" ) ;",
        "b *= Go ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "char A , B , B ;",
        "if ( c & 2 )"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘char B’"
    },
    {
      "mod_line": [
        10,
        13,
        15
      ],
      "mod_code": [
        "char A , B , B ;",
        "if ( c & 2 )",
        "b *= Go ;"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘char B’"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "char A , B , B ;",
        "b *= Go ;"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘char B’"
    },
    {
      "mod_line": [
        21,
        13
      ],
      "mod_code": [
        "puts ( \" ) ;",
        "if ( c & 2 )"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        21,
        13,
        15
      ],
      "mod_code": [
        "puts ( \" ) ;",
        "if ( c & 2 )",
        "b *= Go ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        21,
        15
      ],
      "mod_code": [
        "puts ( \" ) ;",
        "b *= Go ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "if ( c & 2 )",
        "b *= Go ;"
      ],
      "err_line": 15,
      "err_msg": "invalid operands of types ‘int’ and ‘int(char)’ to binary ‘operator*’"
    }
  ]
}