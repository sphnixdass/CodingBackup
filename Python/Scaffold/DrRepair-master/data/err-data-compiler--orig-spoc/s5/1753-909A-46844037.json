{
  "meta": {
    "index": 1753,
    "hitid": "3GKAWYFRAPN2Y64SK1IXL08TN0APD3",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "909A",
    "subid": "46844037"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create strings s1 and s2",
      "code": "string s1 , s2 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s1 and s2",
      "code": "cin >> s1 >> s2 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "print s1 [ 0 ]",
      "code": "cout << s1 [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 1 to s1 . length ( ) exclusive",
      "code": "for ( int i = 1 ; i <= s1 . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if i is equal to s1 . length ( )",
      "code": "if ( i == s1 . length ( ) )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "print s2 [ 0 ]",
      "code": "cout << s2 [ 0 ] << endl ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if s2 [ 0 ] is greater than s1 [ i ]",
      "code": "if ( s2 [ 0 ] > s1 [ i ] )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "print s1 [ i ]",
      "code": "cout << s1 [ i ] ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else do",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print s2 [ 0 ]",
      "code": "cout << s2 [ 0 ] << endl ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string s1 create s2 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cout << s1 >> s2 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 1 ; i < s1 . length ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        11
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "for ( int i = 1 ; i < s1 . length ( ) ; i ++ )",
        "cout << s2 [ 0 ] ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        9
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "for ( int i = 1 ; i < s1 . length ( ) ; i ++ )",
        "cout << s2 [ 0 ] ;",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        4,
        11
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "for ( int i = 1 ; i < s1 . length ( ) ; i ++ )",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        4,
        11,
        5
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "for ( int i = 1 ; i < s1 . length ( ) ; i ++ )",
        "else do",
        "if ( i )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        4,
        11,
        9
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "for ( int i = 1 ; i < s1 . length ( ) ; i ++ )",
        "else do",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        9
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "for ( int i = 1 ; i < s1 . length ( ) ; i ++ )",
        "if ( i )",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        4,
        9
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "for ( int i = 1 ; i < s1 . length ( ) ; i ++ )",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        6,
        11
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "cout << s2 [ 0 ] ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        6,
        11,
        5
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "cout << s2 [ 0 ] ;",
        "else do",
        "if ( i )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        6,
        11,
        9
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "cout << s2 [ 0 ] ;",
        "else do",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        6,
        5,
        9
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "cout << s2 [ 0 ] ;",
        "if ( i )",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        6,
        9
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "cout << s2 [ 0 ] ;",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        11,
        5
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "else do",
        "if ( i )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        11,
        5,
        9
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "else do",
        "if ( i )",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        11,
        9
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "else do",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        5,
        9
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "if ( i )",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        6,
        11
      ],
      "mod_code": [
        "for ( int i = 1 ; i < s1 . length ( ) ; i ++ )",
        "cout << s2 [ 0 ] ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        6,
        11,
        5
      ],
      "mod_code": [
        "for ( int i = 1 ; i < s1 . length ( ) ; i ++ )",
        "cout << s2 [ 0 ] ;",
        "else do",
        "if ( i )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        6,
        11,
        9
      ],
      "mod_code": [
        "for ( int i = 1 ; i < s1 . length ( ) ; i ++ )",
        "cout << s2 [ 0 ] ;",
        "else do",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        6,
        5,
        9
      ],
      "mod_code": [
        "for ( int i = 1 ; i < s1 . length ( ) ; i ++ )",
        "cout << s2 [ 0 ] ;",
        "if ( i )",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        6,
        9
      ],
      "mod_code": [
        "for ( int i = 1 ; i < s1 . length ( ) ; i ++ )",
        "cout << s2 [ 0 ] ;",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "for ( int i = 1 ; i < s1 . length ( ) ; i ++ )",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        11,
        5
      ],
      "mod_code": [
        "for ( int i = 1 ; i < s1 . length ( ) ; i ++ )",
        "else do",
        "if ( i )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        11,
        5,
        9
      ],
      "mod_code": [
        "for ( int i = 1 ; i < s1 . length ( ) ; i ++ )",
        "else do",
        "if ( i )",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        11,
        9
      ],
      "mod_code": [
        "for ( int i = 1 ; i < s1 . length ( ) ; i ++ )",
        "else do",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        5,
        9
      ],
      "mod_code": [
        "for ( int i = 1 ; i < s1 . length ( ) ; i ++ )",
        "if ( i )",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "for ( int i = 1 ; i < s1 . length ( ) ; i ++ )",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "cout << s2 [ 0 ] ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        11,
        5
      ],
      "mod_code": [
        "cout << s2 [ 0 ] ;",
        "else do",
        "if ( i )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        11,
        5,
        9
      ],
      "mod_code": [
        "cout << s2 [ 0 ] ;",
        "else do",
        "if ( i )",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        11,
        9
      ],
      "mod_code": [
        "cout << s2 [ 0 ] ;",
        "else do",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        5,
        9
      ],
      "mod_code": [
        "cout << s2 [ 0 ] ;",
        "if ( i )",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "cout << s2 [ 0 ] ;",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        11,
        5
      ],
      "mod_code": [
        "else do",
        "if ( i )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        5,
        9
      ],
      "mod_code": [
        "else do",
        "if ( i )",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "else do",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "if ( i )",
        "if ( s2 [ 0 ] ] > s1 [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    }
  ]
}