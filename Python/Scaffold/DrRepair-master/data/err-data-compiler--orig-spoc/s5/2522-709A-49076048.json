{
  "meta": {
    "index": 2522,
    "hitid": "3NQUW096N6204VCDGTKOINGJR5ZL9P",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "709A",
    "subid": "49076048"
  },
  "lines": [
    {
      "line": 0,
      "text": "n , b , d = integers",
      "code": "int n , b , d ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "read n , b , d",
      "code": "cin >> n >> b >> d ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "ans , cnt = integers with ans = 0 , cnt = 0",
      "code": "int ans = 0 , cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "x = integer",
      "code": "int x ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if ( x < = b )",
      "code": "if ( x <= b )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "cnt = cnt + x",
      "code": "cnt += x ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if ( cnt > d )",
      "code": "if ( cnt > d )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "increment ans",
      "code": "ans ++ ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "cnt = 0",
      "code": "cnt = 0 ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print ans",
      "code": "cout << ans << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        6,
        2,
        9
      ],
      "mod_code": [
        "int cnt = 0 ;",
        "cout << x << endl ;",
        "cin >> n >> b , d ;",
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        6,
        7,
        9
      ],
      "mod_code": [
        "int cnt = 0 ;",
        "cout << x << endl ;",
        "if ( x < b )",
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        6,
        9
      ],
      "mod_code": [
        "int cnt = 0 ;",
        "cout << x << endl ;",
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        2,
        7,
        9
      ],
      "mod_code": [
        "int cnt = 0 ;",
        "cin >> n >> b , d ;",
        "if ( x < b )",
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        2,
        9
      ],
      "mod_code": [
        "int cnt = 0 ;",
        "cin >> n >> b , d ;",
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        7,
        9
      ],
      "mod_code": [
        "int cnt = 0 ;",
        "if ( x < b )",
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "int cnt = 0 ;",
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        2,
        7,
        9
      ],
      "mod_code": [
        "cout << x << endl ;",
        "cin >> n >> b , d ;",
        "if ( x < b )",
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        2,
        11,
        9
      ],
      "mod_code": [
        "cout << x << endl ;",
        "cin >> n >> b , d ;",
        "long long cnt = 0 ;",
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        2,
        9
      ],
      "mod_code": [
        "cout << x << endl ;",
        "cin >> n >> b , d ;",
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        7,
        11,
        9
      ],
      "mod_code": [
        "cout << x << endl ;",
        "if ( x < b )",
        "long long cnt = 0 ;",
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        7,
        9
      ],
      "mod_code": [
        "cout << x << endl ;",
        "if ( x < b )",
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        11,
        9
      ],
      "mod_code": [
        "cout << x << endl ;",
        "long long cnt = 0 ;",
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "cout << x << endl ;",
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        7,
        11,
        9
      ],
      "mod_code": [
        "cin >> n >> b , d ;",
        "if ( x < b )",
        "long long cnt = 0 ;",
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        7,
        9
      ],
      "mod_code": [
        "cin >> n >> b , d ;",
        "if ( x < b )",
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        11,
        9
      ],
      "mod_code": [
        "cin >> n >> b , d ;",
        "long long cnt = 0 ;",
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "cin >> n >> b , d ;",
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        11,
        9
      ],
      "mod_code": [
        "if ( x < b )",
        "long long cnt = 0 ;",
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "if ( x < b )",
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "long long cnt = 0 ;",
        "if ( cnt > d ) )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘)’ token"
    }
  ]
}