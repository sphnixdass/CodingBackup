{
  "meta": {
    "index": 2575,
    "hitid": "3X2LT8FDHWCG1K52FFLCR22O4JLW8T",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "154A",
    "subid": "43923221"
  },
  "lines": [
    {
      "line": 0,
      "text": "function start_run ( get address of string s , address of int j , address of string p , return a bool )",
      "code": "bool start_run ( string & s , int & j , string & p )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "f and sec = false",
      "code": "bool f = false , sec = false ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "i = int",
      "code": "int i ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = j to size of s exclusive",
      "code": "for ( i = j ; i < s . size ( ) ; ++ i )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if s [ i ] equal p [ 0 ]",
      "code": "if ( s [ i ] == p [ 0 ] )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "f = true",
      "code": "f = true ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "else if s [ i ] equal p [ 1 ]",
      "code": "else if ( s [ i ] == p [ 1 ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "sec = true",
      "code": "sec = true ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if f and sec",
      "code": "if ( f and sec )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "return true",
      "code": "return true ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "j = i",
      "code": "j = i ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "return false",
      "code": "return false ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 19,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "k = int",
      "code": "int k ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "read k",
      "code": "cin >> k ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "ans = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "for i = 0 to k esclusive",
      "code": "for ( int i = 0 ; i < k ; ++ i )",
      "indent": 1
    },
    {
      "line": 25,
      "text": "p = string",
      "code": "string p ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "read p",
      "code": "cin >> p ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "for j = 0 to size of s - 1 exclusive",
      "code": "for ( int j = 0 ; j < s . size ( ) - 1 ; ++ j )",
      "indent": 2
    },
    {
      "line": 28,
      "text": "if start_run ( s , j , p )",
      "code": "if ( start_run ( s , j , p ) )",
      "indent": 3
    },
    {
      "line": 29,
      "text": "a and b = 0",
      "code": "int a = 0 , b = 0 ;",
      "indent": 4
    },
    {
      "line": 30,
      "text": "while j < size of s",
      "code": "while ( j < s . size ( ) )",
      "indent": 4
    },
    {
      "line": 31,
      "text": "if s [ j ] = = p [ 0 ]",
      "code": "if ( s [ j ] == p [ 0 ] )",
      "indent": 5
    },
    {
      "line": 32,
      "text": "increment a",
      "code": "a ++ ;",
      "indent": 6
    },
    {
      "line": 33,
      "text": "else if s [ j ] = = p [ i ]",
      "code": "else if ( s [ j ] == p [ 1 ] )",
      "indent": 5
    },
    {
      "line": 34,
      "text": "increment b",
      "code": "b ++ ;",
      "indent": 6
    },
    {
      "line": 35,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 36,
      "text": "break",
      "code": "break ;",
      "indent": 6
    },
    {
      "line": 37,
      "text": "increment j",
      "code": "j ++ ;",
      "indent": 5
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 39,
      "text": "add min ( a , b ) to ans",
      "code": "ans += min ( a , b ) ;",
      "indent": 4
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 43,
      "text": "print ans",
      "code": "cout << ans << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )"
      ],
      "err_line": 12,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "f = false , sec = false ;"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string p )"
      ],
      "err_line": 12,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( s [ i ] == p [ ' 0 ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "else if ( s [ i ] ] == p [ 1 ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 27,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 22,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "for ( i = 0 ; i < k ; i ++ )"
      ],
      "err_line": 24,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "char p ;"
      ],
      "err_line": 28,
      "err_msg": "invalid initialization of reference of type ‘std::__cxx11::string& {aka std::__cxx11::basic_string<char>&}’ from expression of type ‘char’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "for ( j = 0 ; j < s . size ( ) - 1 ; j ++ )"
      ],
      "err_line": 27,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "if ( start_run ( s , j ) == p )"
      ],
      "err_line": 28,
      "err_msg": "too few arguments to function ‘bool start_run(std::__cxx11::string&, int&, std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "while ( j < s < s )"
      ],
      "err_line": 30,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "if ( s [ j ] == p [ 0 ] ) j ++ ;"
      ],
      "err_line": 33,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "else if ( s [ j ] ] == p [ i ] )"
      ],
      "err_line": 33,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "f = false , sec = false ;"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        3
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "f = false , sec = false ;",
        "for ( int i = j ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        3,
        5
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "f = false , sec = false ;",
        "for ( int i = j ; i < s . size ( ) ; i ++ )",
        "bool f = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        3,
        7
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "f = false , sec = false ;",
        "for ( int i = j ; i < s . size ( ) ; i ++ )",
        "bool sec = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        3,
        33
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "f = false , sec = false ;",
        "for ( int i = j ; i < s . size ( ) ; i ++ )",
        "else if ( s [ j ] == p [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        5
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "f = false , sec = false ;",
        "bool f = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        5,
        7
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "f = false , sec = false ;",
        "bool f = true ;",
        "bool sec = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        5,
        33
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "f = false , sec = false ;",
        "bool f = true ;",
        "else if ( s [ j ] == p [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        7
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "f = false , sec = false ;",
        "bool sec = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        7,
        33
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "f = false , sec = false ;",
        "bool sec = true ;",
        "else if ( s [ j ] == p [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        33
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "f = false , sec = false ;",
        "else if ( s [ j ] == p [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "for ( int i = j ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        5
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "for ( int i = j ; i < s . size ( ) ; i ++ )",
        "bool f = true ;"
      ],
      "err_line": 12,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        7
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "for ( int i = j ; i < s . size ( ) ; i ++ )",
        "bool f = true ;",
        "bool sec = true ;"
      ],
      "err_line": 12,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        33
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "for ( int i = j ; i < s . size ( ) ; i ++ )",
        "bool f = true ;",
        "else if ( s [ j ] == p [ i ] )"
      ],
      "err_line": 12,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        7
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "for ( int i = j ; i < s . size ( ) ; i ++ )",
        "bool sec = true ;"
      ],
      "err_line": 12,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        7,
        33
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "for ( int i = j ; i < s . size ( ) ; i ++ )",
        "bool sec = true ;",
        "else if ( s [ j ] == p [ i ] )"
      ],
      "err_line": 12,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        33
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "for ( int i = j ; i < s . size ( ) ; i ++ )",
        "else if ( s [ j ] == p [ i ] )"
      ],
      "err_line": 12,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "bool f = true ;"
      ],
      "err_line": 12,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        7
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "bool f = true ;",
        "bool sec = true ;"
      ],
      "err_line": 12,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        7,
        33
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "bool f = true ;",
        "bool sec = true ;",
        "else if ( s [ j ] == p [ i ] )"
      ],
      "err_line": 12,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        33
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "bool f = true ;",
        "else if ( s [ j ] == p [ i ] )"
      ],
      "err_line": 12,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "bool sec = true ;"
      ],
      "err_line": 12,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        7,
        33
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "bool sec = true ;",
        "else if ( s [ j ] == p [ i ] )"
      ],
      "err_line": 12,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        33
      ],
      "mod_code": [
        "void start_run ( string & s , int & j , string & p )",
        "else if ( s [ j ] == p [ i ] )"
      ],
      "err_line": 12,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "f = false , sec = false ;",
        "for ( int i = j ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        5
      ],
      "mod_code": [
        "f = false , sec = false ;",
        "for ( int i = j ; i < s . size ( ) ; i ++ )",
        "bool f = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        7
      ],
      "mod_code": [
        "f = false , sec = false ;",
        "for ( int i = j ; i < s . size ( ) ; i ++ )",
        "bool f = true ;",
        "bool sec = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        33
      ],
      "mod_code": [
        "f = false , sec = false ;",
        "for ( int i = j ; i < s . size ( ) ; i ++ )",
        "bool f = true ;",
        "else if ( s [ j ] == p [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        7
      ],
      "mod_code": [
        "f = false , sec = false ;",
        "for ( int i = j ; i < s . size ( ) ; i ++ )",
        "bool sec = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        7,
        33
      ],
      "mod_code": [
        "f = false , sec = false ;",
        "for ( int i = j ; i < s . size ( ) ; i ++ )",
        "bool sec = true ;",
        "else if ( s [ j ] == p [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        33
      ],
      "mod_code": [
        "f = false , sec = false ;",
        "for ( int i = j ; i < s . size ( ) ; i ++ )",
        "else if ( s [ j ] == p [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "f = false , sec = false ;",
        "bool f = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        7
      ],
      "mod_code": [
        "f = false , sec = false ;",
        "bool f = true ;",
        "bool sec = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        7,
        33
      ],
      "mod_code": [
        "f = false , sec = false ;",
        "bool f = true ;",
        "bool sec = true ;",
        "else if ( s [ j ] == p [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        33
      ],
      "mod_code": [
        "f = false , sec = false ;",
        "bool f = true ;",
        "else if ( s [ j ] == p [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "f = false , sec = false ;",
        "bool sec = true ;"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        7,
        33
      ],
      "mod_code": [
        "f = false , sec = false ;",
        "bool sec = true ;",
        "else if ( s [ j ] == p [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        33
      ],
      "mod_code": [
        "f = false , sec = false ;",
        "else if ( s [ j ] == p [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "‘f’ was not declared in this scope"
    }
  ]
}