{
  "meta": {
    "index": 2131,
    "hitid": "3ZLW647WALP8O71PPE19CEEOLDU23W",
    "workerid": "A1APYLD4DUK33J",
    "probid": "698A",
    "subid": "48644768"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare integer array a size n",
      "code": "int a [ n ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive , read a [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare integer array dp with size n by 3",
      "code": "int dp [ n ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set bytes from dp to size of dp [ 0 ] [ 0 ] * n * 3 to value 0",
      "code": "memset ( dp , 0 , sizeof ( dp [ 0 ] [ 0 ] ) * n * 3 ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "let dp [ 0 ] [ 0 ] be 0",
      "code": "dp [ 0 ] [ 0 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if a [ 0 ] is 1 or a [ 0 ] is 3",
      "code": "if ( a [ 0 ] == 1 || a [ 0 ] == 3 )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "let dp [ 0 ] [ 1 ] be 1",
      "code": "dp [ 0 ] [ 1 ] = 1 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 11,
      "text": "let dp [ 0 ] [ 1 ] be 0",
      "code": "dp [ 0 ] [ 1 ] = 0 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if a [ 0 ] is 2 or a [ 0 ] is 3",
      "code": "if ( a [ 0 ] == 2 || a [ 0 ] == 3 )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "let dp [ 0 ] [ 2 ] be 1",
      "code": "dp [ 0 ] [ 2 ] = 1 ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 15,
      "text": "let dp [ 0 ] [ 2 ] be 0",
      "code": "dp [ 0 ] [ 2 ] = 0 ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "for i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "let dp [ i ] [ 0 ] be maximum of ( dp [ i - 1 ] [ 0 ] and maximum of ( dp [ i - 1 ] [ 1 ] and dp [ i - 1 ] [ 2 ] ) )",
      "code": "dp [ i ] [ 0 ] = max ( dp [ i - 1 ] [ 0 ] , max ( dp [ i - 1 ] [ 1 ] , dp [ i - 1 ] [ 2 ] ) ) ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if a [ i ] is 1 or a [ i ] is 3 , let dp [ i ] [ 1 ] be maximum of dp [ i - 1 ] [ 0 ] + 1 and dp [ i - 1 ] [ 2 ] + 1 )",
      "code": "if ( a [ i ] == 1 || a [ i ] == 3 ) dp [ i ] [ 1 ] = max ( dp [ i - 1 ] [ 0 ] + 1 , dp [ i - 1 ] [ 2 ] + 1 ) ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if a [ i ] is 2 or a [ i ] is 3 , let dp [ i ] [ 2 ] be maximum of dp [ i - 1 ] [ 0 ] + 1 and dp [ i - 1 ] [ 1 ] + 1",
      "code": "if ( a [ i ] == 2 || a [ i ] == 3 ) dp [ i ] [ 2 ] = max ( dp [ i - 1 ] [ 0 ] + 1 , dp [ i - 1 ] [ 1 ] + 1 ) ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "declare integer ans = maximum of ( dp [ n - 1 ] [ 0 ] and maximum of ( dp [ n - 1 ] [ 1 ] and dp [ n - 1 ] [ 2 ] ) )",
      "code": "int ans = max ( dp [ n - 1 ] [ 0 ] , max ( dp [ n - 1 ] [ 1 ] , dp [ n - 1 ] [ 2 ] ) ) ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print n - ans , newline",
      "code": "cout << n - ans << endl ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 4,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int * a [ n ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int dp [ n ] by { } ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘by’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] , dp * 3 ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "dp [ i ] [ 0 ] = max ( dp [ i - 1 ] [ 0 ] , max ( dp [ i - 1 ] [ 1 ] ) , dp [ i - 1 ] [ 2 ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "int ans = max ( dp [ n - 1 ] [ 0 ] , max ( dp [ n - 1 ] [ 1 ] ) , dp [ n - 1 ] [ 2 ] ) ;"
      ],
      "err_line": 21,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        6,
        19
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] ) ;",
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        19,
        11
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] ) ;",
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )",
        "dp [ 0 ] [ 1 ] = ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        19,
        11,
        15
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] ) ;",
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )",
        "dp [ 0 ] [ 1 ] = ' 0 ' ;",
        "dp [ 0 ] [ 2 ] = ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        19,
        11,
        8
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] ) ;",
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )",
        "dp [ 0 ] [ 1 ] = ' 0 ' ;",
        "if ( a [ 0 ] == ' 1 ' || a [ 0 ] == 3 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        19,
        15
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] ) ;",
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )",
        "dp [ 0 ] [ 2 ] = ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        19,
        15,
        8
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] ) ;",
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )",
        "dp [ 0 ] [ 2 ] = ' 0 ' ;",
        "if ( a [ 0 ] == ' 1 ' || a [ 0 ] == 3 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        19,
        8
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] ) ;",
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )",
        "if ( a [ 0 ] == ' 1 ' || a [ 0 ] == 3 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] ) ;",
        "dp [ 0 ] [ 1 ] = ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        11,
        15
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] ) ;",
        "dp [ 0 ] [ 1 ] = ' 0 ' ;",
        "dp [ 0 ] [ 2 ] = ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        11,
        15,
        8
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] ) ;",
        "dp [ 0 ] [ 1 ] = ' 0 ' ;",
        "dp [ 0 ] [ 2 ] = ' 0 ' ;",
        "if ( a [ 0 ] == ' 1 ' || a [ 0 ] == 3 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        11,
        8
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] ) ;",
        "dp [ 0 ] [ 1 ] = ' 0 ' ;",
        "if ( a [ 0 ] == ' 1 ' || a [ 0 ] == 3 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] ) ;",
        "dp [ 0 ] [ 2 ] = ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        15,
        8
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] ) ;",
        "dp [ 0 ] [ 2 ] = ' 0 ' ;",
        "if ( a [ 0 ] == ' 1 ' || a [ 0 ] == 3 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] ) ;",
        "if ( a [ 0 ] == ' 1 ' || a [ 0 ] == 3 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        6
      ],
      "mod_code": [
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )",
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] , dp * 3 ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        6,
        11
      ],
      "mod_code": [
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )",
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] , dp * 3 ) ;",
        "dp [ 0 ] [ 1 ] = ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        6,
        11,
        15
      ],
      "mod_code": [
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )",
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] , dp * 3 ) ;",
        "dp [ 0 ] [ 1 ] = ' 0 ' ;",
        "dp [ 0 ] [ 2 ] = ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        6,
        11,
        8
      ],
      "mod_code": [
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )",
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] , dp * 3 ) ;",
        "dp [ 0 ] [ 1 ] = ' 0 ' ;",
        "if ( a [ 0 ] == ' 1 ' || a [ 0 ] == 3 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        6,
        15
      ],
      "mod_code": [
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )",
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] , dp * 3 ) ;",
        "dp [ 0 ] [ 2 ] = ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        6,
        15,
        8
      ],
      "mod_code": [
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )",
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] , dp * 3 ) ;",
        "dp [ 0 ] [ 2 ] = ' 0 ' ;",
        "if ( a [ 0 ] == ' 1 ' || a [ 0 ] == 3 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        6,
        8
      ],
      "mod_code": [
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )",
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] , dp * 3 ) ;",
        "if ( a [ 0 ] == ' 1 ' || a [ 0 ] == 3 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        11
      ],
      "mod_code": [
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )",
        "dp [ 0 ] [ 1 ] = ' 0 ' ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        11,
        15
      ],
      "mod_code": [
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )",
        "dp [ 0 ] [ 1 ] = ' 0 ' ;",
        "dp [ 0 ] [ 2 ] = ' 0 ' ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        11,
        15,
        8
      ],
      "mod_code": [
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )",
        "dp [ 0 ] [ 1 ] = ' 0 ' ;",
        "dp [ 0 ] [ 2 ] = ' 0 ' ;",
        "if ( a [ 0 ] == ' 1 ' || a [ 0 ] == 3 )"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        11,
        8
      ],
      "mod_code": [
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )",
        "dp [ 0 ] [ 1 ] = ' 0 ' ;",
        "if ( a [ 0 ] == ' 1 ' || a [ 0 ] == 3 )"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        15
      ],
      "mod_code": [
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )",
        "dp [ 0 ] [ 2 ] = ' 0 ' ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        15,
        8
      ],
      "mod_code": [
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )",
        "dp [ 0 ] [ 2 ] = ' 0 ' ;",
        "if ( a [ 0 ] == ' 1 ' || a [ 0 ] == 3 )"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        8
      ],
      "mod_code": [
        "if ( a [ i ] == 2 || a [ i ] == 3 && dp [ i ] [ 2 ] == 3 && dp [ i ] [ 2 ] + 1 && dp [ i - 1 ] [ 1 ] + 1 )",
        "if ( a [ 0 ] == ' 1 ' || a [ 0 ] == 3 )"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] , dp * 3 ) ;",
        "dp [ 0 ] [ 1 ] = ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        11,
        15
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] , dp * 3 ) ;",
        "dp [ 0 ] [ 1 ] = ' 0 ' ;",
        "dp [ 0 ] [ 2 ] = ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        11,
        15,
        8
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] , dp * 3 ) ;",
        "dp [ 0 ] [ 1 ] = ' 0 ' ;",
        "dp [ 0 ] [ 2 ] = ' 0 ' ;",
        "if ( a [ 0 ] == ' 1 ' || a [ 0 ] == 3 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        11,
        8
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] , dp * 3 ) ;",
        "dp [ 0 ] [ 1 ] = ' 0 ' ;",
        "if ( a [ 0 ] == ' 1 ' || a [ 0 ] == 3 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] , dp * 3 ) ;",
        "dp [ 0 ] [ 2 ] = ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        15,
        8
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] , dp * 3 ) ;",
        "dp [ 0 ] [ 2 ] = ' 0 ' ;",
        "if ( a [ 0 ] == ' 1 ' || a [ 0 ] == 3 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "memset ( dp [ 0 ] [ 0 ] [ 0 ] , dp * 3 ) ;",
        "if ( a [ 0 ] == ' 1 ' || a [ 0 ] == 3 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}