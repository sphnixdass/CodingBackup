{
  "meta": {
    "index": 975,
    "hitid": "3QHITW7OYO3P0B2V046KV4QX7TXAQB",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "119A",
    "subid": "48938185"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function GCD taking two ints m and n and returning an int",
      "code": "int GCD ( int m , int n )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "r = int",
      "code": "int r ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "loop while setting r to m mod n and r is not 0",
      "code": "while ( ( r = m % n ) != 0 )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set m to n",
      "code": "m = n ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "set n to r",
      "code": "n = r ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "return n",
      "code": "return n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 9,
      "text": "a , b , n = int",
      "code": "int a , b , n ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read a then b then n",
      "code": "cin >> a >> b >> n ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "loop infinitely",
      "code": "while ( true )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "subtract GCD of a and n from n",
      "code": "n -= GCD ( a , n ) ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if n is 0",
      "code": "if ( n == 0 )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print 0",
      "code": "cout << 0 << endl ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "subtract GCD of b and n from n",
      "code": "n -= GCD ( b , n ) ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if n is 0",
      "code": "if ( n == 0 )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print 1",
      "code": "cout << 1 << endl ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int GCD ( int m [ ] , int n )"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘int*’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "while ( r % n == 0 && r != 0 )",
        "int GCD ( int m [ ] , int n )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        0,
        17
      ],
      "mod_code": [
        "while ( r % n == 0 && r != 0 )",
        "int GCD ( int m [ ] , int n )",
        "n = GCD ( b , n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        0,
        17,
        12
      ],
      "mod_code": [
        "while ( r % n == 0 && r != 0 )",
        "int GCD ( int m [ ] , int n )",
        "n = GCD ( b , n ) ;",
        "n = GCD ( a , n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        0,
        17,
        10
      ],
      "mod_code": [
        "while ( r % n == 0 && r != 0 )",
        "int GCD ( int m [ ] , int n )",
        "n = GCD ( b , n ) ;",
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        0,
        12
      ],
      "mod_code": [
        "while ( r % n == 0 && r != 0 )",
        "int GCD ( int m [ ] , int n )",
        "n = GCD ( a , n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        0,
        12,
        10
      ],
      "mod_code": [
        "while ( r % n == 0 && r != 0 )",
        "int GCD ( int m [ ] , int n )",
        "n = GCD ( a , n ) ;",
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        0,
        10
      ],
      "mod_code": [
        "while ( r % n == 0 && r != 0 )",
        "int GCD ( int m [ ] , int n )",
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        17,
        12,
        10
      ],
      "mod_code": [
        "while ( r % n == 0 && r != 0 )",
        "n = GCD ( b , n ) ;",
        "n = GCD ( a , n ) ;",
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        17,
        10
      ],
      "mod_code": [
        "while ( r % n == 0 && r != 0 )",
        "n = GCD ( b , n ) ;",
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        12,
        10
      ],
      "mod_code": [
        "while ( r % n == 0 && r != 0 )",
        "n = GCD ( a , n ) ;",
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "while ( r % n == 0 && r != 0 )",
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        0,
        17
      ],
      "mod_code": [
        "int GCD ( int m [ ] , int n )",
        "n = GCD ( b , n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘int*’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        0,
        17,
        12
      ],
      "mod_code": [
        "int GCD ( int m [ ] , int n )",
        "n = GCD ( b , n ) ;",
        "n = GCD ( a , n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘int*’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        0,
        17,
        12,
        2
      ],
      "mod_code": [
        "int GCD ( int m [ ] , int n )",
        "n = GCD ( b , n ) ;",
        "n = GCD ( a , n ) ;",
        "while ( r % n && r )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        17,
        12,
        10
      ],
      "mod_code": [
        "int GCD ( int m [ ] , int n )",
        "n = GCD ( b , n ) ;",
        "n = GCD ( a , n ) ;",
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘int*’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        0,
        17,
        2
      ],
      "mod_code": [
        "int GCD ( int m [ ] , int n )",
        "n = GCD ( b , n ) ;",
        "while ( r % n && r )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        17,
        2,
        10
      ],
      "mod_code": [
        "int GCD ( int m [ ] , int n )",
        "n = GCD ( b , n ) ;",
        "while ( r % n && r )",
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        17,
        10
      ],
      "mod_code": [
        "int GCD ( int m [ ] , int n )",
        "n = GCD ( b , n ) ;",
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘int*’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "int GCD ( int m [ ] , int n )",
        "n = GCD ( a , n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘int*’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        0,
        12,
        2
      ],
      "mod_code": [
        "int GCD ( int m [ ] , int n )",
        "n = GCD ( a , n ) ;",
        "while ( r % n && r )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        12,
        2,
        10
      ],
      "mod_code": [
        "int GCD ( int m [ ] , int n )",
        "n = GCD ( a , n ) ;",
        "while ( r % n && r )",
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        12,
        10
      ],
      "mod_code": [
        "int GCD ( int m [ ] , int n )",
        "n = GCD ( a , n ) ;",
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘int*’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "int GCD ( int m [ ] , int n )",
        "while ( r % n && r )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        10
      ],
      "mod_code": [
        "int GCD ( int m [ ] , int n )",
        "while ( r % n && r )",
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "int GCD ( int m [ ] , int n )",
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘int*’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        17,
        12,
        2,
        10
      ],
      "mod_code": [
        "n = GCD ( b , n ) ;",
        "n = GCD ( a , n ) ;",
        "while ( r % n && r )",
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        17,
        12,
        10
      ],
      "mod_code": [
        "n = GCD ( b , n ) ;",
        "n = GCD ( a , n ) ;",
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        17,
        2,
        10
      ],
      "mod_code": [
        "n = GCD ( b , n ) ;",
        "while ( r % n && r )",
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        17,
        10
      ],
      "mod_code": [
        "n = GCD ( b , n ) ;",
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        12,
        2,
        10
      ],
      "mod_code": [
        "n = GCD ( a , n ) ;",
        "while ( r % n && r )",
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        12,
        10
      ],
      "mod_code": [
        "n = GCD ( a , n ) ;",
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "while ( r % n && r )",
        "{ cin >> a >> b >> n ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘}’ at end of input"
    }
  ]
}