{
  "meta": {
    "index": 559,
    "hitid": "30F94FBDNRE7B1ZFNM0BVKLQ9IHBTL",
    "workerid": "AIWEXPJAU66D9",
    "probid": "318A",
    "subid": "48690895"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare long long n",
      "code": "long long n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create long long k",
      "code": "long long k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n and k and keep looping",
      "code": "while ( cin >> n >> k )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if n is odd",
      "code": "if ( n % 2 != 0 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if k < = n / 2 + 1",
      "code": "if ( k <= ( n / 2 + 1 ) )",
      "indent": 3
    },
    {
      "line": 6,
      "text": "print 2 * k - 1",
      "code": "cout << 2 * k - 1 << endl ;",
      "indent": 4
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 8,
      "text": "print 2 * k - n - 1",
      "code": "cout << 2 * k - n - 1 << endl ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if k < = n / 2",
      "code": "if ( k <= n / 2 )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "print 2 * k - 1",
      "code": "cout << 2 * k - 1 << endl ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 13,
      "text": "print 2 * k - n",
      "code": "cout << 2 * k - n << endl ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( { cin >> n >> k )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "cout << 2 * k - n ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘{’ token"
    }
  ]
}