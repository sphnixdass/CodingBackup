{
  "meta": {
    "index": 1770,
    "hitid": "3ZXV7Q5FJBIG219K62RHP0C70UBFCQ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "909A",
    "subid": "41446636"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant integer maxn = 1e6 + 10",
      "code": "const int maxn = 1e6 + 10 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare constant integer INF = 0x3f3f3f3f",
      "code": "const int INF = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare constant integer inf with inf = 0x3f",
      "code": "const int inf = 0x3f ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare constant double EPS = 1e - 7",
      "code": "const double EPS = 1e-7 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare constant double Pi = acosign of - 1",
      "code": "const double Pi = acos ( - 1 ) ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "declare constant integer MOD with MOD = 1e9 + 7",
      "code": "const int MOD = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "start loop",
      "code": "do",
      "indent": 1
    },
    {
      "line": 8,
      "text": "while 0 is true",
      "code": "while ( 0 ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "declare strings s1 , s2",
      "code": "string s1 , s2 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read s1 and s2",
      "code": "cin >> s1 >> s2 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print s1 [ 0 ]",
      "code": "cout << s1 [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 1 to size of s1 exclusive",
      "code": "for ( int i = 1 ; i < s1 . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if s1 [ i ] is less than s2 [ 0 ]",
      "code": "if ( s1 [ i ] < s2 [ 0 ] )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print s1 [ i ]",
      "code": "cout << s1 [ i ] ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 16,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print s2 [ 0 ] , newline",
      "code": "cout << s2 [ 0 ] << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "while ( 0 )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘string’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "break ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "while ( ! 0 )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘string’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cout << s1 >> s2 ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_ostream<char>’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( s1 [ i ] ] < s2 [ 0 ] )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "while ( 0 )",
        "cout << s1 [ 0 ] << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘string’"
    },
    {
      "mod_line": [
        8,
        11,
        14
      ],
      "mod_code": [
        "while ( 0 )",
        "cout << s1 [ 0 ] << endl ;",
        "cout << s1 [ i ] << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘string’"
    },
    {
      "mod_line": [
        8,
        11,
        14,
        16
      ],
      "mod_code": [
        "while ( 0 )",
        "cout << s1 [ 0 ] << endl ;",
        "cout << s1 [ i ] << endl ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘string’"
    },
    {
      "mod_line": [
        8,
        11,
        14,
        12
      ],
      "mod_code": [
        "while ( 0 )",
        "cout << s1 [ 0 ] << endl ;",
        "cout << s1 [ i ] << endl ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘string’"
    },
    {
      "mod_line": [
        8,
        11,
        14,
        9
      ],
      "mod_code": [
        "while ( 0 )",
        "cout << s1 [ 0 ] << endl ;",
        "cout << s1 [ i ] << endl ;",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘strings’"
    },
    {
      "mod_line": [
        8,
        11,
        16
      ],
      "mod_code": [
        "while ( 0 )",
        "cout << s1 [ 0 ] << endl ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘string’"
    },
    {
      "mod_line": [
        8,
        11,
        16,
        12
      ],
      "mod_code": [
        "while ( 0 )",
        "cout << s1 [ 0 ] << endl ;",
        "break break ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘string’"
    },
    {
      "mod_line": [
        8,
        11,
        16,
        9
      ],
      "mod_code": [
        "while ( 0 )",
        "cout << s1 [ 0 ] << endl ;",
        "break break ;",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘strings’"
    },
    {
      "mod_line": [
        8,
        11,
        12
      ],
      "mod_code": [
        "while ( 0 )",
        "cout << s1 [ 0 ] << endl ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘string’"
    },
    {
      "mod_line": [
        8,
        11,
        12,
        9
      ],
      "mod_code": [
        "while ( 0 )",
        "cout << s1 [ 0 ] << endl ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘strings’"
    },
    {
      "mod_line": [
        8,
        11,
        9
      ],
      "mod_code": [
        "while ( 0 )",
        "cout << s1 [ 0 ] << endl ;",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘strings’"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "while ( 0 )",
        "cout << s1 [ i ] << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘string’"
    },
    {
      "mod_line": [
        8,
        14,
        16
      ],
      "mod_code": [
        "while ( 0 )",
        "cout << s1 [ i ] << endl ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘string’"
    },
    {
      "mod_line": [
        8,
        14,
        16,
        12
      ],
      "mod_code": [
        "while ( 0 )",
        "cout << s1 [ i ] << endl ;",
        "break break ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘string’"
    },
    {
      "mod_line": [
        8,
        14,
        16,
        9
      ],
      "mod_code": [
        "while ( 0 )",
        "cout << s1 [ i ] << endl ;",
        "break break ;",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘strings’"
    },
    {
      "mod_line": [
        8,
        14,
        12
      ],
      "mod_code": [
        "while ( 0 )",
        "cout << s1 [ i ] << endl ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘string’"
    },
    {
      "mod_line": [
        8,
        14,
        12,
        9
      ],
      "mod_code": [
        "while ( 0 )",
        "cout << s1 [ i ] << endl ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘strings’"
    },
    {
      "mod_line": [
        8,
        14,
        9
      ],
      "mod_code": [
        "while ( 0 )",
        "cout << s1 [ i ] << endl ;",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘strings’"
    },
    {
      "mod_line": [
        8,
        16
      ],
      "mod_code": [
        "while ( 0 )",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘string’"
    },
    {
      "mod_line": [
        8,
        16,
        12
      ],
      "mod_code": [
        "while ( 0 )",
        "break break ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘string’"
    },
    {
      "mod_line": [
        8,
        16,
        12,
        9
      ],
      "mod_code": [
        "while ( 0 )",
        "break break ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘strings’"
    },
    {
      "mod_line": [
        8,
        16,
        9
      ],
      "mod_code": [
        "while ( 0 )",
        "break break ;",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘strings’"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "while ( 0 )",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘string’"
    },
    {
      "mod_line": [
        8,
        12,
        9
      ],
      "mod_code": [
        "while ( 0 )",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘strings’"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "while ( 0 )",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘strings’"
    },
    {
      "mod_line": [
        11,
        14,
        16
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "cout << s1 [ i ] << endl ;",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        11,
        14,
        16,
        12
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "cout << s1 [ i ] << endl ;",
        "break break ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        14,
        16,
        9
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "cout << s1 [ i ] << endl ;",
        "break break ;",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        14,
        12
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "cout << s1 [ i ] << endl ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        14,
        12,
        9
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "cout << s1 [ i ] << endl ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        14,
        9
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "cout << s1 [ i ] << endl ;",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        16
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        11,
        16,
        12
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "break break ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        16,
        12,
        9
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "break break ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        16,
        9
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "break break ;",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        12,
        9
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "cout << s1 [ 0 ] << endl ;",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        16
      ],
      "mod_code": [
        "cout << s1 [ i ] << endl ;",
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        16,
        12
      ],
      "mod_code": [
        "cout << s1 [ i ] << endl ;",
        "break break ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        16,
        12,
        9
      ],
      "mod_code": [
        "cout << s1 [ i ] << endl ;",
        "break break ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        16,
        9
      ],
      "mod_code": [
        "cout << s1 [ i ] << endl ;",
        "break break ;",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "cout << s1 [ i ] << endl ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        12,
        9
      ],
      "mod_code": [
        "cout << s1 [ i ] << endl ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        9
      ],
      "mod_code": [
        "cout << s1 [ i ] << endl ;",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        12
      ],
      "mod_code": [
        "break break ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        12,
        9
      ],
      "mod_code": [
        "break break ;",
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        9
      ],
      "mod_code": [
        "break break ;",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        9
      ],
      "mod_code": [
        "for ( i = 1 ; i < s1 . size ( ) ; i ++ )",
        "strings , s2 ;"
      ],
      "err_line": 10,
      "err_msg": "‘strings’ was not declared in this scope"
    }
  ]
}