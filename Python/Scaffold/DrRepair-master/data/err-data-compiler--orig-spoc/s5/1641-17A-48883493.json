{
  "meta": {
    "index": 1641,
    "hitid": "3XD2A6FGFNON887302HPU9UEIXQS9O",
    "workerid": "AIWEXPJAU66D9",
    "probid": "17A",
    "subid": "48883493"
  },
  "lines": [
    {
      "line": 0,
      "text": "function isprime with integer argument p",
      "code": "bool isprime ( int p )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if p is less than 2 return false",
      "code": "if ( p < 2 ) return false ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 2 to i * i < = p",
      "code": "for ( int i = 2 ; i * i <= p ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if p % i is equal to 0 return false",
      "code": "if ( p % i == 0 ) return false ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "return true",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "function can with integer argument p",
      "code": "bool can ( int p )",
      "indent": 0
    },
    {
      "line": 7,
      "text": "set integer last to 2",
      "code": "int last = 2 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 3 to p inclusive",
      "code": "for ( int i = 3 ; i <= p ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if isprime ( i )",
      "code": "if ( isprime ( i ) )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if last + i is equal to p return true",
      "code": "if ( last + i == p ) return true ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if last + i is greater than p return false",
      "code": "if ( last + i > p ) return false ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "last = i",
      "code": "last = i ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "return false",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 18,
      "text": "create integers n and k",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "set integer cnt to 0",
      "code": "int cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "for integer i = 2 to n inclusive",
      "code": "for ( int i = 2 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if isprime ( i )",
      "code": "if ( isprime ( i ) )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "s = i - 1",
      "code": "int s = i - 1 ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "if can ( s ) is true , increment cnt",
      "code": "if ( can ( s ) ) { cnt ++ ; }",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "if cnt is greater than or equal to k",
      "code": "if ( cnt >= k )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void isprime ( int p )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "void can ( int p )"
      ],
      "err_line": 10,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "s = i - 1 ;"
      ],
      "err_line": 23,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void isprime ( int p ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "for ( i = 2 ; i * i <= p ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "void can ( int p ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "last = 2 ;"
      ],
      "err_line": 7,
      "err_msg": "‘last’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 3 ; i <= p ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "void isprime ( int p )",
        "void can ( int p )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        23
      ],
      "mod_code": [
        "void isprime ( int p )",
        "void can ( int p )",
        "s = i - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        23,
        2
      ],
      "mod_code": [
        "void isprime ( int p )",
        "void can ( int p )",
        "s = i - 1 ;",
        "for ( i = 2 ; i * i <= p ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        23,
        19
      ],
      "mod_code": [
        "void isprime ( int p )",
        "void can ( int p )",
        "s = i - 1 ;",
        "cin >> n and k ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        23,
        28
      ],
      "mod_code": [
        "void isprime ( int p )",
        "void can ( int p )",
        "s = i - 1 ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        2
      ],
      "mod_code": [
        "void isprime ( int p )",
        "void can ( int p )",
        "for ( i = 2 ; i * i <= p ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        2,
        19
      ],
      "mod_code": [
        "void isprime ( int p )",
        "void can ( int p )",
        "for ( i = 2 ; i * i <= p ; i ++ )",
        "cin >> n and k ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        2,
        28
      ],
      "mod_code": [
        "void isprime ( int p )",
        "void can ( int p )",
        "for ( i = 2 ; i * i <= p ; i ++ )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        19
      ],
      "mod_code": [
        "void isprime ( int p )",
        "void can ( int p )",
        "cin >> n and k ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        19,
        28
      ],
      "mod_code": [
        "void isprime ( int p )",
        "void can ( int p )",
        "cin >> n and k ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6,
        28
      ],
      "mod_code": [
        "void isprime ( int p )",
        "void can ( int p )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23
      ],
      "mod_code": [
        "void isprime ( int p )",
        "s = i - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        2
      ],
      "mod_code": [
        "void isprime ( int p )",
        "s = i - 1 ;",
        "for ( i = 2 ; i * i <= p ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        2,
        19
      ],
      "mod_code": [
        "void isprime ( int p )",
        "s = i - 1 ;",
        "for ( i = 2 ; i * i <= p ; i ++ )",
        "cin >> n and k ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        2,
        28
      ],
      "mod_code": [
        "void isprime ( int p )",
        "s = i - 1 ;",
        "for ( i = 2 ; i * i <= p ; i ++ )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        19
      ],
      "mod_code": [
        "void isprime ( int p )",
        "s = i - 1 ;",
        "cin >> n and k ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        19,
        28
      ],
      "mod_code": [
        "void isprime ( int p )",
        "s = i - 1 ;",
        "cin >> n and k ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        28
      ],
      "mod_code": [
        "void isprime ( int p )",
        "s = i - 1 ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "void isprime ( int p )",
        "for ( i = 2 ; i * i <= p ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        19
      ],
      "mod_code": [
        "void isprime ( int p )",
        "for ( i = 2 ; i * i <= p ; i ++ )",
        "cin >> n and k ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        19,
        28
      ],
      "mod_code": [
        "void isprime ( int p )",
        "for ( i = 2 ; i * i <= p ; i ++ )",
        "cin >> n and k ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2,
        28
      ],
      "mod_code": [
        "void isprime ( int p )",
        "for ( i = 2 ; i * i <= p ; i ++ )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        19
      ],
      "mod_code": [
        "void isprime ( int p )",
        "cin >> n and k ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        19,
        28
      ],
      "mod_code": [
        "void isprime ( int p )",
        "cin >> n and k ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        28
      ],
      "mod_code": [
        "void isprime ( int p )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        23
      ],
      "mod_code": [
        "void can ( int p )",
        "s = i - 1 ;"
      ],
      "err_line": 10,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        23,
        2
      ],
      "mod_code": [
        "void can ( int p )",
        "s = i - 1 ;",
        "for ( i = 2 ; i * i <= p ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        23,
        2,
        19
      ],
      "mod_code": [
        "void can ( int p )",
        "s = i - 1 ;",
        "for ( i = 2 ; i * i <= p ; i ++ )",
        "cin >> n and k ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        23,
        2,
        28
      ],
      "mod_code": [
        "void can ( int p )",
        "s = i - 1 ;",
        "for ( i = 2 ; i * i <= p ; i ++ )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        23,
        19
      ],
      "mod_code": [
        "void can ( int p )",
        "s = i - 1 ;",
        "cin >> n and k ;"
      ],
      "err_line": 10,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        23,
        19,
        28
      ],
      "mod_code": [
        "void can ( int p )",
        "s = i - 1 ;",
        "cin >> n and k ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        23,
        28
      ],
      "mod_code": [
        "void can ( int p )",
        "s = i - 1 ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "void can ( int p )",
        "for ( i = 2 ; i * i <= p ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        2,
        19
      ],
      "mod_code": [
        "void can ( int p )",
        "for ( i = 2 ; i * i <= p ; i ++ )",
        "cin >> n and k ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        2,
        19,
        28
      ],
      "mod_code": [
        "void can ( int p )",
        "for ( i = 2 ; i * i <= p ; i ++ )",
        "cin >> n and k ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        2,
        28
      ],
      "mod_code": [
        "void can ( int p )",
        "for ( i = 2 ; i * i <= p ; i ++ )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19
      ],
      "mod_code": [
        "void can ( int p )",
        "cin >> n and k ;"
      ],
      "err_line": 10,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        19,
        28
      ],
      "mod_code": [
        "void can ( int p )",
        "cin >> n and k ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        28
      ],
      "mod_code": [
        "void can ( int p )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        2
      ],
      "mod_code": [
        "s = i - 1 ;",
        "for ( i = 2 ; i * i <= p ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        2,
        19
      ],
      "mod_code": [
        "s = i - 1 ;",
        "for ( i = 2 ; i * i <= p ; i ++ )",
        "cin >> n and k ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        2,
        19,
        28
      ],
      "mod_code": [
        "s = i - 1 ;",
        "for ( i = 2 ; i * i <= p ; i ++ )",
        "cin >> n and k ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        2,
        28
      ],
      "mod_code": [
        "s = i - 1 ;",
        "for ( i = 2 ; i * i <= p ; i ++ )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        19
      ],
      "mod_code": [
        "s = i - 1 ;",
        "cin >> n and k ;"
      ],
      "err_line": 23,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        19,
        28
      ],
      "mod_code": [
        "s = i - 1 ;",
        "cin >> n and k ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        28
      ],
      "mod_code": [
        "s = i - 1 ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 23,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        19
      ],
      "mod_code": [
        "for ( i = 2 ; i * i <= p ; i ++ )",
        "cin >> n and k ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        19,
        28
      ],
      "mod_code": [
        "for ( i = 2 ; i * i <= p ; i ++ )",
        "cin >> n and k ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        28
      ],
      "mod_code": [
        "for ( i = 2 ; i * i <= p ; i ++ )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    }
  ]
}