{
  "meta": {
    "index": 20,
    "hitid": "3N5YJ55YXGX4XEP3KCE3RAVS2IGANU",
    "workerid": "AIWEXPJAU66D9",
    "probid": "214A",
    "subid": "48203748"
  },
  "lines": [
    {
      "line": 0,
      "text": "a is a new 2d array of integers with size 1001 by 1001",
      "code": "int a [ 1001 ] [ 1001 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "n , m , i , j and cnt are ints with cnt = 0",
      "code": "int n , m , i , j , cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read input to n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "in a for loop , change i from 0 to n inclusive incrementing i",
      "code": "for ( i = 0 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 0 to m inclusive",
      "code": "for ( j = 0 ; j <= m ; j ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set a [ i ] [ j ] to 1 if i * i + j is equal to n and i + j * j is equal to m",
      "code": "if ( i * i + j == n && i + j * j == m ) a [ i ] [ j ] = 1 ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to 1001 exclusive",
      "code": "for ( i = 0 ; i < 1001 ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "start for loop from j = 0 to 1001 exclusive",
      "code": "for ( j = 0 ; j < 1001 ; j ++ )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if a [ i ] [ j ] ! = 0 , increment cnt",
      "code": "if ( a [ i ] [ j ] ) cnt ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print cnt",
      "code": "cout << cnt << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( i * i + j == n && i + j * j == n && i + j * j == m )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int a [ 1001 1001 ] [ 1001 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "if ( i * i + j == n && i + j * j == n && i + j * j == m )",
        "cin >> m >> m ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        3,
        0
      ],
      "mod_code": [
        "if ( i * i + j == n && i + j * j == n && i + j * j == m )",
        "cin >> m >> m ;",
        "int a [ 1001 1001 ] [ 1001 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        0
      ],
      "mod_code": [
        "if ( i * i + j == n && i + j * j == n && i + j * j == m )",
        "int a [ 1001 1001 ] [ 1001 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        3,
        0
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "int a [ 1001 1001 ] [ 1001 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        3,
        0,
        6
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "int a [ 1001 1001 ] [ 1001 ] ;",
        "if ( i * i + j == n && i + j * j == n && i + j * j == m ) { a [ i ] [ j ] = m ; }"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "int a [ 1001 1001 ] [ 1001 ] ;",
        "if ( i * i + j == n && i + j * j == n && i + j * j == m ) { a [ i ] [ j ] = m ; }"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    }
  ]
}