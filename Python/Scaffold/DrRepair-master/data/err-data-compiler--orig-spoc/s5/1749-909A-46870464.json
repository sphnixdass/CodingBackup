{
  "meta": {
    "index": 1749,
    "hitid": "3BDORL6HKK7D5RETXXRB6PQQ3IMCRI",
    "workerid": "A1APYLD4DUK33J",
    "probid": "909A",
    "subid": "46870464"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create strings f_name , l_name , result with result = \" \"",
      "code": "string f_name , l_name , result = \" \" ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read f_name read l_name",
      "code": "cin >> f_name >> l_name ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "increment result by f_name [ 0 ]",
      "code": "result += f_name [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 1 to size of f_name exclusive",
      "code": "for ( int i = 1 ; i < f_name . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if f_name [ i ] is less than l_name [ 0 ]",
      "code": "if ( f_name [ i ] < l_name [ 0 ] )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment result by f_name [ i ]",
      "code": "result += f_name [ i ] ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "increment result by l_name [ 0 ]",
      "code": "result += l_name [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print result print newline",
      "code": "cout << result << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string f_name , l_name = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "‘result’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 1 ; i < f_name . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( f_name [ i ] ] < l_name [ 0 ] )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "string f_name , l_name , result = \" \" ;",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        8,
        4
      ],
      "mod_code": [
        "string f_name , l_name , result = \" \" ;",
        "break break ;",
        "for ( i = 1 ; i < f_name . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        8,
        4,
        5
      ],
      "mod_code": [
        "string f_name , l_name , result = \" \" ;",
        "break break ;",
        "for ( i = 1 ; i < f_name . size ( ) ; i ++ )",
        "if ( f_name [ i ] ] < l_name [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        8,
        5
      ],
      "mod_code": [
        "string f_name , l_name , result = \" \" ;",
        "break break ;",
        "if ( f_name [ i ] ] < l_name [ 0 ] )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "string f_name , l_name , result = \" \" ;",
        "for ( i = 1 ; i < f_name . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        5
      ],
      "mod_code": [
        "string f_name , l_name , result = \" \" ;",
        "for ( i = 1 ; i < f_name . size ( ) ; i ++ )",
        "if ( f_name [ i ] ] < l_name [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "string f_name , l_name , result = \" \" ;",
        "if ( f_name [ i ] ] < l_name [ 0 ] )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "string f_name , l_name = \" \" ;",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "‘result’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        8,
        4
      ],
      "mod_code": [
        "string f_name , l_name = \" \" ;",
        "break break ;",
        "for ( i = 1 ; i < f_name . size ( ) ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘result’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        8,
        4,
        5
      ],
      "mod_code": [
        "string f_name , l_name = \" \" ;",
        "break break ;",
        "for ( i = 1 ; i < f_name . size ( ) ; i ++ )",
        "if ( f_name [ i ] ] < l_name [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘result’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        8,
        5
      ],
      "mod_code": [
        "string f_name , l_name = \" \" ;",
        "break break ;",
        "if ( f_name [ i ] ] < l_name [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘result’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "string f_name , l_name = \" \" ;",
        "for ( i = 1 ; i < f_name . size ( ) ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘result’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        5
      ],
      "mod_code": [
        "string f_name , l_name = \" \" ;",
        "for ( i = 1 ; i < f_name . size ( ) ; i ++ )",
        "if ( f_name [ i ] ] < l_name [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘result’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "string f_name , l_name = \" \" ;",
        "if ( f_name [ i ] ] < l_name [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘result’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "break break ;",
        "for ( i = 1 ; i < f_name . size ( ) ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        4,
        5
      ],
      "mod_code": [
        "break break ;",
        "for ( i = 1 ; i < f_name . size ( ) ; i ++ )",
        "if ( f_name [ i ] ] < l_name [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "break break ;",
        "if ( f_name [ i ] ] < l_name [ 0 ] )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "for ( i = 1 ; i < f_name . size ( ) ; i ++ )",
        "if ( f_name [ i ] ] < l_name [ 0 ] )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    }
  ]
}