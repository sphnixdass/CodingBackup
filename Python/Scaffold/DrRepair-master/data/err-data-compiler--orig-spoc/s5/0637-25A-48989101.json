{
  "meta": {
    "index": 637,
    "hitid": "3BFNCI9LYKKFA8YVVQI485VWVR4730",
    "workerid": "AIWEXPJAU66D9",
    "probid": "25A",
    "subid": "48989101"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , even , odd , ev and od be integers with n , even = 0 , odd = 0 , ev and od",
      "code": "int n , even = 0 , odd = 0 , ev , od ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "ar is an array of integers with length n",
      "code": "int ar [ n ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read ar [ i ]",
      "code": "cin >> ar [ i ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if ar [ i ] is even",
      "code": "if ( ar [ i ] % 2 == 0 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increase even",
      "code": "even ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "assign value of i to the ev",
      "code": "ev = i ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "increase odd by one",
      "code": "odd ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "assign value of i to the od",
      "code": "od = i ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if even is greater than odd",
      "code": "if ( even > odd )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print od + 1 and a new line",
      "code": "cout << od + 1 << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print ev + 1 and a new line",
      "code": "cout << ev + 1 << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 , od ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "‘ar’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int * ar [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "j ++ ;"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 , od ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        2,
        8
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 , od ;",
        "while ( cin >> n )",
        "ev = ev ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        5
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 , od ;",
        "while ( cin >> n )",
        "ev = ev ;",
        "cout << ar [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        3
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 , od ;",
        "while ( cin >> n )",
        "ev = ev ;",
        "int * ar [ n ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 , od ;",
        "while ( cin >> n )",
        "cout << ar [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        3
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 , od ;",
        "while ( cin >> n )",
        "cout << ar [ i ] ;",
        "int * ar [ n ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 , od ;",
        "while ( cin >> n )",
        "int * ar [ n ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 , od ;",
        "ev = ev ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        8,
        5
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 , od ;",
        "ev = ev ;",
        "cout << ar [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        8,
        5,
        3
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 , od ;",
        "ev = ev ;",
        "cout << ar [ i ] ;",
        "int * ar [ n ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        8,
        3
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 , od ;",
        "ev = ev ;",
        "int * ar [ n ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 , od ;",
        "cout << ar [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        5,
        3
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 , od ;",
        "cout << ar [ i ] ;",
        "int * ar [ n ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 , od ;",
        "int * ar [ n ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        2,
        8
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 ;",
        "while ( cin >> n )",
        "ev = ev ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        5
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 ;",
        "while ( cin >> n )",
        "ev = ev ;",
        "cout << ar [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        3
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 ;",
        "while ( cin >> n )",
        "ev = ev ;",
        "int * ar [ n ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 ;",
        "while ( cin >> n )",
        "cout << ar [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        3
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 ;",
        "while ( cin >> n )",
        "cout << ar [ i ] ;",
        "int * ar [ n ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 ;",
        "while ( cin >> n )",
        "int * ar [ n ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 ;",
        "ev = ev ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        8,
        5
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 ;",
        "ev = ev ;",
        "cout << ar [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        8,
        5,
        3
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 ;",
        "ev = ev ;",
        "cout << ar [ i ] ;",
        "int * ar [ n ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        8,
        3
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 ;",
        "ev = ev ;",
        "int * ar [ n ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 ;",
        "cout << ar [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        5,
        3
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 ;",
        "cout << ar [ i ] ;",
        "int * ar [ n ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int n , even = 0 , odd = 0 , ev = 0 , ev = 0 ;",
        "int * ar [ n ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int ev’"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "while ( cin >> n )",
        "ev = ev ;"
      ],
      "err_line": 5,
      "err_msg": "‘ar’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        5
      ],
      "mod_code": [
        "while ( cin >> n )",
        "ev = ev ;",
        "cout << ar [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘ar’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        5,
        3
      ],
      "mod_code": [
        "while ( cin >> n )",
        "ev = ev ;",
        "cout << ar [ i ] ;",
        "int * ar [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘ar’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        3
      ],
      "mod_code": [
        "while ( cin >> n )",
        "ev = ev ;",
        "int * ar [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘ar’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "while ( cin >> n )",
        "cout << ar [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘ar’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        3
      ],
      "mod_code": [
        "while ( cin >> n )",
        "cout << ar [ i ] ;",
        "int * ar [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘ar’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "while ( cin >> n )",
        "int * ar [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘ar’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        5,
        3
      ],
      "mod_code": [
        "ev = ev ;",
        "cout << ar [ i ] ;",
        "int * ar [ n ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int*’ and ‘int’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "ev = ev ;",
        "int * ar [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int*’)"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "cout << ar [ i ] ;",
        "int * ar [ n ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int*’ and ‘int’ to binary ‘operator%’"
    }
  ]
}