{
  "meta": {
    "index": 1435,
    "hitid": "3YCT0L9OMM38XABX1C0UCAPYOONNS3",
    "workerid": "AUD1I8FZAO4VF",
    "probid": "259A",
    "subid": "47372585"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let chess be a vector of strings with size 8",
      "code": "vector < string > chess ( 8 ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 0 to 8 exclusive read chess [ i ]",
      "code": "for ( int i = 0 ; i < 8 ; i ++ ) cin >> chess [ i ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to 8 exclusive",
      "code": "for ( int i = 0 ; i < 8 ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for j = 0 to 7 exclusive",
      "code": "for ( int j = 0 ; j < 7 ; j ++ )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if chess [ i ] [ j ] is chess [ i ] [ j + 1 ]",
      "code": "if ( chess [ i ] [ j ] == chess [ i ] [ j + 1 ] )",
      "indent": 3
    },
    {
      "line": 6,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 9,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "vector < string > chess [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( j = 0 ; j < 7 ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( chess [ i ] [ j ] == chess [ i ] [ j + 1 )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( j = 0 ; j < 7 ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( j = 0 ; j < 7 ; j ++ )",
        "if ( chess [ i ] [ j ] == chess [ i ] [ j + 1 )"
      ],
      "err_line": 3,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( j = 0 ; j < 7 ; j ++ )",
        "if ( chess [ i ] [ j ] == chess [ i ] [ j + 1 )",
        "vector < string > chess [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        3,
        4,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( j = 0 ; j < 7 ; j ++ )",
        "vector < string > chess [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )",
        "if ( chess [ i ] [ j ] == chess [ i ] [ j + 1 )"
      ],
      "err_line": 3,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )",
        "if ( chess [ i ] [ j ] == chess [ i ] [ j + 1 )",
        "vector < string > chess [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )",
        "vector < string > chess [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "for ( j = 0 ; j < 7 ; j ++ )",
        "if ( chess [ i ] [ j ] == chess [ i ] [ j + 1 )"
      ],
      "err_line": 4,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        1
      ],
      "mod_code": [
        "for ( j = 0 ; j < 7 ; j ++ )",
        "if ( chess [ i ] [ j ] == chess [ i ] [ j + 1 )",
        "vector < string > chess [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "for ( j = 0 ; j < 7 ; j ++ )",
        "vector < string > chess [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "if ( chess [ i ] [ j ] == chess [ i ] [ j + 1 )",
        "vector < string > chess [ 8 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    }
  ]
}