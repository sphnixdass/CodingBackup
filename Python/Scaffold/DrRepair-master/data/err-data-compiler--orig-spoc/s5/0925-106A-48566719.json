{
  "meta": {
    "index": 925,
    "hitid": "3421H3BM9ABU95ODD88B283RNGR9J8",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "106A",
    "subid": "48566719"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare ranki taking in string s and returning integer",
      "code": "int ranki ( string s )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if s [ 0 ] is equal to ' A ' , return 1",
      "code": "if ( s [ 0 ] == ' A ' ) { return 1 ; }",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if s [ 0 ] is equal to ' K ' , return 2",
      "code": "if ( s [ 0 ] == ' K ' ) { return 2 ; }",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if s [ 0 ] is equal to ' Q ' , return 3",
      "code": "if ( s [ 0 ] == ' Q ' ) { return 3 ; }",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if s [ 0 ] is equal to ' J ' , return 4",
      "code": "if ( s [ 0 ] == ' J ' ) { return 4 ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if s [ 0 ] is equal to ' A ' , return 5",
      "code": "if ( s [ 0 ] == ' A ' ) { return 5 ; }",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if s [ 0 ] is equal to ' T ' , return 6",
      "code": "if ( s [ 0 ] == ' T ' ) { return 6 ; }",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if s [ 0 ] is equal to ' 9 ' , return 7",
      "code": "if ( s [ 0 ] == ' 9 ' ) { return 7 ; }",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if s [ 0 ] is equal to ' 8 ' , return 8",
      "code": "if ( s [ 0 ] == ' 8 ' ) { return 8 ; }",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if s [ 0 ] is equal to ' 7 ' , return 9",
      "code": "if ( s [ 0 ] == ' 7 ' ) { return 9 ; }",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if s [ 0 ] is equal to ' 6 ' , return 10",
      "code": "if ( s [ 0 ] == ' 6 ' ) { return 10 ; }",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 13,
      "text": "make string str",
      "code": "string str ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "create strings str1 and str2",
      "code": "string str1 , str2 ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "read str1 and str2",
      "code": "cin >> str1 >> str2 ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if str1 [ 1 ] is str2 [ 1 ]",
      "code": "if ( str1 [ 1 ] == str2 [ 1 ] )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if ranki ( str1 ) is less than ranki ( str2 )",
      "code": "if ( ranki ( str1 ) < ranki ( str2 ) )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "else do",
      "code": "else",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "if str [ 1 ] is equal to str [ 0 ] and str2 [ 1 ] is not equal to str [ 0 ]",
      "code": "if ( str1 [ 1 ] == str [ 0 ] && str2 [ 1 ] != str [ 0 ] )",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string ranki ( string s )"
      ],
      "err_line": 1,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 14,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "string str1 create str2 ;"
      ],
      "err_line": 15,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "int str1 >> str2 ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "if ( ranki ( str1 ) is ranki ( str2 ) )"
      ],
      "err_line": 18,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        15
      ],
      "mod_code": [
        "if ( str [ 1 ] == str [ 0 ] && str2 [ 1 ] != str [ 0 ] )",
        "string str1 create str2 ;"
      ],
      "err_line": 15,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        26,
        15,
        14
      ],
      "mod_code": [
        "if ( str [ 1 ] == str [ 0 ] && str2 [ 1 ] != str [ 0 ] )",
        "string str1 create str2 ;",
        "gets ( str ) ;"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        26,
        15,
        14,
        16
      ],
      "mod_code": [
        "if ( str [ 1 ] == str [ 0 ] && str2 [ 1 ] != str [ 0 ] )",
        "string str1 create str2 ;",
        "gets ( str ) ;",
        "int str1 >> str2 ;"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        26,
        15,
        14,
        21
      ],
      "mod_code": [
        "if ( str [ 1 ] == str [ 0 ] && str2 [ 1 ] != str [ 0 ] )",
        "string str1 create str2 ;",
        "gets ( str ) ;",
        "else do"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        26,
        15,
        16
      ],
      "mod_code": [
        "if ( str [ 1 ] == str [ 0 ] && str2 [ 1 ] != str [ 0 ] )",
        "string str1 create str2 ;",
        "int str1 >> str2 ;"
      ],
      "err_line": 15,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        26,
        15,
        16,
        21
      ],
      "mod_code": [
        "if ( str [ 1 ] == str [ 0 ] && str2 [ 1 ] != str [ 0 ] )",
        "string str1 create str2 ;",
        "int str1 >> str2 ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        26,
        15,
        21
      ],
      "mod_code": [
        "if ( str [ 1 ] == str [ 0 ] && str2 [ 1 ] != str [ 0 ] )",
        "string str1 create str2 ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        26,
        14
      ],
      "mod_code": [
        "if ( str [ 1 ] == str [ 0 ] && str2 [ 1 ] != str [ 0 ] )",
        "gets ( str ) ;"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        26,
        14,
        16
      ],
      "mod_code": [
        "if ( str [ 1 ] == str [ 0 ] && str2 [ 1 ] != str [ 0 ] )",
        "gets ( str ) ;",
        "int str1 >> str2 ;"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        26,
        14,
        16,
        21
      ],
      "mod_code": [
        "if ( str [ 1 ] == str [ 0 ] && str2 [ 1 ] != str [ 0 ] )",
        "gets ( str ) ;",
        "int str1 >> str2 ;",
        "else do"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        26,
        14,
        21
      ],
      "mod_code": [
        "if ( str [ 1 ] == str [ 0 ] && str2 [ 1 ] != str [ 0 ] )",
        "gets ( str ) ;",
        "else do"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        26,
        16
      ],
      "mod_code": [
        "if ( str [ 1 ] == str [ 0 ] && str2 [ 1 ] != str [ 0 ] )",
        "int str1 >> str2 ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        26,
        16,
        21
      ],
      "mod_code": [
        "if ( str [ 1 ] == str [ 0 ] && str2 [ 1 ] != str [ 0 ] )",
        "int str1 >> str2 ;",
        "else do"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        26,
        21
      ],
      "mod_code": [
        "if ( str [ 1 ] == str [ 0 ] && str2 [ 1 ] != str [ 0 ] )",
        "else do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        14
      ],
      "mod_code": [
        "string str1 create str2 ;",
        "gets ( str ) ;"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        15,
        14,
        16
      ],
      "mod_code": [
        "string str1 create str2 ;",
        "gets ( str ) ;",
        "int str1 >> str2 ;"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        15,
        14,
        16,
        26
      ],
      "mod_code": [
        "string str1 create str2 ;",
        "gets ( str ) ;",
        "int str1 >> str2 ;",
        "if ( str [ 1 ] == str [ 0 ] and str2 [ 1 ] != str [ 0 ] )"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        15,
        14,
        16,
        21
      ],
      "mod_code": [
        "string str1 create str2 ;",
        "gets ( str ) ;",
        "int str1 >> str2 ;",
        "else do"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        15,
        14,
        26
      ],
      "mod_code": [
        "string str1 create str2 ;",
        "gets ( str ) ;",
        "if ( str [ 1 ] == str [ 0 ] and str2 [ 1 ] != str [ 0 ] )"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        15,
        14,
        26,
        21
      ],
      "mod_code": [
        "string str1 create str2 ;",
        "gets ( str ) ;",
        "if ( str [ 1 ] == str [ 0 ] and str2 [ 1 ] != str [ 0 ] )",
        "else do"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        15,
        14,
        21
      ],
      "mod_code": [
        "string str1 create str2 ;",
        "gets ( str ) ;",
        "else do"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        15,
        16
      ],
      "mod_code": [
        "string str1 create str2 ;",
        "int str1 >> str2 ;"
      ],
      "err_line": 15,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        15,
        16,
        26
      ],
      "mod_code": [
        "string str1 create str2 ;",
        "int str1 >> str2 ;",
        "if ( str [ 1 ] == str [ 0 ] and str2 [ 1 ] != str [ 0 ] )"
      ],
      "err_line": 15,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        15,
        16,
        26,
        21
      ],
      "mod_code": [
        "string str1 create str2 ;",
        "int str1 >> str2 ;",
        "if ( str [ 1 ] == str [ 0 ] and str2 [ 1 ] != str [ 0 ] )",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        15,
        16,
        21
      ],
      "mod_code": [
        "string str1 create str2 ;",
        "int str1 >> str2 ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        15,
        26
      ],
      "mod_code": [
        "string str1 create str2 ;",
        "if ( str [ 1 ] == str [ 0 ] and str2 [ 1 ] != str [ 0 ] )"
      ],
      "err_line": 15,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        15,
        26,
        21
      ],
      "mod_code": [
        "string str1 create str2 ;",
        "if ( str [ 1 ] == str [ 0 ] and str2 [ 1 ] != str [ 0 ] )",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        15,
        21
      ],
      "mod_code": [
        "string str1 create str2 ;",
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        14,
        16
      ],
      "mod_code": [
        "gets ( str ) ;",
        "int str1 >> str2 ;"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        14,
        16,
        26
      ],
      "mod_code": [
        "gets ( str ) ;",
        "int str1 >> str2 ;",
        "if ( str [ 1 ] == str [ 0 ] and str2 [ 1 ] != str [ 0 ] )"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        14,
        16,
        26,
        21
      ],
      "mod_code": [
        "gets ( str ) ;",
        "int str1 >> str2 ;",
        "if ( str [ 1 ] == str [ 0 ] and str2 [ 1 ] != str [ 0 ] )",
        "else do"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        14,
        16,
        21
      ],
      "mod_code": [
        "gets ( str ) ;",
        "int str1 >> str2 ;",
        "else do"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        14,
        26
      ],
      "mod_code": [
        "gets ( str ) ;",
        "if ( str [ 1 ] == str [ 0 ] and str2 [ 1 ] != str [ 0 ] )"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        14,
        26,
        21
      ],
      "mod_code": [
        "gets ( str ) ;",
        "if ( str [ 1 ] == str [ 0 ] and str2 [ 1 ] != str [ 0 ] )",
        "else do"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        14,
        21
      ],
      "mod_code": [
        "gets ( str ) ;",
        "else do"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        16,
        26
      ],
      "mod_code": [
        "int str1 >> str2 ;",
        "if ( str [ 1 ] == str [ 0 ] and str2 [ 1 ] != str [ 0 ] )"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        16,
        26,
        21
      ],
      "mod_code": [
        "int str1 >> str2 ;",
        "if ( str [ 1 ] == str [ 0 ] and str2 [ 1 ] != str [ 0 ] )",
        "else do"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        16,
        21
      ],
      "mod_code": [
        "int str1 >> str2 ;",
        "else do"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘>>’ token"
    },
    {
      "mod_line": [
        26,
        21
      ],
      "mod_code": [
        "if ( str [ 1 ] == str [ 0 ] and str2 [ 1 ] != str [ 0 ] )",
        "else do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}