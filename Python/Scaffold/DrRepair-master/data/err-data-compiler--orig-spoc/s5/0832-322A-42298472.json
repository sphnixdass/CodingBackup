{
  "meta": {
    "index": 832,
    "hitid": "33J5JKFMK6SPGQ3ARPRA8WCR0WBQ3Q",
    "workerid": "AIWEXPJAU66D9",
    "probid": "322A",
    "subid": "42298472"
  },
  "lines": [
    {
      "line": 0,
      "text": "in the integer function mo with integer argument n",
      "code": "int mo ( int n )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let p be integer = 1",
      "code": "int p = 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "loop decrementing n and multiplying p by 2 on every iteration",
      "code": "while ( n -- ) p = p * 2 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return p",
      "code": "return p ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "fun is a boolean function with string arguments s and p",
      "code": "bool fun ( string s , string p )",
      "indent": 0
    },
    {
      "line": 6,
      "text": "return false if length of s is less than length of p",
      "code": "if ( s . size ( ) < p . size ( ) ) return false ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "declare integers i and j = 0",
      "code": "int i = 0 , j = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "while i < length of s & & j is < length of p",
      "code": "while ( i < s . size ( ) && j < p . size ( ) )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if s [ i ] = p [ j ]",
      "code": "if ( s [ i ] == p [ j ] )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "increment j",
      "code": "j ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 13,
      "text": "increase i by one",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if length of p = j",
      "code": "if ( p . size ( ) == j )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "return true",
      "code": "return true ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 18,
      "text": "return false",
      "code": "return false ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 20,
      "text": "boolean function cm with vector of int arguments v1 and v2",
      "code": "bool cm ( vector < int > v1 , vector < int > v2 )",
      "indent": 0
    },
    {
      "line": 21,
      "text": "if v1 [ 0 ] ! = v2 [ 0 ]",
      "code": "if ( v1 [ 0 ] != v2 [ 0 ] )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "return v1 [ 0 ] > v2 [ 0 ]",
      "code": "return v1 [ 0 ] > v2 [ 0 ] ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 24,
      "text": "return v1 [ 1 ] < v2 [ 1 ]",
      "code": "return v1 [ 1 ] < v2 [ 1 ] ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 27,
      "text": "declare integers n and m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "print n - 1 + m - 1 + 1 and a new line",
      "code": "cout << n - 1 + m - 1 + 1 << endl ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "for i = 1 to m inclusive print 1 , \" \" , i and a new line",
      "code": "for ( int i = 1 ; i <= m ; i ++ ) cout << 1 << \" \" << i << endl ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "for i = 2 to n inclusive print i , \" \" , 1 and a new line",
      "code": "for ( int i = 2 ; i <= n ; i ++ ) cout << i << \" \" << 1 << endl ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void mo ( int n )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "bool fun ( string s and string p )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "bool cm ( vector < int v1 , vector < int > v2 )"
      ],
      "err_line": 20,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )"
      ],
      "err_line": 21,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        9,
        28
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "cin >> m >> m ;"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        28,
        0
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "cin >> m >> m ;",
        "void mo ( int n )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        28,
        0,
        21
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "cin >> m >> m ;",
        "void mo ( int n )",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        28,
        0,
        20
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "cin >> m >> m ;",
        "void mo ( int n )",
        "bool cm ( vector < int v1 , vector < int > v2 )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        28,
        0,
        5
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "cin >> m >> m ;",
        "void mo ( int n )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        28,
        21
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "cin >> m >> m ;",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        28,
        21,
        20
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "cin >> m >> m ;",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )",
        "bool cm ( vector < int v1 , vector < int > v2 )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        28,
        21,
        5
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "cin >> m >> m ;",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        9,
        28,
        20
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "cin >> m >> m ;",
        "bool cm ( vector < int v1 , vector < int > v2 )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        28,
        20,
        5
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "cin >> m >> m ;",
        "bool cm ( vector < int v1 , vector < int > v2 )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        9,
        28,
        5
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "cin >> m >> m ;",
        "bool fun ( string s and string p )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "void mo ( int n )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        0,
        21
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "void mo ( int n )",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        0,
        21,
        20
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "void mo ( int n )",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )",
        "bool cm ( vector < int v1 , vector < int > v2 )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        0,
        21,
        5
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "void mo ( int n )",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        0,
        20
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "void mo ( int n )",
        "bool cm ( vector < int v1 , vector < int > v2 )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        0,
        20,
        5
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "void mo ( int n )",
        "bool cm ( vector < int v1 , vector < int > v2 )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        0,
        5
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "void mo ( int n )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        21
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        21,
        20
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )",
        "bool cm ( vector < int v1 , vector < int > v2 )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        21,
        20,
        5
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )",
        "bool cm ( vector < int v1 , vector < int > v2 )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        9,
        21,
        5
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        9,
        20
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "bool cm ( vector < int v1 , vector < int > v2 )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        20,
        5
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "bool cm ( vector < int v1 , vector < int > v2 )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "if ( s [ i ] == p [ j ] ) break ;",
        "bool fun ( string s and string p )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        28,
        0
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "void mo ( int n )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        28,
        0,
        21
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "void mo ( int n )",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        28,
        0,
        21,
        20
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "void mo ( int n )",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )",
        "bool cm ( vector < int v1 , vector < int > v2 )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        28,
        0,
        21,
        5
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "void mo ( int n )",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        28,
        0,
        20
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "void mo ( int n )",
        "bool cm ( vector < int v1 , vector < int > v2 )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        28,
        0,
        20,
        5
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "void mo ( int n )",
        "bool cm ( vector < int v1 , vector < int > v2 )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        28,
        0,
        5
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "void mo ( int n )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        28,
        21
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )"
      ],
      "err_line": 21,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        28,
        21,
        20
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )",
        "bool cm ( vector < int v1 , vector < int > v2 )"
      ],
      "err_line": 20,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        28,
        21,
        20,
        5
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )",
        "bool cm ( vector < int v1 , vector < int > v2 )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        28,
        21,
        5
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        28,
        20
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "bool cm ( vector < int v1 , vector < int > v2 )"
      ],
      "err_line": 20,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        28,
        20,
        5
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "bool cm ( vector < int v1 , vector < int > v2 )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        28,
        5
      ],
      "mod_code": [
        "cin >> m >> m ;",
        "bool fun ( string s and string p )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        0,
        21
      ],
      "mod_code": [
        "void mo ( int n )",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        21,
        20
      ],
      "mod_code": [
        "void mo ( int n )",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )",
        "bool cm ( vector < int v1 , vector < int > v2 )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        21,
        20,
        5
      ],
      "mod_code": [
        "void mo ( int n )",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )",
        "bool cm ( vector < int v1 , vector < int > v2 )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        21,
        5
      ],
      "mod_code": [
        "void mo ( int n )",
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        20
      ],
      "mod_code": [
        "void mo ( int n )",
        "bool cm ( vector < int v1 , vector < int > v2 )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        20,
        5
      ],
      "mod_code": [
        "void mo ( int n )",
        "bool cm ( vector < int v1 , vector < int > v2 )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "void mo ( int n )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        21,
        20
      ],
      "mod_code": [
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )",
        "bool cm ( vector < int v1 , vector < int > v2 )"
      ],
      "err_line": 20,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        21,
        20,
        5
      ],
      "mod_code": [
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )",
        "bool cm ( vector < int v1 , vector < int > v2 )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        21,
        5
      ],
      "mod_code": [
        "if ( v1 [ 0 ] ] != v2 [ 0 ] )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    },
    {
      "mod_line": [
        20,
        5
      ],
      "mod_code": [
        "bool cm ( vector < int v1 , vector < int > v2 )",
        "bool fun ( string s and string p )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘...’ before ‘and’ token"
    }
  ]
}