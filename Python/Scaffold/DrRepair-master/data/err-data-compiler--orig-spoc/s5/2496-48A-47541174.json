{
  "meta": {
    "index": 2496,
    "hitid": "3VDVA3ILID92TYVH1P8FQPTSWA91G5",
    "workerid": "AIWEXPJAU66D9",
    "probid": "48A",
    "subid": "47541174"
  },
  "lines": [
    {
      "line": 0,
      "text": "integer function checker with string arguments a and b",
      "code": "int checker ( string a , string b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if a is equal to \" rock \" & & b is equal to \" scissors \"",
      "code": "if ( a == \" rock \" && b == \" scissors \" )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "else if a is equal to \" scissors \" & & b is equal to \" paper \"",
      "code": "else if ( a == \" scissors \" && b == \" paper \" )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else if a is \" paper \" and b is \" rock \"",
      "code": "else if ( a == \" paper \" && b == \" rock \" )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else if b is \" rock \" and a is \" scissors \"",
      "code": "else if ( b == \" rock \" && a == \" scissors \" )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return 1",
      "code": "return 1 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else if b = \" scissors \" and a = \" paper \"",
      "code": "else if ( b == \" scissors \" && a == \" paper \" )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "return 1",
      "code": "return 1 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else if b = \" paper \" and a = \" rock \"",
      "code": "else if ( b == \" paper \" && a == \" rock \" )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "return 1",
      "code": "return 1 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "return 2",
      "code": "return 2 ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 17,
      "text": "let F , M and S be strings",
      "code": "string F , M , S ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "read F , M and S",
      "code": "cin >> F >> M >> S ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "create integer f with value - 1",
      "code": "int f = - 1 ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if checker ( F , M ) is 0",
      "code": "if ( checker ( F , M ) == 0 )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if checker ( F , S ) is 0",
      "code": "if ( checker ( F , S ) == 0 )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print \" F \" and a new line",
      "code": "cout << \" F \" << endl ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if checker ( F , S ) is 1",
      "code": "if ( checker ( F , S ) == 1 )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "if checker ( S , M ) is 1",
      "code": "if ( checker ( S , M ) == 1 )",
      "indent": 3
    },
    {
      "line": 27,
      "text": "print \" ? \" and a new line",
      "code": "cout << \" ? \" << endl ;",
      "indent": 4
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 30,
      "text": "print \" S \" and a new line",
      "code": "cout << \" S \" << endl ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 33,
      "text": "if checker ( F , S ) is 2",
      "code": "if ( checker ( F , S ) == 2 )",
      "indent": 2
    },
    {
      "line": 34,
      "text": "print \" ? \" and a new line",
      "code": "cout << \" ? \" << endl ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 38,
      "text": "if checker ( F , M ) is 1",
      "code": "if ( checker ( F , M ) == 1 )",
      "indent": 1
    },
    {
      "line": 39,
      "text": "if checker ( M , S ) is 0",
      "code": "if ( checker ( M , S ) == 0 )",
      "indent": 2
    },
    {
      "line": 40,
      "text": "print \" M \" and a new line",
      "code": "cout << \" M \" << endl ;",
      "indent": 3
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 43,
      "text": "if checker ( M , S ) returned 1",
      "code": "if ( checker ( M , S ) == 1 )",
      "indent": 2
    },
    {
      "line": 44,
      "text": "if checker ( S , F ) returned 1",
      "code": "if ( checker ( S , F ) == 1 )",
      "indent": 3
    },
    {
      "line": 45,
      "text": "print \" ? \" and a new line",
      "code": "cout << \" ? \" << endl ;",
      "indent": 4
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 48,
      "text": "print \" S \" and a new line",
      "code": "cout << \" S \" << endl ;",
      "indent": 3
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 51,
      "text": "if checker ( M , S ) returned 2",
      "code": "if ( checker ( M , S ) == 2 )",
      "indent": 2
    },
    {
      "line": 52,
      "text": "print \" ? \" and a new line",
      "code": "cout << \" ? \" << endl ;",
      "indent": 3
    },
    {
      "line": 53,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 54,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 55,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 56,
      "text": "if checker ( F , M ) returned 2",
      "code": "if ( checker ( F , M ) == 2 )",
      "indent": 1
    },
    {
      "line": 57,
      "text": "if checker ( F , S ) returned 0",
      "code": "if ( checker ( F , S ) == 0 )",
      "indent": 2
    },
    {
      "line": 58,
      "text": "print \" ? \" and a new line",
      "code": "cout << \" ? \" << endl ;",
      "indent": 3
    },
    {
      "line": 59,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 60,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 61,
      "text": "if checker ( F , S ) is 1",
      "code": "if ( checker ( F , S ) == 1 )",
      "indent": 2
    },
    {
      "line": 62,
      "text": "print \" S \" and a new line",
      "code": "cout << \" S \" << endl ;",
      "indent": 3
    },
    {
      "line": 63,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 64,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 65,
      "text": "if checker ( F , S ) is 2",
      "code": "if ( checker ( F , S ) == 2 )",
      "indent": 2
    },
    {
      "line": 66,
      "text": "print \" ? \" and a new line",
      "code": "cout << \" ? \" << endl ;",
      "indent": 3
    },
    {
      "line": 67,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 68,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 69,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 70,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 71,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string checker ( string a , string b )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "string F , M , n ;"
      ],
      "err_line": 18,
      "err_msg": "‘S’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "cin >> F >> M >> n ;"
      ],
      "err_line": 18,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "if ( checker ( F ( M ) ) == 0 )"
      ],
      "err_line": 20,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( checker ( F ( S ) ) == 0 )"
      ],
      "err_line": 21,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 25,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "if ( checker ( F ( S ) ) == 2 )"
      ],
      "err_line": 33,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "if ( checker ( F ( M ) ) == 1 )"
      ],
      "err_line": 38,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        51
      ],
      "mod_code": [
        "if ( checker ( M , ' S ' ) == 2 )"
      ],
      "err_line": 51,
      "err_msg": "could not convert ‘'S'’ from ‘char’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        56
      ],
      "mod_code": [
        "if ( checker ( F ( M ) ) == 2 )"
      ],
      "err_line": 56,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        61
      ],
      "mod_code": [
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 61,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        65
      ],
      "mod_code": [
        "if ( checker ( F ( S ) ) == 2 )"
      ],
      "err_line": 65,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        0,
        43
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( M , S ) )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        43,
        33
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 2 )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        43,
        33,
        61
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        43,
        33,
        25
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        43,
        33,
        57
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        43,
        61
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        43,
        61,
        25
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        43,
        61,
        57
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        43,
        25
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        43,
        25,
        57
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        43,
        57
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( M , S ) )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        33
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( F ( S ) ) == 2 )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        33,
        61
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        33,
        61,
        25
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        33,
        61,
        57
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        33,
        25
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        33,
        25,
        57
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        33,
        57
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        61
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        61,
        25
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        61,
        25,
        57
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        61,
        57
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        25
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        25,
        57
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        57
      ],
      "mod_code": [
        "string checker ( string a , string b )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 8,
      "err_msg": "could not convert ‘1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        43,
        33
      ],
      "mod_code": [
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 2 )"
      ],
      "err_line": 33,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        43,
        33,
        61
      ],
      "mod_code": [
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 33,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        43,
        33,
        61,
        25
      ],
      "mod_code": [
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 25,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        43,
        33,
        61,
        57
      ],
      "mod_code": [
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 33,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        43,
        33,
        25
      ],
      "mod_code": [
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 25,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        43,
        33,
        25,
        57
      ],
      "mod_code": [
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 25,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        43,
        33,
        57
      ],
      "mod_code": [
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 33,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        43,
        61
      ],
      "mod_code": [
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 61,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        43,
        61,
        25
      ],
      "mod_code": [
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 25,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        43,
        61,
        25,
        57
      ],
      "mod_code": [
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 25,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        43,
        61,
        57
      ],
      "mod_code": [
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 61,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        43,
        25
      ],
      "mod_code": [
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 25,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        43,
        25,
        57
      ],
      "mod_code": [
        "if ( checker ( M , S ) )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 25,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        33,
        61
      ],
      "mod_code": [
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 33,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        33,
        61,
        25
      ],
      "mod_code": [
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 25,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        33,
        61,
        25,
        57
      ],
      "mod_code": [
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 25,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        33,
        61,
        57
      ],
      "mod_code": [
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 33,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        33,
        25
      ],
      "mod_code": [
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 25,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        33,
        25,
        57
      ],
      "mod_code": [
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 25,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        33,
        57
      ],
      "mod_code": [
        "if ( checker ( F ( S ) ) == 2 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 33,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        61,
        25
      ],
      "mod_code": [
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F ( S ) ) == 1 )"
      ],
      "err_line": 25,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        61,
        25,
        57
      ],
      "mod_code": [
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 25,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        61,
        57
      ],
      "mod_code": [
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 61,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        25,
        57
      ],
      "mod_code": [
        "if ( checker ( F ( S ) ) == 1 )",
        "if ( checker ( F , S ) )"
      ],
      "err_line": 25,
      "err_msg": "no match for call to ‘(std::__cxx11::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::string&)’"
    }
  ]
}