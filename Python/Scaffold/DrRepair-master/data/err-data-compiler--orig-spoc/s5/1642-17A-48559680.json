{
  "meta": {
    "index": 1642,
    "hitid": "34D9ZRXCYRO1DRH8S8VPQ45YOF8SA3",
    "workerid": "AIWEXPJAU66D9",
    "probid": "17A",
    "subid": "48559680"
  },
  "lines": [
    {
      "line": 0,
      "text": "p is array of booleans of length 1010",
      "code": "bool p [ 1010 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let ok be an array of booleans of length 1010",
      "code": "bool ok [ 1010 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "invoke function memset with arguments p , true and size of p",
      "code": "memset ( p , true , sizeof ( p ) ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set p [ 0 ] and p [ 1 ] to false",
      "code": "p [ 0 ] = p [ 1 ] = false ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to 1010 exclusive",
      "code": "for ( int i = 0 ; i < ( 1010 ) ; ++ i )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if p [ i ] is true",
      "code": "if ( p [ i ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for integer j = i + i to 1010 exclusive incrementing by i set p [ j ] to false",
      "code": "for ( int j = i + i ; j < 1010 ; j += i ) p [ j ] = false ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 9,
      "text": "for integer i = 0 to 1010 exclusive",
      "code": "for ( int i = 0 ; i < ( 1010 ) ; ++ i )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if p [ i ] is true",
      "code": "if ( p [ i ] )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "for integer j = from i + 1 to 1009 inclusive",
      "code": "for ( int j = ( i + 1 ) ; j <= ( 1009 ) ; ++ j )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "if p [ j ] is true",
      "code": "if ( p [ j ] )",
      "indent": 4
    },
    {
      "line": 13,
      "text": "if i + j is less or equal 1000 set ok [ i + j ] to true",
      "code": "if ( i + j <= 1000 ) ok [ i + j ] = true ;",
      "indent": 5
    },
    {
      "line": 14,
      "text": "break the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "declare integers called n and k",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "set integer r to 0",
      "code": "int r = 0 ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "for integer i = 2 to n inclusive",
      "code": "for ( int i = ( 2 ) ; i <= ( n ) ; ++ i )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if ok [ i - 1 ] and p [ i ] are true incremement r",
      "code": "if ( ok [ i - 1 ] && p [ i ] ) ++ r ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if r is greater or equal than k",
      "code": "if ( r >= k )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 25,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( ok [ i - 1 ] && p [ i ] )"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < 1010 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "break the ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        3,
        21
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "if ( ok [ i - 1 ] && p [ i ] )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        21,
        23
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "if ( ok [ i - 1 ] && p [ i ] )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        21,
        23,
        18
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "if ( ok [ i - 1 ] && p [ i ] )",
        "cout << \" YES\\n \" << endl ;",
        "cin >> n and k ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        21,
        23,
        22
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "if ( ok [ i - 1 ] && p [ i ] )",
        "cout << \" YES\\n \" << endl ;",
        "if ( r >= 1 )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        21,
        23,
        14
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "if ( ok [ i - 1 ] && p [ i ] )",
        "cout << \" YES\\n \" << endl ;",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        21,
        18
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "if ( ok [ i - 1 ] && p [ i ] )",
        "cin >> n and k ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        21,
        18,
        22
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "if ( ok [ i - 1 ] && p [ i ] )",
        "cin >> n and k ;",
        "if ( r >= 1 )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        21,
        18,
        14
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "if ( ok [ i - 1 ] && p [ i ] )",
        "cin >> n and k ;",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        21,
        22
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "if ( ok [ i - 1 ] && p [ i ] )",
        "if ( r >= 1 )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        21,
        22,
        14
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "if ( ok [ i - 1 ] && p [ i ] )",
        "if ( r >= 1 )",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        21,
        14
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "if ( ok [ i - 1 ] && p [ i ] )",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        23
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        23,
        18
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "cout << \" YES\\n \" << endl ;",
        "cin >> n and k ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        23,
        18,
        22
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "cout << \" YES\\n \" << endl ;",
        "cin >> n and k ;",
        "if ( r >= 1 )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        23,
        18,
        14
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "cout << \" YES\\n \" << endl ;",
        "cin >> n and k ;",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        23,
        22
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "cout << \" YES\\n \" << endl ;",
        "if ( r >= 1 )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        23,
        22,
        14
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "cout << \" YES\\n \" << endl ;",
        "if ( r >= 1 )",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        23,
        14
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "cout << \" YES\\n \" << endl ;",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        18
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "cin >> n and k ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        18,
        22
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "cin >> n and k ;",
        "if ( r >= 1 )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        18,
        22,
        14
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "cin >> n and k ;",
        "if ( r >= 1 )",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        18,
        14
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "cin >> n and k ;",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        22
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "if ( r >= 1 )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        22,
        14
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "if ( r >= 1 )",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "memset ( p , true , p . size ( ) ) ;",
        "break the ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘p’, which is of non-class type ‘bool [1010]’"
    },
    {
      "mod_line": [
        21,
        23
      ],
      "mod_code": [
        "if ( ok [ i - 1 ] && p [ i ] )",
        "cout << \" YES\\n \" << endl ;"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        23,
        18
      ],
      "mod_code": [
        "if ( ok [ i - 1 ] && p [ i ] )",
        "cout << \" YES\\n \" << endl ;",
        "cin >> n and k ;"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        23,
        18,
        22
      ],
      "mod_code": [
        "if ( ok [ i - 1 ] && p [ i ] )",
        "cout << \" YES\\n \" << endl ;",
        "cin >> n and k ;",
        "if ( r >= 1 )"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        23,
        18,
        14
      ],
      "mod_code": [
        "if ( ok [ i - 1 ] && p [ i ] )",
        "cout << \" YES\\n \" << endl ;",
        "cin >> n and k ;",
        "break the ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        21,
        23,
        22
      ],
      "mod_code": [
        "if ( ok [ i - 1 ] && p [ i ] )",
        "cout << \" YES\\n \" << endl ;",
        "if ( r >= 1 )"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        23,
        22,
        14
      ],
      "mod_code": [
        "if ( ok [ i - 1 ] && p [ i ] )",
        "cout << \" YES\\n \" << endl ;",
        "if ( r >= 1 )",
        "break the ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        21,
        23,
        14
      ],
      "mod_code": [
        "if ( ok [ i - 1 ] && p [ i ] )",
        "cout << \" YES\\n \" << endl ;",
        "break the ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        21,
        18
      ],
      "mod_code": [
        "if ( ok [ i - 1 ] && p [ i ] )",
        "cin >> n and k ;"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        18,
        22
      ],
      "mod_code": [
        "if ( ok [ i - 1 ] && p [ i ] )",
        "cin >> n and k ;",
        "if ( r >= 1 )"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        18,
        22,
        14
      ],
      "mod_code": [
        "if ( ok [ i - 1 ] && p [ i ] )",
        "cin >> n and k ;",
        "if ( r >= 1 )",
        "break the ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        21,
        18,
        14
      ],
      "mod_code": [
        "if ( ok [ i - 1 ] && p [ i ] )",
        "cin >> n and k ;",
        "break the ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        21,
        22
      ],
      "mod_code": [
        "if ( ok [ i - 1 ] && p [ i ] )",
        "if ( r >= 1 )"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        22,
        14
      ],
      "mod_code": [
        "if ( ok [ i - 1 ] && p [ i ] )",
        "if ( r >= 1 )",
        "break the ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        21,
        14
      ],
      "mod_code": [
        "if ( ok [ i - 1 ] && p [ i ] )",
        "break the ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        23,
        18,
        22,
        14
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "cin >> n and k ;",
        "if ( r >= 1 )",
        "break the ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        23,
        18,
        14
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "cin >> n and k ;",
        "break the ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        23,
        22,
        14
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "if ( r >= 1 )",
        "break the ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        23,
        14
      ],
      "mod_code": [
        "cout << \" YES\\n \" << endl ;",
        "break the ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        18,
        22,
        14
      ],
      "mod_code": [
        "cin >> n and k ;",
        "if ( r >= 1 )",
        "break the ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        18,
        14
      ],
      "mod_code": [
        "cin >> n and k ;",
        "break the ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    },
    {
      "mod_line": [
        22,
        14
      ],
      "mod_code": [
        "if ( r >= 1 )",
        "break the ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘the’"
    }
  ]
}