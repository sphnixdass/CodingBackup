{
  "meta": {
    "index": 2702,
    "hitid": "3X55NP42EOA4GE2VRCCL8RMHVLA3P3",
    "workerid": "AIWEXPJAU66D9",
    "probid": "16A",
    "subid": "44389549"
  },
  "lines": [
    {
      "line": 0,
      "text": "set boolean flag to true",
      "code": "bool flag = true ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n and m = integers",
      "code": "int n , m ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "s = array of strings of size 100",
      "code": "string s [ 100 ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "boolean function isRow with string argument s",
      "code": "bool isRow ( string s )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "create boolean result with value true",
      "code": "bool result = true ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for integer i = 1 to length of s exclusive",
      "code": "for ( int i = 1 ; i < s . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "result & = ( s [ i ] = = s [ i - 1 ] )",
      "code": "result &= ( s [ i ] == s [ i - 1 ] ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": ";",
      "code": ";",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "return result",
      "code": "return result ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 12,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read s [ i ]",
      "code": "cin >> s [ i ] ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "flag & = isRow ( s [ i ] )",
      "code": "flag &= isRow ( s [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = 1 to n exclusive do flag & = ( s [ i ] [ 0 ] ! = s [ i - 1 ] [ 0 ] )",
      "code": "for ( int i = 1 ; i < n ; i ++ ) { flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] [ 0 ] ) ; }",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if flag is true",
      "code": "if ( flag )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ ) { flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ; }"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s [ 100 ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ does not name a type"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "bool isRow ( string s ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "bool result create true ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "return ;"
      ],
      "err_line": 9,
      "err_msg": "return-statement with no value, in function returning ‘bool’ [-fpermissive]"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ ) flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "if ( flag ) return ;"
      ],
      "err_line": 18,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        15,
        17
      ],
      "mod_code": [
        "result = ( s [ i ] = s [ i - 1 ] ) ;",
        "flag = isRow ( s [ i ] ) ;",
        "for ( int i = 1 ; i < n ; i ++ ) { flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ; }"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        15,
        17,
        4
      ],
      "mod_code": [
        "result = ( s [ i ] = s [ i - 1 ] ) ;",
        "flag = isRow ( s [ i ] ) ;",
        "for ( int i = 1 ; i < n ; i ++ ) { flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ; }",
        "bool result create true ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        6,
        15,
        17,
        18
      ],
      "mod_code": [
        "result = ( s [ i ] = s [ i - 1 ] ) ;",
        "flag = isRow ( s [ i ] ) ;",
        "for ( int i = 1 ; i < n ; i ++ ) { flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ; }",
        "if ( flag ) return ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        15,
        4
      ],
      "mod_code": [
        "result = ( s [ i ] = s [ i - 1 ] ) ;",
        "flag = isRow ( s [ i ] ) ;",
        "bool result create true ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        6,
        15,
        4,
        18
      ],
      "mod_code": [
        "result = ( s [ i ] = s [ i - 1 ] ) ;",
        "flag = isRow ( s [ i ] ) ;",
        "bool result create true ;",
        "if ( flag ) return ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        6,
        15,
        4,
        17
      ],
      "mod_code": [
        "result = ( s [ i ] = s [ i - 1 ] ) ;",
        "flag = isRow ( s [ i ] ) ;",
        "bool result create true ;",
        "for ( int i = 1 ; i < n ; i ++ ) flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        6,
        15,
        18
      ],
      "mod_code": [
        "result = ( s [ i ] = s [ i - 1 ] ) ;",
        "flag = isRow ( s [ i ] ) ;",
        "if ( flag ) return ;"
      ],
      "err_line": 18,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        15,
        18,
        17
      ],
      "mod_code": [
        "result = ( s [ i ] = s [ i - 1 ] ) ;",
        "flag = isRow ( s [ i ] ) ;",
        "if ( flag ) return ;",
        "for ( int i = 1 ; i < n ; i ++ ) flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        15,
        17
      ],
      "mod_code": [
        "result = ( s [ i ] = s [ i - 1 ] ) ;",
        "flag = isRow ( s [ i ] ) ;",
        "for ( int i = 1 ; i < n ; i ++ ) flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "result = ( s [ i ] = s [ i - 1 ] ) ;",
        "for ( int i = 1 ; i < n ; i ++ ) { flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ; }"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        17,
        4
      ],
      "mod_code": [
        "result = ( s [ i ] = s [ i - 1 ] ) ;",
        "for ( int i = 1 ; i < n ; i ++ ) { flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ; }",
        "bool result create true ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        6,
        17,
        4,
        18
      ],
      "mod_code": [
        "result = ( s [ i ] = s [ i - 1 ] ) ;",
        "for ( int i = 1 ; i < n ; i ++ ) { flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ; }",
        "bool result create true ;",
        "if ( flag ) return ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        6,
        17,
        18
      ],
      "mod_code": [
        "result = ( s [ i ] = s [ i - 1 ] ) ;",
        "for ( int i = 1 ; i < n ; i ++ ) { flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ; }",
        "if ( flag ) return ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "result = ( s [ i ] = s [ i - 1 ] ) ;",
        "bool result create true ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        6,
        4,
        18
      ],
      "mod_code": [
        "result = ( s [ i ] = s [ i - 1 ] ) ;",
        "bool result create true ;",
        "if ( flag ) return ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        6,
        4,
        18,
        17
      ],
      "mod_code": [
        "result = ( s [ i ] = s [ i - 1 ] ) ;",
        "bool result create true ;",
        "if ( flag ) return ;",
        "for ( int i = 1 ; i < n ; i ++ ) flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        6,
        4,
        17
      ],
      "mod_code": [
        "result = ( s [ i ] = s [ i - 1 ] ) ;",
        "bool result create true ;",
        "for ( int i = 1 ; i < n ; i ++ ) flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        6,
        18
      ],
      "mod_code": [
        "result = ( s [ i ] = s [ i - 1 ] ) ;",
        "if ( flag ) return ;"
      ],
      "err_line": 18,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        18,
        17
      ],
      "mod_code": [
        "result = ( s [ i ] = s [ i - 1 ] ) ;",
        "if ( flag ) return ;",
        "for ( int i = 1 ; i < n ; i ++ ) flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "result = ( s [ i ] = s [ i - 1 ] ) ;",
        "for ( int i = 1 ; i < n ; i ++ ) flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        17
      ],
      "mod_code": [
        "flag = isRow ( s [ i ] ) ;",
        "for ( int i = 1 ; i < n ; i ++ ) { flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ; }"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        17,
        4
      ],
      "mod_code": [
        "flag = isRow ( s [ i ] ) ;",
        "for ( int i = 1 ; i < n ; i ++ ) { flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ; }",
        "bool result create true ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        15,
        17,
        4,
        18
      ],
      "mod_code": [
        "flag = isRow ( s [ i ] ) ;",
        "for ( int i = 1 ; i < n ; i ++ ) { flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ; }",
        "bool result create true ;",
        "if ( flag ) return ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        15,
        17,
        18
      ],
      "mod_code": [
        "flag = isRow ( s [ i ] ) ;",
        "for ( int i = 1 ; i < n ; i ++ ) { flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ; }",
        "if ( flag ) return ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        4
      ],
      "mod_code": [
        "flag = isRow ( s [ i ] ) ;",
        "bool result create true ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        15,
        4,
        18
      ],
      "mod_code": [
        "flag = isRow ( s [ i ] ) ;",
        "bool result create true ;",
        "if ( flag ) return ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        15,
        4,
        18,
        17
      ],
      "mod_code": [
        "flag = isRow ( s [ i ] ) ;",
        "bool result create true ;",
        "if ( flag ) return ;",
        "for ( int i = 1 ; i < n ; i ++ ) flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        15,
        4,
        17
      ],
      "mod_code": [
        "flag = isRow ( s [ i ] ) ;",
        "bool result create true ;",
        "for ( int i = 1 ; i < n ; i ++ ) flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        15,
        18
      ],
      "mod_code": [
        "flag = isRow ( s [ i ] ) ;",
        "if ( flag ) return ;"
      ],
      "err_line": 18,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        18,
        17
      ],
      "mod_code": [
        "flag = isRow ( s [ i ] ) ;",
        "if ( flag ) return ;",
        "for ( int i = 1 ; i < n ; i ++ ) flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        17
      ],
      "mod_code": [
        "flag = isRow ( s [ i ] ) ;",
        "for ( int i = 1 ; i < n ; i ++ ) flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        4
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ ) { flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ; }",
        "bool result create true ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        17,
        4,
        18
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ ) { flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ; }",
        "bool result create true ;",
        "if ( flag ) return ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        17,
        18
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ ) { flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ; }",
        "if ( flag ) return ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        18
      ],
      "mod_code": [
        "bool result create true ;",
        "if ( flag ) return ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        4,
        18,
        17
      ],
      "mod_code": [
        "bool result create true ;",
        "if ( flag ) return ;",
        "for ( int i = 1 ; i < n ; i ++ ) flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        4,
        17
      ],
      "mod_code": [
        "bool result create true ;",
        "for ( int i = 1 ; i < n ; i ++ ) flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        18,
        17
      ],
      "mod_code": [
        "if ( flag ) return ;",
        "for ( int i = 1 ; i < n ; i ++ ) flag &= ( s [ i ] [ 0 ] != s [ i - 1 ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator!=’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}