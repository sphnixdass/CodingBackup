{
  "meta": {
    "index": 535,
    "hitid": "3YO4AH2FPDETZY4D829R6YEKY7T0QI",
    "workerid": "A28TIENUWLMMIP",
    "probid": "821A",
    "subid": "46057748"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n be a long long integer",
      "code": "long long int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read in n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let a be a double array of integers of size n and n",
      "code": "long long int a [ n ] [ n ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let flag be a boolean , set flag to true",
      "code": "bool flag = true ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "iterate for n times",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read in n values into array a",
      "code": "for ( int j = 0 ; j < n ; j ++ ) cin >> a [ i ] [ j ] ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "iterate for n times",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "iterate for n times",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if a [ i ] [ j ] is equal to 1",
      "code": "if ( a [ i ] [ j ] == 1 )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "execute the next part of the loop",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "or else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 13,
      "text": "set flag to false",
      "code": "flag = false ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "iterate for n times",
      "code": "for ( int k = 0 ; k < n ; k ++ )",
      "indent": 4
    },
    {
      "line": 15,
      "text": "if k is equal to 1 , execute the next part of the loop",
      "code": "if ( k == i ) continue ;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "let x and y be long long integers",
      "code": "long long int x , y ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "set x to a [ k ] [ j ]",
      "code": "x = a [ k ] [ j ] ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "iterate for n times",
      "code": "for ( int l = 0 ; l < n ; l ++ )",
      "indent": 5
    },
    {
      "line": 19,
      "text": "if l is equal to j , execute the next part of the loop",
      "code": "if ( l == j ) continue ;",
      "indent": 6
    },
    {
      "line": 20,
      "text": "set y to a [ i ] [ l ]",
      "code": "y = a [ i ] [ l ] ;",
      "indent": 6
    },
    {
      "line": 21,
      "text": "if x + y is equal to a [ i ] [ j ]",
      "code": "if ( x + y == a [ i ] [ j ] )",
      "indent": 6
    },
    {
      "line": 22,
      "text": "set flag to true",
      "code": "flag = true ;",
      "indent": 7
    },
    {
      "line": 23,
      "text": "break out of the loop",
      "code": "break ;",
      "indent": 7
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 6
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 26,
      "text": "if flag is true , break out of the loop",
      "code": "if ( flag ) break ;",
      "indent": 5
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 29,
      "text": "if flag is false , break out of the loop",
      "code": "if ( flag == false ) break ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 31,
      "text": "if flag is false , break out of the loop",
      "code": "if ( flag == false ) break ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 33,
      "text": "if flag is true",
      "code": "if ( flag )",
      "indent": 1
    },
    {
      "line": 34,
      "text": "print YES",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "or else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 36,
      "text": "print NO",
      "code": "cout << \" No \" << endl ;",
      "indent": 2
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "double a [ n ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "while ( 1 )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "bool flag , true ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘true’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( k == 1 )"
      ],
      "err_line": 17,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "int x = a [ k ] [ j ] ;"
      ],
      "err_line": 17,
      "err_msg": "conflicting declaration ‘int x’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "if ( flag ) return ;"
      ],
      "err_line": 33,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 35,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        9
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        9,
        11
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        9,
        14
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        9,
        15
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        9,
        18
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        9,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        9,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        11
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        11,
        14
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        11,
        15
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        11,
        18
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        11,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        11,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        14
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        14,
        15
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        14,
        18
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        14,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        14,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        15
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        15,
        18
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        15,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "if ( k == 1 ) continue ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        15,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "if ( k == 1 ) continue ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        18
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        18,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        18,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        34,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        6,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        11
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        11,
        14
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        11,
        15
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        11,
        18
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        11,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        11,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        14
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        14,
        15
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        14,
        18
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        14,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        14,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        15
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        15,
        18
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        15,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        15,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        18
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        18,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        18,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        34,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "double a [ n ] ;",
        "while ( 1 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        14
      ],
      "mod_code": [
        "double a [ n ] ;",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        14,
        15
      ],
      "mod_code": [
        "double a [ n ] ;",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        14,
        18
      ],
      "mod_code": [
        "double a [ n ] ;",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        14,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        14,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        15
      ],
      "mod_code": [
        "double a [ n ] ;",
        "while ( 1 )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        15,
        18
      ],
      "mod_code": [
        "double a [ n ] ;",
        "while ( 1 )",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        15,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "while ( 1 )",
        "if ( k == 1 ) continue ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        15,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "while ( 1 )",
        "if ( k == 1 ) continue ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        18
      ],
      "mod_code": [
        "double a [ n ] ;",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        18,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        18,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "while ( 1 )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        34,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "while ( 1 )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "while ( 1 )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        14,
        15
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        14,
        15,
        18
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        14,
        15,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        14,
        15,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        14,
        18
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        14,
        18,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        14,
        18,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        14,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        14,
        34,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        14,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "double a [ n ] ;",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        15,
        18
      ],
      "mod_code": [
        "double a [ n ] ;",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        15,
        18,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        15,
        18,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        15,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "if ( k == 1 ) continue ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        15,
        34,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "if ( k == 1 ) continue ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        15,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "if ( k == 1 ) continue ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        18
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        18,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        18,
        34,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        18,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        34
      ],
      "mod_code": [
        "double a [ n ] ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        34,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        36
      ],
      "mod_code": [
        "double a [ n ] ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘double[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        9,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        9,
        11,
        14
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        9,
        11,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        9,
        11,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        9,
        11,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        9,
        11,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        9,
        14
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        9,
        14,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        9,
        14,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        9,
        14,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        9,
        14,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        9,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        9,
        15,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        9,
        15,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        9,
        15,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        9,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        9,
        18,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        9,
        18,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        9,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        9,
        34,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        9,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        11,
        14
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        11,
        14,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        11,
        14,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        11,
        14,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        11,
        14,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        11,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        11,
        15,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        11,
        15,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )",
        "if ( k == 1 ) continue ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        11,
        15,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )",
        "if ( k == 1 ) continue ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        11,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        11,
        18,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        11,
        18,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        11,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        11,
        34,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        11,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "while ( 1 )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        14,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        14,
        15,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        14,
        15,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        14,
        15,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        14,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        14,
        18,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        14,
        18,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        14,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        14,
        34,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        14,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        15,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        15,
        18,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        15,
        18,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        15,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "if ( k == 1 ) continue ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        15,
        34,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "if ( k == 1 ) continue ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        15,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "if ( k == 1 ) continue ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        18,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        18,
        34,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        18,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        34,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        6,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘long long int [n]’)"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        14
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        14,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        14,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        14,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        14,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        15,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        15,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "if ( k == 1 ) continue ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        15,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "if ( k == 1 ) continue ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        18,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        18,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        34,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "while ( 1 )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        15,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        15,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        15,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        18,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        18,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        34,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15,
        18,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15,
        18,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15,
        34,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        18,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        18,
        34,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        18,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        34,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        14,
        15
      ],
      "mod_code": [
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        14,
        15,
        18
      ],
      "mod_code": [
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        14,
        15,
        34
      ],
      "mod_code": [
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        14,
        15,
        36
      ],
      "mod_code": [
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        14,
        18
      ],
      "mod_code": [
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        14,
        18,
        34
      ],
      "mod_code": [
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        14,
        18,
        36
      ],
      "mod_code": [
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        14,
        34
      ],
      "mod_code": [
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        14,
        34,
        36
      ],
      "mod_code": [
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        14,
        36
      ],
      "mod_code": [
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        15
      ],
      "mod_code": [
        "while ( 1 )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        15,
        18
      ],
      "mod_code": [
        "while ( 1 )",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        15,
        18,
        34
      ],
      "mod_code": [
        "while ( 1 )",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        15,
        18,
        36
      ],
      "mod_code": [
        "while ( 1 )",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        15,
        34
      ],
      "mod_code": [
        "while ( 1 )",
        "if ( k == 1 ) continue ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        15,
        34,
        36
      ],
      "mod_code": [
        "while ( 1 )",
        "if ( k == 1 ) continue ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        15,
        36
      ],
      "mod_code": [
        "while ( 1 )",
        "if ( k == 1 ) continue ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        18
      ],
      "mod_code": [
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        18,
        34
      ],
      "mod_code": [
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        18,
        34,
        36
      ],
      "mod_code": [
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        18,
        36
      ],
      "mod_code": [
        "while ( 1 )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        34
      ],
      "mod_code": [
        "while ( 1 )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        34,
        36
      ],
      "mod_code": [
        "while ( 1 )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        36
      ],
      "mod_code": [
        "while ( 1 )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;"
      ],
      "err_line": 15,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        18,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        18,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        34,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( k == 1 ) continue ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        18,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        18,
        34,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        18,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        34,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        18
      ],
      "mod_code": [
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        18,
        34
      ],
      "mod_code": [
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        18,
        34,
        36
      ],
      "mod_code": [
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        18,
        36
      ],
      "mod_code": [
        "if ( k == 1 ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        34
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        34,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 19,
      "err_msg": "‘l’ was not declared in this scope"
    }
  ]
}