{
  "meta": {
    "index": 2423,
    "hitid": "3CO05SML7VZTBZJDLHYRBOOPT6W0R9",
    "workerid": "A1APYLD4DUK33J",
    "probid": "479A",
    "subid": "48528398"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers a , b , c",
      "code": "int a , b , c ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while read a read b read c is true",
      "code": "while ( cin >> a >> b >> c )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer m with m = 0",
      "code": "int m = 0 ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "create integer array p with size 4",
      "code": "int p [ 4 ] ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "set p [ 0 ] to a + b + c",
      "code": "p [ 0 ] = a + b + c ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set p [ 1 ] to a * ( b + c )",
      "code": "p [ 1 ] = a * ( b + c ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set p [ 2 ] to a * b * c",
      "code": "p [ 2 ] = a * b * c ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set p [ 3 ] to ( a + b ) * c",
      "code": "p [ 3 ] = ( a + b ) * c ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "for i = 0 to 4 exclusive",
      "code": "for ( int i = 0 ; i < 4 ; i ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if m is less than p [ i ] , set m to p [ i ]",
      "code": "if ( m < p [ i ] ) m = p [ i ] ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "print m print newline",
      "code": "cout << m << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( { cin >> a >> b >> c )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int * p [ 4 ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "p [ 0 ] += c + c ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        8,
        5,
        2
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "p [ 0 ] += c + c ;",
        "while ( { cin >> a >> b >> c )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        5,
        2,
        4
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "p [ 0 ] += c + c ;",
        "while ( { cin >> a >> b >> c )",
        "int * p [ 4 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        5,
        2,
        7
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "p [ 0 ] += c + c ;",
        "while ( { cin >> a >> b >> c )",
        "p [ 2 ] *= c ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        5,
        2,
        9
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "p [ 0 ] += c + c ;",
        "while ( { cin >> a >> b >> c )",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        5,
        4
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "p [ 0 ] += c + c ;",
        "int * p [ 4 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        5,
        4,
        7
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "p [ 0 ] += c + c ;",
        "int * p [ 4 ] ;",
        "p [ 2 ] *= c ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        5,
        4,
        9
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "p [ 0 ] += c + c ;",
        "int * p [ 4 ] ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        5,
        7
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "p [ 0 ] += c + c ;",
        "p [ 2 ] *= c ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        8,
        5,
        7,
        9
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "p [ 0 ] += c + c ;",
        "p [ 2 ] *= c ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        8,
        5,
        9
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "p [ 0 ] += c + c ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "while ( { cin >> a >> b >> c )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        2,
        4
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "while ( { cin >> a >> b >> c )",
        "int * p [ 4 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        2,
        4,
        7
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "while ( { cin >> a >> b >> c )",
        "int * p [ 4 ] ;",
        "p [ 2 ] *= c ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        2,
        4,
        9
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "while ( { cin >> a >> b >> c )",
        "int * p [ 4 ] ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        2,
        7
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "while ( { cin >> a >> b >> c )",
        "p [ 2 ] *= c ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        2,
        7,
        9
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "while ( { cin >> a >> b >> c )",
        "p [ 2 ] *= c ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        2,
        9
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "while ( { cin >> a >> b >> c )",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "int * p [ 4 ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        4,
        7
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "int * p [ 4 ] ;",
        "p [ 2 ] *= c ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        4,
        7,
        9
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "int * p [ 4 ] ;",
        "p [ 2 ] *= c ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        4,
        9
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "int * p [ 4 ] ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "p [ 2 ] *= c ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        8,
        7,
        9
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "p [ 2 ] *= c ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "p [ 3 ] = ( long a + b ) * c ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘long’"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "p [ 0 ] += c + c ;",
        "while ( { cin >> a >> b >> c )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        2,
        4
      ],
      "mod_code": [
        "p [ 0 ] += c + c ;",
        "while ( { cin >> a >> b >> c )",
        "int * p [ 4 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        2,
        4,
        7
      ],
      "mod_code": [
        "p [ 0 ] += c + c ;",
        "while ( { cin >> a >> b >> c )",
        "int * p [ 4 ] ;",
        "p [ 2 ] *= c ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        2,
        4,
        9
      ],
      "mod_code": [
        "p [ 0 ] += c + c ;",
        "while ( { cin >> a >> b >> c )",
        "int * p [ 4 ] ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        2,
        7
      ],
      "mod_code": [
        "p [ 0 ] += c + c ;",
        "while ( { cin >> a >> b >> c )",
        "p [ 2 ] *= c ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        2,
        7,
        9
      ],
      "mod_code": [
        "p [ 0 ] += c + c ;",
        "while ( { cin >> a >> b >> c )",
        "p [ 2 ] *= c ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        2,
        9
      ],
      "mod_code": [
        "p [ 0 ] += c + c ;",
        "while ( { cin >> a >> b >> c )",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "p [ 0 ] += c + c ;",
        "int * p [ 4 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        4,
        7
      ],
      "mod_code": [
        "p [ 0 ] += c + c ;",
        "int * p [ 4 ] ;",
        "p [ 2 ] *= c ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        4,
        7,
        9
      ],
      "mod_code": [
        "p [ 0 ] += c + c ;",
        "int * p [ 4 ] ;",
        "p [ 2 ] *= c ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        4,
        9
      ],
      "mod_code": [
        "p [ 0 ] += c + c ;",
        "int * p [ 4 ] ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        9
      ],
      "mod_code": [
        "p [ 0 ] += c + c ;",
        "p [ 2 ] *= c ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "p [ 0 ] += c + c ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "while ( { cin >> a >> b >> c )",
        "int * p [ 4 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        4,
        7
      ],
      "mod_code": [
        "while ( { cin >> a >> b >> c )",
        "int * p [ 4 ] ;",
        "p [ 2 ] *= c ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        4,
        7,
        9
      ],
      "mod_code": [
        "while ( { cin >> a >> b >> c )",
        "int * p [ 4 ] ;",
        "p [ 2 ] *= c ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        4,
        9
      ],
      "mod_code": [
        "while ( { cin >> a >> b >> c )",
        "int * p [ 4 ] ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "while ( { cin >> a >> b >> c )",
        "p [ 2 ] *= c ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        7,
        9
      ],
      "mod_code": [
        "while ( { cin >> a >> b >> c )",
        "p [ 2 ] *= c ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "while ( { cin >> a >> b >> c )",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "int * p [ 4 ] ;",
        "p [ 2 ] *= c ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        7,
        9
      ],
      "mod_code": [
        "int * p [ 4 ] ;",
        "p [ 2 ] *= c ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "int * p [ 4 ] ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "p [ 2 ] *= c ;",
        "for ( i = 0 ; i < 4 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    }
  ]
}