{
  "meta": {
    "index": 347,
    "hitid": "3UV0D2KX1MDD7XW5DNLZ620J8HVF4E",
    "workerid": "A1APYLD4DUK33J",
    "probid": "340A",
    "subid": "45323113"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant integer INF = 0x3f3f3f3f",
      "code": "const int INF = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare gcd with integers a , b as arguments , returning integer",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "if a is less than b , swap values between a and b",
      "code": "if ( a < b ) swap ( a , b ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if not b , return a",
      "code": "if ( ! b ) return a ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return run gcd ( b , a % b )",
      "code": "return gcd ( b , a % b ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "declare i , j , k as integers",
      "code": "int i , j , k ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "declare n , m , a , b , c , d as integers",
      "code": "int n , m , a , b , c , d ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read a , b , c , d",
      "code": "cin >> a >> b >> c >> d ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "let k be run gcd ( a , b )",
      "code": "k = gcd ( a , b ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "let k be a / k * b ;",
      "code": "k = a / k * b ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "let m be d / k - c / k",
      "code": "m = d / k - c / k ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if c % k is 0 , increment m",
      "code": "if ( c % k == 0 ) m ++ ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print m and newline",
      "code": "cout << m << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "k run ( a , b ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘run’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return gcd ( b , a % b ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        4,
        11
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return gcd ( b , a % b ) ) ;",
        "k *= k * b ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        4,
        11,
        10
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return gcd ( b , a % b ) ) ;",
        "k *= k * b ;",
        "k run ( a , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        4,
        10
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return gcd ( b , a % b ) ) ;",
        "k run ( a , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "k *= k * b ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        11,
        10
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "k *= k * b ;",
        "k run ( a , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "k run ( a , b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "k *= k * b ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        11,
        10
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "k *= k * b ;",
        "k run ( a , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "return gcd ( b , a % b ) ) ;",
        "k run ( a , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "k *= k * b ;",
        "k run ( a , b ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘run’"
    }
  ]
}