{
  "meta": {
    "index": 1354,
    "hitid": "31GECDVA9JGV3R78VIBA9U7KAM266G",
    "workerid": "A1APYLD4DUK33J",
    "probid": "476A",
    "subid": "48939723"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create double n",
      "code": "double n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integers a , ans with ans = - 1",
      "code": "int a , ans = - 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n read a",
      "code": "cin >> n >> a ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create boolean f with f = false",
      "code": "bool f = false ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create integer k with k = round up ( double casted ( n / 2 ) )",
      "code": "int k = ceil ( double ( n / 2 ) ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = k to n inclusive",
      "code": "for ( int i = k ; k <= n ; k ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if k % a is 0",
      "code": "if ( k % a == 0 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set ans to k",
      "code": "ans = k ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print ans print newline",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = k ; i <= n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        1,
        5
      ],
      "mod_code": [
        "for ( int i = k ; i <= n ; i ++ )",
        "char n ;",
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        1,
        5,
        8
      ],
      "mod_code": [
        "for ( int i = k ; i <= n ; i ++ )",
        "char n ;",
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;",
        "int ans = k ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        1,
        5,
        9
      ],
      "mod_code": [
        "for ( int i = k ; i <= n ; i ++ )",
        "char n ;",
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        1,
        8,
        9
      ],
      "mod_code": [
        "for ( int i = k ; i <= n ; i ++ )",
        "char n ;",
        "int ans = k ;",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        1,
        9
      ],
      "mod_code": [
        "for ( int i = k ; i <= n ; i ++ )",
        "char n ;",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "for ( int i = k ; i <= n ; i ++ )",
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        5,
        8
      ],
      "mod_code": [
        "for ( int i = k ; i <= n ; i ++ )",
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;",
        "int ans = k ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        5,
        8,
        9
      ],
      "mod_code": [
        "for ( int i = k ; i <= n ; i ++ )",
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;",
        "int ans = k ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        5,
        9
      ],
      "mod_code": [
        "for ( int i = k ; i <= n ; i ++ )",
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        8,
        9
      ],
      "mod_code": [
        "for ( int i = k ; i <= n ; i ++ )",
        "int ans = k ;",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "for ( int i = k ; i <= n ; i ++ )",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "char n ;",
        "for ( i = k ; i <= n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6,
        5
      ],
      "mod_code": [
        "char n ;",
        "for ( i = k ; i <= n ; i ++ )",
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        6,
        5,
        8
      ],
      "mod_code": [
        "char n ;",
        "for ( i = k ; i <= n ; i ++ )",
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;",
        "int ans = k ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        6,
        5,
        9
      ],
      "mod_code": [
        "char n ;",
        "for ( i = k ; i <= n ; i ++ )",
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "char n ;",
        "for ( i = k ; i <= n ; i ++ )",
        "int ans = k ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        9
      ],
      "mod_code": [
        "char n ;",
        "for ( i = k ; i <= n ; i ++ )",
        "int ans = k ;",
        "break break ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6,
        9
      ],
      "mod_code": [
        "char n ;",
        "for ( i = k ; i <= n ; i ++ )",
        "break break ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "char n ;",
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        5,
        8
      ],
      "mod_code": [
        "char n ;",
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;",
        "int ans = k ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        9
      ],
      "mod_code": [
        "char n ;",
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;",
        "int ans = k ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        5,
        9
      ],
      "mod_code": [
        "char n ;",
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        1,
        8,
        9
      ],
      "mod_code": [
        "char n ;",
        "int ans = k ;",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "char n ;",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "for ( i = k ; i <= n ; i ++ )",
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        5,
        8
      ],
      "mod_code": [
        "for ( i = k ; i <= n ; i ++ )",
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;",
        "int ans = k ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        5,
        8,
        9
      ],
      "mod_code": [
        "for ( i = k ; i <= n ; i ++ )",
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;",
        "int ans = k ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        5,
        9
      ],
      "mod_code": [
        "for ( i = k ; i <= n ; i ++ )",
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "for ( i = k ; i <= n ; i ++ )",
        "int ans = k ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8,
        9
      ],
      "mod_code": [
        "for ( i = k ; i <= n ; i ++ )",
        "int ans = k ;",
        "break break ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "for ( i = k ; i <= n ; i ++ )",
        "break break ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;",
        "int ans = k ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        8,
        9
      ],
      "mod_code": [
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;",
        "int ans = k ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "int k = ceil ( ( double ) ( ( double ) ( n / 2 ) ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "int ans = k ;",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}