{
  "meta": {
    "index": 462,
    "hitid": "3IQ9O0AYW6THY9DLTWSSH7P3480IT0",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "990A",
    "subid": "48575728"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , m = long long",
      "code": "long long n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "a , b = int",
      "code": "int a , b ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n then m then a then b",
      "code": "cin >> n >> m >> a >> b ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "plus , minus = long long with plus = 0 and minus = 0",
      "code": "long long plus = 0 , minus = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "mod = long long with mod = n mod m",
      "code": "long long mod = n % m ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "div = long long with div = n / m",
      "code": "long long div = n / m ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if n is not a multiple of m",
      "code": "if ( n % m != 0 )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if n is less than m",
      "code": "if ( n < m )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set plus to m - n",
      "code": "plus = m - n ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "set minus to n",
      "code": "minus = n ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set plus to absolute of n - ( ( div * m ) + m )",
      "code": "plus = abs ( n - ( ( div * m ) + m ) ) ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "set minus to mod",
      "code": "minus = mod ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print 0",
      "code": "cout << 0 << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print min of plus * a and minus * b",
      "code": "cout << min ( plus * a , minus * b ) << endl ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "long long plus = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "missing template arguments before ‘=’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "mod = % mod ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "cout << min ( plus * a , * * b ) << endl ;"
      ],
      "err_line": 19,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "cout << min ( plus * a ) - ( * b ) << endl ;"
      ],
      "err_line": 19,
      "err_msg": "no matching function for call to ‘min(long long int)’"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "long long plus = 0 ;",
        "plus += n ;"
      ],
      "err_line": 10,
      "err_msg": "missing template arguments before ‘=’ token"
    },
    {
      "mod_line": [
        4,
        9,
        10
      ],
      "mod_code": [
        "long long plus = 0 ;",
        "plus += n ;",
        "n -- ;"
      ],
      "err_line": 13,
      "err_msg": "missing template arguments before ‘=’ token"
    },
    {
      "mod_line": [
        4,
        9,
        10,
        13
      ],
      "mod_code": [
        "long long plus = 0 ;",
        "plus += n ;",
        "n -- ;",
        "mod = % mod ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        4,
        9,
        10,
        19
      ],
      "mod_code": [
        "long long plus = 0 ;",
        "plus += n ;",
        "n -- ;",
        "cout << min ( plus * a , * * b ) << endl ;"
      ],
      "err_line": 13,
      "err_msg": "missing template arguments before ‘=’ token"
    },
    {
      "mod_line": [
        4,
        9,
        13
      ],
      "mod_code": [
        "long long plus = 0 ;",
        "plus += n ;",
        "mod = % mod ;"
      ],
      "err_line": 10,
      "err_msg": "missing template arguments before ‘=’ token"
    },
    {
      "mod_line": [
        4,
        9,
        13,
        19
      ],
      "mod_code": [
        "long long plus = 0 ;",
        "plus += n ;",
        "mod = % mod ;",
        "cout << min ( plus * a , * * b ) << endl ;"
      ],
      "err_line": 10,
      "err_msg": "missing template arguments before ‘=’ token"
    },
    {
      "mod_line": [
        4,
        9,
        13,
        10
      ],
      "mod_code": [
        "long long plus = 0 ;",
        "plus += n ;",
        "mod = % mod ;",
        "n = n - 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        4,
        9,
        19
      ],
      "mod_code": [
        "long long plus = 0 ;",
        "plus += n ;",
        "cout << min ( plus * a , * * b ) << endl ;"
      ],
      "err_line": 10,
      "err_msg": "missing template arguments before ‘=’ token"
    },
    {
      "mod_line": [
        4,
        9,
        19,
        10
      ],
      "mod_code": [
        "long long plus = 0 ;",
        "plus += n ;",
        "cout << min ( plus * a , * * b ) << endl ;",
        "n = n - 1 ;"
      ],
      "err_line": 13,
      "err_msg": "missing template arguments before ‘=’ token"
    },
    {
      "mod_line": [
        4,
        9,
        10
      ],
      "mod_code": [
        "long long plus = 0 ;",
        "plus += n ;",
        "n = n - 1 ;"
      ],
      "err_line": 13,
      "err_msg": "missing template arguments before ‘=’ token"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "long long plus = 0 ;",
        "n -- ;"
      ],
      "err_line": 13,
      "err_msg": "missing template arguments before ‘=’ token"
    },
    {
      "mod_line": [
        4,
        10,
        13
      ],
      "mod_code": [
        "long long plus = 0 ;",
        "n -- ;",
        "mod = % mod ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        4,
        10,
        13,
        19
      ],
      "mod_code": [
        "long long plus = 0 ;",
        "n -- ;",
        "mod = % mod ;",
        "cout << min ( plus * a , * * b ) << endl ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        4,
        10,
        19
      ],
      "mod_code": [
        "long long plus = 0 ;",
        "n -- ;",
        "cout << min ( plus * a , * * b ) << endl ;"
      ],
      "err_line": 13,
      "err_msg": "missing template arguments before ‘=’ token"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "long long plus = 0 ;",
        "mod = % mod ;"
      ],
      "err_line": 10,
      "err_msg": "missing template arguments before ‘=’ token"
    },
    {
      "mod_line": [
        4,
        13,
        19
      ],
      "mod_code": [
        "long long plus = 0 ;",
        "mod = % mod ;",
        "cout << min ( plus * a , * * b ) << endl ;"
      ],
      "err_line": 10,
      "err_msg": "missing template arguments before ‘=’ token"
    },
    {
      "mod_line": [
        4,
        13,
        19,
        10
      ],
      "mod_code": [
        "long long plus = 0 ;",
        "mod = % mod ;",
        "cout << min ( plus * a , * * b ) << endl ;",
        "n = n - 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        4,
        13,
        10
      ],
      "mod_code": [
        "long long plus = 0 ;",
        "mod = % mod ;",
        "n = n - 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        4,
        19
      ],
      "mod_code": [
        "long long plus = 0 ;",
        "cout << min ( plus * a , * * b ) << endl ;"
      ],
      "err_line": 10,
      "err_msg": "missing template arguments before ‘=’ token"
    },
    {
      "mod_line": [
        4,
        19,
        10
      ],
      "mod_code": [
        "long long plus = 0 ;",
        "cout << min ( plus * a , * * b ) << endl ;",
        "n = n - 1 ;"
      ],
      "err_line": 13,
      "err_msg": "missing template arguments before ‘=’ token"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "long long plus = 0 ;",
        "n = n - 1 ;"
      ],
      "err_line": 13,
      "err_msg": "missing template arguments before ‘=’ token"
    },
    {
      "mod_line": [
        9,
        10,
        13
      ],
      "mod_code": [
        "plus += n ;",
        "n -- ;",
        "mod = % mod ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        9,
        10,
        13,
        19
      ],
      "mod_code": [
        "plus += n ;",
        "n -- ;",
        "mod = % mod ;",
        "cout << min ( plus * a , * * b ) << endl ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        9,
        10,
        19
      ],
      "mod_code": [
        "plus += n ;",
        "n -- ;",
        "cout << min ( plus * a , * * b ) << endl ;"
      ],
      "err_line": 19,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "plus += n ;",
        "mod = % mod ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        9,
        13,
        19
      ],
      "mod_code": [
        "plus += n ;",
        "mod = % mod ;",
        "cout << min ( plus * a , * * b ) << endl ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        9,
        13,
        19,
        10
      ],
      "mod_code": [
        "plus += n ;",
        "mod = % mod ;",
        "cout << min ( plus * a , * * b ) << endl ;",
        "n = n - 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        9,
        13,
        10
      ],
      "mod_code": [
        "plus += n ;",
        "mod = % mod ;",
        "n = n - 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        9,
        19
      ],
      "mod_code": [
        "plus += n ;",
        "cout << min ( plus * a , * * b ) << endl ;"
      ],
      "err_line": 19,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        9,
        19,
        10
      ],
      "mod_code": [
        "plus += n ;",
        "cout << min ( plus * a , * * b ) << endl ;",
        "n = n - 1 ;"
      ],
      "err_line": 19,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "n -- ;",
        "mod = % mod ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        10,
        13,
        19
      ],
      "mod_code": [
        "n -- ;",
        "mod = % mod ;",
        "cout << min ( plus * a , * * b ) << endl ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        10,
        19
      ],
      "mod_code": [
        "n -- ;",
        "cout << min ( plus * a , * * b ) << endl ;"
      ],
      "err_line": 19,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        13,
        19
      ],
      "mod_code": [
        "mod = % mod ;",
        "cout << min ( plus * a , * * b ) << endl ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        13,
        19,
        10
      ],
      "mod_code": [
        "mod = % mod ;",
        "cout << min ( plus * a , * * b ) << endl ;",
        "n = n - 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        13,
        10
      ],
      "mod_code": [
        "mod = % mod ;",
        "n = n - 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        19,
        10
      ],
      "mod_code": [
        "cout << min ( plus * a , * * b ) << endl ;",
        "n = n - 1 ;"
      ],
      "err_line": 19,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    }
  ]
}