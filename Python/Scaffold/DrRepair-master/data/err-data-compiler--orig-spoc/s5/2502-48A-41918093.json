{
  "meta": {
    "index": 2502,
    "hitid": "3IH9TRB0FBTGPP1CRD8IB168BN11IX",
    "workerid": "AIWEXPJAU66D9",
    "probid": "48A",
    "subid": "41918093"
  },
  "lines": [
    {
      "line": 0,
      "text": "create strings s1 , s2 and s3",
      "code": "string s1 , s2 , s3 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "read s1 , s2 and s3",
      "code": "cin >> s1 >> s2 >> s3 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if s2 = \" rock \" and s1 = \" scissors \" and s1 = s3",
      "code": "if ( s2 == \" rock \" && s1 == \" scissors \" && s1 == s3 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print \" M \" and a new line",
      "code": "cout << \" M \" << endl ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else if s1 = \" rock \" and s2 = \" scissors \" and s2 = s3",
      "code": "else if ( s1 == \" rock \" && s2 == \" scissors \" && s2 == s3 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print \" F \" and a new line",
      "code": "cout << \" F \" << endl ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else if s3 = \" rock \" and s1 = \" scissors \" and s2 = s1",
      "code": "else if ( s3 == \" rock \" && s1 == \" scissors \" && s2 == s1 )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print \" S \" and a new line",
      "code": "cout << \" S \" << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else if s1 = \" scissors \" and s2 = \" paper \" and s2 = s3",
      "code": "else if ( s1 == \" scissors \" && s2 == \" paper \" && s2 == s3 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print \" F \" and a new line",
      "code": "cout << \" F \" << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else if s2 = \" scissors \" and s1 = \" paper \" and s1 = s3",
      "code": "else if ( s2 == \" scissors \" && s1 == \" paper \" && s1 == s3 )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print \" M \" and a new line",
      "code": "cout << \" M \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else if s3 = \" scissors \" and s2 = \" paper \" and s2 = s1",
      "code": "else if ( s3 == \" scissors \" && s2 == \" paper \" && s2 == s1 )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" S \" and a new line",
      "code": "cout << \" S \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else if s1 = \" paper \" and s2 = \" rock \" and s2 = s3",
      "code": "else if ( s1 == \" paper \" && s2 == \" rock \" && s2 == s3 )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print \" F \" and a new line",
      "code": "cout << \" F \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else if s2 = \" paper \" and s1 = \" rock \" and s1 = s3",
      "code": "else if ( s2 == \" paper \" && s1 == \" rock \" && s1 == s3 )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print \" M \" and a new line",
      "code": "cout << \" M \" << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "else if s3 = \" paper \" and s2 = \" rock \" and s2 = s1",
      "code": "else if ( s3 == \" paper \" && s2 == \" rock \" && s2 == s1 )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print \" S \" and a new line",
      "code": "cout << \" S \" << endl ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print \" ? \" and a new line",
      "code": "cout << \" ? \" << endl ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "strings = s1 , s2 , s3 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "if ( s2 == \" rock \" && s1 == \" scissors \" && s1 == s3 ) break ;"
      ],
      "err_line": 3,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "strings = s1 , s2 , s3 ;",
        "cin >> s1 >> s2 , s3 ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        0,
        2,
        3
      ],
      "mod_code": [
        "strings = s1 , s2 , s3 ;",
        "cin >> s1 >> s2 , s3 ;",
        "if ( s2 == \" rock \" && s1 == \" scissors \" && s1 == s3 ) break ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        16
      ],
      "mod_code": [
        "strings = s1 , s2 , s3 ;",
        "cin >> s1 >> s2 , s3 ;",
        "if ( s2 == \" rock \" && s1 == \" scissors \" && s1 == s3 ) break ;",
        "cout << \" F \" ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        9
      ],
      "mod_code": [
        "strings = s1 , s2 , s3 ;",
        "cin >> s1 >> s2 , s3 ;",
        "if ( s2 == \" rock \" && s1 == \" scissors \" && s1 == s3 ) break ;",
        "else if ( s1 == \" scissors \" && s2 == \" paper \" && s2 == \" paper \" )"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        0,
        2,
        16
      ],
      "mod_code": [
        "strings = s1 , s2 , s3 ;",
        "cin >> s1 >> s2 , s3 ;",
        "cout << \" F \" ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        0,
        2,
        16,
        9
      ],
      "mod_code": [
        "strings = s1 , s2 , s3 ;",
        "cin >> s1 >> s2 , s3 ;",
        "cout << \" F \" ;",
        "else if ( s1 == \" scissors \" && s2 == \" paper \" && s2 == \" paper \" )"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        0,
        2,
        9
      ],
      "mod_code": [
        "strings = s1 , s2 , s3 ;",
        "cin >> s1 >> s2 , s3 ;",
        "else if ( s1 == \" scissors \" && s2 == \" paper \" && s2 == \" paper \" )"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "strings = s1 , s2 , s3 ;",
        "if ( s2 == \" rock \" && s1 == \" scissors \" && s1 == s3 ) break ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        0,
        3,
        16
      ],
      "mod_code": [
        "strings = s1 , s2 , s3 ;",
        "if ( s2 == \" rock \" && s1 == \" scissors \" && s1 == s3 ) break ;",
        "cout << \" F \" ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        0,
        3,
        16,
        9
      ],
      "mod_code": [
        "strings = s1 , s2 , s3 ;",
        "if ( s2 == \" rock \" && s1 == \" scissors \" && s1 == s3 ) break ;",
        "cout << \" F \" ;",
        "else if ( s1 == \" scissors \" && s2 == \" paper \" && s2 == \" paper \" )"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        0,
        3,
        9
      ],
      "mod_code": [
        "strings = s1 , s2 , s3 ;",
        "if ( s2 == \" rock \" && s1 == \" scissors \" && s1 == s3 ) break ;",
        "else if ( s1 == \" scissors \" && s2 == \" paper \" && s2 == \" paper \" )"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        0,
        16
      ],
      "mod_code": [
        "strings = s1 , s2 , s3 ;",
        "cout << \" F \" ;"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        0,
        16,
        9
      ],
      "mod_code": [
        "strings = s1 , s2 , s3 ;",
        "cout << \" F \" ;",
        "else if ( s1 == \" scissors \" && s2 == \" paper \" && s2 == \" paper \" )"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "strings = s1 , s2 , s3 ;",
        "else if ( s1 == \" scissors \" && s2 == \" paper \" && s2 == \" paper \" )"
      ],
      "err_line": 0,
      "err_msg": "‘strings’ does not name a type"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "cin >> s1 >> s2 , s3 ;",
        "if ( s2 == \" rock \" && s1 == \" scissors \" && s1 == s3 ) break ;"
      ],
      "err_line": 3,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        2,
        3,
        16
      ],
      "mod_code": [
        "cin >> s1 >> s2 , s3 ;",
        "if ( s2 == \" rock \" && s1 == \" scissors \" && s1 == s3 ) break ;",
        "cout << \" F \" ;"
      ],
      "err_line": 3,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        2,
        3,
        16,
        9
      ],
      "mod_code": [
        "cin >> s1 >> s2 , s3 ;",
        "if ( s2 == \" rock \" && s1 == \" scissors \" && s1 == s3 ) break ;",
        "cout << \" F \" ;",
        "else if ( s1 == \" scissors \" && s2 == \" paper \" && s2 == \" paper \" )"
      ],
      "err_line": 3,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        2,
        3,
        9
      ],
      "mod_code": [
        "cin >> s1 >> s2 , s3 ;",
        "if ( s2 == \" rock \" && s1 == \" scissors \" && s1 == s3 ) break ;",
        "else if ( s1 == \" scissors \" && s2 == \" paper \" && s2 == \" paper \" )"
      ],
      "err_line": 3,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "if ( s2 == \" rock \" && s1 == \" scissors \" && s1 == s3 ) break ;",
        "cout << \" F \" ;"
      ],
      "err_line": 3,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        3,
        16,
        9
      ],
      "mod_code": [
        "if ( s2 == \" rock \" && s1 == \" scissors \" && s1 == s3 ) break ;",
        "cout << \" F \" ;",
        "else if ( s1 == \" scissors \" && s2 == \" paper \" && s2 == \" paper \" )"
      ],
      "err_line": 3,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "if ( s2 == \" rock \" && s1 == \" scissors \" && s1 == s3 ) break ;",
        "else if ( s1 == \" scissors \" && s2 == \" paper \" && s2 == \" paper \" )"
      ],
      "err_line": 3,
      "err_msg": "break statement not within loop or switch"
    }
  ]
}