{
  "meta": {
    "index": 2587,
    "hitid": "32TMVRKDGNS4SIMI59FTWAJXKQN48G",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "1101A",
    "subid": "48939576"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function min taking three ints l , r and d and returning an int",
      "code": "int min ( int l , int r , int d )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "j = int with j = 1",
      "code": "int j = 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if d is less than l",
      "code": "if ( d < l )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return d",
      "code": "return d ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 5,
      "text": "return ( r / d ) * d + d",
      "code": "return ( ( r / d ) * d + d ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 9,
      "text": "q , l , r , d = int",
      "code": "int q , l , r , d ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read q",
      "code": "cin >> q ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "ans = int",
      "code": "int ans ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "loop q times",
      "code": "while ( q -- )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "read l then r then d",
      "code": "cin >> l >> r >> d ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print min of l , r and d",
      "code": "cout << min ( l , r , d ) << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int * j = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cin >> l >> r >> n ;"
      ],
      "err_line": 13,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int * j = 1 ;",
        "if ( d <= l )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        9
      ],
      "mod_code": [
        "int * j = 1 ;",
        "if ( d <= l )",
        "char q , l , r , d ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        9,
        12
      ],
      "mod_code": [
        "int * j = 1 ;",
        "if ( d <= l )",
        "char q , l , r , d ;",
        "while ( q ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        9,
        10
      ],
      "mod_code": [
        "int * j = 1 ;",
        "if ( d <= l )",
        "char q , l , r , d ;",
        "cout << q << endl ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        9,
        0
      ],
      "mod_code": [
        "int * j = 1 ;",
        "if ( d <= l )",
        "char q , l , r , d ;",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1,
        2,
        12
      ],
      "mod_code": [
        "int * j = 1 ;",
        "if ( d <= l )",
        "while ( q ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        12,
        10
      ],
      "mod_code": [
        "int * j = 1 ;",
        "if ( d <= l )",
        "while ( q ++ )",
        "cout << q << endl ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        12,
        0
      ],
      "mod_code": [
        "int * j = 1 ;",
        "if ( d <= l )",
        "while ( q ++ )",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1,
        2,
        10
      ],
      "mod_code": [
        "int * j = 1 ;",
        "if ( d <= l )",
        "cout << q << endl ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        10,
        0
      ],
      "mod_code": [
        "int * j = 1 ;",
        "if ( d <= l )",
        "cout << q << endl ;",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1,
        2,
        0
      ],
      "mod_code": [
        "int * j = 1 ;",
        "if ( d <= l )",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "int * j = 1 ;",
        "char q , l , r , d ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        12
      ],
      "mod_code": [
        "int * j = 1 ;",
        "char q , l , r , d ;",
        "while ( q ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        12,
        10
      ],
      "mod_code": [
        "int * j = 1 ;",
        "char q , l , r , d ;",
        "while ( q ++ )",
        "cout << q << endl ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        12,
        0
      ],
      "mod_code": [
        "int * j = 1 ;",
        "char q , l , r , d ;",
        "while ( q ++ )",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1,
        9,
        10
      ],
      "mod_code": [
        "int * j = 1 ;",
        "char q , l , r , d ;",
        "cout << q << endl ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9,
        10,
        0
      ],
      "mod_code": [
        "int * j = 1 ;",
        "char q , l , r , d ;",
        "cout << q << endl ;",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1,
        9,
        0
      ],
      "mod_code": [
        "int * j = 1 ;",
        "char q , l , r , d ;",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int * j = 1 ;",
        "while ( q ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        12,
        10
      ],
      "mod_code": [
        "int * j = 1 ;",
        "while ( q ++ )",
        "cout << q << endl ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        12,
        10,
        0
      ],
      "mod_code": [
        "int * j = 1 ;",
        "while ( q ++ )",
        "cout << q << endl ;",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1,
        12,
        0
      ],
      "mod_code": [
        "int * j = 1 ;",
        "while ( q ++ )",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int * j = 1 ;",
        "cout << q << endl ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        10,
        0
      ],
      "mod_code": [
        "int * j = 1 ;",
        "cout << q << endl ;",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "int * j = 1 ;",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        2,
        9,
        12,
        0
      ],
      "mod_code": [
        "if ( d <= l )",
        "char q , l , r , d ;",
        "while ( q ++ )",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        2,
        9,
        10,
        0
      ],
      "mod_code": [
        "if ( d <= l )",
        "char q , l , r , d ;",
        "cout << q << endl ;",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        2,
        9,
        0
      ],
      "mod_code": [
        "if ( d <= l )",
        "char q , l , r , d ;",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        2,
        12,
        10,
        0
      ],
      "mod_code": [
        "if ( d <= l )",
        "while ( q ++ )",
        "cout << q << endl ;",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        2,
        12,
        0
      ],
      "mod_code": [
        "if ( d <= l )",
        "while ( q ++ )",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        2,
        10,
        0
      ],
      "mod_code": [
        "if ( d <= l )",
        "cout << q << endl ;",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "if ( d <= l )",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        9,
        12,
        10,
        0
      ],
      "mod_code": [
        "char q , l , r , d ;",
        "while ( q ++ )",
        "cout << q << endl ;",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        9,
        12,
        0
      ],
      "mod_code": [
        "char q , l , r , d ;",
        "while ( q ++ )",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        9,
        10,
        0
      ],
      "mod_code": [
        "char q , l , r , d ;",
        "cout << q << endl ;",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "char q , l , r , d ;",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        12,
        10,
        0
      ],
      "mod_code": [
        "while ( q ++ )",
        "cout << q << endl ;",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        12,
        0
      ],
      "mod_code": [
        "while ( q ++ )",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "cout << q << endl ;",
        "int min ( int l , int l , int d )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    }
  ]
}