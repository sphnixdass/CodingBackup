{
  "meta": {
    "index": 1643,
    "hitid": "34KYK9TV2R26W1M0YMVLLFP46XTSBY",
    "workerid": "A1APYLD4DUK33J",
    "probid": "17A",
    "subid": "40163193"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integer arrays num , prime , with num size 1000 + 10 , prime size 1000 + 10",
      "code": "int num [ 1000 + 10 ] , prime [ 1000 + 10 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "set num [ 0 ] to num [ 1 ] to 1",
      "code": "num [ 0 ] = num [ 1 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 2 to i * i is less than or equal to 1000 , incrementing i",
      "code": "for ( int i = 2 ; i * i <= 1000 ; ++ i )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if num [ i ] is 0",
      "code": "if ( num [ i ] == 0 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "for j = i * i to 1000 inclusive , incrementing j by i , set num [ j ] to 1",
      "code": "for ( int j = i * i ; j <= 1000 ; j += i ) { num [ j ] = 1 ; }",
      "indent": 3
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create integer j with j = 0",
      "code": "int j = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to 1000 inclusive",
      "code": "for ( int i = 0 ; i <= 1000 ; ++ i )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if not num [ i ] , set prime [ increment j ] to i",
      "code": "if ( ! num [ i ] ) prime [ j ++ ] = i ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "create integers n , k",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "while read n read k",
      "code": "while ( cin >> n >> k )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "create integers sum , cnt , with sum = 0 , cnt = 0",
      "code": "int sum = 0 , cnt = 0 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "for i = 2 to i is less than j and prime [ i - 1 ] + prime [ i - 2 ] + 1 is less than or equal to n , incrementing n",
      "code": "for ( int i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; ++ i )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set sum to 1 + prime [ i - 1 ] + prime [ i - 2 ]",
      "code": "sum = 1 + prime [ i - 1 ] + prime [ i - 2 ] ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "if not num [ sum ] , increment cnt",
      "code": "if ( ! num [ sum ] ) cnt ++ ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if cnt is greater than or equal to k",
      "code": "if ( cnt >= k )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "print \" YES \\ n \"",
      "code": "cout << \" YES\\n \" ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print \" NO \\ n \"",
      "code": "cout << \" NO\\n \" ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 2 ; i * i <= 1000 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int * j = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int [1010][int*]’ for array subscript"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "while ( { cin >> n >> k )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "int sum = 0 , sum = 0 ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int sum’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int * j = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        8,
        15
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int * j = 0 ;",
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        8,
        15,
        14
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int * j = 0 ;",
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "int sum = 0 , sum = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        8,
        15,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int * j = 0 ;",
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "while ( { cin >> n >> k )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        8,
        15,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int * j = 0 ;",
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        8,
        14
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int * j = 0 ;",
        "int sum = 0 , sum = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        8,
        14,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int * j = 0 ;",
        "int sum = 0 , sum = 0 ;",
        "while ( { cin >> n >> k )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        8,
        14,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int * j = 0 ;",
        "int sum = 0 , sum = 0 ;",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        8,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int * j = 0 ;",
        "while ( { cin >> n >> k )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        8,
        13,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int * j = 0 ;",
        "while ( { cin >> n >> k )",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        8,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int * j = 0 ;",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        15
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        15,
        14
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "int sum = 0 , sum = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        15,
        14,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "int sum = 0 , sum = 0 ;",
        "while ( { cin >> n >> k )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        15,
        14,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "int sum = 0 , sum = 0 ;",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        15,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "while ( { cin >> n >> k )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        15,
        13,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "while ( { cin >> n >> k )",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        15,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int sum = 0 , sum = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        14,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int sum = 0 , sum = 0 ;",
        "while ( { cin >> n >> k )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        14,
        13,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int sum = 0 , sum = 0 ;",
        "while ( { cin >> n >> k )",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        14,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "int sum = 0 , sum = 0 ;",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "while ( { cin >> n >> k )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        13,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "while ( { cin >> n >> k )",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 1000 ; i ++ )",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        15
      ],
      "mod_code": [
        "int * j = 0 ;",
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int [1010][int*]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        15,
        14
      ],
      "mod_code": [
        "int * j = 0 ;",
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "int sum = 0 , sum = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int [1010][int*]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        15,
        14,
        13
      ],
      "mod_code": [
        "int * j = 0 ;",
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "int sum = 0 , sum = 0 ;",
        "while ( { cin >> n >> k )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int [1010][int*]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        15,
        14,
        4
      ],
      "mod_code": [
        "int * j = 0 ;",
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "int sum = 0 , sum = 0 ;",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int [1010][int*]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        15,
        13
      ],
      "mod_code": [
        "int * j = 0 ;",
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "while ( { cin >> n >> k )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int [1010][int*]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        15,
        13,
        4
      ],
      "mod_code": [
        "int * j = 0 ;",
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "while ( { cin >> n >> k )",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int [1010][int*]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        15,
        4
      ],
      "mod_code": [
        "int * j = 0 ;",
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int [1010][int*]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "int * j = 0 ;",
        "int sum = 0 , sum = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int [1010][int*]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        14,
        13
      ],
      "mod_code": [
        "int * j = 0 ;",
        "int sum = 0 , sum = 0 ;",
        "while ( { cin >> n >> k )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int [1010][int*]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        14,
        13,
        4
      ],
      "mod_code": [
        "int * j = 0 ;",
        "int sum = 0 , sum = 0 ;",
        "while ( { cin >> n >> k )",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int [1010][int*]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        14,
        4
      ],
      "mod_code": [
        "int * j = 0 ;",
        "int sum = 0 , sum = 0 ;",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int [1010][int*]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "int * j = 0 ;",
        "while ( { cin >> n >> k )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int [1010][int*]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        13,
        4
      ],
      "mod_code": [
        "int * j = 0 ;",
        "while ( { cin >> n >> k )",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int [1010][int*]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "int * j = 0 ;",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int [1010][int*]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        14
      ],
      "mod_code": [
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "int sum = 0 , sum = 0 ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int sum’"
    },
    {
      "mod_line": [
        15,
        14,
        13
      ],
      "mod_code": [
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "int sum = 0 , sum = 0 ;",
        "while ( { cin >> n >> k )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        14,
        13,
        4
      ],
      "mod_code": [
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "int sum = 0 , sum = 0 ;",
        "while ( { cin >> n >> k )",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        14,
        4
      ],
      "mod_code": [
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "int sum = 0 , sum = 0 ;",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int sum’"
    },
    {
      "mod_line": [
        15,
        13
      ],
      "mod_code": [
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "while ( { cin >> n >> k )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        13,
        4
      ],
      "mod_code": [
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "while ( { cin >> n >> k )",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        4
      ],
      "mod_code": [
        "for ( i = 2 ; i < j && prime [ i - 1 ] + prime [ i - 2 ] + 1 <= n ; i ++ )",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        13
      ],
      "mod_code": [
        "int sum = 0 , sum = 0 ;",
        "while ( { cin >> n >> k )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        13,
        4
      ],
      "mod_code": [
        "int sum = 0 , sum = 0 ;",
        "while ( { cin >> n >> k )",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        14,
        4
      ],
      "mod_code": [
        "int sum = 0 , sum = 0 ;",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int sum’"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "if ( num [ i ] == ' 0 ' )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘{’ token"
    }
  ]
}