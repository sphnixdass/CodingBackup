{
  "meta": {
    "index": 2489,
    "hitid": "3D42WVSDH8PT54AP2U96MR4Q3IYFY3",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "94A",
    "subid": "48920534"
  },
  "lines": [
    {
      "line": 0,
      "text": "N , K , ans , l , r , u , d = int",
      "code": "int N , K , ans , l , r , u , d ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "S , T = string and A = string array of size 11",
      "code": "string S , A [ 11 ] , T ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read S",
      "code": "cin >> S ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 1 to 10 inclusive read A [ i ]",
      "code": "for ( int i = 1 ; i <= 10 ; i ++ ) { cin >> A [ i ] ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to 80 incrementing i by 10",
      "code": "for ( int i = 0 ; i < 80 ; i += 10 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set T to substring of S starting at index i and length of 10",
      "code": "T = S . substr ( i , 10 ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for j = 1 to 10 inclusive",
      "code": "for ( int j = 1 ; j <= 10 ; j ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if T is a [ j ] print j - 1",
      "code": "if ( T == A [ j ] ) cout << j - 1 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print newline",
      "code": "cout << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [11] {aka std::__cxx11::basic_string<char> [11]}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "T = S . substr ( i , 10 . size ( ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘10’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( T == a [ j ] ) cout << j - 1 << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int N , K , ans , l , l , u , d ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string S [ 11 ] , S [ 11 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘std::__cxx11::string S [11]’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gets ( S ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < 80 ; i += 10 )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( j = 1 ; j <= 10 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( T == a [ j ] ) { cout << j - 1 << endl ; }"
      ],
      "err_line": 8,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;",
        "T = S . substr ( i , 10 . size ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [11] {aka std::__cxx11::basic_string<char> [11]}’)"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;",
        "T = S . substr ( i , 10 . size ( ) ) ;",
        "if ( T == a [ j ] ) cout << j - 1 << endl ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [11] {aka std::__cxx11::basic_string<char> [11]}’)"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        0
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;",
        "T = S . substr ( i , 10 . size ( ) ) ;",
        "if ( T == a [ j ] ) cout << j - 1 << endl ;",
        "int N , K , ans , l , l , u , d ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        3
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;",
        "T = S . substr ( i , 10 . size ( ) ) ;",
        "if ( T == a [ j ] ) cout << j - 1 << endl ;",
        "gets ( S ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        6,
        0
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;",
        "T = S . substr ( i , 10 . size ( ) ) ;",
        "int N , K , ans , l , l , u , d ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1,
        6,
        0,
        3
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;",
        "T = S . substr ( i , 10 . size ( ) ) ;",
        "int N , K , ans , l , l , u , d ;",
        "gets ( S ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1,
        6,
        0,
        8
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;",
        "T = S . substr ( i , 10 . size ( ) ) ;",
        "int N , K , ans , l , l , u , d ;",
        "if ( T == a [ j ] ) { cout << j - 1 << endl ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1,
        6,
        3
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;",
        "T = S . substr ( i , 10 . size ( ) ) ;",
        "gets ( S ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        6,
        3,
        8
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;",
        "T = S . substr ( i , 10 . size ( ) ) ;",
        "gets ( S ) ;",
        "if ( T == a [ j ] ) { cout << j - 1 << endl ; }"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;",
        "T = S . substr ( i , 10 . size ( ) ) ;",
        "if ( T == a [ j ] ) { cout << j - 1 << endl ; }"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [11] {aka std::__cxx11::basic_string<char> [11]}’)"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;",
        "if ( T == a [ j ] ) cout << j - 1 << endl ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [11] {aka std::__cxx11::basic_string<char> [11]}’)"
    },
    {
      "mod_line": [
        1,
        8,
        0
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;",
        "if ( T == a [ j ] ) cout << j - 1 << endl ;",
        "int N , K , ans , l , l , u , d ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1,
        8,
        0,
        3
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;",
        "if ( T == a [ j ] ) cout << j - 1 << endl ;",
        "int N , K , ans , l , l , u , d ;",
        "gets ( S ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1,
        8,
        3
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;",
        "if ( T == a [ j ] ) cout << j - 1 << endl ;",
        "gets ( S ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;",
        "int N , K , ans , l , l , u , d ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1,
        0,
        3
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;",
        "int N , K , ans , l , l , u , d ;",
        "gets ( S ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1,
        0,
        3,
        8
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;",
        "int N , K , ans , l , l , u , d ;",
        "gets ( S ) ;",
        "if ( T == a [ j ] ) { cout << j - 1 << endl ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1,
        0,
        8
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;",
        "int N , K , ans , l , l , u , d ;",
        "if ( T == a [ j ] ) { cout << j - 1 << endl ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;",
        "gets ( S ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        3,
        8
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;",
        "gets ( S ) ;",
        "if ( T == a [ j ] ) { cout << j - 1 << endl ; }"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "string S [ 11 ] , T [ 11 ] ;",
        "if ( T == a [ j ] ) { cout << j - 1 << endl ; }"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [11] {aka std::__cxx11::basic_string<char> [11]}’)"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "T = S . substr ( i , 10 . size ( ) ) ;",
        "if ( T == a [ j ] ) cout << j - 1 << endl ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘10’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        6,
        8,
        0
      ],
      "mod_code": [
        "T = S . substr ( i , 10 . size ( ) ) ;",
        "if ( T == a [ j ] ) cout << j - 1 << endl ;",
        "int N , K , ans , l , l , u , d ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        6,
        8,
        0,
        3
      ],
      "mod_code": [
        "T = S . substr ( i , 10 . size ( ) ) ;",
        "if ( T == a [ j ] ) cout << j - 1 << endl ;",
        "int N , K , ans , l , l , u , d ;",
        "gets ( S ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        6,
        8,
        3
      ],
      "mod_code": [
        "T = S . substr ( i , 10 . size ( ) ) ;",
        "if ( T == a [ j ] ) cout << j - 1 << endl ;",
        "gets ( S ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        0
      ],
      "mod_code": [
        "T = S . substr ( i , 10 . size ( ) ) ;",
        "int N , K , ans , l , l , u , d ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        6,
        0,
        3
      ],
      "mod_code": [
        "T = S . substr ( i , 10 . size ( ) ) ;",
        "int N , K , ans , l , l , u , d ;",
        "gets ( S ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        6,
        0,
        3,
        8
      ],
      "mod_code": [
        "T = S . substr ( i , 10 . size ( ) ) ;",
        "int N , K , ans , l , l , u , d ;",
        "gets ( S ) ;",
        "if ( T == a [ j ] ) { cout << j - 1 << endl ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        6,
        0,
        8
      ],
      "mod_code": [
        "T = S . substr ( i , 10 . size ( ) ) ;",
        "int N , K , ans , l , l , u , d ;",
        "if ( T == a [ j ] ) { cout << j - 1 << endl ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "T = S . substr ( i , 10 . size ( ) ) ;",
        "gets ( S ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        3,
        8
      ],
      "mod_code": [
        "T = S . substr ( i , 10 . size ( ) ) ;",
        "gets ( S ) ;",
        "if ( T == a [ j ] ) { cout << j - 1 << endl ; }"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "T = S . substr ( i , 10 . size ( ) ) ;",
        "if ( T == a [ j ] ) { cout << j - 1 << endl ; }"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘10’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "if ( T == a [ j ] ) cout << j - 1 << endl ;",
        "int N , K , ans , l , l , u , d ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        8,
        0,
        3
      ],
      "mod_code": [
        "if ( T == a [ j ] ) cout << j - 1 << endl ;",
        "int N , K , ans , l , l , u , d ;",
        "gets ( S ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "if ( T == a [ j ] ) cout << j - 1 << endl ;",
        "gets ( S ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "int N , K , ans , l , l , u , d ;",
        "gets ( S ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        0,
        3,
        8
      ],
      "mod_code": [
        "int N , K , ans , l , l , u , d ;",
        "gets ( S ) ;",
        "if ( T == a [ j ] ) { cout << j - 1 << endl ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "int N , K , ans , l , l , u , d ;",
        "if ( T == a [ j ] ) { cout << j - 1 << endl ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int l’"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "gets ( S ) ;",
        "if ( T == a [ j ] ) { cout << j - 1 << endl ; }"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}