{
  "meta": {
    "index": 2003,
    "hitid": "3D1TUISJWIUWYMSAT1I2M3B5NMBUI7",
    "workerid": "A1APYLD4DUK33J",
    "probid": "389A",
    "subid": "47784665"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers n , currgcd , integer array a size 100",
      "code": "int n , a [ 100 ] , currgcd ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "rad n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read a [ 0 ] and a [ 1 ]",
      "code": "cin >> a [ 0 ] >> a [ 1 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let currgcd be result of run __gcd with a [ 0 ] and a [ 1 ] as arguments",
      "code": "currgcd = __gcd ( a [ 0 ] , a [ 1 ] ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 2 to n exclusive",
      "code": "for ( int i = 2 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read a [ i ]",
      "code": "cin >> a [ i ] ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if a [ i ] % currgcd , let currgcd = result of run __gcd with currgcd and a [ i ] as arguments",
      "code": "if ( a [ i ] % currgcd ) currgcd = __gcd ( currgcd , a [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print n * currgcd , newline",
      "code": "cout << n * currgcd << endl ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "currgcd = __gcd ( a [ 0 ] [ a [ 1 ] ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "a >> a [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [100]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "currgcd = __gcd ( a [ 0 ] [ a [ 1 ] ) ;",
        "{ n ; }"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        2,
        3
      ],
      "mod_code": [
        "currgcd = __gcd ( a [ 0 ] [ a [ 1 ] ) ;",
        "{ n ; }",
        "cin >> a [ 0 ] , a [ 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        2,
        3,
        6
      ],
      "mod_code": [
        "currgcd = __gcd ( a [ 0 ] [ a [ 1 ] ) ;",
        "{ n ; }",
        "cin >> a [ 0 ] , a [ 1 ] ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        2,
        6
      ],
      "mod_code": [
        "currgcd = __gcd ( a [ 0 ] [ a [ 1 ] ) ;",
        "{ n ; }",
        "a >> a [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "currgcd = __gcd ( a [ 0 ] [ a [ 1 ] ) ;",
        "cin >> a [ 0 ] , a [ 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        3,
        6
      ],
      "mod_code": [
        "currgcd = __gcd ( a [ 0 ] [ a [ 1 ] ) ;",
        "cin >> a [ 0 ] , a [ 1 ] ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "currgcd = __gcd ( a [ 0 ] [ a [ 1 ] ) ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        3,
        6
      ],
      "mod_code": [
        "{ n ; }",
        "cin >> a [ 0 ] , a [ 1 ] ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [100]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "{ n ; }",
        "a >> a [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [100]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "cin >> a [ 0 ] , a [ 1 ] ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [100]’ and ‘int’ to binary ‘operator>>’"
    }
  ]
}