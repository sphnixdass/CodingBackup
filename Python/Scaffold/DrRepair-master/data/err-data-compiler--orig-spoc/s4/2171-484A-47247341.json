{
  "meta": {
    "index": 2171,
    "hitid": "3VLL1PIENQING7XNXJUFNSM61DOOZK",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "484A",
    "subid": "47247341"
  },
  "lines": [
    {
      "line": 0,
      "text": "INF = long long with INF = 1e9",
      "code": "long long INF = ( 1e9 ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = int",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "p = long long array of size 100",
      "code": "long long p [ 100 ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "in function init",
      "code": "void init ( )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "set p [ 0 ] to 1",
      "code": "p [ 0 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 1 to 64 inclusive set p [ i ] to p [ i - 1 ] * 2",
      "code": "for ( int i = 1 ; i <= 64 ; i ++ ) { p [ i ] = p [ i - 1 ] * 2 ; }",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "in function solve taking two long longs L and R and returning a long long",
      "code": "long long solve ( long long L , long long R )",
      "indent": 0
    },
    {
      "line": 8,
      "text": "r = long long with r = R",
      "code": "long long r = R ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "Lb , Rb = long long array of size 100 each",
      "code": "long long Lb [ 100 ] , Rb [ 100 ] ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "Ln , Rn = long long with Ln = 0 and Rn = 0",
      "code": "long long Ln = 0 , Rn = 0 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "loop while L is not 0",
      "code": "while ( L )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "increment Ln then set Lb [ Ln ] to L mod 2",
      "code": "Lb [ ++ Ln ] = L % 2 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set L to L / 2",
      "code": "L /= 2 ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "loop while R is not 0",
      "code": "while ( R )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "increment Rn then set Rb [ Rn ] to R mod 2",
      "code": "Rb [ ++ Rn ] = R % 2 ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "set R to R / 2",
      "code": "R /= 2 ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if Rn is greater than Ln",
      "code": "if ( Rn > Ln )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if p [ Rn ] - 1 is r",
      "code": "if ( p [ Rn ] - 1 == r )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "return r",
      "code": "return r ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 23,
      "text": "return p [ Rn - 1 ] - 1",
      "code": "return p [ Rn - 1 ] - 1 ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 26,
      "text": "ans = long long with ans = 0",
      "code": "long long ans = 0 ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "for i = Rn to 1 inclusive decrementing i",
      "code": "for ( int i = Rn ; i >= 1 ; i -- )",
      "indent": 2
    },
    {
      "line": 28,
      "text": "if Lb [ i ] and Rb [ i ] are both 1 increment ans by p [ i - 1 ]",
      "code": "if ( Lb [ i ] == 1 && Rb [ i ] == 1 ) { ans += p [ i - 1 ] ; }",
      "indent": 3
    },
    {
      "line": 29,
      "text": "if Rb [ i ] is 1 and Lb [ i ] is 0",
      "code": "if ( Rb [ i ] == 1 && Lb [ i ] == 0 )",
      "indent": 3
    },
    {
      "line": 30,
      "text": "flag = int with flag = 1",
      "code": "int flag = 1 ;",
      "indent": 4
    },
    {
      "line": 31,
      "text": "for j = i to 1 inclusive decrementing j",
      "code": "for ( int j = i ; j >= 1 ; j -- )",
      "indent": 4
    },
    {
      "line": 32,
      "text": "if Rb [ j ] is 0",
      "code": "if ( Rb [ j ] == 0 )",
      "indent": 5
    },
    {
      "line": 33,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 6
    },
    {
      "line": 34,
      "text": "break",
      "code": "break ;",
      "indent": 6
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 37,
      "text": "if flag is not 0",
      "code": "if ( flag )",
      "indent": 4
    },
    {
      "line": 38,
      "text": "increment ans by p [ i ] - 1",
      "code": "ans += p [ i ] - 1 ;",
      "indent": 5
    },
    {
      "line": 39,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 40,
      "text": "increment ans by p [ i - 1 ] - 1",
      "code": "ans += p [ i - 1 ] - 1 ;",
      "indent": 5
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 42,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 45,
      "text": "return ans",
      "code": "return ans ;",
      "indent": 2
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 49,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 50,
      "text": "call init",
      "code": "init ( ) ;",
      "indent": 1
    },
    {
      "line": 51,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 52,
      "text": "L , R = long long",
      "code": "long long L , R ;",
      "indent": 2
    },
    {
      "line": 53,
      "text": "read L then R",
      "code": "cin >> L >> R ;",
      "indent": 2
    },
    {
      "line": 54,
      "text": "print solve of L and R",
      "code": "cout << solve ( L , R ) << endl ;",
      "indent": 2
    },
    {
      "line": 55,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 57,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "void init ( ) { }"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "long long solve ( long long L , long long R ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "long long Rn = 0 , Rn = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘long long int Rn’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "for ( i = Rn ; i >= 1 ; i -- )"
      ],
      "err_line": 27,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "for ( j = i ; j >= 1 ; j -- )"
      ],
      "err_line": 31,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 34,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 39,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        51
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 51,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        53
      ],
      "mod_code": [
        "L cin >> L >> R ;"
      ],
      "err_line": 53,
      "err_msg": "expected ‘;’ before ‘cin’"
    },
    {
      "mod_line": [
        12,
        16,
        51
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "Rb [ Rn ] = R % 2 ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 51,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        16,
        51,
        32
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "Rb [ Rn ] = R % 2 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "if ( Rb [ j ] == ' 0 ' )"
      ],
      "err_line": 51,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        16,
        51,
        25
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "Rb [ Rn ] = R % 2 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "else else"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        16,
        51,
        42
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "Rb [ Rn ] = R % 2 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        16,
        32,
        25
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "Rb [ Rn ] = R % 2 ;",
        "if ( Rb [ j ] == ' 0 ' )",
        "else else"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        16,
        32,
        42
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "Rb [ Rn ] = R % 2 ;",
        "if ( Rb [ j ] == ' 0 ' )",
        "break break ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        16,
        25
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "Rb [ Rn ] = R % 2 ;",
        "else else"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        16,
        25,
        42
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "Rb [ Rn ] = R % 2 ;",
        "else else",
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        16,
        42
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "Rb [ Rn ] = R % 2 ;",
        "break break ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        51
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 51,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        51,
        32
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "if ( Rb [ j ] == ' 0 ' )"
      ],
      "err_line": 51,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        51,
        32,
        25
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "if ( Rb [ j ] == ' 0 ' )",
        "else else"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        51,
        32,
        42
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "if ( Rb [ j ] == ' 0 ' )",
        "break break ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        51,
        25
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "else else"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        51,
        25,
        42
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "else else",
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        51,
        42
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        32,
        25
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "if ( Rb [ j ] == ' 0 ' )",
        "else else"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        32,
        25,
        42
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "if ( Rb [ j ] == ' 0 ' )",
        "else else",
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        32,
        42
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "if ( Rb [ j ] == ' 0 ' )",
        "break break ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        25
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "else else"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        25,
        42
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "else else",
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        42
      ],
      "mod_code": [
        "Lb [ Ln ] = L % 2 ;",
        "break break ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        16,
        51
      ],
      "mod_code": [
        "Rb [ Rn ] = R % 2 ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 51,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        51,
        32
      ],
      "mod_code": [
        "Rb [ Rn ] = R % 2 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "if ( Rb [ j ] == ' 0 ' )"
      ],
      "err_line": 51,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        51,
        32,
        25
      ],
      "mod_code": [
        "Rb [ Rn ] = R % 2 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "if ( Rb [ j ] == ' 0 ' )",
        "else else"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        16,
        51,
        32,
        42
      ],
      "mod_code": [
        "Rb [ Rn ] = R % 2 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "if ( Rb [ j ] == ' 0 ' )",
        "break break ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        16,
        51,
        25
      ],
      "mod_code": [
        "Rb [ Rn ] = R % 2 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "else else"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        16,
        51,
        25,
        42
      ],
      "mod_code": [
        "Rb [ Rn ] = R % 2 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "else else",
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        16,
        51,
        42
      ],
      "mod_code": [
        "Rb [ Rn ] = R % 2 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        16,
        32,
        25
      ],
      "mod_code": [
        "Rb [ Rn ] = R % 2 ;",
        "if ( Rb [ j ] == ' 0 ' )",
        "else else"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        16,
        32,
        25,
        42
      ],
      "mod_code": [
        "Rb [ Rn ] = R % 2 ;",
        "if ( Rb [ j ] == ' 0 ' )",
        "else else",
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        16,
        32,
        42
      ],
      "mod_code": [
        "Rb [ Rn ] = R % 2 ;",
        "if ( Rb [ j ] == ' 0 ' )",
        "break break ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        16,
        25
      ],
      "mod_code": [
        "Rb [ Rn ] = R % 2 ;",
        "else else"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        16,
        25,
        42
      ],
      "mod_code": [
        "Rb [ Rn ] = R % 2 ;",
        "else else",
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        16,
        42
      ],
      "mod_code": [
        "Rb [ Rn ] = R % 2 ;",
        "break break ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        51,
        32
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "if ( Rb [ j ] == ' 0 ' )"
      ],
      "err_line": 51,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        51,
        32,
        25
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "if ( Rb [ j ] == ' 0 ' )",
        "else else"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        51,
        32,
        25,
        42
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "if ( Rb [ j ] == ' 0 ' )",
        "else else",
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        51,
        32,
        42
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "if ( Rb [ j ] == ' 0 ' )",
        "break break ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        51,
        25
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "else else"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        51,
        25,
        42
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "else else",
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        51,
        42
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        32,
        25
      ],
      "mod_code": [
        "if ( Rb [ j ] == ' 0 ' )",
        "else else"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        32,
        25,
        42
      ],
      "mod_code": [
        "if ( Rb [ j ] == ' 0 ' )",
        "else else",
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        32,
        42
      ],
      "mod_code": [
        "if ( Rb [ j ] == ' 0 ' )",
        "break break ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        25,
        42
      ],
      "mod_code": [
        "else else",
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}