{
  "meta": {
    "index": 681,
    "hitid": "3RHLQY6EDTYG9DI9MHQ9I2XYW4HD43",
    "workerid": "ACI8PUCF5OPDC",
    "probid": "14A",
    "subid": "44001148"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer flag",
      "code": "int flag ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integer l , r , u , d",
      "code": "int l , r , u , d ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create character array arr with size 50 , 50",
      "code": "char arr [ 50 ] [ 50 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integers n , m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n , m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for integer i = 0 to n - 1 with increment i",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for integer j = 0 to m - 1 with increment j do read arr [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < m ; j ++ ) { cin >> arr [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set flag = 0",
      "code": "flag = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for integer i = 0 to n - 1 with increment i",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for integer j = 0 to m - 1 with increment j",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if arr [ i ] [ j ] is equal to ' * ' then",
      "code": "if ( arr [ i ] [ j ] == ' * ' )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "set u to i",
      "code": "u = i ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if flag is equal to 1 then break the loop",
      "code": "if ( flag == 1 ) { break ; }",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "for integer i = 0 to m with increment i",
      "code": "for ( int i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "for integer j = 0 to n with increment j",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if arr [ i ] [ j ] is equal to ' * ' then",
      "code": "if ( arr [ j ] [ i ] == ' * ' )",
      "indent": 3
    },
    {
      "line": 24,
      "text": "set l to i",
      "code": "l = i ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 29,
      "text": "if flag is equal to 1 then break the loop",
      "code": "if ( flag == 1 ) { break ; }",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "for integer i = n - 1 to 0 with decrement i",
      "code": "for ( int i = n - 1 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 33,
      "text": "for integer j = 0 to m - 1 with increment j",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 34,
      "text": "if arr [ i ] [ j ] is equal to ' * ' then",
      "code": "if ( arr [ i ] [ j ] == ' * ' )",
      "indent": 3
    },
    {
      "line": 35,
      "text": "set d to i",
      "code": "d = i ;",
      "indent": 4
    },
    {
      "line": 36,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 4
    },
    {
      "line": 37,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 40,
      "text": "if flag is equal to 1 then break the loop",
      "code": "if ( flag == 1 ) { break ; }",
      "indent": 2
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 42,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 1
    },
    {
      "line": 43,
      "text": "for integer i = m - 1 to 0 with decrement i",
      "code": "for ( int i = m - 1 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 44,
      "text": "for integer j = 0 to n - 1 with increment j",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 45,
      "text": "if arr [ i ] [ j ] is equal to ' * ' then",
      "code": "if ( arr [ j ] [ i ] == ' * ' )",
      "indent": 3
    },
    {
      "line": 46,
      "text": "set r to i",
      "code": "r = i ;",
      "indent": 4
    },
    {
      "line": 47,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 4
    },
    {
      "line": 48,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 51,
      "text": "if flag is equal to 1 then break the loop",
      "code": "if ( flag == 1 ) { break ; }",
      "indent": 2
    },
    {
      "line": 52,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 53,
      "text": "for integer i = u to d with increment i",
      "code": "for ( int i = u ; i <= d ; i ++ )",
      "indent": 1
    },
    {
      "line": 54,
      "text": "for integer j = l to r with increment j do print arr [ i ] [ j ]",
      "code": "for ( int j = l ; j <= r ; j ++ ) { cout << arr [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 55,
      "text": "print a new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 57,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int l , r , u , d , d ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 [ 50 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int flag = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] ] == ' * ' )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "int flag = 0 ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] ] == ' * ' )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "int flag = 0 ;"
      ],
      "err_line": 31,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] ] == ' * ' )"
      ],
      "err_line": 34,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 37,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "int flag = 0 ;"
      ],
      "err_line": 42,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        45
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] ] == ' * ' )"
      ],
      "err_line": 45,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        48
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 48,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "for ( int j = 0 ; j < m - 1 ; j ++ ) cin >> arr [ i ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        7,
        23
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "for ( int j = 0 ; j < m - 1 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "if ( arr [ i ] [ j ] == ' * ' )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        7,
        23,
        45
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "for ( int j = 0 ; j < m - 1 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "if ( arr [ i ] [ j ] == ' * ' )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        7,
        23,
        9
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "for ( int j = 0 ; j < m - 1 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int flag = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        7,
        23,
        24
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "for ( int j = 0 ; j < m - 1 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int l = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        7,
        45
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "for ( int j = 0 ; j < m - 1 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "if ( arr [ i ] [ j ] == ' * ' )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        7,
        45,
        9
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "for ( int j = 0 ; j < m - 1 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int flag = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        7,
        45,
        24
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "for ( int j = 0 ; j < m - 1 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int l = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        7,
        9
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "for ( int j = 0 ; j < m - 1 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "int flag = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        24
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "for ( int j = 0 ; j < m - 1 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "int flag = 0 ;",
        "int l = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        7,
        24
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "for ( int j = 0 ; j < m - 1 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "int l = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        23
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "if ( arr [ i ] [ j ] == ' * ' )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        23,
        45
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "if ( arr [ i ] [ j ] == ' * ' )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        23,
        45,
        9
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int flag = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        23,
        45,
        24
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int l = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        23,
        9
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int flag = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        23,
        9,
        24
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int flag = 0 ;",
        "int l = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        23,
        24
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int l = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        45
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "if ( arr [ i ] [ j ] == ' * ' )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        45,
        9
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int flag = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        45,
        9,
        24
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int flag = 0 ;",
        "int l = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        45,
        24
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int l = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "int flag = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        9,
        24
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "int flag = 0 ;",
        "int l = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        3,
        24
      ],
      "mod_code": [
        "char arr [ 50 ] , 50 ;",
        "int l = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        7,
        23,
        45,
        9
      ],
      "mod_code": [
        "for ( int j = 0 ; j < m - 1 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int flag = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        7,
        23,
        9
      ],
      "mod_code": [
        "for ( int j = 0 ; j < m - 1 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int flag = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        7,
        23,
        9,
        24
      ],
      "mod_code": [
        "for ( int j = 0 ; j < m - 1 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int flag = 0 ;",
        "int l = i ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        7,
        45,
        9
      ],
      "mod_code": [
        "for ( int j = 0 ; j < m - 1 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int flag = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        7,
        45,
        9,
        24
      ],
      "mod_code": [
        "for ( int j = 0 ; j < m - 1 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int flag = 0 ;",
        "int l = i ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "for ( int j = 0 ; j < m - 1 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "int flag = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        7,
        9,
        24
      ],
      "mod_code": [
        "for ( int j = 0 ; j < m - 1 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "int flag = 0 ;",
        "int l = i ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        23,
        45,
        9
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == ' * ' )",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int flag = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        23,
        45,
        9,
        24
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == ' * ' )",
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int flag = 0 ;",
        "int l = i ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        23,
        9
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int flag = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        23,
        9,
        24
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int flag = 0 ;",
        "int l = i ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        45,
        9
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int flag = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        45,
        9,
        24
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == ' * ' )",
        "int flag = 0 ;",
        "int l = i ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        9,
        24
      ],
      "mod_code": [
        "int flag = 0 ;",
        "int l = i ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘int flag’"
    }
  ]
}