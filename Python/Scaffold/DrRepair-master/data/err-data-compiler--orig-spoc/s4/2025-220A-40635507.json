{
  "meta": {
    "index": 2025,
    "hitid": "32K26U12DNIF3Q1O6DRWRSXB81IDV8",
    "workerid": "A28Q0RBWI7B0V1",
    "probid": "220A",
    "subid": "40635507"
  },
  "lines": [
    {
      "line": 0,
      "text": "create maxn as a readonly integer with value 101000",
      "code": "const int maxn = 101000 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "INF = constant integer with value 0x3f3f3f3f",
      "code": "const int INF = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create integer array a with size of maxn",
      "code": "int a [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "b = int array with size maxn",
      "code": "int b [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "c = integer with value 0",
      "code": "int c = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "input n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set all items in a to 0",
      "code": "memset ( a , 0 , sizeof ( a ) ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set all items in b to 0",
      "code": "memset ( b , 0 , sizeof ( b ) ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for each i from 0 to n - 1 input a [ i ]",
      "code": "for ( int i = 0 ; i < n ; ++ i ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "call memcpy on b , a , and sizeof ( a )",
      "code": "memcpy ( b , a , sizeof ( a ) ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "call function sort with parameters b and b + n",
      "code": "sort ( b , b + n ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i from 0 to n - 1",
      "code": "for ( int i = 0 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if a [ i ] ! = b [ i ] then increment c",
      "code": "if ( a [ i ] != b [ i ] ) c ++ ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if c is greater than 2",
      "code": "if ( c > 2 )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int maxn = 101000 ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int a = 101000 ;"
      ],
      "err_line": 2,
      "err_msg": "‘maxn’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "{ n ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        10,
        13
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        10,
        13,
        18
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        10,
        13,
        12
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "sort ( b , b + n + n ) ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        10,
        13,
        11
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        10,
        18
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        10,
        18,
        12
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;",
        "else else",
        "sort ( b , b + n + n ) ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        10,
        18,
        11
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;",
        "else else",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        10,
        12
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;",
        "sort ( b , b + n + n ) ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        10,
        12,
        11
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;",
        "sort ( b , b + n + n ) ;",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        10,
        11
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        13,
        18
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        13,
        18,
        12
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "else else",
        "sort ( b , b + n + n ) ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        13,
        18,
        11
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "else else",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        13,
        12
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "sort ( b , b + n + n ) ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        13,
        12,
        11
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "sort ( b , b + n + n ) ;",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        13,
        11
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        18
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        18,
        12
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "else else",
        "sort ( b , b + n + n ) ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        18,
        12,
        11
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "else else",
        "sort ( b , b + n + n ) ;",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        18,
        11
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "else else",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "sort ( b , b + n + n ) ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        12,
        11
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "sort ( b , b + n + n ) ;",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "int maxn = 101000 ;",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        13,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "else else"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        13,
        18,
        12
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "else else",
        "sort ( b , b + n + n ) ;"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        13,
        18,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "else else",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        13,
        12
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "sort ( b , b + n + n ) ;"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        13,
        12,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "sort ( b , b + n + n ) ;",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        13,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;",
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        18,
        12
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;",
        "else else",
        "sort ( b , b + n + n ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        18,
        12,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;",
        "else else",
        "sort ( b , b + n + n ) ;",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        18,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n - 1 ; i ++ ) cin >> a [ i ] ;",
        "else else",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "else else"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        18,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "else else",
        "sort ( b , b + n + n ) ;"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        18,
        12,
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "else else",
        "sort ( b , b + n + n ) ;",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        18,
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "else else",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "sort ( b , b + n + n ) ;"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        12,
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "sort ( b , b + n + n ) ;",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        12
      ],
      "mod_code": [
        "else else",
        "sort ( b , b + n + n ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        18,
        12,
        11
      ],
      "mod_code": [
        "else else",
        "sort ( b , b + n + n ) ;",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        18,
        11
      ],
      "mod_code": [
        "else else",
        "memcpy ( a , a , sizeof ( a ) ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}