{
  "meta": {
    "index": 983,
    "hitid": "3VEI3XUCZRRWZGNX22DHQPPX211RPB",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "275A",
    "subid": "49076581"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "dx , dy = int with dx = 1 and dy = 1 and n = two dimensional int array of sizes 3 and 3",
      "code": "int n [ 3 ] [ 3 ] , dx = 1 , dy = 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 0 to 3",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for j = 0 to 3",
      "code": "for ( int j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 4,
      "text": "read n [ i ] [ j ]",
      "code": "cin >> n [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 5,
      "text": "set n [ i ] [ j ] to n [ i ] [ j ] mod 2",
      "code": "n [ i ] [ j ] = n [ i ] [ j ] % 2 ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "out = two dimensional array of sizes 3 and 3 with all values set to 1",
      "code": "int out [ 3 ] [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 } } ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to 3",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for j = 0 to 3",
      "code": "for ( int j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if n [ i ] [ j ] is 1",
      "code": "if ( n [ i ] [ j ] == 1 )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "set out [ i ] [ j ] to out [ i ] [ j ] bitwise - xor 1",
      "code": "out [ i ] [ j ] = out [ i ] [ j ] ^ 1 ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "if j + dy is less than 3 set out [ i ] [ j + dy ] to out [ i ] [ j + dy ] bitwise - xor 1",
      "code": "if ( j + dy < 3 ) { out [ i ] [ j + dy ] ^= 1 ; }",
      "indent": 4
    },
    {
      "line": 14,
      "text": "if j - dy is greater or equal to 0 set out [ i ] [ j - dy ] to out [ i ] [ j - dy ] bitwise - xor 1",
      "code": "if ( j - dy >= 0 ) { out [ i ] [ j - dy ] ^= 1 ; }",
      "indent": 4
    },
    {
      "line": 15,
      "text": "if i + dy is less than 3 set out [ i + dx ] [ j ] to out [ i + dx ] [ j ] bitwise - xor 1",
      "code": "if ( i + dx < 3 ) out [ i + dx ] [ j ] ^= 1 ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "if i - dy is greater or equal to 0 set ou [ i - dx ] [ j ] to out [ i - dx ] [ j ] bitwise - xor 1",
      "code": "if ( i - dx >= 0 ) out [ i - dx ] [ j ] ^= 1 ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "for i = 0 to 3",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "for j = 0 to 3 print out [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < 3 ; j ++ ) cout << out [ i ] [ j ] ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 16,
      "err_msg": "‘ou’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int dx [ 3 ] , dy [ 3 ] , dy [ 3 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int dy [3]’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 , 1 } ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( i - dy >= 0 ) { ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ; }"
      ],
      "err_line": 16,
      "err_msg": "‘ou’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 20,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "int out [ 3 ] = { 1 } ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        12
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "int out [ 3 ] = { 1 } ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        12,
        13
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "int out [ 3 ] = { 1 } ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        12,
        14
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "int out [ 3 ] = { 1 } ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        12,
        15
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "int out [ 3 ] = { 1 } ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        12,
        16
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "int out [ 3 ] = { 1 } ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        13
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "int out [ 3 ] = { 1 } ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        13,
        14
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "int out [ 3 ] = { 1 } ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        13,
        15
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "int out [ 3 ] = { 1 } ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        13,
        16
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "int out [ 3 ] = { 1 } ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        14
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "int out [ 3 ] = { 1 } ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        14,
        15
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "int out [ 3 ] = { 1 } ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        14,
        16
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "int out [ 3 ] = { 1 } ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        15
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "int out [ 3 ] = { 1 } ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        15,
        16
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "int out [ 3 ] = { 1 } ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        16
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "int out [ 3 ] = { 1 } ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        13
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        13,
        14
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        13,
        15
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        13,
        16
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        14
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        14,
        15
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        14,
        16
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        15
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        15,
        16
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        16
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        13,
        14
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        13,
        14,
        15
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        13,
        14,
        16
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        13,
        15
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        13,
        15,
        16
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        13,
        16
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        14,
        15
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        14,
        15,
        16
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        14,
        16
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        15,
        16
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "int dx [ 3 ] , n [ 3 ] , dy [ 3 ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12,
        13
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12,
        13,
        14
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12,
        13,
        15
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12,
        13,
        16
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12,
        14
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12,
        14,
        15
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12,
        14,
        16
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12,
        15
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12,
        15,
        16
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12,
        16
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        13,
        14
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        13,
        14,
        15
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        13,
        14,
        16
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        13,
        15
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        13,
        15,
        16
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        13,
        16
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        14,
        15
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        14,
        15,
        16
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        14,
        16
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        15
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        15,
        16
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        16
      ],
      "mod_code": [
        "int out [ 3 ] = { 1 } ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        13,
        14
      ],
      "mod_code": [
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        13,
        14,
        15
      ],
      "mod_code": [
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        13,
        14,
        16
      ],
      "mod_code": [
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        13,
        15
      ],
      "mod_code": [
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        13,
        15,
        16
      ],
      "mod_code": [
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        13,
        16
      ],
      "mod_code": [
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        14,
        15,
        16
      ],
      "mod_code": [
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 16,
      "err_msg": "‘ou’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        14,
        16
      ],
      "mod_code": [
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 16,
      "err_msg": "‘ou’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        15,
        16
      ],
      "mod_code": [
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 16,
      "err_msg": "‘ou’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        16
      ],
      "mod_code": [
        "out [ i ] [ j ] = out [ i ] [ j ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 16,
      "err_msg": "‘ou’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14
      ],
      "mod_code": [
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        14,
        15
      ],
      "mod_code": [
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        14,
        15,
        16
      ],
      "mod_code": [
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        14,
        16
      ],
      "mod_code": [
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        15,
        16
      ],
      "mod_code": [
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        16
      ],
      "mod_code": [
        "if ( j + dy < 3 ) out [ i ] [ j + dy + dy [ i ] [ j + dy ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        15,
        16
      ],
      "mod_code": [
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 16,
      "err_msg": "‘ou’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        16
      ],
      "mod_code": [
        "if ( j - dy >= 0 ) out [ i ] [ j - ' dy ' ] = out [ i ] [ j - 1 ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 16,
      "err_msg": "‘ou’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        16
      ],
      "mod_code": [
        "if ( i + dy < 3 ) out [ i + dx ] [ j ] = out [ i + dx ] [ j ] ;",
        "if ( i - dy >= 0 ) ou [ i - dx ] [ j ] = out [ i - dx ] [ j ] ;"
      ],
      "err_line": 16,
      "err_msg": "‘ou’ was not declared in this scope"
    }
  ]
}