{
  "meta": {
    "index": 151,
    "hitid": "38F60IALAGB6REW5P63MB3P7HCAT02",
    "workerid": "A1APYLD4DUK33J",
    "probid": "3A",
    "subid": "44568265"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create characters x1 , x2",
      "code": "char x1 , x2 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integers cx , cy , dx , dy",
      "code": "int cx , cy , dx , dy ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer ans",
      "code": "int ans ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read x1 read cy read x2 read dy",
      "code": "while ( cin >> x1 >> cy >> x2 >> dy )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set cx to x1 - 48 - ' 0 '",
      "code": "cx = x1 - 48 - ' 0 ' ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set dx to x2 - 48 - ' 0 '",
      "code": "dx = x2 - 48 - ' 0 ' ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "create integers xd , yd with xd = cx - dx , yd = cy - dy",
      "code": "int xd = cx - dx , yd = cy - dy ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set ans to maximum of absolute value of xd and absolute value of yd",
      "code": "ans = max ( abs ( xd ) , abs ( yd ) ) ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print ans print newline",
      "code": "cout << ans << endl ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "while decrementing ans",
      "code": "while ( ans -- )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if xd is greater than 0",
      "code": "if ( xd > 0 )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "print \" L \"",
      "code": "cout << \" L \" ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "decrement xd",
      "code": "xd -- ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if xd is less than 0",
      "code": "if ( xd < 0 )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "print \" R \"",
      "code": "cout << \" R \" ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "increment xd",
      "code": "xd ++ ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "if yd is greater than 0",
      "code": "if ( yd > 0 )",
      "indent": 3
    },
    {
      "line": 20,
      "text": "print \" D \"",
      "code": "cout << \" D \" ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "decrement yd",
      "code": "yd -- ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 23,
      "text": "if yd is less than 0",
      "code": "if ( yd < 0 )",
      "indent": 3
    },
    {
      "line": 24,
      "text": "print \" U \"",
      "code": "cout << \" U \" ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "increment yd",
      "code": "yd ++ ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int cx , cy , dx , dy , dy ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int dy’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cin >> x1 >> cy >> x2 >> n ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "ans = max ( abs ( xd ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘max(int)’"
    },
    {
      "mod_line": [
        12,
        16,
        24,
        6
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        12,
        16,
        5,
        6
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;",
        "cx = x1 - ( 48 - ' 0 ' ) ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        12,
        16,
        9,
        6
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;",
        "cout << ans ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        12,
        16,
        6
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        12,
        24,
        5,
        6
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;",
        "cx = x1 - ( 48 - ' 0 ' ) ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        12,
        24,
        9,
        6
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;",
        "cout << ans ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        12,
        24,
        6
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        12,
        5,
        9,
        6
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cx = x1 - ( 48 - ' 0 ' ) ;",
        "cout << ans ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        12,
        5,
        6
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cx = x1 - ( 48 - ' 0 ' ) ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        12,
        9,
        6
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << ans ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        16,
        24,
        5,
        6
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;",
        "cx = x1 - ( 48 - ' 0 ' ) ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        16,
        24,
        9,
        6
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;",
        "cout << ans ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        16,
        24,
        6
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        16,
        5,
        9,
        6
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cx = x1 - ( 48 - ' 0 ' ) ;",
        "cout << ans ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        16,
        5,
        6
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cx = x1 - ( 48 - ' 0 ' ) ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        16,
        9,
        6
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << ans ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        16,
        6
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        24,
        5,
        9,
        6
      ],
      "mod_code": [
        "cout << \" U \" << endl ;",
        "cx = x1 - ( 48 - ' 0 ' ) ;",
        "cout << ans ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        24,
        5,
        6
      ],
      "mod_code": [
        "cout << \" U \" << endl ;",
        "cx = x1 - ( 48 - ' 0 ' ) ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        24,
        9,
        6
      ],
      "mod_code": [
        "cout << \" U \" << endl ;",
        "cout << ans ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        24,
        6
      ],
      "mod_code": [
        "cout << \" U \" << endl ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        5,
        9,
        6
      ],
      "mod_code": [
        "cx = x1 - ( 48 - ' 0 ' ) ;",
        "cout << ans ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "cx = x1 - ( 48 - ' 0 ' ) ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "cout << ans ;",
        "string dx = x2 - 48 - ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    }
  ]
}