{
  "meta": {
    "index": 2075,
    "hitid": "3PR3LXCWSFTV4PT2UCNCTHB6XCT9XE",
    "workerid": "AIWEXPJAU66D9",
    "probid": "50A",
    "subid": "48969717"
  },
  "lines": [
    {
      "line": 0,
      "text": "let n , x , b , sum and w be long longs with sum and w = 0 ; a is an array of long long of size 1000001",
      "code": "long long n , a [ 1000001 ] , x , b , sum = 0 , w = 0 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "ch1 and ch2 = characters",
      "code": "char ch1 , ch2 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "s = string",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "let m and n be long longs",
      "code": "long long m , n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read m and n",
      "code": "cin >> m >> n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "w = m * n",
      "code": "w = m * n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "divide w by 2",
      "code": "w /= 2 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print ceil of w and a new line",
      "code": "cout << ceil ( w ) << endl ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long n , x , a [ 1000001 ] , b [ 1000001 ] , sum = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘w’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long n , x , b [ 1000001 ] , b [ 1000001 ] , sum = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int b [1000001]’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char ch1 , ch2 = \" \" ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cin >> m >> k ;"
      ],
      "err_line": 5,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘__gnu_cxx::__enable_if<true, double>::__type {aka double}’)"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "long long n , x , a [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "cin >> m >> k ;"
      ],
      "err_line": 5,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        5,
        1
      ],
      "mod_code": [
        "long long n , x , a [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "cin >> m >> k ;",
        "char ch1 , ch2 = \" \" ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        1,
        6
      ],
      "mod_code": [
        "long long n , x , a [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "cin >> m >> k ;",
        "char ch1 , ch2 = \" \" ;",
        "w *= n ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        1,
        8
      ],
      "mod_code": [
        "long long n , x , a [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "cin >> m >> k ;",
        "char ch1 , ch2 = \" \" ;",
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5,
        6
      ],
      "mod_code": [
        "long long n , x , a [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "cin >> m >> k ;",
        "w *= n ;"
      ],
      "err_line": 5,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        5,
        6,
        8
      ],
      "mod_code": [
        "long long n , x , a [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "cin >> m >> k ;",
        "w *= n ;",
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        5,
        8
      ],
      "mod_code": [
        "long long n , x , a [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "cin >> m >> k ;",
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "long long n , x , a [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "char ch1 , ch2 = \" \" ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        1,
        6
      ],
      "mod_code": [
        "long long n , x , a [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "char ch1 , ch2 = \" \" ;",
        "w *= n ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        1,
        6,
        8
      ],
      "mod_code": [
        "long long n , x , a [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "char ch1 , ch2 = \" \" ;",
        "w *= n ;",
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        1,
        8
      ],
      "mod_code": [
        "long long n , x , a [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "char ch1 , ch2 = \" \" ;",
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "long long n , x , a [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "w *= n ;"
      ],
      "err_line": 6,
      "err_msg": "‘w’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        6,
        8
      ],
      "mod_code": [
        "long long n , x , a [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "w *= n ;",
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 6,
      "err_msg": "‘w’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "long long n , x , a [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 6,
      "err_msg": "‘w’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "long long n , x , b [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "cin >> m >> k ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int b [1000001]’"
    },
    {
      "mod_line": [
        0,
        5,
        1
      ],
      "mod_code": [
        "long long n , x , b [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "cin >> m >> k ;",
        "char ch1 , ch2 = \" \" ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int b [1000001]’"
    },
    {
      "mod_line": [
        0,
        5,
        1,
        6
      ],
      "mod_code": [
        "long long n , x , b [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "cin >> m >> k ;",
        "char ch1 , ch2 = \" \" ;",
        "w *= n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int b [1000001]’"
    },
    {
      "mod_line": [
        0,
        5,
        1,
        8
      ],
      "mod_code": [
        "long long n , x , b [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "cin >> m >> k ;",
        "char ch1 , ch2 = \" \" ;",
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int b [1000001]’"
    },
    {
      "mod_line": [
        0,
        5,
        6
      ],
      "mod_code": [
        "long long n , x , b [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "cin >> m >> k ;",
        "w *= n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int b [1000001]’"
    },
    {
      "mod_line": [
        0,
        5,
        6,
        8
      ],
      "mod_code": [
        "long long n , x , b [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "cin >> m >> k ;",
        "w *= n ;",
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int b [1000001]’"
    },
    {
      "mod_line": [
        0,
        5,
        8
      ],
      "mod_code": [
        "long long n , x , b [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "cin >> m >> k ;",
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int b [1000001]’"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "long long n , x , b [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "char ch1 , ch2 = \" \" ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int b [1000001]’"
    },
    {
      "mod_line": [
        0,
        1,
        6
      ],
      "mod_code": [
        "long long n , x , b [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "char ch1 , ch2 = \" \" ;",
        "w *= n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int b [1000001]’"
    },
    {
      "mod_line": [
        0,
        1,
        6,
        8
      ],
      "mod_code": [
        "long long n , x , b [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "char ch1 , ch2 = \" \" ;",
        "w *= n ;",
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int b [1000001]’"
    },
    {
      "mod_line": [
        0,
        1,
        8
      ],
      "mod_code": [
        "long long n , x , b [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "char ch1 , ch2 = \" \" ;",
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int b [1000001]’"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "long long n , x , b [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "w *= n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int b [1000001]’"
    },
    {
      "mod_line": [
        0,
        6,
        8
      ],
      "mod_code": [
        "long long n , x , b [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "w *= n ;",
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int b [1000001]’"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "long long n , x , b [ 1000001 ] , b [ 1000001 ] , sum = 0 ;",
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘long long int b [1000001]’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "cin >> m >> k ;",
        "char ch1 , ch2 = \" \" ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        1,
        6
      ],
      "mod_code": [
        "cin >> m >> k ;",
        "char ch1 , ch2 = \" \" ;",
        "w *= n ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        1,
        6,
        8
      ],
      "mod_code": [
        "cin >> m >> k ;",
        "char ch1 , ch2 = \" \" ;",
        "w *= n ;",
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        1,
        8
      ],
      "mod_code": [
        "cin >> m >> k ;",
        "char ch1 , ch2 = \" \" ;",
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "cin >> m >> k ;",
        "w *= n ;"
      ],
      "err_line": 5,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        8
      ],
      "mod_code": [
        "cin >> m >> k ;",
        "w *= n ;",
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "cin >> m >> k ;",
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "char ch1 , ch2 = \" \" ;",
        "w *= n ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "char ch1 , ch2 = \" \" ;",
        "w *= n ;",
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "char ch1 , ch2 = \" \" ;",
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "w *= n ;",
        "cout << * ceil ( w ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘__gnu_cxx::__enable_if<true, double>::__type {aka double}’)"
    }
  ]
}