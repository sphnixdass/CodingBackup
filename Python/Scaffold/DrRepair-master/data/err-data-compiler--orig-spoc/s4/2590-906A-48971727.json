{
  "meta": {
    "index": 2590,
    "hitid": "36U4VBVNQO79RLVTJOCB0VCWAITRU7",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "906A",
    "subid": "48971727"
  },
  "lines": [
    {
      "line": 0,
      "text": "now = bool array of size 30",
      "code": "bool now [ 30 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a = char array of size 100010",
      "code": "char a [ 100010 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "b , mark = bool array of size 30 each",
      "code": "bool b [ 30 ] , mark [ 30 ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "c = char",
      "code": "char c ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "cnt = int with cnt = 0",
      "code": "int cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "cnt3 = int with cnt3 = 0",
      "code": "int cnt3 = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "ans = int with ans = =",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "ho = bool with ho = 0",
      "code": "bool ho = 0 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for x = 1 to n inclusive",
      "code": "for ( int x = 1 ; x <= n ; ++ x )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "read c then s",
      "code": "cin >> c >> s ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if x is n break",
      "code": "if ( x == n ) break ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "l = int with l = length of s",
      "code": "int l = s . length ( ) ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set all values of now to 0",
      "code": "memset ( now , 0 , sizeof ( now ) ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "cnt2 = int with cnt2 = 0",
      "code": "int cnt2 = 0 ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if cnt3 is 25 set cnt to 1",
      "code": "if ( cnt3 == 25 ) cnt = 1 ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if c is ' ! '",
      "code": "if ( c == ' ! ' )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if cnt is 1",
      "code": "if ( cnt == 1 )",
      "indent": 3
    },
    {
      "line": 21,
      "text": "increment ans",
      "code": "ans ++ ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "continue",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 24,
      "text": "if ho is 0",
      "code": "if ( ho == 0 )",
      "indent": 3
    },
    {
      "line": 25,
      "text": "for i = 0 to l",
      "code": "for ( int i = 0 ; i < l ; ++ i )",
      "indent": 4
    },
    {
      "line": 26,
      "text": "if mark [ s [ i ] - ' a ' ] is 0",
      "code": "if ( mark [ s [ i ] - ' a ' ] == 0 )",
      "indent": 5
    },
    {
      "line": 27,
      "text": "increment cnt then set a [ cnt ] to s [ i ]",
      "code": "a [ ++ cnt ] = s [ i ] ;",
      "indent": 6
    },
    {
      "line": 28,
      "text": "set mar [ s [ i ] - ' a ' ] to 1",
      "code": "mark [ s [ i ] - ' a ' ] = 1 ;",
      "indent": 6
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 31,
      "text": "for i = 1 to cnt inclusive",
      "code": "for ( int i = 1 ; i <= cnt ; ++ i )",
      "indent": 4
    },
    {
      "line": 32,
      "text": "if b [ a [ i ] - ' a ' ] is 0 increment cnt2 then set a [ cnt2 ] to a [ i ]",
      "code": "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
      "indent": 5
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 34,
      "text": "set ho to 1",
      "code": "ho = 1 ;",
      "indent": 4
    },
    {
      "line": 35,
      "text": "set cnt to cnt2",
      "code": "cnt = cnt2 ;",
      "indent": 4
    },
    {
      "line": 36,
      "text": "continue",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 38,
      "text": "for i = 0 to l set now [ s [ i ] - ' a ' ] to 1",
      "code": "for ( int i = 0 ; i < l ; ++ i ) now [ s [ i ] - ' a ' ] = 1 ;",
      "indent": 3
    },
    {
      "line": 39,
      "text": "for i = 1 to cnt inclusive",
      "code": "for ( int i = 1 ; i <= cnt ; ++ i )",
      "indent": 3
    },
    {
      "line": 40,
      "text": "if now [ a [ i ] - ' a ' ] is 1 and b [ a [ i ] - ' a ' ] is 0 increment cnt2 then set a [ cnt2 ] to a [ i ]",
      "code": "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) { a [ ++ cnt2 ] = a [ i ] ; }",
      "indent": 4
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 42,
      "text": "set cnt to cnt2",
      "code": "cnt = cnt2 ;",
      "indent": 3
    },
    {
      "line": 43,
      "text": "else if c is ' . '",
      "code": "else if ( c == ' . ' )",
      "indent": 2
    },
    {
      "line": 44,
      "text": "if cnt is 1 continue",
      "code": "if ( cnt == 1 ) continue ;",
      "indent": 3
    },
    {
      "line": 45,
      "text": "for i = 0 to l",
      "code": "for ( int i = 0 ; i < l ; ++ i )",
      "indent": 3
    },
    {
      "line": 46,
      "text": "if b [ s [ i ] - ' a ' ] is 0",
      "code": "if ( b [ s [ i ] - ' a ' ] == 0 )",
      "indent": 4
    },
    {
      "line": 47,
      "text": "set b [ s [ i ] - ' a ' ] to 1",
      "code": "b [ s [ i ] - ' a ' ] = 1 ;",
      "indent": 5
    },
    {
      "line": 48,
      "text": "increment cnt3",
      "code": "cnt3 ++ ;",
      "indent": 5
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 51,
      "text": "for i = 0 to l set now [ s [ i ] - ' a ' ] to 1",
      "code": "for ( int i = 0 ; i < l ; ++ i ) { now [ s [ i ] - ' a ' ] = 1 ; }",
      "indent": 3
    },
    {
      "line": 52,
      "text": "for i = 1 to cnt inclusive",
      "code": "for ( int i = 1 ; i <= cnt ; ++ i )",
      "indent": 3
    },
    {
      "line": 53,
      "text": "if now [ a [ i ] - ' a ' ] is 0 increment cnt2 then set a [ cnt2 ] to a [ i ]",
      "code": "if ( now [ a [ i ] - ' a ' ] == 0 ) { a [ ++ cnt2 ] = a [ i ] ; }",
      "indent": 4
    },
    {
      "line": 54,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 55,
      "text": "set cnt to cnt2",
      "code": "cnt = cnt2 ;",
      "indent": 3
    },
    {
      "line": 56,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 57,
      "text": "if cnt is 1",
      "code": "if ( cnt == 1 )",
      "indent": 3
    },
    {
      "line": 58,
      "text": "increment ans",
      "code": "ans ++ ;",
      "indent": 4
    },
    {
      "line": 59,
      "text": "continue",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 60,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 61,
      "text": "if b [ s [ 0 ] - ' a ' ] is 0 increment cnt3",
      "code": "if ( b [ s [ 0 ] - ' a ' ] == 0 ) cnt3 ++ ;",
      "indent": 3
    },
    {
      "line": 62,
      "text": "set b [ s [ 0 ] - ' a ' ] to 1",
      "code": "b [ s [ 0 ] - ' a ' ] = 1 ;",
      "indent": 3
    },
    {
      "line": 63,
      "text": "for i = 1 to cnt inclusive",
      "code": "for ( int i = 1 ; i <= cnt ; ++ i )",
      "indent": 3
    },
    {
      "line": 64,
      "text": "if a [ i ] is s [ 0 ] continue",
      "code": "if ( a [ i ] == s [ 0 ] ) continue ;",
      "indent": 4
    },
    {
      "line": 65,
      "text": "increment cnt2 then set a [ cnt2 ] to a [ i ]",
      "code": "a [ ++ cnt2 ] = a [ i ] ;",
      "indent": 4
    },
    {
      "line": 66,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 67,
      "text": "set cnt to cnt2",
      "code": "cnt = cnt2 ;",
      "indent": 3
    },
    {
      "line": 68,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 69,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 70,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 71,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 72,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "mar [ s [ i ] - ' a ' ] = 1 ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;"
      ],
      "err_line": 40,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        53
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 53,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "bool b [ 30 ] , b [ 30 ] ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘bool b [30]’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 13,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int ans = = ; ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘=’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( x = 1 ; x <= n ; x ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "c >> c >> s ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "for ( i = 0 ; i < l ; i ++ )"
      ],
      "err_line": 25,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "mar [ s [ i ] - ' a ' ] ] = 1 ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "for ( i = 1 ; i <= cnt ; i ++ )"
      ],
      "err_line": 31,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "for ( i = 1 ; i <= cnt ; i ++ )"
      ],
      "err_line": 39,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 40,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        45
      ],
      "mod_code": [
        "for ( i = 0 ; i < l ; i ++ )"
      ],
      "err_line": 45,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        47
      ],
      "mod_code": [
        "b [ s [ i ] - ' a ' ] ] = 1 ;"
      ],
      "err_line": 47,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        52
      ],
      "mod_code": [
        "for ( i = 1 ; i <= cnt ; i ++ )"
      ],
      "err_line": 52,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        53
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 53,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        62
      ],
      "mod_code": [
        "b [ s [ 0 ] - ' a ' ] ] = 1 ;"
      ],
      "err_line": 62,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        63
      ],
      "mod_code": [
        "for ( i = 1 ; i <= cnt ; i ++ )"
      ],
      "err_line": 63,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        27,
        28
      ],
      "mod_code": [
        "int ans = ans ;",
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        27,
        28,
        32
      ],
      "mod_code": [
        "int ans = ans ;",
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        27,
        28,
        40
      ],
      "mod_code": [
        "int ans = ans ;",
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        27,
        28,
        53
      ],
      "mod_code": [
        "int ans = ans ;",
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        27,
        28,
        65
      ],
      "mod_code": [
        "int ans = ans ;",
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        27,
        32
      ],
      "mod_code": [
        "int ans = ans ;",
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        27,
        32,
        40
      ],
      "mod_code": [
        "int ans = ans ;",
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        27,
        32,
        53
      ],
      "mod_code": [
        "int ans = ans ;",
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        27,
        32,
        65
      ],
      "mod_code": [
        "int ans = ans ;",
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        27,
        40
      ],
      "mod_code": [
        "int ans = ans ;",
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;"
      ],
      "err_line": 40,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        27,
        40,
        53
      ],
      "mod_code": [
        "int ans = ans ;",
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 40,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        27,
        40,
        65
      ],
      "mod_code": [
        "int ans = ans ;",
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 40,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        27,
        53
      ],
      "mod_code": [
        "int ans = ans ;",
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 53,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        27,
        53,
        65
      ],
      "mod_code": [
        "int ans = ans ;",
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 53,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        28
      ],
      "mod_code": [
        "int ans = ans ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        28,
        32
      ],
      "mod_code": [
        "int ans = ans ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        28,
        32,
        40
      ],
      "mod_code": [
        "int ans = ans ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        28,
        32,
        53
      ],
      "mod_code": [
        "int ans = ans ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        28,
        32,
        65
      ],
      "mod_code": [
        "int ans = ans ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        28,
        40
      ],
      "mod_code": [
        "int ans = ans ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        28,
        40,
        53
      ],
      "mod_code": [
        "int ans = ans ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        28,
        40,
        65
      ],
      "mod_code": [
        "int ans = ans ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        28,
        53
      ],
      "mod_code": [
        "int ans = ans ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        28,
        53,
        65
      ],
      "mod_code": [
        "int ans = ans ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        28,
        65
      ],
      "mod_code": [
        "int ans = ans ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        32
      ],
      "mod_code": [
        "int ans = ans ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        32,
        40
      ],
      "mod_code": [
        "int ans = ans ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        32,
        40,
        53
      ],
      "mod_code": [
        "int ans = ans ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        32,
        40,
        65
      ],
      "mod_code": [
        "int ans = ans ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        32,
        53
      ],
      "mod_code": [
        "int ans = ans ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        32,
        53,
        65
      ],
      "mod_code": [
        "int ans = ans ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        32,
        65
      ],
      "mod_code": [
        "int ans = ans ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        40
      ],
      "mod_code": [
        "int ans = ans ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;"
      ],
      "err_line": 40,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        40,
        53
      ],
      "mod_code": [
        "int ans = ans ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 40,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        40,
        53,
        65
      ],
      "mod_code": [
        "int ans = ans ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 40,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        40,
        65
      ],
      "mod_code": [
        "int ans = ans ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 40,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        53
      ],
      "mod_code": [
        "int ans = ans ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 53,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        53,
        65
      ],
      "mod_code": [
        "int ans = ans ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 53,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        27,
        28
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        28,
        32
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        28,
        32,
        40
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        28,
        32,
        53
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        28,
        32,
        65
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        28,
        40
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        28,
        40,
        53
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        28,
        40,
        65
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        28,
        53
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        28,
        53,
        65
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        28,
        65
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        32
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        27,
        32,
        40
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        27,
        32,
        40,
        53
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        27,
        32,
        40,
        65
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        27,
        32,
        53
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        27,
        32,
        53,
        65
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        27,
        32,
        65
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        27,
        40
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;"
      ],
      "err_line": 40,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        27,
        40,
        53
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 40,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        27,
        40,
        53,
        65
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 40,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        27,
        40,
        65
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 40,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        27,
        53
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 53,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        27,
        53,
        65
      ],
      "mod_code": [
        "a [ cnt ] = s [ i ] = s [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 53,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        28,
        32
      ],
      "mod_code": [
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        32,
        40
      ],
      "mod_code": [
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        32,
        40,
        53
      ],
      "mod_code": [
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        32,
        40,
        65
      ],
      "mod_code": [
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        32,
        53
      ],
      "mod_code": [
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        32,
        53,
        65
      ],
      "mod_code": [
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        32,
        65
      ],
      "mod_code": [
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        40
      ],
      "mod_code": [
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        40,
        53
      ],
      "mod_code": [
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        40,
        53,
        65
      ],
      "mod_code": [
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        40,
        65
      ],
      "mod_code": [
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        53
      ],
      "mod_code": [
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        53,
        65
      ],
      "mod_code": [
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        65
      ],
      "mod_code": [
        "mar [ s [ i ] - ' a ' ] = 1 ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 28,
      "err_msg": "‘mar’ was not declared in this scope"
    },
    {
      "mod_line": [
        32,
        40
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        32,
        40,
        53
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        32,
        40,
        53,
        65
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        32,
        40,
        65
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        32,
        53
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        32,
        53,
        65
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        32,
        65
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        40,
        53
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;"
      ],
      "err_line": 40,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        40,
        53,
        65
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 40,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        40,
        65
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] - a [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 40,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        53,
        65
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' ] == 0 ) a [ cnt2 [ i ] = a [ i ] ;",
        "a [ cnt2 ] = a [ i ] = a [ i ] ;"
      ],
      "err_line": 53,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}