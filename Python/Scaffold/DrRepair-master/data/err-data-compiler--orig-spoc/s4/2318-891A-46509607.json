{
  "meta": {
    "index": 2318,
    "hitid": "3EPG8DX9LKK7UTPZ5V0ENOK19WFP5N",
    "workerid": "A1APYLD4DUK33J",
    "probid": "891A",
    "subid": "46509607"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare gcd with integers a , b as arguments , returning integer",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "if b is false",
      "code": "if ( ! b )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return a from function",
      "code": "return a ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 5,
      "text": "return result of run gcd with b , a % b as arguments",
      "code": "return gcd ( b , a % b ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "declare findstep with integer pointers a , b , integer t as arguments , returning integer",
      "code": "int findstep ( int * a , int * b , int t )",
      "indent": 0
    },
    {
      "line": 8,
      "text": "if t is n , return - 1 from function",
      "code": "if ( t == n ) return - 1 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to n - t exclusive",
      "code": "for ( int i = 0 ; i < n - t ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "set b [ i ] to result of run gcd with a [ i ] , a [ i + 1 ] as arguments",
      "code": "b [ i ] = gcd ( a [ i ] , a [ i + 1 ] ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if b [ i ] is 1 , return t from function",
      "code": "if ( b [ i ] == 1 ) return t ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "return result of run findstep with b , a , t + 1 as arguments",
      "code": "return findstep ( b , a , t + 1 ) ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 16,
      "text": "create integer book with book = 0",
      "code": "int book = 0 ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "create integer arrays a , b with a size 2005 , b size 2005",
      "code": "int a [ 2005 ] , b [ 2005 ] ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "read a [ i ]",
      "code": "cin >> a [ i ] ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if a [ i ] is 1 , increment book",
      "code": "if ( a [ i ] == 1 ) book ++ ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "if book is true",
      "code": "if ( book )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print n - book print newline",
      "code": "cout << n - book << endl ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "create integer ans with ans = result of run findstep with a , b , 1 as arguments",
      "code": "int ans = findstep ( a , b , 1 ) ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "if ans is - 1",
      "code": "if ( ans == - 1 )",
      "indent": 1
    },
    {
      "line": 29,
      "text": "print - 1 print newline",
      "code": "cout << - 1 << endl ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 31,
      "text": "print n - 1 + and print newline",
      "code": "cout << n - 1 + ans << endl ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int findstep ( int * a , int * b , int t ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - t ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "b [ i ] = gcd [ i ] , a [ i + 1 ] ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "return findstep ( b , a + t + 1 ) ;"
      ],
      "err_line": 13,
      "err_msg": "too few arguments to function ‘int findstep(int*, int*, int)’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "book = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "‘book’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;"
      ],
      "err_line": 20,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2005]’)"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "a >> a [ i ] ;"
      ],
      "err_line": 20,
      "err_msg": "invalid operands of types ‘int [2005]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int findstep ( int * a , int * b , int t ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        31
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int findstep ( int * a , int * b , int t ) ;",
        "cout << n - 1 << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        31,
        4
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int findstep ( int * a , int * b , int t ) ;",
        "cout << n - 1 << endl ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        31,
        17
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int findstep ( int * a , int * b , int t ) ;",
        "cout << n - 1 << endl ;",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        31,
        28
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int findstep ( int * a , int * b , int t ) ;",
        "cout << n - 1 << endl ;",
        "if ( ! ans )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        4
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int findstep ( int * a , int * b , int t ) ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        4,
        17
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int findstep ( int * a , int * b , int t ) ;",
        "else else",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        4,
        28
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int findstep ( int * a , int * b , int t ) ;",
        "else else",
        "if ( ! ans )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        17
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int findstep ( int * a , int * b , int t ) ;",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        17,
        28
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int findstep ( int * a , int * b , int t ) ;",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;",
        "if ( ! ans )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        28
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int findstep ( int * a , int * b , int t ) ;",
        "if ( ! ans )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        31
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "cout << n - 1 << endl ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        31,
        4
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "cout << n - 1 << endl ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        31,
        4,
        17
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "cout << n - 1 << endl ;",
        "else else",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        31,
        4,
        28
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "cout << n - 1 << endl ;",
        "else else",
        "if ( ! ans )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        31,
        17
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "cout << n - 1 << endl ;",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        31,
        17,
        28
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "cout << n - 1 << endl ;",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;",
        "if ( ! ans )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        31,
        28
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "cout << n - 1 << endl ;",
        "if ( ! ans )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        4,
        17
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "else else",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        4,
        17,
        28
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "else else",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;",
        "if ( ! ans )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        4,
        28
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "else else",
        "if ( ! ans )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        17
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        17,
        28
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;",
        "if ( ! ans )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        28
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( ! ans )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        31
      ],
      "mod_code": [
        "int findstep ( int * a , int * b , int t ) ;",
        "cout << n - 1 << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        31,
        4
      ],
      "mod_code": [
        "int findstep ( int * a , int * b , int t ) ;",
        "cout << n - 1 << endl ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        31,
        4,
        17
      ],
      "mod_code": [
        "int findstep ( int * a , int * b , int t ) ;",
        "cout << n - 1 << endl ;",
        "else else",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        31,
        4,
        28
      ],
      "mod_code": [
        "int findstep ( int * a , int * b , int t ) ;",
        "cout << n - 1 << endl ;",
        "else else",
        "if ( ! ans )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        31,
        17
      ],
      "mod_code": [
        "int findstep ( int * a , int * b , int t ) ;",
        "cout << n - 1 << endl ;",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        31,
        17,
        28
      ],
      "mod_code": [
        "int findstep ( int * a , int * b , int t ) ;",
        "cout << n - 1 << endl ;",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;",
        "if ( ! ans )"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        31,
        28
      ],
      "mod_code": [
        "int findstep ( int * a , int * b , int t ) ;",
        "cout << n - 1 << endl ;",
        "if ( ! ans )"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "int findstep ( int * a , int * b , int t ) ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        4,
        17
      ],
      "mod_code": [
        "int findstep ( int * a , int * b , int t ) ;",
        "else else",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        4,
        17,
        28
      ],
      "mod_code": [
        "int findstep ( int * a , int * b , int t ) ;",
        "else else",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;",
        "if ( ! ans )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        4,
        28
      ],
      "mod_code": [
        "int findstep ( int * a , int * b , int t ) ;",
        "else else",
        "if ( ! ans )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        17
      ],
      "mod_code": [
        "int findstep ( int * a , int * b , int t ) ;",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        17,
        28
      ],
      "mod_code": [
        "int findstep ( int * a , int * b , int t ) ;",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;",
        "if ( ! ans )"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        28
      ],
      "mod_code": [
        "int findstep ( int * a , int * b , int t ) ;",
        "if ( ! ans )"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        31,
        4
      ],
      "mod_code": [
        "cout << n - 1 << endl ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        31,
        4,
        17
      ],
      "mod_code": [
        "cout << n - 1 << endl ;",
        "else else",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        31,
        4,
        17,
        28
      ],
      "mod_code": [
        "cout << n - 1 << endl ;",
        "else else",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;",
        "if ( ! ans )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        31,
        4,
        28
      ],
      "mod_code": [
        "cout << n - 1 << endl ;",
        "else else",
        "if ( ! ans )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        31,
        17
      ],
      "mod_code": [
        "cout << n - 1 << endl ;",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;"
      ],
      "err_line": 20,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2005]’)"
    },
    {
      "mod_line": [
        31,
        17,
        28
      ],
      "mod_code": [
        "cout << n - 1 << endl ;",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;",
        "if ( ! ans )"
      ],
      "err_line": 20,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2005]’)"
    },
    {
      "mod_line": [
        4,
        17
      ],
      "mod_code": [
        "else else",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        17,
        28
      ],
      "mod_code": [
        "else else",
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;",
        "if ( ! ans )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        28
      ],
      "mod_code": [
        "else else",
        "if ( ! ans )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        17,
        28
      ],
      "mod_code": [
        "int a [ 2005 ] [ 2005 ] , b [ 2005 ] ;",
        "if ( ! ans )"
      ],
      "err_line": 20,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2005]’)"
    }
  ]
}