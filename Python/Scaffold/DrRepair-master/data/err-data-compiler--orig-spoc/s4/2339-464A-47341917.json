{
  "meta": {
    "index": 2339,
    "hitid": "3G57RS03HHZB2MOT3XP2RBC8Z9H25I",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "464A",
    "subid": "47341917"
  },
  "lines": [
    {
      "line": 0,
      "text": "mod = const long long with mod = 1e9 + 7",
      "code": "const long long mod = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "n , p = long long",
      "code": "long long n , p ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n then p",
      "code": "cin >> n >> p ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "prepend ' 0 ' to s",
      "code": "s = ' 0 ' + s ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "prepend ' 0 ' to s",
      "code": "s = ' 0 ' + s ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "idx = long long with idx = 0",
      "code": "long long idx = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = n + 1 decrement i while i is greater than 1",
      "code": "for ( long long i = n + 1 ; i >= 2 ; i -- )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for j = s [ i ] - ' a ' + 2 to p inclusive",
      "code": "for ( long long j = s [ i ] - ' a ' + 2 ; j <= p ; j ++ )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if j does not equals s [ i - 1 ] - ' a ' + 1 and j does not equal s [ i - 2 ] - ' a ' + 1",
      "code": "if ( j != ( s [ i - 1 ] - ' a ' + 1 ) and j != ( s [ i - 2 ] - ' a ' + 1 ) )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "set idx to i",
      "code": "idx = i ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "break inner loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if idx is not 0 then break outer loop",
      "code": "if ( idx ) break ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if idx equals 0",
      "code": "if ( idx == 0 )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print \" NO \"",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "for i = s [ idx ] - ' a ' + 2 to p inclusive",
      "code": "for ( long long i = s [ idx ] - ' a ' + 2 ; i <= p ; i ++ )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "if i does not equals s [ idx - 1 ] - ' a ' + 1 and i does not equal s [ idx - 2 ] - ' a ' + 1",
      "code": "if ( i != ( s [ idx - 1 ] - ' a ' + 1 ) and i != s [ idx - 2 ] - ' a ' + 1 )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "set s [ idx ] to ' a ' + i - 1",
      "code": "s [ idx ] = ( char ) ( ( long long ) ' a ' + i - 1 ) ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "break inner loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "for i = idx + 1 to n + 2",
      "code": "for ( long long i = idx + 1 ; i < n + 2 ; i ++ )",
      "indent": 1
    },
    {
      "line": 29,
      "text": "for j = 1 to p inclusive",
      "code": "for ( long long j = 1 ; j <= p ; j ++ )",
      "indent": 2
    },
    {
      "line": 30,
      "text": "if j does not equal s [ i - 1 ] - ' a ' + 1 and j does not equal [ i - 2 ] - ' a ' + 1",
      "code": "if ( j != ( s [ i - 1 ] - ' a ' + 1 ) and j != ( s [ i - 2 ] - ' a ' + 1 ) )",
      "indent": 3
    },
    {
      "line": 31,
      "text": "set s [ i ] to ' a ' + j - 1",
      "code": "s [ i ] = ( char ) ( ( long long ) ' a ' + j - 1 ) ;",
      "indent": 4
    },
    {
      "line": 32,
      "text": "break inner loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 36,
      "text": "remove first two chars of s",
      "code": "s = string ( s . begin ( ) + 2 , s . end ( ) ) ;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "print s",
      "code": "cout << s << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )"
      ],
      "err_line": 30,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = n + 1 ; i > 1 ; i -- )"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( j = s [ i ] - ' a ' + 2 ; j <= p ; j ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "for ( i = s [ idx ] - ' a ' + 2 ; i <= p ; i ++ )"
      ],
      "err_line": 22,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 28,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "for ( j = 1 ; j <= p ; j ++ )"
      ],
      "err_line": 29,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i [ i - 2 ] - ' a ' )"
      ],
      "err_line": 30,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "s . pop_front ( ) ;"
      ],
      "err_line": 36,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘pop_front’"
    },
    {
      "mod_line": [
        30,
        36
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "s . clear ( ) ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        30,
        36,
        5
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "s . clear ( ) ;",
        "gets ( s ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        30,
        36,
        5,
        32
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "s . clear ( ) ;",
        "gets ( s ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        30,
        36,
        5,
        13
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "s . clear ( ) ;",
        "gets ( s ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        30,
        36,
        5,
        28
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "s . clear ( ) ;",
        "gets ( s ) ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        30,
        36,
        32
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "s . clear ( ) ;",
        "break break ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        30,
        36,
        32,
        13
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "s . clear ( ) ;",
        "break break ;",
        "break break ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        30,
        36,
        32,
        28
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "s . clear ( ) ;",
        "break break ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 28,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        36,
        13
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "s . clear ( ) ;",
        "break break ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        30,
        36,
        13,
        28
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "s . clear ( ) ;",
        "break break ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        30,
        36,
        28
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "s . clear ( ) ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 28,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        5
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "gets ( s ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        30,
        5,
        32
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "gets ( s ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        30,
        5,
        32,
        13
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "gets ( s ) ;",
        "break break ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        30,
        5,
        32,
        28
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "gets ( s ) ;",
        "break break ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        30,
        5,
        13
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "gets ( s ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        30,
        5,
        13,
        28
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "gets ( s ) ;",
        "break break ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        30,
        5,
        28
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "gets ( s ) ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        30,
        32
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "break break ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        30,
        32,
        13
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "break break ;",
        "break break ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        30,
        32,
        13,
        28
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "break break ;",
        "break break ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        30,
        32,
        28
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "break break ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 28,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        13
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "break break ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        30,
        13,
        28
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "break break ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        30,
        28
      ],
      "mod_code": [
        "if ( j != s [ i - 1 ] - ' a ' + 1 && j != i - 2 ] - ' a ' + 1 )",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 28,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        36,
        5
      ],
      "mod_code": [
        "s . clear ( ) ;",
        "gets ( s ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        36,
        5,
        32
      ],
      "mod_code": [
        "s . clear ( ) ;",
        "gets ( s ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        36,
        5,
        32,
        13
      ],
      "mod_code": [
        "s . clear ( ) ;",
        "gets ( s ) ;",
        "break break ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        36,
        5,
        32,
        28
      ],
      "mod_code": [
        "s . clear ( ) ;",
        "gets ( s ) ;",
        "break break ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        36,
        5,
        13
      ],
      "mod_code": [
        "s . clear ( ) ;",
        "gets ( s ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        36,
        5,
        13,
        28
      ],
      "mod_code": [
        "s . clear ( ) ;",
        "gets ( s ) ;",
        "break break ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        36,
        5,
        28
      ],
      "mod_code": [
        "s . clear ( ) ;",
        "gets ( s ) ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        36,
        32
      ],
      "mod_code": [
        "s . clear ( ) ;",
        "break break ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        36,
        32,
        13
      ],
      "mod_code": [
        "s . clear ( ) ;",
        "break break ;",
        "break break ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        36,
        32,
        13,
        28
      ],
      "mod_code": [
        "s . clear ( ) ;",
        "break break ;",
        "break break ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        36,
        32,
        28
      ],
      "mod_code": [
        "s . clear ( ) ;",
        "break break ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 28,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        36,
        13
      ],
      "mod_code": [
        "s . clear ( ) ;",
        "break break ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        36,
        13,
        28
      ],
      "mod_code": [
        "s . clear ( ) ;",
        "break break ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        36,
        28
      ],
      "mod_code": [
        "s . clear ( ) ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 28,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        32
      ],
      "mod_code": [
        "gets ( s ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        32,
        13
      ],
      "mod_code": [
        "gets ( s ) ;",
        "break break ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        32,
        13,
        28
      ],
      "mod_code": [
        "gets ( s ) ;",
        "break break ;",
        "break break ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        32,
        28
      ],
      "mod_code": [
        "gets ( s ) ;",
        "break break ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "gets ( s ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        13,
        28
      ],
      "mod_code": [
        "gets ( s ) ;",
        "break break ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        28
      ],
      "mod_code": [
        "gets ( s ) ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        32,
        13
      ],
      "mod_code": [
        "break break ;",
        "break break ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        32,
        13,
        28
      ],
      "mod_code": [
        "break break ;",
        "break break ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        32,
        28
      ],
      "mod_code": [
        "break break ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 28,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        28
      ],
      "mod_code": [
        "break break ;",
        "for ( i = idx + 1 ; i <= n + 2 ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}