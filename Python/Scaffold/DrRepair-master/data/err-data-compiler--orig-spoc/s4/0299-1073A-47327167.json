{
  "meta": {
    "index": 299,
    "hitid": "3M7OI89LVYIKJ8G959ODVUZU7V66CC",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "1073A",
    "subid": "47327167"
  },
  "lines": [
    {
      "line": 0,
      "text": "str = string",
      "code": "string str ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "flag = integer with flag = 0",
      "code": "int flag = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "temp = integer",
      "code": "int temp ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to str . length ( ) - 1 exclusive",
      "code": "for ( int i = 0 ; i < str . length ( ) - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if str [ i ] is not str [ i + 1 ]",
      "code": "if ( str [ i ] != str [ i + 1 ] )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "flag = 1",
      "code": "flag = 1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "temp = i",
      "code": "temp = i ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if flag is 0",
      "code": "if ( flag == 0 )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print str [ temp ] and str [ temp + 1 ]",
      "code": "cout << str [ temp ] << str [ temp + 1 ] << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        18,
        7
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        7,
        9
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        7,
        9,
        4
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "int flag = 1 ;",
        "gets ( str ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        7,
        9,
        16
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "int flag = 1 ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        7,
        9,
        11
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "int flag = 1 ;",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        7,
        4
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "gets ( str ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        7,
        4,
        16
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "gets ( str ) ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        7,
        4,
        11
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "gets ( str ) ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        7,
        16
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        7,
        16,
        11
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "else else",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        7,
        11
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        9,
        4
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "int flag = 1 ;",
        "gets ( str ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        9,
        4,
        16
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "int flag = 1 ;",
        "gets ( str ) ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        9,
        4,
        11
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "int flag = 1 ;",
        "gets ( str ) ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        9,
        16
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "int flag = 1 ;",
        "else else"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        18,
        9,
        16,
        11
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "int flag = 1 ;",
        "else else",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        18,
        9,
        11
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "int flag = 1 ;",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        18,
        4
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "gets ( str ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        4,
        16
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "gets ( str ) ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        4,
        16,
        11
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "gets ( str ) ;",
        "else else",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        4,
        11
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "gets ( str ) ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        16
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "else else"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        18,
        16,
        11
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "else else",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        18,
        11
      ],
      "mod_code": [
        "cout << str [ temp ] << str [ temp + 1 ] ;",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "int flag = 1 ;",
        "gets ( str ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        9,
        4,
        16
      ],
      "mod_code": [
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "int flag = 1 ;",
        "gets ( str ) ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        9,
        4,
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "int flag = 1 ;",
        "gets ( str ) ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        9,
        16
      ],
      "mod_code": [
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "int flag = 1 ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        16,
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "int flag = 1 ;",
        "else else",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "int flag = 1 ;",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "gets ( str ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        4,
        16
      ],
      "mod_code": [
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "gets ( str ) ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        4,
        16,
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "gets ( str ) ;",
        "else else",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        4,
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "gets ( str ) ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        16
      ],
      "mod_code": [
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        16,
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "else else",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < str . length ( ) - 1 ; i ++ )",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "int flag = 1 ;",
        "gets ( str ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        4,
        16
      ],
      "mod_code": [
        "int flag = 1 ;",
        "gets ( str ) ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        4,
        16,
        11
      ],
      "mod_code": [
        "int flag = 1 ;",
        "gets ( str ) ;",
        "else else",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        4,
        11
      ],
      "mod_code": [
        "int flag = 1 ;",
        "gets ( str ) ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        16
      ],
      "mod_code": [
        "int flag = 1 ;",
        "else else"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        16,
        11
      ],
      "mod_code": [
        "int flag = 1 ;",
        "else else",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "int flag = 1 ;",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        4,
        16
      ],
      "mod_code": [
        "gets ( str ) ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        16,
        11
      ],
      "mod_code": [
        "gets ( str ) ;",
        "else else",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "gets ( str ) ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        16,
        11
      ],
      "mod_code": [
        "else else",
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}