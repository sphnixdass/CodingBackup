{
  "meta": {
    "index": 87,
    "hitid": "3HUR21WDDUJA5Q1A2OFSSY4X6LDXYQ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "3A",
    "subid": "47102964"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create strings now , goal , create string array way with size 100",
      "code": "string now , goal , way [ 100 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integers step , i , tstep with tstep = 0",
      "code": "int step , i , tstep = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read now read goal",
      "code": "cin >> now >> goal ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while now is not goal",
      "code": "while ( now != goal )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if now [ 0 ] is goal [ 0 ]",
      "code": "if ( now [ 0 ] == goal [ 0 ] )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set step to now [ 1 ] - goal [ 1 ]",
      "code": "step = now [ 1 ] - goal [ 1 ] ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "if step is greater than 0",
      "code": "if ( step > 0 )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "for i = 0 to step exclusive",
      "code": "for ( i = 0 ; i < step ; i ++ )",
      "indent": 4
    },
    {
      "line": 9,
      "text": "set way [ increment step ] to ' D '",
      "code": "way [ tstep ++ ] = ' D ' ;",
      "indent": 5
    },
    {
      "line": 10,
      "text": "increment now [ 1 ]",
      "code": "now [ 1 ] -- ;",
      "indent": 5
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 13,
      "text": "for i = 0 to - step exclusive",
      "code": "for ( i = 0 ; i < - step ; i ++ )",
      "indent": 4
    },
    {
      "line": 14,
      "text": "set way [ increment tstep ] to ' U '",
      "code": "way [ tstep ++ ] = ' U ' ;",
      "indent": 5
    },
    {
      "line": 15,
      "text": "increment now [ 1 ]",
      "code": "now [ 1 ] ++ ;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 17,
      "text": "else if now [ 1 ] is goal [ 1 ]",
      "code": "else if ( now [ 1 ] == goal [ 1 ] )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "set step to now [ 0 ] - goal [ 0 ]",
      "code": "step = now [ 0 ] - goal [ 0 ] ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "if step is greater than 0",
      "code": "if ( step > 0 )",
      "indent": 3
    },
    {
      "line": 20,
      "text": "for i = 0 to step exclusive",
      "code": "for ( i = 0 ; i < step ; i ++ )",
      "indent": 4
    },
    {
      "line": 21,
      "text": "set way [ increment tstep ] to ' L '",
      "code": "way [ tstep ++ ] = ' L ' ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "decrement now [ 0 ]",
      "code": "now [ 0 ] -- ;",
      "indent": 5
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 24,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 25,
      "text": "for i = 0 to - step",
      "code": "for ( i = 0 ; i < - step ; i ++ )",
      "indent": 4
    },
    {
      "line": 26,
      "text": "set way [ increment tstep ] to ' R '",
      "code": "way [ tstep ++ ] = ' R ' ;",
      "indent": 5
    },
    {
      "line": 27,
      "text": "increment now [ 0 ]",
      "code": "now [ 0 ] ++ ;",
      "indent": 5
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 29,
      "text": "else if now [ 0 ] is less than goal [ 0 ] and now [ 1 ] is greater than goal [ 1 ]",
      "code": "else if ( now [ 0 ] < goal [ 0 ] && now [ 1 ] > goal [ 1 ] )",
      "indent": 2
    },
    {
      "line": 30,
      "text": "set way [ increment tstep ] to \" RD \"",
      "code": "way [ tstep ++ ] = \" RD \" ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "increment now [ 0 ]",
      "code": "now [ 0 ] ++ ;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "decrement now [ 0 ]",
      "code": "now [ 1 ] -- ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "else if now [ 0 ] is greater than goal [ 0 ] and now [ 1 ] is greater than goal [ 1 ]",
      "code": "else if ( now [ 0 ] > goal [ 0 ] && now [ 1 ] > goal [ 1 ] )",
      "indent": 2
    },
    {
      "line": 34,
      "text": "set way [ increment tstep ] to \" LD \"",
      "code": "way [ tstep ++ ] = \" LD \" ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "decrement now [ 0 ]",
      "code": "now [ 0 ] -- ;",
      "indent": 3
    },
    {
      "line": 36,
      "text": "decrement now [ 1 ]",
      "code": "now [ 1 ] -- ;",
      "indent": 3
    },
    {
      "line": 37,
      "text": "else if now [ 0 ] is less than goal [ 0 ] and now [ 1 ] is less than goal [ 1 ]",
      "code": "else if ( now [ 0 ] < goal [ 0 ] && now [ 1 ] < goal [ 1 ] )",
      "indent": 2
    },
    {
      "line": 38,
      "text": "set way [ increment tstep ] to \" RU \"",
      "code": "way [ tstep ++ ] = \" RU \" ;",
      "indent": 3
    },
    {
      "line": 39,
      "text": "increment now [ 0 ]",
      "code": "now [ 0 ] ++ ;",
      "indent": 3
    },
    {
      "line": 40,
      "text": "increment now [ 1 ]",
      "code": "now [ 1 ] ++ ;",
      "indent": 3
    },
    {
      "line": 41,
      "text": "else if now [ 0 ] is greater than goal [ 0 ] and now [ 1 ] is less than goal [ 1 ]",
      "code": "else if ( now [ 0 ] > goal [ 0 ] && now [ 1 ] < goal [ 1 ] )",
      "indent": 2
    },
    {
      "line": 42,
      "text": "set way [ increment tstep ] to \" LU \"",
      "code": "way [ tstep ++ ] = \" LU \" ;",
      "indent": 3
    },
    {
      "line": 43,
      "text": "decrement now [ 0 ]",
      "code": "now [ 0 ] -- ;",
      "indent": 3
    },
    {
      "line": 44,
      "text": "increment now [ 1 ]",
      "code": "now [ 1 ] ++ ;",
      "indent": 3
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 47,
      "text": "print tstep print newline",
      "code": "cout << tstep << endl ;",
      "indent": 1
    },
    {
      "line": 48,
      "text": "for i = 0 to tstep exclusive print way [ i ] print newline",
      "code": "for ( i = 0 ; i < tstep ; i ++ ) cout << way [ i ] << endl ;",
      "indent": 1
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string now , way , way [ 100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘std::__cxx11::string way [100]’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( now )"
      ],
      "err_line": 4,
      "err_msg": "could not convert ‘now’ from ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘bool’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "else if ( now [ 1 ] == goal )"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}