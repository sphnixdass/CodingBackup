{
  "meta": {
    "index": 514,
    "hitid": "335HHSX8CDZALP641OASCR62195DHR",
    "workerid": "AIWEXPJAU66D9",
    "probid": "884A",
    "subid": "41684029"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare int variables n , t , x and cnt",
      "code": "int n , t , x , cnt ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "read n and t from the input",
      "code": "cin >> n >> t ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "decrement n and loop further , while n ! = 0",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read x from the user input",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "set x to 86400 - x",
      "code": "x = 86400 - x ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "subtract x from t",
      "code": "t -= x ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if t < = 0",
      "code": "if ( t <= 0 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print cnt",
      "code": "cout << cnt << endl ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n , t , x , cnt , cnt ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        9,
        3,
        10
      ],
      "mod_code": [
        "x -= x ;",
        "cout << cnt ;",
        "while ( -- n )",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        9,
        4,
        10
      ],
      "mod_code": [
        "x -= x ;",
        "cout << cnt ;",
        "cin >> n ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        9,
        10
      ],
      "mod_code": [
        "x -= x ;",
        "cout << cnt ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        8
      ],
      "mod_code": [
        "x -= x ;",
        "cout << cnt ;",
        "break break ;",
        "if ( t < 0 )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        3,
        4,
        10
      ],
      "mod_code": [
        "x -= x ;",
        "while ( -- n )",
        "cin >> n ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        3,
        10
      ],
      "mod_code": [
        "x -= x ;",
        "while ( -- n )",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        3,
        10,
        8
      ],
      "mod_code": [
        "x -= x ;",
        "while ( -- n )",
        "break break ;",
        "if ( t < 0 )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        4,
        10
      ],
      "mod_code": [
        "x -= x ;",
        "cin >> n ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        4,
        10,
        8
      ],
      "mod_code": [
        "x -= x ;",
        "cin >> n ;",
        "break break ;",
        "if ( t < 0 )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "x -= x ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        10,
        8
      ],
      "mod_code": [
        "x -= x ;",
        "break break ;",
        "if ( t < 0 )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        3,
        4,
        10
      ],
      "mod_code": [
        "cout << cnt ;",
        "while ( -- n )",
        "cin >> n ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        3,
        10
      ],
      "mod_code": [
        "cout << cnt ;",
        "while ( -- n )",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        3,
        10,
        8
      ],
      "mod_code": [
        "cout << cnt ;",
        "while ( -- n )",
        "break break ;",
        "if ( t < 0 )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        4,
        10
      ],
      "mod_code": [
        "cout << cnt ;",
        "cin >> n ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        4,
        10,
        8
      ],
      "mod_code": [
        "cout << cnt ;",
        "cin >> n ;",
        "break break ;",
        "if ( t < 0 )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "cout << cnt ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        10,
        8
      ],
      "mod_code": [
        "cout << cnt ;",
        "break break ;",
        "if ( t < 0 )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        3,
        4,
        10
      ],
      "mod_code": [
        "while ( -- n )",
        "cin >> n ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        3,
        4,
        10,
        8
      ],
      "mod_code": [
        "while ( -- n )",
        "cin >> n ;",
        "break break ;",
        "if ( t < 0 )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "while ( -- n )",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        3,
        10,
        8
      ],
      "mod_code": [
        "while ( -- n )",
        "break break ;",
        "if ( t < 0 )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "cin >> n ;",
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        4,
        10,
        8
      ],
      "mod_code": [
        "cin >> n ;",
        "break break ;",
        "if ( t < 0 )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "break break ;",
        "if ( t < 0 )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}