{
  "meta": {
    "index": 1276,
    "hitid": "30IRMPJWDZDVOPQHPA89U83Y7PJRKT",
    "workerid": "AIWEXPJAU66D9",
    "probid": "47A",
    "subid": "48200478"
  },
  "lines": [
    {
      "line": 0,
      "text": "constant long long MOD = 1e9 + 7",
      "code": "const long long MOD = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "constant long long INF = 1e9 + 7",
      "code": "const long long INF = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "let n be integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for integer i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "declare long long x with value i * ( i + 1 )",
      "code": "long long x = i * ( i + 1 ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "divide x by 2",
      "code": "x /= 2 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if x is equal to n",
      "code": "if ( x == n )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print \" YES \" and ' \\ n '",
      "code": "cout << \" YES \" << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if x is greater than n",
      "code": "if ( x > n )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "print \" NO \" and ' \\ n '",
      "code": "cout << \" NO \" << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        14
      ],
      "mod_code": [
        "{ }",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        14,
        8
      ],
      "mod_code": [
        "{ }",
        "break break ;",
        "if ( x == ' n ' )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        14,
        8,
        13
      ],
      "mod_code": [
        "{ }",
        "break break ;",
        "if ( x == ' n ' )",
        "cout << \" NO\\n \" << ' \\n ' ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        14,
        13
      ],
      "mod_code": [
        "{ }",
        "break break ;",
        "cout << \" NO\\n \" << ' \\n ' ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        8
      ],
      "mod_code": [
        "break break ;",
        "if ( x == ' n ' )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        8,
        13
      ],
      "mod_code": [
        "break break ;",
        "if ( x == ' n ' )",
        "cout << \" NO\\n \" << ' \\n ' ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        13
      ],
      "mod_code": [
        "break break ;",
        "cout << \" NO\\n \" << ' \\n ' ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}