{
  "meta": {
    "index": 1066,
    "hitid": "3SZYX62S5GUIONLZ996XN2TGAP6756",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "151A",
    "subid": "42216149"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create ints n , k , l , c , d , p , nl , np , drink , slice , salt , and ans",
      "code": "int n , k , l , c , d , p , nl , np , drink , slice , salt , ans ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , k , l , c , d , p , nl , and np",
      "code": "cin >> n >> k >> l >> c >> d >> p >> nl >> np ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set drink to ( k * l ) / nl",
      "code": "drink = ( k * l ) / nl ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set slice to ( c * d )",
      "code": "slice = ( c * d ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set salt to p / np",
      "code": "salt = p / np ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set ans to the min of slice and salt",
      "code": "ans = min ( slice , salt ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set ans to the min of ans and drink",
      "code": "ans = min ( ans , drink ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set ans to ans / n",
      "code": "ans /= n ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int drink = ( k * l ) / nl ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int slice = ( c * d ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int slice’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        2,
        4
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int slice = ( c * d ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int slice = ( c * d ) ;",
        "ans = min ( ans , salt ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        5
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int slice = ( c * d ) ;",
        "salt /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int slice = ( c * d ) ;",
        "ans = __gcd ( ans , drink ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        2,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "ans = min ( ans , salt ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        5
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "ans = min ( ans , salt ) ;",
        "salt /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "ans = min ( ans , salt ) ;",
        "ans = __gcd ( ans , drink ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "salt /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "salt /= np ;",
        "ans = __gcd ( ans , drink ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        2,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "ans = __gcd ( ans , drink ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "int slice = ( c * d ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        4,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "int slice = ( c * d ) ;",
        "ans = min ( ans , salt ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        5
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "int slice = ( c * d ) ;",
        "ans = min ( ans , salt ) ;",
        "salt /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        4,
        6,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "int slice = ( c * d ) ;",
        "ans = min ( ans , salt ) ;",
        "ans = __gcd ( ans , drink ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        4,
        5
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "int slice = ( c * d ) ;",
        "salt /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "int slice = ( c * d ) ;",
        "salt /= np ;",
        "ans = __gcd ( ans , drink ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        4,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "int slice = ( c * d ) ;",
        "ans = __gcd ( ans , drink ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "ans = min ( ans , salt ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        6,
        5
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "ans = min ( ans , salt ) ;",
        "salt /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        6,
        5,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "ans = min ( ans , salt ) ;",
        "salt /= np ;",
        "ans = __gcd ( ans , drink ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        6,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "ans = min ( ans , salt ) ;",
        "ans = __gcd ( ans , drink ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "salt /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        5,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "salt /= np ;",
        "ans = __gcd ( ans , drink ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , drink , drink , salt , ans ;",
        "ans = __gcd ( ans , drink ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int slice = ( c * d ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int slice’"
    },
    {
      "mod_line": [
        2,
        4,
        6
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int slice = ( c * d ) ;",
        "ans = min ( ans , salt ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int slice’"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        5
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int slice = ( c * d ) ;",
        "ans = min ( ans , salt ) ;",
        "salt /= np ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int slice’"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        7
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int slice = ( c * d ) ;",
        "ans = min ( ans , salt ) ;",
        "ans = __gcd ( ans , drink ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int slice’"
    },
    {
      "mod_line": [
        2,
        4,
        5
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int slice = ( c * d ) ;",
        "salt /= np ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int slice’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        7
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int slice = ( c * d ) ;",
        "salt /= np ;",
        "ans = __gcd ( ans , drink ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int slice’"
    },
    {
      "mod_line": [
        2,
        4,
        7
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int slice = ( c * d ) ;",
        "ans = __gcd ( ans , drink ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int slice’"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "int slice = ( c * d ) ;",
        "ans = min ( ans , salt ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int slice’"
    },
    {
      "mod_line": [
        4,
        6,
        5
      ],
      "mod_code": [
        "int slice = ( c * d ) ;",
        "ans = min ( ans , salt ) ;",
        "salt /= np ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int slice’"
    },
    {
      "mod_line": [
        4,
        6,
        5,
        7
      ],
      "mod_code": [
        "int slice = ( c * d ) ;",
        "ans = min ( ans , salt ) ;",
        "salt /= np ;",
        "ans = __gcd ( ans , drink ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int slice’"
    },
    {
      "mod_line": [
        4,
        6,
        7
      ],
      "mod_code": [
        "int slice = ( c * d ) ;",
        "ans = min ( ans , salt ) ;",
        "ans = __gcd ( ans , drink ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int slice’"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "int slice = ( c * d ) ;",
        "salt /= np ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int slice’"
    },
    {
      "mod_line": [
        4,
        5,
        7
      ],
      "mod_code": [
        "int slice = ( c * d ) ;",
        "salt /= np ;",
        "ans = __gcd ( ans , drink ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int slice’"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "int slice = ( c * d ) ;",
        "ans = __gcd ( ans , drink ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int slice’"
    }
  ]
}