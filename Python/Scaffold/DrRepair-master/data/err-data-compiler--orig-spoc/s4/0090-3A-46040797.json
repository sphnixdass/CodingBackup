{
  "meta": {
    "index": 90,
    "hitid": "36AZSFEYZ4UMOT34SH0QW29B51NVB6",
    "workerid": "AIWEXPJAU66D9",
    "probid": "3A",
    "subid": "46040797"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let S be string",
      "code": "string S ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read S",
      "code": "cin >> S ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let x1 and y1 be integers with x1 = S [ 0 ] - 49 and y1 = S [ 1 ] - 97",
      "code": "int x1 = S [ 0 ] - 49 , y1 = S [ 1 ] - 97 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read S",
      "code": "cin >> S ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let x2 and y2 be integers with x2 = S [ 0 ] - 49 and y2 = S [ 1 ] - 97",
      "code": "int x2 = S [ 0 ] - 49 , y2 = S [ 1 ] - 97 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "empty string WAY",
      "code": "string Way = \" \" ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "create integer counter with value 0",
      "code": "int counter = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "while true",
      "code": "while ( true )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "int sign_X = ( x2 - x1 ) / abs ( x2 - x1 ) if x2 - x1 is not 0 , or 0 otherwise",
      "code": "int sign_X = x2 - x1 != 0 ? ( x2 - x1 ) / abs ( x2 - x1 ) : 0 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "int sign_Y = ( y2 - y1 ) / abs ( y2 - y1 ) if y2 - y1 is not 0 , or 0 otherwise",
      "code": "int sign_Y = y2 - y1 != 0 ? ( y2 - y1 ) / abs ( y2 - y1 ) : 0 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if sign_X = 1",
      "code": "if ( sign_X == 1 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "append \" R \" to the Way",
      "code": "Way += \" R \" ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else if sign_X = - 1",
      "code": "else if ( sign_X == - 1 )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "append \" L \" to the Way",
      "code": "Way += \" L \" ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if sign_Y = 1",
      "code": "if ( sign_Y == 1 )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "append \" U \" to the Way",
      "code": "Way += \" U \" ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else if sign_Y = - 1",
      "code": "else if ( sign_Y == - 1 )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "append \" D \" to the Way",
      "code": "Way += \" D \" ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "increase x1 by sign_X",
      "code": "x1 += sign_X ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "increase y1 by sign_Y",
      "code": "y1 += sign_Y ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if sign_X and sign_Y are both equal 0 , break",
      "code": "if ( ! sign_X & ! sign_Y ) break ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "append ' \\ n ' to the Way",
      "code": "Way += ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "increment counter",
      "code": "counter ++ ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print counter , new line and Way",
      "code": "cout << counter << endl << Way ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "string WAY ;"
      ],
      "err_line": 12,
      "err_msg": "‘Way’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( S ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 , y1 = S [ 1 ] - 97 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "gets ( S ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "string WAY ( \" \" ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘Way’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int counter create ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int sign_Y = ( int ) ( y2 - y1 ) / abs ( y2 - y1 ) / abs ( 0 ) ? abs ( 0 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "Way += ' L \" ;"
      ],
      "err_line": 14,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "string WAY ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        6,
        9
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "string WAY ;",
        "int sign_X = ( int ) ( x2 - x1 ) / abs ( x2 - x1 ) / abs ( 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        6,
        9,
        10
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "string WAY ;",
        "int sign_X = ( int ) ( x2 - x1 ) / abs ( x2 - x1 ) / abs ( 0 ) ;",
        "int sign_Y = ( int ) ( y2 - y1 ) / abs ( y2 - y1 ) / abs ( 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        6,
        9,
        27
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "string WAY ;",
        "int sign_X = ( int ) ( x2 - x1 ) / abs ( x2 - x1 ) / abs ( 0 ) ;",
        "cout << counter << endl ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        6,
        9,
        11
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "string WAY ;",
        "int sign_X = ( int ) ( x2 - x1 ) / abs ( x2 - x1 ) / abs ( 0 ) ;",
        "if ( sign_X )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        6,
        10
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "string WAY ;",
        "int sign_Y = ( int ) ( y2 - y1 ) / abs ( y2 - y1 ) / abs ( 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        6,
        10,
        27
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "string WAY ;",
        "int sign_Y = ( int ) ( y2 - y1 ) / abs ( y2 - y1 ) / abs ( 0 ) ;",
        "cout << counter << endl ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        6,
        10,
        11
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "string WAY ;",
        "int sign_Y = ( int ) ( y2 - y1 ) / abs ( y2 - y1 ) / abs ( 0 ) ;",
        "if ( sign_X )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        6,
        27
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "string WAY ;",
        "cout << counter << endl ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        6,
        27,
        11
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "string WAY ;",
        "cout << counter << endl ;",
        "if ( sign_X )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        6,
        11
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "string WAY ;",
        "if ( sign_X )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "int sign_X = ( int ) ( x2 - x1 ) / abs ( x2 - x1 ) / abs ( 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        9,
        10
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "int sign_X = ( int ) ( x2 - x1 ) / abs ( x2 - x1 ) / abs ( 0 ) ;",
        "int sign_Y = ( int ) ( y2 - y1 ) / abs ( y2 - y1 ) / abs ( 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        9,
        10,
        27
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "int sign_X = ( int ) ( x2 - x1 ) / abs ( x2 - x1 ) / abs ( 0 ) ;",
        "int sign_Y = ( int ) ( y2 - y1 ) / abs ( y2 - y1 ) / abs ( 0 ) ;",
        "cout << counter << endl ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        9,
        10,
        11
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "int sign_X = ( int ) ( x2 - x1 ) / abs ( x2 - x1 ) / abs ( 0 ) ;",
        "int sign_Y = ( int ) ( y2 - y1 ) / abs ( y2 - y1 ) / abs ( 0 ) ;",
        "if ( sign_X )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        9,
        27
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "int sign_X = ( int ) ( x2 - x1 ) / abs ( x2 - x1 ) / abs ( 0 ) ;",
        "cout << counter << endl ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        9,
        27,
        11
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "int sign_X = ( int ) ( x2 - x1 ) / abs ( x2 - x1 ) / abs ( 0 ) ;",
        "cout << counter << endl ;",
        "if ( sign_X )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        9,
        11
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "int sign_X = ( int ) ( x2 - x1 ) / abs ( x2 - x1 ) / abs ( 0 ) ;",
        "if ( sign_X )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "int sign_Y = ( int ) ( y2 - y1 ) / abs ( y2 - y1 ) / abs ( 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        10,
        27
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "int sign_Y = ( int ) ( y2 - y1 ) / abs ( y2 - y1 ) / abs ( 0 ) ;",
        "cout << counter << endl ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        10,
        27,
        11
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "int sign_Y = ( int ) ( y2 - y1 ) / abs ( y2 - y1 ) / abs ( 0 ) ;",
        "cout << counter << endl ;",
        "if ( sign_X )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        10,
        11
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "int sign_Y = ( int ) ( y2 - y1 ) / abs ( y2 - y1 ) / abs ( 0 ) ;",
        "if ( sign_X )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        27
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "cout << counter << endl ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        27,
        11
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "cout << counter << endl ;",
        "if ( sign_X )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "int x1 , y1 = S [ 0 ] - 49 = S [ 1 ] - 97 ;",
        "if ( sign_X )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "string WAY ;",
        "int sign_X = ( int ) ( x2 - x1 ) / abs ( x2 - x1 ) / abs ( 0 ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘Way’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        10
      ],
      "mod_code": [
        "string WAY ;",
        "int sign_X = ( int ) ( x2 - x1 ) / abs ( x2 - x1 ) / abs ( 0 ) ;",
        "int sign_Y = ( int ) ( y2 - y1 ) / abs ( y2 - y1 ) / abs ( 0 ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘Way’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        10,
        27
      ],
      "mod_code": [
        "string WAY ;",
        "int sign_X = ( int ) ( x2 - x1 ) / abs ( x2 - x1 ) / abs ( 0 ) ;",
        "int sign_Y = ( int ) ( y2 - y1 ) / abs ( y2 - y1 ) / abs ( 0 ) ;",
        "cout << counter << endl ;"
      ],
      "err_line": 12,
      "err_msg": "‘Way’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        10,
        11
      ],
      "mod_code": [
        "string WAY ;",
        "int sign_X = ( int ) ( x2 - x1 ) / abs ( x2 - x1 ) / abs ( 0 ) ;",
        "int sign_Y = ( int ) ( y2 - y1 ) / abs ( y2 - y1 ) / abs ( 0 ) ;",
        "if ( sign_X )"
      ],
      "err_line": 12,
      "err_msg": "‘Way’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        27
      ],
      "mod_code": [
        "string WAY ;",
        "int sign_X = ( int ) ( x2 - x1 ) / abs ( x2 - x1 ) / abs ( 0 ) ;",
        "cout << counter << endl ;"
      ],
      "err_line": 12,
      "err_msg": "‘Way’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        27,
        11
      ],
      "mod_code": [
        "string WAY ;",
        "int sign_X = ( int ) ( x2 - x1 ) / abs ( x2 - x1 ) / abs ( 0 ) ;",
        "cout << counter << endl ;",
        "if ( sign_X )"
      ],
      "err_line": 12,
      "err_msg": "‘Way’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        11
      ],
      "mod_code": [
        "string WAY ;",
        "int sign_X = ( int ) ( x2 - x1 ) / abs ( x2 - x1 ) / abs ( 0 ) ;",
        "if ( sign_X )"
      ],
      "err_line": 12,
      "err_msg": "‘Way’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "string WAY ;",
        "int sign_Y = ( int ) ( y2 - y1 ) / abs ( y2 - y1 ) / abs ( 0 ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘Way’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        27
      ],
      "mod_code": [
        "string WAY ;",
        "int sign_Y = ( int ) ( y2 - y1 ) / abs ( y2 - y1 ) / abs ( 0 ) ;",
        "cout << counter << endl ;"
      ],
      "err_line": 12,
      "err_msg": "‘Way’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        27,
        11
      ],
      "mod_code": [
        "string WAY ;",
        "int sign_Y = ( int ) ( y2 - y1 ) / abs ( y2 - y1 ) / abs ( 0 ) ;",
        "cout << counter << endl ;",
        "if ( sign_X )"
      ],
      "err_line": 12,
      "err_msg": "‘Way’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        11
      ],
      "mod_code": [
        "string WAY ;",
        "int sign_Y = ( int ) ( y2 - y1 ) / abs ( y2 - y1 ) / abs ( 0 ) ;",
        "if ( sign_X )"
      ],
      "err_line": 12,
      "err_msg": "‘Way’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        27
      ],
      "mod_code": [
        "string WAY ;",
        "cout << counter << endl ;"
      ],
      "err_line": 12,
      "err_msg": "‘Way’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        27,
        11
      ],
      "mod_code": [
        "string WAY ;",
        "cout << counter << endl ;",
        "if ( sign_X )"
      ],
      "err_line": 12,
      "err_msg": "‘Way’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "string WAY ;",
        "if ( sign_X )"
      ],
      "err_line": 12,
      "err_msg": "‘Way’ was not declared in this scope"
    }
  ]
}