{
  "meta": {
    "index": 88,
    "hitid": "3HUR21WDDUJA5Q1A2OFSSY4X6LDXYQ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "3A",
    "subid": "47102964"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "now and goal = strings . way = array of strings with size 100",
      "code": "string now , goal , way [ 100 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "step , i , tstep = integers with tstep = 0",
      "code": "int step , i , tstep = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read now and goal",
      "code": "cin >> now >> goal ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while now ! = goal",
      "code": "while ( now != goal )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if now [ 0 ] is equal to goal [ 0 ]",
      "code": "if ( now [ 0 ] == goal [ 0 ] )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set value of step to now [ 1 ] - goal [ 1 ]",
      "code": "step = now [ 1 ] - goal [ 1 ] ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "if step is greater than 0",
      "code": "if ( step > 0 )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "for i = 0 to step exclusive",
      "code": "for ( i = 0 ; i < step ; i ++ )",
      "indent": 4
    },
    {
      "line": 9,
      "text": "set way [ tstep ] = ' D ' and increment tstep",
      "code": "way [ tstep ++ ] = ' D ' ;",
      "indent": 5
    },
    {
      "line": 10,
      "text": "decrement now [ 1 ]",
      "code": "now [ 1 ] -- ;",
      "indent": 5
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 13,
      "text": "for i = 0 to - step exclusive",
      "code": "for ( i = 0 ; i < - step ; i ++ )",
      "indent": 4
    },
    {
      "line": 14,
      "text": "set way [ tstep ] to ' U ' and increment tstep",
      "code": "way [ tstep ++ ] = ' U ' ;",
      "indent": 5
    },
    {
      "line": 15,
      "text": "increment now [ 1 ]",
      "code": "now [ 1 ] ++ ;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 17,
      "text": "else if now [ 1 ] is equal to goal [ 1 ]",
      "code": "else if ( now [ 1 ] == goal [ 1 ] )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "set step to now [ 0 ] - goal [ 0 ]",
      "code": "step = now [ 0 ] - goal [ 0 ] ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "if step is greater than 0",
      "code": "if ( step > 0 )",
      "indent": 3
    },
    {
      "line": 20,
      "text": "for i = 0 to step exclusive",
      "code": "for ( i = 0 ; i < step ; i ++ )",
      "indent": 4
    },
    {
      "line": 21,
      "text": "set way [ tstep ] to ' L ' and increment tstep",
      "code": "way [ tstep ++ ] = ' L ' ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "decrease now [ 0 ] by one",
      "code": "now [ 0 ] -- ;",
      "indent": 5
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 24,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 25,
      "text": "for i = 0 to - step exclusive",
      "code": "for ( i = 0 ; i < - step ; i ++ )",
      "indent": 4
    },
    {
      "line": 26,
      "text": "set way [ tstep ] to ' R ' and increment tstep",
      "code": "way [ tstep ++ ] = ' R ' ;",
      "indent": 5
    },
    {
      "line": 27,
      "text": "increase now [ 0 ] by one",
      "code": "now [ 0 ] ++ ;",
      "indent": 5
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 29,
      "text": "else if now [ 0 ] < goal [ 0 ] and now [ 1 ] is greater than goal [ 1 ]",
      "code": "else if ( now [ 0 ] < goal [ 0 ] && now [ 1 ] > goal [ 1 ] )",
      "indent": 2
    },
    {
      "line": 30,
      "text": "set way [ tstep ] to ' RD ' and increment tstep",
      "code": "way [ tstep ++ ] = \" RD \" ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "increase now [ 0 ] by one",
      "code": "now [ 0 ] ++ ;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "decrease now [ 1 ]",
      "code": "now [ 1 ] -- ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "else if now [ 0 ] > goal [ 0 ] and now [ 1 ] is greater than goal [ 1 ]",
      "code": "else if ( now [ 0 ] > goal [ 0 ] && now [ 1 ] > goal [ 1 ] )",
      "indent": 2
    },
    {
      "line": 34,
      "text": "set way [ tstep ] to ' LD ' and increment tstep",
      "code": "way [ tstep ++ ] = \" LD \" ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "decrement now [ 0 ]",
      "code": "now [ 0 ] -- ;",
      "indent": 3
    },
    {
      "line": 36,
      "text": "decrease now [ 1 ] by one",
      "code": "now [ 1 ] -- ;",
      "indent": 3
    },
    {
      "line": 37,
      "text": "else if now [ 0 ] < goal [ 0 ] and now [ 1 ] is less than goal [ 1 ]",
      "code": "else if ( now [ 0 ] < goal [ 0 ] && now [ 1 ] < goal [ 1 ] )",
      "indent": 2
    },
    {
      "line": 38,
      "text": "set way [ tstep ] to ' RU ' and increment tstep",
      "code": "way [ tstep ++ ] = \" RU \" ;",
      "indent": 3
    },
    {
      "line": 39,
      "text": "increase now [ 0 ]",
      "code": "now [ 0 ] ++ ;",
      "indent": 3
    },
    {
      "line": 40,
      "text": "increment now [ 1 ]",
      "code": "now [ 1 ] ++ ;",
      "indent": 3
    },
    {
      "line": 41,
      "text": "else if now [ 0 ] > goal [ 0 ] and now [ 1 ] is less than goal [ 1 ]",
      "code": "else if ( now [ 0 ] > goal [ 0 ] && now [ 1 ] < goal [ 1 ] )",
      "indent": 2
    },
    {
      "line": 42,
      "text": "set way [ tstep ] to ' LU ' and increment tstep",
      "code": "way [ tstep ++ ] = \" LU \" ;",
      "indent": 3
    },
    {
      "line": 43,
      "text": "decrease now [ 0 ]",
      "code": "now [ 0 ] -- ;",
      "indent": 3
    },
    {
      "line": 44,
      "text": "increase now [ 1 ] by one",
      "code": "now [ 1 ] ++ ;",
      "indent": 3
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 47,
      "text": "print tstep and a new line",
      "code": "cout << tstep << endl ;",
      "indent": 1
    },
    {
      "line": 48,
      "text": "for i = 0 to tstep exclusive print way [ i ] and a new line",
      "code": "for ( i = 0 ; i < tstep ; i ++ ) cout << way [ i ] << endl ;",
      "indent": 1
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [100] {aka std::__cxx11::basic_string<char> [100]}’)"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string way [ 100 ] , now ;"
      ],
      "err_line": 3,
      "err_msg": "‘goal’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( now )"
      ],
      "err_line": 4,
      "err_msg": "could not convert ‘now’ from ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘bool’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( now [ 0 ] == goal )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "step += now ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "way [ tstep ] = ' D ' D tstep ++ ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘D’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "else if ( now [ 1 ] == goal )"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "way [ tstep ] = ' RD ' ] ++ ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "way [ tstep ] = ' LD ' ] ++ ;"
      ],
      "err_line": 34,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "way [ tstep ] = ' LU ' ] ++ ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "for ( int i = 0 ; i < step ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [100] {aka std::__cxx11::basic_string<char> [100]}’)"
    },
    {
      "mod_line": [
        1,
        13,
        25
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "for ( int i = 0 ; i < step ; i ++ )",
        "for ( int i = 0 ; i < step ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [100] {aka std::__cxx11::basic_string<char> [100]}’)"
    },
    {
      "mod_line": [
        1,
        13,
        25,
        30
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "for ( int i = 0 ; i < step ; i ++ )",
        "for ( int i = 0 ; i < step ; i ++ )",
        "way [ tstep ] = ' RD ' , tstep ++ ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [100] {aka std::__cxx11::basic_string<char> [100]}’)"
    },
    {
      "mod_line": [
        1,
        13,
        25,
        42
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "for ( int i = 0 ; i < step ; i ++ )",
        "for ( int i = 0 ; i < step ; i ++ )",
        "way [ tstep ] = ' LU ' , tstep ++ ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [100] {aka std::__cxx11::basic_string<char> [100]}’)"
    },
    {
      "mod_line": [
        1,
        13,
        25,
        3
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "for ( int i = 0 ; i < step ; i ++ )",
        "for ( int i = 0 ; i < step ; i ++ )",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        13,
        30
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "for ( int i = 0 ; i < step ; i ++ )",
        "way [ tstep ] = ' RD ' , tstep ++ ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [100] {aka std::__cxx11::basic_string<char> [100]}’)"
    },
    {
      "mod_line": [
        1,
        13,
        30,
        42
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "for ( int i = 0 ; i < step ; i ++ )",
        "way [ tstep ] = ' RD ' , tstep ++ ;",
        "way [ tstep ] = ' LU ' , tstep ++ ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [100] {aka std::__cxx11::basic_string<char> [100]}’)"
    },
    {
      "mod_line": [
        1,
        13,
        30,
        3
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "for ( int i = 0 ; i < step ; i ++ )",
        "way [ tstep ] = ' RD ' , tstep ++ ;",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        13,
        42
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "for ( int i = 0 ; i < step ; i ++ )",
        "way [ tstep ] = ' LU ' , tstep ++ ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [100] {aka std::__cxx11::basic_string<char> [100]}’)"
    },
    {
      "mod_line": [
        1,
        13,
        42,
        3
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "for ( int i = 0 ; i < step ; i ++ )",
        "way [ tstep ] = ' LU ' , tstep ++ ;",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        13,
        3
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "for ( int i = 0 ; i < step ; i ++ )",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        25
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "for ( int i = 0 ; i < step ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [100] {aka std::__cxx11::basic_string<char> [100]}’)"
    },
    {
      "mod_line": [
        1,
        25,
        30
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "for ( int i = 0 ; i < step ; i ++ )",
        "way [ tstep ] = ' RD ' , tstep ++ ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [100] {aka std::__cxx11::basic_string<char> [100]}’)"
    },
    {
      "mod_line": [
        1,
        25,
        30,
        42
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "for ( int i = 0 ; i < step ; i ++ )",
        "way [ tstep ] = ' RD ' , tstep ++ ;",
        "way [ tstep ] = ' LU ' , tstep ++ ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [100] {aka std::__cxx11::basic_string<char> [100]}’)"
    },
    {
      "mod_line": [
        1,
        25,
        30,
        3
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "for ( int i = 0 ; i < step ; i ++ )",
        "way [ tstep ] = ' RD ' , tstep ++ ;",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        25,
        42
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "for ( int i = 0 ; i < step ; i ++ )",
        "way [ tstep ] = ' LU ' , tstep ++ ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [100] {aka std::__cxx11::basic_string<char> [100]}’)"
    },
    {
      "mod_line": [
        1,
        25,
        42,
        3
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "for ( int i = 0 ; i < step ; i ++ )",
        "way [ tstep ] = ' LU ' , tstep ++ ;",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        25,
        3
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "for ( int i = 0 ; i < step ; i ++ )",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        30
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "way [ tstep ] = ' RD ' , tstep ++ ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [100] {aka std::__cxx11::basic_string<char> [100]}’)"
    },
    {
      "mod_line": [
        1,
        30,
        42
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "way [ tstep ] = ' RD ' , tstep ++ ;",
        "way [ tstep ] = ' LU ' , tstep ++ ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [100] {aka std::__cxx11::basic_string<char> [100]}’)"
    },
    {
      "mod_line": [
        1,
        30,
        42,
        3
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "way [ tstep ] = ' RD ' , tstep ++ ;",
        "way [ tstep ] = ' LU ' , tstep ++ ;",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        30,
        3
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "way [ tstep ] = ' RD ' , tstep ++ ;",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        42
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "way [ tstep ] = ' LU ' , tstep ++ ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>’ and ‘std::__cxx11::string [100] {aka std::__cxx11::basic_string<char> [100]}’)"
    },
    {
      "mod_line": [
        1,
        42,
        3
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "way [ tstep ] = ' LU ' , tstep ++ ;",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "string now , goal [ 100 ] ;",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        25,
        30,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < step ; i ++ )",
        "for ( int i = 0 ; i < step ; i ++ )",
        "way [ tstep ] = ' RD ' , tstep ++ ;",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        25,
        42,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < step ; i ++ )",
        "for ( int i = 0 ; i < step ; i ++ )",
        "way [ tstep ] = ' LU ' , tstep ++ ;",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        25,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < step ; i ++ )",
        "for ( int i = 0 ; i < step ; i ++ )",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        30,
        42,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < step ; i ++ )",
        "way [ tstep ] = ' RD ' , tstep ++ ;",
        "way [ tstep ] = ' LU ' , tstep ++ ;",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        30,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < step ; i ++ )",
        "way [ tstep ] = ' RD ' , tstep ++ ;",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        42,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < step ; i ++ )",
        "way [ tstep ] = ' LU ' , tstep ++ ;",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < step ; i ++ )",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        25,
        30,
        42,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < step ; i ++ )",
        "way [ tstep ] = ' RD ' , tstep ++ ;",
        "way [ tstep ] = ' LU ' , tstep ++ ;",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        25,
        30,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < step ; i ++ )",
        "way [ tstep ] = ' RD ' , tstep ++ ;",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        25,
        42,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < step ; i ++ )",
        "way [ tstep ] = ' LU ' , tstep ++ ;",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        25,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < step ; i ++ )",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        30,
        42,
        3
      ],
      "mod_code": [
        "way [ tstep ] = ' RD ' , tstep ++ ;",
        "way [ tstep ] = ' LU ' , tstep ++ ;",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        30,
        3
      ],
      "mod_code": [
        "way [ tstep ] = ' RD ' , tstep ++ ;",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        42,
        3
      ],
      "mod_code": [
        "way [ tstep ] = ' LU ' , tstep ++ ;",
        "now >> now >> goal ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}