{
  "meta": {
    "index": 1488,
    "hitid": "373L46LKP70EQ174H5Z0SHH7YA8JKH",
    "workerid": "AIWEXPJAU66D9",
    "probid": "837A",
    "subid": "45995844"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , i , m and c with m and c = 0",
      "code": "int n , i , m = 0 , c = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "str is a new string variable",
      "code": "string str ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "character from the input",
      "code": "getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read data from the input and put it into str",
      "code": "getline ( cin , str ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if str [ i ] is in the upper case , increment c by one",
      "code": "if ( isupper ( str [ i ] ) ) c ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "assign max of c and m to m",
      "code": "m = max ( c , m ) ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if str [ i ] is equal to ' ' , assign 0 to c",
      "code": "if ( str [ i ] == ' ' ) c = 0 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print m",
      "code": "cout << m << endl ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string str variable ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    },
    {
      "mod_line": [
        1,
        7,
        11,
        2
      ],
      "mod_code": [
        "int n , i , m , c = 0 ;",
        "if ( ! ( int ) str [ i ] ) c ++ ;",
        "cout << m ;",
        "string str variable ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    },
    {
      "mod_line": [
        1,
        7,
        3,
        2
      ],
      "mod_code": [
        "int n , i , m , c = 0 ;",
        "if ( ! ( int ) str [ i ] ) c ++ ;",
        "while ( cin >> n )",
        "string str variable ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    },
    {
      "mod_line": [
        1,
        7,
        2
      ],
      "mod_code": [
        "int n , i , m , c = 0 ;",
        "if ( ! ( int ) str [ i ] ) c ++ ;",
        "string str variable ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    },
    {
      "mod_line": [
        1,
        11,
        3,
        2
      ],
      "mod_code": [
        "int n , i , m , c = 0 ;",
        "cout << m ;",
        "while ( cin >> n )",
        "string str variable ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    },
    {
      "mod_line": [
        1,
        11,
        2
      ],
      "mod_code": [
        "int n , i , m , c = 0 ;",
        "cout << m ;",
        "string str variable ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    },
    {
      "mod_line": [
        1,
        11,
        2,
        7
      ],
      "mod_code": [
        "int n , i , m , c = 0 ;",
        "cout << m ;",
        "string str variable ;",
        "if ( ! isdigit ( str [ i ] ) ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    },
    {
      "mod_line": [
        1,
        3,
        2
      ],
      "mod_code": [
        "int n , i , m , c = 0 ;",
        "while ( cin >> n )",
        "string str variable ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    },
    {
      "mod_line": [
        1,
        3,
        2,
        7
      ],
      "mod_code": [
        "int n , i , m , c = 0 ;",
        "while ( cin >> n )",
        "string str variable ;",
        "if ( ! isdigit ( str [ i ] ) ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , i , m , c = 0 ;",
        "string str variable ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    },
    {
      "mod_line": [
        1,
        2,
        7
      ],
      "mod_code": [
        "int n , i , m , c = 0 ;",
        "string str variable ;",
        "if ( ! isdigit ( str [ i ] ) ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    },
    {
      "mod_line": [
        7,
        11,
        3,
        2
      ],
      "mod_code": [
        "if ( ! ( int ) str [ i ] ) c ++ ;",
        "cout << m ;",
        "while ( cin >> n )",
        "string str variable ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    },
    {
      "mod_line": [
        7,
        11,
        2
      ],
      "mod_code": [
        "if ( ! ( int ) str [ i ] ) c ++ ;",
        "cout << m ;",
        "string str variable ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    },
    {
      "mod_line": [
        7,
        3,
        2
      ],
      "mod_code": [
        "if ( ! ( int ) str [ i ] ) c ++ ;",
        "while ( cin >> n )",
        "string str variable ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "if ( ! ( int ) str [ i ] ) c ++ ;",
        "string str variable ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    },
    {
      "mod_line": [
        11,
        3,
        2
      ],
      "mod_code": [
        "cout << m ;",
        "while ( cin >> n )",
        "string str variable ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    },
    {
      "mod_line": [
        11,
        3,
        2,
        7
      ],
      "mod_code": [
        "cout << m ;",
        "while ( cin >> n )",
        "string str variable ;",
        "if ( ! isdigit ( str [ i ] ) ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "cout << m ;",
        "string str variable ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    },
    {
      "mod_line": [
        11,
        2,
        7
      ],
      "mod_code": [
        "cout << m ;",
        "string str variable ;",
        "if ( ! isdigit ( str [ i ] ) ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "while ( cin >> n )",
        "string str variable ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    },
    {
      "mod_line": [
        3,
        2,
        7
      ],
      "mod_code": [
        "while ( cin >> n )",
        "string str variable ;",
        "if ( ! isdigit ( str [ i ] ) ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "string str variable ;",
        "if ( ! isdigit ( str [ i ] ) ) c ++ ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘variable’"
    }
  ]
}