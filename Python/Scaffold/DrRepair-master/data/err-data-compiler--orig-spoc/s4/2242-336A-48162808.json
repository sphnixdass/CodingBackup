{
  "meta": {
    "index": 2242,
    "hitid": "3B6F54KMR265J348WP2WF3CVLNCS1U",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "336A",
    "subid": "48162808"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "x , y = integers",
      "code": "int x , y ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read x , y",
      "code": "cin >> x >> y ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "x2 = integer with x2 = abs ( x ) + abs ( y )",
      "code": "int x2 = abs ( x ) + abs ( y ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if x > 0 and y > 0",
      "code": "if ( x > 0 && y > 0 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "print 0 , \" \" , x2 , \" \" , x2 , 0",
      "code": "cout << 0 << \" \" << x2 << \" \" << x2 << \" 0 \" << endl ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "else if x > 0 and y < 0",
      "code": "else if ( x > 0 && y < 0 )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print 0 , \" \" , - x2 , \" \" , x2 , \" \" , 0",
      "code": "cout << 0 << \" \" << - x2 << \" \" << x2 << \" \" << 0 << endl ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "else if x < 0 and y > 0",
      "code": "else if ( x < 0 && y > 0 )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print - x2 , \" \" , 0 , \" \" , 0 , \" \" , x2",
      "code": "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << x2 << endl ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print - x2 , \" \" , 0 , \" \" , 0 , \" \" , - x2",
      "code": "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << - x2 << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "cout << 0 << \" \" << x2 << \" \" << x2 << \" \" << x2 << \" \" << 0 << endl ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        7,
        6
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "cout << 0 << \" \" << x2 << \" \" << x2 << \" \" << x2 << \" \" << 0 << endl ;",
        "else if ( x < 0 && y < 0 )"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        7,
        6,
        11
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "cout << 0 << \" \" << x2 << \" \" << x2 << \" \" << x2 << \" \" << 0 << endl ;",
        "else if ( x < 0 && y < 0 )",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << - x2 << \" \" ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        7,
        6,
        9
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "cout << 0 << \" \" << x2 << \" \" << x2 << \" \" << x2 << \" \" << 0 << endl ;",
        "else if ( x < 0 && y < 0 )",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << x2 << \" \" ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        7,
        6,
        10
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "cout << 0 << \" \" << x2 << \" \" << x2 << \" \" << x2 << \" \" << 0 << endl ;",
        "else if ( x < 0 && y < 0 )",
        "else ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        7,
        11
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "cout << 0 << \" \" << x2 << \" \" << x2 << \" \" << x2 << \" \" << 0 << endl ;",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << - x2 << \" \" ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        7,
        11,
        9
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "cout << 0 << \" \" << x2 << \" \" << x2 << \" \" << x2 << \" \" << 0 << endl ;",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << - x2 << \" \" ;",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << x2 << \" \" ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        7,
        11,
        10
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "cout << 0 << \" \" << x2 << \" \" << x2 << \" \" << x2 << \" \" << 0 << endl ;",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << - x2 << \" \" ;",
        "else ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        7,
        9
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "cout << 0 << \" \" << x2 << \" \" << x2 << \" \" << x2 << \" \" << 0 << endl ;",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << x2 << \" \" ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        10
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "cout << 0 << \" \" << x2 << \" \" << x2 << \" \" << x2 << \" \" << 0 << endl ;",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << x2 << \" \" ;",
        "else ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        7,
        10
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "cout << 0 << \" \" << x2 << \" \" << x2 << \" \" << x2 << \" \" << 0 << endl ;",
        "else ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "else if ( x < 0 && y < 0 )"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        6,
        11
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "else if ( x < 0 && y < 0 )",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << - x2 << \" \" ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        6,
        11,
        9
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "else if ( x < 0 && y < 0 )",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << - x2 << \" \" ;",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << x2 << \" \" ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        6,
        11,
        10
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "else if ( x < 0 && y < 0 )",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << - x2 << \" \" ;",
        "else ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        6,
        9
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "else if ( x < 0 && y < 0 )",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << x2 << \" \" ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        6,
        9,
        10
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "else if ( x < 0 && y < 0 )",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << x2 << \" \" ;",
        "else ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        6,
        10
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "else if ( x < 0 && y < 0 )",
        "else ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << - x2 << \" \" ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        11,
        9
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << - x2 << \" \" ;",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << x2 << \" \" ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        11,
        9,
        10
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << - x2 << \" \" ;",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << x2 << \" \" ;",
        "else ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        11,
        10
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << - x2 << \" \" ;",
        "else ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << x2 << \" \" ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        9,
        10
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "cout << - x2 << \" \" << 0 << \" \" << 0 << \" \" << x2 << \" \" ;",
        "else ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "cout << 0 << \" \" << x2 << \" \" << x2 , 0 << endl ;",
        "else ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    }
  ]
}