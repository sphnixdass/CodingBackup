{
  "meta": {
    "index": 2230,
    "hitid": "3XD2A6FGFNON887302HPU9UEJZ1S94",
    "workerid": "AIWEXPJAU66D9",
    "probid": "556A",
    "subid": "49072419"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , one and zero where one and zero = 0",
      "code": "int n , one = 0 , zero = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read input to n and s",
      "code": "cin >> n >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i from 0 to length of s exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if s [ i ] = ' 1 '",
      "code": "if ( s [ i ] == ' 1 ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment one",
      "code": "one ++ ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment zero",
      "code": "zero ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print absolute value of one - zero",
      "code": "cout << abs ( one - zero ) << endl ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , one = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘zero’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int n , one = 0 ;",
        "cout << abs ( one ) - 2 << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘zero’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10,
        7
      ],
      "mod_code": [
        "int n , one = 0 ;",
        "cout << abs ( one ) - 2 << endl ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        10,
        7,
        5
      ],
      "mod_code": [
        "int n , one = 0 ;",
        "cout << abs ( one ) - 2 << endl ;",
        "else else",
        "if ( s [ i ] == ' l ' )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        10,
        7,
        2
      ],
      "mod_code": [
        "int n , one = 0 ;",
        "cout << abs ( one ) - 2 << endl ;",
        "else else",
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        1,
        10,
        5
      ],
      "mod_code": [
        "int n , one = 0 ;",
        "cout << abs ( one ) - 2 << endl ;",
        "if ( s [ i ] == ' l ' )"
      ],
      "err_line": 8,
      "err_msg": "‘zero’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10,
        5,
        2
      ],
      "mod_code": [
        "int n , one = 0 ;",
        "cout << abs ( one ) - 2 << endl ;",
        "if ( s [ i ] == ' l ' )",
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        1,
        10,
        2
      ],
      "mod_code": [
        "int n , one = 0 ;",
        "cout << abs ( one ) - 2 << endl ;",
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int n , one = 0 ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        7,
        5
      ],
      "mod_code": [
        "int n , one = 0 ;",
        "else else",
        "if ( s [ i ] == ' l ' )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        7,
        5,
        10
      ],
      "mod_code": [
        "int n , one = 0 ;",
        "else else",
        "if ( s [ i ] == ' l ' )",
        "cout << abs ( one ) - zero << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        7,
        5,
        2
      ],
      "mod_code": [
        "int n , one = 0 ;",
        "else else",
        "if ( s [ i ] == ' l ' )",
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        1,
        7,
        10
      ],
      "mod_code": [
        "int n , one = 0 ;",
        "else else",
        "cout << abs ( one ) - zero << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        7,
        10,
        2
      ],
      "mod_code": [
        "int n , one = 0 ;",
        "else else",
        "cout << abs ( one ) - zero << endl ;",
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        1,
        7,
        2
      ],
      "mod_code": [
        "int n , one = 0 ;",
        "else else",
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int n , one = 0 ;",
        "if ( s [ i ] == ' l ' )"
      ],
      "err_line": 8,
      "err_msg": "‘zero’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        10
      ],
      "mod_code": [
        "int n , one = 0 ;",
        "if ( s [ i ] == ' l ' )",
        "cout << abs ( one ) - zero << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘zero’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        10,
        2
      ],
      "mod_code": [
        "int n , one = 0 ;",
        "if ( s [ i ] == ' l ' )",
        "cout << abs ( one ) - zero << endl ;",
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        1,
        5,
        2
      ],
      "mod_code": [
        "int n , one = 0 ;",
        "if ( s [ i ] == ' l ' )",
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int n , one = 0 ;",
        "cout << abs ( one ) - zero << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘zero’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10,
        2
      ],
      "mod_code": [
        "int n , one = 0 ;",
        "cout << abs ( one ) - zero << endl ;",
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , one = 0 ;",
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "cout << abs ( one ) - 2 << endl ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        7,
        5
      ],
      "mod_code": [
        "cout << abs ( one ) - 2 << endl ;",
        "else else",
        "if ( s [ i ] == ' l ' )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        7,
        5,
        2
      ],
      "mod_code": [
        "cout << abs ( one ) - 2 << endl ;",
        "else else",
        "if ( s [ i ] == ' l ' )",
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        10,
        7,
        2
      ],
      "mod_code": [
        "cout << abs ( one ) - 2 << endl ;",
        "else else",
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        10,
        5,
        2
      ],
      "mod_code": [
        "cout << abs ( one ) - 2 << endl ;",
        "if ( s [ i ] == ' l ' )",
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "cout << abs ( one ) - 2 << endl ;",
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "else else",
        "if ( s [ i ] == ' l ' )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        5,
        10
      ],
      "mod_code": [
        "else else",
        "if ( s [ i ] == ' l ' )",
        "cout << abs ( one ) - zero << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        5,
        10,
        2
      ],
      "mod_code": [
        "else else",
        "if ( s [ i ] == ' l ' )",
        "cout << abs ( one ) - zero << endl ;",
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        7,
        5,
        2
      ],
      "mod_code": [
        "else else",
        "if ( s [ i ] == ' l ' )",
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "else else",
        "cout << abs ( one ) - zero << endl ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        10,
        2
      ],
      "mod_code": [
        "else else",
        "cout << abs ( one ) - zero << endl ;",
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "else else",
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        5,
        10,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ' l ' )",
        "cout << abs ( one ) - zero << endl ;",
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ' l ' )",
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "cout << abs ( one ) - zero << endl ;",
        "string s s ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘s’"
    }
  ]
}