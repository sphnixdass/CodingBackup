{
  "meta": {
    "index": 1477,
    "hitid": "3PMR2DOWOOVL503G7B8QKQ96I0K54D",
    "workerid": "AIWEXPJAU66D9",
    "probid": "79A",
    "subid": "34498322"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers x , y and total , with total = 0",
      "code": "int x , y , total = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "players is an string array with 2 elements",
      "code": "string players [ 2 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "players [ 0 ] = \" empty \"",
      "code": "players [ 0 ] = \" empty \" ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "players [ 1 ] = \" empty \"",
      "code": "players [ 1 ] = \" empty \" ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read x and y",
      "code": "cin >> x >> y ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "create integer index = 0",
      "code": "int index = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "in a loop",
      "code": "while ( true )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "in a loop",
      "code": "while ( true )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if index = 1",
      "code": "if ( index == 1 )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if y > = 2",
      "code": "if ( y >= 2 )",
      "indent": 4
    },
    {
      "line": 11,
      "text": "set value of total to 20",
      "code": "total = 20 ;",
      "indent": 5
    },
    {
      "line": 12,
      "text": "decrease y by 2",
      "code": "y -= 2 ;",
      "indent": 5
    },
    {
      "line": 13,
      "text": "if y > = 10",
      "code": "if ( y >= 10 )",
      "indent": 5
    },
    {
      "line": 14,
      "text": "increase total by 100",
      "code": "total += 100 ;",
      "indent": 6
    },
    {
      "line": 15,
      "text": "decrease y by 10",
      "code": "y -= 10 ;",
      "indent": 6
    },
    {
      "line": 16,
      "text": "if y > = 10",
      "code": "if ( y >= 10 )",
      "indent": 6
    },
    {
      "line": 17,
      "text": "increase total by 100",
      "code": "total += 100 ;",
      "indent": 7
    },
    {
      "line": 18,
      "text": "decrease y by 10",
      "code": "y -= 10 ;",
      "indent": 7
    },
    {
      "line": 19,
      "text": "set players [ index ] to \" win \"",
      "code": "players [ index ] = \" win \" ;",
      "indent": 7
    },
    {
      "line": 20,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 7
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 6
    },
    {
      "line": 22,
      "text": "if x > = 1",
      "code": "if ( x >= 1 )",
      "indent": 7
    },
    {
      "line": 23,
      "text": "increase total by 100",
      "code": "total += 100 ;",
      "indent": 8
    },
    {
      "line": 24,
      "text": "decrease x by one",
      "code": "x -- ;",
      "indent": 8
    },
    {
      "line": 25,
      "text": "set players [ index ] to \" win \"",
      "code": "players [ index ] = \" win \" ;",
      "indent": 8
    },
    {
      "line": 26,
      "text": "break the loop",
      "code": "break ;",
      "indent": 8
    },
    {
      "line": 27,
      "text": "else",
      "code": "else",
      "indent": 7
    },
    {
      "line": 28,
      "text": "increase y by 12",
      "code": "y += 12 ;",
      "indent": 8
    },
    {
      "line": 29,
      "text": "set players [ index ] to \" lose \"",
      "code": "players [ index ] = \" lose \" ;",
      "indent": 8
    },
    {
      "line": 30,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 8
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 7
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 6
    },
    {
      "line": 33,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 34,
      "text": "if x > = 2",
      "code": "if ( x >= 2 )",
      "indent": 6
    },
    {
      "line": 35,
      "text": "increase total by 200",
      "code": "total += 200 ;",
      "indent": 7
    },
    {
      "line": 36,
      "text": "decrease x by 2",
      "code": "x -= 2 ;",
      "indent": 7
    },
    {
      "line": 37,
      "text": "set players [ index ] to \" win \"",
      "code": "players [ index ] = \" win \" ;",
      "indent": 7
    },
    {
      "line": 38,
      "text": "break the loop",
      "code": "break ;",
      "indent": 7
    },
    {
      "line": 39,
      "text": "else",
      "code": "else",
      "indent": 6
    },
    {
      "line": 40,
      "text": "increase y by 2",
      "code": "y += 2 ;",
      "indent": 7
    },
    {
      "line": 41,
      "text": "set players [ index ] to \" lose \"",
      "code": "players [ index ] = \" lose \" ;",
      "indent": 7
    },
    {
      "line": 42,
      "text": "break the loop",
      "code": "break ;",
      "indent": 7
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 6
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 45,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 46,
      "text": "set players [ index ] to \" lose \"",
      "code": "players [ index ] = \" lose \" ;",
      "indent": 5
    },
    {
      "line": 47,
      "text": "break the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 49,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 50,
      "text": "if x > = 2",
      "code": "if ( x >= 2 )",
      "indent": 4
    },
    {
      "line": 51,
      "text": "increase total by 200",
      "code": "total += 200 ;",
      "indent": 5
    },
    {
      "line": 52,
      "text": "decrease x by 2",
      "code": "x -= 2 ;",
      "indent": 5
    },
    {
      "line": 53,
      "text": "if y > = 2",
      "code": "if ( y >= 2 )",
      "indent": 5
    },
    {
      "line": 54,
      "text": "increase total by 20",
      "code": "total += 20 ;",
      "indent": 6
    },
    {
      "line": 55,
      "text": "decrease y by 2",
      "code": "y -= 2 ;",
      "indent": 6
    },
    {
      "line": 56,
      "text": "set players [ index ] to \" win \"",
      "code": "players [ index ] = \" win \" ;",
      "indent": 6
    },
    {
      "line": 57,
      "text": "break the loop",
      "code": "break ;",
      "indent": 6
    },
    {
      "line": 58,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 59,
      "text": "increase x by 2",
      "code": "x += 2 ;",
      "indent": 6
    },
    {
      "line": 60,
      "text": "set players [ index ] to \" lose \"",
      "code": "players [ index ] = \" lose \" ;",
      "indent": 6
    },
    {
      "line": 61,
      "text": "break the loop",
      "code": "break ;",
      "indent": 6
    },
    {
      "line": 62,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 63,
      "text": "else if x = 1 & & y > = 12",
      "code": "else if ( x == 1 && y >= 12 )",
      "indent": 4
    },
    {
      "line": 64,
      "text": "set value of total to 220",
      "code": "total = 220 ;",
      "indent": 5
    },
    {
      "line": 65,
      "text": "decrease x by one",
      "code": "x -- ;",
      "indent": 5
    },
    {
      "line": 66,
      "text": "decrease y by 12",
      "code": "y -= 12 ;",
      "indent": 5
    },
    {
      "line": 67,
      "text": "set players [ index ] to \" win \"",
      "code": "players [ index ] = \" win \" ;",
      "indent": 5
    },
    {
      "line": 68,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 69,
      "text": "else if y > = 22",
      "code": "else if ( y >= 22 )",
      "indent": 4
    },
    {
      "line": 70,
      "text": "total = 220",
      "code": "total = 220 ;",
      "indent": 5
    },
    {
      "line": 71,
      "text": "decrease y by 22",
      "code": "y -= 22 ;",
      "indent": 5
    },
    {
      "line": 72,
      "text": "set players [ index ] to \" win \"",
      "code": "players [ index ] = \" win \" ;",
      "indent": 5
    },
    {
      "line": 73,
      "text": "break the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 74,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 75,
      "text": "set players [ index ] to \" lose \"",
      "code": "players [ index ] = \" lose \" ;",
      "indent": 5
    },
    {
      "line": 76,
      "text": "break the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 77,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 78,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 79,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 80,
      "text": "if players [ 0 ] . compare ( \" lose \" ) = 0 | | players [ 1 ] . compare ( \" lose \" ) = 0 , stop the loop",
      "code": "if ( players [ 0 ] . compare ( \" lose \" ) == 0 || players [ 1 ] . compare ( \" lose \" ) == 0 ) { break ; }",
      "indent": 2
    },
    {
      "line": 81,
      "text": "if index = 0",
      "code": "if ( index == 0 )",
      "indent": 2
    },
    {
      "line": 82,
      "text": "increase index by one",
      "code": "index ++ ;",
      "indent": 3
    },
    {
      "line": 83,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 84,
      "text": "assign value of 0 to index",
      "code": "index = 0 ;",
      "indent": 3
    },
    {
      "line": 85,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 86,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 87,
      "text": "if players [ 1 ] . compare ( \" lose \" ) = 0",
      "code": "if ( players [ 1 ] . compare ( \" lose \" ) == 0 )",
      "indent": 1
    },
    {
      "line": 88,
      "text": "print \" Ciel \" and a new line",
      "code": "cout << \" Ciel \" << endl ;",
      "indent": 2
    },
    {
      "line": 89,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 90,
      "text": "print \" Hanako \" and a new line",
      "code": "cout << \" Hanako \" << endl ;",
      "indent": 2
    },
    {
      "line": 91,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 92,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 93,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        64
      ],
      "mod_code": [
        "total = max ( 0 ) ;"
      ],
      "err_line": 64,
      "err_msg": "no matching function for call to ‘max(int)’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string players ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "index = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "* total = 20 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "if ( x >= l )"
      ],
      "err_line": 22,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;"
      ],
      "err_line": 25,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 38,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 39,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        45
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 45,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        47
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 47,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        49
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 49,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        56
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        57
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 57,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        58
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 58,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        61
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 61,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        63
      ],
      "mod_code": [
        "else if ( x == l && y >= 12 )"
      ],
      "err_line": 63,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        67
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;"
      ],
      "err_line": 67,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        72
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;"
      ],
      "err_line": 72,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        73
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 73,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        76
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 76,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        84
      ],
      "mod_code": [
        "* index = 0 ;"
      ],
      "err_line": 84,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        87
      ],
      "mod_code": [
        "if ( players [ 1 ] . compare ( \" lose \" ) = 0 )"
      ],
      "err_line": 87,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        64,
        56
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "players [ ' index \" ] = \" win \" ;"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        64,
        56,
        67
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "players [ ' index \" ] = \" win \" ;",
        "players [ ' index \" ] = \" win \" ;"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        64,
        56,
        67,
        57
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "players [ ' index \" ] = \" win \" ;",
        "players [ ' index \" ] = \" win \" ;",
        "break break ;"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        64,
        56,
        67,
        27
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "players [ ' index \" ] = \" win \" ;",
        "players [ ' index \" ] = \" win \" ;",
        "else else"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        64,
        56,
        67,
        33
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "players [ ' index \" ] = \" win \" ;",
        "players [ ' index \" ] = \" win \" ;",
        "else else"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        64,
        56,
        57
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "players [ ' index \" ] = \" win \" ;",
        "break break ;"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        64,
        56,
        57,
        27
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "players [ ' index \" ] = \" win \" ;",
        "break break ;",
        "else else"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        64,
        56,
        57,
        33
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "players [ ' index \" ] = \" win \" ;",
        "break break ;",
        "else else"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        64,
        56,
        27
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "players [ ' index \" ] = \" win \" ;",
        "else else"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        64,
        56,
        27,
        33
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "players [ ' index \" ] = \" win \" ;",
        "else else",
        "else else"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        64,
        56,
        33
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "players [ ' index \" ] = \" win \" ;",
        "else else"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        64,
        67
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "players [ ' index \" ] = \" win \" ;"
      ],
      "err_line": 67,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        64,
        67,
        57
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "players [ ' index \" ] = \" win \" ;",
        "break break ;"
      ],
      "err_line": 67,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        64,
        67,
        57,
        27
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "players [ ' index \" ] = \" win \" ;",
        "break break ;",
        "else else"
      ],
      "err_line": 67,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        64,
        67,
        57,
        33
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "players [ ' index \" ] = \" win \" ;",
        "break break ;",
        "else else"
      ],
      "err_line": 67,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        64,
        67,
        27
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "players [ ' index \" ] = \" win \" ;",
        "else else"
      ],
      "err_line": 67,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        64,
        67,
        27,
        33
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "players [ ' index \" ] = \" win \" ;",
        "else else",
        "else else"
      ],
      "err_line": 67,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        64,
        67,
        33
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "players [ ' index \" ] = \" win \" ;",
        "else else"
      ],
      "err_line": 67,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        64,
        57
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "break break ;"
      ],
      "err_line": 57,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        64,
        57,
        27
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "break break ;",
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        64,
        57,
        27,
        33
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "break break ;",
        "else else",
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        64,
        57,
        33
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "break break ;",
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        64,
        27
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        64,
        27,
        33
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "else else",
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        64,
        33
      ],
      "mod_code": [
        "total = max ( 0 ) ;",
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        56,
        67
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;",
        "players [ ' index \" ] = \" win \" ;"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        56,
        67,
        57
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;",
        "players [ ' index \" ] = \" win \" ;",
        "break break ;"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        56,
        67,
        57,
        27
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;",
        "players [ ' index \" ] = \" win \" ;",
        "break break ;",
        "else else"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        56,
        67,
        57,
        33
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;",
        "players [ ' index \" ] = \" win \" ;",
        "break break ;",
        "else else"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        56,
        67,
        27
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;",
        "players [ ' index \" ] = \" win \" ;",
        "else else"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        56,
        67,
        27,
        33
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;",
        "players [ ' index \" ] = \" win \" ;",
        "else else",
        "else else"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        56,
        67,
        33
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;",
        "players [ ' index \" ] = \" win \" ;",
        "else else"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        56,
        57
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;",
        "break break ;"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        56,
        57,
        27
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;",
        "break break ;",
        "else else"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        56,
        57,
        27,
        33
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;",
        "break break ;",
        "else else",
        "else else"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        56,
        57,
        33
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;",
        "break break ;",
        "else else"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        56,
        27
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;",
        "else else"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        56,
        27,
        33
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;",
        "else else",
        "else else"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        56,
        33
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;",
        "else else"
      ],
      "err_line": 56,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        67,
        57
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;",
        "break break ;"
      ],
      "err_line": 67,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        67,
        57,
        27
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;",
        "break break ;",
        "else else"
      ],
      "err_line": 67,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        67,
        57,
        27,
        33
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;",
        "break break ;",
        "else else",
        "else else"
      ],
      "err_line": 67,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        67,
        57,
        33
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;",
        "break break ;",
        "else else"
      ],
      "err_line": 67,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        67,
        27
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;",
        "else else"
      ],
      "err_line": 67,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        67,
        27,
        33
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;",
        "else else",
        "else else"
      ],
      "err_line": 67,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        67,
        33
      ],
      "mod_code": [
        "players [ ' index \" ] = \" win \" ;",
        "else else"
      ],
      "err_line": 67,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        57,
        27
      ],
      "mod_code": [
        "break break ;",
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        57,
        27,
        33
      ],
      "mod_code": [
        "break break ;",
        "else else",
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        57,
        33
      ],
      "mod_code": [
        "break break ;",
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        27,
        33
      ],
      "mod_code": [
        "else else",
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}