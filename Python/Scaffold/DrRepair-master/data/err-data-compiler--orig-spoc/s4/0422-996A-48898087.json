{
  "meta": {
    "index": 422,
    "hitid": "3WRKFXQBOB1DFVCF32FRPOHIJAJYI6",
    "workerid": "A1C5H6OY3HGO4U",
    "probid": "996A",
    "subid": "48898087"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a = integer array of length 5",
      "code": "int a [ 5 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "set a [ 0 ] to 100",
      "code": "a [ 0 ] = 100 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set a [ 1 ] to 20",
      "code": "a [ 1 ] = 20 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set a [ 2 ] to 10",
      "code": "a [ 2 ] = 10 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set a [ 3 ] to 5",
      "code": "a [ 3 ] = 5 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set a [ 4 ] to 1",
      "code": "a [ 4 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "c , r = integers with c value of 0",
      "code": "int c = 0 , r ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to infinity",
      "code": "for ( int i = 0 ; ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "set c to c + n / a [ i ]",
      "code": "c += n / a [ i ] ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set r to n mod a [ i ]",
      "code": "r = n % a [ i ] ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if r equals 0",
      "code": "if ( r == 0 )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set n to r",
      "code": "n = r ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print c",
      "code": "cout << c << endl ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "a [ 1 ++ ] = 20 ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "a [ 2 ] ] = 10 ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "a [ 4 ] ] = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 11,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 0 ; ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        15
      ],
      "mod_code": [
        "break break ;",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        15,
        16
      ],
      "mod_code": [
        "break break ;",
        "else else",
        "n -= r ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        15,
        16,
        5
      ],
      "mod_code": [
        "break break ;",
        "else else",
        "n -= r ;",
        "a [ 3 ] = ' 5 ' ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        15,
        16,
        2
      ],
      "mod_code": [
        "break break ;",
        "else else",
        "n -= r ;",
        "a [ ' 0 ' ] = 100 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        15,
        16,
        19
      ],
      "mod_code": [
        "break break ;",
        "else else",
        "n -= r ;",
        "cout << c ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        15,
        5
      ],
      "mod_code": [
        "break break ;",
        "else else",
        "a [ 3 ] = ' 5 ' ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        15,
        5,
        2
      ],
      "mod_code": [
        "break break ;",
        "else else",
        "a [ 3 ] = ' 5 ' ;",
        "a [ ' 0 ' ] = 100 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        15,
        5,
        19
      ],
      "mod_code": [
        "break break ;",
        "else else",
        "a [ 3 ] = ' 5 ' ;",
        "cout << c ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        15,
        2
      ],
      "mod_code": [
        "break break ;",
        "else else",
        "a [ ' 0 ' ] = 100 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        15,
        2,
        19
      ],
      "mod_code": [
        "break break ;",
        "else else",
        "a [ ' 0 ' ] = 100 ;",
        "cout << c ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        15,
        19
      ],
      "mod_code": [
        "break break ;",
        "else else",
        "cout << c ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        16
      ],
      "mod_code": [
        "break break ;",
        "n -= r ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        16,
        5
      ],
      "mod_code": [
        "break break ;",
        "n -= r ;",
        "a [ 3 ] = ' 5 ' ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        16,
        5,
        2
      ],
      "mod_code": [
        "break break ;",
        "n -= r ;",
        "a [ 3 ] = ' 5 ' ;",
        "a [ ' 0 ' ] = 100 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        16,
        5,
        19
      ],
      "mod_code": [
        "break break ;",
        "n -= r ;",
        "a [ 3 ] = ' 5 ' ;",
        "cout << c ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        16,
        2
      ],
      "mod_code": [
        "break break ;",
        "n -= r ;",
        "a [ ' 0 ' ] = 100 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        16,
        2,
        19
      ],
      "mod_code": [
        "break break ;",
        "n -= r ;",
        "a [ ' 0 ' ] = 100 ;",
        "cout << c ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        16,
        19
      ],
      "mod_code": [
        "break break ;",
        "n -= r ;",
        "cout << c ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        5
      ],
      "mod_code": [
        "break break ;",
        "a [ 3 ] = ' 5 ' ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        5,
        2
      ],
      "mod_code": [
        "break break ;",
        "a [ 3 ] = ' 5 ' ;",
        "a [ ' 0 ' ] = 100 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        5,
        2,
        19
      ],
      "mod_code": [
        "break break ;",
        "a [ 3 ] = ' 5 ' ;",
        "a [ ' 0 ' ] = 100 ;",
        "cout << c ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        5,
        19
      ],
      "mod_code": [
        "break break ;",
        "a [ 3 ] = ' 5 ' ;",
        "cout << c ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        2
      ],
      "mod_code": [
        "break break ;",
        "a [ ' 0 ' ] = 100 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        2,
        19
      ],
      "mod_code": [
        "break break ;",
        "a [ ' 0 ' ] = 100 ;",
        "cout << c ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        19
      ],
      "mod_code": [
        "break break ;",
        "cout << c ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        15,
        16
      ],
      "mod_code": [
        "else else",
        "n -= r ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        16,
        5
      ],
      "mod_code": [
        "else else",
        "n -= r ;",
        "a [ 3 ] = ' 5 ' ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        16,
        5,
        2
      ],
      "mod_code": [
        "else else",
        "n -= r ;",
        "a [ 3 ] = ' 5 ' ;",
        "a [ ' 0 ' ] = 100 ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        16,
        5,
        19
      ],
      "mod_code": [
        "else else",
        "n -= r ;",
        "a [ 3 ] = ' 5 ' ;",
        "cout << c ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        16,
        2
      ],
      "mod_code": [
        "else else",
        "n -= r ;",
        "a [ ' 0 ' ] = 100 ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        16,
        2,
        19
      ],
      "mod_code": [
        "else else",
        "n -= r ;",
        "a [ ' 0 ' ] = 100 ;",
        "cout << c ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        16,
        19
      ],
      "mod_code": [
        "else else",
        "n -= r ;",
        "cout << c ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        5
      ],
      "mod_code": [
        "else else",
        "a [ 3 ] = ' 5 ' ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        5,
        2
      ],
      "mod_code": [
        "else else",
        "a [ 3 ] = ' 5 ' ;",
        "a [ ' 0 ' ] = 100 ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        5,
        2,
        19
      ],
      "mod_code": [
        "else else",
        "a [ 3 ] = ' 5 ' ;",
        "a [ ' 0 ' ] = 100 ;",
        "cout << c ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        5,
        19
      ],
      "mod_code": [
        "else else",
        "a [ 3 ] = ' 5 ' ;",
        "cout << c ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        2
      ],
      "mod_code": [
        "else else",
        "a [ ' 0 ' ] = 100 ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        2,
        19
      ],
      "mod_code": [
        "else else",
        "a [ ' 0 ' ] = 100 ;",
        "cout << c ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        19
      ],
      "mod_code": [
        "else else",
        "cout << c ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}