{
  "meta": {
    "index": 1130,
    "hitid": "35XW21VSVG8I9A8CPZKFZIL9JTGSLZ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "86A",
    "subid": "795859"
  },
  "lines": [
    {
      "line": 0,
      "text": "function get_ref with long long argument a that returns long long",
      "code": "long long get_ref ( long long a )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long long ans",
      "code": "long long ans ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i from 1 to 100000000000 inclusive multiplying i by 10 on each iteration",
      "code": "for ( long long i = 1 ; i <= 100000000000 ; i *= 10 )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if a > = i",
      "code": "if ( a >= i )",
      "indent": 2
    },
    {
      "line": 4,
      "text": "skip the rest of the loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 5,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set ans to i / 2",
      "code": "ans = i / 2 ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "return ans",
      "code": "return ans ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 12,
      "text": "reflection is a long long function with long long argument a",
      "code": "long long reflection ( long long a )",
      "indent": 0
    },
    {
      "line": 13,
      "text": "create integer argham",
      "code": "int argham ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "declare long long ref",
      "code": "long long ref ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for i = 1 to 100000000000 inclusive multiplying i by 10 on each iteration",
      "code": "for ( long long i = 1 ; i <= 100000000000 ; i *= 10 )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if a > = i",
      "code": "if ( a >= i )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "go to the start of the loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 19,
      "text": "assign i - 1 to ref",
      "code": "ref = i - 1 ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "return ( ref - a ) * a",
      "code": "return ( ( ref - a ) * a ) ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 26,
      "text": "declare long long variables i , t , m , n , j and k",
      "code": "long long i , t , m , n , j , k ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "declare long longs l and r",
      "code": "long long l , r ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "declare long long maxx = 0",
      "code": "long long maxx = 0 ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "read l and r",
      "code": "cin >> l >> r ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "declare long long variable refrence = get_ref ( r )",
      "code": "long long refrence = get_ref ( r ) ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "if r is less than refrence",
      "code": "if ( r < refrence )",
      "indent": 1
    },
    {
      "line": 32,
      "text": "print reflection ( r )",
      "code": "cout << reflection ( r ) << endl ;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 34,
      "text": "if l is less than refrence",
      "code": "if ( l < refrence )",
      "indent": 2
    },
    {
      "line": 35,
      "text": "print reflection ( refrence )",
      "code": "cout << reflection ( refrence ) << endl ;",
      "indent": 3
    },
    {
      "line": 36,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 37,
      "text": "print reflection ( l )",
      "code": "cout << reflection ( l ) << endl ;",
      "indent": 3
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long get_ref ( long long a ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long ans ans ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 100000000000 ; i += 10 )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "rest ;"
      ],
      "err_line": 4,
      "err_msg": "‘rest’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "long long reflection ( long long a ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "long long ref ref ;"
      ],
      "err_line": 14,
      "err_msg": "expected initializer before ‘ref’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 100000000000 ; i += 10 )"
      ],
      "err_line": 15,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        15,
        1
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "long long ans ans ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        2,
        15,
        1,
        32
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "long long ans ans ;",
        "cout << reflection ( r ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        2,
        15,
        1,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "long long ans ans ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        2,
        15,
        1,
        36
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "long long ans ans ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        2,
        15,
        32,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "cout << reflection ( r ) ;",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        2,
        15,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        2,
        15,
        7,
        36
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "break break ;",
        "else ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "long long ans ans ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        2,
        1,
        32
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "long long ans ans ;",
        "cout << reflection ( r ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        2,
        1,
        32,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "long long ans ans ;",
        "cout << reflection ( r ) ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        2,
        1,
        32,
        36
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "long long ans ans ;",
        "cout << reflection ( r ) ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        2,
        1,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "long long ans ans ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        2,
        1,
        7,
        36
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "long long ans ans ;",
        "break break ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        2,
        1,
        36
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "long long ans ans ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        2,
        32,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "cout << reflection ( r ) ;",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        2,
        32,
        7,
        36
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "cout << reflection ( r ) ;",
        "break break ;",
        "else ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        2,
        7,
        36
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "break break ;",
        "else ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        15,
        1
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "long long ans ans ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        15,
        1,
        32
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "long long ans ans ;",
        "cout << reflection ( r ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        15,
        1,
        32,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "long long ans ans ;",
        "cout << reflection ( r ) ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        15,
        1,
        32,
        36
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "long long ans ans ;",
        "cout << reflection ( r ) ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        15,
        1,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "long long ans ans ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        15,
        1,
        7,
        36
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "long long ans ans ;",
        "break break ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        15,
        1,
        36
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "long long ans ans ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        15,
        32,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "cout << reflection ( r ) ;",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        15,
        32,
        7,
        36
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "cout << reflection ( r ) ;",
        "break break ;",
        "else ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        15,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        15,
        7,
        36
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 100000000000 ; i += 10 )",
        "break break ;",
        "else ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        32
      ],
      "mod_code": [
        "long long ans ans ;",
        "cout << reflection ( r ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        1,
        32,
        7
      ],
      "mod_code": [
        "long long ans ans ;",
        "cout << reflection ( r ) ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        1,
        32,
        7,
        36
      ],
      "mod_code": [
        "long long ans ans ;",
        "cout << reflection ( r ) ;",
        "break break ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        1,
        32,
        36
      ],
      "mod_code": [
        "long long ans ans ;",
        "cout << reflection ( r ) ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "long long ans ans ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        1,
        7,
        36
      ],
      "mod_code": [
        "long long ans ans ;",
        "break break ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        1,
        36
      ],
      "mod_code": [
        "long long ans ans ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘ans’"
    },
    {
      "mod_line": [
        32,
        7
      ],
      "mod_code": [
        "cout << reflection ( r ) ;",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        32,
        7,
        36
      ],
      "mod_code": [
        "cout << reflection ( r ) ;",
        "break break ;",
        "else ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        36
      ],
      "mod_code": [
        "break break ;",
        "else ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}