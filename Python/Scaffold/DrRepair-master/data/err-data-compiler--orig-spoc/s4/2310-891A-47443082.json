{
  "meta": {
    "index": 2310,
    "hitid": "35JDMRECC431DZPTDD3UX9CMLYRGEB",
    "workerid": "A1APYLD4DUK33J",
    "probid": "891A",
    "subid": "47443082"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare gcd with long longs a , b as arguments , returning long long",
      "code": "long long gcd ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "while ( b ^ = a ^ = b ^ = a % = b is true )",
      "code": "while ( b ^= a ^= b ^= a %= b )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "end statement",
      "code": ";",
      "indent": 2
    },
    {
      "line": 3,
      "text": "return a from function",
      "code": "return a ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "create constant integer maxn with maxn = 2000 + 5",
      "code": "const int maxn = 2000 + 5 ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "create long long arr with size maxn",
      "code": "long long arr [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 7,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 9,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "create integer num with num = 0",
      "code": "int num = 0 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read arr [ i ]",
      "code": "cin >> arr [ i ] ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if arr [ i ] is 1 , increment num",
      "code": "if ( arr [ i ] == 1 ) num ++ ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if num is not 0",
      "code": "if ( num != 0 )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print n - num print newline",
      "code": "cout << n - num << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 18,
      "text": "create integer len with len = 1e5",
      "code": "int len = 1e5 ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "create boolean flag with flag = 0",
      "code": "bool flag = 0 ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "create long long t with t = arr [ i ]",
      "code": "long long t = arr [ i ] ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "for j = i + 1 to n exclusive",
      "code": "for ( int j = i + 1 ; j < n ; j ++ )",
      "indent": 3
    },
    {
      "line": 23,
      "text": "set t to result of run gcd with t and arr [ j ]",
      "code": "t = gcd ( t , arr [ j ] ) ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "if t is 1",
      "code": "if ( t == 1 )",
      "indent": 4
    },
    {
      "line": 25,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 5
    },
    {
      "line": 26,
      "text": "set len to minimum of len and j - i",
      "code": "len = min ( len , j - i ) ;",
      "indent": 5
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "if not flag",
      "code": "if ( ! flag )",
      "indent": 2
    },
    {
      "line": 31,
      "text": "print \" - 1 \" print newline",
      "code": "cout << \" -1 \" << endl ;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 33,
      "text": "print n - 1 + len print newline",
      "code": "cout << n - 1 + len << endl ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "const int maxn += maxn ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 13,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "arr >> arr [ i ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘long long int [2005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "int len = 1e5 = 1e5 ;"
      ],
      "err_line": 18,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "flag = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 20,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 22,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "while ( b != a && b <= b && a != true )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        12
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "while ( b != a && b <= b && a != true )",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        12,
        20
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "while ( b != a && b <= b && a != true )",
        "arr >> arr [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        12,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "while ( b != a && b <= b && a != true )",
        "arr >> arr [ i ] ;",
        "const int maxn += maxn ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        12,
        25
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "while ( b != a && b <= b && a != true )",
        "arr >> arr [ i ] ;",
        "int flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        20
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "while ( b != a && b <= b && a != true )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        20,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "while ( b != a && b <= b && a != true )",
        "for ( i = 0 ; i < n ; i ++ )",
        "const int maxn += maxn ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        20,
        25
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "while ( b != a && b <= b && a != true )",
        "for ( i = 0 ; i < n ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "while ( b != a && b <= b && a != true )",
        "const int maxn += maxn ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        5,
        25
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "while ( b != a && b <= b && a != true )",
        "const int maxn += maxn ;",
        "int flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        25
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "while ( b != a && b <= b && a != true )",
        "int flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12,
        20
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "arr >> arr [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12,
        20,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "arr >> arr [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "const int maxn += maxn ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12,
        20,
        25
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "arr >> arr [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "arr >> arr [ i ] ;",
        "const int maxn += maxn ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12,
        5,
        25
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "arr >> arr [ i ] ;",
        "const int maxn += maxn ;",
        "int flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12,
        25
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "arr >> arr [ i ] ;",
        "int flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        20
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        20,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "const int maxn += maxn ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        20,
        5,
        25
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "const int maxn += maxn ;",
        "int flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        20,
        25
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "const int maxn += maxn ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        25
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "const int maxn += maxn ;",
        "int flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        25
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "while ( b != a && b <= b && a != true )",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘long long int [2005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        1,
        12,
        20
      ],
      "mod_code": [
        "while ( b != a && b <= b && a != true )",
        "arr >> arr [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘long long int [2005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        1,
        12,
        20,
        5
      ],
      "mod_code": [
        "while ( b != a && b <= b && a != true )",
        "arr >> arr [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "const int maxn += maxn ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        1,
        12,
        20,
        25
      ],
      "mod_code": [
        "while ( b != a && b <= b && a != true )",
        "arr >> arr [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘long long int [2005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        1,
        12,
        5
      ],
      "mod_code": [
        "while ( b != a && b <= b && a != true )",
        "arr >> arr [ i ] ;",
        "const int maxn += maxn ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        1,
        12,
        5,
        25
      ],
      "mod_code": [
        "while ( b != a && b <= b && a != true )",
        "arr >> arr [ i ] ;",
        "const int maxn += maxn ;",
        "int flag = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        1,
        12,
        25
      ],
      "mod_code": [
        "while ( b != a && b <= b && a != true )",
        "arr >> arr [ i ] ;",
        "int flag = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘long long int [2005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        1,
        20
      ],
      "mod_code": [
        "while ( b != a && b <= b && a != true )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 20,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        20,
        5
      ],
      "mod_code": [
        "while ( b != a && b <= b && a != true )",
        "for ( i = 0 ; i < n ; i ++ )",
        "const int maxn += maxn ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        1,
        20,
        5,
        25
      ],
      "mod_code": [
        "while ( b != a && b <= b && a != true )",
        "for ( i = 0 ; i < n ; i ++ )",
        "const int maxn += maxn ;",
        "int flag = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        1,
        20,
        25
      ],
      "mod_code": [
        "while ( b != a && b <= b && a != true )",
        "for ( i = 0 ; i < n ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 20,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "while ( b != a && b <= b && a != true )",
        "const int maxn += maxn ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        1,
        5,
        25
      ],
      "mod_code": [
        "while ( b != a && b <= b && a != true )",
        "const int maxn += maxn ;",
        "int flag = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        12,
        20
      ],
      "mod_code": [
        "arr >> arr [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘long long int [2005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        20,
        5
      ],
      "mod_code": [
        "arr >> arr [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "const int maxn += maxn ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        12,
        20,
        5,
        25
      ],
      "mod_code": [
        "arr >> arr [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "const int maxn += maxn ;",
        "int flag = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        12,
        20,
        25
      ],
      "mod_code": [
        "arr >> arr [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘long long int [2005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "arr >> arr [ i ] ;",
        "const int maxn += maxn ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        12,
        5,
        25
      ],
      "mod_code": [
        "arr >> arr [ i ] ;",
        "const int maxn += maxn ;",
        "int flag = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        12,
        25
      ],
      "mod_code": [
        "arr >> arr [ i ] ;",
        "int flag = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘long long int [2005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        20,
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "const int maxn += maxn ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        20,
        5,
        25
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "const int maxn += maxn ;",
        "int flag = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        20,
        25
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 20,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        25
      ],
      "mod_code": [
        "const int maxn += maxn ;",
        "int flag = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘+=’ token"
    }
  ]
}