{
  "meta": {
    "index": 1322,
    "hitid": "34YWR3PJ284D8V5PUG4J06ADU8YX0P",
    "workerid": "A1APYLD4DUK33J",
    "probid": "47A",
    "subid": "40818043"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers i , j , m , n , cnt with cnt = 0",
      "code": "int i , j , m , n , cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read m",
      "code": "cin >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set i to ( 8 * m ) + 1",
      "code": "i = ( 8 * m ) + 1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if integer casted square root of i * integer casted square root of i is i",
      "code": "if ( int ( sqrt ( i ) ) * int ( sqrt ( i ) ) == i )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) * ( int ) sqrt ( i ) == i )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int i = ( 8 * m ) + 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) ) * ( int ) sqrt ( i ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) * ( int ) sqrt ( i ) == i )",
        "int i = ( 8 * m ) + 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        4,
        3,
        6
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) * ( int ) sqrt ( i ) == i )",
        "int i = ( 8 * m ) + 1 ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        4,
        3,
        6,
        2
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) * ( int ) sqrt ( i ) == i )",
        "int i = ( 8 * m ) + 1 ;",
        "else else",
        "cin >> n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        4,
        3,
        6,
        1
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) * ( int ) sqrt ( i ) == i )",
        "int i = ( 8 * m ) + 1 ;",
        "else else",
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        4,
        3,
        2
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) * ( int ) sqrt ( i ) == i )",
        "int i = ( 8 * m ) + 1 ;",
        "cin >> n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        4,
        3,
        2,
        1
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) * ( int ) sqrt ( i ) == i )",
        "int i = ( 8 * m ) + 1 ;",
        "cin >> n ;",
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        4,
        3,
        1
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) * ( int ) sqrt ( i ) == i )",
        "int i = ( 8 * m ) + 1 ;",
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) * ( int ) sqrt ( i ) == i )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        6,
        2
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) * ( int ) sqrt ( i ) == i )",
        "else else",
        "cin >> n ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        6,
        2,
        1
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) * ( int ) sqrt ( i ) == i )",
        "else else",
        "cin >> n ;",
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        4,
        6,
        1
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) * ( int ) sqrt ( i ) == i )",
        "else else",
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) * ( int ) sqrt ( i ) == i )",
        "cin >> n ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        2,
        1
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) * ( int ) sqrt ( i ) == i )",
        "cin >> n ;",
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) * ( int ) sqrt ( i ) == i )",
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) ) * ( int ) sqrt ( i ) ;",
        "int i = ( 8 * m ) + 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        4,
        3,
        6
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) ) * ( int ) sqrt ( i ) ;",
        "int i = ( 8 * m ) + 1 ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        4,
        3,
        6,
        2
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) ) * ( int ) sqrt ( i ) ;",
        "int i = ( 8 * m ) + 1 ;",
        "else else",
        "cin >> n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        4,
        3,
        6,
        1
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) ) * ( int ) sqrt ( i ) ;",
        "int i = ( 8 * m ) + 1 ;",
        "else else",
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        4,
        3,
        2
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) ) * ( int ) sqrt ( i ) ;",
        "int i = ( 8 * m ) + 1 ;",
        "cin >> n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        4,
        3,
        2,
        1
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) ) * ( int ) sqrt ( i ) ;",
        "int i = ( 8 * m ) + 1 ;",
        "cin >> n ;",
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        4,
        3,
        1
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) ) * ( int ) sqrt ( i ) ;",
        "int i = ( 8 * m ) + 1 ;",
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) ) * ( int ) sqrt ( i ) ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        6,
        2
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) ) * ( int ) sqrt ( i ) ;",
        "else else",
        "cin >> n ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        6,
        2,
        1
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) ) * ( int ) sqrt ( i ) ;",
        "else else",
        "cin >> n ;",
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        4,
        6,
        1
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) ) * ( int ) sqrt ( i ) ;",
        "else else",
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) ) * ( int ) sqrt ( i ) ;",
        "cin >> n ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        2,
        1
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) ) * ( int ) sqrt ( i ) ;",
        "cin >> n ;",
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "if ( ( int ) sqrt ( ( int ) sqrt ( i ) ) * ( int ) sqrt ( i ) ;",
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "int i = ( 8 * m ) + 1 ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        3,
        6,
        2
      ],
      "mod_code": [
        "int i = ( 8 * m ) + 1 ;",
        "else else",
        "cin >> n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        3,
        6,
        2,
        1
      ],
      "mod_code": [
        "int i = ( 8 * m ) + 1 ;",
        "else else",
        "cin >> n ;",
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        3,
        6,
        1
      ],
      "mod_code": [
        "int i = ( 8 * m ) + 1 ;",
        "else else",
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int i = ( 8 * m ) + 1 ;",
        "cin >> n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        3,
        2,
        1
      ],
      "mod_code": [
        "int i = ( 8 * m ) + 1 ;",
        "cin >> n ;",
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "int i = ( 8 * m ) + 1 ;",
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "else else",
        "cin >> n ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        2,
        1
      ],
      "mod_code": [
        "else else",
        "cin >> n ;",
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "else else",
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "cin >> n ;",
        "int i , j , m , n , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int cnt’"
    }
  ]
}