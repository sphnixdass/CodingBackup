{
  "meta": {
    "index": 2689,
    "hitid": "3RWO3EJELH386BOG48Y2KY7KX1VP1W",
    "workerid": "A1APYLD4DUK33J",
    "probid": "12A",
    "subid": "48979449"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create 2d character array e with size 3 by 3",
      "code": "char e [ 3 ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integer flag with flag = 0",
      "code": "int flag = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for j = 0 to 3 exclusive , read e [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < 3 ; j ++ ) { cin >> e [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for j = 0 to 3 exclusive",
      "code": "for ( int j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if e [ i ] [ j ] is not e [ 2 - 1 ] [ 2 - j ] set flag to 1",
      "code": "if ( e [ i ] [ j ] != e [ 2 - i ] [ 2 - j ] ) flag = 1 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if flag is true",
      "code": "if ( flag )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char e [ 3 ] [ 3 3 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) flag = 1 ;",
        "char e [ 3 ] [ 3 3 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        7,
        1,
        5
      ],
      "mod_code": [
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) flag = 1 ;",
        "char e [ 3 ] [ 3 3 ] ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        7,
        1,
        5,
        6
      ],
      "mod_code": [
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) flag = 1 ;",
        "char e [ 3 ] [ 3 3 ] ;",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        7,
        1,
        5,
        3
      ],
      "mod_code": [
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) flag = 1 ;",
        "char e [ 3 ] [ 3 3 ] ;",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        7,
        1,
        6
      ],
      "mod_code": [
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) flag = 1 ;",
        "char e [ 3 ] [ 3 3 ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        7,
        1,
        6,
        3
      ],
      "mod_code": [
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) flag = 1 ;",
        "char e [ 3 ] [ 3 3 ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        7,
        1,
        3
      ],
      "mod_code": [
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) flag = 1 ;",
        "char e [ 3 ] [ 3 3 ] ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) flag = 1 ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        5,
        6
      ],
      "mod_code": [
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) flag = 1 ;",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        5,
        6,
        3
      ],
      "mod_code": [
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) flag = 1 ;",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        5,
        3
      ],
      "mod_code": [
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) flag = 1 ;",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) flag = 1 ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        6,
        3
      ],
      "mod_code": [
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) flag = 1 ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) flag = 1 ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "char e [ 3 ] [ 3 3 ] ;",
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) { flag = 1 ; }"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        7,
        5
      ],
      "mod_code": [
        "char e [ 3 ] [ 3 3 ] ;",
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) { flag = 1 ; }",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        7,
        5,
        6
      ],
      "mod_code": [
        "char e [ 3 ] [ 3 3 ] ;",
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) { flag = 1 ; }",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        7,
        5,
        3
      ],
      "mod_code": [
        "char e [ 3 ] [ 3 3 ] ;",
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) { flag = 1 ; }",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        7,
        6
      ],
      "mod_code": [
        "char e [ 3 ] [ 3 3 ] ;",
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) { flag = 1 ; }",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        7,
        6,
        3
      ],
      "mod_code": [
        "char e [ 3 ] [ 3 3 ] ;",
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) { flag = 1 ; }",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        7,
        3
      ],
      "mod_code": [
        "char e [ 3 ] [ 3 3 ] ;",
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) { flag = 1 ; }",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "char e [ 3 ] [ 3 3 ] ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        5,
        6
      ],
      "mod_code": [
        "char e [ 3 ] [ 3 3 ] ;",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        3
      ],
      "mod_code": [
        "char e [ 3 ] [ 3 3 ] ;",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        5,
        3
      ],
      "mod_code": [
        "char e [ 3 ] [ 3 3 ] ;",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "char e [ 3 ] [ 3 3 ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        6,
        3
      ],
      "mod_code": [
        "char e [ 3 ] [ 3 3 ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "char e [ 3 ] [ 3 3 ] ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) { flag = 1 ; }",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        5,
        6
      ],
      "mod_code": [
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) { flag = 1 ; }",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        5,
        6,
        3
      ],
      "mod_code": [
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) { flag = 1 ; }",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        5,
        3
      ],
      "mod_code": [
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) { flag = 1 ; }",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) { flag = 1 ; }",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        6,
        3
      ],
      "mod_code": [
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) { flag = 1 ; }",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "if ( e [ i ] [ j ] != e [ 2 - 1 ] [ 2 - j ] ) { flag = 1 ; }",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    }
  ]
}