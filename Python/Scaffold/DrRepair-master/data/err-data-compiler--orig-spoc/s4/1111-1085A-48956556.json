{
  "meta": {
    "index": 1111,
    "hitid": "3D3B8GE892LQVGRB8LDVZ4P3VSZ9PZ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1085A",
    "subid": "48956556"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare string variables decrypt and encrypt , with encrypt = \" \"",
      "code": "string decrypt , encrypt = \" \" ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read decrypt",
      "code": "cin >> decrypt ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "last , first and len are integers",
      "code": "int last , first , len ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "len = length of decrypt",
      "code": "len = decrypt . length ( ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if length of decrypt is 1",
      "code": "if ( decrypt . length ( ) == 1 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print decrypt and a new line",
      "code": "cout << decrypt << endl ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if len is even",
      "code": "if ( len % 2 == 0 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "last = length of decrypt - 1",
      "code": "last = decrypt . length ( ) - 1 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set value of first to 0",
      "code": "first = 0 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "last = 0",
      "code": "last = 0 ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "first = length of decrypt - 1",
      "code": "first = decrypt . length ( ) - 1 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if len is even",
      "code": "if ( len % 2 == 0 )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "while first is less than last",
      "code": "while ( first < last )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "increase encrypt by decrypt [ last ]",
      "code": "encrypt += decrypt [ last ] ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "increase encrypt by decrypt [ first ]",
      "code": "encrypt += decrypt [ first ] ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "increase first by one",
      "code": "first ++ ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "decrease last by one",
      "code": "last -- ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if last = first , add decrypt [ last ] to encrypt",
      "code": "if ( last == first ) { encrypt += decrypt [ last ] ; }",
      "indent": 2
    },
    {
      "line": 24,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 25,
      "text": "while first is greater than last",
      "code": "while ( first > last )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "increase encrypt by decrypt [ last ]",
      "code": "encrypt += decrypt [ last ] ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "increase encrypt by decrypt [ first ]",
      "code": "encrypt += decrypt [ first ] ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "increase last by one",
      "code": "last ++ ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "decrease first by one",
      "code": "first -- ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 31,
      "text": "if last = first increase encrypt by decrypt [ last ]",
      "code": "if ( last == first ) { encrypt += decrypt [ last ] ; }",
      "indent": 2
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 33,
      "text": "print all elements of encrypt in reverse order starting from the end",
      "code": "for ( int i = encrypt . length ( ) - 1 ; i >= 0 ; i -- ) { cout << encrypt [ i ] ; }",
      "indent": 1
    },
    {
      "line": 34,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int len = decrypt . length ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( decrypt ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int last , last , len ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int last’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "* first = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "encrypt += decrypt [ last ] [ last ] ;"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "encrypt += decrypt [ first ] [ first ] ;"
      ],
      "err_line": 19,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "encrypt += decrypt [ last ] [ last ] ;"
      ],
      "err_line": 26,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "encrypt += decrypt [ first ] [ first ] ;"
      ],
      "err_line": 27,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "int len = decrypt . length ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        1,
        4,
        33
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "int len = decrypt . length ( ) ;",
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        1,
        4,
        33,
        11
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "int len = decrypt . length ( ) ;",
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;",
        "* first = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        1,
        4,
        33,
        18
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "int len = decrypt . length ( ) ;",
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;",
        "encrypt += decrypt [ last ] [ last ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        1,
        4,
        33,
        17
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "int len = decrypt . length ( ) ;",
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;",
        "while ( first < first )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        1,
        4,
        11
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "int len = decrypt . length ( ) ;",
        "* first = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        1,
        4,
        11,
        18
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "int len = decrypt . length ( ) ;",
        "* first = 0 ;",
        "encrypt += decrypt [ last ] [ last ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        1,
        4,
        11,
        17
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "int len = decrypt . length ( ) ;",
        "* first = 0 ;",
        "while ( first < first )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        1,
        4,
        18
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "int len = decrypt . length ( ) ;",
        "encrypt += decrypt [ last ] [ last ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        1,
        4,
        18,
        17
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "int len = decrypt . length ( ) ;",
        "encrypt += decrypt [ last ] [ last ] ;",
        "while ( first < first )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        1,
        4,
        17
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "int len = decrypt . length ( ) ;",
        "while ( first < first )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        1,
        33,
        11
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;",
        "* first = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        1,
        33,
        11,
        18
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;",
        "* first = 0 ;",
        "encrypt += decrypt [ last ] [ last ] ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        1,
        33,
        11,
        17
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;",
        "* first = 0 ;",
        "while ( first < first )"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        1,
        33,
        18
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;",
        "encrypt += decrypt [ last ] [ last ] ;"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        33,
        18,
        17
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;",
        "encrypt += decrypt [ last ] [ last ] ;",
        "while ( first < first )"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "* first = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        1,
        11,
        18
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "* first = 0 ;",
        "encrypt += decrypt [ last ] [ last ] ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        1,
        11,
        18,
        17
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "* first = 0 ;",
        "encrypt += decrypt [ last ] [ last ] ;",
        "while ( first < first )"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        1,
        11,
        17
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "* first = 0 ;",
        "while ( first < first )"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "encrypt += decrypt [ last ] [ last ] ;"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        18,
        17
      ],
      "mod_code": [
        "string decrypt , encrypt = \" \" ;",
        "encrypt += decrypt [ last ] [ last ] ;",
        "while ( first < first )"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        33
      ],
      "mod_code": [
        "int len = decrypt . length ( ) ;",
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        4,
        33,
        11
      ],
      "mod_code": [
        "int len = decrypt . length ( ) ;",
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;",
        "* first = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        4,
        33,
        11,
        18
      ],
      "mod_code": [
        "int len = decrypt . length ( ) ;",
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;",
        "* first = 0 ;",
        "encrypt += decrypt [ last ] [ last ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        4,
        33,
        11,
        17
      ],
      "mod_code": [
        "int len = decrypt . length ( ) ;",
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;",
        "* first = 0 ;",
        "while ( first < first )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        4,
        33,
        18
      ],
      "mod_code": [
        "int len = decrypt . length ( ) ;",
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;",
        "encrypt += decrypt [ last ] [ last ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        4,
        33,
        18,
        17
      ],
      "mod_code": [
        "int len = decrypt . length ( ) ;",
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;",
        "encrypt += decrypt [ last ] [ last ] ;",
        "while ( first < first )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        4,
        33,
        17
      ],
      "mod_code": [
        "int len = decrypt . length ( ) ;",
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;",
        "while ( first < first )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "int len = decrypt . length ( ) ;",
        "* first = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        4,
        11,
        18
      ],
      "mod_code": [
        "int len = decrypt . length ( ) ;",
        "* first = 0 ;",
        "encrypt += decrypt [ last ] [ last ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        4,
        11,
        18,
        17
      ],
      "mod_code": [
        "int len = decrypt . length ( ) ;",
        "* first = 0 ;",
        "encrypt += decrypt [ last ] [ last ] ;",
        "while ( first < first )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        4,
        11,
        17
      ],
      "mod_code": [
        "int len = decrypt . length ( ) ;",
        "* first = 0 ;",
        "while ( first < first )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        4,
        18
      ],
      "mod_code": [
        "int len = decrypt . length ( ) ;",
        "encrypt += decrypt [ last ] [ last ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        4,
        18,
        17
      ],
      "mod_code": [
        "int len = decrypt . length ( ) ;",
        "encrypt += decrypt [ last ] [ last ] ;",
        "while ( first < first )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        4,
        17
      ],
      "mod_code": [
        "int len = decrypt . length ( ) ;",
        "while ( first < first )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int len’"
    },
    {
      "mod_line": [
        33,
        11
      ],
      "mod_code": [
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;",
        "* first = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        33,
        11,
        18
      ],
      "mod_code": [
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;",
        "* first = 0 ;",
        "encrypt += decrypt [ last ] [ last ] ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        33,
        11,
        18,
        17
      ],
      "mod_code": [
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;",
        "* first = 0 ;",
        "encrypt += decrypt [ last ] [ last ] ;",
        "while ( first < first )"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        33,
        11,
        17
      ],
      "mod_code": [
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;",
        "* first = 0 ;",
        "while ( first < first )"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        33,
        18
      ],
      "mod_code": [
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;",
        "encrypt += decrypt [ last ] [ last ] ;"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        33,
        18,
        17
      ],
      "mod_code": [
        "reverse ( encrypt . begin ( ) , encrypt . end ( ) ) ;",
        "encrypt += decrypt [ last ] [ last ] ;",
        "while ( first < first )"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        18
      ],
      "mod_code": [
        "* first = 0 ;",
        "encrypt += decrypt [ last ] [ last ] ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11,
        18,
        17
      ],
      "mod_code": [
        "* first = 0 ;",
        "encrypt += decrypt [ last ] [ last ] ;",
        "while ( first < first )"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11,
        17
      ],
      "mod_code": [
        "* first = 0 ;",
        "while ( first < first )"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        18,
        17
      ],
      "mod_code": [
        "encrypt += decrypt [ last ] [ last ] ;",
        "while ( first < first )"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    }
  ]
}