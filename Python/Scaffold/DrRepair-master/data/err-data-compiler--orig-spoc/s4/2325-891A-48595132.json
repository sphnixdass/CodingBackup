{
  "meta": {
    "index": 2325,
    "hitid": "3RIHDBQ1NESDPJCHEH9VVHTW90VMH5",
    "workerid": "A1APYLD4DUK33J",
    "probid": "891A",
    "subid": "48595132"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare pair1 with long long integer array ar , long long integer n as arguments , returning long long integer",
      "code": "long long int pair1 ( long long int ar [ ] , long long int n )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long long integers x , cnt , id , with cnt = 0 , id = - 1",
      "code": "long long int x , cnt = 0 , id = - 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 1 to n exclusive",
      "code": "for ( long long int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set x to result of run __gcd with ar [ i - 1 ] , ar [ i ] as arguments",
      "code": "x = __gcd ( ar [ i - 1 ] , ar [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "if ar [ i ] is ar [ i - 1 ] and ar [ i ] is not 1 , break current loop iteration",
      "code": "if ( ar [ i ] == ar [ i - 1 ] && ar [ i ] != 1 ) continue ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if ar [ i - 1 ] is not 1 or ar [ i ] is not 1 increment cnt",
      "code": "if ( ar [ i - 1 ] != 1 || ar [ i ] != 1 ) cnt ++ ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if ar [ i ] is not 1",
      "code": "if ( ar [ i ] != 1 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set ar [ i ] to x",
      "code": "ar [ i ] = x ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set ar [ i - 1 ] to x",
      "code": "ar [ i - 1 ] = x ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if x is 1",
      "code": "if ( x == 1 )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set id to i",
      "code": "id = i ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "break current loop iteration",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if id is - 1 , return - 1 from function",
      "code": "if ( id == - 1 ) return - 1 ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for i = id to n exclusive",
      "code": "for ( long long int i = id ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if ar [ i ] is not 1 , increment cnt",
      "code": "if ( ar [ i ] != 1 ) cnt ++ ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i = 0 to id exclusive",
      "code": "for ( long long int i = 0 ; i < id ; i ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if ar [ i ] is not 1 , increment cnt",
      "code": "if ( ar [ i ] != 1 ) cnt ++ ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "return cnt from function",
      "code": "return cnt ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 24,
      "text": "declare solve with long long integer array ar , long long integer n",
      "code": "long long int solve ( long long int ar [ ] , long long int n )",
      "indent": 0
    },
    {
      "line": 25,
      "text": "create long long integers x , cnt , id , with cnt = 0 , id = - 1",
      "code": "long long int x , cnt = 0 , id = - 1 ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "for i = 1 to n exclusive",
      "code": "for ( long long int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 27,
      "text": "set x to result of run __gcd with ar [ i - 1 ] , ar [ i ] as arguments",
      "code": "x = __gcd ( ar [ i - 1 ] , ar [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "if x is 1",
      "code": "if ( x == 1 )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "if ar [ i ] is not 1",
      "code": "if ( ar [ i ] != 1 )",
      "indent": 3
    },
    {
      "line": 30,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 31,
      "text": "set ar [ i ] to x",
      "code": "ar [ i ] = x ;",
      "indent": 4
    },
    {
      "line": 32,
      "text": "set id to i",
      "code": "id = i ;",
      "indent": 4
    },
    {
      "line": 33,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 34,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 35,
      "text": "set ar [ i - 1 ] to x",
      "code": "ar [ i - 1 ] = x ;",
      "indent": 4
    },
    {
      "line": 36,
      "text": "set id to i - 1",
      "code": "id = i - 1 ;",
      "indent": 4
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 38,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 41,
      "text": "if id is - 1 return - 1 from function",
      "code": "if ( id == - 1 ) return - 1 ;",
      "indent": 1
    },
    {
      "line": 42,
      "text": "for i = 0 to id exclusive",
      "code": "for ( long long int i = 0 ; i < id ; i ++ )",
      "indent": 1
    },
    {
      "line": 43,
      "text": "if ar [ i ] is not 1 , increment cnt",
      "code": "if ( ar [ i ] != 1 ) cnt ++ ;",
      "indent": 2
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 45,
      "text": "for i = id to n exclusive",
      "code": "for ( long long int i = id ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 46,
      "text": "if ar [ i ] is not 1 , increment cnt",
      "code": "if ( ar [ i ] != 1 ) cnt ++ ;",
      "indent": 2
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 48,
      "text": "return cnt from function",
      "code": "return cnt ;",
      "indent": 1
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 51,
      "text": "create long long integers n , cnt , id with cnt = 0 , id = - 1",
      "code": "long long int n , cnt = 0 , id = - 1 ;",
      "indent": 1
    },
    {
      "line": 52,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 53,
      "text": "create long long integer array ar with size n",
      "code": "long long int ar [ n ] ;",
      "indent": 1
    },
    {
      "line": 54,
      "text": "for i = 0 to n exclusive",
      "code": "for ( long long int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 55,
      "text": "read ar [ i ]",
      "code": "cin >> ar [ i ] ;",
      "indent": 2
    },
    {
      "line": 56,
      "text": "if ar [ i ] is 1 , set id to i",
      "code": "if ( ar [ i ] == 1 ) id = i ;",
      "indent": 2
    },
    {
      "line": 57,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 58,
      "text": "if id is not - 1",
      "code": "if ( id != - 1 )",
      "indent": 1
    },
    {
      "line": 59,
      "text": "for i = 0 to id exclusive",
      "code": "for ( long long int i = 0 ; i < id ; i ++ )",
      "indent": 2
    },
    {
      "line": 60,
      "text": "if ar [ i ] is not 1 , increment cnt",
      "code": "if ( ar [ i ] != 1 ) cnt ++ ;",
      "indent": 3
    },
    {
      "line": 61,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 62,
      "text": "for i = id to n exclusive",
      "code": "for ( long long int i = id ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 63,
      "text": "if ar [ i ] is not 1 , increment cnt",
      "code": "if ( ar [ i ] != 1 ) cnt ++ ;",
      "indent": 3
    },
    {
      "line": 64,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 65,
      "text": "print cnt print newline",
      "code": "cout << cnt << endl ;",
      "indent": 2
    },
    {
      "line": 66,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 67,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 68,
      "text": "create long long integer x with x = result of run solve with ar , n as arguments",
      "code": "long long int x = solve ( ar , n ) ;",
      "indent": 1
    },
    {
      "line": 69,
      "text": "if x is not - 1",
      "code": "if ( x != - 1 )",
      "indent": 1
    },
    {
      "line": 70,
      "text": "print x print newline",
      "code": "cout << x << endl ;",
      "indent": 2
    },
    {
      "line": 71,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 72,
      "text": "print result of run pair1 with ar , n as arguments , print newline",
      "code": "cout << pair1 ( ar , n ) << endl ;",
      "indent": 2
    },
    {
      "line": 73,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 74,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "x = __gcd [ ar - 1 ] , ar [ i ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘<unresolved overloaded function type>[long long int*]’ for array subscript"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "ar [ i ] ] = x ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( x == l )"
      ],
      "err_line": 10,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( i = 0 ; i < id ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "return cnt cnt ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘cnt’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "bool solve ( long long int ar [ ] , long long int n ) ;"
      ],
      "err_line": 25,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "x = __gcd [ ar - 1 ] , ar [ i ] ) ;"
      ],
      "err_line": 27,
      "err_msg": "invalid types ‘<unresolved overloaded function type>[long long int*]’ for array subscript"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "if ( x == l )"
      ],
      "err_line": 28,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "ar [ i ] ] = x ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 38,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "for ( i = 0 ; i < id ; i ++ )"
      ],
      "err_line": 42,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        45
      ],
      "mod_code": [
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 45,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        48
      ],
      "mod_code": [
        "return cnt cnt ;"
      ],
      "err_line": 48,
      "err_msg": "expected ‘;’ before ‘cnt’"
    },
    {
      "mod_line": [
        52
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 55,
      "err_msg": "‘ar’ was not declared in this scope"
    },
    {
      "mod_line": [
        54
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 54,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        55
      ],
      "mod_code": [
        "ar >> ar [ i ] ;"
      ],
      "err_line": 55,
      "err_msg": "invalid operands of types ‘long long int [n]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        59
      ],
      "mod_code": [
        "for ( i = 0 ; i < id ; i ++ )"
      ],
      "err_line": 59,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        62
      ],
      "mod_code": [
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 62,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        71
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 71,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        0,
        24
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "bool solve ( long long int ar [ ] , long long int n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        24,
        38
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "bool solve ( long long int ar [ ] , long long int n )",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        24,
        38,
        71
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "bool solve ( long long int ar [ ] , long long int n )",
        "break break ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        24,
        38,
        52
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "bool solve ( long long int ar [ ] , long long int n )",
        "break break ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        24,
        38,
        62
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "bool solve ( long long int ar [ ] , long long int n )",
        "break break ;",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        24,
        71
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "bool solve ( long long int ar [ ] , long long int n )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        24,
        71,
        52
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "bool solve ( long long int ar [ ] , long long int n )",
        "else else",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        24,
        71,
        62
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "bool solve ( long long int ar [ ] , long long int n )",
        "else else",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        24,
        52
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "bool solve ( long long int ar [ ] , long long int n )",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        24,
        52,
        62
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "bool solve ( long long int ar [ ] , long long int n )",
        "while ( cin >> n )",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        24,
        62
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "bool solve ( long long int ar [ ] , long long int n )",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        38
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        38,
        71
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "break break ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        38,
        71,
        52
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "break break ;",
        "else else",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        38,
        71,
        62
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "break break ;",
        "else else",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        38,
        52
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "break break ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        38,
        52,
        62
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "break break ;",
        "while ( cin >> n )",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        38,
        62
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "break break ;",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        71
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        71,
        52
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "else else",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        71,
        52,
        62
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "else else",
        "while ( cin >> n )",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        71,
        62
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "else else",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        52
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        52,
        62
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "while ( cin >> n )",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        62
      ],
      "mod_code": [
        "long long int pair1 ( long long int ar [ ] , long long int n ) ;",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        24,
        38
      ],
      "mod_code": [
        "bool solve ( long long int ar [ ] , long long int n )",
        "break break ;"
      ],
      "err_line": 38,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        24,
        38,
        71
      ],
      "mod_code": [
        "bool solve ( long long int ar [ ] , long long int n )",
        "break break ;",
        "else else"
      ],
      "err_line": 38,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        24,
        38,
        71,
        52
      ],
      "mod_code": [
        "bool solve ( long long int ar [ ] , long long int n )",
        "break break ;",
        "else else",
        "while ( cin >> n )"
      ],
      "err_line": 38,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        24,
        38,
        71,
        62
      ],
      "mod_code": [
        "bool solve ( long long int ar [ ] , long long int n )",
        "break break ;",
        "else else",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 38,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        24,
        38,
        52
      ],
      "mod_code": [
        "bool solve ( long long int ar [ ] , long long int n )",
        "break break ;",
        "while ( cin >> n )"
      ],
      "err_line": 38,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        24,
        38,
        52,
        62
      ],
      "mod_code": [
        "bool solve ( long long int ar [ ] , long long int n )",
        "break break ;",
        "while ( cin >> n )",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 38,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        24,
        38,
        62
      ],
      "mod_code": [
        "bool solve ( long long int ar [ ] , long long int n )",
        "break break ;",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 38,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        24,
        71
      ],
      "mod_code": [
        "bool solve ( long long int ar [ ] , long long int n )",
        "else else"
      ],
      "err_line": 71,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        24,
        71,
        52
      ],
      "mod_code": [
        "bool solve ( long long int ar [ ] , long long int n )",
        "else else",
        "while ( cin >> n )"
      ],
      "err_line": 55,
      "err_msg": "‘ar’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        71,
        52,
        62
      ],
      "mod_code": [
        "bool solve ( long long int ar [ ] , long long int n )",
        "else else",
        "while ( cin >> n )",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 55,
      "err_msg": "‘ar’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        71,
        62
      ],
      "mod_code": [
        "bool solve ( long long int ar [ ] , long long int n )",
        "else else",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 62,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        24,
        52
      ],
      "mod_code": [
        "bool solve ( long long int ar [ ] , long long int n )",
        "while ( cin >> n )"
      ],
      "err_line": 55,
      "err_msg": "‘ar’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        52,
        62
      ],
      "mod_code": [
        "bool solve ( long long int ar [ ] , long long int n )",
        "while ( cin >> n )",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 55,
      "err_msg": "‘ar’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        62
      ],
      "mod_code": [
        "bool solve ( long long int ar [ ] , long long int n )",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 62,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        38,
        71
      ],
      "mod_code": [
        "break break ;",
        "else else"
      ],
      "err_line": 38,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        38,
        71,
        52
      ],
      "mod_code": [
        "break break ;",
        "else else",
        "while ( cin >> n )"
      ],
      "err_line": 38,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        38,
        71,
        52,
        62
      ],
      "mod_code": [
        "break break ;",
        "else else",
        "while ( cin >> n )",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 38,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        38,
        71,
        62
      ],
      "mod_code": [
        "break break ;",
        "else else",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 38,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        38,
        52
      ],
      "mod_code": [
        "break break ;",
        "while ( cin >> n )"
      ],
      "err_line": 38,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        38,
        52,
        62
      ],
      "mod_code": [
        "break break ;",
        "while ( cin >> n )",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 38,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        38,
        62
      ],
      "mod_code": [
        "break break ;",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 38,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        71,
        52
      ],
      "mod_code": [
        "else else",
        "while ( cin >> n )"
      ],
      "err_line": 55,
      "err_msg": "‘ar’ was not declared in this scope"
    },
    {
      "mod_line": [
        71,
        52,
        62
      ],
      "mod_code": [
        "else else",
        "while ( cin >> n )",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 55,
      "err_msg": "‘ar’ was not declared in this scope"
    },
    {
      "mod_line": [
        71,
        62
      ],
      "mod_code": [
        "else else",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 62,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        52,
        62
      ],
      "mod_code": [
        "while ( cin >> n )",
        "for ( i = id ; i < n ; i ++ )"
      ],
      "err_line": 55,
      "err_msg": "‘ar’ was not declared in this scope"
    }
  ]
}