{
  "meta": {
    "index": 1794,
    "hitid": "33QQ60S6ASCLRRBUPBTWGZB91SWU0E",
    "workerid": "AIWEXPJAU66D9",
    "probid": "761A",
    "subid": "48962472"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant integer MAX with value 100001",
      "code": "const int MAX = 100001 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer arrays An and Bn with size MAX",
      "code": "int An [ MAX ] , Bn [ MAX ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare new int variables a and b",
      "code": "int a , b ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read variables a and b from the input",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if abs ( a - b ) < = 1",
      "code": "if ( abs ( a - b ) <= 1 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if a and b are both 0",
      "code": "if ( a == 0 && b == 0 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print \" YES \" to the output",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const int MAX = * 100001 ;"
      ],
      "err_line": 0,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int a , b b ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "int a , b b ;",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        3,
        10,
        5
      ],
      "mod_code": [
        "int a , b b ;",
        "else ;",
        "if ( abs ( a - b ) )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        3,
        10,
        5,
        0
      ],
      "mod_code": [
        "int a , b b ;",
        "else ;",
        "if ( abs ( a - b ) )",
        "const int MAX = * 100001 ;"
      ],
      "err_line": 0,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        10,
        5,
        9
      ],
      "mod_code": [
        "int a , b b ;",
        "else ;",
        "if ( abs ( a - b ) )",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        3,
        10,
        0
      ],
      "mod_code": [
        "int a , b b ;",
        "else ;",
        "const int MAX = * 100001 ;"
      ],
      "err_line": 0,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        10,
        0,
        9
      ],
      "mod_code": [
        "int a , b b ;",
        "else ;",
        "const int MAX = * 100001 ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        10,
        9
      ],
      "mod_code": [
        "int a , b b ;",
        "else ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "int a , b b ;",
        "if ( abs ( a - b ) )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        3,
        5,
        0
      ],
      "mod_code": [
        "int a , b b ;",
        "if ( abs ( a - b ) )",
        "const int MAX = * 100001 ;"
      ],
      "err_line": 0,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        5,
        0,
        9
      ],
      "mod_code": [
        "int a , b b ;",
        "if ( abs ( a - b ) )",
        "const int MAX = * 100001 ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        5,
        9
      ],
      "mod_code": [
        "int a , b b ;",
        "if ( abs ( a - b ) )",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        3,
        0
      ],
      "mod_code": [
        "int a , b b ;",
        "const int MAX = * 100001 ;"
      ],
      "err_line": 0,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        0,
        9
      ],
      "mod_code": [
        "int a , b b ;",
        "const int MAX = * 100001 ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "int a , b b ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        10,
        5,
        0
      ],
      "mod_code": [
        "else ;",
        "if ( abs ( a - b ) )",
        "const int MAX = * 100001 ;"
      ],
      "err_line": 0,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        5,
        0,
        9
      ],
      "mod_code": [
        "else ;",
        "if ( abs ( a - b ) )",
        "const int MAX = * 100001 ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "else ;",
        "const int MAX = * 100001 ;"
      ],
      "err_line": 0,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        0,
        9
      ],
      "mod_code": [
        "else ;",
        "const int MAX = * 100001 ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        5,
        0
      ],
      "mod_code": [
        "if ( abs ( a - b ) )",
        "const int MAX = * 100001 ;"
      ],
      "err_line": 0,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        5,
        0,
        9
      ],
      "mod_code": [
        "if ( abs ( a - b ) )",
        "const int MAX = * 100001 ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "const int MAX = * 100001 ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    }
  ]
}