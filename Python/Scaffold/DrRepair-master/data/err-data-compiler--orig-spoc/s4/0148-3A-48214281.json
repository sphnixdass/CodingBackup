{
  "meta": {
    "index": 148,
    "hitid": "3087LXLJ6MAW89E4UMYXUZA6Q330F2",
    "workerid": "A1APYLD4DUK33J",
    "probid": "3A",
    "subid": "48214281"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create strings s1 , s2",
      "code": "string s1 , s2 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s1 read s2",
      "code": "cin >> s1 >> s2 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integers x1 , y1",
      "code": "int x1 , y1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integers x2 , y2",
      "code": "int x2 , y2 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set x1 to s1 [ 0 ] - ' a '",
      "code": "x1 = s1 [ 0 ] - ' a ' ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set y1 to s1 [ 1 ] - ' 1 '",
      "code": "y1 = s1 [ 1 ] - ' 1 ' ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set x2 to s2 [ 0 ] - ' a '",
      "code": "x2 = s2 [ 0 ] - ' a ' ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set y2 to s2 [ 0 ] - ' 1 '",
      "code": "y2 = s2 [ 1 ] - ' 1 ' ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "increment count by 0",
      "code": "int count = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "create string array str with size 1000",
      "code": "string str [ 1000 ] ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "while x1 is not x2 or y1 is not y2",
      "code": "while ( x1 != x2 || y1 != y2 )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if x1 is greater than x2 and y1 is greater than y2",
      "code": "if ( x1 > x2 && y1 > y2 )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set str [ count ] to \" LD \"",
      "code": "str [ count ] = \" LD \" ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "increment count",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "decrement y1",
      "code": "y1 -- ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "decrement x1",
      "code": "x1 -- ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else if x1 is less than x2 and y1 is greater than y2",
      "code": "else if ( x1 < x2 && y1 > y2 )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "set str [ count ] to \" RD \"",
      "code": "str [ count ] = \" RD \" ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "increment count",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "decrement y1",
      "code": "y1 -- ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "increment x1",
      "code": "x1 ++ ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "else if x1 is greater than x2 and y1 is less than y2",
      "code": "else if ( x1 > x2 && y1 < y2 )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "set str [ count ] is \" LU \"",
      "code": "str [ count ] = \" LU \" ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "increment count",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "decrement x1",
      "code": "x1 -- ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "increment y1",
      "code": "y1 ++ ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "else if x1 is less than x2 and y1 is less than y2",
      "code": "else if ( x1 < x2 && y1 < y2 )",
      "indent": 2
    },
    {
      "line": 28,
      "text": "set str [ count ] to \" RU \"",
      "code": "str [ count ] = \" RU \" ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "increment count",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "increment x1",
      "code": "x1 ++ ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "increment y1",
      "code": "y1 ++ ;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "else if x1 is x2 and y1 is greater than y2",
      "code": "else if ( x1 == x2 && y1 > y2 )",
      "indent": 2
    },
    {
      "line": 33,
      "text": "set str [ count ] to \" D \"",
      "code": "str [ count ] = \" D \" ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "increment count",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "decrement y1",
      "code": "y1 -- ;",
      "indent": 3
    },
    {
      "line": 36,
      "text": "else if x1 is x2 and y1 is less than y2",
      "code": "else if ( x1 == x2 && y1 < y2 )",
      "indent": 2
    },
    {
      "line": 37,
      "text": "set str [ count ] to \" U \"",
      "code": "str [ count ] = \" U \" ;",
      "indent": 3
    },
    {
      "line": 38,
      "text": "increment count",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 39,
      "text": "increment y1",
      "code": "y1 ++ ;",
      "indent": 3
    },
    {
      "line": 40,
      "text": "else if x1 is greater than x2 and y1 is y2",
      "code": "else if ( x1 > x2 && y1 == y2 )",
      "indent": 2
    },
    {
      "line": 41,
      "text": "set str [ count ] to \" L \"",
      "code": "str [ count ] = \" L \" ;",
      "indent": 3
    },
    {
      "line": 42,
      "text": "increment count",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 43,
      "text": "decrement x1",
      "code": "x1 -- ;",
      "indent": 3
    },
    {
      "line": 44,
      "text": "else if x1 is less than x2 and y1 is y2",
      "code": "else if ( x1 < x2 && y1 == y2 )",
      "indent": 2
    },
    {
      "line": 45,
      "text": "set str [ count ] to \" R \"",
      "code": "str [ count ] = \" R \" ;",
      "indent": 3
    },
    {
      "line": 46,
      "text": "increment count",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 47,
      "text": "increment x1",
      "code": "x1 ++ ;",
      "indent": 3
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 50,
      "text": "print count print newline",
      "code": "cout << count << endl ;",
      "indent": 1
    },
    {
      "line": 51,
      "text": "for i = 0 to count exclusive , print str [ i ] print newline",
      "code": "for ( int i = 0 ; i < count ; i ++ ) { cout << str [ i ] << endl ; }",
      "indent": 1
    },
    {
      "line": 52,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "count += 0 ;"
      ],
      "err_line": 9,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "s1 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s1 >> s1 >> s2 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int x1 = s1 [ 0 ] - ' a ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int x1’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int y1 = s1 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "count += ' 0 ' ;"
      ],
      "err_line": 9,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "char str [ 1000 ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "str [ count ] = ' D \" ;"
      ],
      "err_line": 33,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "str [ count ] = ' U \" ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "str [ count ] = ' L \" ;"
      ],
      "err_line": 41,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "y2 = s2 [ 0 ] - ' 1 ' ;",
        "count += 0 ;"
      ],
      "err_line": 9,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        8,
        9,
        37
      ],
      "mod_code": [
        "y2 = s2 [ 0 ] - ' 1 ' ;",
        "count += 0 ;",
        "str [ count ] = ' U \" ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        9,
        37,
        6
      ],
      "mod_code": [
        "y2 = s2 [ 0 ] - ' 1 ' ;",
        "count += 0 ;",
        "str [ count ] = ' U \" ;",
        "int y1 = s1 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        9,
        37,
        18
      ],
      "mod_code": [
        "y2 = s2 [ 0 ] - ' 1 ' ;",
        "count += 0 ;",
        "str [ count ] = ' U \" ;",
        "str [ count ] = \" \\0 \" ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        9,
        6
      ],
      "mod_code": [
        "y2 = s2 [ 0 ] - ' 1 ' ;",
        "count += 0 ;",
        "int y1 = s1 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        8,
        9,
        6,
        18
      ],
      "mod_code": [
        "y2 = s2 [ 0 ] - ' 1 ' ;",
        "count += 0 ;",
        "int y1 = s1 [ 1 ] - ' 1 ' ;",
        "str [ count ] = \" \\0 \" ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        8,
        9,
        18
      ],
      "mod_code": [
        "y2 = s2 [ 0 ] - ' 1 ' ;",
        "count += 0 ;",
        "str [ count ] = \" \\0 \" ;"
      ],
      "err_line": 9,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        8,
        37
      ],
      "mod_code": [
        "y2 = s2 [ 0 ] - ' 1 ' ;",
        "str [ count ] = ' U \" ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        37,
        6
      ],
      "mod_code": [
        "y2 = s2 [ 0 ] - ' 1 ' ;",
        "str [ count ] = ' U \" ;",
        "int y1 = s1 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        37,
        6,
        18
      ],
      "mod_code": [
        "y2 = s2 [ 0 ] - ' 1 ' ;",
        "str [ count ] = ' U \" ;",
        "int y1 = s1 [ 1 ] - ' 1 ' ;",
        "str [ count ] = \" \\0 \" ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        37,
        18
      ],
      "mod_code": [
        "y2 = s2 [ 0 ] - ' 1 ' ;",
        "str [ count ] = ' U \" ;",
        "str [ count ] = \" \\0 \" ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "y2 = s2 [ 0 ] - ' 1 ' ;",
        "int y1 = s1 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        8,
        6,
        18
      ],
      "mod_code": [
        "y2 = s2 [ 0 ] - ' 1 ' ;",
        "int y1 = s1 [ 1 ] - ' 1 ' ;",
        "str [ count ] = \" \\0 \" ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        9,
        37
      ],
      "mod_code": [
        "count += 0 ;",
        "str [ count ] = ' U \" ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        37,
        6
      ],
      "mod_code": [
        "count += 0 ;",
        "str [ count ] = ' U \" ;",
        "int y1 = s1 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        37,
        6,
        18
      ],
      "mod_code": [
        "count += 0 ;",
        "str [ count ] = ' U \" ;",
        "int y1 = s1 [ 1 ] - ' 1 ' ;",
        "str [ count ] = \" \\0 \" ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        37,
        6,
        8
      ],
      "mod_code": [
        "count += 0 ;",
        "str [ count ] = ' U \" ;",
        "int y1 = s1 [ 1 ] - ' 1 ' ;",
        "y2 = ( s2 [ 0 ] - ' 1 ' ) ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        37,
        18
      ],
      "mod_code": [
        "count += 0 ;",
        "str [ count ] = ' U \" ;",
        "str [ count ] = \" \\0 \" ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        37,
        18,
        8
      ],
      "mod_code": [
        "count += 0 ;",
        "str [ count ] = ' U \" ;",
        "str [ count ] = \" \\0 \" ;",
        "y2 = ( s2 [ 0 ] - ' 1 ' ) ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        37,
        8
      ],
      "mod_code": [
        "count += 0 ;",
        "str [ count ] = ' U \" ;",
        "y2 = ( s2 [ 0 ] - ' 1 ' ) ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "count += 0 ;",
        "int y1 = s1 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        9,
        6,
        18
      ],
      "mod_code": [
        "count += 0 ;",
        "int y1 = s1 [ 1 ] - ' 1 ' ;",
        "str [ count ] = \" \\0 \" ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        9,
        6,
        18,
        8
      ],
      "mod_code": [
        "count += 0 ;",
        "int y1 = s1 [ 1 ] - ' 1 ' ;",
        "str [ count ] = \" \\0 \" ;",
        "y2 = ( s2 [ 0 ] - ' 1 ' ) ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        9,
        6,
        8
      ],
      "mod_code": [
        "count += 0 ;",
        "int y1 = s1 [ 1 ] - ' 1 ' ;",
        "y2 = ( s2 [ 0 ] - ' 1 ' ) ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        9,
        18
      ],
      "mod_code": [
        "count += 0 ;",
        "str [ count ] = \" \\0 \" ;"
      ],
      "err_line": 9,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        9,
        18,
        8
      ],
      "mod_code": [
        "count += 0 ;",
        "str [ count ] = \" \\0 \" ;",
        "y2 = ( s2 [ 0 ] - ' 1 ' ) ;"
      ],
      "err_line": 9,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "count += 0 ;",
        "y2 = ( s2 [ 0 ] - ' 1 ' ) ;"
      ],
      "err_line": 9,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        37,
        6
      ],
      "mod_code": [
        "str [ count ] = ' U \" ;",
        "int y1 = s1 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        37,
        6,
        18
      ],
      "mod_code": [
        "str [ count ] = ' U \" ;",
        "int y1 = s1 [ 1 ] - ' 1 ' ;",
        "str [ count ] = \" \\0 \" ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        37,
        6,
        18,
        8
      ],
      "mod_code": [
        "str [ count ] = ' U \" ;",
        "int y1 = s1 [ 1 ] - ' 1 ' ;",
        "str [ count ] = \" \\0 \" ;",
        "y2 = ( s2 [ 0 ] - ' 1 ' ) ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        37,
        6,
        8
      ],
      "mod_code": [
        "str [ count ] = ' U \" ;",
        "int y1 = s1 [ 1 ] - ' 1 ' ;",
        "y2 = ( s2 [ 0 ] - ' 1 ' ) ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        37,
        18
      ],
      "mod_code": [
        "str [ count ] = ' U \" ;",
        "str [ count ] = \" \\0 \" ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        37,
        18,
        8
      ],
      "mod_code": [
        "str [ count ] = ' U \" ;",
        "str [ count ] = \" \\0 \" ;",
        "y2 = ( s2 [ 0 ] - ' 1 ' ) ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        37,
        8
      ],
      "mod_code": [
        "str [ count ] = ' U \" ;",
        "y2 = ( s2 [ 0 ] - ' 1 ' ) ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        18
      ],
      "mod_code": [
        "int y1 = s1 [ 1 ] - ' 1 ' ;",
        "str [ count ] = \" \\0 \" ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        6,
        18,
        8
      ],
      "mod_code": [
        "int y1 = s1 [ 1 ] - ' 1 ' ;",
        "str [ count ] = \" \\0 \" ;",
        "y2 = ( s2 [ 0 ] - ' 1 ' ) ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "int y1 = s1 [ 1 ] - ' 1 ' ;",
        "y2 = ( s2 [ 0 ] - ' 1 ' ) ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int y1’"
    }
  ]
}