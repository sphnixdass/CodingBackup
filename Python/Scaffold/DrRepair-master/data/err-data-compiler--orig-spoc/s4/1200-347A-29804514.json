{
  "meta": {
    "index": 1200,
    "hitid": "3L2OEKSTW94KQP02UG30CZN4GEIY82",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "347A",
    "subid": "29804514"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , i = int",
      "code": "int n , i ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while read n",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "arr and res = array of 110 int filled with 0 , max = - 10000 , min = 10000 , p_max , p_min and k = int",
      "code": "int arr [ 110 ] = { 0 } , max = - 10000 , min = 10000 , p_max , p_min , res [ 110 ] = { 0 } , k ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "read arr [ 0 ]",
      "code": "cin >> arr [ 0 ] ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "max = min = arr [ 0 ]",
      "code": "max = min = arr [ 0 ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "p_max = p_min = 0",
      "code": "p_max = p_min = 0 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for i = 1 to n exclusive",
      "code": "for ( i = 1 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "read arr [ i ]",
      "code": "cin >> arr [ i ] ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if arr [ i ] < min",
      "code": "if ( arr [ i ] < min )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "min = arr [ i ]",
      "code": "min = arr [ i ] ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "p_min = i",
      "code": "p_min = i ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "else if arr [ i ] > max",
      "code": "else if ( arr [ i ] > max )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "max = arr [ i ]",
      "code": "max = arr [ i ] ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "p_max = i",
      "code": "p_max = i ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "k = 0",
      "code": "k = 0 ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if i is p_min or p_max continue",
      "code": "if ( i == p_min || i == p_max ) continue ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "res [ k ] = arr [ i ] , increment k",
      "code": "res [ k ++ ] = arr [ i ] ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "sort first k items of res",
      "code": "sort ( res , res + k ) ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if p_max is not p_min print max , space",
      "code": "if ( p_max != p_min ) cout << max << \" \" ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "for i = 0 to k exclusive print res [ i ] , space",
      "code": "for ( i = 0 ; i < k ; i ++ ) cout << res [ i ] << \" \" ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "print min",
      "code": "cout << min << endl ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int p_max = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int p_max’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , i , i ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int arr [ 110 ] , res [ 110 ] , min = - 10000 , min = - 10000 , p_max , k ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "arr >> arr [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [110]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "int k = 0 ;"
      ],
      "err_line": 17,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "sort ( res . begin ( ) , k . end ( ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "request for member ‘begin’ in ‘res’, which is of non-class type ‘int [110]’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "int p_max = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        6,
        19
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "int p_max = 0 ;",
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        6,
        19,
        10
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "int p_max = 0 ;",
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;",
        "char min = arr [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        6,
        19,
        8
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "int p_max = 0 ;",
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        6,
        19,
        12
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "int p_max = 0 ;",
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        6,
        10
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "int p_max = 0 ;",
        "char min = arr [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        6,
        10,
        8
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "int p_max = 0 ;",
        "char min = arr [ i ] ;",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        6,
        10,
        12
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "int p_max = 0 ;",
        "char min = arr [ i ] ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        6,
        8
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "int p_max = 0 ;",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        6,
        8,
        12
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "int p_max = 0 ;",
        "arr >> arr [ i ] ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        6,
        12
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "int p_max = 0 ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        19
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        19,
        10
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;",
        "char min = arr [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        19,
        10,
        8
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;",
        "char min = arr [ i ] ;",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        19,
        10,
        12
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;",
        "char min = arr [ i ] ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        19,
        8
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        19,
        8,
        12
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;",
        "arr >> arr [ i ] ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        19,
        12
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "char min = arr [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        10,
        8
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "char min = arr [ i ] ;",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        10,
        8,
        12
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "char min = arr [ i ] ;",
        "arr >> arr [ i ] ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        10,
        12
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "char min = arr [ i ] ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        8,
        12
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "arr >> arr [ i ] ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "int arr [ 110 ] , max [ 110 ] , min = - 10000 , min = - 10000 , p_max , k , k ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        6,
        19
      ],
      "mod_code": [
        "int p_max = 0 ;",
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int p_max’"
    },
    {
      "mod_line": [
        6,
        19,
        10
      ],
      "mod_code": [
        "int p_max = 0 ;",
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;",
        "char min = arr [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int p_max’"
    },
    {
      "mod_line": [
        6,
        19,
        10,
        8
      ],
      "mod_code": [
        "int p_max = 0 ;",
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;",
        "char min = arr [ i ] ;",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int p_max’"
    },
    {
      "mod_line": [
        6,
        19,
        10,
        12
      ],
      "mod_code": [
        "int p_max = 0 ;",
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;",
        "char min = arr [ i ] ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int p_max’"
    },
    {
      "mod_line": [
        6,
        19,
        8
      ],
      "mod_code": [
        "int p_max = 0 ;",
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int p_max’"
    },
    {
      "mod_line": [
        6,
        19,
        8,
        12
      ],
      "mod_code": [
        "int p_max = 0 ;",
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;",
        "arr >> arr [ i ] ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int p_max’"
    },
    {
      "mod_line": [
        6,
        19,
        12
      ],
      "mod_code": [
        "int p_max = 0 ;",
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int p_max’"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "int p_max = 0 ;",
        "char min = arr [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int p_max’"
    },
    {
      "mod_line": [
        6,
        10,
        8
      ],
      "mod_code": [
        "int p_max = 0 ;",
        "char min = arr [ i ] ;",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int p_max’"
    },
    {
      "mod_line": [
        6,
        10,
        8,
        12
      ],
      "mod_code": [
        "int p_max = 0 ;",
        "char min = arr [ i ] ;",
        "arr >> arr [ i ] ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int p_max’"
    },
    {
      "mod_line": [
        6,
        10,
        12
      ],
      "mod_code": [
        "int p_max = 0 ;",
        "char min = arr [ i ] ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int p_max’"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "int p_max = 0 ;",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int p_max’"
    },
    {
      "mod_line": [
        6,
        8,
        12
      ],
      "mod_code": [
        "int p_max = 0 ;",
        "arr >> arr [ i ] ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int p_max’"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "int p_max = 0 ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int p_max’"
    },
    {
      "mod_line": [
        19,
        10,
        8
      ],
      "mod_code": [
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;",
        "char min = arr [ i ] ;",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [110]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        19,
        10,
        8,
        12
      ],
      "mod_code": [
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;",
        "char min = arr [ i ] ;",
        "arr >> arr [ i ] ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [110]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        19,
        8
      ],
      "mod_code": [
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [110]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        19,
        8,
        12
      ],
      "mod_code": [
        "if ( i == ' p_min ' || i == ' p_max ' ) continue ;",
        "arr >> arr [ i ] ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [110]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "char min = arr [ i ] ;",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [110]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        10,
        8,
        12
      ],
      "mod_code": [
        "char min = arr [ i ] ;",
        "arr >> arr [ i ] ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [110]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "arr >> arr [ i ] ;",
        "else if ( arr [ i ] > ' max ' )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [110]’ and ‘int’ to binary ‘operator>>’"
    }
  ]
}