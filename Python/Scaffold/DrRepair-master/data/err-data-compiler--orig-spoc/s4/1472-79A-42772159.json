{
  "meta": {
    "index": 1472,
    "hitid": "3HEA4ZVWVDG31J7GLGR0PIFKIWF55I",
    "workerid": "AIWEXPJAU66D9",
    "probid": "79A",
    "subid": "42772159"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let x and y be integers",
      "code": "int x , y ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read x and y",
      "code": "cin >> x >> y ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while true",
      "code": "while ( true )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if x * 100 + y * 10 < 220 or y is less than 2",
      "code": "if ( x * 100 + y * 10 < 220 || y < 2 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "print \" Hanako \" and a new line",
      "code": "cout << \" Hanako \" << endl ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if x > = 2",
      "code": "if ( x >= 2 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "decrease x by 2",
      "code": "x -= 2 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "decrease y by 2",
      "code": "y -= 2 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if x = 1",
      "code": "else if ( x == 1 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "decrement x",
      "code": "x -- ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "decrease y by 12",
      "code": "y -= 12 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else if x = 0",
      "code": "else if ( x == 0 )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "subtract 22 from y",
      "code": "y -= 22 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if y is less than 0",
      "code": "if ( y < 0 )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print \" Hanako \" and a new line",
      "code": "cout << \" Hanako \" << endl ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if x * 100 + y * 10 < 220 or y is less than 2",
      "code": "if ( x * 100 + y * 10 < 220 || y < 2 )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print \" Ciel \" and a new line",
      "code": "cout << \" Ciel \" << endl ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if y > = 22",
      "code": "if ( y >= 22 )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "subtract 22 from y",
      "code": "y -= 22 ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "else if y > = 12",
      "code": "else if ( y >= 12 )",
      "indent": 2
    },
    {
      "line": 28,
      "text": "decrease x by one",
      "code": "x -- ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "subtract 12 from x",
      "code": "y -= 12 ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "else if y > = 2",
      "code": "else if ( y >= 2 )",
      "indent": 2
    },
    {
      "line": 31,
      "text": "subtract 2 from x",
      "code": "x -= 2 ;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "subtract 2 from y",
      "code": "y -= 2 ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 34,
      "text": "if x is less than 0",
      "code": "if ( x < 0 )",
      "indent": 2
    },
    {
      "line": 35,
      "text": "print \" Ciel \" and a new line",
      "code": "cout << \" Ciel \" << endl ;",
      "indent": 3
    },
    {
      "line": 36,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> x >> k ;"
      ],
      "err_line": 2,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        6,
        17,
        23
      ],
      "mod_code": [
        "x -= 12 ;",
        "{ }",
        "if ( y <= 0 )",
        "break break ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        6,
        17,
        36
      ],
      "mod_code": [
        "x -= 12 ;",
        "{ }",
        "if ( y <= 0 )",
        "break break ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        6,
        23
      ],
      "mod_code": [
        "x -= 12 ;",
        "{ }",
        "break break ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        6,
        23,
        34
      ],
      "mod_code": [
        "x -= 12 ;",
        "{ }",
        "break break ;",
        "if ( x <= 0 )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        6,
        23,
        36
      ],
      "mod_code": [
        "x -= 12 ;",
        "{ }",
        "break break ;",
        "break break ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        6,
        34,
        36
      ],
      "mod_code": [
        "x -= 12 ;",
        "{ }",
        "if ( x <= 0 )",
        "break break ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        6,
        36
      ],
      "mod_code": [
        "x -= 12 ;",
        "{ }",
        "break break ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        17,
        23
      ],
      "mod_code": [
        "x -= 12 ;",
        "if ( y <= 0 )",
        "break break ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        17,
        23,
        34
      ],
      "mod_code": [
        "x -= 12 ;",
        "if ( y <= 0 )",
        "break break ;",
        "if ( x <= 0 )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        17,
        23,
        36
      ],
      "mod_code": [
        "x -= 12 ;",
        "if ( y <= 0 )",
        "break break ;",
        "break break ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        17,
        34,
        36
      ],
      "mod_code": [
        "x -= 12 ;",
        "if ( y <= 0 )",
        "if ( x <= 0 )",
        "break break ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        17,
        36
      ],
      "mod_code": [
        "x -= 12 ;",
        "if ( y <= 0 )",
        "break break ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        23
      ],
      "mod_code": [
        "x -= 12 ;",
        "break break ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        23,
        34
      ],
      "mod_code": [
        "x -= 12 ;",
        "break break ;",
        "if ( x <= 0 )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        23,
        34,
        36
      ],
      "mod_code": [
        "x -= 12 ;",
        "break break ;",
        "if ( x <= 0 )",
        "break break ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        23,
        36
      ],
      "mod_code": [
        "x -= 12 ;",
        "break break ;",
        "break break ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        34,
        36
      ],
      "mod_code": [
        "x -= 12 ;",
        "if ( x <= 0 )",
        "break break ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        36
      ],
      "mod_code": [
        "x -= 12 ;",
        "break break ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        17,
        23
      ],
      "mod_code": [
        "{ }",
        "if ( y <= 0 )",
        "break break ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        17,
        23,
        34
      ],
      "mod_code": [
        "{ }",
        "if ( y <= 0 )",
        "break break ;",
        "if ( x <= 0 )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        17,
        23,
        36
      ],
      "mod_code": [
        "{ }",
        "if ( y <= 0 )",
        "break break ;",
        "break break ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        17,
        34,
        36
      ],
      "mod_code": [
        "{ }",
        "if ( y <= 0 )",
        "if ( x <= 0 )",
        "break break ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        17,
        36
      ],
      "mod_code": [
        "{ }",
        "if ( y <= 0 )",
        "break break ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        23
      ],
      "mod_code": [
        "{ }",
        "break break ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        23,
        34
      ],
      "mod_code": [
        "{ }",
        "break break ;",
        "if ( x <= 0 )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        23,
        34,
        36
      ],
      "mod_code": [
        "{ }",
        "break break ;",
        "if ( x <= 0 )",
        "break break ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        23,
        36
      ],
      "mod_code": [
        "{ }",
        "break break ;",
        "break break ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        34,
        36
      ],
      "mod_code": [
        "{ }",
        "if ( x <= 0 )",
        "break break ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        36
      ],
      "mod_code": [
        "{ }",
        "break break ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        17,
        23
      ],
      "mod_code": [
        "if ( y <= 0 )",
        "break break ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        17,
        23,
        34
      ],
      "mod_code": [
        "if ( y <= 0 )",
        "break break ;",
        "if ( x <= 0 )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        17,
        23,
        34,
        36
      ],
      "mod_code": [
        "if ( y <= 0 )",
        "break break ;",
        "if ( x <= 0 )",
        "break break ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        17,
        23,
        36
      ],
      "mod_code": [
        "if ( y <= 0 )",
        "break break ;",
        "break break ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        17,
        34,
        36
      ],
      "mod_code": [
        "if ( y <= 0 )",
        "if ( x <= 0 )",
        "break break ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        17,
        36
      ],
      "mod_code": [
        "if ( y <= 0 )",
        "break break ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        23,
        34
      ],
      "mod_code": [
        "break break ;",
        "if ( x <= 0 )"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        23,
        34,
        36
      ],
      "mod_code": [
        "break break ;",
        "if ( x <= 0 )",
        "break break ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        23,
        36
      ],
      "mod_code": [
        "break break ;",
        "break break ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        34,
        36
      ],
      "mod_code": [
        "if ( x <= 0 )",
        "break break ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}