{
  "meta": {
    "index": 1866,
    "hitid": "3D17ECOUOEP1ZMJT6A1V7V4JT7D31D",
    "workerid": "A1APYLD4DUK33J",
    "probid": "443A",
    "subid": "41736413"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integer array a with size 30 with a = { 0 } , set ans to 0",
      "code": "int a [ 30 ] = { 0 } , ans = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while read s is true",
      "code": "while ( cin >> s )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if s [ i ] is ' } '",
      "code": "if ( s [ 1 ] == ' } ' )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if s [ 0 ] is not ' { ' , increment a [ s [ 0 ] - ' a ' ]",
      "code": "if ( s [ 0 ] != ' { ' ) a [ s [ 0 ] - ' a ' ] ++ ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "for i = 0 to 26 exclusive",
      "code": "for ( int i = 0 ; i < 26 ; i ++ )",
      "indent": 3
    },
    {
      "line": 7,
      "text": "if a [ i ] is true , increment ans",
      "code": "if ( a [ i ] ) ans ++ ;",
      "indent": 4
    },
    {
      "line": 8,
      "text": "print ans print newline",
      "code": "cout << ans << endl ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "set ans to 0",
      "code": "ans = 0 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "set bytes from a to size of a to value 0",
      "code": "memset ( a , 0 , sizeof ( a ) ) ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if s [ 0 ] is ' { '",
      "code": "else if ( s [ 0 ] == ' { ' )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if s [ 2 ] is not ' } '",
      "code": "if ( s [ 2 ] != ' } ' )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment a [ s [ 1 ] - ' a ' ]",
      "code": "a [ s [ 1 ] - ' a ' ] ++ ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 15,
      "text": "print 1 print newline",
      "code": "cout << 1 << endl ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 17,
      "text": "increment a [ s [ 0 ] - ' a ' ]",
      "code": "a [ s [ 0 ] - ' a ' ] ++ ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( s [ i ] == ' } ' }"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( s [ 2 ] != ' } ' }"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int a [ 30 ] = { 0 } ;"
      ],
      "err_line": 7,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( s >> s )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( s [ i ] == ' } }"
      ],
      "err_line": 4,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < 26 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "if ( s [ i ] == ' } ' }",
        "else if ( s [ 0 ] == ' ' )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        11,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == ' } ' }",
        "else if ( s [ 0 ] == ' ' )",
        "if ( s [ 2 ] != ' } ' }"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        11,
        12,
        8
      ],
      "mod_code": [
        "if ( s [ i ] == ' } ' }",
        "else if ( s [ 0 ] == ' ' )",
        "if ( s [ 2 ] != ' } ' }",
        "cout << ans ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        11,
        12,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' } ' }",
        "else if ( s [ 0 ] == ' ' )",
        "if ( s [ 2 ] != ' } ' }",
        "while ( s >> s )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        11,
        8
      ],
      "mod_code": [
        "if ( s [ i ] == ' } ' }",
        "else if ( s [ 0 ] == ' ' )",
        "cout << ans ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        11,
        8,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' } ' }",
        "else if ( s [ 0 ] == ' ' )",
        "cout << ans ;",
        "while ( s >> s )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        11,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' } ' }",
        "else if ( s [ 0 ] == ' ' )",
        "while ( s >> s )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == ' } ' }",
        "if ( s [ 2 ] != ' } ' }"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        12,
        8
      ],
      "mod_code": [
        "if ( s [ i ] == ' } ' }",
        "if ( s [ 2 ] != ' } ' }",
        "cout << ans ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        12,
        8,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' } ' }",
        "if ( s [ 2 ] != ' } ' }",
        "cout << ans ;",
        "while ( s >> s )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        12,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' } ' }",
        "if ( s [ 2 ] != ' } ' }",
        "while ( s >> s )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "if ( s [ i ] == ' } ' }",
        "cout << ans ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' } ' }",
        "cout << ans ;",
        "while ( s >> s )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' } ' }",
        "while ( s >> s )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "else if ( s [ 0 ] == ' ' )",
        "if ( s [ 2 ] != ' } ' }"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        12,
        8
      ],
      "mod_code": [
        "else if ( s [ 0 ] == ' ' )",
        "if ( s [ 2 ] != ' } ' }",
        "cout << ans ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        12,
        8,
        4
      ],
      "mod_code": [
        "else if ( s [ 0 ] == ' ' )",
        "if ( s [ 2 ] != ' } ' }",
        "cout << ans ;",
        "if ( s [ i ] == ' } }"
      ],
      "err_line": 4,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        12,
        8,
        3
      ],
      "mod_code": [
        "else if ( s [ 0 ] == ' ' )",
        "if ( s [ 2 ] != ' } ' }",
        "cout << ans ;",
        "while ( s >> s )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        12,
        4
      ],
      "mod_code": [
        "else if ( s [ 0 ] == ' ' )",
        "if ( s [ 2 ] != ' } ' }",
        "if ( s [ i ] == ' } }"
      ],
      "err_line": 4,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        12,
        4,
        3
      ],
      "mod_code": [
        "else if ( s [ 0 ] == ' ' )",
        "if ( s [ 2 ] != ' } ' }",
        "if ( s [ i ] == ' } }",
        "while ( s >> s )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        12,
        3
      ],
      "mod_code": [
        "else if ( s [ 0 ] == ' ' )",
        "if ( s [ 2 ] != ' } ' }",
        "while ( s >> s )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        8,
        4
      ],
      "mod_code": [
        "else if ( s [ 0 ] == ' ' )",
        "cout << ans ;",
        "if ( s [ i ] == ' } }"
      ],
      "err_line": 4,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        8,
        4,
        3
      ],
      "mod_code": [
        "else if ( s [ 0 ] == ' ' )",
        "cout << ans ;",
        "if ( s [ i ] == ' } }",
        "while ( s >> s )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        8,
        3
      ],
      "mod_code": [
        "else if ( s [ 0 ] == ' ' )",
        "cout << ans ;",
        "while ( s >> s )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        4
      ],
      "mod_code": [
        "else if ( s [ 0 ] == ' ' )",
        "if ( s [ i ] == ' } }"
      ],
      "err_line": 4,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        4,
        3
      ],
      "mod_code": [
        "else if ( s [ 0 ] == ' ' )",
        "if ( s [ i ] == ' } }",
        "while ( s >> s )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "else if ( s [ 0 ] == ' ' )",
        "while ( s >> s )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        8
      ],
      "mod_code": [
        "if ( s [ 2 ] != ' } ' }",
        "cout << ans ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        8,
        4
      ],
      "mod_code": [
        "if ( s [ 2 ] != ' } ' }",
        "cout << ans ;",
        "if ( s [ i ] == ' } }"
      ],
      "err_line": 4,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        8,
        4,
        3
      ],
      "mod_code": [
        "if ( s [ 2 ] != ' } ' }",
        "cout << ans ;",
        "if ( s [ i ] == ' } }",
        "while ( s >> s )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        8,
        3
      ],
      "mod_code": [
        "if ( s [ 2 ] != ' } ' }",
        "cout << ans ;",
        "while ( s >> s )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "if ( s [ 2 ] != ' } ' }",
        "if ( s [ i ] == ' } }"
      ],
      "err_line": 4,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        4,
        3
      ],
      "mod_code": [
        "if ( s [ 2 ] != ' } ' }",
        "if ( s [ i ] == ' } }",
        "while ( s >> s )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "if ( s [ 2 ] != ' } ' }",
        "while ( s >> s )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "cout << ans ;",
        "if ( s [ i ] == ' } }"
      ],
      "err_line": 4,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        4,
        3
      ],
      "mod_code": [
        "cout << ans ;",
        "if ( s [ i ] == ' } }",
        "while ( s >> s )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "cout << ans ;",
        "while ( s >> s )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' } }",
        "while ( s >> s )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating ' character"
    }
  ]
}