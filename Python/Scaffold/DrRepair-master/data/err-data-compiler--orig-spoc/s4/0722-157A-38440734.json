{
  "meta": {
    "index": 722,
    "hitid": "3P7QK0GJ3TF9908IALWIGFJ308U2ZU",
    "workerid": "ACI8PUCF5OPDC",
    "probid": "157A",
    "subid": "38440734"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , i , j , k",
      "code": "int n , i , j , k ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "get n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer a and integer array row , clm with dimension n each",
      "code": "int a , row [ n ] , clm [ n ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set row [ i ] to 0",
      "code": "row [ i ] = 0 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set clm [ i ] to 0",
      "code": "clm [ i ] = 0 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for integer j = 0 to n exclusive",
      "code": "for ( j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "get a",
      "code": "cin >> a ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "add a to row [ i ]",
      "code": "row [ i ] += a ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "add a to clm [ j ]",
      "code": "clm [ j ] += a ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "set k to 0",
      "code": "k = 0 ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for integer j = 0 to n exclusive",
      "code": "for ( j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if clm [ i ] greater than row [ j ] then increment k",
      "code": "if ( clm [ i ] > row [ j ] ) k ++ ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print k",
      "code": "cout << k << endl ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int a [ n ] , clm [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int row [ n ] , clm [ n ] ;"
      ],
      "err_line": 10,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "gets ( a ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "row [ i ] = row + a ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "clm [ j ] = clm + a ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "int k = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "int a [ n ] , clm [ n ] ;",
        "clm [ j ] = clm + a ;"
      ],
      "err_line": 5,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        6
      ],
      "mod_code": [
        "int a [ n ] , clm [ n ] ;",
        "clm [ j ] = clm + a ;",
        "clm [ i ] = ' 0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        6,
        10
      ],
      "mod_code": [
        "int a [ n ] , clm [ n ] ;",
        "clm [ j ] = clm + a ;",
        "clm [ i ] = ' 0 ' ;",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        6,
        2
      ],
      "mod_code": [
        "int a [ n ] , clm [ n ] ;",
        "clm [ j ] = clm + a ;",
        "clm [ i ] = ' 0 ' ;",
        "{ n ; }"
      ],
      "err_line": 5,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        10
      ],
      "mod_code": [
        "int a [ n ] , clm [ n ] ;",
        "clm [ j ] = clm + a ;",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        10,
        2
      ],
      "mod_code": [
        "int a [ n ] , clm [ n ] ;",
        "clm [ j ] = clm + a ;",
        "gets ( a ) ;",
        "{ n ; }"
      ],
      "err_line": 5,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        2
      ],
      "mod_code": [
        "int a [ n ] , clm [ n ] ;",
        "clm [ j ] = clm + a ;",
        "{ n ; }"
      ],
      "err_line": 5,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "int a [ n ] , clm [ n ] ;",
        "clm [ i ] = ' 0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        10
      ],
      "mod_code": [
        "int a [ n ] , clm [ n ] ;",
        "clm [ i ] = ' 0 ' ;",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        10,
        2
      ],
      "mod_code": [
        "int a [ n ] , clm [ n ] ;",
        "clm [ i ] = ' 0 ' ;",
        "gets ( a ) ;",
        "{ n ; }"
      ],
      "err_line": 5,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        2
      ],
      "mod_code": [
        "int a [ n ] , clm [ n ] ;",
        "clm [ i ] = ' 0 ' ;",
        "{ n ; }"
      ],
      "err_line": 5,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "int a [ n ] , clm [ n ] ;",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        10,
        2
      ],
      "mod_code": [
        "int a [ n ] , clm [ n ] ;",
        "gets ( a ) ;",
        "{ n ; }"
      ],
      "err_line": 5,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int a [ n ] , clm [ n ] ;",
        "{ n ; }"
      ],
      "err_line": 5,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "clm [ j ] = clm + a ;",
        "clm [ i ] = ' 0 ' ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        6,
        3
      ],
      "mod_code": [
        "clm [ j ] = clm + a ;",
        "clm [ i ] = ' 0 ' ;",
        "int row [ n ] , clm [ n ] ;"
      ],
      "err_line": 10,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        6,
        3,
        10
      ],
      "mod_code": [
        "clm [ j ] = clm + a ;",
        "clm [ i ] = ' 0 ' ;",
        "int row [ n ] , clm [ n ] ;",
        "gets ( a ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        6,
        3,
        2
      ],
      "mod_code": [
        "clm [ j ] = clm + a ;",
        "clm [ i ] = ' 0 ' ;",
        "int row [ n ] , clm [ n ] ;",
        "{ n ; }"
      ],
      "err_line": 10,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        6,
        10
      ],
      "mod_code": [
        "clm [ j ] = clm + a ;",
        "clm [ i ] = ' 0 ' ;",
        "gets ( a ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        6,
        10,
        2
      ],
      "mod_code": [
        "clm [ j ] = clm + a ;",
        "clm [ i ] = ' 0 ' ;",
        "gets ( a ) ;",
        "{ n ; }"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        6,
        2
      ],
      "mod_code": [
        "clm [ j ] = clm + a ;",
        "clm [ i ] = ' 0 ' ;",
        "{ n ; }"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "clm [ j ] = clm + a ;",
        "int row [ n ] , clm [ n ] ;"
      ],
      "err_line": 10,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        3,
        10
      ],
      "mod_code": [
        "clm [ j ] = clm + a ;",
        "int row [ n ] , clm [ n ] ;",
        "gets ( a ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        3,
        10,
        2
      ],
      "mod_code": [
        "clm [ j ] = clm + a ;",
        "int row [ n ] , clm [ n ] ;",
        "gets ( a ) ;",
        "{ n ; }"
      ],
      "err_line": 10,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        3,
        2
      ],
      "mod_code": [
        "clm [ j ] = clm + a ;",
        "int row [ n ] , clm [ n ] ;",
        "{ n ; }"
      ],
      "err_line": 10,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        10
      ],
      "mod_code": [
        "clm [ j ] = clm + a ;",
        "gets ( a ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        10,
        2
      ],
      "mod_code": [
        "clm [ j ] = clm + a ;",
        "gets ( a ) ;",
        "{ n ; }"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "clm [ j ] = clm + a ;",
        "{ n ; }"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "clm [ i ] = ' 0 ' ;",
        "int row [ n ] , clm [ n ] ;"
      ],
      "err_line": 10,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        3,
        10
      ],
      "mod_code": [
        "clm [ i ] = ' 0 ' ;",
        "int row [ n ] , clm [ n ] ;",
        "gets ( a ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        3,
        10,
        2
      ],
      "mod_code": [
        "clm [ i ] = ' 0 ' ;",
        "int row [ n ] , clm [ n ] ;",
        "gets ( a ) ;",
        "{ n ; }"
      ],
      "err_line": 10,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        3,
        2
      ],
      "mod_code": [
        "clm [ i ] = ' 0 ' ;",
        "int row [ n ] , clm [ n ] ;",
        "{ n ; }"
      ],
      "err_line": 10,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "clm [ i ] = ' 0 ' ;",
        "gets ( a ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        10,
        2
      ],
      "mod_code": [
        "clm [ i ] = ' 0 ' ;",
        "gets ( a ) ;",
        "{ n ; }"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "int row [ n ] , clm [ n ] ;",
        "gets ( a ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        10,
        2
      ],
      "mod_code": [
        "int row [ n ] , clm [ n ] ;",
        "gets ( a ) ;",
        "{ n ; }"
      ],
      "err_line": 10,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int row [ n ] , clm [ n ] ;",
        "{ n ; }"
      ],
      "err_line": 10,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "gets ( a ) ;",
        "{ n ; }"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    }
  ]
}