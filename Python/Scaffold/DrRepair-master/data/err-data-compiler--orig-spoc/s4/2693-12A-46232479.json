{
  "meta": {
    "index": 2693,
    "hitid": "3SBNLSTU6UZWCA6Y7AGZCYA7WX5ZDH",
    "workerid": "A1APYLD4DUK33J",
    "probid": "12A",
    "subid": "46232479"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare rorate90 with integer N , 2d string array start of size 10 by 10 , 2d string array end of size 10 by 10 as arguments , returning void",
      "code": "void rotate90 ( int N , string start [ 10 ] [ 10 ] , string end [ 10 ] [ 10 ] )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "for i = 0 to N exclusive",
      "code": "for ( int i = 0 ; i < N ; i ++ )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for j = 0 to N exclusive , set end [ j ] [ N - i - 1 ] to start [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < N ; j ++ ) { end [ j ] [ N - i - 1 ] = start [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "declare areSame with integer N , 2d string array start of size 10 by 10 , 2d string array end of size 10 by 10 as arguments , returning boolean",
      "code": "bool areSame ( int N , string start [ 10 ] [ 10 ] , string end [ 10 ] [ 10 ] )",
      "indent": 0
    },
    {
      "line": 6,
      "text": "for i = 0 to N exclusive",
      "code": "for ( int i = 0 ; i < N ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for j = 0 to N exclusive",
      "code": "for ( int j = 0 ; j < N ; j ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if end [ i ] [ j ] is not start [ i ] [ j ] , return false from function",
      "code": "if ( end [ i ] [ j ] != start [ i ] [ j ] ) { return false ; }",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "return true from function",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 14,
      "text": "create 2d string arrays resultsquare , newsquare , originalsquare , with resultsquare size 10 by 10 , newsquare size 10 by 10 , originalsquare size 10 by 10",
      "code": "string resultsquare [ 10 ] [ 10 ] , newsquare [ 10 ] [ 10 ] , originalsquare [ 10 ] [ 10 ] ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for j = 0 to 3 exclusive",
      "code": "for ( int j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "create character n1",
      "code": "char n1 ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "read n1",
      "code": "cin >> n1 ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "set originalsquare [ i ] [ j ] to n1",
      "code": "originalsquare [ i ] [ j ] = n1 ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "create 2d string array hi of size 10 by 10",
      "code": "string hi [ 10 ] [ 10 ] ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "run rotate90 with 3 , originalsquare , newsquare as arguments",
      "code": "rotate90 ( 3 , originalsquare , newsquare ) ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "run rotate90 with 3 , newsquare , hi as arguments",
      "code": "rotate90 ( 3 , newsquare , hi ) ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if result of run areSame with arguments 3 , originalsquare , hi is true",
      "code": "if ( areSame ( 3 , originalsquare , hi ) )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 29,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘end’ has not been declared"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘std::__cxx11::string newsquare [10]’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "if ( areSame ( 3 , originalsquare ) , hi )"
      ],
      "err_line": 25,
      "err_msg": "too few arguments to function ‘bool areSame(int, std::__cxx11::string (*)[10], std::__cxx11::string (*)[10])’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] [ 10 ] [ 10 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] [ 10 ] ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( j = 0 ; j < N ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] [ 10 ] , originalsquare [ 10 ] ;"
      ],
      "err_line": 14,
      "err_msg": "conflicting declaration ‘std::__cxx11::string newsquare [10][10]’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 16,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "char a ;"
      ],
      "err_line": 18,
      "err_msg": "‘n1’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "char hi [ 10 ] [ 10 ] ;"
      ],
      "err_line": 24,
      "err_msg": "cannot convert ‘char (*)[10]’ to ‘std::__cxx11::string (*)[10] {aka std::__cxx11::basic_string<char> (*)[10]}’ for argument ‘3’ to ‘void rotate90(int, std::__cxx11::string (*)[10], std::__cxx11::string (*)[10])’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "rotate90 = rotate90 ( 3 , originalsquare , newsquare ) ;"
      ],
      "err_line": 23,
      "err_msg": "assignment of function ‘void rotate90(int, std::__cxx11::string (*)[10], std::__cxx11::string (*)[10])’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "rotate90 = rotate90 ( 3 , newsquare , hi ) ;"
      ],
      "err_line": 24,
      "err_msg": "assignment of function ‘void rotate90(int, std::__cxx11::string (*)[10], std::__cxx11::string (*)[10])’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "if ( areSame ( 3 , originalsquare ) , hi ( hi ) )"
      ],
      "err_line": 25,
      "err_msg": "too few arguments to function ‘bool areSame(int, std::__cxx11::string (*)[10], std::__cxx11::string (*)[10])’"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        5,
        14
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        5,
        14,
        25
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "if ( areSame ( 3 , originalsquare ) , hi )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        5,
        14,
        26
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        5,
        14,
        6
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        5,
        25
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "if ( areSame ( 3 , originalsquare ) , hi )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        5,
        25,
        26
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "if ( areSame ( 3 , originalsquare ) , hi )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        5,
        25,
        6
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "if ( areSame ( 3 , originalsquare ) , hi )",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        5,
        26
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        5,
        26,
        6
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "cout << \" YES \" << endl ;",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        5,
        6
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        14,
        25
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "if ( areSame ( 3 , originalsquare ) , hi )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        14,
        25,
        26
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "if ( areSame ( 3 , originalsquare ) , hi )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        14,
        25,
        6
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "if ( areSame ( 3 , originalsquare ) , hi )",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        14,
        26
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        14,
        26,
        6
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "cout << \" YES \" << endl ;",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        14,
        6
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        25
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "if ( areSame ( 3 , originalsquare ) , hi )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        25,
        26
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "if ( areSame ( 3 , originalsquare ) , hi )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        25,
        26,
        6
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "if ( areSame ( 3 , originalsquare ) , hi )",
        "cout << \" YES \" << endl ;",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        25,
        6
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "if ( areSame ( 3 , originalsquare ) , hi )",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        26
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        26,
        6
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "cout << \" YES \" << endl ;",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "void rorate90 ( int N [ ] , int start [ 10 ] , string start [ 10 ] ) ;",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘std::__cxx11::string* start’"
    },
    {
      "mod_line": [
        5,
        14
      ],
      "mod_code": [
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘end’ has not been declared"
    },
    {
      "mod_line": [
        5,
        14,
        25
      ],
      "mod_code": [
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "if ( areSame ( 3 , originalsquare ) , hi )"
      ],
      "err_line": 5,
      "err_msg": "‘end’ has not been declared"
    },
    {
      "mod_line": [
        5,
        14,
        25,
        26
      ],
      "mod_code": [
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "if ( areSame ( 3 , originalsquare ) , hi )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘end’ has not been declared"
    },
    {
      "mod_line": [
        5,
        14,
        25,
        6
      ],
      "mod_code": [
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "if ( areSame ( 3 , originalsquare ) , hi )",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘end’ has not been declared"
    },
    {
      "mod_line": [
        5,
        14,
        26
      ],
      "mod_code": [
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘end’ has not been declared"
    },
    {
      "mod_line": [
        5,
        14,
        26,
        6
      ],
      "mod_code": [
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "cout << \" YES \" << endl ;",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘end’ has not been declared"
    },
    {
      "mod_line": [
        5,
        14,
        6
      ],
      "mod_code": [
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘end’ has not been declared"
    },
    {
      "mod_line": [
        5,
        25
      ],
      "mod_code": [
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "if ( areSame ( 3 , originalsquare ) , hi )"
      ],
      "err_line": 5,
      "err_msg": "‘end’ has not been declared"
    },
    {
      "mod_line": [
        5,
        25,
        26
      ],
      "mod_code": [
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "if ( areSame ( 3 , originalsquare ) , hi )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘end’ has not been declared"
    },
    {
      "mod_line": [
        5,
        25,
        26,
        6
      ],
      "mod_code": [
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "if ( areSame ( 3 , originalsquare ) , hi )",
        "cout << \" YES \" << endl ;",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘end’ has not been declared"
    },
    {
      "mod_line": [
        5,
        25,
        6
      ],
      "mod_code": [
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "if ( areSame ( 3 , originalsquare ) , hi )",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘end’ has not been declared"
    },
    {
      "mod_line": [
        5,
        26
      ],
      "mod_code": [
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘end’ has not been declared"
    },
    {
      "mod_line": [
        5,
        26,
        6
      ],
      "mod_code": [
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "cout << \" YES \" << endl ;",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘end’ has not been declared"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "bool areSame ( int N [ ] , int start [ 10 ] [ 10 ] , end [ 10 ] ;",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘end’ has not been declared"
    },
    {
      "mod_line": [
        14,
        25
      ],
      "mod_code": [
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "if ( areSame ( 3 , originalsquare ) , hi )"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘std::__cxx11::string newsquare [10]’"
    },
    {
      "mod_line": [
        14,
        25,
        26
      ],
      "mod_code": [
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "if ( areSame ( 3 , originalsquare ) , hi )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘std::__cxx11::string newsquare [10]’"
    },
    {
      "mod_line": [
        14,
        25,
        26,
        6
      ],
      "mod_code": [
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "if ( areSame ( 3 , originalsquare ) , hi )",
        "cout << \" YES \" << endl ;",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        25,
        6
      ],
      "mod_code": [
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "if ( areSame ( 3 , originalsquare ) , hi )",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        26
      ],
      "mod_code": [
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘std::__cxx11::string newsquare [10]’"
    },
    {
      "mod_line": [
        14,
        26,
        6
      ],
      "mod_code": [
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "cout << \" YES \" << endl ;",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        6
      ],
      "mod_code": [
        "string resultsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] , newsquare [ 10 ] ;",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        26
      ],
      "mod_code": [
        "if ( areSame ( 3 , originalsquare ) , hi )",
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 25,
      "err_msg": "too few arguments to function ‘bool areSame(int, std::__cxx11::string (*)[10], std::__cxx11::string (*)[10])’"
    },
    {
      "mod_line": [
        25,
        26,
        6
      ],
      "mod_code": [
        "if ( areSame ( 3 , originalsquare ) , hi )",
        "cout << \" YES \" << endl ;",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        6
      ],
      "mod_code": [
        "if ( areSame ( 3 , originalsquare ) , hi )",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        26,
        6
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    }
  ]
}