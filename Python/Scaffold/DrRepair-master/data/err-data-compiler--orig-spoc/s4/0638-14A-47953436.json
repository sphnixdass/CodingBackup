{
  "meta": {
    "index": 638,
    "hitid": "33K3E8REWWPVQKASPKHYTLGVD6B8XO",
    "workerid": "AIWEXPJAU66D9",
    "probid": "14A",
    "subid": "47953436"
  },
  "lines": [
    {
      "line": 0,
      "text": "let n , m , p , q , x and y be integers",
      "code": "int n , m , p , q , x , y ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "gg is a char , a is an 2d array of chars with size 101 by 101",
      "code": "char gg , a [ 101 ] [ 101 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "p = 0x3f , x = 0x3f",
      "code": "p = 0x3f , x = 0x3f ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for integer j = 1 to m inclusive",
      "code": "for ( int j = 1 ; j <= m ; j ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "read gg",
      "code": "cin >> gg ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "assign value of gg to the a [ i ] [ j ]",
      "code": "a [ i ] [ j ] = gg ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if gg = ' * '",
      "code": "if ( gg == ' * ' )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if i < = p , p = i",
      "code": "if ( i <= p ) p = i ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "if j < = x , x = j",
      "code": "if ( j <= x ) x = j ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "if i > = q , q = i",
      "code": "if ( i >= q ) q = i ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "if j > = y , y = j",
      "code": "if ( j >= y ) y = j ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = p to q inclusive",
      "code": "for ( int i = p ; i <= q ; i ++ )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for integer j = x to y inclusive , print a [ i ] [ j ]",
      "code": "for ( int j = x ; j <= y ; j ++ ) cout << a [ i ] [ j ] ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char a [ 101 ] , a [ 101 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "const int p = 0x3f , x = 0x3f ;"
      ],
      "err_line": 10,
      "err_msg": "assignment of read-only variable ‘p’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( i = p ; i <= q ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "char a [ 101 ] , a [ 101 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        8,
        1,
        7
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "char a [ 101 ] , a [ 101 ] ;",
        "{ gg ; }"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        8,
        1,
        7,
        4
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "char a [ 101 ] , a [ 101 ] ;",
        "{ gg ; }",
        "const int p = 0x3f , x = 0x3f ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        8,
        1,
        7,
        9
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "char a [ 101 ] , a [ 101 ] ;",
        "{ gg ; }",
        "if ( gg = ' * ' )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        8,
        1,
        7,
        3
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "char a [ 101 ] , a [ 101 ] ;",
        "{ gg ; }",
        "cin >> n >> k ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        8,
        1,
        4
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "char a [ 101 ] , a [ 101 ] ;",
        "const int p = 0x3f , x = 0x3f ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        8,
        1,
        4,
        9
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "char a [ 101 ] , a [ 101 ] ;",
        "const int p = 0x3f , x = 0x3f ;",
        "if ( gg = ' * ' )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        8,
        1,
        4,
        3
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "char a [ 101 ] , a [ 101 ] ;",
        "const int p = 0x3f , x = 0x3f ;",
        "cin >> n >> k ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        8,
        1,
        9
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "char a [ 101 ] , a [ 101 ] ;",
        "if ( gg = ' * ' )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        8,
        1,
        9,
        3
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "char a [ 101 ] , a [ 101 ] ;",
        "if ( gg = ' * ' )",
        "cin >> n >> k ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        8,
        1,
        3
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "char a [ 101 ] , a [ 101 ] ;",
        "cin >> n >> k ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "{ gg ; }"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        8,
        7,
        4
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "{ gg ; }",
        "const int p = 0x3f , x = 0x3f ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        8,
        7,
        4,
        9
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "{ gg ; }",
        "const int p = 0x3f , x = 0x3f ;",
        "if ( gg = ' * ' )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        8,
        7,
        4,
        3
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "{ gg ; }",
        "const int p = 0x3f , x = 0x3f ;",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        7,
        9
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "{ gg ; }",
        "if ( gg = ' * ' )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        8,
        7,
        9,
        3
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "{ gg ; }",
        "if ( gg = ' * ' )",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        7,
        3
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "{ gg ; }",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "const int p = 0x3f , x = 0x3f ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        8,
        4,
        9
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "const int p = 0x3f , x = 0x3f ;",
        "if ( gg = ' * ' )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        8,
        4,
        9,
        3
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "const int p = 0x3f , x = 0x3f ;",
        "if ( gg = ' * ' )",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        4,
        3
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "const int p = 0x3f , x = 0x3f ;",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "if ( gg = ' * ' )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        8,
        9,
        3
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "if ( gg = ' * ' )",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = gg ;",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "char a [ 101 ] , a [ 101 ] ;",
        "{ gg ; }"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        1,
        7,
        4
      ],
      "mod_code": [
        "char a [ 101 ] , a [ 101 ] ;",
        "{ gg ; }",
        "const int p = 0x3f , x = 0x3f ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        1,
        7,
        4,
        9
      ],
      "mod_code": [
        "char a [ 101 ] , a [ 101 ] ;",
        "{ gg ; }",
        "const int p = 0x3f , x = 0x3f ;",
        "if ( gg = ' * ' )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        1,
        7,
        4,
        3
      ],
      "mod_code": [
        "char a [ 101 ] , a [ 101 ] ;",
        "{ gg ; }",
        "const int p = 0x3f , x = 0x3f ;",
        "cin >> n >> k ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        1,
        7,
        9
      ],
      "mod_code": [
        "char a [ 101 ] , a [ 101 ] ;",
        "{ gg ; }",
        "if ( gg = ' * ' )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        1,
        7,
        9,
        3
      ],
      "mod_code": [
        "char a [ 101 ] , a [ 101 ] ;",
        "{ gg ; }",
        "if ( gg = ' * ' )",
        "cin >> n >> k ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        1,
        7,
        3
      ],
      "mod_code": [
        "char a [ 101 ] , a [ 101 ] ;",
        "{ gg ; }",
        "cin >> n >> k ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "char a [ 101 ] , a [ 101 ] ;",
        "const int p = 0x3f , x = 0x3f ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        1,
        4,
        9
      ],
      "mod_code": [
        "char a [ 101 ] , a [ 101 ] ;",
        "const int p = 0x3f , x = 0x3f ;",
        "if ( gg = ' * ' )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        1,
        4,
        9,
        3
      ],
      "mod_code": [
        "char a [ 101 ] , a [ 101 ] ;",
        "const int p = 0x3f , x = 0x3f ;",
        "if ( gg = ' * ' )",
        "cin >> n >> k ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        1,
        4,
        3
      ],
      "mod_code": [
        "char a [ 101 ] , a [ 101 ] ;",
        "const int p = 0x3f , x = 0x3f ;",
        "cin >> n >> k ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "char a [ 101 ] , a [ 101 ] ;",
        "if ( gg = ' * ' )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        1,
        9,
        3
      ],
      "mod_code": [
        "char a [ 101 ] , a [ 101 ] ;",
        "if ( gg = ' * ' )",
        "cin >> n >> k ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "char a [ 101 ] , a [ 101 ] ;",
        "cin >> n >> k ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘char a [101]’"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "{ gg ; }",
        "const int p = 0x3f , x = 0x3f ;"
      ],
      "err_line": 10,
      "err_msg": "assignment of read-only variable ‘p’"
    },
    {
      "mod_line": [
        7,
        4,
        9
      ],
      "mod_code": [
        "{ gg ; }",
        "const int p = 0x3f , x = 0x3f ;",
        "if ( gg = ' * ' )"
      ],
      "err_line": 10,
      "err_msg": "assignment of read-only variable ‘p’"
    },
    {
      "mod_line": [
        7,
        4,
        9,
        3
      ],
      "mod_code": [
        "{ gg ; }",
        "const int p = 0x3f , x = 0x3f ;",
        "if ( gg = ' * ' )",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        4,
        3
      ],
      "mod_code": [
        "{ gg ; }",
        "const int p = 0x3f , x = 0x3f ;",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        3
      ],
      "mod_code": [
        "{ gg ; }",
        "if ( gg = ' * ' )",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "{ gg ; }",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "const int p = 0x3f , x = 0x3f ;",
        "if ( gg = ' * ' )"
      ],
      "err_line": 10,
      "err_msg": "assignment of read-only variable ‘p’"
    },
    {
      "mod_line": [
        4,
        9,
        3
      ],
      "mod_code": [
        "const int p = 0x3f , x = 0x3f ;",
        "if ( gg = ' * ' )",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "const int p = 0x3f , x = 0x3f ;",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "if ( gg = ' * ' )",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    }
  ]
}