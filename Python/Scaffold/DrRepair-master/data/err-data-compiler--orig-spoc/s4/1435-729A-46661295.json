{
  "meta": {
    "index": 1435,
    "hitid": "3VMHWJRYHVA45ZKFXYN43DXH0P5XF5",
    "workerid": "A1APYLD4DUK33J",
    "probid": "729A",
    "subid": "46661295"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , i , j with i = 0",
      "code": "int n , i = 0 , j ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n read s",
      "code": "cin >> n >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while i is less than n",
      "code": "while ( i < n )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if s [ i ] is ' o ' and s [ i + 1 ] is ' g ' and s [ i + 2 ] is ' o '",
      "code": "if ( s [ i ] == ' o ' && s [ i + 1 ] == ' g ' && s [ i + 2 ] == ' o ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "print \" * * * \"",
      "code": "cout << \" *** \" ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "increment i by 3",
      "code": "i += 3 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "for j = i",
      "code": "for ( j = i ; ; )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if s [ j ] is ' g ' and s [ j + 1 ] is ' o '",
      "code": "if ( s [ j ] == ' g ' && s [ j + 1 ] == ' o ' )",
      "indent": 4
    },
    {
      "line": 10,
      "text": "increment j by 2",
      "code": "j += 2 ;",
      "indent": 5
    },
    {
      "line": 11,
      "text": "increment i by 2",
      "code": "i += 2 ;",
      "indent": 5
    },
    {
      "line": 12,
      "text": "break current loop iteration",
      "code": "continue ;",
      "indent": 5
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 14,
      "text": "break loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print s [ i ]",
      "code": "cout << s [ i ] ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘std::__cxx11::string n’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        14
      ],
      "mod_code": [
        "int n , i , j = 0 ;",
        "cout << \" -1 \" << endl ;",
        "for ( int j = i ; ; j ++ )",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        6,
        18,
        14
      ],
      "mod_code": [
        "int n , i , j = 0 ;",
        "cout << \" -1 \" << endl ;",
        "cout << s [ i ] << endl ;",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        6,
        17,
        14
      ],
      "mod_code": [
        "int n , i , j = 0 ;",
        "cout << \" -1 \" << endl ;",
        "else ;",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        6,
        14
      ],
      "mod_code": [
        "int n , i , j = 0 ;",
        "cout << \" -1 \" << endl ;",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        8,
        18,
        14
      ],
      "mod_code": [
        "int n , i , j = 0 ;",
        "for ( int j = i ; ; j ++ )",
        "cout << s [ i ] << endl ;",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        8,
        17,
        14
      ],
      "mod_code": [
        "int n , i , j = 0 ;",
        "for ( int j = i ; ; j ++ )",
        "else ;",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        8,
        14
      ],
      "mod_code": [
        "int n , i , j = 0 ;",
        "for ( int j = i ; ; j ++ )",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        18,
        17,
        14
      ],
      "mod_code": [
        "int n , i , j = 0 ;",
        "cout << s [ i ] << endl ;",
        "else ;",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        18,
        14
      ],
      "mod_code": [
        "int n , i , j = 0 ;",
        "cout << s [ i ] << endl ;",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        17,
        14
      ],
      "mod_code": [
        "int n , i , j = 0 ;",
        "else ;",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int n , i , j = 0 ;",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        8,
        18,
        14
      ],
      "mod_code": [
        "cout << \" -1 \" << endl ;",
        "for ( int j = i ; ; j ++ )",
        "cout << s [ i ] << endl ;",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        8,
        17,
        14
      ],
      "mod_code": [
        "cout << \" -1 \" << endl ;",
        "for ( int j = i ; ; j ++ )",
        "else ;",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        8,
        14
      ],
      "mod_code": [
        "cout << \" -1 \" << endl ;",
        "for ( int j = i ; ; j ++ )",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        18,
        17,
        14
      ],
      "mod_code": [
        "cout << \" -1 \" << endl ;",
        "cout << s [ i ] << endl ;",
        "else ;",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        18,
        14
      ],
      "mod_code": [
        "cout << \" -1 \" << endl ;",
        "cout << s [ i ] << endl ;",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        17,
        14
      ],
      "mod_code": [
        "cout << \" -1 \" << endl ;",
        "else ;",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "cout << \" -1 \" << endl ;",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        8,
        18,
        17,
        14
      ],
      "mod_code": [
        "for ( int j = i ; ; j ++ )",
        "cout << s [ i ] << endl ;",
        "else ;",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        8,
        18,
        14
      ],
      "mod_code": [
        "for ( int j = i ; ; j ++ )",
        "cout << s [ i ] << endl ;",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        8,
        17,
        14
      ],
      "mod_code": [
        "for ( int j = i ; ; j ++ )",
        "else ;",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "for ( int j = i ; ; j ++ )",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        18,
        17,
        14
      ],
      "mod_code": [
        "cout << s [ i ] << endl ;",
        "else ;",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        18,
        14
      ],
      "mod_code": [
        "cout << s [ i ] << endl ;",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        17,
        14
      ],
      "mod_code": [
        "else ;",
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}