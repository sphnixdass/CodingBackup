{
  "meta": {
    "index": 941,
    "hitid": "3ABAOCJ4R8YQ2CBKX7WP4VLX1AOMQ9",
    "workerid": "AIWEXPJAU66D9",
    "probid": "275A",
    "subid": "40858658"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create 2d 3 by 3 array of integers ar with elements 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , empty 2d array b 3 by 3 and int variables i , j , k and l",
      "code": "int a [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } , i , j , k , l , b [ 3 ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i from 0 to 3 exclusive incrementing i",
      "code": "for ( i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "in a for loop , change j from 0 to 3 exclusive",
      "code": "for ( j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 4,
      "text": "read user input to b [ i ] [ j ]",
      "code": "cin >> b [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 5,
      "text": "if b [ i ] [ j ] is odd",
      "code": "if ( b [ i ] [ j ] % 2 == 1 )",
      "indent": 3
    },
    {
      "line": 6,
      "text": "if a [ i ] [ j ] is equal to 1",
      "code": "if ( a [ i ] [ j ] == 1 )",
      "indent": 4
    },
    {
      "line": 7,
      "text": "set a [ i ] [ j ] to 0",
      "code": "a [ i ] [ j ] = 0 ;",
      "indent": 5
    },
    {
      "line": 8,
      "text": "else if a [ i ] [ j ] is equal to 0",
      "code": "else if ( a [ i ] [ j ] == 0 )",
      "indent": 4
    },
    {
      "line": 9,
      "text": "change a [ i ] [ j ] to 1",
      "code": "a [ i ] [ j ] = 1 ;",
      "indent": 5
    },
    {
      "line": 10,
      "text": "if i is less than 2",
      "code": "if ( i < 2 )",
      "indent": 4
    },
    {
      "line": 11,
      "text": "if a [ i + 1 ] [ j ] = 1",
      "code": "if ( a [ i + 1 ] [ j ] == 1 )",
      "indent": 5
    },
    {
      "line": 12,
      "text": "set a [ i + 1 ] [ j ] to 0",
      "code": "a [ i + 1 ] [ j ] = 0 ;",
      "indent": 6
    },
    {
      "line": 13,
      "text": "else if a [ i + 1 ] [ j ] = 0",
      "code": "else if ( a [ i + 1 ] [ j ] == 0 )",
      "indent": 5
    },
    {
      "line": 14,
      "text": "change a [ i + 1 ] [ j ] to 1",
      "code": "a [ i + 1 ] [ j ] = 1 ;",
      "indent": 6
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 16,
      "text": "if i is greater than 0",
      "code": "if ( i > 0 )",
      "indent": 4
    },
    {
      "line": 17,
      "text": "if a [ i - 1 ] [ j ] is true",
      "code": "if ( a [ i - 1 ] [ j ] )",
      "indent": 5
    },
    {
      "line": 18,
      "text": "set a [ i - 1 ] [ j ] to 0",
      "code": "a [ i - 1 ] [ j ] = 0 ;",
      "indent": 6
    },
    {
      "line": 19,
      "text": "else if a [ i - 1 ] [ j ] is equal to 0",
      "code": "else if ( a [ i - 1 ] [ j ] == 0 )",
      "indent": 5
    },
    {
      "line": 20,
      "text": "change a [ i - 1 ] [ j ] to 1",
      "code": "a [ i - 1 ] [ j ] = 1 ;",
      "indent": 6
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 22,
      "text": "if j is less than 2",
      "code": "if ( j < 2 )",
      "indent": 4
    },
    {
      "line": 23,
      "text": "if a [ i ] [ j + 1 ] is true",
      "code": "if ( a [ i ] [ j + 1 ] )",
      "indent": 5
    },
    {
      "line": 24,
      "text": "assign 0 to a [ i ] [ j + 1 ]",
      "code": "a [ i ] [ j + 1 ] = 0 ;",
      "indent": 6
    },
    {
      "line": 25,
      "text": "else if a [ i ] [ j + 1 ] = 0",
      "code": "else if ( a [ i ] [ j + 1 ] == 0 )",
      "indent": 5
    },
    {
      "line": 26,
      "text": "set a [ i ] [ j + 1 ] to 1",
      "code": "a [ i ] [ j + 1 ] = 1 ;",
      "indent": 6
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 28,
      "text": "if j is greater than 0",
      "code": "if ( j > 0 )",
      "indent": 4
    },
    {
      "line": 29,
      "text": "if a [ i ] [ j - 1 ] is true",
      "code": "if ( a [ i ] [ j - 1 ] )",
      "indent": 5
    },
    {
      "line": 30,
      "text": "assign 0 to a [ i ] [ j - 1 ]",
      "code": "a [ i ] [ j - 1 ] = 0 ;",
      "indent": 6
    },
    {
      "line": 31,
      "text": "else if a [ i ] [ j - 1 ] = 0",
      "code": "else if ( a [ i ] [ j - 1 ] == 0 )",
      "indent": 5
    },
    {
      "line": 32,
      "text": "change a [ i ] [ j - 1 ] to 1",
      "code": "a [ i ] [ j - 1 ] = 1 ;",
      "indent": 6
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 37,
      "text": "for k = 0 to 3 exclusive",
      "code": "for ( k = 0 ; k < 3 ; k ++ )",
      "indent": 1
    },
    {
      "line": 38,
      "text": "start for loop from l = 0 to 3 exclusive , print a [ k ] [ l ] on each loop",
      "code": "for ( l = 0 ; l < 3 ; l ++ ) { cout << a [ k ] [ l ] ; }",
      "indent": 2
    },
    {
      "line": 39,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l , l } ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l } ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "[ cin >> b [ i ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘,’ before ‘>>’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "a [ i - 1 ] [ j ] ] = 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "char a [ i ] [ j + 1 ] = 0 ;"
      ],
      "err_line": 24,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "a [ i ] [ j + 1 ] ] = 1 ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "char a [ i ] [ j - 1 ] = 0 ;"
      ],
      "err_line": 30,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l , l } ;",
        "if ( a [ i + 1 ] [ j ] == ' 1 ' )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        11,
        30
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l , l } ;",
        "if ( a [ i + 1 ] [ j ] == ' 1 ' )",
        "char a [ i ] [ j - 1 ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        11,
        30,
        12
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l , l } ;",
        "if ( a [ i + 1 ] [ j ] == ' 1 ' )",
        "char a [ i ] [ j - 1 ] = 0 ;",
        "a [ i + 1 ] [ j ] = ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        11,
        30,
        16
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l , l } ;",
        "if ( a [ i + 1 ] [ j ] == ' 1 ' )",
        "char a [ i ] [ j - 1 ] = 0 ;",
        "if ( i >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        11,
        12
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l , l } ;",
        "if ( a [ i + 1 ] [ j ] == ' 1 ' )",
        "a [ i + 1 ] [ j ] = ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        11,
        12,
        16
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l , l } ;",
        "if ( a [ i + 1 ] [ j ] == ' 1 ' )",
        "a [ i + 1 ] [ j ] = ' 0 ' ;",
        "if ( i >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        11,
        16
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l , l } ;",
        "if ( a [ i + 1 ] [ j ] == ' 1 ' )",
        "if ( i >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        30
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l , l } ;",
        "char a [ i ] [ j - 1 ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        30,
        12
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l , l } ;",
        "char a [ i ] [ j - 1 ] = 0 ;",
        "a [ i + 1 ] [ j ] = ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        30,
        12,
        16
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l , l } ;",
        "char a [ i ] [ j - 1 ] = 0 ;",
        "a [ i + 1 ] [ j ] = ' 0 ' ;",
        "if ( i >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        30,
        16
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l , l } ;",
        "char a [ i ] [ j - 1 ] = 0 ;",
        "if ( i >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l , l } ;",
        "a [ i + 1 ] [ j ] = ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        12,
        16
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l , l } ;",
        "a [ i + 1 ] [ j ] = ' 0 ' ;",
        "if ( i >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l , l } ;",
        "if ( i >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "if ( a [ i + 1 ] [ j ] == ' 1 ' )",
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l } ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        11,
        1,
        30
      ],
      "mod_code": [
        "if ( a [ i + 1 ] [ j ] == ' 1 ' )",
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l } ;",
        "char a [ i ] [ j - 1 ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        11,
        1,
        30,
        12
      ],
      "mod_code": [
        "if ( a [ i + 1 ] [ j ] == ' 1 ' )",
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l } ;",
        "char a [ i ] [ j - 1 ] = 0 ;",
        "a [ i + 1 ] [ j ] = ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        11,
        1,
        30,
        16
      ],
      "mod_code": [
        "if ( a [ i + 1 ] [ j ] == ' 1 ' )",
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l } ;",
        "char a [ i ] [ j - 1 ] = 0 ;",
        "if ( i >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        11,
        1,
        12
      ],
      "mod_code": [
        "if ( a [ i + 1 ] [ j ] == ' 1 ' )",
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l } ;",
        "a [ i + 1 ] [ j ] = ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        11,
        1,
        12,
        16
      ],
      "mod_code": [
        "if ( a [ i + 1 ] [ j ] == ' 1 ' )",
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l } ;",
        "a [ i + 1 ] [ j ] = ' 0 ' ;",
        "if ( i >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        11,
        1,
        16
      ],
      "mod_code": [
        "if ( a [ i + 1 ] [ j ] == ' 1 ' )",
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l } ;",
        "if ( i >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        11,
        30
      ],
      "mod_code": [
        "if ( a [ i + 1 ] [ j ] == ' 1 ' )",
        "char a [ i ] [ j - 1 ] = 0 ;"
      ],
      "err_line": 30,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        11,
        30,
        12
      ],
      "mod_code": [
        "if ( a [ i + 1 ] [ j ] == ' 1 ' )",
        "char a [ i ] [ j - 1 ] = 0 ;",
        "a [ i + 1 ] [ j ] = ' 0 ' ;"
      ],
      "err_line": 30,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        11,
        30,
        12,
        16
      ],
      "mod_code": [
        "if ( a [ i + 1 ] [ j ] == ' 1 ' )",
        "char a [ i ] [ j - 1 ] = 0 ;",
        "a [ i + 1 ] [ j ] = ' 0 ' ;",
        "if ( i >= 0 )"
      ],
      "err_line": 30,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        11,
        30,
        16
      ],
      "mod_code": [
        "if ( a [ i + 1 ] [ j ] == ' 1 ' )",
        "char a [ i ] [ j - 1 ] = 0 ;",
        "if ( i >= 0 )"
      ],
      "err_line": 30,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        1,
        30
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l } ;",
        "char a [ i ] [ j - 1 ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        30,
        12
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l } ;",
        "char a [ i ] [ j - 1 ] = 0 ;",
        "a [ i + 1 ] [ j ] = ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        30,
        12,
        16
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l } ;",
        "char a [ i ] [ j - 1 ] = 0 ;",
        "a [ i + 1 ] [ j ] = ' 0 ' ;",
        "if ( i >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        30,
        16
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l } ;",
        "char a [ i ] [ j - 1 ] = 0 ;",
        "if ( i >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l } ;",
        "a [ i + 1 ] [ j ] = ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        12,
        16
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l } ;",
        "a [ i + 1 ] [ j ] = ' 0 ' ;",
        "if ( i >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "int 3 [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , l } ;",
        "if ( i >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        30,
        12
      ],
      "mod_code": [
        "char a [ i ] [ j - 1 ] = 0 ;",
        "a [ i + 1 ] [ j ] = ' 0 ' ;"
      ],
      "err_line": 30,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        30,
        12,
        16
      ],
      "mod_code": [
        "char a [ i ] [ j - 1 ] = 0 ;",
        "a [ i + 1 ] [ j ] = ' 0 ' ;",
        "if ( i >= 0 )"
      ],
      "err_line": 30,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        30,
        16
      ],
      "mod_code": [
        "char a [ i ] [ j - 1 ] = 0 ;",
        "if ( i >= 0 )"
      ],
      "err_line": 30,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    }
  ]
}