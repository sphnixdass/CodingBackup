{
  "meta": {
    "index": 1110,
    "hitid": "3CIS7GGG65DKIHQOXISB1ODDU67EUA",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1085A",
    "subid": "48553412"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a is string",
      "code": "string a ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare integers begin , i and n , with i = 1",
      "code": "int begin , i = 1 , n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if 0 = length of a % 2",
      "code": "if ( 0 == a . size ( ) % 2 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "begin = a . size ( ) / 2 - 1",
      "code": "begin = a . size ( ) / 2 - 1 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 7,
      "text": "begin = a . size ( ) / 2",
      "code": "begin = a . size ( ) / 2 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print a [ begin ]",
      "code": "cout << a [ begin ] ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "n = a . size ( ) - 1",
      "code": "n = a . size ( ) - 1 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "while i < = n",
      "code": "while ( i <= n )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if 1 = i % 2",
      "code": "if ( 1 == i % 2 )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "increase begin by i",
      "code": "begin += i ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "print a [ begin ]",
      "code": "cout << a [ begin ] ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 16,
      "text": "decrease begin by i",
      "code": "begin -= i ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "print a [ begin ]",
      "code": "cout << a [ begin ] ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "increase i by one",
      "code": "i ++ ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int begin , i , n , n ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gets ( a ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        7,
        9,
        6
      ],
      "mod_code": [
        "int begin , i , n = 1 ;",
        "a . size ( ) / 2 ;",
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        7,
        14,
        6
      ],
      "mod_code": [
        "int begin , i , n = 1 ;",
        "a . size ( ) / 2 ;",
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        7,
        17,
        6
      ],
      "mod_code": [
        "int begin , i , n = 1 ;",
        "a . size ( ) / 2 ;",
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        7,
        6
      ],
      "mod_code": [
        "int begin , i , n = 1 ;",
        "a . size ( ) / 2 ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        9,
        14,
        6
      ],
      "mod_code": [
        "int begin , i , n = 1 ;",
        "cout << a [ begin ] << endl ;",
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        9,
        17,
        6
      ],
      "mod_code": [
        "int begin , i , n = 1 ;",
        "cout << a [ begin ] << endl ;",
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        9,
        6
      ],
      "mod_code": [
        "int begin , i , n = 1 ;",
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        14,
        17,
        6
      ],
      "mod_code": [
        "int begin , i , n = 1 ;",
        "cout << a [ begin ] << endl ;",
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        14,
        6
      ],
      "mod_code": [
        "int begin , i , n = 1 ;",
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        17,
        6
      ],
      "mod_code": [
        "int begin , i , n = 1 ;",
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "int begin , i , n = 1 ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        9,
        14,
        6
      ],
      "mod_code": [
        "a . size ( ) / 2 ;",
        "cout << a [ begin ] << endl ;",
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        9,
        17,
        6
      ],
      "mod_code": [
        "a . size ( ) / 2 ;",
        "cout << a [ begin ] << endl ;",
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        9,
        6
      ],
      "mod_code": [
        "a . size ( ) / 2 ;",
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        14,
        17,
        6
      ],
      "mod_code": [
        "a . size ( ) / 2 ;",
        "cout << a [ begin ] << endl ;",
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        14,
        6
      ],
      "mod_code": [
        "a . size ( ) / 2 ;",
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        17,
        6
      ],
      "mod_code": [
        "a . size ( ) / 2 ;",
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "a . size ( ) / 2 ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        14,
        17,
        6
      ],
      "mod_code": [
        "cout << a [ begin ] << endl ;",
        "cout << a [ begin ] << endl ;",
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        14,
        6
      ],
      "mod_code": [
        "cout << a [ begin ] << endl ;",
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        17,
        6
      ],
      "mod_code": [
        "cout << a [ begin ] << endl ;",
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        17,
        6
      ],
      "mod_code": [
        "cout << a [ begin ] << endl ;",
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        6
      ],
      "mod_code": [
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        17,
        6
      ],
      "mod_code": [
        "cout << a [ begin ] << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}