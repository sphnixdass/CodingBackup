{
  "meta": {
    "index": 626,
    "hitid": "3TTPFEFXCTEB0GRPR12E6LWAJL26H7",
    "workerid": "AIWEXPJAU66D9",
    "probid": "14A",
    "subid": "45382706"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n and m be integers",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "lett ( n ) is vector of strings",
      "code": "vector < string > lett ( n ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "errl = 1",
      "code": "bool errl = 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read lett [ i ]",
      "code": "cin >> lett [ i ] ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if errl is true",
      "code": "if ( errl )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "err = 0",
      "code": "bool err = 0 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "for j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if lett [ i ] [ j ] is equal to ' * '",
      "code": "if ( lett [ i ] [ j ] == ' * ' )",
      "indent": 4
    },
    {
      "line": 11,
      "text": "set err to 1",
      "code": "err = 1 ;",
      "indent": 5
    },
    {
      "line": 12,
      "text": "break the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if err",
      "code": "if ( err )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "set value of errl to 0",
      "code": "errl = 0 ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 18,
      "text": "set value of lett [ i ] to \" \"",
      "code": "lett [ i ] = \" \" ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "for i = n - 1 to 0 inclusive , decrement i",
      "code": "for ( int i = n - 1 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "err = 0",
      "code": "bool err = 0 ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "for integer j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if lett [ i ] [ j ] is equal to ' * '",
      "code": "if ( lett [ i ] [ j ] == ' * ' )",
      "indent": 3
    },
    {
      "line": 26,
      "text": "set value of err to 1",
      "code": "err = 1 ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "if err is true",
      "code": "if ( err )",
      "indent": 2
    },
    {
      "line": 31,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 33,
      "text": "set value of lett [ i ] to \" \"",
      "code": "lett [ i ] = \" \" ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 36,
      "text": "for integer i = 0 to m exclusive",
      "code": "for ( int i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 37,
      "text": "set err to 0",
      "code": "bool err = 0 ;",
      "indent": 2
    },
    {
      "line": 38,
      "text": "for j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 39,
      "text": "if lett [ j ] [ i ] is equal to ' * '",
      "code": "if ( lett [ j ] [ i ] == ' * ' )",
      "indent": 3
    },
    {
      "line": 40,
      "text": "err = 1",
      "code": "err = 1 ;",
      "indent": 4
    },
    {
      "line": 41,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 44,
      "text": "if err",
      "code": "if ( err )",
      "indent": 2
    },
    {
      "line": 45,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 46,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 47,
      "text": "for integer j = 0 to n exclusive , set lett [ j ] [ i ] to ' '",
      "code": "for ( int j = 0 ; j < n ; j ++ ) { lett [ j ] [ i ] = ' ' ; }",
      "indent": 3
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 50,
      "text": "for i = m to 0",
      "code": "for ( int i = m - 1 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 51,
      "text": "err = 0",
      "code": "bool err = 0 ;",
      "indent": 2
    },
    {
      "line": 52,
      "text": "for j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 53,
      "text": "if lett [ j ] [ i ] is equal to ' * '",
      "code": "if ( lett [ j ] [ i ] == ' * ' )",
      "indent": 3
    },
    {
      "line": 54,
      "text": "set value of err to 1",
      "code": "err = 1 ;",
      "indent": 4
    },
    {
      "line": 55,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 57,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 58,
      "text": "if err",
      "code": "if ( err )",
      "indent": 2
    },
    {
      "line": 59,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 60,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 61,
      "text": "for j = 0 to n exclusive , set lett [ j ] [ i ] to ' '",
      "code": "for ( int j = 0 ; j < n ; j ++ ) { lett [ j ] [ i ] = ' ' ; }",
      "indent": 3
    },
    {
      "line": 62,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 63,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 64,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 65,
      "text": "if lett [ i ] ! = \" \"",
      "code": "if ( lett [ i ] != \" \" )",
      "indent": 2
    },
    {
      "line": 66,
      "text": "for j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 3
    },
    {
      "line": 67,
      "text": "if lett [ i ] [ j ] is not ' ' , print lett [ i ] [ j ]",
      "code": "if ( lett [ i ] [ j ] != ' ' ) { cout << lett [ i ] [ j ] ; }",
      "indent": 4
    },
    {
      "line": 68,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 69,
      "text": "print ' \\ n '",
      "code": "cout << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 70,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 71,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 72,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 73,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "errl = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "err = 0 ;"
      ],
      "err_line": 37,
      "err_msg": "‘err’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 2,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "vector < string > strings ( n ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘lett’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "cin >> lett >> lett [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "err = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘err’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( strcmp ( lett [ i ] [ j ] == ' * ' ) )"
      ],
      "err_line": 10,
      "err_msg": "cannot convert ‘bool’ to ‘const char*’ for argument ‘1’ to ‘int strcmp(const char*, const char*)’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "* errl = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘bool’)"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "lett [ i ] ] = \" \" ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 22,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "err = 0 ;"
      ],
      "err_line": 23,
      "err_msg": "‘err’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "if ( strcmp ( lett [ i ] [ j ] == ' * ' ) )"
      ],
      "err_line": 25,
      "err_msg": "cannot convert ‘bool’ to ‘const char*’ for argument ‘1’ to ‘int strcmp(const char*, const char*)’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "* err = 1 ;"
      ],
      "err_line": 26,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘bool’)"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "lett [ i ] ] = \" \" ;"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 38,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 41,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        50
      ],
      "mod_code": [
        "for ( i = m ; i >= 0 ; i -- )"
      ],
      "err_line": 50,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        51
      ],
      "mod_code": [
        "err = 0 ;"
      ],
      "err_line": 51,
      "err_msg": "‘err’ was not declared in this scope"
    },
    {
      "mod_line": [
        52
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 52,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        54
      ],
      "mod_code": [
        "* err = 1 ;"
      ],
      "err_line": 54,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘bool’)"
    },
    {
      "mod_line": [
        59
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 59,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        66
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 66,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        37
      ],
      "mod_code": [
        "errl = 1 ;",
        "err = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        37,
        67
      ],
      "mod_code": [
        "errl = 1 ;",
        "err = 0 ;",
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        37,
        67,
        59
      ],
      "mod_code": [
        "errl = 1 ;",
        "err = 0 ;",
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        37,
        67,
        8
      ],
      "mod_code": [
        "errl = 1 ;",
        "err = 0 ;",
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "err = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        37,
        67,
        31
      ],
      "mod_code": [
        "errl = 1 ;",
        "err = 0 ;",
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        37,
        59
      ],
      "mod_code": [
        "errl = 1 ;",
        "err = 0 ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        37,
        59,
        8
      ],
      "mod_code": [
        "errl = 1 ;",
        "err = 0 ;",
        "break break ;",
        "err = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        37,
        59,
        31
      ],
      "mod_code": [
        "errl = 1 ;",
        "err = 0 ;",
        "break break ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        37,
        8
      ],
      "mod_code": [
        "errl = 1 ;",
        "err = 0 ;",
        "err = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        37,
        8,
        31
      ],
      "mod_code": [
        "errl = 1 ;",
        "err = 0 ;",
        "err = 0 ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        37,
        31
      ],
      "mod_code": [
        "errl = 1 ;",
        "err = 0 ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        67
      ],
      "mod_code": [
        "errl = 1 ;",
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        67,
        59
      ],
      "mod_code": [
        "errl = 1 ;",
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        67,
        59,
        8
      ],
      "mod_code": [
        "errl = 1 ;",
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "break break ;",
        "err = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        67,
        59,
        31
      ],
      "mod_code": [
        "errl = 1 ;",
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "break break ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        67,
        8
      ],
      "mod_code": [
        "errl = 1 ;",
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "err = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        67,
        8,
        31
      ],
      "mod_code": [
        "errl = 1 ;",
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "err = 0 ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        67,
        31
      ],
      "mod_code": [
        "errl = 1 ;",
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        59
      ],
      "mod_code": [
        "errl = 1 ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        59,
        8
      ],
      "mod_code": [
        "errl = 1 ;",
        "break break ;",
        "err = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        59,
        8,
        31
      ],
      "mod_code": [
        "errl = 1 ;",
        "break break ;",
        "err = 0 ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        59,
        31
      ],
      "mod_code": [
        "errl = 1 ;",
        "break break ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "errl = 1 ;",
        "err = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8,
        31
      ],
      "mod_code": [
        "errl = 1 ;",
        "err = 0 ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        31
      ],
      "mod_code": [
        "errl = 1 ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘errl’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        67
      ],
      "mod_code": [
        "err = 0 ;",
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;"
      ],
      "err_line": 37,
      "err_msg": "‘err’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        67,
        59
      ],
      "mod_code": [
        "err = 0 ;",
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "break break ;"
      ],
      "err_line": 37,
      "err_msg": "‘err’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        67,
        59,
        8
      ],
      "mod_code": [
        "err = 0 ;",
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "break break ;",
        "err = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘err’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        67,
        59,
        31
      ],
      "mod_code": [
        "err = 0 ;",
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "break break ;",
        "break break ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        37,
        67,
        8
      ],
      "mod_code": [
        "err = 0 ;",
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "err = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘err’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        67,
        8,
        31
      ],
      "mod_code": [
        "err = 0 ;",
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "err = 0 ;",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "‘err’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        67,
        31
      ],
      "mod_code": [
        "err = 0 ;",
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "break break ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        37,
        59
      ],
      "mod_code": [
        "err = 0 ;",
        "break break ;"
      ],
      "err_line": 37,
      "err_msg": "‘err’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        59,
        8
      ],
      "mod_code": [
        "err = 0 ;",
        "break break ;",
        "err = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘err’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        59,
        8,
        31
      ],
      "mod_code": [
        "err = 0 ;",
        "break break ;",
        "err = 0 ;",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "‘err’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        59,
        31
      ],
      "mod_code": [
        "err = 0 ;",
        "break break ;",
        "break break ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        37,
        8
      ],
      "mod_code": [
        "err = 0 ;",
        "err = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘err’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        8,
        31
      ],
      "mod_code": [
        "err = 0 ;",
        "err = 0 ;",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "‘err’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        31
      ],
      "mod_code": [
        "err = 0 ;",
        "break break ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        67,
        59
      ],
      "mod_code": [
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "break break ;"
      ],
      "err_line": 59,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        67,
        59,
        8
      ],
      "mod_code": [
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "break break ;",
        "err = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘err’ was not declared in this scope"
    },
    {
      "mod_line": [
        67,
        59,
        8,
        31
      ],
      "mod_code": [
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "break break ;",
        "err = 0 ;",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "‘err’ was not declared in this scope"
    },
    {
      "mod_line": [
        67,
        59,
        31
      ],
      "mod_code": [
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "break break ;",
        "break break ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        67,
        8
      ],
      "mod_code": [
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "err = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘err’ was not declared in this scope"
    },
    {
      "mod_line": [
        67,
        8,
        31
      ],
      "mod_code": [
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "err = 0 ;",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "‘err’ was not declared in this scope"
    },
    {
      "mod_line": [
        67,
        31
      ],
      "mod_code": [
        "if ( lett [ i ] [ j ] != ' ' ) cout << lett [ i ] [ j ] << endl ;",
        "break break ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        59,
        8
      ],
      "mod_code": [
        "break break ;",
        "err = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘err’ was not declared in this scope"
    },
    {
      "mod_line": [
        59,
        8,
        31
      ],
      "mod_code": [
        "break break ;",
        "err = 0 ;",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "‘err’ was not declared in this scope"
    },
    {
      "mod_line": [
        59,
        31
      ],
      "mod_code": [
        "break break ;",
        "break break ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        8,
        31
      ],
      "mod_code": [
        "err = 0 ;",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "‘err’ was not declared in this scope"
    }
  ]
}