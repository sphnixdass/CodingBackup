{
  "meta": {
    "index": 1357,
    "hitid": "3NZ1E5QA6ZV5QZOPMQIDS4FCSS35BL",
    "workerid": "A1AYVATMT88U1W",
    "probid": "75A",
    "subid": "48550122"
  },
  "lines": [
    {
      "line": 0,
      "text": "let a , b be integers",
      "code": "int a , b ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let c1 , c2 be integers",
      "code": "int c1 , c2 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let getNum ( int m ) be a integer that gets all the values",
      "code": "int getNum ( int m )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "let ds be an integer with value 0",
      "code": "int ds = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let currMod be an integer with value 0",
      "code": "int currMod = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let ans be an integer with value 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "check while ( m value )",
      "code": "while ( m )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "currMod is equal to m % 10",
      "code": "currMod = m % 10 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "m is equal to ( m / 10 )",
      "code": "m /= 10 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if ( currMod is not equal to 0 )",
      "code": "if ( currMod != 0 )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "ans is equal to ( ans + currMod * ( power of ( 10 , ds ) ) )",
      "code": "ans += currMod * ( pow ( 10 , ds ) ) ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "increase ds by 1",
      "code": "ds ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "return value of ans",
      "code": "return ans ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 17,
      "text": "read a , b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "c1 is equal to a + b",
      "code": "c1 = a + b ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "c2 is equal to getNum ( c1 )",
      "code": "c2 = getNum ( c1 ) ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if ( getNum ( a ) + getNum ( b ) is equal to c2 )",
      "code": "if ( getNum ( a ) + getNum ( b ) == c2 )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print YES and newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print NO and newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int getNum = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "ans += currMod * ( power ( 10 , ds ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int getNum [ gets ( m , m ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "ans += currMod * ( abs ( 10 , ds ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘abs(int, int&)’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "int getNum = getchar ( ) ;",
        "while ( m -- )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        6,
        10
      ],
      "mod_code": [
        "int getNum = getchar ( ) ;",
        "while ( m -- )",
        "ans += currMod * ( power ( 10 , ds ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        6,
        10,
        9
      ],
      "mod_code": [
        "int getNum = getchar ( ) ;",
        "while ( m -- )",
        "ans += currMod * ( power ( 10 , ds ) ) ;",
        "if ( currMod == 0 )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        6,
        10,
        7
      ],
      "mod_code": [
        "int getNum = getchar ( ) ;",
        "while ( m -- )",
        "ans += currMod * ( power ( 10 , ds ) ) ;",
        "currMod += 10 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        6,
        9
      ],
      "mod_code": [
        "int getNum = getchar ( ) ;",
        "while ( m -- )",
        "if ( currMod == 0 )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        6,
        9,
        7
      ],
      "mod_code": [
        "int getNum = getchar ( ) ;",
        "while ( m -- )",
        "if ( currMod == 0 )",
        "currMod += 10 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        6,
        7
      ],
      "mod_code": [
        "int getNum = getchar ( ) ;",
        "while ( m -- )",
        "currMod += 10 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "int getNum = getchar ( ) ;",
        "ans += currMod * ( power ( 10 , ds ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        10,
        9
      ],
      "mod_code": [
        "int getNum = getchar ( ) ;",
        "ans += currMod * ( power ( 10 , ds ) ) ;",
        "if ( currMod == 0 )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        10,
        9,
        7
      ],
      "mod_code": [
        "int getNum = getchar ( ) ;",
        "ans += currMod * ( power ( 10 , ds ) ) ;",
        "if ( currMod == 0 )",
        "currMod += 10 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        10,
        7
      ],
      "mod_code": [
        "int getNum = getchar ( ) ;",
        "ans += currMod * ( power ( 10 , ds ) ) ;",
        "currMod += 10 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "int getNum = getchar ( ) ;",
        "if ( currMod == 0 )"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        9,
        7
      ],
      "mod_code": [
        "int getNum = getchar ( ) ;",
        "if ( currMod == 0 )",
        "currMod += 10 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "int getNum = getchar ( ) ;",
        "currMod += 10 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "while ( m -- )",
        "ans += currMod * ( power ( 10 , ds ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        9
      ],
      "mod_code": [
        "while ( m -- )",
        "ans += currMod * ( power ( 10 , ds ) ) ;",
        "if ( currMod == 0 )"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        9,
        7
      ],
      "mod_code": [
        "while ( m -- )",
        "ans += currMod * ( power ( 10 , ds ) ) ;",
        "if ( currMod == 0 )",
        "currMod += 10 ;"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        9,
        2
      ],
      "mod_code": [
        "while ( m -- )",
        "ans += currMod * ( power ( 10 , ds ) ) ;",
        "if ( currMod == 0 )",
        "int getNum [ gets ( m , m ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        7
      ],
      "mod_code": [
        "while ( m -- )",
        "ans += currMod * ( power ( 10 , ds ) ) ;",
        "currMod += 10 ;"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        7,
        2
      ],
      "mod_code": [
        "while ( m -- )",
        "ans += currMod * ( power ( 10 , ds ) ) ;",
        "currMod += 10 ;",
        "int getNum [ gets ( m , m ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        2
      ],
      "mod_code": [
        "while ( m -- )",
        "ans += currMod * ( power ( 10 , ds ) ) ;",
        "int getNum [ gets ( m , m ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        7,
        2
      ],
      "mod_code": [
        "while ( m -- )",
        "if ( currMod == 0 )",
        "currMod += 10 ;",
        "int getNum [ gets ( m , m ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        2
      ],
      "mod_code": [
        "while ( m -- )",
        "if ( currMod == 0 )",
        "int getNum [ gets ( m , m ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        2
      ],
      "mod_code": [
        "while ( m -- )",
        "currMod += 10 ;",
        "int getNum [ gets ( m , m ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "while ( m -- )",
        "int getNum [ gets ( m , m ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "ans += currMod * ( power ( 10 , ds ) ) ;",
        "if ( currMod == 0 )"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        9,
        7
      ],
      "mod_code": [
        "ans += currMod * ( power ( 10 , ds ) ) ;",
        "if ( currMod == 0 )",
        "currMod += 10 ;"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        9,
        7,
        2
      ],
      "mod_code": [
        "ans += currMod * ( power ( 10 , ds ) ) ;",
        "if ( currMod == 0 )",
        "currMod += 10 ;",
        "int getNum [ gets ( m , m ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        9,
        2
      ],
      "mod_code": [
        "ans += currMod * ( power ( 10 , ds ) ) ;",
        "if ( currMod == 0 )",
        "int getNum [ gets ( m , m ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "ans += currMod * ( power ( 10 , ds ) ) ;",
        "currMod += 10 ;"
      ],
      "err_line": 10,
      "err_msg": "‘power’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        7,
        2
      ],
      "mod_code": [
        "ans += currMod * ( power ( 10 , ds ) ) ;",
        "currMod += 10 ;",
        "int getNum [ gets ( m , m ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "ans += currMod * ( power ( 10 , ds ) ) ;",
        "int getNum [ gets ( m , m ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        7,
        2
      ],
      "mod_code": [
        "if ( currMod == 0 )",
        "currMod += 10 ;",
        "int getNum [ gets ( m , m ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "if ( currMod == 0 )",
        "int getNum [ gets ( m , m ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "currMod += 10 ;",
        "int getNum [ gets ( m , m ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘m’ was not declared in this scope"
    }
  ]
}