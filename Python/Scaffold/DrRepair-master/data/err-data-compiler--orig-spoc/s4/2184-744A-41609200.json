{
  "meta": {
    "index": 2184,
    "hitid": "3SNR5F7R92NF9QVO313XILP21YHIEE",
    "workerid": "A24WRPQYGMQLGF",
    "probid": "744A",
    "subid": "41609200"
  },
  "lines": [
    {
      "line": 0,
      "text": "fa = integer array of size 202002",
      "code": "int fa [ 202002 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "sum = integer array of size 202002",
      "code": "int sum [ 202002 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "c = integer array of size 202002",
      "code": "int c [ 202002 ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "in function max with arguments of integer a and integer b that returns an integer",
      "code": "int max ( int a , int b )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "if a > b",
      "code": "if ( a > b )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "return a",
      "code": "return a ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 7,
      "text": "return b",
      "code": "return b ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "in function findfa with arguments integer x that returns an integer",
      "code": "int findfa ( int x )",
      "indent": 0
    },
    {
      "line": 10,
      "text": "if fa [ x ] is x",
      "code": "if ( fa [ x ] == x )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "return x",
      "code": "return x ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "return the result of calling findfa with argument of fa [ x ]",
      "code": "return findfa ( fa [ x ] ) ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 15,
      "text": "in function joint with argument integer x and integer y that returns nothing",
      "code": "void joint ( int x , int y )",
      "indent": 0
    },
    {
      "line": 16,
      "text": "rx = integer = the result of calling findfa with argument of x",
      "code": "int rx = findfa ( x ) ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "ry = integer = the result of calling findfa with argument of y",
      "code": "int ry = findfa ( y ) ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if rx is not ry",
      "code": "if ( rx != ry )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "fa [ rx ] = ry",
      "code": "fa [ rx ] = ry ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "sum [ ry ] = sum [ ry ] + sum [ rx ]",
      "code": "sum [ ry ] += sum [ rx ] ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 23,
      "text": "vis = boolean array of size 202002",
      "code": "bool vis [ 202002 ] ;",
      "indent": 0
    },
    {
      "line": 24,
      "text": "vec = integer vector",
      "code": "vector < int > vec ;",
      "indent": 0
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 26,
      "text": "n , m , k = integer",
      "code": "int n , m , k ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "read n , m , k",
      "code": "cin >> n >> m >> k ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "clear all elements of vec",
      "code": "vec . clear ( ) ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "for i = 0 to n inclusive",
      "code": "for ( int i = 0 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "fa [ i ] = i",
      "code": "fa [ i ] = i ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "sum [ i ] = 1",
      "code": "sum [ i ] = 1 ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 33,
      "text": "for i = 0 to k exclusive , then read c [ i ]",
      "code": "for ( int i = 0 ; i < k ; i ++ ) cin >> c [ i ] ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "x , y = integers",
      "code": "int x , y ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "for i = 0 to m exclusive",
      "code": "for ( int i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 36,
      "text": "read x , y",
      "code": "cin >> x >> y ;",
      "indent": 2
    },
    {
      "line": 37,
      "text": "call join with arguments of x and y",
      "code": "joint ( x , y ) ;",
      "indent": 2
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 39,
      "text": "set all elements of vis to 0",
      "code": "memset ( vis , 0 , sizeof ( vis ) ) ;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "for i = 0 to k exclusive , vis [ the result of calling findfa with argument c [ i ] = 1",
      "code": "for ( int i = 0 ; i < k ; i ++ ) vis [ findfa ( c [ i ] ) ] = 1 ;",
      "indent": 1
    },
    {
      "line": 41,
      "text": "mx = integer = - 1",
      "code": "int mx = - 1 ;",
      "indent": 1
    },
    {
      "line": 42,
      "text": "ans = long long = 0",
      "code": "long long ans = 0 ;",
      "indent": 1
    },
    {
      "line": 43,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 44,
      "text": "if fa [ i ] is i",
      "code": "if ( fa [ i ] == i )",
      "indent": 2
    },
    {
      "line": 45,
      "text": "if vis [ i ] is 1",
      "code": "if ( vis [ i ] == 1 )",
      "indent": 3
    },
    {
      "line": 46,
      "text": "mx = the bigger value between mx and sum [ i ]",
      "code": "mx = max ( mx , sum [ i ] ) ;",
      "indent": 4
    },
    {
      "line": 47,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 48,
      "text": "push back the values of vec and insert a new element of sum [ i ] at the end of vec",
      "code": "vec . push_back ( sum [ i ] ) ;",
      "indent": 4
    },
    {
      "line": 49,
      "text": "ans = ans + sum [ i ] * ( sum [ i ] - 1 ) / 2",
      "code": "ans += sum [ i ] * ( sum [ i ] - 1 ) / 2 ;",
      "indent": 3
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 51,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 52,
      "text": "sz = integer = size of vec",
      "code": "int sz = vec . size ( ) ;",
      "indent": 1
    },
    {
      "line": 53,
      "text": "for i = 0 to sz exclusive",
      "code": "for ( int i = 0 ; i < sz ; i ++ )",
      "indent": 1
    },
    {
      "line": 54,
      "text": "for j = i + 1 to sz exclusive , then ans = ans + vec [ i ] * vec [ j ]",
      "code": "for ( int j = i + 1 ; j < sz ; j ++ ) { ans += vec [ i ] * vec [ j ] ; }",
      "indent": 2
    },
    {
      "line": 55,
      "text": "ans = ans + vec [ i ] * mx",
      "code": "ans += vec [ i ] * mx ;",
      "indent": 2
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 57,
      "text": "ans = ans - m",
      "code": "ans -= m ;",
      "indent": 1
    },
    {
      "line": 58,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 59,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 60,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "join ( x , y ) ;"
      ],
      "err_line": 37,
      "err_msg": "‘join’ was not declared in this scope"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }"
      ],
      "err_line": 40,
      "err_msg": "assignment of read-only location ‘*(findfa + ((sizetype)i))’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int max ( int a , int b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "return findfa = fa [ x ] ;"
      ],
      "err_line": 13,
      "err_msg": "assignment of function ‘int findfa(int)’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "int rx = findfa ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "int ry = findfa ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "vec . push ( vec ) ;"
      ],
      "err_line": 28,
      "err_msg": "‘class std::vector<int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "for ( i = 0 ; i <= n ; i ++ )"
      ],
      "err_line": 29,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "for ( i = 0 ; i < m ; i ++ )"
      ],
      "err_line": 35,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "join ( ( x , y ) ) ;"
      ],
      "err_line": 37,
      "err_msg": "‘join’ was not declared in this scope"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i . = findfa [ i ] = 1 ; }"
      ],
      "err_line": 40,
      "err_msg": "expected unqualified-id before ‘=’ token"
    },
    {
      "mod_line": [
        43
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 43,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        46
      ],
      "mod_code": [
        "mx = mx max max ( mx , sum [ i ] ) ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘max’"
    },
    {
      "mod_line": [
        47
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 47,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        48
      ],
      "mod_code": [
        "vec . push_back ( sum ) ;"
      ],
      "err_line": 48,
      "err_msg": "invalid conversion from ‘int*’ to ‘std::vector<int>::value_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        52
      ],
      "mod_code": [
        "int sz = vec . length ( ) ;"
      ],
      "err_line": 52,
      "err_msg": "‘class std::vector<int>’ has no member named ‘length’"
    },
    {
      "mod_line": [
        53
      ],
      "mod_code": [
        "for ( i = 0 ; i < sz ; i ++ )"
      ],
      "err_line": 53,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        40
      ],
      "mod_code": [
        "join ( x , y ) ;",
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }"
      ],
      "err_line": 37,
      "err_msg": "‘join’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        40,
        16
      ],
      "mod_code": [
        "join ( x , y ) ;",
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }",
        "int rx = findfa ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        40,
        16,
        31
      ],
      "mod_code": [
        "join ( x , y ) ;",
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }",
        "int rx = findfa ;",
        "sum [ ' i ' ] = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        40,
        16,
        10
      ],
      "mod_code": [
        "join ( x , y ) ;",
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }",
        "int rx = findfa ;",
        "if ( ! fa [ x ] )"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        40,
        31
      ],
      "mod_code": [
        "join ( x , y ) ;",
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }",
        "sum [ ' i ' ] = 1 ;"
      ],
      "err_line": 37,
      "err_msg": "‘join’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        40,
        31,
        10
      ],
      "mod_code": [
        "join ( x , y ) ;",
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }",
        "sum [ ' i ' ] = 1 ;",
        "if ( ! fa [ x ] )"
      ],
      "err_line": 37,
      "err_msg": "‘join’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        40,
        10
      ],
      "mod_code": [
        "join ( x , y ) ;",
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }",
        "if ( ! fa [ x ] )"
      ],
      "err_line": 37,
      "err_msg": "‘join’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        16
      ],
      "mod_code": [
        "join ( x , y ) ;",
        "int rx = findfa ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        16,
        31
      ],
      "mod_code": [
        "join ( x , y ) ;",
        "int rx = findfa ;",
        "sum [ ' i ' ] = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        16,
        31,
        10
      ],
      "mod_code": [
        "join ( x , y ) ;",
        "int rx = findfa ;",
        "sum [ ' i ' ] = 1 ;",
        "if ( ! fa [ x ] )"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        16,
        10
      ],
      "mod_code": [
        "join ( x , y ) ;",
        "int rx = findfa ;",
        "if ( ! fa [ x ] )"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        31
      ],
      "mod_code": [
        "join ( x , y ) ;",
        "sum [ ' i ' ] = 1 ;"
      ],
      "err_line": 37,
      "err_msg": "‘join’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        31,
        10
      ],
      "mod_code": [
        "join ( x , y ) ;",
        "sum [ ' i ' ] = 1 ;",
        "if ( ! fa [ x ] )"
      ],
      "err_line": 37,
      "err_msg": "‘join’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        10
      ],
      "mod_code": [
        "join ( x , y ) ;",
        "if ( ! fa [ x ] )"
      ],
      "err_line": 37,
      "err_msg": "‘join’ was not declared in this scope"
    },
    {
      "mod_line": [
        40,
        37
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }",
        "join ( ( x , y ) ) ;"
      ],
      "err_line": 37,
      "err_msg": "‘join’ was not declared in this scope"
    },
    {
      "mod_line": [
        40,
        37,
        16
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }",
        "join ( ( x , y ) ) ;",
        "int rx = findfa ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        40,
        37,
        16,
        31
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }",
        "join ( ( x , y ) ) ;",
        "int rx = findfa ;",
        "sum [ ' i ' ] = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        40,
        37,
        16,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }",
        "join ( ( x , y ) ) ;",
        "int rx = findfa ;",
        "if ( ! fa [ x ] )"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        40,
        37,
        31
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }",
        "join ( ( x , y ) ) ;",
        "sum [ ' i ' ] = 1 ;"
      ],
      "err_line": 37,
      "err_msg": "‘join’ was not declared in this scope"
    },
    {
      "mod_line": [
        40,
        37,
        31,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }",
        "join ( ( x , y ) ) ;",
        "sum [ ' i ' ] = 1 ;",
        "if ( ! fa [ x ] )"
      ],
      "err_line": 37,
      "err_msg": "‘join’ was not declared in this scope"
    },
    {
      "mod_line": [
        40,
        37,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }",
        "join ( ( x , y ) ) ;",
        "if ( ! fa [ x ] )"
      ],
      "err_line": 37,
      "err_msg": "‘join’ was not declared in this scope"
    },
    {
      "mod_line": [
        40,
        16
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }",
        "int rx = findfa ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        40,
        16,
        31
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }",
        "int rx = findfa ;",
        "sum [ ' i ' ] = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        40,
        16,
        31,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }",
        "int rx = findfa ;",
        "sum [ ' i ' ] = 1 ;",
        "if ( ! fa [ x ] )"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        40,
        16,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }",
        "int rx = findfa ;",
        "if ( ! fa [ x ] )"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        40,
        31
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }",
        "sum [ ' i ' ] = 1 ;"
      ],
      "err_line": 40,
      "err_msg": "assignment of read-only location ‘*(findfa + ((sizetype)i))’"
    },
    {
      "mod_line": [
        40,
        31,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }",
        "sum [ ' i ' ] = 1 ;",
        "if ( ! fa [ x ] )"
      ],
      "err_line": 40,
      "err_msg": "assignment of read-only location ‘*(findfa + ((sizetype)i))’"
    },
    {
      "mod_line": [
        40,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { vis [ i ] = findfa [ i ] = 1 ; }",
        "if ( ! fa [ x ] )"
      ],
      "err_line": 40,
      "err_msg": "assignment of read-only location ‘*(findfa + ((sizetype)i))’"
    },
    {
      "mod_line": [
        37,
        16
      ],
      "mod_code": [
        "join ( ( x , y ) ) ;",
        "int rx = findfa ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        16,
        31
      ],
      "mod_code": [
        "join ( ( x , y ) ) ;",
        "int rx = findfa ;",
        "sum [ ' i ' ] = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        16,
        31,
        10
      ],
      "mod_code": [
        "join ( ( x , y ) ) ;",
        "int rx = findfa ;",
        "sum [ ' i ' ] = 1 ;",
        "if ( ! fa [ x ] )"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        16,
        10
      ],
      "mod_code": [
        "join ( ( x , y ) ) ;",
        "int rx = findfa ;",
        "if ( ! fa [ x ] )"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        37,
        31
      ],
      "mod_code": [
        "join ( ( x , y ) ) ;",
        "sum [ ' i ' ] = 1 ;"
      ],
      "err_line": 37,
      "err_msg": "‘join’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        31,
        10
      ],
      "mod_code": [
        "join ( ( x , y ) ) ;",
        "sum [ ' i ' ] = 1 ;",
        "if ( ! fa [ x ] )"
      ],
      "err_line": 37,
      "err_msg": "‘join’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        10
      ],
      "mod_code": [
        "join ( ( x , y ) ) ;",
        "if ( ! fa [ x ] )"
      ],
      "err_line": 37,
      "err_msg": "‘join’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        31
      ],
      "mod_code": [
        "int rx = findfa ;",
        "sum [ ' i ' ] = 1 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        31,
        10
      ],
      "mod_code": [
        "int rx = findfa ;",
        "sum [ ' i ' ] = 1 ;",
        "if ( ! fa [ x ] )"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        10
      ],
      "mod_code": [
        "int rx = findfa ;",
        "if ( ! fa [ x ] )"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    }
  ]
}