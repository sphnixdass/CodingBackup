{
  "meta": {
    "index": 678,
    "hitid": "3A9LA2FRWS8OJVBLSOB46Y9UHRFHXV",
    "workerid": "AIWEXPJAU66D9",
    "probid": "14A",
    "subid": "29846984"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n and m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and m from the input",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "char * * shap = new char * [ n ]",
      "code": "char * * shap = new char * [ n ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i from 0 to n exclusive , set shap [ i ] to newchar [ m ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) shap [ i ] = new char [ m ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create ints rows , colums , rowe and colume",
      "code": "int rows , colums , rowe , colume ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "in a loop for j from 0 to m exclusive , read user input to shap [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < m ; j ++ ) { cin >> shap [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "create new boolean variable e with value false",
      "code": "bool e = false ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "in a for loop , change i from 0 to n exclusive incrementing i",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "declare integer variable j = 0",
      "code": "int j = 0 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "in a loop until j is less than m , increment j",
      "code": "for ( j ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if shap [ i ] [ j ] is equal to ' * '",
      "code": "if ( shap [ i ] [ j ] == ' * ' )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "assign i to rows",
      "code": "rows = i ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "assign true to e",
      "code": "e = true ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if e = true , break the loop",
      "code": "if ( e == true ) { break ; }",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "assign false to e",
      "code": "e = false ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "start for loop from j = 0 to m exclusive incrementing j",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "create integer variable with name i with value 0",
      "code": "int i = 0 ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "in a for loop , increment i by 1 up to n exclusive",
      "code": "for ( i ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if shap [ i ] [ j ] is equal to ' * '",
      "code": "if ( shap [ i ] [ j ] == ' * ' )",
      "indent": 3
    },
    {
      "line": 26,
      "text": "change the value of colums to j",
      "code": "colums = j ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "assign the new value = true to e",
      "code": "e = true ;",
      "indent": 4
    },
    {
      "line": 28,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 31,
      "text": "if e = true , break",
      "code": "if ( e == true ) { break ; }",
      "indent": 2
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 33,
      "text": "for j from colums to m exclusive",
      "code": "for ( int j = colums ; j < m ; j ++ )",
      "indent": 1
    },
    {
      "line": 34,
      "text": "create new integer variable i with value rows",
      "code": "int i = rows ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "loop while i < n , incrementing i",
      "code": "for ( i ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 36,
      "text": "if shap [ i ] [ j ] is equal to ' * ' , assign the new value = j to colume",
      "code": "if ( shap [ i ] [ j ] == ' * ' ) colume = j ;",
      "indent": 3
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 39,
      "text": "in a for loop , change i from rows to n exclusive",
      "code": "for ( int i = rows ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 40,
      "text": "declare integer variable j with value colums",
      "code": "int j = colums ;",
      "indent": 2
    },
    {
      "line": 41,
      "text": "for j = to m exclusive",
      "code": "for ( j ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 42,
      "text": "if shap [ i ] [ j ] is equal to ' * ' , assign the new value = i to rowe",
      "code": "if ( shap [ i ] [ j ] == ' * ' ) rowe = i ;",
      "indent": 3
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 45,
      "text": "start for loop from i = rows to rowe inclusive incrementing i",
      "code": "for ( int i = rows ; i <= rowe ; i ++ )",
      "indent": 1
    },
    {
      "line": 46,
      "text": "for j from colums to colume inclusive , print shap [ i ] [ j ]",
      "code": "for ( int j = colums ; j <= colume ; j ++ ) { cout << shap [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 47,
      "text": "print new line to the standard output",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "for ( ; i < n ; i ++ )"
      ],
      "err_line": 39,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n >> m )"
      ],
      "err_line": 4,
      "err_msg": "‘shap’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) shap [ i ] [ i ] [ i ] = newchar [ m ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int rows , colums , rowe [ colume ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘colume’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "bool e e ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘e’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( strcmp ( shap [ i ] [ j ] == ' * ' ) )"
      ],
      "err_line": 13,
      "err_msg": "cannot convert ‘bool’ to ‘const char*’ for argument ‘1’ to ‘int strcmp(const char*, const char*)’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 22,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "if ( strcmp ( shap [ i ] [ j ] == ' * ' ) )"
      ],
      "err_line": 25,
      "err_msg": "cannot convert ‘bool’ to ‘const char*’ for argument ‘1’ to ‘int strcmp(const char*, const char*)’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "colums to ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 28,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "for ( j = colums ; j < m ; j ++ )"
      ],
      "err_line": 33,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "int i = * rows ;"
      ],
      "err_line": 34,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "int j = * colums ;"
      ],
      "err_line": 40,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        4,
        12
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "for ( ; j < m ; j ++ ) { j ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        4,
        12,
        35
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "for ( ; j < m ; j ++ ) { j ++ ; }",
        "while ( i < n )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        4,
        12,
        39
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "for ( ; j < m ; j ++ ) { j ++ ; }",
        "for ( ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        4,
        12,
        41
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "for ( ; j < m ; j ++ ) { j ++ ; }",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        4,
        35
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "while ( i < n )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        4,
        35,
        39
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "while ( i < n )",
        "for ( ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        4,
        35,
        41
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "while ( i < n )",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        4,
        39
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "for ( ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        4,
        39,
        41
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "for ( ; i < n ; i ++ )",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        4,
        41
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "for ( ; j < m ; j ++ ) { j ++ ; }"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        12,
        35
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "for ( ; j < m ; j ++ ) { j ++ ; }",
        "while ( i < n )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        12,
        35,
        39
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "for ( ; j < m ; j ++ ) { j ++ ; }",
        "while ( i < n )",
        "for ( ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        12,
        35,
        41
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "for ( ; j < m ; j ++ ) { j ++ ; }",
        "while ( i < n )",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        12,
        39
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "for ( ; j < m ; j ++ ) { j ++ ; }",
        "for ( ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        12,
        39,
        41
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "for ( ; j < m ; j ++ ) { j ++ ; }",
        "for ( ; i < n ; i ++ )",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        12,
        41
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "for ( ; j < m ; j ++ ) { j ++ ; }",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        35
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "while ( i < n )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        35,
        39
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "while ( i < n )",
        "for ( ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        35,
        39,
        41
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "while ( i < n )",
        "for ( ; i < n ; i ++ )",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        35,
        41
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "while ( i < n )",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        39
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "for ( ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        39,
        41
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "for ( ; i < n ; i ++ )",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        3,
        41
      ],
      "mod_code": [
        "char * shap = new char * [ n ] ;",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "for ( ; j < m ; j ++ ) { j ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        12,
        35
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "for ( ; j < m ; j ++ ) { j ++ ; }",
        "while ( i < n )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        12,
        35,
        39
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "for ( ; j < m ; j ++ ) { j ++ ; }",
        "while ( i < n )",
        "for ( ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        12,
        35,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "for ( ; j < m ; j ++ ) { j ++ ; }",
        "while ( i < n )",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        12,
        39
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "for ( ; j < m ; j ++ ) { j ++ ; }",
        "for ( ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        12,
        39,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "for ( ; j < m ; j ++ ) { j ++ ; }",
        "for ( ; i < n ; i ++ )",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        12,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "for ( ; j < m ; j ++ ) { j ++ ; }",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        35
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "while ( i < n )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        35,
        39
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "while ( i < n )",
        "for ( ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        35,
        39,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "while ( i < n )",
        "for ( ; i < n ; i ++ )",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        35,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "while ( i < n )",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        39
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "for ( ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        39,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "for ( ; i < n ; i ++ )",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { shap [ i ] [ i ] [ i ] = newchar [ m ] ; }",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        35,
        39
      ],
      "mod_code": [
        "for ( ; j < m ; j ++ ) { j ++ ; }",
        "while ( i < n )",
        "for ( ; i < n ; i ++ )"
      ],
      "err_line": 39,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        35,
        39,
        41
      ],
      "mod_code": [
        "for ( ; j < m ; j ++ ) { j ++ ; }",
        "while ( i < n )",
        "for ( ; i < n ; i ++ )",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 39,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        39
      ],
      "mod_code": [
        "for ( ; j < m ; j ++ ) { j ++ ; }",
        "for ( ; i < n ; i ++ )"
      ],
      "err_line": 39,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        39,
        41
      ],
      "mod_code": [
        "for ( ; j < m ; j ++ ) { j ++ ; }",
        "for ( ; i < n ; i ++ )",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 39,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        35,
        39
      ],
      "mod_code": [
        "while ( i < n )",
        "for ( ; i < n ; i ++ )"
      ],
      "err_line": 39,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        35,
        39,
        41
      ],
      "mod_code": [
        "while ( i < n )",
        "for ( ; i < n ; i ++ )",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 39,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        39,
        41
      ],
      "mod_code": [
        "for ( ; i < n ; i ++ )",
        "for ( int j = j ; j < m ; j ++ )"
      ],
      "err_line": 39,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}