{
  "meta": {
    "index": 2700,
    "hitid": "3VP28W7DUNETAUKUYGBP0YDS8ALZFS",
    "workerid": "A1APYLD4DUK33J",
    "probid": "12A",
    "subid": "45118739"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create 2d character array mp of size 5 by 5",
      "code": "char mp [ 5 ] [ 5 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 0 to 3 exclusive , read mp [ i ]",
      "code": "for ( int i = 0 ; i < 3 ; i ++ ) { gets ( mp [ i ] ) ; }",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer flag with flag = 1",
      "code": "int flag = 1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 2 exclusive",
      "code": "for ( int i = 0 ; i < 2 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 0 to 3 exclusive",
      "code": "for ( int j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if mp [ i ] [ j ] is not mp [ 2 - i ] [ 2 - j ]",
      "code": "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j ] )",
      "indent": 3
    },
    {
      "line": 7,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 4
    },
    {
      "line": 8,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if flag is true",
      "code": "if ( flag )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char mp [ 5 + 5 ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "flag = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "flag = 1 ;",
        "char mp [ 5 + 5 ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        1,
        6
      ],
      "mod_code": [
        "flag = 1 ;",
        "char mp [ 5 + 5 ] ;",
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        1,
        6,
        5
      ],
      "mod_code": [
        "flag = 1 ;",
        "char mp [ 5 + 5 ] ;",
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        1,
        6,
        8
      ],
      "mod_code": [
        "flag = 1 ;",
        "char mp [ 5 + 5 ] ;",
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        1,
        6,
        4
      ],
      "mod_code": [
        "flag = 1 ;",
        "char mp [ 5 + 5 ] ;",
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        1,
        5
      ],
      "mod_code": [
        "flag = 1 ;",
        "char mp [ 5 + 5 ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        1,
        5,
        8
      ],
      "mod_code": [
        "flag = 1 ;",
        "char mp [ 5 + 5 ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        1,
        5,
        4
      ],
      "mod_code": [
        "flag = 1 ;",
        "char mp [ 5 + 5 ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        1,
        8
      ],
      "mod_code": [
        "flag = 1 ;",
        "char mp [ 5 + 5 ] ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        1,
        8,
        4
      ],
      "mod_code": [
        "flag = 1 ;",
        "char mp [ 5 + 5 ] ;",
        "break break ;",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        1,
        4
      ],
      "mod_code": [
        "flag = 1 ;",
        "char mp [ 5 + 5 ] ;",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "flag = 1 ;",
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        5
      ],
      "mod_code": [
        "flag = 1 ;",
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        5,
        8
      ],
      "mod_code": [
        "flag = 1 ;",
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        5,
        4
      ],
      "mod_code": [
        "flag = 1 ;",
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        8
      ],
      "mod_code": [
        "flag = 1 ;",
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        8,
        4
      ],
      "mod_code": [
        "flag = 1 ;",
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "break break ;",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        4
      ],
      "mod_code": [
        "flag = 1 ;",
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "flag = 1 ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        8
      ],
      "mod_code": [
        "flag = 1 ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        4
      ],
      "mod_code": [
        "flag = 1 ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "break break ;",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        4
      ],
      "mod_code": [
        "flag = 1 ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "flag = 1 ;",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        4
      ],
      "mod_code": [
        "flag = 1 ;",
        "break break ;",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "flag = 1 ;",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "char mp [ 5 + 5 ] ;",
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        5
      ],
      "mod_code": [
        "char mp [ 5 + 5 ] ;",
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        5,
        8
      ],
      "mod_code": [
        "char mp [ 5 + 5 ] ;",
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        5,
        4
      ],
      "mod_code": [
        "char mp [ 5 + 5 ] ;",
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "char mp [ 5 + 5 ] ;",
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        4
      ],
      "mod_code": [
        "char mp [ 5 + 5 ] ;",
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "break break ;",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        4
      ],
      "mod_code": [
        "char mp [ 5 + 5 ] ;",
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "char mp [ 5 + 5 ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5,
        8
      ],
      "mod_code": [
        "char mp [ 5 + 5 ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        4
      ],
      "mod_code": [
        "char mp [ 5 + 5 ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "break break ;",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5,
        4
      ],
      "mod_code": [
        "char mp [ 5 + 5 ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "char mp [ 5 + 5 ] ;",
        "break break ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        4
      ],
      "mod_code": [
        "char mp [ 5 + 5 ] ;",
        "break break ;",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "char mp [ 5 + 5 ] ;",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        5,
        8
      ],
      "mod_code": [
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        5,
        8,
        4
      ],
      "mod_code": [
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "break break ;",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        5,
        4
      ],
      "mod_code": [
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        8,
        4
      ],
      "mod_code": [
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "break break ;",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "if ( mp [ i ] [ j ] != mp [ 2 - i ] [ 2 - j - j ] )",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        4
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )",
        "break break ;",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "break break ;",
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}