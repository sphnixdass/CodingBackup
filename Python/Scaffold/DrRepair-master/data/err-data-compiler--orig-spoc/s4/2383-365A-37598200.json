{
  "meta": {
    "index": 2383,
    "hitid": "3RKHNXPHGWQN4HIYT43EZJQIFQZKU7",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "365A",
    "subid": "37598200"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int n , k , a , b , set a and b to 0",
      "code": "int n , k , a = 0 , b = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create string s and s2 , assign 0123456789 to s2",
      "code": "string s , s2 = \" 0123456789 \" ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "for j = 0 to size of s exclusive",
      "code": "for ( int j = 0 ; j < s . length ( ) ; j ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for x = 0 to k inclusive",
      "code": "for ( int x = 0 ; x <= k ; x ++ )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "if s [ j ] = s2 [ x ]",
      "code": "if ( s [ j ] == s2 [ x ] )",
      "indent": 4
    },
    {
      "line": 9,
      "text": "increment a",
      "code": "a ++ ;",
      "indent": 5
    },
    {
      "line": 10,
      "text": "set s2 [ x ] to c",
      "code": "s2 [ x ] = ' c ' ;",
      "indent": 5
    },
    {
      "line": 11,
      "text": "break",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if a = k + 1 , increment b",
      "code": "if ( a == ( k + 1 ) ) b ++ ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "a = 0",
      "code": "a = 0 ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "assign 0123456789 to s2",
      "code": "s2 = \" 0123456789 \" ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print b and a newline",
      "code": "cout << b << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "s2 [ x ] = c ;"
      ],
      "err_line": 10,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "s2 = 0123456789 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , k , a = 0 , a = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string s , s2 = 0123456789 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( x = 0 ; x <= k ; x ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "s2 [ ' x ' ] = c ;"
      ],
      "err_line": 10,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "char s2 = 0123456789 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s2 [ x ] = c ;"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        10,
        17
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s2 [ x ] = c ;",
        "s2 = 0123456789 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        10,
        17,
        5
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s2 [ x ] = c ;",
        "s2 = 0123456789 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        10,
        17,
        8
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s2 [ x ] = c ;",
        "s2 = 0123456789 ;",
        "if ( s [ j ] = s2 [ x ] )"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        10,
        17,
        6
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s2 [ x ] = c ;",
        "s2 = 0123456789 ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        10,
        5
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s2 [ x ] = c ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        10,
        5,
        8
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s2 [ x ] = c ;",
        "s >> s ;",
        "if ( s [ j ] = s2 [ x ] )"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        10,
        5,
        6
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s2 [ x ] = c ;",
        "s >> s ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        10,
        8
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s2 [ x ] = c ;",
        "if ( s [ j ] = s2 [ x ] )"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        10,
        8,
        6
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s2 [ x ] = c ;",
        "if ( s [ j ] = s2 [ x ] )",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        10,
        6
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s2 [ x ] = c ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        17
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s2 = 0123456789 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        17,
        5
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s2 = 0123456789 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        17,
        5,
        8
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s2 = 0123456789 ;",
        "s >> s ;",
        "if ( s [ j ] = s2 [ x ] )"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        17,
        5,
        6
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s2 = 0123456789 ;",
        "s >> s ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        17,
        8
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s2 = 0123456789 ;",
        "if ( s [ j ] = s2 [ x ] )"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        17,
        8,
        6
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s2 = 0123456789 ;",
        "if ( s [ j ] = s2 [ x ] )",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        17,
        6
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s2 = 0123456789 ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        5,
        8
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s >> s ;",
        "if ( s [ j ] = s2 [ x ] )"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        5,
        8,
        6
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s >> s ;",
        "if ( s [ j ] = s2 [ x ] )",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        5,
        6
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "s >> s ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "if ( s [ j ] = s2 [ x ] )"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        8,
        6
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "if ( s [ j ] = s2 [ x ] )",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "string s = 0123456789 , s2 = 0123456789 ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        10,
        17
      ],
      "mod_code": [
        "s2 [ x ] = c ;",
        "s2 = 0123456789 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        10,
        17,
        5
      ],
      "mod_code": [
        "s2 [ x ] = c ;",
        "s2 = 0123456789 ;",
        "s >> s ;"
      ],
      "err_line": 17,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        10,
        17,
        5,
        8
      ],
      "mod_code": [
        "s2 [ x ] = c ;",
        "s2 = 0123456789 ;",
        "s >> s ;",
        "if ( s [ j ] = s2 [ x ] )"
      ],
      "err_line": 17,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        10,
        17,
        5,
        6
      ],
      "mod_code": [
        "s2 [ x ] = c ;",
        "s2 = 0123456789 ;",
        "s >> s ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 17,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        10,
        17,
        8
      ],
      "mod_code": [
        "s2 [ x ] = c ;",
        "s2 = 0123456789 ;",
        "if ( s [ j ] = s2 [ x ] )"
      ],
      "err_line": 17,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        10,
        17,
        8,
        6
      ],
      "mod_code": [
        "s2 [ x ] = c ;",
        "s2 = 0123456789 ;",
        "if ( s [ j ] = s2 [ x ] )",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 17,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        10,
        17,
        6
      ],
      "mod_code": [
        "s2 [ x ] = c ;",
        "s2 = 0123456789 ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 17,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        10,
        5
      ],
      "mod_code": [
        "s2 [ x ] = c ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        5,
        8
      ],
      "mod_code": [
        "s2 [ x ] = c ;",
        "s >> s ;",
        "if ( s [ j ] = s2 [ x ] )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        5,
        8,
        6
      ],
      "mod_code": [
        "s2 [ x ] = c ;",
        "s >> s ;",
        "if ( s [ j ] = s2 [ x ] )",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        5,
        6
      ],
      "mod_code": [
        "s2 [ x ] = c ;",
        "s >> s ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "s2 [ x ] = c ;",
        "if ( s [ j ] = s2 [ x ] )"
      ],
      "err_line": 10,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        8,
        6
      ],
      "mod_code": [
        "s2 [ x ] = c ;",
        "if ( s [ j ] = s2 [ x ] )",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "s2 [ x ] = c ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        5
      ],
      "mod_code": [
        "s2 = 0123456789 ;",
        "s >> s ;"
      ],
      "err_line": 17,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        17,
        5,
        8
      ],
      "mod_code": [
        "s2 = 0123456789 ;",
        "s >> s ;",
        "if ( s [ j ] = s2 [ x ] )"
      ],
      "err_line": 17,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        17,
        5,
        8,
        6
      ],
      "mod_code": [
        "s2 = 0123456789 ;",
        "s >> s ;",
        "if ( s [ j ] = s2 [ x ] )",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 17,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        17,
        5,
        6
      ],
      "mod_code": [
        "s2 = 0123456789 ;",
        "s >> s ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 17,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        17,
        8
      ],
      "mod_code": [
        "s2 = 0123456789 ;",
        "if ( s [ j ] = s2 [ x ] )"
      ],
      "err_line": 17,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        17,
        8,
        6
      ],
      "mod_code": [
        "s2 = 0123456789 ;",
        "if ( s [ j ] = s2 [ x ] )",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 17,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        17,
        6
      ],
      "mod_code": [
        "s2 = 0123456789 ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 17,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ j ] = s2 [ x ] )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        8,
        6
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ j ] = s2 [ x ] )",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "s >> s ;",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "if ( s [ j ] = s2 [ x ] )",
        "for ( j = 0 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    }
  ]
}