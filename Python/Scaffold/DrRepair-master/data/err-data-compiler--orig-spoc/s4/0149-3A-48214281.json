{
  "meta": {
    "index": 149,
    "hitid": "3087LXLJ6MAW89E4UMYXUZA6Q330F2",
    "workerid": "AIWEXPJAU66D9",
    "probid": "3A",
    "subid": "48214281"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s1 and s2 = strings",
      "code": "string s1 , s2 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s1 and s2",
      "code": "cin >> s1 >> s2 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare integers called x1 and y1",
      "code": "int x1 , y1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let x2 and y2 be integers",
      "code": "int x2 , y2 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "x1 = s1 [ 0 ] - ' a '",
      "code": "x1 = s1 [ 0 ] - ' a ' ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "y1 = s1 [ 1 ] - ' 1 '",
      "code": "y1 = s1 [ 1 ] - ' 1 ' ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "x2 = s2 [ 0 ] - ' a '",
      "code": "x2 = s2 [ 0 ] - ' a ' ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "y2 = s2 [ 1 ] - ' 1 '",
      "code": "y2 = s2 [ 1 ] - ' 1 ' ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "assign value 0 to the integer count",
      "code": "int count = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "let str be an array of strings of length 1000",
      "code": "string str [ 1000 ] ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "while x1 ! = x2 or y1 ! = y2",
      "code": "while ( x1 != x2 || y1 != y2 )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if x1 > x2 and y1 > y2",
      "code": "if ( x1 > x2 && y1 > y2 )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set element at index count in str to \" LD \"",
      "code": "str [ count ] = \" LD \" ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "increase count by one",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "decrement y1",
      "code": "y1 -- ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "decrement x1",
      "code": "x1 -- ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else if x1 < x2 and y1 > y2",
      "code": "else if ( x1 < x2 && y1 > y2 )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "set element at index count in str to \" RD \"",
      "code": "str [ count ] = \" RD \" ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "increase count by one",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "decrease y1",
      "code": "y1 -- ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "increment x1",
      "code": "x1 ++ ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "else if x1 > x2 and y1 < y2",
      "code": "else if ( x1 > x2 && y1 < y2 )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "set str at index count to \" LU \"",
      "code": "str [ count ] = \" LU \" ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "increase count",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "decrement x1",
      "code": "x1 -- ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "increase y1",
      "code": "y1 ++ ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "else if x1 < x2 and y1 < y2",
      "code": "else if ( x1 < x2 && y1 < y2 )",
      "indent": 2
    },
    {
      "line": 28,
      "text": "set str [ count ] = \" RU \"",
      "code": "str [ count ] = \" RU \" ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "increase count",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "increase x1",
      "code": "x1 ++ ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "increment y1",
      "code": "y1 ++ ;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "else if x1 = x2 & & y1 > y2",
      "code": "else if ( x1 == x2 && y1 > y2 )",
      "indent": 2
    },
    {
      "line": 33,
      "text": "str [ count ] = \" D \"",
      "code": "str [ count ] = \" D \" ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "increase count by one",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "decrement y1",
      "code": "y1 -- ;",
      "indent": 3
    },
    {
      "line": 36,
      "text": "else if x1 = x2 and y1 < y2",
      "code": "else if ( x1 == x2 && y1 < y2 )",
      "indent": 2
    },
    {
      "line": 37,
      "text": "str [ count ] = \" U \"",
      "code": "str [ count ] = \" U \" ;",
      "indent": 3
    },
    {
      "line": 38,
      "text": "increment count",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 39,
      "text": "increase y1",
      "code": "y1 ++ ;",
      "indent": 3
    },
    {
      "line": 40,
      "text": "else if x1 > x2 and y1 = y2",
      "code": "else if ( x1 > x2 && y1 == y2 )",
      "indent": 2
    },
    {
      "line": 41,
      "text": "str [ count ] = \" L \"",
      "code": "str [ count ] = \" L \" ;",
      "indent": 3
    },
    {
      "line": 42,
      "text": "increase count by one",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 43,
      "text": "decrease x1 by one",
      "code": "x1 -- ;",
      "indent": 3
    },
    {
      "line": 44,
      "text": "else if x1 < x2 and y1 = y2",
      "code": "else if ( x1 < x2 && y1 == y2 )",
      "indent": 2
    },
    {
      "line": 45,
      "text": "set str [ count ] to \" R \"",
      "code": "str [ count ] = \" R \" ;",
      "indent": 3
    },
    {
      "line": 46,
      "text": "increase count by one",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 47,
      "text": "increase x1",
      "code": "x1 ++ ;",
      "indent": 3
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 50,
      "text": "print count and a new line",
      "code": "cout << count << endl ;",
      "indent": 1
    },
    {
      "line": 51,
      "text": "print count elements of str",
      "code": "for ( int i = 0 ; i < count ; i ++ ) { cout << str [ i ] << endl ; }",
      "indent": 1
    },
    {
      "line": 52,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s1 >> s1 >> s2 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int x1 x1 , y1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘x1’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int y1 = s1 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int x2 = s2 [ 0 ] - ' a ' ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int y2 = s2 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int y2’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "count = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "str . at ( count ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘at’ in ‘str’, which is of non-class type ‘std::__cxx11::string [1000] {aka std::__cxx11::basic_string<char> [1000]}’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "str . at ( count ) ;"
      ],
      "err_line": 18,
      "err_msg": "request for member ‘at’ in ‘str’, which is of non-class type ‘std::__cxx11::string [1000] {aka std::__cxx11::basic_string<char> [1000]}’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "str [ index ] = \" LU \" ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘std::__cxx11::string [1000] {aka std::__cxx11::basic_string<char> [1000]}[<unresolved overloaded function type>]’ for array subscript"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "str [ count ] = ' RU \" ;"
      ],
      "err_line": 28,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "str [ count ] = ' D \" ;"
      ],
      "err_line": 33,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "str [ count ] = ' U \" ;"
      ],
      "err_line": 37,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "str [ count ] = ' L \" ;"
      ],
      "err_line": 41,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        51,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "str . at ( count ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘at’ in ‘str’, which is of non-class type ‘std::__cxx11::string [1000] {aka std::__cxx11::basic_string<char> [1000]}’"
    },
    {
      "mod_line": [
        51,
        13,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "str . at ( count ) ;",
        "int x2 = s2 [ 0 ] - ' a ' ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        51,
        13,
        7,
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "str . at ( count ) ;",
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "count = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        51,
        13,
        7,
        8
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "str . at ( count ) ;",
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        51,
        13,
        7,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "str . at ( count ) ;",
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        51,
        13,
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "str . at ( count ) ;",
        "count = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        51,
        13,
        9,
        8
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "str . at ( count ) ;",
        "count = 0 ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int y2’"
    },
    {
      "mod_line": [
        51,
        13,
        9,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "str . at ( count ) ;",
        "count = 0 ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 9,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        51,
        13,
        8
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "str . at ( count ) ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int y2’"
    },
    {
      "mod_line": [
        51,
        13,
        8,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "str . at ( count ) ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int y2’"
    },
    {
      "mod_line": [
        51,
        13,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "str . at ( count ) ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘at’ in ‘str’, which is of non-class type ‘std::__cxx11::string [1000] {aka std::__cxx11::basic_string<char> [1000]}’"
    },
    {
      "mod_line": [
        51,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "int x2 = s2 [ 0 ] - ' a ' ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        51,
        7,
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "count = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        51,
        7,
        9,
        8
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "count = 0 ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        51,
        7,
        9,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "count = 0 ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        51,
        7,
        8
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        51,
        7,
        8,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        51,
        7,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        51,
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "count = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        51,
        9,
        8
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "count = 0 ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int y2’"
    },
    {
      "mod_line": [
        51,
        9,
        8,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "count = 0 ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int y2’"
    },
    {
      "mod_line": [
        51,
        9,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "count = 0 ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 9,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        51,
        8
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int y2’"
    },
    {
      "mod_line": [
        51,
        8,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < count ; i ++ ) cout << str [ i ] ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int y2’"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "str . at ( count ) ;",
        "int x2 = s2 [ 0 ] - ' a ' ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        13,
        7,
        9
      ],
      "mod_code": [
        "str . at ( count ) ;",
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "count = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        13,
        7,
        9,
        8
      ],
      "mod_code": [
        "str . at ( count ) ;",
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "count = 0 ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        13,
        7,
        9,
        11
      ],
      "mod_code": [
        "str . at ( count ) ;",
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "count = 0 ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        13,
        7,
        8
      ],
      "mod_code": [
        "str . at ( count ) ;",
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        13,
        7,
        8,
        11
      ],
      "mod_code": [
        "str . at ( count ) ;",
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        13,
        7,
        11
      ],
      "mod_code": [
        "str . at ( count ) ;",
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        13,
        9
      ],
      "mod_code": [
        "str . at ( count ) ;",
        "count = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        13,
        9,
        8
      ],
      "mod_code": [
        "str . at ( count ) ;",
        "count = 0 ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int y2’"
    },
    {
      "mod_line": [
        13,
        9,
        8,
        11
      ],
      "mod_code": [
        "str . at ( count ) ;",
        "count = 0 ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int y2’"
    },
    {
      "mod_line": [
        13,
        9,
        11
      ],
      "mod_code": [
        "str . at ( count ) ;",
        "count = 0 ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 9,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        13,
        8
      ],
      "mod_code": [
        "str . at ( count ) ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int y2’"
    },
    {
      "mod_line": [
        13,
        8,
        11
      ],
      "mod_code": [
        "str . at ( count ) ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int y2’"
    },
    {
      "mod_line": [
        13,
        11
      ],
      "mod_code": [
        "str . at ( count ) ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘at’ in ‘str’, which is of non-class type ‘std::__cxx11::string [1000] {aka std::__cxx11::basic_string<char> [1000]}’"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "count = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        7,
        9,
        8
      ],
      "mod_code": [
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "count = 0 ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        7,
        9,
        8,
        11
      ],
      "mod_code": [
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "count = 0 ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        7,
        9,
        11
      ],
      "mod_code": [
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "count = 0 ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        7,
        8,
        11
      ],
      "mod_code": [
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "int x2 = s2 [ 0 ] - ' a ' ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int x2’"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "count = 0 ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int y2’"
    },
    {
      "mod_line": [
        9,
        8,
        11
      ],
      "mod_code": [
        "count = 0 ;",
        "int y2 = s2 [ 1 ] - ' 1 ' ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int y2’"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "count = 0 ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 9,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "int y2 = s2 [ 1 ] - ' 1 ' ;",
        "while ( x1 != x2 && y1 != y2 )"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int y2’"
    }
  ]
}