{
  "meta": {
    "index": 2497,
    "hitid": "3LN50BUKPV5LWISKXIGL4DGYW9HPLO",
    "workerid": "A1AYVATMT88U1W",
    "probid": "94A",
    "subid": "43346759"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let bincode be a string",
      "code": "string bincode ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "output = array of integers of length 8",
      "code": "int output [ 8 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "codes = array of strings of length 10",
      "code": "string codes [ 10 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "sub = array of strings of length 10",
      "code": "string sub [ 10 ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read bincode",
      "code": "cin >> bincode ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "initialize boolean value flag to true",
      "code": "bool flag = true ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "the integer value of c = 0",
      "code": "int c = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to 10 exclusive , read codes [ i ]",
      "code": "for ( int i = 0 ; i < 10 ; i ++ ) cin >> codes [ i ] ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to 80 exclusive , increment i value by 10 , sub [ c + + ] = bincode . substr ( i , 10 )",
      "code": "for ( int i = 0 ; i < 80 ; i = i + 10 ) sub [ c ++ ] = bincode . substr ( i , 10 ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to c exclusive",
      "code": "for ( int i = 0 ; i < c ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "initialize boolean value flag to true",
      "code": "flag = true ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "for integer f = 0 to 10 and flag exclusive , increment f by 1",
      "code": "for ( int f = 0 ; f < 10 && flag ; f ++ )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if sub [ i ] is equal to codes [ f ]",
      "code": "if ( sub [ i ] == codes [ f ] )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "output [ i ] is equal to f",
      "code": "output [ i ] = f ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "initialize boolean value flag to false",
      "code": "flag = false ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for i = 0 to c exclusive , print output [ i ]",
      "code": "for ( int i = 0 ; i < c ; i ++ ) cout << output [ i ] ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char codes [ 10 ] ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char sub [ 10 ] ;"
      ],
      "err_line": 9,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in assignment"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "gets ( bincode ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "flag = true ;"
      ],
      "err_line": 6,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "c = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < c ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( sub [ i ] == codes )"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’)"
    },
    {
      "mod_line": [
        18,
        12,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "gets ( bincode ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        12,
        5,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "gets ( bincode ) ;",
        "char sub [ 10 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        12,
        5,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "gets ( bincode ) ;",
        "char codes [ 10 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        12,
        5,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "gets ( bincode ) ;",
        "c = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        12,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "char sub [ 10 ] ;"
      ],
      "err_line": 9,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in assignment"
    },
    {
      "mod_line": [
        18,
        12,
        4,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "char sub [ 10 ] ;",
        "char codes [ 10 ] ;"
      ],
      "err_line": 9,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in assignment"
    },
    {
      "mod_line": [
        18,
        12,
        4,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "char sub [ 10 ] ;",
        "c = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        12,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "char codes [ 10 ] ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        18,
        12,
        3,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "char codes [ 10 ] ;",
        "c = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        12,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "c = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "gets ( bincode ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        5,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "gets ( bincode ) ;",
        "char sub [ 10 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        5,
        4,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "gets ( bincode ) ;",
        "char sub [ 10 ] ;",
        "char codes [ 10 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        5,
        4,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "gets ( bincode ) ;",
        "char sub [ 10 ] ;",
        "c = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        5,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "gets ( bincode ) ;",
        "char codes [ 10 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        5,
        3,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "gets ( bincode ) ;",
        "char codes [ 10 ] ;",
        "c = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        5,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "gets ( bincode ) ;",
        "c = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "char sub [ 10 ] ;"
      ],
      "err_line": 9,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in assignment"
    },
    {
      "mod_line": [
        18,
        4,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "char sub [ 10 ] ;",
        "char codes [ 10 ] ;"
      ],
      "err_line": 9,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in assignment"
    },
    {
      "mod_line": [
        18,
        4,
        3,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "char sub [ 10 ] ;",
        "char codes [ 10 ] ;",
        "c = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        4,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "char sub [ 10 ] ;",
        "c = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        3
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "char codes [ 10 ] ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        18,
        3,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "char codes [ 10 ] ;",
        "c = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c ; i ++ ) { cout << output [ i ] << endl ; }",
        "c = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "gets ( bincode ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        5,
        4
      ],
      "mod_code": [
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "gets ( bincode ) ;",
        "char sub [ 10 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        5,
        4,
        3
      ],
      "mod_code": [
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "gets ( bincode ) ;",
        "char sub [ 10 ] ;",
        "char codes [ 10 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        5,
        4,
        7
      ],
      "mod_code": [
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "gets ( bincode ) ;",
        "char sub [ 10 ] ;",
        "c = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        5,
        3
      ],
      "mod_code": [
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "gets ( bincode ) ;",
        "char codes [ 10 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        5,
        3,
        7
      ],
      "mod_code": [
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "gets ( bincode ) ;",
        "char codes [ 10 ] ;",
        "c = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        5,
        7
      ],
      "mod_code": [
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "gets ( bincode ) ;",
        "c = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "char sub [ 10 ] ;"
      ],
      "err_line": 9,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in assignment"
    },
    {
      "mod_line": [
        12,
        4,
        3
      ],
      "mod_code": [
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "char sub [ 10 ] ;",
        "char codes [ 10 ] ;"
      ],
      "err_line": 9,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in assignment"
    },
    {
      "mod_line": [
        12,
        4,
        3,
        7
      ],
      "mod_code": [
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "char sub [ 10 ] ;",
        "char codes [ 10 ] ;",
        "c = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        4,
        7
      ],
      "mod_code": [
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "char sub [ 10 ] ;",
        "c = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "char codes [ 10 ] ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        12,
        3,
        7
      ],
      "mod_code": [
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "char codes [ 10 ] ;",
        "c = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        7
      ],
      "mod_code": [
        "for ( int f = 0 ; f < flag && flag ; f ++ )",
        "c = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "gets ( bincode ) ;",
        "char sub [ 10 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        4,
        3
      ],
      "mod_code": [
        "gets ( bincode ) ;",
        "char sub [ 10 ] ;",
        "char codes [ 10 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        4,
        3,
        7
      ],
      "mod_code": [
        "gets ( bincode ) ;",
        "char sub [ 10 ] ;",
        "char codes [ 10 ] ;",
        "c = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        4,
        7
      ],
      "mod_code": [
        "gets ( bincode ) ;",
        "char sub [ 10 ] ;",
        "c = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "gets ( bincode ) ;",
        "char codes [ 10 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        3,
        7
      ],
      "mod_code": [
        "gets ( bincode ) ;",
        "char codes [ 10 ] ;",
        "c = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "gets ( bincode ) ;",
        "c = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "char sub [ 10 ] ;",
        "char codes [ 10 ] ;"
      ],
      "err_line": 9,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in assignment"
    },
    {
      "mod_line": [
        4,
        3,
        7
      ],
      "mod_code": [
        "char sub [ 10 ] ;",
        "char codes [ 10 ] ;",
        "c = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "char sub [ 10 ] ;",
        "c = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "char codes [ 10 ] ;",
        "c = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘c’ was not declared in this scope"
    }
  ]
}