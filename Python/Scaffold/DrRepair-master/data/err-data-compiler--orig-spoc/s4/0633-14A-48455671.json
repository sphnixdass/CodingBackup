{
  "meta": {
    "index": 633,
    "hitid": "3BKZLF990ZTQWT0YGAK0YQ849IQQYM",
    "workerid": "AIWEXPJAU66D9",
    "probid": "14A",
    "subid": "48455671"
  },
  "lines": [
    {
      "line": 0,
      "text": "let n , m , q and y be integers",
      "code": "int n , m , q , y ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let p and x be integers set to 99999999",
      "code": "int p = 99999999 , x = 99999999 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "k = character",
      "code": "char k ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "let a be a 2d array of characters with size 101 by 101",
      "code": "char a [ 101 ] [ 101 ] ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for integer i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for integer j = 1 to m inclusive",
      "code": "for ( int j = 1 ; j <= m ; j ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "read k",
      "code": "cin >> k ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "set a [ i ] [ j ] to k",
      "code": "a [ i ] [ j ] = k ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if k is equal to ' * '",
      "code": "if ( k == ' * ' )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if i < = p , set p to i",
      "code": "if ( i <= p ) p = i ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "if j < = x , set x to j",
      "code": "if ( j <= x ) x = j ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "if i > = q , set q to i",
      "code": "if ( i >= q ) q = i ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "if j > = y , set y to j",
      "code": "if ( j >= y ) y = j ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for integer i = p to q inclusive",
      "code": "for ( int i = p ; i <= q ; i ++ )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for integer j = x to y inclusive print a [ i ] [ j ]",
      "code": "for ( int j = x ; j <= y ; j ++ ) { cout << a [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 20,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char k = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char a [ 101 ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = k ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        8,
        3
      ],
      "mod_code": [
        "int p , x = 99999999 ;",
        "cin >> n ;",
        "char a [ 101 ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        3,
        10
      ],
      "mod_code": [
        "int p , x = 99999999 ;",
        "cin >> n ;",
        "char a [ 101 ] ;",
        "if ( k == ' ) ' )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        3,
        2
      ],
      "mod_code": [
        "int p , x = 99999999 ;",
        "cin >> n ;",
        "char a [ 101 ] ;",
        "char k = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        3,
        5
      ],
      "mod_code": [
        "int p , x = 99999999 ;",
        "cin >> n ;",
        "char a [ 101 ] ;",
        "cin >> n >> k ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        10,
        2
      ],
      "mod_code": [
        "int p , x = 99999999 ;",
        "cin >> n ;",
        "if ( k == ' ) ' )",
        "char k = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        2
      ],
      "mod_code": [
        "int p , x = 99999999 ;",
        "cin >> n ;",
        "char k = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        2,
        5
      ],
      "mod_code": [
        "int p , x = 99999999 ;",
        "cin >> n ;",
        "char k = \" \" ;",
        "cin >> n >> k ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int p , x = 99999999 ;",
        "char a [ 101 ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        3,
        10
      ],
      "mod_code": [
        "int p , x = 99999999 ;",
        "char a [ 101 ] ;",
        "if ( k == ' ) ' )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        3,
        10,
        2
      ],
      "mod_code": [
        "int p , x = 99999999 ;",
        "char a [ 101 ] ;",
        "if ( k == ' ) ' )",
        "char k = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        10,
        5
      ],
      "mod_code": [
        "int p , x = 99999999 ;",
        "char a [ 101 ] ;",
        "if ( k == ' ) ' )",
        "cin >> n >> k ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        3,
        2
      ],
      "mod_code": [
        "int p , x = 99999999 ;",
        "char a [ 101 ] ;",
        "char k = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        2,
        5
      ],
      "mod_code": [
        "int p , x = 99999999 ;",
        "char a [ 101 ] ;",
        "char k = \" \" ;",
        "cin >> n >> k ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        5
      ],
      "mod_code": [
        "int p , x = 99999999 ;",
        "char a [ 101 ] ;",
        "cin >> n >> k ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        2
      ],
      "mod_code": [
        "int p , x = 99999999 ;",
        "if ( k == ' ) ' )",
        "char k = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        10,
        2,
        5
      ],
      "mod_code": [
        "int p , x = 99999999 ;",
        "if ( k == ' ) ' )",
        "char k = \" \" ;",
        "cin >> n >> k ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int p , x = 99999999 ;",
        "char k = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "int p , x = 99999999 ;",
        "char k = \" \" ;",
        "cin >> n >> k ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "cin >> n ;",
        "char a [ 101 ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        3,
        10
      ],
      "mod_code": [
        "cin >> n ;",
        "char a [ 101 ] ;",
        "if ( k == ' ) ' )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        3,
        10,
        2
      ],
      "mod_code": [
        "cin >> n ;",
        "char a [ 101 ] ;",
        "if ( k == ' ) ' )",
        "char k = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        3,
        10,
        5
      ],
      "mod_code": [
        "cin >> n ;",
        "char a [ 101 ] ;",
        "if ( k == ' ) ' )",
        "cin >> n >> k ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        3,
        2
      ],
      "mod_code": [
        "cin >> n ;",
        "char a [ 101 ] ;",
        "char k = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        3,
        2,
        5
      ],
      "mod_code": [
        "cin >> n ;",
        "char a [ 101 ] ;",
        "char k = \" \" ;",
        "cin >> n >> k ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        3,
        5
      ],
      "mod_code": [
        "cin >> n ;",
        "char a [ 101 ] ;",
        "cin >> n >> k ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        10,
        2
      ],
      "mod_code": [
        "cin >> n ;",
        "if ( k == ' ) ' )",
        "char k = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        10,
        2,
        5
      ],
      "mod_code": [
        "cin >> n ;",
        "if ( k == ' ) ' )",
        "char k = \" \" ;",
        "cin >> n >> k ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "cin >> n ;",
        "char k = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        2,
        5
      ],
      "mod_code": [
        "cin >> n ;",
        "char k = \" \" ;",
        "cin >> n >> k ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "char a [ 101 ] ;",
        "if ( k == ' ) ' )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        10,
        2
      ],
      "mod_code": [
        "char a [ 101 ] ;",
        "if ( k == ' ) ' )",
        "char k = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10,
        2,
        5
      ],
      "mod_code": [
        "char a [ 101 ] ;",
        "if ( k == ' ) ' )",
        "char k = \" \" ;",
        "cin >> n >> k ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10,
        5
      ],
      "mod_code": [
        "char a [ 101 ] ;",
        "if ( k == ' ) ' )",
        "cin >> n >> k ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "char a [ 101 ] ;",
        "char k = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        2,
        5
      ],
      "mod_code": [
        "char a [ 101 ] ;",
        "char k = \" \" ;",
        "cin >> n >> k ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "char a [ 101 ] ;",
        "cin >> n >> k ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "if ( k == ' ) ' )",
        "char k = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        2,
        5
      ],
      "mod_code": [
        "if ( k == ' ) ' )",
        "char k = \" \" ;",
        "cin >> n >> k ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "char k = \" \" ;",
        "cin >> n >> k ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    }
  ]
}