{
  "meta": {
    "index": 1209,
    "hitid": "30IRMPJWDZDVOPQHPA89U83Y8RTRK8",
    "workerid": "A1MJVTR0PCKBWW",
    "probid": "898A",
    "subid": "47549695"
  },
  "lines": [
    {
      "line": 0,
      "text": "set const int INF to 0x3f3f3f3f",
      "code": "const int INF = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "set const int maxn to 5005",
      "code": "const int maxn = 5005 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "integers = arr as an array of maxn",
      "code": "int arr [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "integers = n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if n modulo 10 > = 0 and n modulo 10 is less than or equal to 5 then do the following",
      "code": "if ( n % 10 >= 0 && n % 10 <= 5 )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "output n / 10 * 10",
      "code": "cout << n / 10 * 10 << endl ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if n modulo 10 is true do then add 1 to n",
      "code": "while ( n % 10 ) { n ++ ; }",
      "indent": 2
    },
    {
      "line": 10,
      "text": "output n",
      "code": "cout << n << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const int const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "const int const maxn = 5005 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "const int arr [ maxn ] ;"
      ],
      "err_line": 2,
      "err_msg": "uninitialized const ‘arr’ [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "const int const maxn = 5005 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        6,
        1,
        9
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "const int const maxn = 5005 ;",
        "if ( n % 10 == true ) n ++ ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        6,
        1,
        9,
        8
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "const int const maxn = 5005 ;",
        "if ( n % 10 == true ) n ++ ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        6,
        1,
        9,
        0
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "const int const maxn = 5005 ;",
        "if ( n % 10 == true ) n ++ ;",
        "const int const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        6,
        1,
        9,
        2
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "const int const maxn = 5005 ;",
        "if ( n % 10 == true ) n ++ ;",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        6,
        1,
        8
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "const int const maxn = 5005 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        6,
        1,
        8,
        0
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "const int const maxn = 5005 ;",
        "else else",
        "const int const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        6,
        1,
        8,
        2
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "const int const maxn = 5005 ;",
        "else else",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        6,
        1,
        0
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "const int const maxn = 5005 ;",
        "const int const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        6,
        1,
        0,
        2
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "const int const maxn = 5005 ;",
        "const int const INF = 0x3f3f3f3f ;",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        6,
        1,
        2
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "const int const maxn = 5005 ;",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "if ( n % 10 == true ) n ++ ;"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        9,
        8
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "if ( n % 10 == true ) n ++ ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        9,
        8,
        0
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "if ( n % 10 == true ) n ++ ;",
        "else else",
        "const int const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        6,
        9,
        8,
        2
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "if ( n % 10 == true ) n ++ ;",
        "else else",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 2,
      "err_msg": "uninitialized const ‘arr’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        9,
        0
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "if ( n % 10 == true ) n ++ ;",
        "const int const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        6,
        9,
        0,
        2
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "if ( n % 10 == true ) n ++ ;",
        "const int const INF = 0x3f3f3f3f ;",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        6,
        9,
        2
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "if ( n % 10 == true ) n ++ ;",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 2,
      "err_msg": "uninitialized const ‘arr’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        8,
        0
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "else else",
        "const int const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        6,
        8,
        0,
        2
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "else else",
        "const int const INF = 0x3f3f3f3f ;",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        6,
        8,
        2
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "else else",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 2,
      "err_msg": "uninitialized const ‘arr’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        0
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "const int const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        6,
        0,
        2
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "const int const INF = 0x3f3f3f3f ;",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "while ( n % 10 >= 0 && n % 10 <= 5 )",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 2,
      "err_msg": "uninitialized const ‘arr’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "const int const maxn = 5005 ;",
        "if ( n % 10 == true ) n ++ ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        9,
        8
      ],
      "mod_code": [
        "const int const maxn = 5005 ;",
        "if ( n % 10 == true ) n ++ ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        9,
        8,
        0
      ],
      "mod_code": [
        "const int const maxn = 5005 ;",
        "if ( n % 10 == true ) n ++ ;",
        "else else",
        "const int const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        9,
        8,
        2
      ],
      "mod_code": [
        "const int const maxn = 5005 ;",
        "if ( n % 10 == true ) n ++ ;",
        "else else",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        9,
        0
      ],
      "mod_code": [
        "const int const maxn = 5005 ;",
        "if ( n % 10 == true ) n ++ ;",
        "const int const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        9,
        0,
        2
      ],
      "mod_code": [
        "const int const maxn = 5005 ;",
        "if ( n % 10 == true ) n ++ ;",
        "const int const INF = 0x3f3f3f3f ;",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        9,
        2
      ],
      "mod_code": [
        "const int const maxn = 5005 ;",
        "if ( n % 10 == true ) n ++ ;",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "const int const maxn = 5005 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        8,
        0
      ],
      "mod_code": [
        "const int const maxn = 5005 ;",
        "else else",
        "const int const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        8,
        0,
        2
      ],
      "mod_code": [
        "const int const maxn = 5005 ;",
        "else else",
        "const int const INF = 0x3f3f3f3f ;",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        8,
        2
      ],
      "mod_code": [
        "const int const maxn = 5005 ;",
        "else else",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "const int const maxn = 5005 ;",
        "const int const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        0,
        2
      ],
      "mod_code": [
        "const int const maxn = 5005 ;",
        "const int const INF = 0x3f3f3f3f ;",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "const int const maxn = 5005 ;",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "if ( n % 10 == true ) n ++ ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        8,
        0
      ],
      "mod_code": [
        "if ( n % 10 == true ) n ++ ;",
        "else else",
        "const int const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        9,
        8,
        0,
        2
      ],
      "mod_code": [
        "if ( n % 10 == true ) n ++ ;",
        "else else",
        "const int const INF = 0x3f3f3f3f ;",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        9,
        8,
        2
      ],
      "mod_code": [
        "if ( n % 10 == true ) n ++ ;",
        "else else",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 2,
      "err_msg": "uninitialized const ‘arr’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "if ( n % 10 == true ) n ++ ;",
        "const int const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        9,
        0,
        2
      ],
      "mod_code": [
        "if ( n % 10 == true ) n ++ ;",
        "const int const INF = 0x3f3f3f3f ;",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "if ( n % 10 == true ) n ++ ;",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 2,
      "err_msg": "uninitialized const ‘arr’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "else else",
        "const int const INF = 0x3f3f3f3f ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8,
        0,
        2
      ],
      "mod_code": [
        "else else",
        "const int const INF = 0x3f3f3f3f ;",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "else else",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 2,
      "err_msg": "uninitialized const ‘arr’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "const int const INF = 0x3f3f3f3f ;",
        "const int arr [ maxn ] ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    }
  ]
}