{
  "meta": {
    "index": 1229,
    "hitid": "3TTPFEFXCTEB0GRPR12E6LWAKNBH6W",
    "workerid": "A2O34N3Y3RJLJ6",
    "probid": "898A",
    "subid": "48419217"
  },
  "lines": [
    {
      "line": 0,
      "text": "define four - element int array dx and set them to 0 , 0 , - 1 , 1",
      "code": "int dx [ 4 ] = { 0 , 0 , - 1 , 1 } ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "define 4 - element integral array dy , setting it to 1 , - 1 , 0 , and 0",
      "code": "int dy [ 4 ] = { 1 , - 1 , 0 , 0 } ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "define int n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if n modulo 10 is < = 5",
      "code": "if ( n % 10 <= 5 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if n / 10 ! = 0",
      "code": "if ( n / 10 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print n / 10 , 0 , and newline",
      "code": "cout << n / 10 << 0 << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print 0 and a newline",
      "code": "cout << 0 << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print n / 10 + 1 , 0 , newline",
      "code": "cout << ( n / 10 ) + 1 << 0 << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "freopen ( dy ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int a ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "freopen ( dy ) ;",
        "cout << n / 10 << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        7,
        11
      ],
      "mod_code": [
        "freopen ( dy ) ;",
        "cout << n / 10 << endl ;",
        "cout << n / 10 + 1 << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        7,
        11,
        8
      ],
      "mod_code": [
        "freopen ( dy ) ;",
        "cout << n / 10 << endl ;",
        "cout << n / 10 + 1 << endl ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        7,
        11,
        10
      ],
      "mod_code": [
        "freopen ( dy ) ;",
        "cout << n / 10 << endl ;",
        "cout << n / 10 + 1 << endl ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        7,
        8
      ],
      "mod_code": [
        "freopen ( dy ) ;",
        "cout << n / 10 << endl ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        7,
        8,
        10
      ],
      "mod_code": [
        "freopen ( dy ) ;",
        "cout << n / 10 << endl ;",
        "else else",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        7,
        10
      ],
      "mod_code": [
        "freopen ( dy ) ;",
        "cout << n / 10 << endl ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "freopen ( dy ) ;",
        "cout << n / 10 + 1 << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        11,
        8
      ],
      "mod_code": [
        "freopen ( dy ) ;",
        "cout << n / 10 + 1 << endl ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        11,
        8,
        10
      ],
      "mod_code": [
        "freopen ( dy ) ;",
        "cout << n / 10 + 1 << endl ;",
        "else else",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        11,
        8,
        7
      ],
      "mod_code": [
        "freopen ( dy ) ;",
        "cout << n / 10 + 1 << endl ;",
        "else else",
        "cout << n / 10 << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        11,
        10
      ],
      "mod_code": [
        "freopen ( dy ) ;",
        "cout << n / 10 + 1 << endl ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        11,
        10,
        7
      ],
      "mod_code": [
        "freopen ( dy ) ;",
        "cout << n / 10 + 1 << endl ;",
        "else else",
        "cout << n / 10 << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        11,
        7
      ],
      "mod_code": [
        "freopen ( dy ) ;",
        "cout << n / 10 + 1 << endl ;",
        "cout << n / 10 << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "freopen ( dy ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        8,
        10
      ],
      "mod_code": [
        "freopen ( dy ) ;",
        "else else",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        8,
        10,
        7
      ],
      "mod_code": [
        "freopen ( dy ) ;",
        "else else",
        "else else",
        "cout << n / 10 << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        8,
        7
      ],
      "mod_code": [
        "freopen ( dy ) ;",
        "else else",
        "cout << n / 10 << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "freopen ( dy ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        10,
        7
      ],
      "mod_code": [
        "freopen ( dy ) ;",
        "else else",
        "cout << n / 10 << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "freopen ( dy ) ;",
        "cout << n / 10 << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected constructor, destructor, or type conversion before ‘(’ token"
    },
    {
      "mod_line": [
        7,
        11,
        8
      ],
      "mod_code": [
        "cout << n / 10 << endl ;",
        "cout << n / 10 + 1 << endl ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        11,
        8,
        10
      ],
      "mod_code": [
        "cout << n / 10 << endl ;",
        "cout << n / 10 + 1 << endl ;",
        "else else",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        11,
        10
      ],
      "mod_code": [
        "cout << n / 10 << endl ;",
        "cout << n / 10 + 1 << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "cout << n / 10 << endl ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        8,
        10
      ],
      "mod_code": [
        "cout << n / 10 << endl ;",
        "else else",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "cout << n / 10 << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "cout << n / 10 + 1 << endl ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        8,
        10
      ],
      "mod_code": [
        "cout << n / 10 + 1 << endl ;",
        "else else",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        8,
        10,
        7
      ],
      "mod_code": [
        "cout << n / 10 + 1 << endl ;",
        "else else",
        "else else",
        "cout << n / 10 << \" \\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        8,
        7
      ],
      "mod_code": [
        "cout << n / 10 + 1 << endl ;",
        "else else",
        "cout << n / 10 << \" \\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "cout << n / 10 + 1 << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        10,
        7
      ],
      "mod_code": [
        "cout << n / 10 + 1 << endl ;",
        "else else",
        "cout << n / 10 << \" \\n \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "else else",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        10,
        7
      ],
      "mod_code": [
        "else else",
        "else else",
        "cout << n / 10 << \" \\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "else else",
        "cout << n / 10 << \" \\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "else else",
        "cout << n / 10 << \" \\n \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}