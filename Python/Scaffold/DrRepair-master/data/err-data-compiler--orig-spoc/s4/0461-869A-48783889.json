{
  "meta": {
    "index": 461,
    "hitid": "3R5LWXWHR02AJZGA8ITMLYXT2R0XGA",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "869A",
    "subid": "48783889"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function isPresent taking int array a , int n , int e and returning bool",
      "code": "bool isPresent ( int a [ ] , int n , int e )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "l , r = int with l = 0 and r = n - 1",
      "code": "int l = 0 , r = n - 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "loop while l < = r",
      "code": "while ( l <= r )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "m = int with m = ( l + r ) / 2",
      "code": "int m = ( l + r ) / 2 ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "if a [ m ] is e return true",
      "code": "if ( a [ m ] == e ) { return true ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if a [ m ] < e",
      "code": "if ( a [ m ] < e )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set l to m + 1",
      "code": "l = m + 1 ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set r to m - 1",
      "code": "r = m - 1 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "return false",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 14,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "a = int set",
      "code": "set < int > a ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "b , c = int array of size n each",
      "code": "int b [ n ] , c [ n ] ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for i = 0 to n",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "read b [ i ]",
      "code": "cin >> b [ i ] ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "insert b [ i ] into a",
      "code": "a . insert ( b [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "for i = 0 to n",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "read c [ i ]",
      "code": "cin >> c [ i ] ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "insert c [ i ] into a",
      "code": "a . insert ( c [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "count = int with count = 0",
      "code": "int count = 0 ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "for i = 0 to n",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "for j = 0 to n",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "xor1 = int with xor1 = b [ i ] bitwise - xor c [ j ]",
      "code": "int xor1 = b [ i ] ^ c [ j ] ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "if a contains xor1 increment count",
      "code": "if ( a . find ( xor1 ) != a . end ( ) ) { count ++ ; }",
      "indent": 3
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 33,
      "text": "if count is even",
      "code": "if ( count % 2 == 0 )",
      "indent": 1
    },
    {
      "line": 34,
      "text": "print \" Karen \"",
      "code": "cout << \" Karen \" << endl ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 36,
      "text": "print \" Koyomi \"",
      "code": "cout << \" Koyomi \" << endl ;",
      "indent": 2
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "if ( a . find ( xor1 ) ) count ++ ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘a.std::set<_Key, _Compare, _Alloc>::find<int, std::less<int>, std::allocator<int> >(xor1)’ from ‘std::set<int>::iterator {aka std::_Rb_tree_const_iterator<int>}’ to ‘bool’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 20,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "set < int = a ;"
      ],
      "err_line": 16,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "int b [ n ] , b [ n ] ;"
      ],
      "err_line": 17,
      "err_msg": "redeclaration of ‘int b [n]’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "b >> b [ i ] ;"
      ],
      "err_line": 19,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "a . push ( b [ i ] ) ;"
      ],
      "err_line": 20,
      "err_msg": "‘class std::set<int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 22,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "c >> c [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "a . push ( c [ i ] ) ;"
      ],
      "err_line": 24,
      "err_msg": "‘class std::set<int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 27,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 28,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 35,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        0,
        30
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "if ( a . find ( xor1 ) ) count ++ ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        30,
        22
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "if ( a . find ( xor1 ) ) count ++ ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        30,
        22,
        29
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "if ( a . find ( xor1 ) ) count ++ ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "int xor1 = b [ i ] | c [ j ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        30,
        22,
        35
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "if ( a . find ( xor1 ) ) count ++ ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "else else"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        30,
        22,
        28
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "if ( a . find ( xor1 ) ) count ++ ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        30,
        29
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "if ( a . find ( xor1 ) ) count ++ ;",
        "int xor1 = b [ i ] | c [ j ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        30,
        29,
        35
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "if ( a . find ( xor1 ) ) count ++ ;",
        "int xor1 = b [ i ] | c [ j ] ;",
        "else else"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        30,
        29,
        28
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "if ( a . find ( xor1 ) ) count ++ ;",
        "int xor1 = b [ i ] | c [ j ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        30,
        35
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "if ( a . find ( xor1 ) ) count ++ ;",
        "else else"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        30,
        35,
        28
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "if ( a . find ( xor1 ) ) count ++ ;",
        "else else",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        30,
        28
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "if ( a . find ( xor1 ) ) count ++ ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        22
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        22,
        29
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "for ( i = 0 ; i < n ; i ++ )",
        "int xor1 = b [ i ] | c [ j ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        22,
        29,
        35
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "for ( i = 0 ; i < n ; i ++ )",
        "int xor1 = b [ i ] | c [ j ] ;",
        "else else"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        22,
        29,
        28
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "for ( i = 0 ; i < n ; i ++ )",
        "int xor1 = b [ i ] | c [ j ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        22,
        35
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "for ( i = 0 ; i < n ; i ++ )",
        "else else"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        22,
        35,
        28
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "for ( i = 0 ; i < n ; i ++ )",
        "else else",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        22,
        28
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        29
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "int xor1 = b [ i ] | c [ j ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        29,
        35
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "int xor1 = b [ i ] | c [ j ] ;",
        "else else"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        29,
        35,
        28
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "int xor1 = b [ i ] | c [ j ] ;",
        "else else",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        29,
        28
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "int xor1 = b [ i ] | c [ j ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        35
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "else else"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        35,
        28
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "else else",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        0,
        28
      ],
      "mod_code": [
        "bool isPresent ( int a [ ] , int e , int e )",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int e’"
    },
    {
      "mod_line": [
        30,
        22
      ],
      "mod_code": [
        "if ( a . find ( xor1 ) ) count ++ ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 22,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        22,
        29
      ],
      "mod_code": [
        "if ( a . find ( xor1 ) ) count ++ ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "int xor1 = b [ i ] | c [ j ] ;"
      ],
      "err_line": 22,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        22,
        29,
        35
      ],
      "mod_code": [
        "if ( a . find ( xor1 ) ) count ++ ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "int xor1 = b [ i ] | c [ j ] ;",
        "else else"
      ],
      "err_line": 22,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        22,
        29,
        28
      ],
      "mod_code": [
        "if ( a . find ( xor1 ) ) count ++ ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "int xor1 = b [ i ] | c [ j ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 22,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        22,
        35
      ],
      "mod_code": [
        "if ( a . find ( xor1 ) ) count ++ ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "else else"
      ],
      "err_line": 22,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        22,
        35,
        28
      ],
      "mod_code": [
        "if ( a . find ( xor1 ) ) count ++ ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "else else",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 22,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        22,
        28
      ],
      "mod_code": [
        "if ( a . find ( xor1 ) ) count ++ ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 22,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        29
      ],
      "mod_code": [
        "if ( a . find ( xor1 ) ) count ++ ;",
        "int xor1 = b [ i ] | c [ j ] ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘a.std::set<_Key, _Compare, _Alloc>::find<int, std::less<int>, std::allocator<int> >(xor1)’ from ‘std::set<int>::iterator {aka std::_Rb_tree_const_iterator<int>}’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        29,
        35
      ],
      "mod_code": [
        "if ( a . find ( xor1 ) ) count ++ ;",
        "int xor1 = b [ i ] | c [ j ] ;",
        "else else"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘a.std::set<_Key, _Compare, _Alloc>::find<int, std::less<int>, std::allocator<int> >(xor1)’ from ‘std::set<int>::iterator {aka std::_Rb_tree_const_iterator<int>}’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        29,
        35,
        28
      ],
      "mod_code": [
        "if ( a . find ( xor1 ) ) count ++ ;",
        "int xor1 = b [ i ] | c [ j ] ;",
        "else else",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 28,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        29,
        28
      ],
      "mod_code": [
        "if ( a . find ( xor1 ) ) count ++ ;",
        "int xor1 = b [ i ] | c [ j ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 28,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        35
      ],
      "mod_code": [
        "if ( a . find ( xor1 ) ) count ++ ;",
        "else else"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘a.std::set<_Key, _Compare, _Alloc>::find<int, std::less<int>, std::allocator<int> >(xor1)’ from ‘std::set<int>::iterator {aka std::_Rb_tree_const_iterator<int>}’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        35,
        28
      ],
      "mod_code": [
        "if ( a . find ( xor1 ) ) count ++ ;",
        "else else",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 28,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        28
      ],
      "mod_code": [
        "if ( a . find ( xor1 ) ) count ++ ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 28,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        29
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int xor1 = b [ i ] | c [ j ] ;"
      ],
      "err_line": 22,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        22,
        29,
        35
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int xor1 = b [ i ] | c [ j ] ;",
        "else else"
      ],
      "err_line": 22,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        22,
        29,
        35,
        28
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int xor1 = b [ i ] | c [ j ] ;",
        "else else",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 22,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        22,
        29,
        28
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int xor1 = b [ i ] | c [ j ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 22,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        22,
        35
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "else else"
      ],
      "err_line": 22,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        22,
        35,
        28
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "else else",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 22,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        22,
        28
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 22,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        29,
        35
      ],
      "mod_code": [
        "int xor1 = b [ i ] | c [ j ] ;",
        "else else"
      ],
      "err_line": 35,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        29,
        35,
        28
      ],
      "mod_code": [
        "int xor1 = b [ i ] | c [ j ] ;",
        "else else",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 28,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        28
      ],
      "mod_code": [
        "int xor1 = b [ i ] | c [ j ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 28,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        35,
        28
      ],
      "mod_code": [
        "else else",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 28,
      "err_msg": "‘j’ was not declared in this scope"
    }
  ]
}