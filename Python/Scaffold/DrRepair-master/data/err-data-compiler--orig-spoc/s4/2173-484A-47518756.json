{
  "meta": {
    "index": 2173,
    "hitid": "3ZZAYRN1I6LRUVOORR5X14LPGH2OT4",
    "workerid": "AIWEXPJAU66D9",
    "probid": "484A",
    "subid": "47518756"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer variables l1 , l2 and k = 0",
      "code": "int l1 = 0 , l2 = 0 , k = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare long longs n and m = 0",
      "code": "long long n = 0 , m = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create empty strings s1 and s2",
      "code": "string s1 = \" \" , s2 = \" \" ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare char variables ziro = ' 0 ' and one = ' 1 '",
      "code": "char ziro = ' 0 ' , one = ' 1 ' ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read n and m and keep looping",
      "code": "while ( cin >> n >> m )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if n is equal to m",
      "code": "if ( n == m )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "print n and ' \\ n '",
      "code": "cout << n << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "while n > 0",
      "code": "while ( n > 0 )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if n is odd",
      "code": "if ( n % 2 > 0 )",
      "indent": 4
    },
    {
      "line": 12,
      "text": "set s1 to one + s1",
      "code": "s1 = one + s1 ;",
      "indent": 5
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 14,
      "text": "set s1 to ziro + s1",
      "code": "s1 = ziro + s1 ;",
      "indent": 5
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 16,
      "text": "divide n by 2",
      "code": "n /= 2 ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 18,
      "text": "while m > 0",
      "code": "while ( m > 0 )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "if m is odd",
      "code": "if ( m % 2 > 0 )",
      "indent": 4
    },
    {
      "line": 20,
      "text": "set s2 to one + s2",
      "code": "s2 = one + s2 ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 22,
      "text": "set s2 to ziro + s2",
      "code": "s2 = ziro + s2 ;",
      "indent": 5
    },
    {
      "line": 23,
      "text": "increment k by one",
      "code": "k ++ ;",
      "indent": 5
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 25,
      "text": "divide m by 2",
      "code": "m /= 2 ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "assign length of s1 to l1",
      "code": "l1 = s1 . size ( ) ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "assign length of s2 to l2",
      "code": "l2 = s2 . size ( ) ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "if k is greater than 0",
      "code": "if ( k > 0 )",
      "indent": 3
    },
    {
      "line": 30,
      "text": "if l1 ! = l2",
      "code": "if ( l1 != l2 )",
      "indent": 4
    },
    {
      "line": 31,
      "text": "assign ziro to s2 [ 0 ]",
      "code": "s2 [ 0 ] = ziro ;",
      "indent": 5
    },
    {
      "line": 32,
      "text": "for i from 1 to l2 exclusive",
      "code": "for ( int i = 1 ; i < l2 ; i ++ )",
      "indent": 5
    },
    {
      "line": 33,
      "text": "if s2 [ i ] = ziro , assign one to s2 [ i ]",
      "code": "if ( s2 [ i ] == ziro ) { s2 [ i ] = one ; }",
      "indent": 6
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 35,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 36,
      "text": "for i from 1 to l2 exclusive",
      "code": "for ( int i = 1 ; i < l2 ; i ++ )",
      "indent": 5
    },
    {
      "line": 37,
      "text": "if s2 [ i ] = ziro , decrement k by one",
      "code": "if ( s2 [ i ] == ziro ) { k -- ; }",
      "indent": 6
    },
    {
      "line": 38,
      "text": "if m = 1 and s2 [ i ] = ziro , assign one to s2 [ i ]",
      "code": "if ( m == 1 && s2 [ i ] == ziro ) { s2 [ i ] = one ; }",
      "indent": 6
    },
    {
      "line": 39,
      "text": "if m = 0 and k > 0 and i + 1 < l2 and s2 [ i ] = one and s1 [ i ] = ziro",
      "code": "if ( m == 0 && k > 0 && i + 1 < l2 && s2 [ i ] == one && s1 [ i ] == ziro )",
      "indent": 6
    },
    {
      "line": 40,
      "text": "set s2 [ i ] to ziro",
      "code": "s2 [ i ] = ziro ;",
      "indent": 7
    },
    {
      "line": 41,
      "text": "change m to 1",
      "code": "m = 1 ;",
      "indent": 7
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 6
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 46,
      "text": "for i from l2 - 1 and j = 0 , while i > 0 exclusive decrementing i and incrementing j",
      "code": "for ( int i = l2 - 1 , j = 0 ; i > 0 ; i -- , j ++ )",
      "indent": 3
    },
    {
      "line": 47,
      "text": "if s2 [ j ] is equal to one",
      "code": "if ( s2 [ j ] == one )",
      "indent": 4
    },
    {
      "line": 48,
      "text": "set m to 2",
      "code": "m = 2 ;",
      "indent": 5
    },
    {
      "line": 49,
      "text": "for jj from 1 to i exclusive , multiply m by 2",
      "code": "for ( int jj = 1 ; jj < i ; jj ++ ) { m *= 2 ; }",
      "indent": 5
    },
    {
      "line": 50,
      "text": "increase n by m",
      "code": "n += m ;",
      "indent": 5
    },
    {
      "line": 51,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 52,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 53,
      "text": "print n + 1 and ' \\ n '",
      "code": "cout << n + 1 << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 54,
      "text": "change k to 0",
      "code": "k = 0 ;",
      "indent": 3
    },
    {
      "line": 55,
      "text": "assign \" \" to s1",
      "code": "s1 = \" \" ;",
      "indent": 3
    },
    {
      "line": 56,
      "text": "change s2 to \" \"",
      "code": "s2 = \" \" ;",
      "indent": 3
    },
    {
      "line": 57,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 58,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 59,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int l1 = 0 , l2 = 0 ;"
      ],
      "err_line": 23,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char ziro = ' 0 ' and one = ' 1 ' ;"
      ],
      "err_line": 4,
      "err_msg": "‘one’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "m = l ;"
      ],
      "err_line": 41,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        55
      ],
      "mod_code": [
        "int s1 = \" \" ;"
      ],
      "err_line": 55,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        56
      ],
      "mod_code": [
        "s2 -= \" ;"
      ],
      "err_line": 56,
      "err_msg": "missing terminating \" character"
    }
  ]
}