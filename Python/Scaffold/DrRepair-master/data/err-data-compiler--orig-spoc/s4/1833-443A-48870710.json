{
  "meta": {
    "index": 1833,
    "hitid": "3DW3BNF1GHC3MV5XP5GG50JAXAHV8G",
    "workerid": "AIWEXPJAU66D9",
    "probid": "443A",
    "subid": "48870710"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let s be a unique set of characters",
      "code": "set < char > s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "c = character",
      "code": "char c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "in the infinite loop",
      "code": "while ( 1 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read c",
      "code": "cin >> c ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if c ! = ' { ' & & c ! = ' } ' & & c ! = ' , ' & & c ! = ' ' , insert c into s",
      "code": "if ( c != ' { ' && c != ' } ' && c != ' , ' && c != ' ' ) { s . insert ( c ) ; }",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if c = ' } ' , break",
      "code": "if ( c == ' } ' ) break ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "num is integer = size of s",
      "code": "int num = s . size ( ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print num and a new line",
      "code": "cout << num << endl ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' , ' ) s . insert ( c ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( c == ' } } break ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "set < unique > s ;"
      ],
      "err_line": 1,
      "err_msg": "type/value mismatch at argument 1 in template parameter list for ‘template<class _Key, class _Compare, class _Alloc> class std::set’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "set < char > c ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' & ' && c != ' ' ) s . insert ( c ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( c == ' } ) break ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' , ' ) s . insert ( c ) ;",
        "if ( c == ' } } break ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        5,
        6,
        1
      ],
      "mod_code": [
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' , ' ) s . insert ( c ) ;",
        "if ( c == ' } } break ;",
        "set < unique > s ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        5,
        6,
        1,
        2
      ],
      "mod_code": [
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' , ' ) s . insert ( c ) ;",
        "if ( c == ' } } break ;",
        "set < unique > s ;",
        "set < char > c ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        5,
        6,
        2
      ],
      "mod_code": [
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' , ' ) s . insert ( c ) ;",
        "if ( c == ' } } break ;",
        "set < char > c ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' , ' ) s . insert ( c ) ;",
        "set < unique > s ;"
      ],
      "err_line": 1,
      "err_msg": "type/value mismatch at argument 1 in template parameter list for ‘template<class _Key, class _Compare, class _Alloc> class std::set’"
    },
    {
      "mod_line": [
        5,
        1,
        2
      ],
      "mod_code": [
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' , ' ) s . insert ( c ) ;",
        "set < unique > s ;",
        "set < char > c ;"
      ],
      "err_line": 1,
      "err_msg": "type/value mismatch at argument 1 in template parameter list for ‘template<class _Key, class _Compare, class _Alloc> class std::set’"
    },
    {
      "mod_line": [
        5,
        1,
        2,
        6
      ],
      "mod_code": [
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' , ' ) s . insert ( c ) ;",
        "set < unique > s ;",
        "set < char > c ;",
        "if ( c == ' } ) break ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        5,
        1,
        6
      ],
      "mod_code": [
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' , ' ) s . insert ( c ) ;",
        "set < unique > s ;",
        "if ( c == ' } ) break ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' , ' ) s . insert ( c ) ;",
        "set < char > c ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        5,
        2,
        6
      ],
      "mod_code": [
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' , ' ) s . insert ( c ) ;",
        "set < char > c ;",
        "if ( c == ' } ) break ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' , ' ) s . insert ( c ) ;",
        "if ( c == ' } ) break ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "if ( c == ' } } break ;",
        "set < unique > s ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        1,
        2
      ],
      "mod_code": [
        "if ( c == ' } } break ;",
        "set < unique > s ;",
        "set < char > c ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        1,
        2,
        5
      ],
      "mod_code": [
        "if ( c == ' } } break ;",
        "set < unique > s ;",
        "set < char > c ;",
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' & ' && c != ' ' ) s . insert ( c ) ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        1,
        5
      ],
      "mod_code": [
        "if ( c == ' } } break ;",
        "set < unique > s ;",
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' & ' && c != ' ' ) s . insert ( c ) ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "if ( c == ' } } break ;",
        "set < char > c ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        2,
        5
      ],
      "mod_code": [
        "if ( c == ' } } break ;",
        "set < char > c ;",
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' & ' && c != ' ' ) s . insert ( c ) ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "if ( c == ' } } break ;",
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' & ' && c != ' ' ) s . insert ( c ) ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "set < unique > s ;",
        "set < char > c ;"
      ],
      "err_line": 1,
      "err_msg": "type/value mismatch at argument 1 in template parameter list for ‘template<class _Key, class _Compare, class _Alloc> class std::set’"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "set < unique > s ;",
        "set < char > c ;",
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' & ' && c != ' ' ) s . insert ( c ) ;"
      ],
      "err_line": 1,
      "err_msg": "type/value mismatch at argument 1 in template parameter list for ‘template<class _Key, class _Compare, class _Alloc> class std::set’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        6
      ],
      "mod_code": [
        "set < unique > s ;",
        "set < char > c ;",
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' & ' && c != ' ' ) s . insert ( c ) ;",
        "if ( c == ' } ) break ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1,
        2,
        6
      ],
      "mod_code": [
        "set < unique > s ;",
        "set < char > c ;",
        "if ( c == ' } ) break ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "set < unique > s ;",
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' & ' && c != ' ' ) s . insert ( c ) ;"
      ],
      "err_line": 1,
      "err_msg": "type/value mismatch at argument 1 in template parameter list for ‘template<class _Key, class _Compare, class _Alloc> class std::set’"
    },
    {
      "mod_line": [
        1,
        5,
        6
      ],
      "mod_code": [
        "set < unique > s ;",
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' & ' && c != ' ' ) s . insert ( c ) ;",
        "if ( c == ' } ) break ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "set < unique > s ;",
        "if ( c == ' } ) break ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "set < char > c ;",
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' & ' && c != ' ' ) s . insert ( c ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        2,
        5,
        6
      ],
      "mod_code": [
        "set < char > c ;",
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' & ' && c != ' ' ) s . insert ( c ) ;",
        "if ( c == ' } ) break ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "set < char > c ;",
        "if ( c == ' } ) break ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "if ( c != ' & ' && c != ' } & c != ' } & c != ' & ' && c != ' ' ) s . insert ( c ) ;",
        "if ( c == ' } ) break ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    }
  ]
}