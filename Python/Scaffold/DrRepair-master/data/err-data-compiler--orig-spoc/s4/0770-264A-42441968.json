{
  "meta": {
    "index": 770,
    "hitid": "33KGGVH24UBDFKQ7QZ8JEBTN02I1XF",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "264A",
    "subid": "42441968"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "n = size of s = int",
      "code": "int n = s . size ( ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let mas be a vector of int of size n",
      "code": "vector < int > mas ( n ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let l = 0 = int",
      "code": "int l = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "r = n = int",
      "code": "int r = n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if s at i is ' l '",
      "code": "if ( s [ i ] == ' l ' )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "decrement r , increment i and set mas [ r ] = i",
      "code": "mas [ -- r ] = ++ i ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increment i , set mas [ l ] to i , increment l",
      "code": "mas [ l ++ ] = ++ i ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 0 to n exclusive , increment i , print mas at i and new line",
      "code": "for ( int i = 0 ; i < n ; ++ i ) { cout << mas [ i ] << \" \\n \" ; }",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int n = s . top ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘top’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "vector < int > mas [ n ] ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<int>’ and ‘int’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( s at at ( i ) == ' l ' )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘at’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "mas [ l ++ ] = i , l [ l ++ ] = i ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        9,
        11,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "mas [ r ] = i , mas [ r ] = i ;",
        "mas [ l ++ ] = i , l ++ ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        9,
        11,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "mas [ r ] = i , mas [ r ] = i ;",
        "mas [ l ++ ] = i , l ++ ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        9,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "mas [ r ] = i , mas [ r ] = i ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        9,
        10,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "mas [ r ] = i , mas [ r ] = i ;",
        "else else",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        9,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "mas [ r ] = i , mas [ r ] = i ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        11,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "mas [ l ++ ] = i , l ++ ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        11,
        10,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "mas [ l ++ ] = i , l ++ ;",
        "else else",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        11,
        10,
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "mas [ l ++ ] = i , l ++ ;",
        "else else",
        "mas [ r ] = i ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        11,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "mas [ l ++ ] = i , l ++ ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        11,
        2,
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "mas [ l ++ ] = i , l ++ ;",
        "s >> s ;",
        "mas [ r ] = i ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        10,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "else else",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        10,
        2,
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "else else",
        "s >> s ;",
        "mas [ r ] = i ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        10,
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "else else",
        "mas [ r ] = i ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        2,
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "s >> s ;",
        "mas [ r ] = i ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        11,
        10
      ],
      "mod_code": [
        "mas [ r ] = i , mas [ r ] = i ;",
        "mas [ l ++ ] = i , l ++ ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        11,
        10,
        2
      ],
      "mod_code": [
        "mas [ r ] = i , mas [ r ] = i ;",
        "mas [ l ++ ] = i , l ++ ;",
        "else else",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        11,
        2
      ],
      "mod_code": [
        "mas [ r ] = i , mas [ r ] = i ;",
        "mas [ l ++ ] = i , l ++ ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "mas [ r ] = i , mas [ r ] = i ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        10,
        2
      ],
      "mod_code": [
        "mas [ r ] = i , mas [ r ] = i ;",
        "else else",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "mas [ r ] = i , mas [ r ] = i ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "mas [ l ++ ] = i , l ++ ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        10,
        2
      ],
      "mod_code": [
        "mas [ l ++ ] = i , l ++ ;",
        "else else",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        10,
        2,
        9
      ],
      "mod_code": [
        "mas [ l ++ ] = i , l ++ ;",
        "else else",
        "s >> s ;",
        "mas [ r ] = i ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        10,
        9
      ],
      "mod_code": [
        "mas [ l ++ ] = i , l ++ ;",
        "else else",
        "mas [ r ] = i ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "mas [ l ++ ] = i , l ++ ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        2,
        9
      ],
      "mod_code": [
        "mas [ l ++ ] = i , l ++ ;",
        "s >> s ;",
        "mas [ r ] = i ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "else else",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        2,
        9
      ],
      "mod_code": [
        "else else",
        "s >> s ;",
        "mas [ r ] = i ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "else else",
        "mas [ r ] = i ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "mas [ r ] = i ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}