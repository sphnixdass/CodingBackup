{
  "meta": {
    "index": 831,
    "hitid": "3VGZ74AYTGAMG15FHMXZ7LCJ19CGCR",
    "workerid": "A24WRPQYGMQLGF",
    "probid": "1066A",
    "subid": "48704741"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function gcd with arguments long long x and long long y that returns a long long",
      "code": "long long gcd ( long long x , long long y )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if y is 0",
      "code": "if ( y == 0 )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return x",
      "code": "return x ;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return the result of calling gcd with arguments y and x modulo y",
      "code": "return gcd ( y , x % y ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "in function long long expo with arguments of long long n , long long m , and long long p that returns a long long",
      "code": "long long expo ( long long n , long long m , long long p )",
      "indent": 0
    },
    {
      "line": 7,
      "text": "r = long long = 1",
      "code": "long long r = 1 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "n = n modulo p",
      "code": "n = n % p ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "while m > 0",
      "code": "while ( m > 0 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if m modulo 2 is possible then r = ( r * n ) modulo p",
      "code": "if ( m % 2 ) r = ( r * n ) % p ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "n = n squared modulo p",
      "code": "n = ( n * n ) % p ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "m - m / 2",
      "code": "m = m / 2 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "return r modulo p",
      "code": "return r % p ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 16,
      "text": "in function isPrime with an argument of a long long n that returns a boolean",
      "code": "bool isPrime ( long long n )",
      "indent": 0
    },
    {
      "line": 17,
      "text": "if n < = 1 then return false",
      "code": "if ( n <= 1 ) return false ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if n < = 3 then return true",
      "code": "if ( n <= 3 ) return true ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if n is even or n modulo 3 is 0 then return false",
      "code": "if ( n % 2 == 0 || n % 3 == 0 ) return false ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "for i = 5 , where i is square to n inclusive and i = i + 6",
      "code": "for ( long long i = 5 ; i * i <= n ; i = i + 6 )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if n modulo i is 0 or n modulo ( i + 2 ) is 0 , then return false",
      "code": "if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "return true",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 25,
      "text": "t = long long",
      "code": "long long t ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "read t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "while looping decrease t by 1",
      "code": "while ( t -- )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "a , b , c , d = long long",
      "code": "long long a , b , c , d ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "read a , b , c , d",
      "code": "cin >> a >> b >> c >> d ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "print the result of ( a / b ) - ( ( d / b ) - ( c - 1 ) / b )",
      "code": "cout << ( a / b ) - ( ( d / b ) - ( c - 1 ) / b ) << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( m % 2 == possible ) r = ( r * n ) % p ;"
      ],
      "err_line": 10,
      "err_msg": "‘possible’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long gcd ( long long x , long long y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "long long expo ( long long n , long long m , long long p ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( m % 2 == possible && r = ( r * n ) )"
      ],
      "err_line": 10,
      "err_msg": "‘possible’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( n % 2 == 0 || n % 3 == 0 ) return ;"
      ],
      "err_line": 19,
      "err_msg": "return-statement with no value, in function returning ‘bool’ [-fpermissive]"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        29
      ],
      "mod_code": [
        "if ( m % 2 == possible ) r = ( r * n ) % p ;",
        "cin >> a >> b >> c , d ;"
      ],
      "err_line": 10,
      "err_msg": "‘possible’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        29,
        3
      ],
      "mod_code": [
        "if ( m % 2 == possible ) r = ( r * n ) % p ;",
        "cin >> a >> b >> c , d ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        29,
        3,
        20
      ],
      "mod_code": [
        "if ( m % 2 == possible ) r = ( r * n ) % p ;",
        "cin >> a >> b >> c , d ;",
        "else else",
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        29,
        3,
        26
      ],
      "mod_code": [
        "if ( m % 2 == possible ) r = ( r * n ) % p ;",
        "cin >> a >> b >> c , d ;",
        "else else",
        "{ t ; }"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        29,
        20
      ],
      "mod_code": [
        "if ( m % 2 == possible ) r = ( r * n ) % p ;",
        "cin >> a >> b >> c , d ;",
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }"
      ],
      "err_line": 10,
      "err_msg": "‘possible’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        29,
        20,
        26
      ],
      "mod_code": [
        "if ( m % 2 == possible ) r = ( r * n ) % p ;",
        "cin >> a >> b >> c , d ;",
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }",
        "{ t ; }"
      ],
      "err_line": 10,
      "err_msg": "‘possible’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        29,
        26
      ],
      "mod_code": [
        "if ( m % 2 == possible ) r = ( r * n ) % p ;",
        "cin >> a >> b >> c , d ;",
        "{ t ; }"
      ],
      "err_line": 10,
      "err_msg": "‘possible’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "if ( m % 2 == possible ) r = ( r * n ) % p ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        3,
        20
      ],
      "mod_code": [
        "if ( m % 2 == possible ) r = ( r * n ) % p ;",
        "else else",
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        3,
        20,
        26
      ],
      "mod_code": [
        "if ( m % 2 == possible ) r = ( r * n ) % p ;",
        "else else",
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }",
        "{ t ; }"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        3,
        26
      ],
      "mod_code": [
        "if ( m % 2 == possible ) r = ( r * n ) % p ;",
        "else else",
        "{ t ; }"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        20
      ],
      "mod_code": [
        "if ( m % 2 == possible ) r = ( r * n ) % p ;",
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }"
      ],
      "err_line": 10,
      "err_msg": "‘possible’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        20,
        26
      ],
      "mod_code": [
        "if ( m % 2 == possible ) r = ( r * n ) % p ;",
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }",
        "{ t ; }"
      ],
      "err_line": 10,
      "err_msg": "‘possible’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        26
      ],
      "mod_code": [
        "if ( m % 2 == possible ) r = ( r * n ) % p ;",
        "{ t ; }"
      ],
      "err_line": 10,
      "err_msg": "‘possible’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        3
      ],
      "mod_code": [
        "cin >> a >> b >> c , d ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        29,
        3,
        10
      ],
      "mod_code": [
        "cin >> a >> b >> c , d ;",
        "else else",
        "if ( m % 2 == possible && r = ( r * n ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        29,
        3,
        10,
        20
      ],
      "mod_code": [
        "cin >> a >> b >> c , d ;",
        "else else",
        "if ( m % 2 == possible && r = ( r * n ) )",
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        29,
        3,
        10,
        26
      ],
      "mod_code": [
        "cin >> a >> b >> c , d ;",
        "else else",
        "if ( m % 2 == possible && r = ( r * n ) )",
        "{ t ; }"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        29,
        3,
        20
      ],
      "mod_code": [
        "cin >> a >> b >> c , d ;",
        "else else",
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        29,
        3,
        20,
        26
      ],
      "mod_code": [
        "cin >> a >> b >> c , d ;",
        "else else",
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }",
        "{ t ; }"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        29,
        3,
        26
      ],
      "mod_code": [
        "cin >> a >> b >> c , d ;",
        "else else",
        "{ t ; }"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        29,
        10
      ],
      "mod_code": [
        "cin >> a >> b >> c , d ;",
        "if ( m % 2 == possible && r = ( r * n ) )"
      ],
      "err_line": 10,
      "err_msg": "‘possible’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        10,
        20
      ],
      "mod_code": [
        "cin >> a >> b >> c , d ;",
        "if ( m % 2 == possible && r = ( r * n ) )",
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }"
      ],
      "err_line": 10,
      "err_msg": "‘possible’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        10,
        20,
        26
      ],
      "mod_code": [
        "cin >> a >> b >> c , d ;",
        "if ( m % 2 == possible && r = ( r * n ) )",
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }",
        "{ t ; }"
      ],
      "err_line": 10,
      "err_msg": "‘possible’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        10,
        26
      ],
      "mod_code": [
        "cin >> a >> b >> c , d ;",
        "if ( m % 2 == possible && r = ( r * n ) )",
        "{ t ; }"
      ],
      "err_line": 10,
      "err_msg": "‘possible’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        20
      ],
      "mod_code": [
        "cin >> a >> b >> c , d ;",
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        29,
        20,
        26
      ],
      "mod_code": [
        "cin >> a >> b >> c , d ;",
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }",
        "{ t ; }"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "else else",
        "if ( m % 2 == possible && r = ( r * n ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        10,
        20
      ],
      "mod_code": [
        "else else",
        "if ( m % 2 == possible && r = ( r * n ) )",
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        10,
        20,
        26
      ],
      "mod_code": [
        "else else",
        "if ( m % 2 == possible && r = ( r * n ) )",
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }",
        "{ t ; }"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        10,
        26
      ],
      "mod_code": [
        "else else",
        "if ( m % 2 == possible && r = ( r * n ) )",
        "{ t ; }"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        20
      ],
      "mod_code": [
        "else else",
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        20,
        26
      ],
      "mod_code": [
        "else else",
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }",
        "{ t ; }"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        26
      ],
      "mod_code": [
        "else else",
        "{ t ; }"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        20
      ],
      "mod_code": [
        "if ( m % 2 == possible && r = ( r * n ) )",
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }"
      ],
      "err_line": 10,
      "err_msg": "‘possible’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        20,
        26
      ],
      "mod_code": [
        "if ( m % 2 == possible && r = ( r * n ) )",
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }",
        "{ t ; }"
      ],
      "err_line": 10,
      "err_msg": "‘possible’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        26
      ],
      "mod_code": [
        "if ( m % 2 == possible && r = ( r * n ) )",
        "{ t ; }"
      ],
      "err_line": 10,
      "err_msg": "‘possible’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        26
      ],
      "mod_code": [
        "for ( int i = 5 ; i <= n ; i += 6 ) { i += 6 ; }",
        "{ t ; }"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}