{
  "meta": {
    "index": 1721,
    "hitid": "3WRBLBQ2GR22M9AZ564FCKAISKBG0U",
    "workerid": "A1MJVTR0PCKBWW",
    "probid": "110A",
    "subid": "47173674"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "set long long n , count equal to 0 , rem , digit",
      "code": "long long n , count = 0 , rem , digit ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if n is not equal to 0 then do following",
      "code": "while ( n != 0 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set rem equal to the remainder of n / 10",
      "code": "rem = n % 10 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if rem is 4 or rem equals 7 then add one to count",
      "code": "if ( rem == 4 || rem == 7 ) { count += 1 ; }",
      "indent": 2
    },
    {
      "line": 6,
      "text": "divide n by 10 ;",
      "code": "n /= 10 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if count is 0 then do",
      "code": "if ( count == 0 )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "output \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "exit",
      "code": "exit ( 0 ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if count is not equal to 0 then do next",
      "code": "while ( count != 0 )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "set digit equal to count % 10",
      "code": "digit = count % 10 ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if digit is 4 or digit is equal to 7 then do next instructions",
      "code": "if ( digit == 4 || digit == 7 )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "divide count by 10 and make it the new count value",
      "code": "count /= 10 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 17,
      "text": "set count equal to - 1",
      "code": "count = - 1 ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "break",
      "code": "break ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if count is 0 then do following",
      "code": "if ( count == 0 )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "output \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 23,
      "text": "output \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "++ exit ;"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( count != 0 ) { next ++ ; }"
      ],
      "err_line": 12,
      "err_msg": "‘next’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 14,
      "err_msg": "‘instructions’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long n , rem = 0 , rem = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘long long int rem’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( count != 0 )"
      ],
      "err_line": 18,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "if ( digit == 4 || digit == 7 ) { instructions ++ ; }"
      ],
      "err_line": 14,
      "err_msg": "‘instructions’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "if ( n != 0 )"
      ],
      "err_line": 13,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "if ( n != 0 )",
        "rem %= 10 ;"
      ],
      "err_line": 13,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        10
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "if ( n != 0 )",
        "rem %= 10 ;",
        "++ exit ;"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        12
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "if ( n != 0 )",
        "rem %= 10 ;",
        "if ( count != 0 ) { next ++ ; }"
      ],
      "err_line": 12,
      "err_msg": "‘next’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        14
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "if ( n != 0 )",
        "rem %= 10 ;",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 13,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        10
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "if ( n != 0 )",
        "++ exit ;"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        1,
        3,
        10,
        12
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "if ( n != 0 )",
        "++ exit ;",
        "if ( count != 0 ) { next ++ ; }"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        1,
        3,
        10,
        14
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "if ( n != 0 )",
        "++ exit ;",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        1,
        3,
        12
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "if ( n != 0 )",
        "if ( count != 0 ) { next ++ ; }"
      ],
      "err_line": 12,
      "err_msg": "‘next’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        12,
        14
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "if ( n != 0 )",
        "if ( count != 0 ) { next ++ ; }",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 12,
      "err_msg": "‘next’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        14
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "if ( n != 0 )",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 13,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "rem %= 10 ;"
      ],
      "err_line": 13,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        10
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "rem %= 10 ;",
        "++ exit ;"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        1,
        4,
        10,
        12
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "rem %= 10 ;",
        "++ exit ;",
        "if ( count != 0 ) { next ++ ; }"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        1,
        4,
        10,
        14
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "rem %= 10 ;",
        "++ exit ;",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        1,
        4,
        12
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "rem %= 10 ;",
        "if ( count != 0 ) { next ++ ; }"
      ],
      "err_line": 12,
      "err_msg": "‘next’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        12,
        14
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "rem %= 10 ;",
        "if ( count != 0 ) { next ++ ; }",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 12,
      "err_msg": "‘next’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        14
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "rem %= 10 ;",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 13,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "++ exit ;"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        1,
        10,
        12
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "++ exit ;",
        "if ( count != 0 ) { next ++ ; }"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        1,
        10,
        12,
        14
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "++ exit ;",
        "if ( count != 0 ) { next ++ ; }",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        1,
        10,
        14
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "++ exit ;",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "if ( count != 0 ) { next ++ ; }"
      ],
      "err_line": 12,
      "err_msg": "‘next’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        12,
        14
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "if ( count != 0 ) { next ++ ; }",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 12,
      "err_msg": "‘next’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "long long n , count = 0 , rem = 0 ;",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 13,
      "err_msg": "‘digit’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        10
      ],
      "mod_code": [
        "if ( n != 0 )",
        "rem %= 10 ;",
        "++ exit ;"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        3,
        4,
        10,
        12
      ],
      "mod_code": [
        "if ( n != 0 )",
        "rem %= 10 ;",
        "++ exit ;",
        "if ( count != 0 ) { next ++ ; }"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        3,
        4,
        10,
        14
      ],
      "mod_code": [
        "if ( n != 0 )",
        "rem %= 10 ;",
        "++ exit ;",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        3,
        4,
        12
      ],
      "mod_code": [
        "if ( n != 0 )",
        "rem %= 10 ;",
        "if ( count != 0 ) { next ++ ; }"
      ],
      "err_line": 12,
      "err_msg": "‘next’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        12,
        14
      ],
      "mod_code": [
        "if ( n != 0 )",
        "rem %= 10 ;",
        "if ( count != 0 ) { next ++ ; }",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 12,
      "err_msg": "‘next’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        14
      ],
      "mod_code": [
        "if ( n != 0 )",
        "rem %= 10 ;",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 14,
      "err_msg": "‘instructions’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "if ( n != 0 )",
        "++ exit ;"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        3,
        10,
        12
      ],
      "mod_code": [
        "if ( n != 0 )",
        "++ exit ;",
        "if ( count != 0 ) { next ++ ; }"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        3,
        10,
        12,
        14
      ],
      "mod_code": [
        "if ( n != 0 )",
        "++ exit ;",
        "if ( count != 0 ) { next ++ ; }",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        3,
        10,
        14
      ],
      "mod_code": [
        "if ( n != 0 )",
        "++ exit ;",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "if ( n != 0 )",
        "if ( count != 0 ) { next ++ ; }"
      ],
      "err_line": 12,
      "err_msg": "‘next’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        14
      ],
      "mod_code": [
        "if ( n != 0 )",
        "if ( count != 0 ) { next ++ ; }",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 12,
      "err_msg": "‘next’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "if ( n != 0 )",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 14,
      "err_msg": "‘instructions’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "rem %= 10 ;",
        "++ exit ;"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4,
        10,
        12
      ],
      "mod_code": [
        "rem %= 10 ;",
        "++ exit ;",
        "if ( count != 0 ) { next ++ ; }"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4,
        10,
        12,
        14
      ],
      "mod_code": [
        "rem %= 10 ;",
        "++ exit ;",
        "if ( count != 0 ) { next ++ ; }",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4,
        10,
        14
      ],
      "mod_code": [
        "rem %= 10 ;",
        "++ exit ;",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "rem %= 10 ;",
        "if ( count != 0 ) { next ++ ; }"
      ],
      "err_line": 12,
      "err_msg": "‘next’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        12,
        14
      ],
      "mod_code": [
        "rem %= 10 ;",
        "if ( count != 0 ) { next ++ ; }",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 12,
      "err_msg": "‘next’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "rem %= 10 ;",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 14,
      "err_msg": "‘instructions’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "++ exit ;",
        "if ( count != 0 ) { next ++ ; }"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        10,
        12,
        14
      ],
      "mod_code": [
        "++ exit ;",
        "if ( count != 0 ) { next ++ ; }",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        10,
        14
      ],
      "mod_code": [
        "++ exit ;",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "if ( count != 0 ) { next ++ ; }",
        "if ( digit == 4 || digit == 7 ) { instructions = instructions ; }"
      ],
      "err_line": 12,
      "err_msg": "‘next’ was not declared in this scope"
    }
  ]
}