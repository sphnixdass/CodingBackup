{
  "meta": {
    "index": 48,
    "hitid": "33QQ60S6ASCLRRBUPBTWGZB91STU0B",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "263A",
    "subid": "42417308"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int array ara of size 100 with array of size 100",
      "code": "int ara [ 100 ] [ 100 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integers i , n , r , z , j , temp , and m",
      "code": "int i , n , r , z , j , temp , m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to 5 exclusive",
      "code": "for ( i = 0 ; i < 5 ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for j = 0 to 5 exclusive , read ara [ i ] [ j ]",
      "code": "for ( j = 0 ; j < 5 ; j ++ ) { cin >> ara [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to 5 exclusive",
      "code": "for ( i = 0 ; i < 5 ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for j = 0 to 5 exclusive",
      "code": "for ( j = 0 ; j < 5 ; j ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if ara [ i ] [ j ] is equal to 1",
      "code": "if ( ara [ i ] [ j ] == 1 )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "set m to 2 - i",
      "code": "m = 2 - i ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "set n to 2 - j",
      "code": "n = 2 - j ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if n is less than 0 , set n to n * ( - 1 )",
      "code": "if ( n < 0 ) { n = n * ( - 1 ) ; }",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if m is less than 0 , set m to m * ( - 1 )",
      "code": "if ( m < 0 ) { m = m * ( - 1 ) ; }",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print m + n",
      "code": "cout << m + n << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int ara [ 100 ] = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int i , n , r , z , j , j , m ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        9,
        10,
        8,
        2
      ],
      "mod_code": [
        "m -= i ;",
        "n -= j ;",
        "if ( ara [ i ] [ j ] == ' 1 ' )",
        "int i , n , r , z , j , j , m ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        9,
        10,
        8,
        1
      ],
      "mod_code": [
        "m -= i ;",
        "n -= j ;",
        "if ( ara [ i ] [ j ] == ' 1 ' )",
        "int ara [ 100 ] = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        10,
        2
      ],
      "mod_code": [
        "m -= i ;",
        "n -= j ;",
        "int i , n , r , z , j , j , m ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        9,
        10,
        2,
        1
      ],
      "mod_code": [
        "m -= i ;",
        "n -= j ;",
        "int i , n , r , z , j , j , m ;",
        "int ara [ 100 ] = { 0 } ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        9,
        10,
        1
      ],
      "mod_code": [
        "m -= i ;",
        "n -= j ;",
        "int ara [ 100 ] = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        8,
        2
      ],
      "mod_code": [
        "m -= i ;",
        "if ( ara [ i ] [ j ] == ' 1 ' )",
        "int i , n , r , z , j , j , m ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        9,
        8,
        2,
        1
      ],
      "mod_code": [
        "m -= i ;",
        "if ( ara [ i ] [ j ] == ' 1 ' )",
        "int i , n , r , z , j , j , m ;",
        "int ara [ 100 ] = { 0 } ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        9,
        8,
        1
      ],
      "mod_code": [
        "m -= i ;",
        "if ( ara [ i ] [ j ] == ' 1 ' )",
        "int ara [ 100 ] = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "m -= i ;",
        "int i , n , r , z , j , j , m ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        9,
        2,
        1
      ],
      "mod_code": [
        "m -= i ;",
        "int i , n , r , z , j , j , m ;",
        "int ara [ 100 ] = { 0 } ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "m -= i ;",
        "int ara [ 100 ] = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        8,
        2
      ],
      "mod_code": [
        "n -= j ;",
        "if ( ara [ i ] [ j ] == ' 1 ' )",
        "int i , n , r , z , j , j , m ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        10,
        8,
        2,
        1
      ],
      "mod_code": [
        "n -= j ;",
        "if ( ara [ i ] [ j ] == ' 1 ' )",
        "int i , n , r , z , j , j , m ;",
        "int ara [ 100 ] = { 0 } ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        10,
        8,
        1
      ],
      "mod_code": [
        "n -= j ;",
        "if ( ara [ i ] [ j ] == ' 1 ' )",
        "int ara [ 100 ] = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "n -= j ;",
        "int i , n , r , z , j , j , m ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        10,
        2,
        1
      ],
      "mod_code": [
        "n -= j ;",
        "int i , n , r , z , j , j , m ;",
        "int ara [ 100 ] = { 0 } ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "n -= j ;",
        "int ara [ 100 ] = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "if ( ara [ i ] [ j ] == ' 1 ' )",
        "int i , n , r , z , j , j , m ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        8,
        2,
        1
      ],
      "mod_code": [
        "if ( ara [ i ] [ j ] == ' 1 ' )",
        "int i , n , r , z , j , j , m ;",
        "int ara [ 100 ] = { 0 } ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "if ( ara [ i ] [ j ] == ' 1 ' )",
        "int ara [ 100 ] = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "int i , n , r , z , j , j , m ;",
        "int ara [ 100 ] = { 0 } ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int j’"
    }
  ]
}