{
  "meta": {
    "index": 1803,
    "hitid": "3M67TQBQQHIJ8CL9J2VY9908XTZ9AU",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "761A",
    "subid": "48434383"
  },
  "lines": [
    {
      "line": 0,
      "text": "function esPosible ( get int a and b , return bool )",
      "code": "bool esPosible ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if a is 0 and b is 0 return false",
      "code": "if ( a == 0 && b == 0 ) return false ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if a - b > 1 return false",
      "code": "if ( a - b > 1 ) return false ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if b - a > 1 return false",
      "code": "if ( b - a > 1 ) return false ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return true",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "a , b = int",
      "code": "int a , b ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read a , b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if esPosible ( a , b )",
      "code": "if ( esPosible ( a , b ) )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int a , b , b ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "int a , b , b ;",
        "if ( ! a - b ) return false ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        7,
        2,
        3
      ],
      "mod_code": [
        "int a , b , b ;",
        "if ( ! a - b ) return false ;",
        "if ( ! b - a ) return false ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        7,
        2,
        3,
        11
      ],
      "mod_code": [
        "int a , b , b ;",
        "if ( ! a - b ) return false ;",
        "if ( ! b - a ) return false ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        7,
        2,
        3,
        9
      ],
      "mod_code": [
        "int a , b , b ;",
        "if ( ! a - b ) return false ;",
        "if ( ! b - a ) return false ;",
        "if ( ! esPosible ( a , b ) )"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        7,
        2,
        3,
        0
      ],
      "mod_code": [
        "int a , b , b ;",
        "if ( ! a - b ) return false ;",
        "if ( ! b - a ) return false ;",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        2,
        11
      ],
      "mod_code": [
        "int a , b , b ;",
        "if ( ! a - b ) return false ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        7,
        2,
        11,
        9
      ],
      "mod_code": [
        "int a , b , b ;",
        "if ( ! a - b ) return false ;",
        "else else",
        "if ( ! esPosible ( a , b ) )"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        7,
        2,
        11,
        0
      ],
      "mod_code": [
        "int a , b , b ;",
        "if ( ! a - b ) return false ;",
        "else else",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        2,
        9
      ],
      "mod_code": [
        "int a , b , b ;",
        "if ( ! a - b ) return false ;",
        "if ( ! esPosible ( a , b ) )"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        7,
        2,
        9,
        0
      ],
      "mod_code": [
        "int a , b , b ;",
        "if ( ! a - b ) return false ;",
        "if ( ! esPosible ( a , b ) )",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        2,
        0
      ],
      "mod_code": [
        "int a , b , b ;",
        "if ( ! a - b ) return false ;",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "int a , b , b ;",
        "if ( ! b - a ) return false ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        7,
        3,
        11
      ],
      "mod_code": [
        "int a , b , b ;",
        "if ( ! b - a ) return false ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        7,
        3,
        11,
        9
      ],
      "mod_code": [
        "int a , b , b ;",
        "if ( ! b - a ) return false ;",
        "else else",
        "if ( ! esPosible ( a , b ) )"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        7,
        3,
        11,
        0
      ],
      "mod_code": [
        "int a , b , b ;",
        "if ( ! b - a ) return false ;",
        "else else",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        3,
        9
      ],
      "mod_code": [
        "int a , b , b ;",
        "if ( ! b - a ) return false ;",
        "if ( ! esPosible ( a , b ) )"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        7,
        3,
        9,
        0
      ],
      "mod_code": [
        "int a , b , b ;",
        "if ( ! b - a ) return false ;",
        "if ( ! esPosible ( a , b ) )",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        3,
        0
      ],
      "mod_code": [
        "int a , b , b ;",
        "if ( ! b - a ) return false ;",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "int a , b , b ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        7,
        11,
        9
      ],
      "mod_code": [
        "int a , b , b ;",
        "else else",
        "if ( ! esPosible ( a , b ) )"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        7,
        11,
        9,
        0
      ],
      "mod_code": [
        "int a , b , b ;",
        "else else",
        "if ( ! esPosible ( a , b ) )",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        0
      ],
      "mod_code": [
        "int a , b , b ;",
        "else else",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "int a , b , b ;",
        "if ( ! esPosible ( a , b ) )"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        7,
        9,
        0
      ],
      "mod_code": [
        "int a , b , b ;",
        "if ( ! esPosible ( a , b ) )",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "int a , b , b ;",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        11
      ],
      "mod_code": [
        "if ( ! a - b ) return false ;",
        "if ( ! b - a ) return false ;",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        3,
        11,
        9
      ],
      "mod_code": [
        "if ( ! a - b ) return false ;",
        "if ( ! b - a ) return false ;",
        "else else",
        "if ( ! esPosible ( a , b ) )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        3,
        11,
        0
      ],
      "mod_code": [
        "if ( ! a - b ) return false ;",
        "if ( ! b - a ) return false ;",
        "else else",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        9,
        0
      ],
      "mod_code": [
        "if ( ! a - b ) return false ;",
        "if ( ! b - a ) return false ;",
        "if ( ! esPosible ( a , b ) )",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        0
      ],
      "mod_code": [
        "if ( ! a - b ) return false ;",
        "if ( ! b - a ) return false ;",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "if ( ! a - b ) return false ;",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        11,
        9
      ],
      "mod_code": [
        "if ( ! a - b ) return false ;",
        "else else",
        "if ( ! esPosible ( a , b ) )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        11,
        9,
        0
      ],
      "mod_code": [
        "if ( ! a - b ) return false ;",
        "else else",
        "if ( ! esPosible ( a , b ) )",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11,
        0
      ],
      "mod_code": [
        "if ( ! a - b ) return false ;",
        "else else",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        9,
        0
      ],
      "mod_code": [
        "if ( ! a - b ) return false ;",
        "if ( ! esPosible ( a , b ) )",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "if ( ! a - b ) return false ;",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "if ( ! b - a ) return false ;",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        11,
        9
      ],
      "mod_code": [
        "if ( ! b - a ) return false ;",
        "else else",
        "if ( ! esPosible ( a , b ) )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        11,
        9,
        0
      ],
      "mod_code": [
        "if ( ! b - a ) return false ;",
        "else else",
        "if ( ! esPosible ( a , b ) )",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        11,
        0
      ],
      "mod_code": [
        "if ( ! b - a ) return false ;",
        "else else",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        9,
        0
      ],
      "mod_code": [
        "if ( ! b - a ) return false ;",
        "if ( ! esPosible ( a , b ) )",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        0
      ],
      "mod_code": [
        "if ( ! b - a ) return false ;",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "else else",
        "if ( ! esPosible ( a , b ) )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        9,
        0
      ],
      "mod_code": [
        "else else",
        "if ( ! esPosible ( a , b ) )",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        0
      ],
      "mod_code": [
        "else else",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "if ( ! esPosible ( a , b ) )",
        "bool esPosible ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}