{
  "meta": {
    "index": 1649,
    "hitid": "3KL228NDMVG4ZZH39ZEXV4PR6INKGA",
    "workerid": "A2M1CVZZJAN4T4",
    "probid": "997A",
    "subid": "47285390"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long long integers n , x and y",
      "code": "long long int n , x , y ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , x , y",
      "code": "cin >> n >> x >> y ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let s be a string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare long long integers count and one and set them to 0",
      "code": "long long int count = 0 , one = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 1 to i = n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if s [ i ] is the char 1 increment one",
      "code": "if ( s [ i ] == ' 1 ' ) one ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if s [ i ] is the char 0 and s [ i - 1 ] is the char 1 then increment count",
      "code": "if ( s [ i ] == ' 0 ' && s [ i - 1 ] == ' 1 ' ) count ++ ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if one is equal to n - 1 and s [ 0 ] is the char 1",
      "code": "if ( one == n - 1 && s [ 0 ] == ' 1 ' )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print 0",
      "code": "cout << 0 << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if s [ 0 ] is the char 0 increment count",
      "code": "if ( s [ 0 ] == ' 0 ' ) count ++ ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print min ( ( count - 1 ) * x + y , ( count ) * y )",
      "code": "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "long long int count = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘one’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 1 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        13,
        14
      ],
      "mod_code": [
        "if ( s [ i ] == 0 && s [ i - 1 ] == 1 ) count ++ ;",
        "if ( s [ 0 ] == 0 ) count ++ ;",
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        13,
        14,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == 0 && s [ i - 1 ] == 1 ) count ++ ;",
        "if ( s [ 0 ] == 0 ) count ++ ;",
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        13,
        14,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == 0 && s [ i - 1 ] == 1 ) count ++ ;",
        "if ( s [ 0 ] == 0 ) count ++ ;",
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        13,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == 0 && s [ i - 1 ] == 1 ) count ++ ;",
        "if ( s [ 0 ] == 0 ) count ++ ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        13,
        12,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == 0 && s [ i - 1 ] == 1 ) count ++ ;",
        "if ( s [ 0 ] == 0 ) count ++ ;",
        "else else",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        13,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == 0 && s [ i - 1 ] == 1 ) count ++ ;",
        "if ( s [ 0 ] == 0 ) count ++ ;",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "if ( s [ i ] == 0 && s [ i - 1 ] == 1 ) count ++ ;",
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        14,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == 0 && s [ i - 1 ] == 1 ) count ++ ;",
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        14,
        12,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == 0 && s [ i - 1 ] == 1 ) count ++ ;",
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;",
        "else else",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        14,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == 0 && s [ i - 1 ] == 1 ) count ++ ;",
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == 0 && s [ i - 1 ] == 1 ) count ++ ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        12,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == 0 && s [ i - 1 ] == 1 ) count ++ ;",
        "else else",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == 0 && s [ i - 1 ] == 1 ) count ++ ;",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        14
      ],
      "mod_code": [
        "if ( s [ 0 ] == 0 ) count ++ ;",
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        14,
        8
      ],
      "mod_code": [
        "if ( s [ 0 ] == 0 ) count ++ ;",
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;",
        "if ( s [ i ] == 1 && s [ i - 1 ] == 1 ) count ++ ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        14,
        8,
        12
      ],
      "mod_code": [
        "if ( s [ 0 ] == 0 ) count ++ ;",
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;",
        "if ( s [ i ] == 1 && s [ i - 1 ] == 1 ) count ++ ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        14,
        8,
        3
      ],
      "mod_code": [
        "if ( s [ 0 ] == 0 ) count ++ ;",
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;",
        "if ( s [ i ] == 1 && s [ i - 1 ] == 1 ) count ++ ;",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        14,
        12
      ],
      "mod_code": [
        "if ( s [ 0 ] == 0 ) count ++ ;",
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        14,
        12,
        3
      ],
      "mod_code": [
        "if ( s [ 0 ] == 0 ) count ++ ;",
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;",
        "else else",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        14,
        3
      ],
      "mod_code": [
        "if ( s [ 0 ] == 0 ) count ++ ;",
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        8,
        12
      ],
      "mod_code": [
        "if ( s [ 0 ] == 0 ) count ++ ;",
        "if ( s [ i ] == 1 && s [ i - 1 ] == 1 ) count ++ ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        8,
        12,
        3
      ],
      "mod_code": [
        "if ( s [ 0 ] == 0 ) count ++ ;",
        "if ( s [ i ] == 1 && s [ i - 1 ] == 1 ) count ++ ;",
        "else else",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        8,
        3
      ],
      "mod_code": [
        "if ( s [ 0 ] == 0 ) count ++ ;",
        "if ( s [ i ] == 1 && s [ i - 1 ] == 1 ) count ++ ;",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        12
      ],
      "mod_code": [
        "if ( s [ 0 ] == 0 ) count ++ ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        12,
        3
      ],
      "mod_code": [
        "if ( s [ 0 ] == 0 ) count ++ ;",
        "else else",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        3
      ],
      "mod_code": [
        "if ( s [ 0 ] == 0 ) count ++ ;",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        8
      ],
      "mod_code": [
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;",
        "if ( s [ i ] == 1 && s [ i - 1 ] == 1 ) count ++ ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        14,
        8,
        12
      ],
      "mod_code": [
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;",
        "if ( s [ i ] == 1 && s [ i - 1 ] == 1 ) count ++ ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        8,
        12,
        3
      ],
      "mod_code": [
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;",
        "if ( s [ i ] == 1 && s [ i - 1 ] == 1 ) count ++ ;",
        "else else",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        8,
        3
      ],
      "mod_code": [
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;",
        "if ( s [ i ] == 1 && s [ i - 1 ] == 1 ) count ++ ;",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        12,
        3
      ],
      "mod_code": [
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;",
        "else else",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        3
      ],
      "mod_code": [
        "cout << min ( ( count - 1 ) * x + y , ( count ) * y ) ) << endl ;",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == 1 && s [ i - 1 ] == 1 ) count ++ ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        12,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == 1 && s [ i - 1 ] == 1 ) count ++ ;",
        "else else",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == 1 && s [ i - 1 ] == 1 ) count ++ ;",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "else else",
        "char s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    }
  ]
}