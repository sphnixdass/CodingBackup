{
  "meta": {
    "index": 1468,
    "hitid": "32CXT5U14GX39GGXKF6B9EHRJ38U8Q",
    "workerid": "AIWEXPJAU66D9",
    "probid": "79A",
    "subid": "46487890"
  },
  "lines": [
    {
      "line": 0,
      "text": "integer array dx with 4 elements = 0 , 0 , 1 , - 1",
      "code": "int dx [ 4 ] = { 0 , 0 , 1 , - 1 } ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "integer array dy with 4 elements = 1 , - 1 , 0 , 0",
      "code": "int dy [ 4 ] = { 1 , - 1 , 0 , 0 } ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "integer array DX with 8 elements = - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1",
      "code": "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 } ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "integer array DY with 8 elements = - 1 , 0 , 1 , - 1 , 1 , - 1 , 0 , 1",
      "code": "int DY [ 8 ] = { - 1 , 0 , 1 , - 1 , 1 , - 1 , 0 , 1 } ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "let c1 , c2 , x and y be integers",
      "code": "int c1 , c2 , x , y ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "boolean function Ciel",
      "code": "bool Ciel ( )",
      "indent": 0
    },
    {
      "line": 6,
      "text": "if c1 > = 200 & & c2 > = 20",
      "code": "if ( c1 >= 200 && c2 >= 20 )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "decrease c1 by 200",
      "code": "c1 -= 200 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "decrease c2 by 20",
      "code": "c2 -= 20 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "return 1",
      "code": "return 1 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "else if c1 > = 100 & & c2 > = 120",
      "code": "else if ( c1 >= 100 && c2 >= 120 )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "decrease c1 by 100",
      "code": "c1 -= 100 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "decrease c2 by 120",
      "code": "c2 -= 120 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "return 1",
      "code": "return 1 ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else if c2 > = 220",
      "code": "else if ( c2 >= 220 )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "decrease c2 by 220",
      "code": "c2 -= 220 ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "return 1",
      "code": "return 1 ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 20,
      "text": "boolean function Hanako",
      "code": "bool Hanako ( )",
      "indent": 0
    },
    {
      "line": 21,
      "text": "if c2 > = 220",
      "code": "if ( c2 >= 220 )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "decrease c2 by 220",
      "code": "c2 -= 220 ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "return 1",
      "code": "return 1 ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "else if c1 > = 100 & & c2 > = 120",
      "code": "else if ( c1 >= 100 && c2 >= 120 )",
      "indent": 1
    },
    {
      "line": 25,
      "text": "decrease c1 by 100",
      "code": "c1 -= 100 ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "decrease c2 by 120",
      "code": "c2 -= 120 ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "return 1",
      "code": "return 1 ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "else if c1 > = 200 & & c2 > = 20",
      "code": "else if ( c1 >= 200 && c2 >= 20 )",
      "indent": 1
    },
    {
      "line": 29,
      "text": "decrease c1 by 200",
      "code": "c1 -= 200 ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "decrease c2 by 20",
      "code": "c2 -= 20 ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "return 1",
      "code": "return 1 ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 36,
      "text": "read x and y",
      "code": "cin >> x >> y ;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "c1 = 100 * x",
      "code": "c1 = 100 * x ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "c2 = y * 10",
      "code": "c2 = y * 10 ;",
      "indent": 1
    },
    {
      "line": 39,
      "text": "i is integer = 1",
      "code": "int i = 1 ;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "infinite loop",
      "code": "while ( true )",
      "indent": 1
    },
    {
      "line": 41,
      "text": "let k be boolean = 0",
      "code": "bool k = 0 ;",
      "indent": 2
    },
    {
      "line": 42,
      "text": "if i = 1",
      "code": "if ( i == 1 )",
      "indent": 2
    },
    {
      "line": 43,
      "text": "k = result of Ciel ( )",
      "code": "k = Ciel ( ) ;",
      "indent": 3
    },
    {
      "line": 44,
      "text": "else if i = 2",
      "code": "else if ( i == 2 )",
      "indent": 2
    },
    {
      "line": 45,
      "text": "k = result of Hanako ( )",
      "code": "k = Hanako ( ) ;",
      "indent": 3
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 47,
      "text": "if k is not 0",
      "code": "if ( k )",
      "indent": 2
    },
    {
      "line": 48,
      "text": "if i = 1",
      "code": "if ( i == 1 )",
      "indent": 3
    },
    {
      "line": 49,
      "text": "i = 2",
      "code": "i = 2 ;",
      "indent": 4
    },
    {
      "line": 50,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 51,
      "text": "set value of i to 1",
      "code": "i = 1 ;",
      "indent": 4
    },
    {
      "line": 52,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 53,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 54,
      "text": "if i = 1",
      "code": "if ( i == 1 )",
      "indent": 3
    },
    {
      "line": 55,
      "text": "set i to 2",
      "code": "i = 2 ;",
      "indent": 4
    },
    {
      "line": 56,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 57,
      "text": "i = 1",
      "code": "i = 1 ;",
      "indent": 4
    },
    {
      "line": 58,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 59,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 60,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 61,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 62,
      "text": "if i = 1",
      "code": "if ( i == 1 )",
      "indent": 1
    },
    {
      "line": 63,
      "text": "print \" Ciel \" and a new line",
      "code": "cout << \" Ciel \" << endl ;",
      "indent": 2
    },
    {
      "line": 64,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 65,
      "text": "print \" Hanako \" and a new line",
      "code": "cout << \" Hanako \" << endl ;",
      "indent": 2
    },
    {
      "line": 66,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 67,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        43
      ],
      "mod_code": [
        "k = Ciel . result ( ) ;"
      ],
      "err_line": 43,
      "err_msg": "request for member ‘result’ in ‘Ciel’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        45
      ],
      "mod_code": [
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 45,
      "err_msg": "request for member ‘result’ in ‘Hanako’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int DY [ 8 ] = { - 1 , 0 , 1 , - 1 , 1 , - 1 , 0 , 1 , 1 } ;"
      ],
      "err_line": 3,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "bool Ciel ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( c1 >= 200 && c2 >= 20 ) c2 ++ ;"
      ],
      "err_line": 10,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "bool Hanako ( ) ;"
      ],
      "err_line": 21,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "i = 1 ;"
      ],
      "err_line": 39,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "k = 0 ;"
      ],
      "err_line": 41,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        50
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 50,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        51
      ],
      "mod_code": [
        "* i = 1 ;"
      ],
      "err_line": 51,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        53
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 53,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        59
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 59,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "else if ( c2 >= 2 )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        14,
        21
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "else if ( c2 >= 2 )",
        "if ( c2 >= 2 )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        14,
        21,
        22
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "else if ( c2 >= 2 )",
        "if ( c2 >= 2 )",
        "c2 -= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        14,
        21,
        43
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "else if ( c2 >= 2 )",
        "if ( c2 >= 2 )",
        "k = Ciel . result ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        14,
        21,
        45
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "else if ( c2 >= 2 )",
        "if ( c2 >= 2 )",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        14,
        22
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "else if ( c2 >= 2 )",
        "c2 -= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        14,
        22,
        43
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "else if ( c2 >= 2 )",
        "c2 -= 1 ;",
        "k = Ciel . result ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        14,
        22,
        45
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "else if ( c2 >= 2 )",
        "c2 -= 1 ;",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        14,
        43
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "else if ( c2 >= 2 )",
        "k = Ciel . result ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        14,
        43,
        45
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "else if ( c2 >= 2 )",
        "k = Ciel . result ( ) ;",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        14,
        45
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "else if ( c2 >= 2 )",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        21
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "if ( c2 >= 2 )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        21,
        22
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "if ( c2 >= 2 )",
        "c2 -= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        21,
        22,
        43
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "if ( c2 >= 2 )",
        "c2 -= 1 ;",
        "k = Ciel . result ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        21,
        22,
        45
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "if ( c2 >= 2 )",
        "c2 -= 1 ;",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        21,
        43
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "if ( c2 >= 2 )",
        "k = Ciel . result ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        21,
        43,
        45
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "if ( c2 >= 2 )",
        "k = Ciel . result ( ) ;",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        21,
        45
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "if ( c2 >= 2 )",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        22
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "c2 -= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        22,
        43
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "c2 -= 1 ;",
        "k = Ciel . result ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        22,
        43,
        45
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "c2 -= 1 ;",
        "k = Ciel . result ( ) ;",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        22,
        45
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "c2 -= 1 ;",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        43
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "k = Ciel . result ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        43,
        45
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "k = Ciel . result ( ) ;",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        2,
        45
      ],
      "mod_code": [
        "int DX [ 8 ] = { - 1 , - 1 , - 1 , 0 , 0 , 1 , 1 , 1 , 1 } ;",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘int [8]’"
    },
    {
      "mod_line": [
        14,
        21,
        22,
        43
      ],
      "mod_code": [
        "else if ( c2 >= 2 )",
        "if ( c2 >= 2 )",
        "c2 -= 1 ;",
        "k = Ciel . result ( ) ;"
      ],
      "err_line": 43,
      "err_msg": "request for member ‘result’ in ‘Ciel’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        14,
        21,
        22,
        45
      ],
      "mod_code": [
        "else if ( c2 >= 2 )",
        "if ( c2 >= 2 )",
        "c2 -= 1 ;",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 45,
      "err_msg": "request for member ‘result’ in ‘Hanako’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        14,
        21,
        43
      ],
      "mod_code": [
        "else if ( c2 >= 2 )",
        "if ( c2 >= 2 )",
        "k = Ciel . result ( ) ;"
      ],
      "err_line": 43,
      "err_msg": "request for member ‘result’ in ‘Ciel’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        14,
        21,
        43,
        45
      ],
      "mod_code": [
        "else if ( c2 >= 2 )",
        "if ( c2 >= 2 )",
        "k = Ciel . result ( ) ;",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 43,
      "err_msg": "request for member ‘result’ in ‘Ciel’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        14,
        21,
        45
      ],
      "mod_code": [
        "else if ( c2 >= 2 )",
        "if ( c2 >= 2 )",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 45,
      "err_msg": "request for member ‘result’ in ‘Hanako’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        14,
        22,
        43
      ],
      "mod_code": [
        "else if ( c2 >= 2 )",
        "c2 -= 1 ;",
        "k = Ciel . result ( ) ;"
      ],
      "err_line": 43,
      "err_msg": "request for member ‘result’ in ‘Ciel’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        14,
        22,
        43,
        45
      ],
      "mod_code": [
        "else if ( c2 >= 2 )",
        "c2 -= 1 ;",
        "k = Ciel . result ( ) ;",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 43,
      "err_msg": "request for member ‘result’ in ‘Ciel’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        14,
        22,
        45
      ],
      "mod_code": [
        "else if ( c2 >= 2 )",
        "c2 -= 1 ;",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 45,
      "err_msg": "request for member ‘result’ in ‘Hanako’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        14,
        43
      ],
      "mod_code": [
        "else if ( c2 >= 2 )",
        "k = Ciel . result ( ) ;"
      ],
      "err_line": 43,
      "err_msg": "request for member ‘result’ in ‘Ciel’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        14,
        43,
        45
      ],
      "mod_code": [
        "else if ( c2 >= 2 )",
        "k = Ciel . result ( ) ;",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 43,
      "err_msg": "request for member ‘result’ in ‘Ciel’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        14,
        45
      ],
      "mod_code": [
        "else if ( c2 >= 2 )",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 45,
      "err_msg": "request for member ‘result’ in ‘Hanako’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        21,
        22,
        43
      ],
      "mod_code": [
        "if ( c2 >= 2 )",
        "c2 -= 1 ;",
        "k = Ciel . result ( ) ;"
      ],
      "err_line": 43,
      "err_msg": "request for member ‘result’ in ‘Ciel’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        21,
        22,
        43,
        45
      ],
      "mod_code": [
        "if ( c2 >= 2 )",
        "c2 -= 1 ;",
        "k = Ciel . result ( ) ;",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 43,
      "err_msg": "request for member ‘result’ in ‘Ciel’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        21,
        22,
        45
      ],
      "mod_code": [
        "if ( c2 >= 2 )",
        "c2 -= 1 ;",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 45,
      "err_msg": "request for member ‘result’ in ‘Hanako’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        21,
        43
      ],
      "mod_code": [
        "if ( c2 >= 2 )",
        "k = Ciel . result ( ) ;"
      ],
      "err_line": 43,
      "err_msg": "request for member ‘result’ in ‘Ciel’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        21,
        43,
        45
      ],
      "mod_code": [
        "if ( c2 >= 2 )",
        "k = Ciel . result ( ) ;",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 43,
      "err_msg": "request for member ‘result’ in ‘Ciel’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        21,
        45
      ],
      "mod_code": [
        "if ( c2 >= 2 )",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 45,
      "err_msg": "request for member ‘result’ in ‘Hanako’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        22,
        43
      ],
      "mod_code": [
        "c2 -= 1 ;",
        "k = Ciel . result ( ) ;"
      ],
      "err_line": 43,
      "err_msg": "request for member ‘result’ in ‘Ciel’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        22,
        43,
        45
      ],
      "mod_code": [
        "c2 -= 1 ;",
        "k = Ciel . result ( ) ;",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 43,
      "err_msg": "request for member ‘result’ in ‘Ciel’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        22,
        45
      ],
      "mod_code": [
        "c2 -= 1 ;",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 45,
      "err_msg": "request for member ‘result’ in ‘Hanako’, which is of non-class type ‘bool()’"
    },
    {
      "mod_line": [
        43,
        45
      ],
      "mod_code": [
        "k = Ciel . result ( ) ;",
        "k = Hanako . result ( ) ;"
      ],
      "err_line": 43,
      "err_msg": "request for member ‘result’ in ‘Ciel’, which is of non-class type ‘bool()’"
    }
  ]
}