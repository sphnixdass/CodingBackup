{
  "meta": {
    "index": 1044,
    "hitid": "39O0SQZVJN17TAJX6GJ0Q3YC27UR73",
    "workerid": "A1APYLD4DUK33J",
    "probid": "151A",
    "subid": "48509578"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , k , l , c , d , p , nl , np , i , j , m",
      "code": "int n , k , l , c , d , p , nl , np , i , j , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n read k read l read c read d read p read nl read np",
      "code": "cin >> n >> k >> l >> c >> d >> p >> nl >> np ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set j to ( k * l ) / nl",
      "code": "j = ( k * l ) / nl ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set m to c * d",
      "code": "m = c * d ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set i to p / np",
      "code": "i = p / np ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if j is less than or equal to m and j is less than or equal to i",
      "code": "if ( j <= m && j <= i )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print j / n print newline",
      "code": "cout << j / n << endl ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "else if m is less than or equal to j and m is less than or equal to i",
      "code": "else if ( m <= j && m <= i )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print m / n print newline",
      "code": "cout << m / n << endl ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print i / n print newline",
      "code": "cout << i / n << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , nl , np , i , m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int nl’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , np , i , m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int np’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int j = ( k * l ) / nl ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , nl , np , i , m ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int nl’"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , nl , np , i , m ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "i /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int nl’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        3
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , nl , np , i , m ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "i /= np ;",
        "int j = ( k * l ) / nl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int nl’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        4
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , nl , np , i , m ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "i /= np ;",
        "m *= d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int nl’"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , nl , np , i , m ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int j = ( k * l ) / nl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int nl’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        4
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , nl , np , i , m ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int j = ( k * l ) / nl ;",
        "m *= d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int nl’"
    },
    {
      "mod_line": [
        1,
        2,
        4
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , nl , np , i , m ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "m *= d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int nl’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , nl , np , i , m ;",
        "i /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int nl’"
    },
    {
      "mod_line": [
        1,
        5,
        3
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , nl , np , i , m ;",
        "i /= np ;",
        "int j = ( k * l ) / nl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int nl’"
    },
    {
      "mod_line": [
        1,
        5,
        3,
        4
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , nl , np , i , m ;",
        "i /= np ;",
        "int j = ( k * l ) / nl ;",
        "m *= d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int nl’"
    },
    {
      "mod_line": [
        1,
        5,
        4
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , nl , np , i , m ;",
        "i /= np ;",
        "m *= d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int nl’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , nl , np , i , m ;",
        "int j = ( k * l ) / nl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int nl’"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , nl , np , i , m ;",
        "int j = ( k * l ) / nl ;",
        "m *= d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int nl’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , nl , np , i , m ;",
        "m *= d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int nl’"
    },
    {
      "mod_line": [
        2,
        5,
        3
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "i /= np ;",
        "int j = ( k * l ) / nl ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        2,
        5,
        3,
        4
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "i /= np ;",
        "int j = ( k * l ) / nl ;",
        "m *= d ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        2,
        5,
        3,
        1
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "i /= np ;",
        "int j = ( k * l ) / nl ;",
        "int n , k , l , c , d , p , nl , np , np , i , m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int np’"
    },
    {
      "mod_line": [
        2,
        5,
        4,
        1
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "i /= np ;",
        "m *= d ;",
        "int n , k , l , c , d , p , nl , np , np , i , m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int np’"
    },
    {
      "mod_line": [
        2,
        5,
        1
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "i /= np ;",
        "int n , k , l , c , d , p , nl , np , np , i , m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int np’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int j = ( k * l ) / nl ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        2,
        3,
        4
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int j = ( k * l ) / nl ;",
        "m *= d ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        1
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int j = ( k * l ) / nl ;",
        "m *= d ;",
        "int n , k , l , c , d , p , nl , np , np , i , m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int np’"
    },
    {
      "mod_line": [
        2,
        3,
        1
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int j = ( k * l ) / nl ;",
        "int n , k , l , c , d , p , nl , np , np , i , m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int np’"
    },
    {
      "mod_line": [
        2,
        4,
        1
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "m *= d ;",
        "int n , k , l , c , d , p , nl , np , np , i , m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int np’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int n , k , l , c , d , p , nl , np , np , i , m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int np’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "i /= np ;",
        "int j = ( k * l ) / nl ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        5,
        3,
        4
      ],
      "mod_code": [
        "i /= np ;",
        "int j = ( k * l ) / nl ;",
        "m *= d ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        5,
        3,
        4,
        1
      ],
      "mod_code": [
        "i /= np ;",
        "int j = ( k * l ) / nl ;",
        "m *= d ;",
        "int n , k , l , c , d , p , nl , np , np , i , m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int np’"
    },
    {
      "mod_line": [
        5,
        3,
        1
      ],
      "mod_code": [
        "i /= np ;",
        "int j = ( k * l ) / nl ;",
        "int n , k , l , c , d , p , nl , np , np , i , m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int np’"
    },
    {
      "mod_line": [
        5,
        4,
        1
      ],
      "mod_code": [
        "i /= np ;",
        "m *= d ;",
        "int n , k , l , c , d , p , nl , np , np , i , m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int np’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "i /= np ;",
        "int n , k , l , c , d , p , nl , np , np , i , m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int np’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "int j = ( k * l ) / nl ;",
        "m *= d ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        3,
        4,
        1
      ],
      "mod_code": [
        "int j = ( k * l ) / nl ;",
        "m *= d ;",
        "int n , k , l , c , d , p , nl , np , np , i , m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int np’"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "int j = ( k * l ) / nl ;",
        "int n , k , l , c , d , p , nl , np , np , i , m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int np’"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "m *= d ;",
        "int n , k , l , c , d , p , nl , np , np , i , m ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int np’"
    }
  ]
}