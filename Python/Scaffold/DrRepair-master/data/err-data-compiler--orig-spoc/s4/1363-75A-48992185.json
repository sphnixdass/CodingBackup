{
  "meta": {
    "index": 1363,
    "hitid": "3W0KKJIARR3P6KBLQ1293R8THCDK8M",
    "workerid": "A1APYLD4DUK33J",
    "probid": "75A",
    "subid": "48992185"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare cal with long long integer n as argument , returning long long integer",
      "code": "long long int cal ( long long int n )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long long integer s with s = 0",
      "code": "long long int s = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while n is greater than 0",
      "code": "while ( n > 0 )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer r with r = n % 10",
      "code": "int r = n % 10 ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "if r is 0",
      "code": "if ( r == 0 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set s to s * 10 + r",
      "code": "s = s * 10 + r ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set n to n / 10",
      "code": "n = n / 10 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "create long long integer s1 with s1 = 0",
      "code": "long long int s1 = 0 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "while s is greater than 0",
      "code": "while ( s > 0 )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "create integer r with r = s % 10",
      "code": "int r = s % 10 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set s1 to s1 * 10 + r",
      "code": "s1 = s1 * 10 + r ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set s to s / 10",
      "code": "s = s / 10 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "return s1 from function",
      "code": "return s1 ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 19,
      "text": "create long long integers a , b",
      "code": "long long int a , b ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "read a read b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "create long long integer c with c = a + b",
      "code": "long long int c = a + b ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "create long long integer p with p = result of run cal with a as argument",
      "code": "long long int p = cal ( a ) ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "create long long integer q with q = result of run cal with b as argument",
      "code": "long long int q = cal ( b ) ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "create long long integer r with r = result of run cal with c as argument",
      "code": "long long int r = cal ( c ) ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if r is ( p + q )",
      "code": "if ( r == ( p + q ) )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long int cal ( long long int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "return ;"
      ],
      "err_line": 17,
      "err_msg": "return-statement with no value, in function returning ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "long long int cal ( long long int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0,
        20
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "long long int cal ( long long int n ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0,
        20,
        13
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "long long int cal ( long long int n ) ;",
        "a >> a >> b ;",
        "s1 = s1 * ( 10 + r ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0,
        20,
        27
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "long long int cal ( long long int n ) ;",
        "a >> a >> b ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0,
        20,
        5
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "long long int cal ( long long int n ) ;",
        "a >> a >> b ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0,
        13
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "long long int cal ( long long int n ) ;",
        "s1 = s1 * ( 10 + r ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0,
        13,
        27
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "long long int cal ( long long int n ) ;",
        "s1 = s1 * ( 10 + r ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0,
        13,
        5
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "long long int cal ( long long int n ) ;",
        "s1 = s1 * ( 10 + r ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0,
        27
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "long long int cal ( long long int n ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0,
        27,
        5
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "long long int cal ( long long int n ) ;",
        "else else",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0,
        5
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "long long int cal ( long long int n ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        20,
        13,
        27
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "a >> a >> b ;",
        "s1 = s1 * ( 10 + r ) ;",
        "else else"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        20,
        13,
        5
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "a >> a >> b ;",
        "s1 = s1 * ( 10 + r ) ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        20,
        27
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "a >> a >> b ;",
        "else else"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        20,
        27,
        5
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "a >> a >> b ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        20,
        5
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "a >> a >> b ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        13,
        27
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "s1 = s1 * ( 10 + r ) ;",
        "else else"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        13,
        27,
        5
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "s1 = s1 * ( 10 + r ) ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        13,
        5
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "s1 = s1 * ( 10 + r ) ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        27
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "else else"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        27,
        5
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "while ( n >= 0 )",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        0,
        20
      ],
      "mod_code": [
        "long long int cal ( long long int n ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        20,
        13
      ],
      "mod_code": [
        "long long int cal ( long long int n ) ;",
        "a >> a >> b ;",
        "s1 = s1 * ( 10 + r ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        20,
        13,
        27
      ],
      "mod_code": [
        "long long int cal ( long long int n ) ;",
        "a >> a >> b ;",
        "s1 = s1 * ( 10 + r ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        20,
        13,
        5
      ],
      "mod_code": [
        "long long int cal ( long long int n ) ;",
        "a >> a >> b ;",
        "s1 = s1 * ( 10 + r ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        20,
        27
      ],
      "mod_code": [
        "long long int cal ( long long int n ) ;",
        "a >> a >> b ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        20,
        27,
        5
      ],
      "mod_code": [
        "long long int cal ( long long int n ) ;",
        "a >> a >> b ;",
        "else else",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        20,
        5
      ],
      "mod_code": [
        "long long int cal ( long long int n ) ;",
        "a >> a >> b ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "long long int cal ( long long int n ) ;",
        "s1 = s1 * ( 10 + r ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        27
      ],
      "mod_code": [
        "long long int cal ( long long int n ) ;",
        "s1 = s1 * ( 10 + r ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        27,
        5
      ],
      "mod_code": [
        "long long int cal ( long long int n ) ;",
        "s1 = s1 * ( 10 + r ) ;",
        "else else",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        5
      ],
      "mod_code": [
        "long long int cal ( long long int n ) ;",
        "s1 = s1 * ( 10 + r ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        27
      ],
      "mod_code": [
        "long long int cal ( long long int n ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        27,
        5
      ],
      "mod_code": [
        "long long int cal ( long long int n ) ;",
        "else else",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "long long int cal ( long long int n ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        20,
        13,
        27
      ],
      "mod_code": [
        "a >> a >> b ;",
        "s1 = s1 * ( 10 + r ) ;",
        "else else"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        13,
        27,
        5
      ],
      "mod_code": [
        "a >> a >> b ;",
        "s1 = s1 * ( 10 + r ) ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        13,
        5
      ],
      "mod_code": [
        "a >> a >> b ;",
        "s1 = s1 * ( 10 + r ) ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        27
      ],
      "mod_code": [
        "a >> a >> b ;",
        "else else"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        27,
        5
      ],
      "mod_code": [
        "a >> a >> b ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        5
      ],
      "mod_code": [
        "a >> a >> b ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        27
      ],
      "mod_code": [
        "s1 = s1 * ( 10 + r ) ;",
        "else else"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        27,
        5
      ],
      "mod_code": [
        "s1 = s1 * ( 10 + r ) ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        5
      ],
      "mod_code": [
        "s1 = s1 * ( 10 + r ) ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        27,
        5
      ],
      "mod_code": [
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}