{
  "meta": {
    "index": 1981,
    "hitid": "3T5ZXGO9DEIQ1JA3CWMJCXH6GE5ZQ2",
    "workerid": "A1APYLD4DUK33J",
    "probid": "801A",
    "subid": "40309139"
  },
  "lines": [
    {
      "line": 0,
      "text": "create character array a with size 110",
      "code": "char a [ 110 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer len with len = string length of a",
      "code": "int len = strlen ( a ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integer ans with ans = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to len exclusive",
      "code": "for ( int i = 0 ; i < len ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if a [ i ] is ' V ' and a [ i + 1 ] is ' K ' , increment ans , set a [ i ] to ' a ' , set a [ i + 1 ] to ' a '",
      "code": "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) { ans ++ , a [ i ] = ' a ' , a [ i + 1 ] = ' a ' ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create integer flag with flag = 0",
      "code": "int flag = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to len exclusive",
      "code": "for ( int i = 0 ; i < len ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if ( a [ i ] is ' V ' and a [ i + 1 ] is ' V ' ) or ( a [ i ] is ' K ' and a [ i + 1 ] is ' K ' ) , set flag to 1",
      "code": "if ( ( a [ i ] == ' V ' && a [ i + 1 ] == ' V ' ) || ( a [ i ] == ' K ' && a [ i + 1 ] == ' K ' ) ) flag = 1 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print ans + flag print newline",
      "code": "cout << ans + flag << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "char a [ 110 ] [ 110 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int len = a . size ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [110]’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' a ' , a [ i + 1 ] = ' a ' ;",
        "for ( i = 0 ; i < len ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        5,
        0
      ],
      "mod_code": [
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' a ' , a [ i + 1 ] = ' a ' ;",
        "for ( i = 0 ; i < len ; i ++ )",
        "char a [ 110 ] [ 110 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        6,
        5,
        0,
        9
      ],
      "mod_code": [
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' a ' , a [ i + 1 ] = ' a ' ;",
        "for ( i = 0 ; i < len ; i ++ )",
        "char a [ 110 ] [ 110 ] ;",
        "for ( i = 0 ; i < len ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        6,
        5,
        0,
        10
      ],
      "mod_code": [
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' a ' , a [ i + 1 ] = ' a ' ;",
        "for ( i = 0 ; i < len ; i ++ )",
        "char a [ 110 ] [ 110 ] ;",
        "if ( ( a [ i ] == ' V ' && a [ i + 1 ] == ' V ' ) || ( a [ i ] == ' K ' ) || ( a [ i + 1 ] == ' K ' ) ) flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        6,
        5,
        9
      ],
      "mod_code": [
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' a ' , a [ i + 1 ] = ' a ' ;",
        "for ( i = 0 ; i < len ; i ++ )",
        "for ( i = 0 ; i < len ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        5,
        9,
        10
      ],
      "mod_code": [
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' a ' , a [ i + 1 ] = ' a ' ;",
        "for ( i = 0 ; i < len ; i ++ )",
        "for ( i = 0 ; i < len ; i ++ )",
        "if ( ( a [ i ] == ' V ' && a [ i + 1 ] == ' V ' ) || ( a [ i ] == ' K ' ) || ( a [ i + 1 ] == ' K ' ) ) flag = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        5,
        10
      ],
      "mod_code": [
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' a ' , a [ i + 1 ] = ' a ' ;",
        "for ( i = 0 ; i < len ; i ++ )",
        "if ( ( a [ i ] == ' V ' && a [ i + 1 ] == ' V ' ) || ( a [ i ] == ' K ' ) || ( a [ i + 1 ] == ' K ' ) ) flag = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        0
      ],
      "mod_code": [
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' a ' , a [ i + 1 ] = ' a ' ;",
        "char a [ 110 ] [ 110 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        6,
        0,
        9
      ],
      "mod_code": [
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' a ' , a [ i + 1 ] = ' a ' ;",
        "char a [ 110 ] [ 110 ] ;",
        "for ( i = 0 ; i < len ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        6,
        0,
        9,
        10
      ],
      "mod_code": [
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' a ' , a [ i + 1 ] = ' a ' ;",
        "char a [ 110 ] [ 110 ] ;",
        "for ( i = 0 ; i < len ; i ++ )",
        "if ( ( a [ i ] == ' V ' && a [ i + 1 ] == ' V ' ) || ( a [ i ] == ' K ' ) || ( a [ i + 1 ] == ' K ' ) ) flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        6,
        0,
        10
      ],
      "mod_code": [
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' a ' , a [ i + 1 ] = ' a ' ;",
        "char a [ 110 ] [ 110 ] ;",
        "if ( ( a [ i ] == ' V ' && a [ i + 1 ] == ' V ' ) || ( a [ i ] == ' K ' ) || ( a [ i + 1 ] == ' K ' ) ) flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' a ' , a [ i + 1 ] = ' a ' ;",
        "for ( i = 0 ; i < len ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        9,
        10
      ],
      "mod_code": [
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' a ' , a [ i + 1 ] = ' a ' ;",
        "for ( i = 0 ; i < len ; i ++ )",
        "if ( ( a [ i ] == ' V ' && a [ i + 1 ] == ' V ' ) || ( a [ i ] == ' K ' ) || ( a [ i + 1 ] == ' K ' ) ) flag = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        0
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )",
        "char a [ 110 ] [ 110 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        5,
        0,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )",
        "char a [ 110 ] [ 110 ] ;",
        "for ( i = 0 ; i < len ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        5,
        0,
        9,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )",
        "char a [ 110 ] [ 110 ] ;",
        "for ( i = 0 ; i < len ; i ++ )",
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' K ' , a [ i + 1 ] = ' a ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        5,
        0,
        9,
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )",
        "char a [ 110 ] [ 110 ] ;",
        "for ( i = 0 ; i < len ; i ++ )",
        "if ( ( a [ i ] == ' V ' && a [ i + 1 ] == ' V ' ) || ( a [ i ] == ' K ' ) || ( a [ i + 1 ] == ' K ' ) ) flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        5,
        0,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )",
        "char a [ 110 ] [ 110 ] ;",
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' K ' , a [ i + 1 ] = ' a ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        5,
        0,
        6,
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )",
        "char a [ 110 ] [ 110 ] ;",
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' K ' , a [ i + 1 ] = ' a ' ;",
        "if ( ( a [ i ] == ' V ' && a [ i + 1 ] == ' V ' ) || ( a [ i ] == ' K ' ) || ( a [ i + 1 ] == ' K ' ) ) flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        5,
        0,
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )",
        "char a [ 110 ] [ 110 ] ;",
        "if ( ( a [ i ] == ' V ' && a [ i + 1 ] == ' V ' ) || ( a [ i ] == ' K ' ) || ( a [ i + 1 ] == ' K ' ) ) flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )",
        "for ( i = 0 ; i < len ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        9,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )",
        "for ( i = 0 ; i < len ; i ++ )",
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' K ' , a [ i + 1 ] = ' a ' ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        9,
        6,
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )",
        "for ( i = 0 ; i < len ; i ++ )",
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' K ' , a [ i + 1 ] = ' a ' ;",
        "if ( ( a [ i ] == ' V ' && a [ i + 1 ] == ' V ' ) || ( a [ i ] == ' K ' ) || ( a [ i + 1 ] == ' K ' ) ) flag = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        9,
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )",
        "for ( i = 0 ; i < len ; i ++ )",
        "if ( ( a [ i ] == ' V ' && a [ i + 1 ] == ' V ' ) || ( a [ i ] == ' K ' ) || ( a [ i + 1 ] == ' K ' ) ) flag = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )",
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' K ' , a [ i + 1 ] = ' a ' ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )",
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' K ' , a [ i + 1 ] = ' a ' ;",
        "if ( ( a [ i ] == ' V ' && a [ i + 1 ] == ' V ' ) || ( a [ i ] == ' K ' ) || ( a [ i + 1 ] == ' K ' ) ) flag = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )",
        "if ( ( a [ i ] == ' V ' && a [ i + 1 ] == ' V ' ) || ( a [ i ] == ' K ' ) || ( a [ i + 1 ] == ' K ' ) ) flag = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "char a [ 110 ] [ 110 ] ;",
        "for ( i = 0 ; i < len ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        0,
        9,
        6
      ],
      "mod_code": [
        "char a [ 110 ] [ 110 ] ;",
        "for ( i = 0 ; i < len ; i ++ )",
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' K ' , a [ i + 1 ] = ' a ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        0,
        9,
        6,
        10
      ],
      "mod_code": [
        "char a [ 110 ] [ 110 ] ;",
        "for ( i = 0 ; i < len ; i ++ )",
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' K ' , a [ i + 1 ] = ' a ' ;",
        "if ( ( a [ i ] == ' V ' && a [ i + 1 ] == ' V ' ) || ( a [ i ] == ' K ' ) || ( a [ i + 1 ] == ' K ' ) ) flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        0,
        9,
        10
      ],
      "mod_code": [
        "char a [ 110 ] [ 110 ] ;",
        "for ( i = 0 ; i < len ; i ++ )",
        "if ( ( a [ i ] == ' V ' && a [ i + 1 ] == ' V ' ) || ( a [ i ] == ' K ' ) || ( a [ i + 1 ] == ' K ' ) ) flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "char a [ 110 ] [ 110 ] ;",
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' K ' , a [ i + 1 ] = ' a ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        0,
        6,
        10
      ],
      "mod_code": [
        "char a [ 110 ] [ 110 ] ;",
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' K ' , a [ i + 1 ] = ' a ' ;",
        "if ( ( a [ i ] == ' V ' && a [ i + 1 ] == ' V ' ) || ( a [ i ] == ' K ' ) || ( a [ i + 1 ] == ' K ' ) ) flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "char a [ 110 ] [ 110 ] ;",
        "if ( ( a [ i ] == ' V ' && a [ i + 1 ] == ' V ' ) || ( a [ i ] == ' K ' ) || ( a [ i + 1 ] == ' K ' ) ) flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [110][110]’)"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )",
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' K ' , a [ i + 1 ] = ' a ' ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        6,
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )",
        "if ( a [ i ] == ' V ' && a [ i + 1 ] == ' K ' ) a [ i + 1 ] = ' K ' , a [ i + 1 ] = ' a ' ;",
        "if ( ( a [ i ] == ' V ' && a [ i + 1 ] == ' V ' ) || ( a [ i ] == ' K ' ) || ( a [ i + 1 ] == ' K ' ) ) flag = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )",
        "if ( ( a [ i ] == ' V ' && a [ i + 1 ] == ' V ' ) || ( a [ i ] == ' K ' ) || ( a [ i + 1 ] == ' K ' ) ) flag = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}