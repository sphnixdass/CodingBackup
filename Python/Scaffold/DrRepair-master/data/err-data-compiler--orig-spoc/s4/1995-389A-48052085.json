{
  "meta": {
    "index": 1995,
    "hitid": "35YHTYFL1GXC1AFKXJMMFS0WL1SFVQ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "389A",
    "subid": "48052085"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare gcd with integers a , b as arguments , returning integer",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if a is less than b , return result of run gcd with b , a as arguments",
      "code": "if ( a < b ) { return gcd ( b , a ) ; }",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if b is 0 , return a from function",
      "code": "if ( b == 0 ) { return a ; }",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return result of run gcd with b , a % b as arguments",
      "code": "return gcd ( b , a % b ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "declare n , x , g as integers",
      "code": "int n , x , g ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read g",
      "code": "cin >> g ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "let g be result of run gcd with g , x as arguments",
      "code": "g = gcd ( g , x ) ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print g * n , newline",
      "code": "cout << g * n << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "gets ( g ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "g = gcd ( ( g , x ) ) ;"
      ],
      "err_line": 11,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "gets ( g ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        7
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "gets ( g ) ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        7,
        11
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "gets ( g ) ;",
        "while ( cin >> n )",
        "g = gcd ( ( g , x ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        7,
        10
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "gets ( g ) ;",
        "while ( cin >> n )",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        11
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "gets ( g ) ;",
        "g = gcd ( ( g , x ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        11,
        10
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "gets ( g ) ;",
        "g = gcd ( ( g , x ) ) ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        10
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "gets ( g ) ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        11
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "while ( cin >> n )",
        "g = gcd ( ( g , x ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        11,
        10
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "while ( cin >> n )",
        "g = gcd ( ( g , x ) ) ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        10
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "while ( cin >> n )",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "g = gcd ( ( g , x ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11,
        10
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "g = gcd ( ( g , x ) ) ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "gets ( g ) ;",
        "while ( cin >> n )"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7,
        11
      ],
      "mod_code": [
        "gets ( g ) ;",
        "while ( cin >> n )",
        "g = gcd ( ( g , x ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7,
        11,
        10
      ],
      "mod_code": [
        "gets ( g ) ;",
        "while ( cin >> n )",
        "g = gcd ( ( g , x ) ) ;",
        "cin >> n ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7,
        10
      ],
      "mod_code": [
        "gets ( g ) ;",
        "while ( cin >> n )",
        "cin >> n ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "gets ( g ) ;",
        "g = gcd ( ( g , x ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        11,
        10
      ],
      "mod_code": [
        "gets ( g ) ;",
        "g = gcd ( ( g , x ) ) ;",
        "cin >> n ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "gets ( g ) ;",
        "cin >> n ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "while ( cin >> n )",
        "g = gcd ( ( g , x ) ) ;"
      ],
      "err_line": 11,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        7,
        11,
        10
      ],
      "mod_code": [
        "while ( cin >> n )",
        "g = gcd ( ( g , x ) ) ;",
        "cin >> n ;"
      ],
      "err_line": 11,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "g = gcd ( ( g , x ) ) ;",
        "cin >> n ;"
      ],
      "err_line": 11,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    }
  ]
}