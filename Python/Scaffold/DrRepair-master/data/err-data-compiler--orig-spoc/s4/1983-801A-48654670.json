{
  "meta": {
    "index": 1983,
    "hitid": "3ULIZ0H1VAZ4D16XKTPOMS23736517",
    "workerid": "AIWEXPJAU66D9",
    "probid": "801A",
    "subid": "48654670"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare string str",
      "code": "string str ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create an array of integers vis with 1005 elements",
      "code": "int vis [ 1005 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare integer len = length of str",
      "code": "int len = str . length ( ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create integer sum = 0",
      "code": "int sum = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for integer t = 0 to len - 1 exclusive",
      "code": "for ( int t = 0 ; t < len - 1 ; t ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if str [ t ] is equal to ' V ' and str [ t + 1 ] is equal to ' K '",
      "code": "if ( str [ t ] == ' V ' && str [ t + 1 ] == ' K ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment sum by one",
      "code": "sum ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "assign 1 to vis [ t ]",
      "code": "vis [ t ] = 1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "assign 1 to vis [ t + 1 ]",
      "code": "vis [ t + 1 ] = 1 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for t from 0 to len - 1 exclusive",
      "code": "for ( int t = 0 ; t < len - 1 ; t ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if str [ t ] is equal to ' V ' or str [ t + 1 ] is equal to ' K '",
      "code": "if ( str [ t ] == ' V ' || str [ t + 1 ] == ' K ' )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if vis [ t ] is equal to 0 and vis [ t + 1 ] is equal to 0",
      "code": "if ( vis [ t ] == 0 && vis [ t + 1 ] == 0 )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "increment sum",
      "code": "sum ++ ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print sum",
      "code": "cout << sum << endl ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "char str ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 10,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( t = 0 ; t < len - 1 ; t ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘t’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        0,
        17
      ],
      "mod_code": [
        "char str ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        0,
        17,
        3
      ],
      "mod_code": [
        "char str ;",
        "break break ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        17,
        3,
        13
      ],
      "mod_code": [
        "char str ;",
        "break break ;",
        "gets ( str ) ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        17,
        3,
        21
      ],
      "mod_code": [
        "char str ;",
        "break break ;",
        "gets ( str ) ;",
        "cout << sum ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        17,
        3,
        10
      ],
      "mod_code": [
        "char str ;",
        "break break ;",
        "gets ( str ) ;",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        17,
        13
      ],
      "mod_code": [
        "char str ;",
        "break break ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        0,
        17,
        13,
        21
      ],
      "mod_code": [
        "char str ;",
        "break break ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )",
        "cout << sum ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        0,
        17,
        13,
        10
      ],
      "mod_code": [
        "char str ;",
        "break break ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        0,
        17,
        21
      ],
      "mod_code": [
        "char str ;",
        "break break ;",
        "cout << sum ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        0,
        17,
        21,
        10
      ],
      "mod_code": [
        "char str ;",
        "break break ;",
        "cout << sum ;",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        0,
        17,
        10
      ],
      "mod_code": [
        "char str ;",
        "break break ;",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "char str ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        13
      ],
      "mod_code": [
        "char str ;",
        "gets ( str ) ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        13,
        21
      ],
      "mod_code": [
        "char str ;",
        "gets ( str ) ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )",
        "cout << sum ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        13,
        10
      ],
      "mod_code": [
        "char str ;",
        "gets ( str ) ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        21
      ],
      "mod_code": [
        "char str ;",
        "gets ( str ) ;",
        "cout << sum ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        21,
        10
      ],
      "mod_code": [
        "char str ;",
        "gets ( str ) ;",
        "cout << sum ;",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        10
      ],
      "mod_code": [
        "char str ;",
        "gets ( str ) ;",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "char str ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        0,
        13,
        21
      ],
      "mod_code": [
        "char str ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )",
        "cout << sum ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        0,
        13,
        21,
        10
      ],
      "mod_code": [
        "char str ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )",
        "cout << sum ;",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        0,
        13,
        10
      ],
      "mod_code": [
        "char str ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        0,
        21
      ],
      "mod_code": [
        "char str ;",
        "cout << sum ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        0,
        21,
        10
      ],
      "mod_code": [
        "char str ;",
        "cout << sum ;",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "char str ;",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        17,
        3
      ],
      "mod_code": [
        "break break ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        17,
        3,
        13
      ],
      "mod_code": [
        "break break ;",
        "gets ( str ) ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        17,
        3,
        13,
        21
      ],
      "mod_code": [
        "break break ;",
        "gets ( str ) ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )",
        "cout << sum ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        17,
        3,
        13,
        10
      ],
      "mod_code": [
        "break break ;",
        "gets ( str ) ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        17,
        3,
        21
      ],
      "mod_code": [
        "break break ;",
        "gets ( str ) ;",
        "cout << sum ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        17,
        3,
        21,
        10
      ],
      "mod_code": [
        "break break ;",
        "gets ( str ) ;",
        "cout << sum ;",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        17,
        3,
        10
      ],
      "mod_code": [
        "break break ;",
        "gets ( str ) ;",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        17,
        13
      ],
      "mod_code": [
        "break break ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘t’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        13,
        21
      ],
      "mod_code": [
        "break break ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )",
        "cout << sum ;"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘t’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        13,
        21,
        10
      ],
      "mod_code": [
        "break break ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )",
        "cout << sum ;",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 10,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        17,
        13,
        10
      ],
      "mod_code": [
        "break break ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 10,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        17,
        21
      ],
      "mod_code": [
        "break break ;",
        "cout << sum ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        17,
        21,
        10
      ],
      "mod_code": [
        "break break ;",
        "cout << sum ;",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 10,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        17,
        10
      ],
      "mod_code": [
        "break break ;",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 10,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "gets ( str ) ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        13,
        21
      ],
      "mod_code": [
        "gets ( str ) ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )",
        "cout << sum ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        13,
        21,
        10
      ],
      "mod_code": [
        "gets ( str ) ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )",
        "cout << sum ;",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        13,
        10
      ],
      "mod_code": [
        "gets ( str ) ;",
        "for ( t = 0 ; t < len - 1 ; t ++ )",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        21
      ],
      "mod_code": [
        "gets ( str ) ;",
        "cout << sum ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        21,
        10
      ],
      "mod_code": [
        "gets ( str ) ;",
        "cout << sum ;",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "gets ( str ) ;",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        13,
        21
      ],
      "mod_code": [
        "for ( t = 0 ; t < len - 1 ; t ++ )",
        "cout << sum ;"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘t’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        21,
        10
      ],
      "mod_code": [
        "for ( t = 0 ; t < len - 1 ; t ++ )",
        "cout << sum ;",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 10,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        13,
        10
      ],
      "mod_code": [
        "for ( t = 0 ; t < len - 1 ; t ++ )",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 10,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        21,
        10
      ],
      "mod_code": [
        "cout << sum ;",
        "char vis [ t + 1 ] = 1 ;"
      ],
      "err_line": 10,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    }
  ]
}