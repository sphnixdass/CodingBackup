{
  "meta": {
    "index": 113,
    "hitid": "35YHTYFL1GXC1AFKXJMMFS0WKZFVFO",
    "workerid": "AIWEXPJAU66D9",
    "probid": "3A",
    "subid": "48991687"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare strings called s and t",
      "code": "string s , t ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s and t",
      "code": "cin >> s >> t ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "print max of abs ( s [ 0 ] - t [ 0 ] ) and abs ( s [ 1 ] - t [ 1 ] )",
      "code": "cout << max ( ( abs ( s [ 0 ] - t [ 0 ] ) ) , ( abs ( s [ 1 ] - t [ 1 ] ) ) ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while s is not equal to t",
      "code": "while ( s != t )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if s [ 0 ] is greater than t [ 0 ]",
      "code": "if ( s [ 0 ] > t [ 0 ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print \" L \"",
      "code": "cout << \" L \" ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "decrease s [ 0 ] by one",
      "code": "s [ 0 ] -- ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if s [ 0 ] is less than t [ 0 ]",
      "code": "if ( s [ 0 ] < t [ 0 ] )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print \" R \"",
      "code": "cout << \" R \" ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "increment s [ 0 ]",
      "code": "s [ 0 ] ++ ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if s [ 1 ] is greater than t [ 1 ]",
      "code": "if ( s [ 1 ] > t [ 1 ] )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "print \" D \"",
      "code": "cout << \" D \" ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "decrement s [ 1 ]",
      "code": "s [ 1 ] -- ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if s [ 1 ] is less than t [ 1 ]",
      "code": "if ( s [ 1 ] < t [ 1 ] )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print \" U \"",
      "code": "cout << \" U \" ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "increase s [ 1 ]",
      "code": "s [ 1 ] ++ ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string s , t t ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘t’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s >> s >> t ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "while ( s )"
      ],
      "err_line": 5,
      "err_msg": "could not convert ‘s’ from ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘bool’"
    }
  ]
}