{
  "meta": {
    "index": 5,
    "hitid": "33KGGVH24UBDFKQ7QZ8JEBTN02F1XC",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "265A",
    "subid": "47515402"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int a , b , c , d , e , f , g",
      "code": "int a , b , c , d , e , f , g ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create string s and t",
      "code": "string s , t ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while read s and t",
      "code": "while ( cin >> s >> t )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set a to size of s",
      "code": "a = s . size ( ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "assign size of t to b",
      "code": "b = t . size ( ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "d = 1",
      "code": "d = 1 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set e to 0",
      "code": "e = 0 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for x = 0 to b exclusive",
      "code": "for ( c = 0 ; c < b ; c ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if t [ c ] = s [ e ] and e + 1 < a",
      "code": "if ( t [ c ] == s [ e ] && e + 1 < a )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "increment d",
      "code": "d ++ ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "add 1 to e",
      "code": "e ++ ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print d",
      "code": "cout << d << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "const int a , b , c , d , e , f , g ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string s , t t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘t’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( s >> s >> t )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( x = 0 ; x < b ; x ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "for ( int x = 0 ; x < b ; x ++ )",
        "while ( s >> s >> t )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        3,
        1
      ],
      "mod_code": [
        "for ( int x = 0 ; x < b ; x ++ )",
        "while ( s >> s >> t )",
        "const int a , b , c , d , e , f , g ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        3,
        1,
        14
      ],
      "mod_code": [
        "for ( int x = 0 ; x < b ; x ++ )",
        "while ( s >> s >> t )",
        "const int a , b , c , d , e , f , g ;",
        "cout << d ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        3,
        1,
        2
      ],
      "mod_code": [
        "for ( int x = 0 ; x < b ; x ++ )",
        "while ( s >> s >> t )",
        "const int a , b , c , d , e , f , g ;",
        "string s , t t ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        3,
        14
      ],
      "mod_code": [
        "for ( int x = 0 ; x < b ; x ++ )",
        "while ( s >> s >> t )",
        "cout << d ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        3,
        14,
        2
      ],
      "mod_code": [
        "for ( int x = 0 ; x < b ; x ++ )",
        "while ( s >> s >> t )",
        "cout << d ;",
        "string s , t t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘t’"
    },
    {
      "mod_line": [
        8,
        3,
        2
      ],
      "mod_code": [
        "for ( int x = 0 ; x < b ; x ++ )",
        "while ( s >> s >> t )",
        "string s , t t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘t’"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "for ( int x = 0 ; x < b ; x ++ )",
        "const int a , b , c , d , e , f , g ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        1,
        14
      ],
      "mod_code": [
        "for ( int x = 0 ; x < b ; x ++ )",
        "const int a , b , c , d , e , f , g ;",
        "cout << d ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        1,
        14,
        2
      ],
      "mod_code": [
        "for ( int x = 0 ; x < b ; x ++ )",
        "const int a , b , c , d , e , f , g ;",
        "cout << d ;",
        "string s , t t ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        1,
        2
      ],
      "mod_code": [
        "for ( int x = 0 ; x < b ; x ++ )",
        "const int a , b , c , d , e , f , g ;",
        "string s , t t ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        14,
        2
      ],
      "mod_code": [
        "for ( int x = 0 ; x < b ; x ++ )",
        "cout << d ;",
        "string s , t t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘t’"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "for ( int x = 0 ; x < b ; x ++ )",
        "string s , t t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘t’"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "while ( s >> s >> t )",
        "for ( x = 0 ; x < b ; x ++ )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        8,
        1
      ],
      "mod_code": [
        "while ( s >> s >> t )",
        "for ( x = 0 ; x < b ; x ++ )",
        "const int a , b , c , d , e , f , g ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        1,
        14
      ],
      "mod_code": [
        "while ( s >> s >> t )",
        "for ( x = 0 ; x < b ; x ++ )",
        "const int a , b , c , d , e , f , g ;",
        "cout << d ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        1,
        2
      ],
      "mod_code": [
        "while ( s >> s >> t )",
        "for ( x = 0 ; x < b ; x ++ )",
        "const int a , b , c , d , e , f , g ;",
        "string s , t t ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        14
      ],
      "mod_code": [
        "while ( s >> s >> t )",
        "for ( x = 0 ; x < b ; x ++ )",
        "cout << d ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        8,
        14,
        2
      ],
      "mod_code": [
        "while ( s >> s >> t )",
        "for ( x = 0 ; x < b ; x ++ )",
        "cout << d ;",
        "string s , t t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘t’"
    },
    {
      "mod_line": [
        3,
        8,
        2
      ],
      "mod_code": [
        "while ( s >> s >> t )",
        "for ( x = 0 ; x < b ; x ++ )",
        "string s , t t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘t’"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "while ( s >> s >> t )",
        "const int a , b , c , d , e , f , g ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        1,
        14
      ],
      "mod_code": [
        "while ( s >> s >> t )",
        "const int a , b , c , d , e , f , g ;",
        "cout << d ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        1,
        14,
        2
      ],
      "mod_code": [
        "while ( s >> s >> t )",
        "const int a , b , c , d , e , f , g ;",
        "cout << d ;",
        "string s , t t ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        1,
        2
      ],
      "mod_code": [
        "while ( s >> s >> t )",
        "const int a , b , c , d , e , f , g ;",
        "string s , t t ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "while ( s >> s >> t )",
        "cout << d ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        14,
        2
      ],
      "mod_code": [
        "while ( s >> s >> t )",
        "cout << d ;",
        "string s , t t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘t’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "while ( s >> s >> t )",
        "string s , t t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘t’"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "for ( x = 0 ; x < b ; x ++ )",
        "const int a , b , c , d , e , f , g ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        1,
        14
      ],
      "mod_code": [
        "for ( x = 0 ; x < b ; x ++ )",
        "const int a , b , c , d , e , f , g ;",
        "cout << d ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        1,
        14,
        2
      ],
      "mod_code": [
        "for ( x = 0 ; x < b ; x ++ )",
        "const int a , b , c , d , e , f , g ;",
        "cout << d ;",
        "string s , t t ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        1,
        2
      ],
      "mod_code": [
        "for ( x = 0 ; x < b ; x ++ )",
        "const int a , b , c , d , e , f , g ;",
        "string s , t t ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "for ( x = 0 ; x < b ; x ++ )",
        "cout << d ;"
      ],
      "err_line": 8,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        14,
        2
      ],
      "mod_code": [
        "for ( x = 0 ; x < b ; x ++ )",
        "cout << d ;",
        "string s , t t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘t’"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "for ( x = 0 ; x < b ; x ++ )",
        "string s , t t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘t’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "const int a , b , c , d , e , f , g ;",
        "cout << d ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        14,
        2
      ],
      "mod_code": [
        "const int a , b , c , d , e , f , g ;",
        "cout << d ;",
        "string s , t t ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "const int a , b , c , d , e , f , g ;",
        "string s , t t ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘a’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        2
      ],
      "mod_code": [
        "cout << d ;",
        "string s , t t ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘t’"
    }
  ]
}