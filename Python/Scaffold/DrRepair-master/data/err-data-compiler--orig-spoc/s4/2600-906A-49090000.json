{
  "meta": {
    "index": 2600,
    "hitid": "3HEADTGN2PM940KTOEMGWHEFOP2RVW",
    "workerid": "AIWEXPJAU66D9",
    "probid": "906A",
    "subid": "49090000"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare integers ans and cul = 0",
      "code": "int ans = 0 , cul = 0 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer n",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare char o",
      "code": "char o ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare strings say and ope",
      "code": "string say , ope ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare bool res = 0",
      "code": "bool res = 0 ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "create boolean array alph with size 30 filled with 0",
      "code": "bool alph [ 30 ] = { 0 } ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "void function tan with string argument a",
      "code": "void tan ( string a )",
      "indent": 0
    },
    {
      "line": 7,
      "text": "for k = 0 to 26 exclusive",
      "code": "for ( int k = 0 ; k < 26 ; k ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "declare int flag = 0",
      "code": "int flag = 0 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if alph [ k ] = 0",
      "code": "if ( alph [ k ] == 0 )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "for j from 0 to length of a exclusive",
      "code": "for ( int j = 0 ; j < a . length ( ) ; j ++ )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if k is equal to a [ j ] - ' a ' , set flag to 1",
      "code": "if ( k == a [ j ] - ' a ' ) flag = 1 ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "if flag is equal to 0 , set alph [ k ] to 1",
      "code": "if ( flag == 0 ) alph [ k ] = 1 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 15,
      "text": "dian is a void function with string argument a",
      "code": "void dian ( string a )",
      "indent": 0
    },
    {
      "line": 16,
      "text": "for i from 0 to length of a exclusive",
      "code": "for ( int i = 0 ; i < a . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "declare integer tmp = a [ i ] - ' a '",
      "code": "int tmp = a [ i ] - ' a ' ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "assign 1 to alph [ tmp ]",
      "code": "alph [ tmp ] = 1 ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 21,
      "text": "wen is a void function with string argument a",
      "code": "void wen ( string a )",
      "indent": 0
    },
    {
      "line": 22,
      "text": "change alph [ a [ 0 ] - ' a ' ] to 1",
      "code": "alph [ a [ 0 ] - ' a ' ] = 1 ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 25,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "loop , decrementing n , while it is not 0",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 27,
      "text": "read ope and say",
      "code": "cin >> ope >> say ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "if res = true",
      "code": "if ( res == true )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "if ope ! = \" . \" and n ! = 0 , increment ans by one",
      "code": "if ( ope != \" . \" && n != 0 ) ans ++ ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "else if ope = \" ! \"",
      "code": "else if ( ope == \" ! \" )",
      "indent": 2
    },
    {
      "line": 31,
      "text": "call tan ( say )",
      "code": "tan ( say ) ;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "else if ope = \" . \"",
      "code": "else if ( ope == \" . \" )",
      "indent": 2
    },
    {
      "line": 33,
      "text": "call dian ( say )",
      "code": "dian ( say ) ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "else if ope = \" ? \"",
      "code": "else if ( ope == \" ? \" )",
      "indent": 2
    },
    {
      "line": 35,
      "text": "call wen ( say )",
      "code": "wen ( say ) ;",
      "indent": 3
    },
    {
      "line": 36,
      "text": "for i from 0 to 26 exclusive",
      "code": "for ( int i = 0 ; i < 26 ; i ++ )",
      "indent": 2
    },
    {
      "line": 37,
      "text": "if alph [ i ] is equal to 0 , increment cul by one",
      "code": "if ( alph [ i ] == 0 ) cul ++ ;",
      "indent": 3
    },
    {
      "line": 38,
      "text": "if cul is equal to 1 , change res to true",
      "code": "if ( cul == 1 ) res = true ;",
      "indent": 2
    },
    {
      "line": 39,
      "text": "set cul to 0",
      "code": "cul = 0 ;",
      "indent": 2
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 41,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char n ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘char n’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string say , ope ope ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘ope’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "bool alph = 0 , alph ( 30 ) ;"
      ],
      "err_line": 5,
      "err_msg": "redefinition of ‘bool alph’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "void tan ( string a ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( k = 0 ; k < 26 ; k ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "void dian ( string a ) ;"
      ],
      "err_line": 16,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "alph = 1 ;"
      ],
      "err_line": 18,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘bool [30]’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "void wen ( string a ) ;"
      ],
      "err_line": 22,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "alph [ a [ 0 ] - ' a ' ] ] = 1 ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "ope >> ope >> say ;"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "tan ( say ) ) ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "else if ( ope = \" . \" )"
      ],
      "err_line": 32,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\".\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "dian ( say ) ) ;"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "else if ( ope == ' ? \" )"
      ],
      "err_line": 34,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "wen ( ) ;"
      ],
      "err_line": 35,
      "err_msg": "too few arguments to function ‘void wen(std::__cxx11::string)’"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "for ( i = 0 ; i < 26 ; i ++ )"
      ],
      "err_line": 36,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        32
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "else if ( ope = \" . \" )"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        32,
        36
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "else if ( ope = \" . \" )",
        "for ( i = 0 ; i < 26 ; i ++ )"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        32,
        36,
        31
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "else if ( ope = \" . \" )",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "tan ( say ) ) ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        32,
        36,
        41
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "else if ( ope = \" . \" )",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "cout << ans ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        32,
        36,
        8
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "else if ( ope = \" . \" )",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        32,
        31
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "else if ( ope = \" . \" )",
        "tan ( say ) ) ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        32,
        31,
        41
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "else if ( ope = \" . \" )",
        "tan ( say ) ) ;",
        "cout << ans ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        32,
        31,
        8
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "else if ( ope = \" . \" )",
        "tan ( say ) ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        32,
        41
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "else if ( ope = \" . \" )",
        "cout << ans ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        32,
        41,
        8
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "else if ( ope = \" . \" )",
        "cout << ans ;",
        "int flag = 1 ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        32,
        8
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "else if ( ope = \" . \" )",
        "int flag = 1 ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        36
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "for ( i = 0 ; i < 26 ; i ++ )"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        36,
        31
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "tan ( say ) ) ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        36,
        31,
        41
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "tan ( say ) ) ;",
        "cout << ans ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        36,
        31,
        8
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "tan ( say ) ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        36,
        41
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "cout << ans ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        36,
        41,
        8
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "cout << ans ;",
        "int flag = 1 ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        36,
        8
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        31
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "tan ( say ) ) ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        31,
        41
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "tan ( say ) ) ;",
        "cout << ans ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        31,
        41,
        8
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "tan ( say ) ) ;",
        "cout << ans ;",
        "int flag = 1 ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        31,
        8
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "tan ( say ) ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        41
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "cout << ans ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        41,
        8
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "cout << ans ;",
        "int flag = 1 ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        30,
        8
      ],
      "mod_code": [
        "else if ( ope = \" ! \" )",
        "int flag = 1 ;"
      ],
      "err_line": 30,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"!\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        32,
        36
      ],
      "mod_code": [
        "else if ( ope = \" . \" )",
        "for ( i = 0 ; i < 26 ; i ++ )"
      ],
      "err_line": 32,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\".\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        32,
        36,
        31
      ],
      "mod_code": [
        "else if ( ope = \" . \" )",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "tan ( say ) ) ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        36,
        31,
        41
      ],
      "mod_code": [
        "else if ( ope = \" . \" )",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "tan ( say ) ) ;",
        "cout << ans ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        36,
        31,
        8
      ],
      "mod_code": [
        "else if ( ope = \" . \" )",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "tan ( say ) ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        36,
        41
      ],
      "mod_code": [
        "else if ( ope = \" . \" )",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "cout << ans ;"
      ],
      "err_line": 32,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\".\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        32,
        36,
        41,
        8
      ],
      "mod_code": [
        "else if ( ope = \" . \" )",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "cout << ans ;",
        "int flag = 1 ;"
      ],
      "err_line": 32,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\".\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        32,
        36,
        8
      ],
      "mod_code": [
        "else if ( ope = \" . \" )",
        "for ( i = 0 ; i < 26 ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 32,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\".\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        32,
        31
      ],
      "mod_code": [
        "else if ( ope = \" . \" )",
        "tan ( say ) ) ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        31,
        41
      ],
      "mod_code": [
        "else if ( ope = \" . \" )",
        "tan ( say ) ) ;",
        "cout << ans ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        31,
        41,
        8
      ],
      "mod_code": [
        "else if ( ope = \" . \" )",
        "tan ( say ) ) ;",
        "cout << ans ;",
        "int flag = 1 ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        31,
        8
      ],
      "mod_code": [
        "else if ( ope = \" . \" )",
        "tan ( say ) ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        41
      ],
      "mod_code": [
        "else if ( ope = \" . \" )",
        "cout << ans ;"
      ],
      "err_line": 32,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\".\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        32,
        41,
        8
      ],
      "mod_code": [
        "else if ( ope = \" . \" )",
        "cout << ans ;",
        "int flag = 1 ;"
      ],
      "err_line": 32,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\".\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        32,
        8
      ],
      "mod_code": [
        "else if ( ope = \" . \" )",
        "int flag = 1 ;"
      ],
      "err_line": 32,
      "err_msg": "could not convert ‘ope.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\".\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        36,
        31
      ],
      "mod_code": [
        "for ( i = 0 ; i < 26 ; i ++ )",
        "tan ( say ) ) ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        36,
        31,
        41
      ],
      "mod_code": [
        "for ( i = 0 ; i < 26 ; i ++ )",
        "tan ( say ) ) ;",
        "cout << ans ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        36,
        31,
        41,
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < 26 ; i ++ )",
        "tan ( say ) ) ;",
        "cout << ans ;",
        "int flag = 1 ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        36,
        31,
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < 26 ; i ++ )",
        "tan ( say ) ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        36,
        41
      ],
      "mod_code": [
        "for ( i = 0 ; i < 26 ; i ++ )",
        "cout << ans ;"
      ],
      "err_line": 36,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        36,
        41,
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < 26 ; i ++ )",
        "cout << ans ;",
        "int flag = 1 ;"
      ],
      "err_line": 36,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        36,
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < 26 ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 36,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        41
      ],
      "mod_code": [
        "tan ( say ) ) ;",
        "cout << ans ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        31,
        41,
        8
      ],
      "mod_code": [
        "tan ( say ) ) ;",
        "cout << ans ;",
        "int flag = 1 ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        31,
        8
      ],
      "mod_code": [
        "tan ( say ) ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘;’ before ‘)’ token"
    }
  ]
}