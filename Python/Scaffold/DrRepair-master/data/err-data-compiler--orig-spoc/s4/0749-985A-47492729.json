{
  "meta": {
    "index": 749,
    "hitid": "38Z7YZ2SB3W46TLTCSYXC2EGK13QIW",
    "workerid": "A1APYLD4DUK33J",
    "probid": "985A",
    "subid": "47492729"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare integer Black with integer array arr , long long integer n as arguments",
      "code": "int Black ( int arr [ ] , long long int n )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare ans = 0 as long long",
      "code": "long long ans = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 1 to n / 2 inclusive , let ans be ans + absolute value of ( 2 * i - arr [ i ] )",
      "code": "for ( int i = 1 ; i <= n / 2 ; i ++ ) { ans = ans + abs ( 2 * i - arr [ i ] ) ; }",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return ans",
      "code": "return ans ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "declare White with integer array arr , long long integer n as arguments , returning integer",
      "code": "int White ( int arr [ ] , long long int n )",
      "indent": 0
    },
    {
      "line": 6,
      "text": "declare ans = 0 as long long",
      "code": "long long ans = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 1 to n / 2 inclusive , let ans be ans + absolute value of ( ( 2 * i - 1 ) - arr [ i ] )",
      "code": "for ( int i = 1 ; i <= n / 2 ; i ++ ) { ans = ans + abs ( ( 2 * i - 1 ) - arr [ i ] ) ; }",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return ans from function",
      "code": "return ans ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 11,
      "text": "declare long long integer n",
      "code": "long long int n ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "declare integer array arr with size n / 2 + 1",
      "code": "int arr [ n / 2 + 1 ] ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 1 to n / 2 inclusive , read arr [ i ]",
      "code": "for ( int i = 1 ; i <= n / 2 ; i ++ ) { cin >> arr [ i ] ; }",
      "indent": 1
    },
    {
      "line": 15,
      "text": "sort elements from arr + 1 to arr + n / 2 + 1",
      "code": "sort ( arr + 1 , arr + n / 2 + 1 ) ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "declare integer blackAns = result of run Black with arr , n as arguments",
      "code": "int blackAns = Black ( arr , n ) ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "declare integer whiteAns = run White ( arr , n )",
      "code": "int whiteAns = White ( arr , n ) ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if blackAns is less than whiteAns",
      "code": "if ( blackAns < whiteAns )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print blackAns and newline",
      "code": "cout << blackAns << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print whiteAns , newline",
      "code": "cout << whiteAns << endl ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int White ( int arr [ ] , long long int n ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "int arr [ n / 2 ] + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "return ans ans ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘ans’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 14,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "int blackAns = * ( arr , n ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 17,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int White ( int arr [ ] , long long int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        13
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int White ( int arr [ ] , long long int n ) ;",
        "int arr [ n / 2 ] + 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        13,
        16
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int White ( int arr [ ] , long long int n ) ;",
        "int arr [ n / 2 ] + 1 ;",
        "int blackAns = * ( arr , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        13,
        20
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int White ( int arr [ ] , long long int n ) ;",
        "int arr [ n / 2 ] + 1 ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        13,
        17
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int White ( int arr [ ] , long long int n ) ;",
        "int arr [ n / 2 ] + 1 ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        16
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int White ( int arr [ ] , long long int n ) ;",
        "int blackAns = * ( arr , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        16,
        20
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int White ( int arr [ ] , long long int n ) ;",
        "int blackAns = * ( arr , n ) ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        16,
        17
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int White ( int arr [ ] , long long int n ) ;",
        "int blackAns = * ( arr , n ) ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        20
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int White ( int arr [ ] , long long int n ) ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        20,
        17
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int White ( int arr [ ] , long long int n ) ;",
        "else ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        17
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int White ( int arr [ ] , long long int n ) ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int arr [ n / 2 ] + 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        16
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int arr [ n / 2 ] + 1 ;",
        "int blackAns = * ( arr , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        16,
        20
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int arr [ n / 2 ] + 1 ;",
        "int blackAns = * ( arr , n ) ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        16,
        17
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int arr [ n / 2 ] + 1 ;",
        "int blackAns = * ( arr , n ) ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        20
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int arr [ n / 2 ] + 1 ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        20,
        17
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int arr [ n / 2 ] + 1 ;",
        "else ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        17
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int arr [ n / 2 ] + 1 ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        16
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int blackAns = * ( arr , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        16,
        20
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int blackAns = * ( arr , n ) ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        16,
        20,
        17
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int blackAns = * ( arr , n ) ;",
        "else ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        16,
        17
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int blackAns = * ( arr , n ) ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        20
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        20,
        17
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "else ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        17
      ],
      "mod_code": [
        "int Black ( int arr [ ] , long long int n ) ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "int White ( int arr [ ] , long long int n ) ;",
        "int arr [ n / 2 ] + 1 ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        13,
        16
      ],
      "mod_code": [
        "int White ( int arr [ ] , long long int n ) ;",
        "int arr [ n / 2 ] + 1 ;",
        "int blackAns = * ( arr , n ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        13,
        16,
        20
      ],
      "mod_code": [
        "int White ( int arr [ ] , long long int n ) ;",
        "int arr [ n / 2 ] + 1 ;",
        "int blackAns = * ( arr , n ) ;",
        "else ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        13,
        16,
        17
      ],
      "mod_code": [
        "int White ( int arr [ ] , long long int n ) ;",
        "int arr [ n / 2 ] + 1 ;",
        "int blackAns = * ( arr , n ) ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        13,
        20
      ],
      "mod_code": [
        "int White ( int arr [ ] , long long int n ) ;",
        "int arr [ n / 2 ] + 1 ;",
        "else ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        13,
        20,
        17
      ],
      "mod_code": [
        "int White ( int arr [ ] , long long int n ) ;",
        "int arr [ n / 2 ] + 1 ;",
        "else ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        13,
        17
      ],
      "mod_code": [
        "int White ( int arr [ ] , long long int n ) ;",
        "int arr [ n / 2 ] + 1 ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        16
      ],
      "mod_code": [
        "int White ( int arr [ ] , long long int n ) ;",
        "int blackAns = * ( arr , n ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        16,
        20
      ],
      "mod_code": [
        "int White ( int arr [ ] , long long int n ) ;",
        "int blackAns = * ( arr , n ) ;",
        "else ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        16,
        20,
        17
      ],
      "mod_code": [
        "int White ( int arr [ ] , long long int n ) ;",
        "int blackAns = * ( arr , n ) ;",
        "else ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        16,
        17
      ],
      "mod_code": [
        "int White ( int arr [ ] , long long int n ) ;",
        "int blackAns = * ( arr , n ) ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        20
      ],
      "mod_code": [
        "int White ( int arr [ ] , long long int n ) ;",
        "else ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        20,
        17
      ],
      "mod_code": [
        "int White ( int arr [ ] , long long int n ) ;",
        "else ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        17
      ],
      "mod_code": [
        "int White ( int arr [ ] , long long int n ) ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        16
      ],
      "mod_code": [
        "int arr [ n / 2 ] + 1 ;",
        "int blackAns = * ( arr , n ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        13,
        16,
        20
      ],
      "mod_code": [
        "int arr [ n / 2 ] + 1 ;",
        "int blackAns = * ( arr , n ) ;",
        "else ;"
      ],
      "err_line": 13,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        13,
        16,
        20,
        17
      ],
      "mod_code": [
        "int arr [ n / 2 ] + 1 ;",
        "int blackAns = * ( arr , n ) ;",
        "else ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        13,
        16,
        17
      ],
      "mod_code": [
        "int arr [ n / 2 ] + 1 ;",
        "int blackAns = * ( arr , n ) ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        13,
        20
      ],
      "mod_code": [
        "int arr [ n / 2 ] + 1 ;",
        "else ;"
      ],
      "err_line": 13,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        13,
        20,
        17
      ],
      "mod_code": [
        "int arr [ n / 2 ] + 1 ;",
        "else ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        13,
        17
      ],
      "mod_code": [
        "int arr [ n / 2 ] + 1 ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        16,
        20
      ],
      "mod_code": [
        "int blackAns = * ( arr , n ) ;",
        "else ;"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        16,
        20,
        17
      ],
      "mod_code": [
        "int blackAns = * ( arr , n ) ;",
        "else ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        16,
        17
      ],
      "mod_code": [
        "int blackAns = * ( arr , n ) ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        20,
        17
      ],
      "mod_code": [
        "else ;",
        "int whiteAns ( arr , n ) ;"
      ],
      "err_line": 17,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    }
  ]
}