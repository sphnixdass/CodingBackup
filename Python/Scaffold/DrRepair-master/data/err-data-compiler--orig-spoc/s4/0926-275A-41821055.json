{
  "meta": {
    "index": 926,
    "hitid": "31YWE12TE06RQ659FFPSFLK03OGX76",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "275A",
    "subid": "41821055"
  },
  "lines": [
    {
      "line": 0,
      "text": "function toggle ( get int a , return int )",
      "code": "int toggle ( int a ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "function check ( get int number , return int )",
      "code": "int check ( int number ) ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "a = array of 5 by 5 int",
      "code": "int a [ 5 ] [ 5 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 1 to 4 exclusive",
      "code": "for ( int i = 1 ; i < 4 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 1 to 4 exclusive a [ i ] [ j ] = 1",
      "code": "for ( int j = 1 ; j < 4 ; j ++ ) { a [ i ] [ j ] = 1 ; }",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "input = array of 5 by 5 int",
      "code": "int input [ 5 ] [ 5 ] ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 1 to 4 exclusive",
      "code": "for ( int i = 1 ; i < 4 ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for j = 1 to 4 exclusive read input [ i ] [ j ]",
      "code": "for ( int j = 1 ; j < 4 ; j ++ ) { cin >> input [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 1 to 4 exclusive",
      "code": "for ( int i = 1 ; i < 4 ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for j = 1 to 4 exclusive input [ i ] [ j ] = input [ i ] [ j ] modulo 2",
      "code": "for ( int j = 1 ; j < 4 ; j ++ ) { input [ i ] [ j ] = input [ i ] [ j ] % 2 ; }",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 1 to 4 exclusive",
      "code": "for ( int i = 1 ; i < 4 ; i ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for j = 1 to 4 exclusive",
      "code": "for ( int j = 1 ; j < 4 ; j ++ )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if input [ i ] [ j ] is 1",
      "code": "if ( input [ i ] [ j ] == 1 )",
      "indent": 3
    },
    {
      "line": 17,
      "text": "a [ i ] [ j ] = toggle ( a [ i ] [ j ] )",
      "code": "a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "a [ i ] [ j + 1 ] = toggle ( a [ i ] [ j + 1 ] )",
      "code": "a [ i ] [ j + 1 ] = toggle ( a [ i ] [ j + 1 ] ) ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "a [ i + 1 ] [ j ] = toggle ( a [ i + 1 ] [ j ] )",
      "code": "a [ i + 1 ] [ j ] = toggle ( a [ i + 1 ] [ j ] ) ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "a [ i ] [ j - 1 ] = toggle ( a [ i ] [ j - 1 ] )",
      "code": "a [ i ] [ j - 1 ] = toggle ( a [ i ] [ j - 1 ] ) ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] )",
      "code": "a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "for i = 1 to 4 exclusive",
      "code": "for ( int i = 1 ; i < 4 ; i ++ )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "for j = 1 to 4 exclusive print a [ i ] [ j ]",
      "code": "for ( int j = 1 ; j < 4 ; j ++ ) { cout << a [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 27,
      "text": "print newline",
      "code": "cout << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 30,
      "text": "function toggle ( get int a , return int )",
      "code": "int toggle ( int a )",
      "indent": 0
    },
    {
      "line": 31,
      "text": "if a is 1",
      "code": "if ( a == 1 )",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 34,
      "text": "return 1",
      "code": "return 1 ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int toggle ( int a )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int check ( int number )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int input [ 5 ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;"
      ],
      "err_line": 21,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "int toggle ( int a ) ;"
      ],
      "err_line": 31,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int check ( int number )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        7
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int check ( int number )",
        "int input [ 5 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        7,
        21
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int check ( int number )",
        "int input [ 5 ] ;",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        7,
        18
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int check ( int number )",
        "int input [ 5 ] ;",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        7,
        17
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int check ( int number )",
        "int input [ 5 ] ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        21
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int check ( int number )",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        21,
        18
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int check ( int number )",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        21,
        17
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int check ( int number )",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        18
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int check ( int number )",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        18,
        17
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int check ( int number )",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        17
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int check ( int number )",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int input [ 5 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        7,
        21
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int input [ 5 ] ;",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        7,
        21,
        18
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int input [ 5 ] ;",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        7,
        21,
        17
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int input [ 5 ] ;",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        7,
        18
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int input [ 5 ] ;",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        7,
        18,
        17
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int input [ 5 ] ;",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        7,
        17
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int input [ 5 ] ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        21
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        21,
        18
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        21,
        18,
        17
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        21,
        17
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        18
      ],
      "mod_code": [
        "int toggle ( int a )",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        18,
        17
      ],
      "mod_code": [
        "int toggle ( int a )",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        0,
        17
      ],
      "mod_code": [
        "int toggle ( int a )",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int check ( int number )",
        "int input [ 5 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        7,
        21
      ],
      "mod_code": [
        "int check ( int number )",
        "int input [ 5 ] ;",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        7,
        21,
        18
      ],
      "mod_code": [
        "int check ( int number )",
        "int input [ 5 ] ;",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        7,
        21,
        17
      ],
      "mod_code": [
        "int check ( int number )",
        "int input [ 5 ] ;",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        7,
        18
      ],
      "mod_code": [
        "int check ( int number )",
        "int input [ 5 ] ;",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        7,
        18,
        17
      ],
      "mod_code": [
        "int check ( int number )",
        "int input [ 5 ] ;",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        7,
        17
      ],
      "mod_code": [
        "int check ( int number )",
        "int input [ 5 ] ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        21
      ],
      "mod_code": [
        "int check ( int number )",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        21,
        18
      ],
      "mod_code": [
        "int check ( int number )",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        21,
        18,
        17
      ],
      "mod_code": [
        "int check ( int number )",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        21,
        17
      ],
      "mod_code": [
        "int check ( int number )",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "int check ( int number )",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        18,
        17
      ],
      "mod_code": [
        "int check ( int number )",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        1,
        17
      ],
      "mod_code": [
        "int check ( int number )",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘int’"
    },
    {
      "mod_line": [
        7,
        21
      ],
      "mod_code": [
        "int input [ 5 ] ;",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        21,
        18
      ],
      "mod_code": [
        "int input [ 5 ] ;",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        21,
        18,
        17
      ],
      "mod_code": [
        "int input [ 5 ] ;",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        21,
        17
      ],
      "mod_code": [
        "int input [ 5 ] ;",
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        18
      ],
      "mod_code": [
        "int input [ 5 ] ;",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        18,
        17
      ],
      "mod_code": [
        "int input [ 5 ] ;",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17
      ],
      "mod_code": [
        "int input [ 5 ] ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        21,
        18
      ],
      "mod_code": [
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;"
      ],
      "err_line": 21,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        21,
        18,
        17
      ],
      "mod_code": [
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;",
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        21,
        17
      ],
      "mod_code": [
        "int a [ i - 1 ] [ j ] = toggle ( a [ i - 1 ] [ j ] ) ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        18,
        17
      ],
      "mod_code": [
        "a [ i ] [ j + 1 ] += toggle ( a [ i ] [ j + 1 ] ) ;",
        "int a [ i ] [ j ] = toggle ( a [ i ] [ j ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    }
  ]
}