{
  "meta": {
    "index": 1969,
    "hitid": "389A2A304OCP5XUU3K8WMTP3USMC0J",
    "workerid": "AIWEXPJAU66D9",
    "probid": "801A",
    "subid": "44078243"
  },
  "lines": [
    {
      "line": 0,
      "text": "create string s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer ans",
      "code": "int ans ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to length of s - 1 exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if s [ i ] = ' V ' and s [ i + 1 ] = ' K '",
      "code": "if ( s [ i ] == ' V ' && s [ i + 1 ] == ' K ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "assign ' a ' to s [ i ]",
      "code": "s [ i ] = ' a ' ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "assign ' b ' to s [ i + 1 ]",
      "code": "s [ i + 1 ] = ' b ' ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "increment ans",
      "code": "ans ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 0 to length of s - 1 exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if s [ i ] is equal to s [ i + 1 ]",
      "code": "if ( s [ i ] == s [ i + 1 ] )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "increment ans",
      "code": "ans ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        0
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        0,
        17
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "string n ;",
        "cout << ans ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        0,
        17,
        3
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "string n ;",
        "cout << ans ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        0,
        17,
        14
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "string n ;",
        "cout << ans ;",
        "{ }"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        0,
        17,
        12
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "string n ;",
        "cout << ans ;",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        0,
        3
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "string n ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        0,
        3,
        14
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "string n ;",
        "gets ( s ) ;",
        "{ }"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        0,
        3,
        12
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "string n ;",
        "gets ( s ) ;",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        0,
        14
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "string n ;",
        "{ }"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        0,
        14,
        12
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "string n ;",
        "{ }",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        0,
        12
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "string n ;",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "cout << ans ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        17,
        3
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "cout << ans ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        17,
        3,
        14
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "cout << ans ;",
        "gets ( s ) ;",
        "{ }"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        17,
        3,
        12
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "cout << ans ;",
        "gets ( s ) ;",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        17,
        14
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "cout << ans ;",
        "{ }"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        17,
        14,
        12
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "cout << ans ;",
        "{ }",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        17,
        12
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "cout << ans ;",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        3,
        14
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "gets ( s ) ;",
        "{ }"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        3,
        14,
        12
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "gets ( s ) ;",
        "{ }",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        3,
        12
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "gets ( s ) ;",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "{ }"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        14,
        12
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "{ }",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "s [ i ] ] = ' a ' ;",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        17
      ],
      "mod_code": [
        "string n ;",
        "cout << ans ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        17,
        3
      ],
      "mod_code": [
        "string n ;",
        "cout << ans ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        17,
        3,
        14
      ],
      "mod_code": [
        "string n ;",
        "cout << ans ;",
        "gets ( s ) ;",
        "{ }"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        17,
        3,
        12
      ],
      "mod_code": [
        "string n ;",
        "cout << ans ;",
        "gets ( s ) ;",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        17,
        14
      ],
      "mod_code": [
        "string n ;",
        "cout << ans ;",
        "{ }"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        17,
        14,
        12
      ],
      "mod_code": [
        "string n ;",
        "cout << ans ;",
        "{ }",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        17,
        12
      ],
      "mod_code": [
        "string n ;",
        "cout << ans ;",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "string n ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        3,
        14
      ],
      "mod_code": [
        "string n ;",
        "gets ( s ) ;",
        "{ }"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        3,
        14,
        12
      ],
      "mod_code": [
        "string n ;",
        "gets ( s ) ;",
        "{ }",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        3,
        12
      ],
      "mod_code": [
        "string n ;",
        "gets ( s ) ;",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "string n ;",
        "{ }"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        14,
        12
      ],
      "mod_code": [
        "string n ;",
        "{ }",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "string n ;",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        3
      ],
      "mod_code": [
        "cout << ans ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        17,
        3,
        14
      ],
      "mod_code": [
        "cout << ans ;",
        "gets ( s ) ;",
        "{ }"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        17,
        3,
        14,
        12
      ],
      "mod_code": [
        "cout << ans ;",
        "gets ( s ) ;",
        "{ }",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        17,
        3,
        12
      ],
      "mod_code": [
        "cout << ans ;",
        "gets ( s ) ;",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        17,
        14,
        12
      ],
      "mod_code": [
        "cout << ans ;",
        "{ }",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        17,
        12
      ],
      "mod_code": [
        "cout << ans ;",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "gets ( s ) ;",
        "{ }"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        14,
        12
      ],
      "mod_code": [
        "gets ( s ) ;",
        "{ }",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "gets ( s ) ;",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "{ }",
        "if ( s [ i ] == ' s ' [ i + 1 ] )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    }
  ]
}