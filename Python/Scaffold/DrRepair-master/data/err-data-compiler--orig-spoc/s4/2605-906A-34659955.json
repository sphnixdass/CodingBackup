{
  "meta": {
    "index": 2605,
    "hitid": "3WRAAIUSBJT99837MI1CPCMQ4WMXAX",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "906A",
    "subid": "34659955"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function pred taking int val returning bool",
      "code": "bool pred ( int val )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return val is 1",
      "code": "return val == 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "n = int with n = 0",
      "code": "int n = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "m = int int map",
      "code": "map < int , int > m ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 97 to 123 increment m [ i ]",
      "code": "for ( int i = 97 ; i < 123 ; ++ i ) ++ m [ i ] ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "isFound = bool with isFound = false",
      "code": "bool isFound = false ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "lsh = int with lsh = 0",
      "code": "int lsh = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to n",
      "code": "for ( int i = 0 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "str = string",
      "code": "string str ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if str [ 0 ] is ' . '",
      "code": "if ( str [ 0 ] == ' . ' )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if not isFound",
      "code": "if ( ! isFound )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "for i = 0 to size of str",
      "code": "for ( int i = 0 ; i < str . size ( ) ; ++ i )",
      "indent": 4
    },
    {
      "line": 17,
      "text": "iter = find of str [ i ] as int on m",
      "code": "map < int , int > :: iterator iter = m . find ( int ( str [ i ] ) ) ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "if iter is not end of m decrement the value of iter . second",
      "code": "if ( iter != m . end ( ) ) { -- iter -> second ; }",
      "indent": 5
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 21,
      "text": "else if str [ 0 ] is ' ! '",
      "code": "else if ( str [ 0 ] == ' ! ' )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "if not isFound",
      "code": "if ( ! isFound )",
      "indent": 3
    },
    {
      "line": 24,
      "text": "for iter = begin of m to end of m",
      "code": "for ( map < int , int > :: iterator iter = m . begin ( ) ; iter != m . end ( ) ; ++ iter )",
      "indent": 4
    },
    {
      "line": 25,
      "text": "if value of iter . first as char is last char of str then decrement value of iter . second",
      "code": "if ( find ( str . begin ( ) , str . end ( ) , ( char ) iter -> first ) == str . end ( ) ) -- iter -> second ;",
      "indent": 5
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 27,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 28,
      "text": "increment lsh",
      "code": "++ lsh ;",
      "indent": 4
    },
    {
      "line": 29,
      "text": "else if str [ 0 ] is ' ? '",
      "code": "else if ( str [ 0 ] == ' ? ' )",
      "indent": 2
    },
    {
      "line": 30,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "if not isFound",
      "code": "if ( ! isFound )",
      "indent": 3
    },
    {
      "line": 32,
      "text": "decrement m [ str [ 0 ] as int ]",
      "code": "-- m [ ( int ) str [ 0 ] ] ;",
      "indent": 4
    },
    {
      "line": 33,
      "text": "else if i is not n - 1",
      "code": "else if ( i != n - 1 )",
      "indent": 3
    },
    {
      "line": 34,
      "text": "increment lsh",
      "code": "++ lsh ;",
      "indent": 4
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 36,
      "text": "count = int with count = 0",
      "code": "int count = 0 ;",
      "indent": 2
    },
    {
      "line": 37,
      "text": "if not isFound",
      "code": "if ( ! isFound )",
      "indent": 2
    },
    {
      "line": 38,
      "text": "for iter = begin of m to end of m",
      "code": "for ( map < int , int > :: iterator iter = m . begin ( ) ; iter != m . end ( ) ; ++ iter )",
      "indent": 3
    },
    {
      "line": 39,
      "text": "if value of iter . second is 1 increment count",
      "code": "if ( iter -> second == 1 ) ++ count ;",
      "indent": 4
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 41,
      "text": "if count is 1 set isFound to true",
      "code": "if ( count == 1 ) isFound = true ;",
      "indent": 3
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 44,
      "text": "print lsh",
      "code": "cout << lsh << endl ;",
      "indent": 1
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "if ( m . end ( ) != m . end ( ) )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )"
      ],
      "err_line": 24,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "if ( str . first -- )"
      ],
      "err_line": 25,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘first’"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )"
      ],
      "err_line": 38,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool pred ( int val ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 7,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "map < int , int = m ;"
      ],
      "err_line": 6,
      "err_msg": "template argument 2 is invalid"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 12,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "iter = iter . find ( str [ i ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "if ( iter != m . end ( ) )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 22,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "for ( iter = m . begin ( ) ; iter < m . end ( ) ; iter ++ )"
      ],
      "err_line": 24,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "if ( str . first -- ) { str . second -- ; }"
      ],
      "err_line": 25,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘first’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 30,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "int m [ str [ 0 ] ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "for ( iter = m . begin ( ) ; iter < m . end ( ) ; iter ++ )"
      ],
      "err_line": 38,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        18
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;",
        "if ( m . end ( ) != m . end ( ) )"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        18,
        24
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;",
        "if ( m . end ( ) != m . end ( ) )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        18,
        24,
        25
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;",
        "if ( m . end ( ) != m . end ( ) )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "if ( str . first -- )"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        18,
        24,
        38
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;",
        "if ( m . end ( ) != m . end ( ) )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        18,
        25
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;",
        "if ( m . end ( ) != m . end ( ) )",
        "if ( str . first -- )"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        18,
        25,
        38
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;",
        "if ( m . end ( ) != m . end ( ) )",
        "if ( str . first -- )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        18,
        38
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;",
        "if ( m . end ( ) != m . end ( ) )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        24
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        24,
        25
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "if ( str . first -- )"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        24,
        25,
        38
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "if ( str . first -- )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        24,
        25,
        18
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "if ( str . first -- )",
        "if ( iter != m . end ( ) )"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        24,
        38
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        24,
        38,
        18
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "if ( iter != m . end ( ) )"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        24,
        18
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "if ( iter != m . end ( ) )"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        25
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;",
        "if ( str . first -- )"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        25,
        38
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;",
        "if ( str . first -- )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        25,
        38,
        18
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;",
        "if ( str . first -- )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "if ( iter != m . end ( ) )"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        25,
        18
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;",
        "if ( str . first -- )",
        "if ( iter != m . end ( ) )"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        38
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        38,
        18
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "if ( iter != m . end ( ) )"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        18
      ],
      "mod_code": [
        "iter = m . find ( str [ i ] ) ;",
        "if ( iter != m . end ( ) )"
      ],
      "err_line": 17,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        24
      ],
      "mod_code": [
        "if ( m . end ( ) != m . end ( ) )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        24,
        25
      ],
      "mod_code": [
        "if ( m . end ( ) != m . end ( ) )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "if ( str . first -- )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        24,
        25,
        38
      ],
      "mod_code": [
        "if ( m . end ( ) != m . end ( ) )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "if ( str . first -- )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        24,
        38
      ],
      "mod_code": [
        "if ( m . end ( ) != m . end ( ) )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        25
      ],
      "mod_code": [
        "if ( m . end ( ) != m . end ( ) )",
        "if ( str . first -- )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        25,
        38
      ],
      "mod_code": [
        "if ( m . end ( ) != m . end ( ) )",
        "if ( str . first -- )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        38
      ],
      "mod_code": [
        "if ( m . end ( ) != m . end ( ) )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        24,
        25
      ],
      "mod_code": [
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "if ( str . first -- )"
      ],
      "err_line": 24,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        25,
        38
      ],
      "mod_code": [
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "if ( str . first -- )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )"
      ],
      "err_line": 24,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        25,
        38,
        18
      ],
      "mod_code": [
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "if ( str . first -- )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "if ( iter != m . end ( ) )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        24,
        25,
        18
      ],
      "mod_code": [
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "if ( str . first -- )",
        "if ( iter != m . end ( ) )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        24,
        38
      ],
      "mod_code": [
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )"
      ],
      "err_line": 24,
      "err_msg": "‘iter’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        38,
        18
      ],
      "mod_code": [
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "if ( iter != m . end ( ) )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        24,
        18
      ],
      "mod_code": [
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "if ( iter != m . end ( ) )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        38
      ],
      "mod_code": [
        "if ( str . first -- )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )"
      ],
      "err_line": 25,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘first’"
    },
    {
      "mod_line": [
        25,
        38,
        18
      ],
      "mod_code": [
        "if ( str . first -- )",
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "if ( iter != m . end ( ) )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        18
      ],
      "mod_code": [
        "if ( str . first -- )",
        "if ( iter != m . end ( ) )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        38,
        18
      ],
      "mod_code": [
        "for ( iter = m . begin ( ) ; iter != m . end ( ) ; iter ++ )",
        "if ( iter != m . end ( ) )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}