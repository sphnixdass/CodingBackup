{
  "meta": {
    "index": 1053,
    "hitid": "3HUR21WDDUJA5Q1A2OFSSY4X7NOYX7",
    "workerid": "AIWEXPJAU66D9",
    "probid": "151A",
    "subid": "49066250"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare new integer variables n , k , l , c , d , p , nl , np , x , y and z",
      "code": "int n , k , l , c , d , p , nl , np , x , y , z ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , k , l , c , d , p , nl and np",
      "code": "cin >> n >> k >> l >> c >> d >> p >> nl >> np ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set x to ( k * l ) / nl",
      "code": "x = ( k * l ) / nl ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "change y to c * d",
      "code": "y = c * d ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set z to p / np",
      "code": "z = p / np ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "create new integer casiresp1 = min of x and y",
      "code": "int casiresp1 = min ( x , y ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "declare new integer variable casiresp2 = min of casiresp1 and z",
      "code": "int casiresp2 = min ( casiresp1 , z ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "declare new integer called resp with value casiresp2 / n",
      "code": "int resp = casiresp2 / n ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print resp",
      "code": "cout << resp << endl ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int x = ( k * l ) / nl ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "z /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        5,
        2
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "z /= np ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        5,
        2,
        3
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "z /= np ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int x = ( k * l ) / nl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        5,
        2,
        4
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "z /= np ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "y -= d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        5,
        2,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "z /= np ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int casiresp2 = __gcd ( casiresp1 , z ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        5,
        3
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "z /= np ;",
        "int x = ( k * l ) / nl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        5,
        3,
        4
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "z /= np ;",
        "int x = ( k * l ) / nl ;",
        "y -= d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        5,
        3,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "z /= np ;",
        "int x = ( k * l ) / nl ;",
        "int casiresp2 = __gcd ( casiresp1 , z ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        5,
        4
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "z /= np ;",
        "y -= d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        5,
        4,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "z /= np ;",
        "y -= d ;",
        "int casiresp2 = __gcd ( casiresp1 , z ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        5,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "z /= np ;",
        "int casiresp2 = __gcd ( casiresp1 , z ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int x = ( k * l ) / nl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        4
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int x = ( k * l ) / nl ;",
        "y -= d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int x = ( k * l ) / nl ;",
        "int casiresp2 = __gcd ( casiresp1 , z ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        2,
        4
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "y -= d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "y -= d ;",
        "int casiresp2 = __gcd ( casiresp1 , z ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        2,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int casiresp2 = __gcd ( casiresp1 , z ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "int x = ( k * l ) / nl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "int x = ( k * l ) / nl ;",
        "y -= d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "int x = ( k * l ) / nl ;",
        "y -= d ;",
        "int casiresp2 = __gcd ( casiresp1 , z ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        3,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "int x = ( k * l ) / nl ;",
        "int casiresp2 = __gcd ( casiresp1 , z ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "y -= d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        4,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "y -= d ;",
        "int casiresp2 = __gcd ( casiresp1 , z ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , x , x , z ;",
        "int casiresp2 = __gcd ( casiresp1 , z ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        5,
        2,
        3
      ],
      "mod_code": [
        "z /= np ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int x = ( k * l ) / nl ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        5,
        2,
        3,
        4
      ],
      "mod_code": [
        "z /= np ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int x = ( k * l ) / nl ;",
        "y -= d ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        5,
        2,
        3,
        7
      ],
      "mod_code": [
        "z /= np ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int x = ( k * l ) / nl ;",
        "int casiresp2 = __gcd ( casiresp1 , z ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "z /= np ;",
        "int x = ( k * l ) / nl ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        5,
        3,
        4
      ],
      "mod_code": [
        "z /= np ;",
        "int x = ( k * l ) / nl ;",
        "y -= d ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        5,
        3,
        4,
        7
      ],
      "mod_code": [
        "z /= np ;",
        "int x = ( k * l ) / nl ;",
        "y -= d ;",
        "int casiresp2 = __gcd ( casiresp1 , z ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        5,
        3,
        7
      ],
      "mod_code": [
        "z /= np ;",
        "int x = ( k * l ) / nl ;",
        "int casiresp2 = __gcd ( casiresp1 , z ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int x = ( k * l ) / nl ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        2,
        3,
        4
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int x = ( k * l ) / nl ;",
        "y -= d ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        7
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int x = ( k * l ) / nl ;",
        "y -= d ;",
        "int casiresp2 = __gcd ( casiresp1 , z ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        2,
        3,
        7
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int x = ( k * l ) / nl ;",
        "int casiresp2 = __gcd ( casiresp1 , z ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "int x = ( k * l ) / nl ;",
        "y -= d ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        4,
        7
      ],
      "mod_code": [
        "int x = ( k * l ) / nl ;",
        "y -= d ;",
        "int casiresp2 = __gcd ( casiresp1 , z ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "int x = ( k * l ) / nl ;",
        "int casiresp2 = __gcd ( casiresp1 , z ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    }
  ]
}