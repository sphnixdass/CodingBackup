{
  "meta": {
    "index": 1349,
    "hitid": "3GITHABACYFFSBUZ7XLOLSCUP7QN2R",
    "workerid": "A24WRPQYGMQLGF",
    "probid": "75A",
    "subid": "47879238"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function remove 0 that takes an integer and returns an integer",
      "code": "int remove0 ( int n )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "m = integer = 0 , pow = integer = 1",
      "code": "int m ( 0 ) , pow ( 1 ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "loop while n is not 0",
      "code": "while ( n != 0 )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "d = integer = n modulo 10",
      "code": "int d = n % 10 ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "n = n / 10",
      "code": "n /= 10 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if d is not 0",
      "code": "if ( d != 0 )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "m = m + ( d * pow )",
      "code": "m += d * pow ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "pow = pow * 10",
      "code": "pow *= 10 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "return m",
      "code": "return m ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 13,
      "text": "a , b = integers",
      "code": "int a , b ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read a , b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "c = integer = a + b",
      "code": "int c = a + b ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "A = integer = the result of calling the function remove0",
      "code": "int A = remove0 ( a ) ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "B = integer = the result of calling the function remove0",
      "code": "int B = remove0 ( b ) ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "V = integer = the result of calling the function remove",
      "code": "int C = remove0 ( c ) ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print YES if A + B is C otherwise print NO",
      "code": "cout << ( A + B == C ? \" YES \" : \" NO \" ) << endl ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int in ( int 0 )"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "int A = remove0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "int B = * remove0 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "int V = * 0 ;"
      ],
      "err_line": 18,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int and ( int 0 )"
      ],
      "err_line": 0,
      "err_msg": "expected unqualified-id before ‘and’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "int c += b ;"
      ],
      "err_line": 15,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "int A = * remove0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "int B = remove0 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "int V = * min_element ;"
      ],
      "err_line": 18,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        0,
        16
      ],
      "mod_code": [
        "int in ( int 0 )",
        "int A = remove0 ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        16,
        17
      ],
      "mod_code": [
        "int in ( int 0 )",
        "int A = remove0 ;",
        "int B = * remove0 ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        16,
        17,
        18
      ],
      "mod_code": [
        "int in ( int 0 )",
        "int A = remove0 ;",
        "int B = * remove0 ;",
        "int V = * 0 ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        16,
        17,
        19
      ],
      "mod_code": [
        "int in ( int 0 )",
        "int A = remove0 ;",
        "int B = * remove0 ;",
        "cout << ( A + B == 0 ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        16,
        17,
        18
      ],
      "mod_code": [
        "int in ( int 0 )",
        "int A = remove0 ;",
        "int B = * remove0 ;",
        "int V = * min_element ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        16,
        18
      ],
      "mod_code": [
        "int in ( int 0 )",
        "int A = remove0 ;",
        "int V = * 0 ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        16,
        18,
        19
      ],
      "mod_code": [
        "int in ( int 0 )",
        "int A = remove0 ;",
        "int V = * 0 ;",
        "cout << ( A + B == 0 ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        16,
        19
      ],
      "mod_code": [
        "int in ( int 0 )",
        "int A = remove0 ;",
        "cout << ( A + B == 0 ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        16,
        19,
        18
      ],
      "mod_code": [
        "int in ( int 0 )",
        "int A = remove0 ;",
        "cout << ( A + B == 0 ? \" YES \" : \" NO \" ) << endl ;",
        "int V = * min_element ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        16,
        18
      ],
      "mod_code": [
        "int in ( int 0 )",
        "int A = remove0 ;",
        "int V = * min_element ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        17
      ],
      "mod_code": [
        "int in ( int 0 )",
        "int B = * remove0 ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        17,
        18
      ],
      "mod_code": [
        "int in ( int 0 )",
        "int B = * remove0 ;",
        "int V = * 0 ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        17,
        18,
        19
      ],
      "mod_code": [
        "int in ( int 0 )",
        "int B = * remove0 ;",
        "int V = * 0 ;",
        "cout << ( A + B == 0 ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        17,
        19
      ],
      "mod_code": [
        "int in ( int 0 )",
        "int B = * remove0 ;",
        "cout << ( A + B == 0 ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        17,
        19,
        18
      ],
      "mod_code": [
        "int in ( int 0 )",
        "int B = * remove0 ;",
        "cout << ( A + B == 0 ? \" YES \" : \" NO \" ) << endl ;",
        "int V = * min_element ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        17,
        18
      ],
      "mod_code": [
        "int in ( int 0 )",
        "int B = * remove0 ;",
        "int V = * min_element ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        18
      ],
      "mod_code": [
        "int in ( int 0 )",
        "int V = * 0 ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        18,
        19
      ],
      "mod_code": [
        "int in ( int 0 )",
        "int V = * 0 ;",
        "cout << ( A + B == 0 ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        19
      ],
      "mod_code": [
        "int in ( int 0 )",
        "cout << ( A + B == 0 ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        19,
        18
      ],
      "mod_code": [
        "int in ( int 0 )",
        "cout << ( A + B == 0 ? \" YES \" : \" NO \" ) << endl ;",
        "int V = * min_element ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        18
      ],
      "mod_code": [
        "int in ( int 0 )",
        "int V = * min_element ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        16,
        17
      ],
      "mod_code": [
        "int A = remove0 ;",
        "int B = * remove0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        17,
        18
      ],
      "mod_code": [
        "int A = remove0 ;",
        "int B = * remove0 ;",
        "int V = * 0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        17,
        18,
        19
      ],
      "mod_code": [
        "int A = remove0 ;",
        "int B = * remove0 ;",
        "int V = * 0 ;",
        "cout << ( A + B == 0 ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        17,
        19
      ],
      "mod_code": [
        "int A = remove0 ;",
        "int B = * remove0 ;",
        "cout << ( A + B == 0 ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        17,
        19,
        18
      ],
      "mod_code": [
        "int A = remove0 ;",
        "int B = * remove0 ;",
        "cout << ( A + B == 0 ? \" YES \" : \" NO \" ) << endl ;",
        "int V = * min_element ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        17,
        18
      ],
      "mod_code": [
        "int A = remove0 ;",
        "int B = * remove0 ;",
        "int V = * min_element ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        18
      ],
      "mod_code": [
        "int A = remove0 ;",
        "int V = * 0 ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        18,
        19
      ],
      "mod_code": [
        "int A = remove0 ;",
        "int V = * 0 ;",
        "cout << ( A + B == 0 ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        19
      ],
      "mod_code": [
        "int A = remove0 ;",
        "cout << ( A + B == 0 ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        19,
        18
      ],
      "mod_code": [
        "int A = remove0 ;",
        "cout << ( A + B == 0 ? \" YES \" : \" NO \" ) << endl ;",
        "int V = * min_element ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        18
      ],
      "mod_code": [
        "int A = remove0 ;",
        "int V = * min_element ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        18
      ],
      "mod_code": [
        "int B = * remove0 ;",
        "int V = * 0 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        18,
        19
      ],
      "mod_code": [
        "int B = * remove0 ;",
        "int V = * 0 ;",
        "cout << ( A + B == 0 ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        19
      ],
      "mod_code": [
        "int B = * remove0 ;",
        "cout << ( A + B == 0 ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        19,
        18
      ],
      "mod_code": [
        "int B = * remove0 ;",
        "cout << ( A + B == 0 ? \" YES \" : \" NO \" ) << endl ;",
        "int V = * min_element ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        18
      ],
      "mod_code": [
        "int B = * remove0 ;",
        "int V = * min_element ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘int (*)(int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        19
      ],
      "mod_code": [
        "int V = * 0 ;",
        "cout << ( A + B == 0 ? \" YES \" : \" NO \" ) << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        19,
        18
      ],
      "mod_code": [
        "cout << ( A + B == 0 ? \" YES \" : \" NO \" ) << endl ;",
        "int V = * min_element ;"
      ],
      "err_line": 18,
      "err_msg": "overloaded function with no contextual type information"
    }
  ]
}