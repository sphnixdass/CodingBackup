{
  "meta": {
    "index": 1490,
    "hitid": "39O0SQZVJN17TAJX6GJ0Q3YC272R7B",
    "workerid": "AIWEXPJAU66D9",
    "probid": "837A",
    "subid": "46959107"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare new string s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create new integer n",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read n and keep looping",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read and discard character from the input",
      "code": "getchar ( ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "read line from the input into s",
      "code": "getline ( cin , s ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "define integers ans and tmp = 0",
      "code": "int ans = 0 , tmp = 0 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for i = 0 to n exclusive incrementing i",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if s [ i ] is a capital letter character",
      "code": "if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "increment tmp",
      "code": "tmp ++ ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "else if s [ i ] is equal to ' '",
      "code": "else if ( s [ i ] == ' ' )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "set the value of ans to max of ans and tmp",
      "code": "ans = max ( ans , tmp ) ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "set tmp to 0",
      "code": "tmp = 0 ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "change the value of ans to max of ans and tmp",
      "code": "ans = max ( ans , tmp ) ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( cin >> n ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "* ans = max ( ans , tmp ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        12,
        4,
        16,
        5
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "cin . ignore ( 0 , 0 ) ;",
        "cout << ans ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        12,
        4,
        16,
        11
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "cin . ignore ( 0 , 0 ) ;",
        "cout << ans ;",
        "* ans = max ( ans , tmp ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        12,
        4,
        16,
        10
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "cin . ignore ( 0 , 0 ) ;",
        "cout << ans ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        4,
        5
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "cin . ignore ( 0 , 0 ) ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        12,
        4,
        5,
        11
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "cin . ignore ( 0 , 0 ) ;",
        "getline ( getline ( cin , s ) ;",
        "* ans = max ( ans , tmp ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        12,
        4,
        5,
        10
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "cin . ignore ( 0 , 0 ) ;",
        "getline ( getline ( cin , s ) ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        4,
        11
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "cin . ignore ( 0 , 0 ) ;",
        "* ans = max ( ans , tmp ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        12,
        4,
        11,
        10
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "cin . ignore ( 0 , 0 ) ;",
        "* ans = max ( ans , tmp ) ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        4,
        10
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "cin . ignore ( 0 , 0 ) ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        16,
        5
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "cout << ans ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        12,
        16,
        5,
        11
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "cout << ans ;",
        "getline ( getline ( cin , s ) ;",
        "* ans = max ( ans , tmp ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        12,
        16,
        5,
        10
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "cout << ans ;",
        "getline ( getline ( cin , s ) ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        16,
        11
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "cout << ans ;",
        "* ans = max ( ans , tmp ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        12,
        16,
        11,
        10
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "cout << ans ;",
        "* ans = max ( ans , tmp ) ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        16,
        10
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "cout << ans ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        12,
        5,
        11
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "getline ( getline ( cin , s ) ;",
        "* ans = max ( ans , tmp ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        12,
        5,
        11,
        10
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "getline ( getline ( cin , s ) ;",
        "* ans = max ( ans , tmp ) ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        5,
        10
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "getline ( getline ( cin , s ) ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        11
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "* ans = max ( ans , tmp ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        12,
        11,
        10
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "* ans = max ( ans , tmp ) ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        10
      ],
      "mod_code": [
        "int tmp = 0 ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        16,
        5
      ],
      "mod_code": [
        "cin . ignore ( 0 , 0 ) ;",
        "cout << ans ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        16,
        5,
        11
      ],
      "mod_code": [
        "cin . ignore ( 0 , 0 ) ;",
        "cout << ans ;",
        "getline ( getline ( cin , s ) ;",
        "* ans = max ( ans , tmp ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        16,
        5,
        10
      ],
      "mod_code": [
        "cin . ignore ( 0 , 0 ) ;",
        "cout << ans ;",
        "getline ( getline ( cin , s ) ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        16,
        11
      ],
      "mod_code": [
        "cin . ignore ( 0 , 0 ) ;",
        "cout << ans ;",
        "* ans = max ( ans , tmp ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        16,
        11,
        10
      ],
      "mod_code": [
        "cin . ignore ( 0 , 0 ) ;",
        "cout << ans ;",
        "* ans = max ( ans , tmp ) ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        16,
        10
      ],
      "mod_code": [
        "cin . ignore ( 0 , 0 ) ;",
        "cout << ans ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "cin . ignore ( 0 , 0 ) ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        5,
        11
      ],
      "mod_code": [
        "cin . ignore ( 0 , 0 ) ;",
        "getline ( getline ( cin , s ) ;",
        "* ans = max ( ans , tmp ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        5,
        11,
        10
      ],
      "mod_code": [
        "cin . ignore ( 0 , 0 ) ;",
        "getline ( getline ( cin , s ) ;",
        "* ans = max ( ans , tmp ) ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        5,
        10
      ],
      "mod_code": [
        "cin . ignore ( 0 , 0 ) ;",
        "getline ( getline ( cin , s ) ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "cin . ignore ( 0 , 0 ) ;",
        "* ans = max ( ans , tmp ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        11,
        10
      ],
      "mod_code": [
        "cin . ignore ( 0 , 0 ) ;",
        "* ans = max ( ans , tmp ) ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "cin . ignore ( 0 , 0 ) ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        16,
        5
      ],
      "mod_code": [
        "cout << ans ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        5,
        11
      ],
      "mod_code": [
        "cout << ans ;",
        "getline ( getline ( cin , s ) ;",
        "* ans = max ( ans , tmp ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        5,
        11,
        10
      ],
      "mod_code": [
        "cout << ans ;",
        "getline ( getline ( cin , s ) ;",
        "* ans = max ( ans , tmp ) ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        16,
        5,
        10
      ],
      "mod_code": [
        "cout << ans ;",
        "getline ( getline ( cin , s ) ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        16,
        11
      ],
      "mod_code": [
        "cout << ans ;",
        "* ans = max ( ans , tmp ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        16,
        11,
        10
      ],
      "mod_code": [
        "cout << ans ;",
        "* ans = max ( ans , tmp ) ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        16,
        10
      ],
      "mod_code": [
        "cout << ans ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "getline ( getline ( cin , s ) ;",
        "* ans = max ( ans , tmp ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        11,
        10
      ],
      "mod_code": [
        "getline ( getline ( cin , s ) ;",
        "* ans = max ( ans , tmp ) ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "getline ( getline ( cin , s ) ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "* ans = max ( ans , tmp ) ;",
        "else if ( s [ i ] == ' ' ' )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating ' character"
    }
  ]
}