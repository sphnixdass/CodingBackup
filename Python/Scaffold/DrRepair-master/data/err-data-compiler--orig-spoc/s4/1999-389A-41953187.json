{
  "meta": {
    "index": 1999,
    "hitid": "391FPZIE4CGW2RHQNJ0HMRAQN9WUHE",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "389A",
    "subid": "41953187"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function gcd taking int a , int b and returning int",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return a if b is 0 else return gcd of b , a mod b",
      "code": "return b == 0 ? a : gcd ( b , a % b ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "a = int array of size 101",
      "code": "int a [ 101 ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "loop while reading n",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set all values of a to 0",
      "code": "memset ( a , 0 , sizeof ( a ) ) ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "read n values into a",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "tmp = int with tmp = a [ 0 ]",
      "code": "int tmp = a [ 0 ] ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "for i = 1 to n set tmp to gcd of tmp , a [ i ]",
      "code": "for ( int i = 1 ; i < n ; i ++ ) { tmp = gcd ( tmp , a [ i ] ) ; }",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print n * tmp",
      "code": "cout << n * tmp << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int tmp = a [ 0 ] [ 0 ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        0
      ],
      "mod_code": [
        "char n ;",
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        0,
        5
      ],
      "mod_code": [
        "char n ;",
        "int gcd ( int a , int b ) ;",
        "char a [ 101 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        0,
        5,
        9
      ],
      "mod_code": [
        "char n ;",
        "int gcd ( int a , int b ) ;",
        "char a [ 101 ] ;",
        "int tmp = a [ 0 ] [ 0 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        0,
        5,
        6
      ],
      "mod_code": [
        "char n ;",
        "int gcd ( int a , int b ) ;",
        "char a [ 101 ] ;",
        "while ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        0,
        9
      ],
      "mod_code": [
        "char n ;",
        "int gcd ( int a , int b ) ;",
        "int tmp = a [ 0 ] [ 0 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        0,
        9,
        6
      ],
      "mod_code": [
        "char n ;",
        "int gcd ( int a , int b ) ;",
        "int tmp = a [ 0 ] [ 0 ] ;",
        "while ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        0,
        6
      ],
      "mod_code": [
        "char n ;",
        "int gcd ( int a , int b ) ;",
        "while ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        5,
        9
      ],
      "mod_code": [
        "char n ;",
        "char a [ 101 ] ;",
        "int tmp = a [ 0 ] [ 0 ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        5,
        9,
        6
      ],
      "mod_code": [
        "char n ;",
        "char a [ 101 ] ;",
        "int tmp = a [ 0 ] [ 0 ] ;",
        "while ( n -- )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "char n ;",
        "int tmp = a [ 0 ] [ 0 ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        9,
        6
      ],
      "mod_code": [
        "char n ;",
        "int tmp = a [ 0 ] [ 0 ] ;",
        "while ( n -- )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "char a [ 101 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        9
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "char a [ 101 ] ;",
        "int tmp = a [ 0 ] [ 0 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        9,
        6
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "char a [ 101 ] ;",
        "int tmp = a [ 0 ] [ 0 ] ;",
        "while ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        6
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "char a [ 101 ] ;",
        "while ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int tmp = a [ 0 ] [ 0 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        6
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int tmp = a [ 0 ] [ 0 ] ;",
        "while ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "while ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "char a [ 101 ] ;",
        "int tmp = a [ 0 ] [ 0 ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        9,
        6
      ],
      "mod_code": [
        "char a [ 101 ] ;",
        "int tmp = a [ 0 ] [ 0 ] ;",
        "while ( n -- )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "int tmp = a [ 0 ] [ 0 ] ;",
        "while ( n -- )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}