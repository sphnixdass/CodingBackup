{
  "meta": {
    "index": 1202,
    "hitid": "3P0I4CQYVY1JMCSIMWA8OOSOKBMOWW",
    "workerid": "A1AYVATMT88U1W",
    "probid": "347A",
    "subid": "36670970"
  },
  "lines": [
    {
      "line": 0,
      "text": "let cmp be a boolean function which accepts integers a , b",
      "code": "bool cmp ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return a greater than b",
      "code": "return a > b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "cc = array of integers of length 105",
      "code": "int cc [ 105 ] ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "let n , res , flag , f be integers with res = 0 , flag = 0",
      "code": "int n , res = 0 , flag = 0 , f ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 1 to n inclusive , read cc [ i ]",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) { cin >> cc [ i ] ; }",
      "indent": 1
    },
    {
      "line": 8,
      "text": "sort the values cc + 1 and cc + 1 + n",
      "code": "sort ( cc + 1 , cc + 1 + n ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "swap the values cc [ 1 ] , cc [ n ]",
      "code": "swap ( cc [ 1 ] , cc [ n ] ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if i is equal to n",
      "code": "if ( i == n )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print cc [ i ] and newline",
      "code": "cout << cc [ i ] << endl ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print cc [ i ] and space",
      "code": "cout << cc [ i ] << \" \" ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool cmp ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "sort ( cc + 1 + cc + 1 + n ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int [105]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        9
      ],
      "mod_code": [
        "else else",
        "swap ( cc [ n ] , cc [ n ] ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        9,
        8
      ],
      "mod_code": [
        "else else",
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "sort ( cc + 1 + cc + 1 + n ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int [105]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        13,
        9,
        8,
        10
      ],
      "mod_code": [
        "else else",
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int [105]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        13,
        9,
        8,
        0
      ],
      "mod_code": [
        "else else",
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "bool cmp ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        9,
        8,
        11
      ],
      "mod_code": [
        "else else",
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "if ( i == ' n ' )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int [105]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        13,
        9,
        10
      ],
      "mod_code": [
        "else else",
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        9,
        10,
        0
      ],
      "mod_code": [
        "else else",
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool cmp ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        9,
        10,
        11
      ],
      "mod_code": [
        "else else",
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "if ( i == ' n ' )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        9,
        0
      ],
      "mod_code": [
        "else else",
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "bool cmp ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        9,
        0,
        11
      ],
      "mod_code": [
        "else else",
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "bool cmp ( int a , int b ) ;",
        "if ( i == ' n ' )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        9,
        11
      ],
      "mod_code": [
        "else else",
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "if ( i == ' n ' )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        8
      ],
      "mod_code": [
        "else else",
        "sort ( cc + 1 + cc + 1 + n ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int [105]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        13,
        8,
        10
      ],
      "mod_code": [
        "else else",
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int [105]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        13,
        8,
        10,
        0
      ],
      "mod_code": [
        "else else",
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool cmp ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        8,
        10,
        11
      ],
      "mod_code": [
        "else else",
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "if ( i == ' n ' )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int [105]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        13,
        8,
        0
      ],
      "mod_code": [
        "else else",
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "bool cmp ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        8,
        0,
        11
      ],
      "mod_code": [
        "else else",
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "bool cmp ( int a , int b ) ;",
        "if ( i == ' n ' )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        8,
        11
      ],
      "mod_code": [
        "else else",
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "if ( i == ' n ' )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int [105]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        13,
        10
      ],
      "mod_code": [
        "else else",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        10,
        0
      ],
      "mod_code": [
        "else else",
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool cmp ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        10,
        0,
        11
      ],
      "mod_code": [
        "else else",
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool cmp ( int a , int b ) ;",
        "if ( i == ' n ' )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        10,
        11
      ],
      "mod_code": [
        "else else",
        "for ( i = 1 ; i <= n ; i ++ )",
        "if ( i == ' n ' )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        0
      ],
      "mod_code": [
        "else else",
        "bool cmp ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        0,
        11
      ],
      "mod_code": [
        "else else",
        "bool cmp ( int a , int b ) ;",
        "if ( i == ' n ' )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        11
      ],
      "mod_code": [
        "else else",
        "if ( i == ' n ' )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "sort ( cc + 1 + cc + 1 + n ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int [105]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        9,
        8,
        10
      ],
      "mod_code": [
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int [105]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        9,
        8,
        10,
        0
      ],
      "mod_code": [
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool cmp ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        8,
        10,
        11
      ],
      "mod_code": [
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "if ( i == ' n ' )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int [105]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        9,
        8,
        0
      ],
      "mod_code": [
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "bool cmp ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        8,
        0,
        11
      ],
      "mod_code": [
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "bool cmp ( int a , int b ) ;",
        "if ( i == ' n ' )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        8,
        11
      ],
      "mod_code": [
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "if ( i == ' n ' )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int [105]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        10,
        0
      ],
      "mod_code": [
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool cmp ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        10,
        0,
        11
      ],
      "mod_code": [
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool cmp ( int a , int b ) ;",
        "if ( i == ' n ' )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        10,
        11
      ],
      "mod_code": [
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "if ( i == ' n ' )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "bool cmp ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0,
        11
      ],
      "mod_code": [
        "swap ( cc [ n ] , cc [ n ] ) ;",
        "bool cmp ( int a , int b ) ;",
        "if ( i == ' n ' )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int [105]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        10,
        0
      ],
      "mod_code": [
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool cmp ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        10,
        0,
        11
      ],
      "mod_code": [
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool cmp ( int a , int b ) ;",
        "if ( i == ' n ' )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        10,
        11
      ],
      "mod_code": [
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "if ( i == ' n ' )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int [105]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "bool cmp ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0,
        11
      ],
      "mod_code": [
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "bool cmp ( int a , int b ) ;",
        "if ( i == ' n ' )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "sort ( cc + 1 + cc + 1 + n ) ;",
        "if ( i == ' n ' )"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int*’ and ‘int [105]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool cmp ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0,
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "bool cmp ( int a , int b ) ;",
        "if ( i == ' n ' )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "if ( i == ' n ' )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "bool cmp ( int a , int b ) ;",
        "if ( i == ' n ' )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}