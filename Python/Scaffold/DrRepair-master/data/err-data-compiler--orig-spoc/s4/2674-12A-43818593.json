{
  "meta": {
    "index": 2674,
    "hitid": "344M16OZKI97NR6F0HGPNTLJMVYNEH",
    "workerid": "AIWEXPJAU66D9",
    "probid": "12A",
    "subid": "43818593"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let a , b , c , d , e , f , g , h , i , j , k and l be characters",
      "code": "char a , b , c , d , e , f , g , h , i , j , k , l ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while can read value , read a , b , c , d , e , f , g , h , i , j , k and l",
      "code": "while ( cin >> a >> b >> c >> d >> e >> f >> g >> h >> i )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if a = i , b = h , c = g and d = f",
      "code": "if ( a == i && b == h && c == g && d == f )",
      "indent": 2
    },
    {
      "line": 4,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 5,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 6,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char a , b , c , d , e , f , g , g , h , i , k , l ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char g’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> h >> k >> k )"
      ],
      "err_line": 2,
      "err_msg": "‘can’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "if ( a == i ) b += h ;"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char a , b , c , d , e , f , f , g , h , i , k , l ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char f’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> g >> k >> k )"
      ],
      "err_line": 2,
      "err_msg": "‘can’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "if ( a == i ) b |= b ;"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "char a , b , c , d , e , f , g , g , h , i , k , l ;",
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> h >> k >> k )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char g’"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "char a , b , c , d , e , f , g , g , h , i , k , l ;",
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> h >> k >> k )",
        "if ( a == i ) b += h ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char g’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        5
      ],
      "mod_code": [
        "char a , b , c , d , e , f , g , g , h , i , k , l ;",
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> h >> k >> k )",
        "if ( a == i ) b += h ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char g’"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "char a , b , c , d , e , f , g , g , h , i , k , l ;",
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> h >> k >> k )",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char g’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        3
      ],
      "mod_code": [
        "char a , b , c , d , e , f , g , g , h , i , k , l ;",
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> h >> k >> k )",
        "else ;",
        "if ( a == i ) b |= b ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char g’"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "char a , b , c , d , e , f , g , g , h , i , k , l ;",
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> h >> k >> k )",
        "if ( a == i ) b |= b ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char g’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "char a , b , c , d , e , f , g , g , h , i , k , l ;",
        "if ( a == i ) b += h ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char g’"
    },
    {
      "mod_line": [
        1,
        3,
        5
      ],
      "mod_code": [
        "char a , b , c , d , e , f , g , g , h , i , k , l ;",
        "if ( a == i ) b += h ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char g’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        2
      ],
      "mod_code": [
        "char a , b , c , d , e , f , g , g , h , i , k , l ;",
        "if ( a == i ) b += h ;",
        "else ;",
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> g >> k >> k )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char g’"
    },
    {
      "mod_line": [
        1,
        3,
        2
      ],
      "mod_code": [
        "char a , b , c , d , e , f , g , g , h , i , k , l ;",
        "if ( a == i ) b += h ;",
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> g >> k >> k )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char g’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "char a , b , c , d , e , f , g , g , h , i , k , l ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char g’"
    },
    {
      "mod_line": [
        1,
        5,
        3
      ],
      "mod_code": [
        "char a , b , c , d , e , f , g , g , h , i , k , l ;",
        "else ;",
        "if ( a == i ) b |= b ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char g’"
    },
    {
      "mod_line": [
        1,
        5,
        3,
        2
      ],
      "mod_code": [
        "char a , b , c , d , e , f , g , g , h , i , k , l ;",
        "else ;",
        "if ( a == i ) b |= b ;",
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> g >> k >> k )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char g’"
    },
    {
      "mod_line": [
        1,
        5,
        2
      ],
      "mod_code": [
        "char a , b , c , d , e , f , g , g , h , i , k , l ;",
        "else ;",
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> g >> k >> k )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char g’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "char a , b , c , d , e , f , g , g , h , i , k , l ;",
        "if ( a == i ) b |= b ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char g’"
    },
    {
      "mod_line": [
        1,
        3,
        2
      ],
      "mod_code": [
        "char a , b , c , d , e , f , g , g , h , i , k , l ;",
        "if ( a == i ) b |= b ;",
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> g >> k >> k )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char g’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "char a , b , c , d , e , f , g , g , h , i , k , l ;",
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> g >> k >> k )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char g’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> h >> k >> k )",
        "if ( a == i ) b += h ;"
      ],
      "err_line": 2,
      "err_msg": "‘can’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        5
      ],
      "mod_code": [
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> h >> k >> k )",
        "if ( a == i ) b += h ;",
        "else ;"
      ],
      "err_line": 2,
      "err_msg": "‘can’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> h >> k >> k )",
        "else ;"
      ],
      "err_line": 2,
      "err_msg": "‘can’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        3
      ],
      "mod_code": [
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> h >> k >> k )",
        "else ;",
        "if ( a == i ) b |= b ;"
      ],
      "err_line": 2,
      "err_msg": "‘can’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> h >> k >> k )",
        "if ( a == i ) b |= b ;"
      ],
      "err_line": 2,
      "err_msg": "‘can’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "if ( a == i ) b += h ;",
        "else ;"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        5,
        2
      ],
      "mod_code": [
        "if ( a == i ) b += h ;",
        "else ;",
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> g >> k >> k )"
      ],
      "err_line": 2,
      "err_msg": "‘can’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "if ( a == i ) b += h ;",
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> g >> k >> k )"
      ],
      "err_line": 2,
      "err_msg": "‘can’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "else ;",
        "if ( a == i ) b |= b ;"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        3,
        2
      ],
      "mod_code": [
        "else ;",
        "if ( a == i ) b |= b ;",
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> g >> k >> k )"
      ],
      "err_line": 2,
      "err_msg": "‘can’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "else ;",
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> g >> k >> k )"
      ],
      "err_line": 2,
      "err_msg": "‘can’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "if ( a == i ) b |= b ;",
        "while ( cin >> can >> a >> b >> c >> d >> e >> f >> g >> h >> f >> g >> k >> k )"
      ],
      "err_line": 2,
      "err_msg": "‘can’ was not declared in this scope"
    }
  ]
}