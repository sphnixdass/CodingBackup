{
  "meta": {
    "index": 1072,
    "hitid": "3YOAVL4CA0BJCEN5EZF69UG1KMNZ4K",
    "workerid": "AIWEXPJAU66D9",
    "probid": "151A",
    "subid": "48197141"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers n , k , l , c , d , p , nl and np",
      "code": "int n , k , l , c , d , p , nl , np ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , k , l , c , d , p , nl and np",
      "code": "cin >> n >> k >> l >> c >> d >> p >> nl >> np ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare integer vol = k * l",
      "code": "int vol = k * l ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare integer toastFromBottle = vol / nl",
      "code": "int toastFromBottle = vol / nl ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare integer limes = c * d",
      "code": "int limes = c * d ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "declare integer variable toastDueToSalt = p / np",
      "code": "int toastDueToSalt = p / np ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "declare integer variable ans = min of toastFromBottle and toastDueToSalt",
      "code": "int ans = min ( toastFromBottle , toastDueToSalt ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "assign min of ans and limes to ans",
      "code": "ans = min ( ans , limes ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "assign ans / n to ans",
      "code": "ans = ans / n ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int toastFromBottle = vol ( nl ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘vol’ cannot be used as a function"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int ans = min ( ans , limes ) ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "int ans = __gcd ( toastFromBottle , toastDueToSalt ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        7,
        9
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "int ans = __gcd ( toastFromBottle , toastDueToSalt ) ;",
        "ans -= n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        7,
        9,
        8
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "int ans = __gcd ( toastFromBottle , toastDueToSalt ) ;",
        "ans -= n ;",
        "int ans = min ( ans , limes ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        7,
        9,
        10
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "int ans = __gcd ( toastFromBottle , toastDueToSalt ) ;",
        "ans -= n ;",
        "cout << ans ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        7,
        9,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "int ans = __gcd ( toastFromBottle , toastDueToSalt ) ;",
        "ans -= n ;",
        "int toastDueToSalt = p / p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        7,
        8
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "int ans = __gcd ( toastFromBottle , toastDueToSalt ) ;",
        "int ans = min ( ans , limes ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        7,
        8,
        10
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "int ans = __gcd ( toastFromBottle , toastDueToSalt ) ;",
        "int ans = min ( ans , limes ) ;",
        "cout << ans ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        7,
        8,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "int ans = __gcd ( toastFromBottle , toastDueToSalt ) ;",
        "int ans = min ( ans , limes ) ;",
        "int toastDueToSalt = p / p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        7,
        10
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "int ans = __gcd ( toastFromBottle , toastDueToSalt ) ;",
        "cout << ans ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        7,
        10,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "int ans = __gcd ( toastFromBottle , toastDueToSalt ) ;",
        "cout << ans ;",
        "int toastDueToSalt = p / p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        7,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "int ans = __gcd ( toastFromBottle , toastDueToSalt ) ;",
        "int toastDueToSalt = p / p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "ans -= n ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        9,
        8
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "ans -= n ;",
        "int ans = min ( ans , limes ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        9,
        8,
        10
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "ans -= n ;",
        "int ans = min ( ans , limes ) ;",
        "cout << ans ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        9,
        8,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "ans -= n ;",
        "int ans = min ( ans , limes ) ;",
        "int toastDueToSalt = p / p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        9,
        10
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "ans -= n ;",
        "cout << ans ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        9,
        10,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "ans -= n ;",
        "cout << ans ;",
        "int toastDueToSalt = p / p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        9,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "ans -= n ;",
        "int toastDueToSalt = p / p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "int ans = min ( ans , limes ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        8,
        10
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "int ans = min ( ans , limes ) ;",
        "cout << ans ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        8,
        10,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "int ans = min ( ans , limes ) ;",
        "cout << ans ;",
        "int toastDueToSalt = p / p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        8,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "int ans = min ( ans , limes ) ;",
        "int toastDueToSalt = p / p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "cout << ans ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        10,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "cout << ans ;",
        "int toastDueToSalt = p / p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "int toastDueToSalt = p / p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        7,
        9,
        8
      ],
      "mod_code": [
        "int ans = __gcd ( toastFromBottle , toastDueToSalt ) ;",
        "ans -= n ;",
        "int ans = min ( ans , limes ) ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        7,
        9,
        8,
        10
      ],
      "mod_code": [
        "int ans = __gcd ( toastFromBottle , toastDueToSalt ) ;",
        "ans -= n ;",
        "int ans = min ( ans , limes ) ;",
        "cout << ans ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        7,
        9,
        8,
        6
      ],
      "mod_code": [
        "int ans = __gcd ( toastFromBottle , toastDueToSalt ) ;",
        "ans -= n ;",
        "int ans = min ( ans , limes ) ;",
        "int toastDueToSalt = p / p ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "int ans = __gcd ( toastFromBottle , toastDueToSalt ) ;",
        "int ans = min ( ans , limes ) ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        7,
        8,
        10
      ],
      "mod_code": [
        "int ans = __gcd ( toastFromBottle , toastDueToSalt ) ;",
        "int ans = min ( ans , limes ) ;",
        "cout << ans ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        7,
        8,
        10,
        6
      ],
      "mod_code": [
        "int ans = __gcd ( toastFromBottle , toastDueToSalt ) ;",
        "int ans = min ( ans , limes ) ;",
        "cout << ans ;",
        "int toastDueToSalt = p / p ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        7,
        8,
        6
      ],
      "mod_code": [
        "int ans = __gcd ( toastFromBottle , toastDueToSalt ) ;",
        "int ans = min ( ans , limes ) ;",
        "int toastDueToSalt = p / p ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "ans -= n ;",
        "int ans = min ( ans , limes ) ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        9,
        8,
        10
      ],
      "mod_code": [
        "ans -= n ;",
        "int ans = min ( ans , limes ) ;",
        "cout << ans ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        9,
        8,
        10,
        6
      ],
      "mod_code": [
        "ans -= n ;",
        "int ans = min ( ans , limes ) ;",
        "cout << ans ;",
        "int toastDueToSalt = p / p ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        9,
        8,
        6
      ],
      "mod_code": [
        "ans -= n ;",
        "int ans = min ( ans , limes ) ;",
        "int toastDueToSalt = p / p ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "int ans = min ( ans , limes ) ;",
        "cout << ans ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        8,
        10,
        6
      ],
      "mod_code": [
        "int ans = min ( ans , limes ) ;",
        "cout << ans ;",
        "int toastDueToSalt = p / p ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "int ans = min ( ans , limes ) ;",
        "int toastDueToSalt = p / p ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int ans’"
    }
  ]
}