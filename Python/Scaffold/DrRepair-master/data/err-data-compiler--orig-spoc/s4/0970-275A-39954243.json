{
  "meta": {
    "index": 970,
    "hitid": "3PR3LXCWSFTV4PT2UCNCTHB6YE4X9I",
    "workerid": "AIWEXPJAU66D9",
    "probid": "275A",
    "subid": "39954243"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare 2d boolean array a with size 10 by 10",
      "code": "bool a [ 10 ] [ 10 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i from 0 to 4 inclusive",
      "code": "for ( int i = 0 ; i <= 4 ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for j from 0 to 4 inclusive , assign true to a [ i ] [ j ]",
      "code": "for ( int j = 0 ; j <= 4 ; j ++ ) { a [ i ] [ j ] = true ; }",
      "indent": 2
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i from 1 to 4 exclusive",
      "code": "for ( int i = 1 ; i < 4 ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for j from 1 to 4 exclusive",
      "code": "for ( int j = 1 ; j < 4 ; j ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "declare integer variable b",
      "code": "int b ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "read input to b",
      "code": "cin >> b ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if b is odd",
      "code": "if ( b % 2 == 1 )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "change a [ i ] [ j ] to ! a [ i ] [ j ]",
      "code": "a [ i ] [ j ] = ! a [ i ] [ j ] ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "change a [ i + 1 ] [ j ] to ! a [ i + 1 ] [ j ]",
      "code": "a [ i + 1 ] [ j ] = ! a [ i + 1 ] [ j ] ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "change a [ i ] [ j + 1 ] to ! a [ i ] [ j + 1 ]",
      "code": "a [ i ] [ j + 1 ] = ! a [ i ] [ j + 1 ] ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "change a [ i - 1 ] [ j ] to ! a [ i - 1 ] [ j ]",
      "code": "a [ i - 1 ] [ j ] = ! a [ i - 1 ] [ j ] ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "change a [ i ] [ j - 1 ] to ! a [ i ] [ j - 1 ]",
      "code": "a [ i ] [ j - 1 ] = ! a [ i ] [ j - 1 ] ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for i = 1 to 4 exclusive",
      "code": "for ( int i = 1 ; i < 4 ; i ++ )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for j = 1 to 4 exclusive , print a [ i ] [ j ]",
      "code": "for ( int j = 1 ; j < 4 ; j ++ ) { cout << a [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 20,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool a [ 10 ] [ 10 boolean ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before ‘boolean’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] j = true ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘j’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "cin >> n ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        8,
        11
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "cin >> n ;",
        "a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        8,
        11,
        9
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "cin >> n ;",
        "a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] ;",
        "if ( b % 2 == 0 )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        8,
        11,
        13
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "cin >> n ;",
        "a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] ;",
        "a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        8,
        11,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "cin >> n ;",
        "a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] ;",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        8,
        9
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "cin >> n ;",
        "if ( b % 2 == 0 )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        8,
        9,
        13
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "cin >> n ;",
        "if ( b % 2 == 0 )",
        "a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        8,
        9,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "cin >> n ;",
        "if ( b % 2 == 0 )",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        8,
        13
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "cin >> n ;",
        "a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        8,
        13,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "cin >> n ;",
        "a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] ;",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        8,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "cin >> n ;",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        9
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] ;",
        "if ( b % 2 == 0 )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        9,
        13
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] ;",
        "if ( b % 2 == 0 )",
        "a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        9,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] ;",
        "if ( b % 2 == 0 )",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        13
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] ;",
        "a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        13,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] ;",
        "a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] ;",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] ;",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "if ( b % 2 == 0 )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        13
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "if ( b % 2 == 0 )",
        "a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        13,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "if ( b % 2 == 0 )",
        "a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] ;",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        9,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "if ( b % 2 == 0 )",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        13,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] ;",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j <= 4 ; j ++ ) a [ i ] [ j ] [ j ] = true ;",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "cin >> n ;",
        "a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        11,
        9
      ],
      "mod_code": [
        "cin >> n ;",
        "a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] ;",
        "if ( b % 2 == 0 )"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        11,
        9,
        13
      ],
      "mod_code": [
        "cin >> n ;",
        "a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] ;",
        "if ( b % 2 == 0 )",
        "a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        11,
        9,
        10
      ],
      "mod_code": [
        "cin >> n ;",
        "a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] ;",
        "if ( b % 2 == 0 )",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        11,
        13
      ],
      "mod_code": [
        "cin >> n ;",
        "a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] ;",
        "a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        11,
        13,
        10
      ],
      "mod_code": [
        "cin >> n ;",
        "a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] ;",
        "a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] ;",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        11,
        10
      ],
      "mod_code": [
        "cin >> n ;",
        "a [ i + 1 ] [ j ] = a [ i + 1 ] [ j ] ;",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "cin >> n ;",
        "if ( b % 2 == 0 )"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        9,
        13
      ],
      "mod_code": [
        "cin >> n ;",
        "if ( b % 2 == 0 )",
        "a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        9,
        13,
        10
      ],
      "mod_code": [
        "cin >> n ;",
        "if ( b % 2 == 0 )",
        "a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] ;",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        9,
        10
      ],
      "mod_code": [
        "cin >> n ;",
        "if ( b % 2 == 0 )",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "cin >> n ;",
        "a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        13,
        10
      ],
      "mod_code": [
        "cin >> n ;",
        "a [ i - 1 ] [ j ] = a [ i - 1 ] [ j ] ;",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "cin >> n ;",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    }
  ]
}