{
  "meta": {
    "index": 979,
    "hitid": "3SX4X51T803MFZPFLREG6ZVXSSHAO5",
    "workerid": "AIWEXPJAU66D9",
    "probid": "275A",
    "subid": "48606715"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create 2d arrays of integers a and b with size 3 by 3",
      "code": "int a [ 3 ] [ 3 ] , b [ 3 ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "set first sizeof ( b ) bytes at the pointer b to 0",
      "code": "memset ( b , 0 , sizeof ( b ) ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integers i and j",
      "code": "int i , j ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "change i from 0 to 3 exclusive in a loop",
      "code": "for ( i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j from 0 to 3 exclusive , read a [ i ] [ j ]",
      "code": "for ( j = 0 ; j < 3 ; j ++ ) { cin >> a [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for j = 0 to 3 exclusive",
      "code": "for ( j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if a [ i ] [ j ] is even",
      "code": "if ( a [ i ] [ j ] % 2 == 0 )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "change a [ i ] [ j ] to 0",
      "code": "a [ i ] [ j ] = 0 ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 12,
      "text": "change a [ i ] [ j ] to 1",
      "code": "a [ i ] [ j ] = 1 ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for j = 0 to 3 exclusive",
      "code": "for ( j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if a [ i ] [ j ] = 1",
      "code": "if ( a [ i ] [ j ] == 1 )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "if b [ i ] [ j ] is equal to - 1",
      "code": "if ( b [ i ] [ j ] == - 1 )",
      "indent": 4
    },
    {
      "line": 20,
      "text": "change b [ i ] [ j ] to 0",
      "code": "b [ i ] [ j ] = 0 ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 22,
      "text": "change b [ i ] [ j ] to - 1",
      "code": "b [ i ] [ j ] = - 1 ;",
      "indent": 5
    },
    {
      "line": 23,
      "text": "if i ! = 2",
      "code": "if ( i != 2 )",
      "indent": 4
    },
    {
      "line": 24,
      "text": "if b [ i + 1 ] [ j ] = - 1",
      "code": "if ( b [ i + 1 ] [ j ] == - 1 )",
      "indent": 5
    },
    {
      "line": 25,
      "text": "change b [ i + 1 ] [ j ] to 0",
      "code": "b [ i + 1 ] [ j ] = 0 ;",
      "indent": 6
    },
    {
      "line": 26,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 27,
      "text": "assign - 1 to b [ i + 1 ] [ j ]",
      "code": "b [ i + 1 ] [ j ] = - 1 ;",
      "indent": 6
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 29,
      "text": "if j ! = 2",
      "code": "if ( j != 2 )",
      "indent": 4
    },
    {
      "line": 30,
      "text": "if b [ i ] [ j + 1 ] is equal to - 1",
      "code": "if ( b [ i ] [ j + 1 ] == - 1 )",
      "indent": 5
    },
    {
      "line": 31,
      "text": "change b [ i ] [ j + 1 ] to 0",
      "code": "b [ i ] [ j + 1 ] = 0 ;",
      "indent": 6
    },
    {
      "line": 32,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 33,
      "text": "change b [ i ] [ j + 1 ] to - 1",
      "code": "b [ i ] [ j + 1 ] = - 1 ;",
      "indent": 6
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 35,
      "text": "if i ! = 0",
      "code": "if ( i != 0 )",
      "indent": 4
    },
    {
      "line": 36,
      "text": "if b [ i - 1 ] [ j ] is equal to - 1",
      "code": "if ( b [ i - 1 ] [ j ] == - 1 )",
      "indent": 5
    },
    {
      "line": 37,
      "text": "change b [ i - 1 ] [ j ] to 0",
      "code": "b [ i - 1 ] [ j ] = 0 ;",
      "indent": 6
    },
    {
      "line": 38,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 39,
      "text": "assign - 1 to b [ i - 1 ] [ j ]",
      "code": "b [ i - 1 ] [ j ] = - 1 ;",
      "indent": 6
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 41,
      "text": "if j ! = 0",
      "code": "if ( j != 0 )",
      "indent": 4
    },
    {
      "line": 42,
      "text": "if b [ i ] [ j - 1 ] is equal to - 1",
      "code": "if ( b [ i ] [ j - 1 ] == - 1 )",
      "indent": 5
    },
    {
      "line": 43,
      "text": "assign 0 to b [ i ] [ j - 1 ]",
      "code": "b [ i ] [ j - 1 ] = 0 ;",
      "indent": 6
    },
    {
      "line": 44,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 45,
      "text": "change b [ i ] [ j - 1 ] to - 1",
      "code": "b [ i ] [ j - 1 ] = - 1 ;",
      "indent": 6
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 50,
      "text": "for i from 0 to 3 exclusive",
      "code": "for ( i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 51,
      "text": "for j from 0 to 3 exclusive",
      "code": "for ( j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 52,
      "text": "if b [ i ] [ j ] = - 1",
      "code": "if ( b [ i ] [ j ] == - 1 )",
      "indent": 3
    },
    {
      "line": 53,
      "text": "change b [ i ] [ j ] to 0",
      "code": "b [ i ] [ j ] = 0 ;",
      "indent": 4
    },
    {
      "line": 54,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 55,
      "text": "assign 1 to b [ i ] [ j ]",
      "code": "b [ i ] [ j ] = 1 ;",
      "indent": 4
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 57,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 58,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 59,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 60,
      "text": "for j from 0 to 3 exclusive , print b [ i ] [ j ]",
      "code": "for ( j = 0 ; j < 3 ; j ++ ) { cout << b [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 61,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 62,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 63,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 64,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ 3 ] , a [ 3 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [3]’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "memset ( b + 0 , sizeof ( b ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "b [ ' i ' ] = 0 ;"
      ],
      "err_line": 20,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [3]’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "char b [ i + 1 ] [ j ] = - 1 ;"
      ],
      "err_line": 27,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "char b [ i - 1 ] [ j ] = - 1 ;"
      ],
      "err_line": 39,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        43
      ],
      "mod_code": [
        "int b [ i ] [ j - 1 ] = 0 ;"
      ],
      "err_line": 43,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        44
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 44,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        53
      ],
      "mod_code": [
        "b [ ' i ' ] = 0 ;"
      ],
      "err_line": 53,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [3]’"
    },
    {
      "mod_line": [
        54
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 54,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        55
      ],
      "mod_code": [
        "char b [ i ] [ j ] = 1 ;"
      ],
      "err_line": 55,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        1,
        53
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "b [ ' i ' ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        53,
        45
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "b [ ' i ' ] = 0 ;",
        "b [ i ] [ j - ' 1 ' ] = - 1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        53,
        45,
        18
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "b [ ' i ' ] = 0 ;",
        "b [ i ] [ j - ' 1 ' ] = - 1 ;",
        "if ( a [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        53,
        45,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "b [ ' i ' ] = 0 ;",
        "b [ i ] [ j - ' 1 ' ] = - 1 ;",
        "if ( i )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        53,
        45,
        26
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "b [ ' i ' ] = 0 ;",
        "b [ i ] [ j - ' 1 ' ] = - 1 ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        53,
        18
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "b [ ' i ' ] = 0 ;",
        "if ( a [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        53,
        18,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "b [ ' i ' ] = 0 ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "if ( i )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        53,
        18,
        26
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "b [ ' i ' ] = 0 ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        53,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "b [ ' i ' ] = 0 ;",
        "if ( i )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        53,
        23,
        26
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "b [ ' i ' ] = 0 ;",
        "if ( i )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        53,
        26
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "b [ ' i ' ] = 0 ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        45
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j - ' 1 ' ] = - 1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        45,
        18
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j - ' 1 ' ] = - 1 ;",
        "if ( a [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        45,
        18,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j - ' 1 ' ] = - 1 ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "if ( i )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        45,
        18,
        26
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j - ' 1 ' ] = - 1 ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        45,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j - ' 1 ' ] = - 1 ;",
        "if ( i )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        45,
        23,
        26
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j - ' 1 ' ] = - 1 ;",
        "if ( i )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        45,
        26
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j - ' 1 ' ] = - 1 ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( a [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        18,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "if ( i )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        18,
        23,
        26
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "if ( i )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        18,
        26
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( i )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        23,
        26
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( i )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        26
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        53,
        45
      ],
      "mod_code": [
        "b [ ' i ' ] = 0 ;",
        "b [ i ] [ j - ' 1 ' ] = - 1 ;"
      ],
      "err_line": 53,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [3]’"
    },
    {
      "mod_line": [
        53,
        45,
        18
      ],
      "mod_code": [
        "b [ ' i ' ] = 0 ;",
        "b [ i ] [ j - ' 1 ' ] = - 1 ;",
        "if ( a [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 53,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [3]’"
    },
    {
      "mod_line": [
        53,
        45,
        18,
        23
      ],
      "mod_code": [
        "b [ ' i ' ] = 0 ;",
        "b [ i ] [ j - ' 1 ' ] = - 1 ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "if ( i )"
      ],
      "err_line": 53,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [3]’"
    },
    {
      "mod_line": [
        53,
        45,
        18,
        26
      ],
      "mod_code": [
        "b [ ' i ' ] = 0 ;",
        "b [ i ] [ j - ' 1 ' ] = - 1 ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        53,
        45,
        23
      ],
      "mod_code": [
        "b [ ' i ' ] = 0 ;",
        "b [ i ] [ j - ' 1 ' ] = - 1 ;",
        "if ( i )"
      ],
      "err_line": 53,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [3]’"
    },
    {
      "mod_line": [
        53,
        45,
        23,
        26
      ],
      "mod_code": [
        "b [ ' i ' ] = 0 ;",
        "b [ i ] [ j - ' 1 ' ] = - 1 ;",
        "if ( i )",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        53,
        45,
        26
      ],
      "mod_code": [
        "b [ ' i ' ] = 0 ;",
        "b [ i ] [ j - ' 1 ' ] = - 1 ;",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        53,
        18
      ],
      "mod_code": [
        "b [ ' i ' ] = 0 ;",
        "if ( a [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 53,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [3]’"
    },
    {
      "mod_line": [
        53,
        18,
        23
      ],
      "mod_code": [
        "b [ ' i ' ] = 0 ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "if ( i )"
      ],
      "err_line": 53,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [3]’"
    },
    {
      "mod_line": [
        53,
        18,
        23,
        26
      ],
      "mod_code": [
        "b [ ' i ' ] = 0 ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "if ( i )",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        53,
        18,
        26
      ],
      "mod_code": [
        "b [ ' i ' ] = 0 ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        53,
        23
      ],
      "mod_code": [
        "b [ ' i ' ] = 0 ;",
        "if ( i )"
      ],
      "err_line": 53,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [3]’"
    },
    {
      "mod_line": [
        53,
        23,
        26
      ],
      "mod_code": [
        "b [ ' i ' ] = 0 ;",
        "if ( i )",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        53,
        26
      ],
      "mod_code": [
        "b [ ' i ' ] = 0 ;",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        45,
        18,
        23,
        26
      ],
      "mod_code": [
        "b [ i ] [ j - ' 1 ' ] = - 1 ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "if ( i )",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        45,
        18,
        26
      ],
      "mod_code": [
        "b [ i ] [ j - ' 1 ' ] = - 1 ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        45,
        23,
        26
      ],
      "mod_code": [
        "b [ i ] [ j - ' 1 ' ] = - 1 ;",
        "if ( i )",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        45,
        26
      ],
      "mod_code": [
        "b [ i ] [ j - ' 1 ' ] = - 1 ;",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        18,
        23,
        26
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "if ( i )",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        18,
        26
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        26
      ],
      "mod_code": [
        "if ( i )",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}