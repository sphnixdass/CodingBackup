{
  "meta": {
    "index": 1785,
    "hitid": "3RQVKZ7ZRKDQPQ2CRQ4ZPVQ4QFH272",
    "workerid": "A1APYLD4DUK33J",
    "probid": "313A",
    "subid": "48963872"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare string x",
      "code": "string x ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if x [ 0 ] is not ' - '",
      "code": "if ( x [ 0 ] != ' - ' )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print x , newline",
      "code": "cout << x << endl ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "declare integer l = size of x",
      "code": "int l = x . size ( ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if l is 3 and x [ l - 1 ] is ' 0 '",
      "code": "if ( l == 3 && x [ l - 1 ] == ' 0 ' )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print ' 0 ' , newline",
      "code": "cout << ' 0 ' << endl ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if x [ l - 1 ] is greater than x [ l - 2 ]",
      "code": "if ( x [ l - 1 ] > x [ l - 2 ] )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print substring of x from 0 to l - 1 , newline",
      "code": "cout << x . substr ( 0 , l - 1 ) << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print substring of x ( from 0 to l - 2 ) + x [ l - 1 ] , newline",
      "code": "cout << x . substr ( 0 , l - 2 ) + x [ l - 1 ] << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . size ( ) - 2 ) + x [ l - 1 ] << endl ;"
      ],
      "err_line": 16,
      "err_msg": "request for member ‘size’ in ‘l’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string x x ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . substr ( l , l ) + x [ l - 1 ] << endl ;"
      ],
      "err_line": 16,
      "err_msg": "request for member ‘substr’ in ‘l’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        16,
        1
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . size ( ) - 2 ) + x [ l - 1 ] << endl ;",
        "string x x ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        16,
        1,
        2
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . size ( ) - 2 ) + x [ l - 1 ] << endl ;",
        "string x x ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        16,
        1,
        2,
        9
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . size ( ) - 2 ) + x [ l - 1 ] << endl ;",
        "string x x ;",
        "cin >> n ;",
        "cout << ' -1 ' << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        16,
        1,
        2,
        3
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . size ( ) - 2 ) + x [ l - 1 ] << endl ;",
        "string x x ;",
        "cin >> n ;",
        "if ( x [ 0 ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        16,
        1,
        9
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . size ( ) - 2 ) + x [ l - 1 ] << endl ;",
        "string x x ;",
        "cout << ' -1 ' << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        16,
        1,
        9,
        3
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . size ( ) - 2 ) + x [ l - 1 ] << endl ;",
        "string x x ;",
        "cout << ' -1 ' << endl ;",
        "if ( x [ 0 ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        16,
        1,
        3
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . size ( ) - 2 ) + x [ l - 1 ] << endl ;",
        "string x x ;",
        "if ( x [ 0 ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        16,
        2
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . size ( ) - 2 ) + x [ l - 1 ] << endl ;",
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        2,
        9
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . size ( ) - 2 ) + x [ l - 1 ] << endl ;",
        "cin >> n ;",
        "cout << ' -1 ' << endl ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        2,
        9,
        3
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . size ( ) - 2 ) + x [ l - 1 ] << endl ;",
        "cin >> n ;",
        "cout << ' -1 ' << endl ;",
        "if ( x [ 0 ] == ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        2,
        3
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . size ( ) - 2 ) + x [ l - 1 ] << endl ;",
        "cin >> n ;",
        "if ( x [ 0 ] == ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        9
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . size ( ) - 2 ) + x [ l - 1 ] << endl ;",
        "cout << ' -1 ' << endl ;"
      ],
      "err_line": 16,
      "err_msg": "request for member ‘size’ in ‘l’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        16,
        9,
        3
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . size ( ) - 2 ) + x [ l - 1 ] << endl ;",
        "cout << ' -1 ' << endl ;",
        "if ( x [ 0 ] == ' - ' )"
      ],
      "err_line": 16,
      "err_msg": "request for member ‘size’ in ‘l’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        16,
        3
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . size ( ) - 2 ) + x [ l - 1 ] << endl ;",
        "if ( x [ 0 ] == ' - ' )"
      ],
      "err_line": 16,
      "err_msg": "request for member ‘size’ in ‘l’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "string x x ;",
        "cout << x . substr ( 0 , l . substr ( l , l ) + x [ l - 1 ] << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        1,
        16,
        2
      ],
      "mod_code": [
        "string x x ;",
        "cout << x . substr ( 0 , l . substr ( l , l ) + x [ l - 1 ] << endl ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        1,
        16,
        2,
        9
      ],
      "mod_code": [
        "string x x ;",
        "cout << x . substr ( 0 , l . substr ( l , l ) + x [ l - 1 ] << endl ;",
        "cin >> n ;",
        "cout << ' -1 ' << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        1,
        16,
        2,
        3
      ],
      "mod_code": [
        "string x x ;",
        "cout << x . substr ( 0 , l . substr ( l , l ) + x [ l - 1 ] << endl ;",
        "cin >> n ;",
        "if ( x [ 0 ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        1,
        16,
        9
      ],
      "mod_code": [
        "string x x ;",
        "cout << x . substr ( 0 , l . substr ( l , l ) + x [ l - 1 ] << endl ;",
        "cout << ' -1 ' << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        1,
        16,
        9,
        3
      ],
      "mod_code": [
        "string x x ;",
        "cout << x . substr ( 0 , l . substr ( l , l ) + x [ l - 1 ] << endl ;",
        "cout << ' -1 ' << endl ;",
        "if ( x [ 0 ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        1,
        16,
        3
      ],
      "mod_code": [
        "string x x ;",
        "cout << x . substr ( 0 , l . substr ( l , l ) + x [ l - 1 ] << endl ;",
        "if ( x [ 0 ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "string x x ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        1,
        2,
        9
      ],
      "mod_code": [
        "string x x ;",
        "cin >> n ;",
        "cout << ' -1 ' << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        1,
        2,
        9,
        3
      ],
      "mod_code": [
        "string x x ;",
        "cin >> n ;",
        "cout << ' -1 ' << endl ;",
        "if ( x [ 0 ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "string x x ;",
        "cin >> n ;",
        "if ( x [ 0 ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "string x x ;",
        "cout << ' -1 ' << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        1,
        9,
        3
      ],
      "mod_code": [
        "string x x ;",
        "cout << ' -1 ' << endl ;",
        "if ( x [ 0 ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "string x x ;",
        "if ( x [ 0 ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        16,
        2
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . substr ( l , l ) + x [ l - 1 ] << endl ;",
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        2,
        9
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . substr ( l , l ) + x [ l - 1 ] << endl ;",
        "cin >> n ;",
        "cout << ' -1 ' << endl ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        2,
        9,
        3
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . substr ( l , l ) + x [ l - 1 ] << endl ;",
        "cin >> n ;",
        "cout << ' -1 ' << endl ;",
        "if ( x [ 0 ] == ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        2,
        3
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . substr ( l , l ) + x [ l - 1 ] << endl ;",
        "cin >> n ;",
        "if ( x [ 0 ] == ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        9
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . substr ( l , l ) + x [ l - 1 ] << endl ;",
        "cout << ' -1 ' << endl ;"
      ],
      "err_line": 16,
      "err_msg": "request for member ‘substr’ in ‘l’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        16,
        9,
        3
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . substr ( l , l ) + x [ l - 1 ] << endl ;",
        "cout << ' -1 ' << endl ;",
        "if ( x [ 0 ] == ' - ' )"
      ],
      "err_line": 16,
      "err_msg": "request for member ‘substr’ in ‘l’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        16,
        3
      ],
      "mod_code": [
        "cout << x . substr ( 0 , l . substr ( l , l ) + x [ l - 1 ] << endl ;",
        "if ( x [ 0 ] == ' - ' )"
      ],
      "err_line": 16,
      "err_msg": "request for member ‘substr’ in ‘l’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "cin >> n ;",
        "cout << ' -1 ' << endl ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        3
      ],
      "mod_code": [
        "cin >> n ;",
        "cout << ' -1 ' << endl ;",
        "if ( x [ 0 ] == ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "cin >> n ;",
        "if ( x [ 0 ] == ' - ' )"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    }
  ]
}