{
  "meta": {
    "index": 1789,
    "hitid": "3VW0145YLY69GP772HCG7U9BNFYJMH",
    "workerid": "AIWEXPJAU66D9",
    "probid": "313A",
    "subid": "41617615"
  },
  "lines": [
    {
      "line": 0,
      "text": "function getResult with int argument n that returns int",
      "code": "int getResult ( int n )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if n is greater than - 10 , return n",
      "code": "if ( n > - 10 ) { return n ; }",
      "indent": 1
    },
    {
      "line": 2,
      "text": "assign the new value = 0 - n to n",
      "code": "n = ( 0 - n ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if n % 10 is greater than ( ( n / 10 ) % 10 )",
      "code": "if ( n % 10 > ( ( n / 10 ) % 10 ) )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "change the value of n to n / 10",
      "code": "n = n / 10 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 6,
      "text": "change the value of n to ( n / 100 ) * 10 + n % 10",
      "code": "n = ( n / 100 ) * 10 + n % 10 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return 0 - n",
      "code": "return ( 0 - n ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 11,
      "text": "n is a new integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read standard input to n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print the result of getResult ( n ) to the standard output",
      "code": "cout << getResult ( n ) << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int getResult ( int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "if ( n % 10 > ( n / 10 ) % 10 ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "else else",
        "n = getchar ( ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        12,
        0
      ],
      "mod_code": [
        "else else",
        "n = getchar ( ) ;",
        "int getResult ( int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        12,
        0,
        3
      ],
      "mod_code": [
        "else else",
        "n = getchar ( ) ;",
        "int getResult ( int n ) ;",
        "if ( n % 10 > ( n / 10 ) % 10 ) )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        12,
        0,
        6
      ],
      "mod_code": [
        "else else",
        "n = getchar ( ) ;",
        "int getResult ( int n ) ;",
        "int n = ( n / 100 ) * 10 + n % 10 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        12,
        3
      ],
      "mod_code": [
        "else else",
        "n = getchar ( ) ;",
        "if ( n % 10 > ( n / 10 ) % 10 ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        12,
        3,
        6
      ],
      "mod_code": [
        "else else",
        "n = getchar ( ) ;",
        "if ( n % 10 > ( n / 10 ) % 10 ) )",
        "int n = ( n / 100 ) * 10 + n % 10 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        12,
        6
      ],
      "mod_code": [
        "else else",
        "n = getchar ( ) ;",
        "int n = ( n / 100 ) * 10 + n % 10 ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        0
      ],
      "mod_code": [
        "else else",
        "int getResult ( int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        0,
        3
      ],
      "mod_code": [
        "else else",
        "int getResult ( int n ) ;",
        "if ( n % 10 > ( n / 10 ) % 10 ) )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        0,
        3,
        6
      ],
      "mod_code": [
        "else else",
        "int getResult ( int n ) ;",
        "if ( n % 10 > ( n / 10 ) % 10 ) )",
        "int n = ( n / 100 ) * 10 + n % 10 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        0,
        6
      ],
      "mod_code": [
        "else else",
        "int getResult ( int n ) ;",
        "int n = ( n / 100 ) * 10 + n % 10 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "else else",
        "if ( n % 10 > ( n / 10 ) % 10 ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        3,
        6
      ],
      "mod_code": [
        "else else",
        "if ( n % 10 > ( n / 10 ) % 10 ) )",
        "int n = ( n / 100 ) * 10 + n % 10 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "else else",
        "int n = ( n / 100 ) * 10 + n % 10 ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        0
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int getResult ( int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        0,
        3
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int getResult ( int n ) ;",
        "if ( n % 10 > ( n / 10 ) % 10 ) )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        0,
        3,
        6
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int getResult ( int n ) ;",
        "if ( n % 10 > ( n / 10 ) % 10 ) )",
        "int n = ( n / 100 ) * 10 + n % 10 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        0,
        6
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "int getResult ( int n ) ;",
        "int n = ( n / 100 ) * 10 + n % 10 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "if ( n % 10 > ( n / 10 ) % 10 ) )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        3,
        6
      ],
      "mod_code": [
        "n = getchar ( ) ;",
        "if ( n % 10 > ( n / 10 ) % 10 ) )",
        "int n = ( n / 100 ) * 10 + n % 10 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "int getResult ( int n ) ;",
        "if ( n % 10 > ( n / 10 ) % 10 ) )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        6
      ],
      "mod_code": [
        "int getResult ( int n ) ;",
        "if ( n % 10 > ( n / 10 ) % 10 ) )",
        "int n = ( n / 100 ) * 10 + n % 10 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "int getResult ( int n ) ;",
        "int n = ( n / 100 ) * 10 + n % 10 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "if ( n % 10 > ( n / 10 ) % 10 ) )",
        "int n = ( n / 100 ) * 10 + n % 10 ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    }
  ]
}