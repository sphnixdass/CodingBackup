{
  "meta": {
    "index": 1289,
    "hitid": "3ZURAPD288HWFYZMQ52X84TGVV8F1J",
    "workerid": "AIWEXPJAU66D9",
    "probid": "47A",
    "subid": "48774233"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer variable n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let minIncl and maxExcl be integers with minIncl = 1 and maxExcl = 500",
      "code": "int minIncl = 1 , maxExcl = 500 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while minIncl is less than maxExcl - 1",
      "code": "while ( minIncl < maxExcl - 1 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set integer mid to ( minIncl + maxExcl ) / 2",
      "code": "int mid = ( minIncl + maxExcl ) / 2 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if mid * ( mid + 1 ) / 2 is greater than n",
      "code": "if ( mid * ( mid + 1 ) / 2 > n )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set maxExcl to mid",
      "code": "maxExcl = mid ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "minIncl = mid",
      "code": "minIncl = mid ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print ( n = = minIncl * ( minIncl + 1 ) / 2 ? \" YES \\ n \" : \" NO \\ n \" )",
      "code": "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" : \" NO\\n \" ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" YES\\n \" ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "mid = ( minIncl + maxExcl ) / 2 ;"
      ],
      "err_line": 5,
      "err_msg": "‘mid’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "maxExcl to ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" NO\\n \" ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" YES\\n \" ) ;",
        "while ( cin >> n )"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        2,
        8
      ],
      "mod_code": [
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" YES\\n \" ) ;",
        "while ( cin >> n )",
        "else ;"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        2,
        8,
        7
      ],
      "mod_code": [
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" YES\\n \" ) ;",
        "while ( cin >> n )",
        "else ;",
        "maxExcl to ;"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        2,
        8,
        3
      ],
      "mod_code": [
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" YES\\n \" ) ;",
        "while ( cin >> n )",
        "else ;",
        "int minIncl , maxExcl = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        2,
        7
      ],
      "mod_code": [
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" YES\\n \" ) ;",
        "while ( cin >> n )",
        "maxExcl to ;"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        2,
        7,
        3
      ],
      "mod_code": [
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" YES\\n \" ) ;",
        "while ( cin >> n )",
        "maxExcl to ;",
        "int minIncl , maxExcl = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        2,
        3
      ],
      "mod_code": [
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" YES\\n \" ) ;",
        "while ( cin >> n )",
        "int minIncl , maxExcl = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" YES\\n \" ) ;",
        "else ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        8,
        7
      ],
      "mod_code": [
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" YES\\n \" ) ;",
        "else ;",
        "maxExcl to ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        11,
        8,
        7,
        3
      ],
      "mod_code": [
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" YES\\n \" ) ;",
        "else ;",
        "maxExcl to ;",
        "int minIncl , maxExcl = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        11,
        8,
        3
      ],
      "mod_code": [
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" YES\\n \" ) ;",
        "else ;",
        "int minIncl , maxExcl = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" YES\\n \" ) ;",
        "maxExcl to ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        11,
        7,
        3
      ],
      "mod_code": [
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" YES\\n \" ) ;",
        "maxExcl to ;",
        "int minIncl , maxExcl = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" YES\\n \" ) ;",
        "int minIncl , maxExcl = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "while ( cin >> n )",
        "else ;"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        7
      ],
      "mod_code": [
        "while ( cin >> n )",
        "else ;",
        "maxExcl to ;"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        7,
        3
      ],
      "mod_code": [
        "while ( cin >> n )",
        "else ;",
        "maxExcl to ;",
        "int minIncl , maxExcl = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        7,
        11
      ],
      "mod_code": [
        "while ( cin >> n )",
        "else ;",
        "maxExcl to ;",
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" NO\\n \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        3
      ],
      "mod_code": [
        "while ( cin >> n )",
        "else ;",
        "int minIncl , maxExcl = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        3,
        11
      ],
      "mod_code": [
        "while ( cin >> n )",
        "else ;",
        "int minIncl , maxExcl = 1 ;",
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" NO\\n \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        11
      ],
      "mod_code": [
        "while ( cin >> n )",
        "else ;",
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" NO\\n \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "while ( cin >> n )",
        "maxExcl to ;"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        3
      ],
      "mod_code": [
        "while ( cin >> n )",
        "maxExcl to ;",
        "int minIncl , maxExcl = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        3,
        11
      ],
      "mod_code": [
        "while ( cin >> n )",
        "maxExcl to ;",
        "int minIncl , maxExcl = 1 ;",
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" NO\\n \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        11
      ],
      "mod_code": [
        "while ( cin >> n )",
        "maxExcl to ;",
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" NO\\n \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "while ( cin >> n )",
        "int minIncl , maxExcl = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        11
      ],
      "mod_code": [
        "while ( cin >> n )",
        "int minIncl , maxExcl = 1 ;",
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" NO\\n \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "while ( cin >> n )",
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" NO\\n \" ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘minIncl’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "else ;",
        "maxExcl to ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        8,
        7,
        3
      ],
      "mod_code": [
        "else ;",
        "maxExcl to ;",
        "int minIncl , maxExcl = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        8,
        7,
        3,
        11
      ],
      "mod_code": [
        "else ;",
        "maxExcl to ;",
        "int minIncl , maxExcl = 1 ;",
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" NO\\n \" ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        8,
        7,
        11
      ],
      "mod_code": [
        "else ;",
        "maxExcl to ;",
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" NO\\n \" ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        8,
        3,
        11
      ],
      "mod_code": [
        "else ;",
        "int minIncl , maxExcl = 1 ;",
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" NO\\n \" ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "else ;",
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" NO\\n \" ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "maxExcl to ;",
        "int minIncl , maxExcl = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        7,
        3,
        11
      ],
      "mod_code": [
        "maxExcl to ;",
        "int minIncl , maxExcl = 1 ;",
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" NO\\n \" ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "maxExcl to ;",
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" NO\\n \" ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "int minIncl , maxExcl = 1 ;",
        "cout << ( n == minIncl * ( minIncl + 1 ) / 2 ? \" YES\\n \" ? \" NO\\n \" ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘)’ token"
    }
  ]
}