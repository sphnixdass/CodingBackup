{
  "meta": {
    "index": 1317,
    "hitid": "3SCKNODZ0XAMECR5D92JHJT208UN7V",
    "workerid": "AIWEXPJAU66D9",
    "probid": "47A",
    "subid": "27099392"
  },
  "lines": [
    {
      "line": 0,
      "text": "assign value 100 + 5 to the constant integer M",
      "code": "const int M = 100 + 5 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "ok is boolean = false",
      "code": "bool ok = false ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 1 to 1000 + 10 exclusive",
      "code": "for ( int i = 1 ; i < 1000 + 10 ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if i * ( i + 1 ) = 2 * n",
      "code": "if ( i * ( i + 1 ) == 2 * n )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "ok = true",
      "code": "ok = true ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if ok = true",
      "code": "if ( ok == true )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 7,
      "err_msg": "‘ok’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( i * ( i + 1 ) = 2 * n )"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "while ( cin >> n )",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "‘ok’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        13,
        8
      ],
      "mod_code": [
        "while ( cin >> n )",
        "else else",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "‘ok’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        13,
        8,
        6
      ],
      "mod_code": [
        "while ( cin >> n )",
        "else else",
        "break break ;",
        "if ( i * ( i + 1 ) = 2 * n )"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        13,
        8,
        7
      ],
      "mod_code": [
        "while ( cin >> n )",
        "else else",
        "break break ;",
        "bool ok = true ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        3,
        13,
        6
      ],
      "mod_code": [
        "while ( cin >> n )",
        "else else",
        "if ( i * ( i + 1 ) = 2 * n )"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        13,
        6,
        7
      ],
      "mod_code": [
        "while ( cin >> n )",
        "else else",
        "if ( i * ( i + 1 ) = 2 * n )",
        "bool ok = true ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        13,
        7
      ],
      "mod_code": [
        "while ( cin >> n )",
        "else else",
        "bool ok = true ;"
      ],
      "err_line": 11,
      "err_msg": "‘ok’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "while ( cin >> n )",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "‘ok’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        6
      ],
      "mod_code": [
        "while ( cin >> n )",
        "break break ;",
        "if ( i * ( i + 1 ) = 2 * n )"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        8,
        6,
        7
      ],
      "mod_code": [
        "while ( cin >> n )",
        "break break ;",
        "if ( i * ( i + 1 ) = 2 * n )",
        "bool ok = true ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        8,
        7
      ],
      "mod_code": [
        "while ( cin >> n )",
        "break break ;",
        "bool ok = true ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "while ( cin >> n )",
        "if ( i * ( i + 1 ) = 2 * n )"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        6,
        7
      ],
      "mod_code": [
        "while ( cin >> n )",
        "if ( i * ( i + 1 ) = 2 * n )",
        "bool ok = true ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "while ( cin >> n )",
        "bool ok = true ;"
      ],
      "err_line": 11,
      "err_msg": "‘ok’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        8
      ],
      "mod_code": [
        "else else",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        8,
        6
      ],
      "mod_code": [
        "else else",
        "break break ;",
        "if ( i * ( i + 1 ) = 2 * n )"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        13,
        8,
        6,
        7
      ],
      "mod_code": [
        "else else",
        "break break ;",
        "if ( i * ( i + 1 ) = 2 * n )",
        "bool ok = true ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        13,
        8,
        7
      ],
      "mod_code": [
        "else else",
        "break break ;",
        "bool ok = true ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        6
      ],
      "mod_code": [
        "else else",
        "if ( i * ( i + 1 ) = 2 * n )"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        13,
        6,
        7
      ],
      "mod_code": [
        "else else",
        "if ( i * ( i + 1 ) = 2 * n )",
        "bool ok = true ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "else else",
        "bool ok = true ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "break break ;",
        "if ( i * ( i + 1 ) = 2 * n )"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        6,
        7
      ],
      "mod_code": [
        "break break ;",
        "if ( i * ( i + 1 ) = 2 * n )",
        "bool ok = true ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "break break ;",
        "bool ok = true ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "if ( i * ( i + 1 ) = 2 * n )",
        "bool ok = true ;"
      ],
      "err_line": 6,
      "err_msg": "lvalue required as left operand of assignment"
    }
  ]
}