{
  "meta": {
    "index": 2087,
    "hitid": "39HYCOOPKOFWD37FSLQ54WEYHTOMDO",
    "workerid": "AIWEXPJAU66D9",
    "probid": "50A",
    "subid": "48944605"
  },
  "lines": [
    {
      "line": 0,
      "text": "constant long long int mod = 998244353",
      "code": "const long long int mod = 998244353 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "long long int method gcd with long long int arguments a and b",
      "code": "long long int gcd ( long long int a , long long int b )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "if a = 0",
      "code": "if ( a == 0 )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return b",
      "code": "return b ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 5,
      "text": "return gcd of b % a and a",
      "code": "return gcd ( b % a , a ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "function SieveOfEratosthenes with long long int argument n",
      "code": "void SieveOfEratosthenes ( long long int n )",
      "indent": 0
    },
    {
      "line": 8,
      "text": "boolean array prime with size n + 1",
      "code": "bool prime [ n + 1 ] ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "call memset with arguments prime , true and sizeof ( prime )",
      "code": "memset ( prime , true , sizeof ( prime ) ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for long = 2 while p * p < = n",
      "code": "for ( long long int p = 2 ; p * p <= n ; p ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if prime [ p ] = true",
      "code": "if ( prime [ p ] == true )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "for i = p * p to n inclusive incrementing by p , set prime [ i ] to false",
      "code": "for ( int i = p * p ; i <= n ; i += p ) prime [ i ] = false ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for p = 1 to n inclusive",
      "code": "for ( int p = 1 ; p <= n ; p ++ )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if prime [ p ] is true , print p and ' \\ n '",
      "code": "if ( prime [ p ] ) cout << p << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 18,
      "text": "long long integer method tiles with long long integer arguments m and n",
      "code": "long long int tiles ( long long int m , long long int n )",
      "indent": 0
    },
    {
      "line": 19,
      "text": "if m is greater than n , swap m and n",
      "code": "if ( m > n ) swap ( m , n ) ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if m % 2 = 1",
      "code": "if ( m % 2 )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if m = 1 , return n / 2",
      "code": "if ( m == 1 ) return n / 2 ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "return n * ( m / 2 ) + ( n / 2 )",
      "code": "return n * ( m / 2 ) + ( n / 2 ) ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 24,
      "text": "return n * ( m / 2 )",
      "code": "return n * ( m / 2 ) ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 27,
      "text": "create long longs int m and n",
      "code": "long long int m , n ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "read m and n",
      "code": "cin >> m >> n ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "print tiles ( m , n ) and ' \\ n '",
      "code": "cout << tiles ( m , n ) << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "return gcd ( b % a % a ) ;"
      ],
      "err_line": 5,
      "err_msg": "too few arguments to function ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘long long long’ is too long for GCC"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( p = 1 ; p <= n ; p ++ )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘p’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "cin >> m >> k ;"
      ],
      "err_line": 28,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "cout << tiles ( m , n ) ) << ' \\n ' ;"
      ],
      "err_line": 29,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        1,
        23
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23,
        10
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "else else",
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23,
        10,
        15
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "else else",
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "for ( p = 1 ; p <= n ; p ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23,
        10,
        4
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "else else",
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23,
        10,
        28
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "else else",
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "cin >> m >> k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23,
        15
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "else else",
        "for ( p = 1 ; p <= n ; p ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23,
        15,
        4
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "else else",
        "for ( p = 1 ; p <= n ; p ++ )",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23,
        15,
        28
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "else else",
        "for ( p = 1 ; p <= n ; p ++ )",
        "cin >> m >> k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23,
        4
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "else else",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23,
        4,
        28
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "else else",
        "else else",
        "cin >> m >> k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23,
        28
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "else else",
        "cin >> m >> k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        15
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "for ( p = 1 ; p <= n ; p ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        15,
        4
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "for ( p = 1 ; p <= n ; p ++ )",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        15,
        28
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "for ( p = 1 ; p <= n ; p ++ )",
        "cin >> m >> k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        4
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        4,
        28
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "else else",
        "cin >> m >> k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        28
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "cin >> m >> k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "for ( p = 1 ; p <= n ; p ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        15,
        4
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "for ( p = 1 ; p <= n ; p ++ )",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        15,
        4,
        28
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "for ( p = 1 ; p <= n ; p ++ )",
        "else else",
        "cin >> m >> k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        15,
        28
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "for ( p = 1 ; p <= n ; p ++ )",
        "cin >> m >> k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        4,
        28
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "else else",
        "cin >> m >> k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        28
      ],
      "mod_code": [
        "long long int gcd ( long long int a , long long int b ) ;",
        "cin >> m >> k ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        23,
        10
      ],
      "mod_code": [
        "else else",
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘long long long’ is too long for GCC"
    },
    {
      "mod_line": [
        23,
        10,
        15
      ],
      "mod_code": [
        "else else",
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "for ( p = 1 ; p <= n ; p ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘long long long’ is too long for GCC"
    },
    {
      "mod_line": [
        23,
        10,
        15,
        4
      ],
      "mod_code": [
        "else else",
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "for ( p = 1 ; p <= n ; p ++ )",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        10,
        15,
        28
      ],
      "mod_code": [
        "else else",
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "for ( p = 1 ; p <= n ; p ++ )",
        "cin >> m >> k ;"
      ],
      "err_line": 10,
      "err_msg": "‘long long long’ is too long for GCC"
    },
    {
      "mod_line": [
        23,
        10,
        4
      ],
      "mod_code": [
        "else else",
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        10,
        4,
        28
      ],
      "mod_code": [
        "else else",
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "else else",
        "cin >> m >> k ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        10,
        28
      ],
      "mod_code": [
        "else else",
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "cin >> m >> k ;"
      ],
      "err_line": 10,
      "err_msg": "‘long long long’ is too long for GCC"
    },
    {
      "mod_line": [
        23,
        15
      ],
      "mod_code": [
        "else else",
        "for ( p = 1 ; p <= n ; p ++ )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘p’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        15,
        4
      ],
      "mod_code": [
        "else else",
        "for ( p = 1 ; p <= n ; p ++ )",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        15,
        4,
        28
      ],
      "mod_code": [
        "else else",
        "for ( p = 1 ; p <= n ; p ++ )",
        "else else",
        "cin >> m >> k ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        15,
        28
      ],
      "mod_code": [
        "else else",
        "for ( p = 1 ; p <= n ; p ++ )",
        "cin >> m >> k ;"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘p’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        4
      ],
      "mod_code": [
        "else else",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        4,
        28
      ],
      "mod_code": [
        "else else",
        "else else",
        "cin >> m >> k ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        28
      ],
      "mod_code": [
        "else else",
        "cin >> m >> k ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "for ( p = 1 ; p <= n ; p ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘long long long’ is too long for GCC"
    },
    {
      "mod_line": [
        10,
        15,
        4
      ],
      "mod_code": [
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "for ( p = 1 ; p <= n ; p ++ )",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        15,
        4,
        28
      ],
      "mod_code": [
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "for ( p = 1 ; p <= n ; p ++ )",
        "else else",
        "cin >> m >> k ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        15,
        28
      ],
      "mod_code": [
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "for ( p = 1 ; p <= n ; p ++ )",
        "cin >> m >> k ;"
      ],
      "err_line": 10,
      "err_msg": "‘long long long’ is too long for GCC"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        4,
        28
      ],
      "mod_code": [
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "else else",
        "cin >> m >> k ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        28
      ],
      "mod_code": [
        "for ( long long long long p = 2 ; p * p <= n ; p ++ )",
        "cin >> m >> k ;"
      ],
      "err_line": 10,
      "err_msg": "‘long long long’ is too long for GCC"
    },
    {
      "mod_line": [
        15,
        4
      ],
      "mod_code": [
        "for ( p = 1 ; p <= n ; p ++ )",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        4,
        28
      ],
      "mod_code": [
        "for ( p = 1 ; p <= n ; p ++ )",
        "else else",
        "cin >> m >> k ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        28
      ],
      "mod_code": [
        "for ( p = 1 ; p <= n ; p ++ )",
        "cin >> m >> k ;"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘p’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        28
      ],
      "mod_code": [
        "else else",
        "cin >> m >> k ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}