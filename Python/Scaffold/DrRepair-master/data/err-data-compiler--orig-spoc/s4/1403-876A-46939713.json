{
  "meta": {
    "index": 1403,
    "hitid": "3M67TQBQQHIJ8CL9J2VY9908XT09AV",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "876A",
    "subid": "46939713"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "make ints n , a , b , and c",
      "code": "int n , a , b , c ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , a , b , and c",
      "code": "cin >> n >> a >> b >> c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set n to n - 1",
      "code": "n = n - 1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if n is equal to 0",
      "code": "if ( n == 0 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "print 0",
      "code": "cout << 0 << endl ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create integer m = min ( a , min ( b , c ) )",
      "code": "int m = min ( a , min ( b , c ) ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if m is equal to a",
      "code": "if ( m == a )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "output n * a",
      "code": "cout << n * a << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else if m is equal to b",
      "code": "else if ( m == b )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "output n * b",
      "code": "cout << n * b << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "otherwise",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "output min ( a , b ) + ( n - 1 ) * c",
      "code": "cout << min ( a , b ) + ( n - 1 ) * c << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        13,
        9,
        8
      ],
      "mod_code": [
        "cin >> n >> a >> b >> n ;",
        "else ;",
        "if ( m == ' a ' )",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        13,
        5,
        8
      ],
      "mod_code": [
        "cin >> n >> a >> b >> n ;",
        "else ;",
        "cout << 0 ;",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        13,
        11,
        8
      ],
      "mod_code": [
        "cin >> n >> a >> b >> n ;",
        "else ;",
        "else if ( m == ' b ' )",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        13,
        8
      ],
      "mod_code": [
        "cin >> n >> a >> b >> n ;",
        "else ;",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        9,
        5,
        8
      ],
      "mod_code": [
        "cin >> n >> a >> b >> n ;",
        "if ( m == ' a ' )",
        "cout << 0 ;",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        9,
        11,
        8
      ],
      "mod_code": [
        "cin >> n >> a >> b >> n ;",
        "if ( m == ' a ' )",
        "else if ( m == ' b ' )",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        9,
        8
      ],
      "mod_code": [
        "cin >> n >> a >> b >> n ;",
        "if ( m == ' a ' )",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        5,
        11,
        8
      ],
      "mod_code": [
        "cin >> n >> a >> b >> n ;",
        "cout << 0 ;",
        "else if ( m == ' b ' )",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        5,
        8
      ],
      "mod_code": [
        "cin >> n >> a >> b >> n ;",
        "cout << 0 ;",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        11,
        8
      ],
      "mod_code": [
        "cin >> n >> a >> b >> n ;",
        "else if ( m == ' b ' )",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "cin >> n >> a >> b >> n ;",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        13,
        9,
        5,
        8
      ],
      "mod_code": [
        "else ;",
        "if ( m == ' a ' )",
        "cout << 0 ;",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        13,
        9,
        11,
        8
      ],
      "mod_code": [
        "else ;",
        "if ( m == ' a ' )",
        "else if ( m == ' b ' )",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        13,
        9,
        8
      ],
      "mod_code": [
        "else ;",
        "if ( m == ' a ' )",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        13,
        5,
        11,
        8
      ],
      "mod_code": [
        "else ;",
        "cout << 0 ;",
        "else if ( m == ' b ' )",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        13,
        5,
        8
      ],
      "mod_code": [
        "else ;",
        "cout << 0 ;",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        13,
        11,
        8
      ],
      "mod_code": [
        "else ;",
        "else if ( m == ' b ' )",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        13,
        8
      ],
      "mod_code": [
        "else ;",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        9,
        5,
        11,
        8
      ],
      "mod_code": [
        "if ( m == ' a ' )",
        "cout << 0 ;",
        "else if ( m == ' b ' )",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        9,
        5,
        8
      ],
      "mod_code": [
        "if ( m == ' a ' )",
        "cout << 0 ;",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        9,
        11,
        8
      ],
      "mod_code": [
        "if ( m == ' a ' )",
        "else if ( m == ' b ' )",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "if ( m == ' a ' )",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        11,
        8
      ],
      "mod_code": [
        "cout << 0 ;",
        "else if ( m == ' b ' )",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "cout << 0 ;",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "else if ( m == ' b ' )",
        "int m = min ( a , min ( b , c ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    }
  ]
}