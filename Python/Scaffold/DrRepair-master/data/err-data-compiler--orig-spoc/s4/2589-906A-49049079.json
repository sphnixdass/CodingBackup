{
  "meta": {
    "index": 2589,
    "hitid": "36FFXPMST9I1PMXTRXO8NLI15N7HON",
    "workerid": "AIWEXPJAU66D9",
    "probid": "906A",
    "subid": "49049079"
  },
  "lines": [
    {
      "line": 0,
      "text": "create boolean arrays mark1 and mark2 with size 30",
      "code": "bool mark1 [ 30 ] , mark2 [ 30 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer variable with name n",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create new character variable k",
      "code": "char k ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create string s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "create new boolean ok with value false",
      "code": "bool ok = false ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "declare integer variable with name flag = 0",
      "code": "int flag = 0 ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "declare integer variable ans = 0",
      "code": "int ans = 0 ;",
      "indent": 0
    },
    {
      "line": 7,
      "text": "void function Do",
      "code": "void Do ( )",
      "indent": 0
    },
    {
      "line": 8,
      "text": "if ok is true , return",
      "code": "if ( ok ) return ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "declare new integer called cnt2 with value 0",
      "code": "int cnt2 = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i from 0 to ' z ' - ' a ' inclusive incrementing i",
      "code": "for ( int i = 0 ; i <= ' z ' - ' a ' ; ++ i )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if mark1 [ i ] is true , change ok to true , increment cnt2 and change flag to i",
      "code": "if ( mark1 [ i ] ) ok = true , cnt2 ++ , flag = i ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if cnt2 > 1 or cnt2 = 0 , assign false to ok",
      "code": "if ( cnt2 > 1 || cnt2 == 0 ) ok = false ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 15,
      "text": "set as much bytes , as mark1 takes , at the pointer mark1 to true",
      "code": "memset ( mark1 , true , sizeof mark1 ) ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "read standard input to n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i from 1 to n inclusive incrementing i",
      "code": "for ( int i = 1 ; i <= n ; ++ i )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "read from the input to k and s",
      "code": "cin >> k >> s ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if n = 0 , stop the loop",
      "code": "if ( n == 0 ) break ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "call method Do ( )",
      "code": "Do ( ) ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if k = 46",
      "code": "if ( k == 46 )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if ok is false",
      "code": "if ( ! ok )",
      "indent": 3
    },
    {
      "line": 23,
      "text": "for i from 0 to length of s exclusive ,",
      "code": "for ( int i = 0 ; i < s . size ( ) ; ++ i ) mark1 [ s [ i ] - ' a ' ] = false ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "if k = 33",
      "code": "if ( k == 33 )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if ok is false",
      "code": "if ( ! ok )",
      "indent": 3
    },
    {
      "line": 26,
      "text": "set first sizeof mark2 bytes at the pointer mark2 to false",
      "code": "memset ( mark2 , false , sizeof mark2 ) ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "for integer i = 0 to length of s exclusive ,",
      "code": "for ( int i = 0 ; i < s . size ( ) ; ++ i ) mark2 [ s [ i ] - ' a ' ] = true ;",
      "indent": 4
    },
    {
      "line": 28,
      "text": "in a for loop , change i from 0 to ' z ' - ' a ' inclusive , changing mark1 [ i ] to mark1 [ i ] on each loop iteration",
      "code": "for ( int i = 0 ; i <= ' z ' - ' a ' ; ++ i ) mark1 [ i ] = mark1 [ i ] && mark2 [ i ] ;",
      "indent": 4
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 30,
      "text": "if ok is true , increment ans",
      "code": "if ( ok ) ans ++ ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 32,
      "text": "if k is equal to 63",
      "code": "if ( k == 63 )",
      "indent": 2
    },
    {
      "line": 33,
      "text": "if ok is true and flag ! = s [ 0 ] - ' a ' , increment ans",
      "code": "if ( ok && flag != s [ 0 ] - ' a ' ) ans ++ ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "if n ! = 0 , set the value of mark1 [ s [ 0 ] - ' a ' ] to false",
      "code": "if ( n != 0 ) mark1 [ s [ 0 ] - ' a ' ] = false ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 37,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "void Do ( ) { }"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }"
      ],
      "err_line": 28,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool mark1 , mark2 [ 30 ] ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char a ;"
      ],
      "err_line": 18,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘std::__cxx11::string n’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int name = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "ans = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int cnt2 new 0 ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘new’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i <= ' z ' - ' a ' ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "Do ( ) ( ) ;"
      ],
      "err_line": 20,
      "err_msg": "void value not ignored as it ought to be"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] = mark1 [ i ] ; }"
      ],
      "err_line": 28,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "void Do ( ) { }",
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        23
      ],
      "mod_code": [
        "void Do ( ) { }",
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        23,
        27
      ],
      "mod_code": [
        "void Do ( ) { }",
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        23,
        28
      ],
      "mod_code": [
        "void Do ( ) { }",
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        23,
        37
      ],
      "mod_code": [
        "void Do ( ) { }",
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "cout << ans ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        27
      ],
      "mod_code": [
        "void Do ( ) { }",
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        27,
        28
      ],
      "mod_code": [
        "void Do ( ) { }",
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        27,
        37
      ],
      "mod_code": [
        "void Do ( ) { }",
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "cout << ans ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        28
      ],
      "mod_code": [
        "void Do ( ) { }",
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        28,
        37
      ],
      "mod_code": [
        "void Do ( ) { }",
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }",
        "cout << ans ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        37
      ],
      "mod_code": [
        "void Do ( ) { }",
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;",
        "cout << ans ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        23
      ],
      "mod_code": [
        "void Do ( ) { }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        23,
        27
      ],
      "mod_code": [
        "void Do ( ) { }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        23,
        27,
        28
      ],
      "mod_code": [
        "void Do ( ) { }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        23,
        27,
        37
      ],
      "mod_code": [
        "void Do ( ) { }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "cout << ans ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        23,
        28
      ],
      "mod_code": [
        "void Do ( ) { }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        23,
        28,
        37
      ],
      "mod_code": [
        "void Do ( ) { }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }",
        "cout << ans ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        23,
        37
      ],
      "mod_code": [
        "void Do ( ) { }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "cout << ans ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        27
      ],
      "mod_code": [
        "void Do ( ) { }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        27,
        28
      ],
      "mod_code": [
        "void Do ( ) { }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        27,
        28,
        37
      ],
      "mod_code": [
        "void Do ( ) { }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }",
        "cout << ans ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        27,
        37
      ],
      "mod_code": [
        "void Do ( ) { }",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "cout << ans ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        28
      ],
      "mod_code": [
        "void Do ( ) { }",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        28,
        37
      ],
      "mod_code": [
        "void Do ( ) { }",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }",
        "cout << ans ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        37
      ],
      "mod_code": [
        "void Do ( ) { }",
        "cout << ans ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        23
      ],
      "mod_code": [
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        23,
        27
      ],
      "mod_code": [
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        23,
        27,
        28
      ],
      "mod_code": [
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        23,
        27,
        37
      ],
      "mod_code": [
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "cout << ans ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        23,
        28
      ],
      "mod_code": [
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        23,
        28,
        37
      ],
      "mod_code": [
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }",
        "cout << ans ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        23,
        37
      ],
      "mod_code": [
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "cout << ans ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        27,
        28
      ],
      "mod_code": [
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }"
      ],
      "err_line": 28,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        27,
        28,
        37
      ],
      "mod_code": [
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }",
        "cout << ans ;"
      ],
      "err_line": 28,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        28
      ],
      "mod_code": [
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }"
      ],
      "err_line": 28,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        28,
        37
      ],
      "mod_code": [
        "if ( mark1 [ i ] ) ok = true , flag = true , flag = true ;",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }",
        "cout << ans ;"
      ],
      "err_line": 28,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        27
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        23,
        27,
        28
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        23,
        27,
        28,
        37
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }",
        "cout << ans ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        23,
        27,
        37
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "cout << ans ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        23,
        28
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        23,
        28,
        37
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }",
        "cout << ans ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        23,
        37
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "cout << ans ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27,
        28
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }"
      ],
      "err_line": 28,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        27,
        28,
        37
      ],
      "mod_code": [
        "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }",
        "cout << ans ;"
      ],
      "err_line": 28,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        28,
        37
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= ' z ' ; i ++ ) { mark1 [ i ] [ i ] [ i ] [ i ] = mark1 [ i ] ; }",
        "cout << ans ;"
      ],
      "err_line": 28,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    }
  ]
}