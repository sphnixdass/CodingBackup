{
  "meta": {
    "index": 2187,
    "hitid": "3UAU495MIIM6U83DRWV7607RZVAUO2",
    "workerid": "A1AYVATMT88U1W",
    "probid": "744A",
    "subid": "46691178"
  },
  "lines": [
    {
      "line": 0,
      "text": "v = vector of long integers of size 1100",
      "code": "vector < long long int > v [ 1100 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "visited = array of boolean values of length 1100",
      "code": "bool visited [ 1100 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let ans be a long integer with ans = 0",
      "code": "long long int ans = 0 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "let edges be a long integer with edges = 0",
      "code": "long long int edges = 0 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "let edge be a long integer with edge = 0",
      "code": "long long int edge = 0 ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "let dfs be a long integer function that accepts long integer values x , parentu",
      "code": "long long int dfs ( long long int x , long long int parent )",
      "indent": 0
    },
    {
      "line": 6,
      "text": "visited [ x ] is equal to true",
      "code": "visited [ x ] = true ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "let n be a long integer with n = 1",
      "code": "long long int n = 1 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "edges = edges + length of v [ x ]",
      "code": "edges += v [ x ] . size ( ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for long integer i = 0 to length of v [ x ] exclusive ,",
      "code": "for ( long long int i = 0 ; i < v [ x ] . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if not visited [ v [ x ] [ i ] ] , n = n + depth first search of v [ x ] [ i ] , x",
      "code": "if ( ! visited [ v [ x ] [ i ] ] ) n += dfs ( v [ x ] [ i ] , x ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "return the value of n",
      "code": "return n ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 15,
      "text": "let n , m , k , x , y be long integers",
      "code": "long long int n , m , k , x , y ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "read n , m , k",
      "code": "cin >> n >> m >> k ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "home = vector of long integers",
      "code": "vector < long long int > home ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for long integer i = 0 to k exclusive",
      "code": "for ( long long int i = 0 ; i < k ; i ++ )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "push to back x in home",
      "code": "home . push_back ( x ) ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "for long integer i = 0 to m exclusive",
      "code": "for ( long long int i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "read x , y",
      "code": "cin >> x >> y ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "push to back y in v [ x ]",
      "code": "v [ x ] . push_back ( y ) ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "push to back x in v [ y ]",
      "code": "v [ y ] . push_back ( x ) ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "let sum be a long integer with sum = 0",
      "code": "long long int sum = 0 ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "let num be a long integer with num = 0",
      "code": "long long int num = 0 ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "for long integer i = 0 to k exclusive",
      "code": "for ( long long int i = 0 ; i < k ; i ++ )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "if not visited [ home [ i ] ]",
      "code": "if ( ! visited [ home [ i ] ] )",
      "indent": 2
    },
    {
      "line": 31,
      "text": "edges is equal to 0",
      "code": "edges = 0 ;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "let node be a long integer with node is equal to depth first search of home [ i ] , 0",
      "code": "long long int node = dfs ( home [ i ] , 0 ) ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "edges is equal to edges / 2",
      "code": "edges /= 2 ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "increment edge by edges",
      "code": "edge += edges ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "num is equal to maximum of num and node",
      "code": "num = max ( num , node ) ;",
      "indent": 3
    },
    {
      "line": 36,
      "text": "ans is equal to ans + ( ( node - 1 ) * ( node ) ) / 2 - edges",
      "code": "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges ;",
      "indent": 3
    },
    {
      "line": 37,
      "text": "increment sum by node",
      "code": "sum += node ;",
      "indent": 3
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 40,
      "text": "ans is equal to ans + ( n - sum ) * num",
      "code": "ans += ( n - sum ) * num ;",
      "indent": 1
    },
    {
      "line": 41,
      "text": "ans is equal to ans + ( ( n - sum - 1 ) * ( n - sum ) ) / 2 - ( m - edge )",
      "code": "ans += ( ( n - sum - 1 ) * ( n - sum ) ) / 2 - ( m - edge ) ;",
      "indent": 1
    },
    {
      "line": 42,
      "text": "print ans and newline",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘length’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘depth’ was not declared in this scope"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "long long node = depth ( home [ i ] , 0 ) ;"
      ],
      "err_line": 32,
      "err_msg": "‘depth’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool visited [ 1100 1100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "long long let = 0 ;"
      ],
      "err_line": 34,
      "err_msg": "‘edge’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "long long dfs ( long long x , long long parentu ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "edges += v [ x ] . length ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘length’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( long long i = 0 ; i < v [ x ] . length ( ) ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘length’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( ! visited [ v [ x ] [ i ] ] ) { n += depth ( v [ x ] [ i ] , x ) ; }"
      ],
      "err_line": 10,
      "err_msg": "‘depth’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "home . push_back ( home ) ;"
      ],
      "err_line": 20,
      "err_msg": "no matching function for call to ‘std::vector<long long int>::push_back(std::vector<long long int>&)’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "v [ x ] . push ( y ) ;"
      ],
      "err_line": 24,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "v [ y ] . push ( x ) ;"
      ],
      "err_line": 25,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "if ( ! visited [ i [ i ] ] )"
      ],
      "err_line": 30,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "long long node = home ;"
      ],
      "err_line": 32,
      "err_msg": "cannot convert ‘std::vector<long long int>’ to ‘long long int’ in initialization"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "ans += ( ( n - sum - 1 ) * ( n - sum ) ) / 2 - ( m - edge ) ) ;"
      ],
      "err_line": 41,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )",
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘length’"
    },
    {
      "mod_line": [
        9,
        10,
        32
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )",
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;",
        "long long node = depth ( home [ i ] , 0 ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘length’"
    },
    {
      "mod_line": [
        9,
        10,
        32,
        36
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )",
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;",
        "long long node = depth ( home [ i ] , 0 ) ;",
        "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges - edges ;"
      ],
      "err_line": 9,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘length’"
    },
    {
      "mod_line": [
        9,
        10,
        32,
        1
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )",
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;",
        "long long node = depth ( home [ i ] , 0 ) ;",
        "bool visited [ 1100 1100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        10,
        36
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )",
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;",
        "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges - edges ;"
      ],
      "err_line": 9,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘length’"
    },
    {
      "mod_line": [
        9,
        10,
        36,
        1
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )",
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;",
        "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges - edges ;",
        "bool visited [ 1100 1100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        10,
        36,
        32
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )",
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;",
        "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges - edges ;",
        "long long node = home ;"
      ],
      "err_line": 9,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘length’"
    },
    {
      "mod_line": [
        9,
        10,
        1
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )",
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;",
        "bool visited [ 1100 1100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        10,
        1,
        32
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )",
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;",
        "bool visited [ 1100 1100 ] ;",
        "long long node = home ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        10,
        32
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )",
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;",
        "long long node = home ;"
      ],
      "err_line": 9,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘length’"
    },
    {
      "mod_line": [
        9,
        32
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )",
        "long long node = depth ( home [ i ] , 0 ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘length’"
    },
    {
      "mod_line": [
        9,
        32,
        36
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )",
        "long long node = depth ( home [ i ] , 0 ) ;",
        "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges - edges ;"
      ],
      "err_line": 9,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘length’"
    },
    {
      "mod_line": [
        9,
        32,
        36,
        1
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )",
        "long long node = depth ( home [ i ] , 0 ) ;",
        "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges - edges ;",
        "bool visited [ 1100 1100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        32,
        1
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )",
        "long long node = depth ( home [ i ] , 0 ) ;",
        "bool visited [ 1100 1100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        36
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )",
        "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges - edges ;"
      ],
      "err_line": 9,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘length’"
    },
    {
      "mod_line": [
        9,
        36,
        1
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )",
        "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges - edges ;",
        "bool visited [ 1100 1100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        36,
        1,
        32
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )",
        "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges - edges ;",
        "bool visited [ 1100 1100 ] ;",
        "long long node = home ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        36,
        32
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )",
        "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges - edges ;",
        "long long node = home ;"
      ],
      "err_line": 9,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘length’"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )",
        "bool visited [ 1100 1100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        1,
        32
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )",
        "bool visited [ 1100 1100 ] ;",
        "long long node = home ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        32
      ],
      "mod_code": [
        "for ( long long int i = 0 ; i < v [ x ] . length ( ) ; i ++ )",
        "long long node = home ;"
      ],
      "err_line": 9,
      "err_msg": "‘class std::vector<long long int>’ has no member named ‘length’"
    },
    {
      "mod_line": [
        10,
        32
      ],
      "mod_code": [
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;",
        "long long node = depth ( home [ i ] , 0 ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘depth’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        32,
        36
      ],
      "mod_code": [
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;",
        "long long node = depth ( home [ i ] , 0 ) ;",
        "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges - edges ;"
      ],
      "err_line": 10,
      "err_msg": "‘depth’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        32,
        36,
        1
      ],
      "mod_code": [
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;",
        "long long node = depth ( home [ i ] , 0 ) ;",
        "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges - edges ;",
        "bool visited [ 1100 1100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        32,
        1
      ],
      "mod_code": [
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;",
        "long long node = depth ( home [ i ] , 0 ) ;",
        "bool visited [ 1100 1100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        36
      ],
      "mod_code": [
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;",
        "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges - edges ;"
      ],
      "err_line": 10,
      "err_msg": "‘depth’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        36,
        1
      ],
      "mod_code": [
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;",
        "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges - edges ;",
        "bool visited [ 1100 1100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        36,
        1,
        32
      ],
      "mod_code": [
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;",
        "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges - edges ;",
        "bool visited [ 1100 1100 ] ;",
        "long long node = home ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        36,
        32
      ],
      "mod_code": [
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;",
        "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges - edges ;",
        "long long node = home ;"
      ],
      "err_line": 10,
      "err_msg": "‘depth’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;",
        "bool visited [ 1100 1100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        1,
        32
      ],
      "mod_code": [
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;",
        "bool visited [ 1100 1100 ] ;",
        "long long node = home ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        32
      ],
      "mod_code": [
        "if ( ! visited [ v [ x ] [ i ] ] ) n += depth ( v [ x ] [ i ] , x ) ;",
        "long long node = home ;"
      ],
      "err_line": 10,
      "err_msg": "‘depth’ was not declared in this scope"
    },
    {
      "mod_line": [
        32,
        36
      ],
      "mod_code": [
        "long long node = depth ( home [ i ] , 0 ) ;",
        "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges - edges ;"
      ],
      "err_line": 32,
      "err_msg": "‘depth’ was not declared in this scope"
    },
    {
      "mod_line": [
        32,
        36,
        1
      ],
      "mod_code": [
        "long long node = depth ( home [ i ] , 0 ) ;",
        "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges - edges ;",
        "bool visited [ 1100 1100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        32,
        1
      ],
      "mod_code": [
        "long long node = depth ( home [ i ] , 0 ) ;",
        "bool visited [ 1100 1100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        36,
        1
      ],
      "mod_code": [
        "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges - edges ;",
        "bool visited [ 1100 1100 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        36,
        1,
        32
      ],
      "mod_code": [
        "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges - edges ;",
        "bool visited [ 1100 1100 ] ;",
        "long long node = home ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        36,
        32
      ],
      "mod_code": [
        "ans += ( ( node - 1 ) * ( node ) ) / 2 - edges - edges ;",
        "long long node = home ;"
      ],
      "err_line": 32,
      "err_msg": "cannot convert ‘std::vector<long long int>’ to ‘long long int’ in initialization"
    },
    {
      "mod_line": [
        1,
        32
      ],
      "mod_code": [
        "bool visited [ 1100 1100 ] ;",
        "long long node = home ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    }
  ]
}