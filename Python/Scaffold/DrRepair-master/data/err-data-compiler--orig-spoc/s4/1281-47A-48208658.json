{
  "meta": {
    "index": 1281,
    "hitid": "3IH9TRB0FBTGPP1CRD8IB168BN0I1D",
    "workerid": "A3GEA5LU87T3E5",
    "probid": "47A",
    "subid": "48208658"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "arr = array of boolean of length 500",
      "code": "bool arr [ 505 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integer tambah = 1",
      "code": "int tambah = 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for ( create integer i = 0 to 500 ) set arr [ i ] = 0",
      "code": "for ( int i = 0 ; i <= 500 ; i ++ ) { arr [ i ] = 0 ; }",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for ( i = 1 to i < = 500 set i = i + tambah ) execute",
      "code": "for ( int i = 1 ; i <= 500 ; i += tambah )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set arr [ i ] to 1",
      "code": "arr [ i ] = 1 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increase tambah by 1",
      "code": "tambah ++ ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if ( arr [ n ] is not zero )",
      "code": "if ( arr [ n ] )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print out YES",
      "code": "cout << \" YES\\n \" ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "Print out NO",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool arr [ 500 500 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "tambah = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘tambah’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) { i += tambah ; }"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( arr [ n ] != zero )"
      ],
      "err_line": 10,
      "err_msg": "‘zero’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cout << out << \" \\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "‘out’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "if ( arr [ n ] != ' zero ' )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        10,
        1
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "if ( arr [ n ] != ' zero ' )",
        "bool arr [ 500 500 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        10,
        1,
        2
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "if ( arr [ n ] != ' zero ' )",
        "bool arr [ 500 500 ] ;",
        "tambah = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        10,
        1,
        13
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "if ( arr [ n ] != ' zero ' )",
        "bool arr [ 500 500 ] ;",
        "cout << out << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        10,
        1,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "if ( arr [ n ] != ' zero ' )",
        "bool arr [ 500 500 ] ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        10,
        2
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "if ( arr [ n ] != ' zero ' )",
        "tambah = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘tambah’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        2,
        13
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "if ( arr [ n ] != ' zero ' )",
        "tambah = 1 ;",
        "cout << out << \" \\n \" ;"
      ],
      "err_line": 2,
      "err_msg": "‘tambah’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        2,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "if ( arr [ n ] != ' zero ' )",
        "tambah = 1 ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "‘tambah’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        13
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "if ( arr [ n ] != ' zero ' )",
        "cout << out << \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        10,
        13,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "if ( arr [ n ] != ' zero ' )",
        "cout << out << \" \\n \" ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        10,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "if ( arr [ n ] != ' zero ' )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "bool arr [ 500 500 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        1,
        2
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "bool arr [ 500 500 ] ;",
        "tambah = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        1,
        2,
        13
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "bool arr [ 500 500 ] ;",
        "tambah = 1 ;",
        "cout << out << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        1,
        2,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "bool arr [ 500 500 ] ;",
        "tambah = 1 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        1,
        13
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "bool arr [ 500 500 ] ;",
        "cout << out << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        1,
        13,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "bool arr [ 500 500 ] ;",
        "cout << out << \" \\n \" ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        1,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "bool arr [ 500 500 ] ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "tambah = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘tambah’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        2,
        13
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "tambah = 1 ;",
        "cout << out << \" \\n \" ;"
      ],
      "err_line": 2,
      "err_msg": "‘tambah’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        2,
        13,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "tambah = 1 ;",
        "cout << out << \" \\n \" ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "‘tambah’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        2,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "tambah = 1 ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "‘tambah’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "cout << out << \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        13,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "cout << out << \" \\n \" ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= 500 ; i += tambah ) i += tambah ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "if ( arr [ n ] != ' zero ' )",
        "bool arr [ 500 500 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        1,
        2
      ],
      "mod_code": [
        "if ( arr [ n ] != ' zero ' )",
        "bool arr [ 500 500 ] ;",
        "tambah = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        1,
        2,
        13
      ],
      "mod_code": [
        "if ( arr [ n ] != ' zero ' )",
        "bool arr [ 500 500 ] ;",
        "tambah = 1 ;",
        "cout << out << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        1,
        2,
        12
      ],
      "mod_code": [
        "if ( arr [ n ] != ' zero ' )",
        "bool arr [ 500 500 ] ;",
        "tambah = 1 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        1,
        13
      ],
      "mod_code": [
        "if ( arr [ n ] != ' zero ' )",
        "bool arr [ 500 500 ] ;",
        "cout << out << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        1,
        13,
        12
      ],
      "mod_code": [
        "if ( arr [ n ] != ' zero ' )",
        "bool arr [ 500 500 ] ;",
        "cout << out << \" \\n \" ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        1,
        12
      ],
      "mod_code": [
        "if ( arr [ n ] != ' zero ' )",
        "bool arr [ 500 500 ] ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "if ( arr [ n ] != ' zero ' )",
        "tambah = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘tambah’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        2,
        13
      ],
      "mod_code": [
        "if ( arr [ n ] != ' zero ' )",
        "tambah = 1 ;",
        "cout << out << \" \\n \" ;"
      ],
      "err_line": 2,
      "err_msg": "‘tambah’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        2,
        13,
        12
      ],
      "mod_code": [
        "if ( arr [ n ] != ' zero ' )",
        "tambah = 1 ;",
        "cout << out << \" \\n \" ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "‘tambah’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        2,
        12
      ],
      "mod_code": [
        "if ( arr [ n ] != ' zero ' )",
        "tambah = 1 ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "‘tambah’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "if ( arr [ n ] != ' zero ' )",
        "cout << out << \" \\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "‘out’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        13,
        12
      ],
      "mod_code": [
        "if ( arr [ n ] != ' zero ' )",
        "cout << out << \" \\n \" ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "if ( arr [ n ] != ' zero ' )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "bool arr [ 500 500 ] ;",
        "tambah = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        2,
        13
      ],
      "mod_code": [
        "bool arr [ 500 500 ] ;",
        "tambah = 1 ;",
        "cout << out << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        2,
        13,
        12
      ],
      "mod_code": [
        "bool arr [ 500 500 ] ;",
        "tambah = 1 ;",
        "cout << out << \" \\n \" ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        2,
        12
      ],
      "mod_code": [
        "bool arr [ 500 500 ] ;",
        "tambah = 1 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "bool arr [ 500 500 ] ;",
        "cout << out << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        13,
        12
      ],
      "mod_code": [
        "bool arr [ 500 500 ] ;",
        "cout << out << \" \\n \" ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "bool arr [ 500 500 ] ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "tambah = 1 ;",
        "cout << out << \" \\n \" ;"
      ],
      "err_line": 2,
      "err_msg": "‘tambah’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        13,
        12
      ],
      "mod_code": [
        "tambah = 1 ;",
        "cout << out << \" \\n \" ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "‘tambah’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "tambah = 1 ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "‘tambah’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        12
      ],
      "mod_code": [
        "cout << out << \" \\n \" ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}