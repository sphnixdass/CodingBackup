{
  "meta": {
    "index": 927,
    "hitid": "32204AGAAB6DX9GV3EB0IC9ZE1GHG0",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "275A",
    "subid": "48905735"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int t and int arrays a of size 3 containing an array of size 3 and b of size 3 containing an array of size 3",
      "code": "int a [ 3 ] [ 3 ] , t , b [ 3 ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "Assign 1 from ( int * ) a to ( int * ) a + sizeof ( a ) / sizeof ( int )",
      "code": "fill ( ( int * ) a , ( int * ) a + sizeof ( a ) / sizeof ( int ) , 1 ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for j = 0 to 3 exclusive",
      "code": "for ( int j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "read t",
      "code": "cin >> t ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "set b [ i ] [ j ] to t",
      "code": "b [ i ] [ j ] = t ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "if b [ i ] [ j ] modulo 2 is not 0",
      "code": "if ( b [ i ] [ j ] % 2 != 0 )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "if i is equal to 0 or i is equal to 2 and if j is equal to 0 or j is equal to 2",
      "code": "if ( ( i == 0 || i == 2 ) && ( j == 0 || j == 2 ) )",
      "indent": 4
    },
    {
      "line": 9,
      "text": "set a [ i ] [ j ] to abs ( 1 - a [ i ] [ j ] )",
      "code": "a [ i ] [ j ] = abs ( 1 - a [ i ] [ j ] ) ;",
      "indent": 5
    },
    {
      "line": 10,
      "text": "set a [ i ] [ abs ( j - 1 ) ] to abs ( 1 - a [ i ] [ abs ( j - 1 ) ] )",
      "code": "a [ i ] [ abs ( j - 1 ) ] = abs ( 1 - a [ i ] [ abs ( j - 1 ) ] ) ;",
      "indent": 5
    },
    {
      "line": 11,
      "text": "set a [ abs ( i - 1 ) ] [ j ] to abs ( 1 - a [ abs ( i - 1 ) ] [ j ] )",
      "code": "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ j ] ) ;",
      "indent": 5
    },
    {
      "line": 12,
      "text": "else if i is equal to 0 or i is equal to 2 is and if j is equal to 1",
      "code": "else if ( ( i == 0 || i == 2 ) && ( j == 1 ) )",
      "indent": 4
    },
    {
      "line": 13,
      "text": "set a [ i ] [ j ] to abs ( 1 - a [ i ] [ j ] )",
      "code": "a [ i ] [ j ] = abs ( 1 - a [ i ] [ j ] ) ;",
      "indent": 5
    },
    {
      "line": 14,
      "text": "set a [ i ] [ abs ( j - 1 ) ] to abs ( 1 - a [ i ] [ abs ( j - 1 ) ]",
      "code": "a [ i ] [ abs ( j - 1 ) ] = abs ( 1 - a [ i ] [ abs ( j - 1 ) ] ) ;",
      "indent": 5
    },
    {
      "line": 15,
      "text": "set a [ i ] [ abs ( j + 1 ) ] to abs ( 1 - a [ i ] [ abs ( j + 1 ) ] )",
      "code": "a [ i ] [ abs ( j + 1 ) ] = abs ( 1 - a [ i ] [ abs ( j + 1 ) ] ) ;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "set a [ abs ( i - 1 ) ] [ j ] to abs ( 1 - a [ abs ( i - 1 ) ] [ ( j ) ] )",
      "code": "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j ) ] ) ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "else if i is equal to 1 and if j is equal to 0 or j is equal to 2",
      "code": "else if ( ( i == 1 ) && ( j == 0 || j == 2 ) )",
      "indent": 4
    },
    {
      "line": 18,
      "text": "set a [ i ] [ j ] to abs ( 1 - a [ i ] [ j ] )",
      "code": "a [ i ] [ j ] = abs ( 1 - a [ i ] [ j ] ) ;",
      "indent": 5
    },
    {
      "line": 19,
      "text": "set a [ i ] [ abs ( j - 1 ) ] to abs ( 1 - a [ i ] [ abs ( j - 1 ) ] )",
      "code": "a [ i ] [ abs ( j - 1 ) ] = abs ( 1 - a [ i ] [ abs ( j - 1 ) ] ) ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "set a [ abs ( i - 1 ) ] [ j ] to abs ( 1 - a [ abs ( i - 1 ) ] [ ( j ) ] )",
      "code": "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j ) ] ) ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "set a [ abs ( i + 1 ) ] [ j ] to abs ( 1 - a [ abs ( i + 1 ) ] [ ( j ) ] )",
      "code": "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j ) ] ) ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "else if i is equal to 1 and j is equal to 1",
      "code": "else if ( i == 1 && j == 1 )",
      "indent": 4
    },
    {
      "line": 23,
      "text": "set a [ i ] [ j ] to abs ( 1 - a [ i ] [ j ] )",
      "code": "a [ i ] [ j ] = abs ( 1 - a [ i ] [ j ] ) ;",
      "indent": 5
    },
    {
      "line": 24,
      "text": "set a [ 0 ] [ 1 ] to 1 - a [ 0 ] [ 1 ]",
      "code": "a [ 0 ] [ 1 ] = 1 - a [ 0 ] [ 1 ] ;",
      "indent": 5
    },
    {
      "line": 25,
      "text": "set a [ 2 ] [ 1 ] to 1 - a [ 2 ] [ 1 ]",
      "code": "a [ 2 ] [ 1 ] = 1 - a [ 2 ] [ 1 ] ;",
      "indent": 5
    },
    {
      "line": 26,
      "text": "set a [ 1 ] [ 0 ] to 1 - a [ 1 ] [ 0 ]",
      "code": "a [ 1 ] [ 0 ] = 1 - a [ 1 ] [ 0 ] ;",
      "indent": 5
    },
    {
      "line": 27,
      "text": "set a [ 1 ] [ 2 ] to 1 - a [ 1 ] [ 2 ]",
      "code": "a [ 1 ] [ 2 ] = 1 - a [ 1 ] [ 2 ] ;",
      "indent": 5
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "for x = 0 to 3 exclusive",
      "code": "for ( int x = 0 ; x < 3 ; x ++ )",
      "indent": 1
    },
    {
      "line": 33,
      "text": "print the first 3 indices of a [ x ]",
      "code": "for ( int y = 0 ; y < 3 ; y ++ ) { cout << a [ x ] [ y ] ; }",
      "indent": 2
    },
    {
      "line": 34,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 33,
      "err_msg": "request for member ‘first’ in ‘a[x]’, which is of non-class type ‘int [3]’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int t , a [ 3 ] , b [ 3 ] , b [ 3 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int a = ( int ) a * a ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "b [ i ] [ j ] ] = t ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ i - 1 ) ] [ j ] = abs ( 1 ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "a [ i ] [ abs ( j + 1 ] ] = abs ( 1 - a [ i ] [ abs ( j + 1 ) ] ) ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ i - 1 ) ] [ ( j - 1 ) ] ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ i - 1 ) ] [ ( j - 1 ) ] ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ i + 1 ) ] [ ( j + 1 ) ] ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "for ( x = 0 ; x < 3 ; x ++ )"
      ],
      "err_line": 32,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "cout << a [ x ] . substr ( 3 ) ;"
      ],
      "err_line": 33,
      "err_msg": "request for member ‘substr’ in ‘a[x]’, which is of non-class type ‘int [3]’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        2,
        8
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "if ( i == 0 || i == 0 && j == 0 )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "if ( i == 0 || i == 0 && j == 0 )",
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "if ( i == 0 || i == 0 && j == 0 )",
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        33
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "if ( i == 0 || i == 0 && j == 0 )",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        2,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        2,
        20,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;",
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        2,
        20,
        33
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        2,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        2,
        21,
        33
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        2,
        33
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i == 0 || i == 0 && j == 0 )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        8,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i == 0 || i == 0 && j == 0 )",
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        8,
        20,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i == 0 || i == 0 && j == 0 )",
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;",
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        8,
        20,
        33
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i == 0 || i == 0 && j == 0 )",
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        8,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i == 0 || i == 0 && j == 0 )",
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        8,
        21,
        33
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i == 0 || i == 0 && j == 0 )",
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        8,
        33
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i == 0 || i == 0 && j == 0 )",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        20,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;",
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        20,
        21,
        33
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;",
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        20,
        33
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        21,
        33
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        33
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "if ( i == 0 || i == 0 && j == 0 )"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        2,
        8,
        20
      ],
      "mod_code": [
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "if ( i == 0 || i == 0 && j == 0 )",
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        2,
        8,
        20,
        21
      ],
      "mod_code": [
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "if ( i == 0 || i == 0 && j == 0 )",
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;",
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        2,
        8,
        20,
        33
      ],
      "mod_code": [
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "if ( i == 0 || i == 0 && j == 0 )",
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        2,
        8,
        21
      ],
      "mod_code": [
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "if ( i == 0 || i == 0 && j == 0 )",
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        2,
        8,
        21,
        33
      ],
      "mod_code": [
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "if ( i == 0 || i == 0 && j == 0 )",
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        2,
        8,
        33
      ],
      "mod_code": [
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "if ( i == 0 || i == 0 && j == 0 )",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        2,
        20
      ],
      "mod_code": [
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        2,
        20,
        21
      ],
      "mod_code": [
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;",
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        2,
        20,
        21,
        33
      ],
      "mod_code": [
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;",
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        2,
        20,
        33
      ],
      "mod_code": [
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        2,
        21
      ],
      "mod_code": [
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        2,
        21,
        33
      ],
      "mod_code": [
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        2,
        33
      ],
      "mod_code": [
        "int a = ( int ) a * a + sizeof ( a ) / a ( a ) / sizeof ( a ) ;",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        8,
        20,
        21,
        33
      ],
      "mod_code": [
        "if ( i == 0 || i == 0 && j == 0 )",
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;",
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 33,
      "err_msg": "request for member ‘first’ in ‘a[x]’, which is of non-class type ‘int [3]’"
    },
    {
      "mod_line": [
        8,
        20,
        33
      ],
      "mod_code": [
        "if ( i == 0 || i == 0 && j == 0 )",
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 33,
      "err_msg": "request for member ‘first’ in ‘a[x]’, which is of non-class type ‘int [3]’"
    },
    {
      "mod_line": [
        8,
        21,
        33
      ],
      "mod_code": [
        "if ( i == 0 || i == 0 && j == 0 )",
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 33,
      "err_msg": "request for member ‘first’ in ‘a[x]’, which is of non-class type ‘int [3]’"
    },
    {
      "mod_line": [
        8,
        33
      ],
      "mod_code": [
        "if ( i == 0 || i == 0 && j == 0 )",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 33,
      "err_msg": "request for member ‘first’ in ‘a[x]’, which is of non-class type ‘int [3]’"
    },
    {
      "mod_line": [
        20,
        21,
        33
      ],
      "mod_code": [
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;",
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 33,
      "err_msg": "request for member ‘first’ in ‘a[x]’, which is of non-class type ‘int [3]’"
    },
    {
      "mod_line": [
        20,
        33
      ],
      "mod_code": [
        "a [ abs ( i - 1 ) ] [ j ] = abs ( 1 - a [ abs ( i - 1 ) ] [ ( j - 1 ) ] ) ;",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 33,
      "err_msg": "request for member ‘first’ in ‘a[x]’, which is of non-class type ‘int [3]’"
    },
    {
      "mod_line": [
        21,
        33
      ],
      "mod_code": [
        "a [ abs ( i + 1 ) ] [ j ] = abs ( 1 - a [ abs ( i + 1 ) ] [ ( j + 1 ) ] ) ;",
        "cout << a [ x ] . first << endl ;"
      ],
      "err_line": 33,
      "err_msg": "request for member ‘first’ in ‘a[x]’, which is of non-class type ‘int [3]’"
    }
  ]
}