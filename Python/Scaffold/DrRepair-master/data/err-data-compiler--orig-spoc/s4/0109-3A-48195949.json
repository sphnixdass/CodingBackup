{
  "meta": {
    "index": 109,
    "hitid": "3URJ6VVYUPH7DA9YCQ4PTW9XZG9O4R",
    "workerid": "AIWEXPJAU66D9",
    "probid": "3A",
    "subid": "48195949"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let s and d be strings",
      "code": "string s , d ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s and d",
      "code": "cin >> s >> d ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "res = array of strings of length 64",
      "code": "string res [ 64 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare integer variable i",
      "code": "int i ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "char c = s at index 0",
      "code": "char c = s [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "int r = s [ 1 ] casted to int ;",
      "code": "int r = ( int ) s [ 1 ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "create integer ctr with value 0",
      "code": "int ctr = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "char c = d at index 0",
      "code": "char dc = d [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "int dr = d [ 1 ] casted to int ;",
      "code": "int dr = ( int ) d [ 1 ] ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "i = 0",
      "code": "i = 0 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "while c ! = dc or r ! = dr",
      "code": "while ( c != dc || r != dr )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if c is less than dc",
      "code": "if ( c < dc )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if r is equal to dr",
      "code": "if ( r == dr )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "set res [ i ] to \" R \"",
      "code": "res [ i ] = \" R \" ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "else if r is greater than dr",
      "code": "else if ( r > dr )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "set res [ i ] to \" RD \"",
      "code": "res [ i ] = \" RD \" ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "decrement r",
      "code": "r -- ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "else if r is less than dr",
      "code": "else if ( r < dr )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "set res [ i ] to \" RU \"",
      "code": "res [ i ] = \" RU \" ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "increase r",
      "code": "r ++ ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 22,
      "text": "c = c + 1 casted to char",
      "code": "c = ( char ) ( c + 1 ) ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "else if c is greater than dc",
      "code": "else if ( c > dc )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "if r is equal to dr",
      "code": "if ( r == dr )",
      "indent": 3
    },
    {
      "line": 25,
      "text": "set res [ i ] to \" L \"",
      "code": "res [ i ] = \" L \" ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "else if r is greater than dr",
      "code": "else if ( r > dr )",
      "indent": 3
    },
    {
      "line": 27,
      "text": "set res [ i ] to \" LD \"",
      "code": "res [ i ] = \" LD \" ;",
      "indent": 4
    },
    {
      "line": 28,
      "text": "decrement r",
      "code": "r -- ;",
      "indent": 4
    },
    {
      "line": 29,
      "text": "else if r is less than dr",
      "code": "else if ( r < dr )",
      "indent": 3
    },
    {
      "line": 30,
      "text": "set res [ i ] to \" LU \"",
      "code": "res [ i ] = \" LU \" ;",
      "indent": 4
    },
    {
      "line": 31,
      "text": "increase r by one",
      "code": "r ++ ;",
      "indent": 4
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 33,
      "text": "c = c + 1 casted to char",
      "code": "c = ( char ) ( c - 1 ) ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "else if c is equal to dc",
      "code": "else if ( c == dc )",
      "indent": 2
    },
    {
      "line": 35,
      "text": "if r is greater than dr",
      "code": "if ( r > dr )",
      "indent": 3
    },
    {
      "line": 36,
      "text": "set res [ i ] to \" D \"",
      "code": "res [ i ] = \" D \" ;",
      "indent": 4
    },
    {
      "line": 37,
      "text": "decrease r by one",
      "code": "r -- ;",
      "indent": 4
    },
    {
      "line": 38,
      "text": "else if r is less than dr",
      "code": "else if ( r < dr )",
      "indent": 3
    },
    {
      "line": 39,
      "text": "set res [ i ] to \" U \"",
      "code": "res [ i ] = \" U \" ;",
      "indent": 4
    },
    {
      "line": 40,
      "text": "increment r",
      "code": "r ++ ;",
      "indent": 4
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 43,
      "text": "increase ctr by one",
      "code": "ctr ++ ;",
      "indent": 2
    },
    {
      "line": 44,
      "text": "increase i",
      "code": "i ++ ;",
      "indent": 2
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 46,
      "text": "print ctr and a new line",
      "code": "cout << ctr << endl ;",
      "indent": 1
    },
    {
      "line": 47,
      "text": "for i = 0 to ctr exclusive print res [ i ] and a new line",
      "code": "for ( i = 0 ; i < ctr ; i ++ ) cout << res [ i ] << endl ;",
      "indent": 1
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "char c = d [ 0 ] ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int dr = int ( d [ 1 ] ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s , d ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> s >> k ;"
      ],
      "err_line": 2,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int n ;"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "char c = s = s [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int r = int ( s [ 1 ] ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int ctr create ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "char c = d = d [ 0 ] ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int i = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "res [ i ] = ' R \" ;"
      ],
      "err_line": 14,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "res [ i ] = ' RU \" ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "else if ( c > n )"
      ],
      "err_line": 23,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "res [ i ] = ' L \" ;"
      ],
      "err_line": 25,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "res [ i ] = ' D \" ;"
      ],
      "err_line": 36,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "res [ i ] = ' U \" ;"
      ],
      "err_line": 39,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "char c = d [ 0 ] ;",
        "int dr = int ( d [ 1 ] ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        8,
        9,
        22
      ],
      "mod_code": [
        "char c = d [ 0 ] ;",
        "int dr = int ( d [ 1 ] ;",
        "char c = c + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        8,
        9,
        22,
        33
      ],
      "mod_code": [
        "char c = d [ 0 ] ;",
        "int dr = int ( d [ 1 ] ;",
        "char c = c + 1 ;",
        "char c = c + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        8,
        9,
        22,
        5
      ],
      "mod_code": [
        "char c = d [ 0 ] ;",
        "int dr = int ( d [ 1 ] ;",
        "char c = c + 1 ;",
        "char c = s = s [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        8,
        9,
        33
      ],
      "mod_code": [
        "char c = d [ 0 ] ;",
        "int dr = int ( d [ 1 ] ;",
        "char c = c + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        8,
        9,
        33,
        5
      ],
      "mod_code": [
        "char c = d [ 0 ] ;",
        "int dr = int ( d [ 1 ] ;",
        "char c = c + 1 ;",
        "char c = s = s [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        8,
        9,
        33,
        22
      ],
      "mod_code": [
        "char c = d [ 0 ] ;",
        "int dr = int ( d [ 1 ] ;",
        "char c = c + 1 ;",
        "char c = ( char ) c + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        8,
        9,
        5
      ],
      "mod_code": [
        "char c = d [ 0 ] ;",
        "int dr = int ( d [ 1 ] ;",
        "char c = s = s [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        8,
        9,
        5,
        22
      ],
      "mod_code": [
        "char c = d [ 0 ] ;",
        "int dr = int ( d [ 1 ] ;",
        "char c = s = s [ 0 ] ;",
        "char c = ( char ) c + 1 ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        8,
        9,
        22
      ],
      "mod_code": [
        "char c = d [ 0 ] ;",
        "int dr = int ( d [ 1 ] ;",
        "char c = ( char ) c + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        8,
        22
      ],
      "mod_code": [
        "char c = d [ 0 ] ;",
        "char c = c + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        8,
        22,
        33
      ],
      "mod_code": [
        "char c = d [ 0 ] ;",
        "char c = c + 1 ;",
        "char c = c + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        8,
        22,
        33,
        5
      ],
      "mod_code": [
        "char c = d [ 0 ] ;",
        "char c = c + 1 ;",
        "char c = c + 1 ;",
        "char c = s = s [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        8,
        22,
        5
      ],
      "mod_code": [
        "char c = d [ 0 ] ;",
        "char c = c + 1 ;",
        "char c = s = s [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        8,
        33
      ],
      "mod_code": [
        "char c = d [ 0 ] ;",
        "char c = c + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        8,
        33,
        5
      ],
      "mod_code": [
        "char c = d [ 0 ] ;",
        "char c = c + 1 ;",
        "char c = s = s [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        8,
        33,
        5,
        22
      ],
      "mod_code": [
        "char c = d [ 0 ] ;",
        "char c = c + 1 ;",
        "char c = s = s [ 0 ] ;",
        "char c = ( char ) c + 1 ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        8,
        33,
        22
      ],
      "mod_code": [
        "char c = d [ 0 ] ;",
        "char c = c + 1 ;",
        "char c = ( char ) c + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "char c = d [ 0 ] ;",
        "char c = s = s [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        8,
        5,
        22
      ],
      "mod_code": [
        "char c = d [ 0 ] ;",
        "char c = s = s [ 0 ] ;",
        "char c = ( char ) c + 1 ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        8,
        22
      ],
      "mod_code": [
        "char c = d [ 0 ] ;",
        "char c = ( char ) c + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        9,
        22
      ],
      "mod_code": [
        "int dr = int ( d [ 1 ] ;",
        "char c = c + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        9,
        22,
        33
      ],
      "mod_code": [
        "int dr = int ( d [ 1 ] ;",
        "char c = c + 1 ;",
        "char c = c + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        9,
        22,
        33,
        5
      ],
      "mod_code": [
        "int dr = int ( d [ 1 ] ;",
        "char c = c + 1 ;",
        "char c = c + 1 ;",
        "char c = s = s [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        9,
        22,
        5
      ],
      "mod_code": [
        "int dr = int ( d [ 1 ] ;",
        "char c = c + 1 ;",
        "char c = s = s [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        9,
        33
      ],
      "mod_code": [
        "int dr = int ( d [ 1 ] ;",
        "char c = c + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        9,
        33,
        5
      ],
      "mod_code": [
        "int dr = int ( d [ 1 ] ;",
        "char c = c + 1 ;",
        "char c = s = s [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        9,
        33,
        5,
        22
      ],
      "mod_code": [
        "int dr = int ( d [ 1 ] ;",
        "char c = c + 1 ;",
        "char c = s = s [ 0 ] ;",
        "char c = ( char ) c + 1 ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        9,
        33,
        22
      ],
      "mod_code": [
        "int dr = int ( d [ 1 ] ;",
        "char c = c + 1 ;",
        "char c = ( char ) c + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "int dr = int ( d [ 1 ] ;",
        "char c = s = s [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        9,
        5,
        22
      ],
      "mod_code": [
        "int dr = int ( d [ 1 ] ;",
        "char c = s = s [ 0 ] ;",
        "char c = ( char ) c + 1 ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        9,
        22
      ],
      "mod_code": [
        "int dr = int ( d [ 1 ] ;",
        "char c = ( char ) c + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        22,
        33,
        5
      ],
      "mod_code": [
        "char c = c + 1 ;",
        "char c = c + 1 ;",
        "char c = s = s [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        22,
        5
      ],
      "mod_code": [
        "char c = c + 1 ;",
        "char c = s = s [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        33,
        5
      ],
      "mod_code": [
        "char c = c + 1 ;",
        "char c = s = s [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        33,
        5,
        22
      ],
      "mod_code": [
        "char c = c + 1 ;",
        "char c = s = s [ 0 ] ;",
        "char c = ( char ) c + 1 ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    },
    {
      "mod_line": [
        5,
        22
      ],
      "mod_code": [
        "char c = s = s [ 0 ] ;",
        "char c = ( char ) c + 1 ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘char’ in initialization"
    }
  ]
}