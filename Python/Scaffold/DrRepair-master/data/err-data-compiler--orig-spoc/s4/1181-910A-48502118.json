{
  "meta": {
    "index": 1181,
    "hitid": "3PZDSVZ3J5BPVP9MBB4CE79S9LKN4L",
    "workerid": "A1APYLD4DUK33J",
    "probid": "910A",
    "subid": "48502118"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare ans with string s , integer k as arguments",
      "code": "int ans ( string s , int k )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer n with n = size of s",
      "code": "int n = s . size ( ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if s [ 0 ] is ' 0 ' , return - 1 from function",
      "code": "if ( s [ 0 ] == ' 0 ' ) return - 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer counter with counter = 0",
      "code": "int counter = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integer current with current = n - 1",
      "code": "int current = n - 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create integer flag with flag = 0",
      "code": "int flag = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "while current is not 0",
      "code": "while ( current != 0 )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = k to 1 inclusive , decrementing i",
      "code": "for ( int i = k ; i >= 1 ; i -- )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if current - i is greater than or equal to 0 and s [ current - i ] is ' 1 '",
      "code": "if ( current - i >= 0 && s [ current - i ] == ' 1 ' )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if current - i is 0",
      "code": "if ( current - i == 0 )",
      "indent": 4
    },
    {
      "line": 10,
      "text": "increment counter",
      "code": "counter ++ ;",
      "indent": 5
    },
    {
      "line": 11,
      "text": "return counter from function",
      "code": "return counter ;",
      "indent": 5
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 13,
      "text": "set current to current - i",
      "code": "current = current - i ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "increment counter",
      "code": "counter ++ ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if flag is 0 , return - 1 from function",
      "code": "if ( flag == 0 ) return - 1 ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "return - 1 from function",
      "code": "return - 1 ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 25,
      "text": "create integers n , k",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "read n read k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "print result of run ans with s , k as arguments , print ' \\ n '",
      "code": "cout << ans ( s , k ) << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string ans ( string s , string k )"
      ],
      "err_line": 2,
      "err_msg": "could not convert ‘-1’ from ‘int’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n = s . top ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘top’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = k ; i >= 1 ; i -- )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "return ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 27,
      "err_msg": "conflicting declaration ‘std::__cxx11::string n’"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 28,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "cout << ans ( s ) << ' \\n ' ;"
      ],
      "err_line": 29,
      "err_msg": "too few arguments to function ‘int ans(std::__cxx11::string, int)’"
    },
    {
      "mod_line": [
        0,
        29
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "cout << ans ( s ) << ' \\n ' ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        29,
        28
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "cout << ans ( s ) << ' \\n ' ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        29,
        28,
        26
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "cout << ans ( s ) << ' \\n ' ;",
        "s >> s ;",
        "n >> n >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        29,
        28,
        3
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "cout << ans ( s ) << ' \\n ' ;",
        "s >> s ;",
        "int counter = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        29,
        28,
        16
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "cout << ans ( s ) << ' \\n ' ;",
        "s >> s ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        29,
        26
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "cout << ans ( s ) << ' \\n ' ;",
        "n >> n >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        29,
        26,
        3
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "cout << ans ( s ) << ' \\n ' ;",
        "n >> n >> k ;",
        "int counter = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        29,
        26,
        16
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "cout << ans ( s ) << ' \\n ' ;",
        "n >> n >> k ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        29,
        3
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "cout << ans ( s ) << ' \\n ' ;",
        "int counter = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        29,
        3,
        16
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "cout << ans ( s ) << ' \\n ' ;",
        "int counter = 1 ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        29,
        16
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "cout << ans ( s ) << ' \\n ' ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        28
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        28,
        26
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "s >> s ;",
        "n >> n >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        28,
        26,
        3
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "s >> s ;",
        "n >> n >> k ;",
        "int counter = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        28,
        26,
        16
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "s >> s ;",
        "n >> n >> k ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        28,
        3
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "s >> s ;",
        "int counter = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        28,
        3,
        16
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "s >> s ;",
        "int counter = 1 ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        28,
        16
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "s >> s ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        26
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "n >> n >> k ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        26,
        3
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "n >> n >> k ;",
        "int counter = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        26,
        3,
        16
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "n >> n >> k ;",
        "int counter = 1 ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        26,
        16
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "n >> n >> k ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "int counter = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        16
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "int counter = 1 ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        16
      ],
      "mod_code": [
        "string ans ( string s , string k ) ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        29,
        28
      ],
      "mod_code": [
        "cout << ans ( s ) << ' \\n ' ;",
        "s >> s ;"
      ],
      "err_line": 28,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        29,
        28,
        26
      ],
      "mod_code": [
        "cout << ans ( s ) << ' \\n ' ;",
        "s >> s ;",
        "n >> n >> k ;"
      ],
      "err_line": 28,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        29,
        28,
        26,
        3
      ],
      "mod_code": [
        "cout << ans ( s ) << ' \\n ' ;",
        "s >> s ;",
        "n >> n >> k ;",
        "int counter = 1 ;"
      ],
      "err_line": 28,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        29,
        28,
        26,
        16
      ],
      "mod_code": [
        "cout << ans ( s ) << ' \\n ' ;",
        "s >> s ;",
        "n >> n >> k ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        28,
        3
      ],
      "mod_code": [
        "cout << ans ( s ) << ' \\n ' ;",
        "s >> s ;",
        "int counter = 1 ;"
      ],
      "err_line": 28,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        29,
        28,
        3,
        16
      ],
      "mod_code": [
        "cout << ans ( s ) << ' \\n ' ;",
        "s >> s ;",
        "int counter = 1 ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        28,
        16
      ],
      "mod_code": [
        "cout << ans ( s ) << ' \\n ' ;",
        "s >> s ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        26
      ],
      "mod_code": [
        "cout << ans ( s ) << ' \\n ' ;",
        "n >> n >> k ;"
      ],
      "err_line": 29,
      "err_msg": "too few arguments to function ‘int ans(std::__cxx11::string, int)’"
    },
    {
      "mod_line": [
        29,
        26,
        3
      ],
      "mod_code": [
        "cout << ans ( s ) << ' \\n ' ;",
        "n >> n >> k ;",
        "int counter = 1 ;"
      ],
      "err_line": 29,
      "err_msg": "too few arguments to function ‘int ans(std::__cxx11::string, int)’"
    },
    {
      "mod_line": [
        29,
        26,
        3,
        16
      ],
      "mod_code": [
        "cout << ans ( s ) << ' \\n ' ;",
        "n >> n >> k ;",
        "int counter = 1 ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        26,
        16
      ],
      "mod_code": [
        "cout << ans ( s ) << ' \\n ' ;",
        "n >> n >> k ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        3
      ],
      "mod_code": [
        "cout << ans ( s ) << ' \\n ' ;",
        "int counter = 1 ;"
      ],
      "err_line": 29,
      "err_msg": "too few arguments to function ‘int ans(std::__cxx11::string, int)’"
    },
    {
      "mod_line": [
        29,
        3,
        16
      ],
      "mod_code": [
        "cout << ans ( s ) << ' \\n ' ;",
        "int counter = 1 ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        16
      ],
      "mod_code": [
        "cout << ans ( s ) << ' \\n ' ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        28,
        26
      ],
      "mod_code": [
        "s >> s ;",
        "n >> n >> k ;"
      ],
      "err_line": 28,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        28,
        26,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "n >> n >> k ;",
        "int counter = 1 ;"
      ],
      "err_line": 28,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        28,
        26,
        3,
        16
      ],
      "mod_code": [
        "s >> s ;",
        "n >> n >> k ;",
        "int counter = 1 ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        28,
        26,
        16
      ],
      "mod_code": [
        "s >> s ;",
        "n >> n >> k ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        28,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "int counter = 1 ;"
      ],
      "err_line": 28,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        28,
        3,
        16
      ],
      "mod_code": [
        "s >> s ;",
        "int counter = 1 ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        28,
        16
      ],
      "mod_code": [
        "s >> s ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        26,
        3,
        16
      ],
      "mod_code": [
        "n >> n >> k ;",
        "int counter = 1 ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        26,
        16
      ],
      "mod_code": [
        "n >> n >> k ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "int counter = 1 ;",
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}