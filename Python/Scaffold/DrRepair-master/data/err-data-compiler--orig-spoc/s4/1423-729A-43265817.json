{
  "meta": {
    "index": 1423,
    "hitid": "39AYGO6AFFE3ACD0UZXRB5T65CT6NS",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "729A",
    "subid": "43265817"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n then s",
      "code": "cin >> n >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if starting at s [ i ] s contains \" ogo \"",
      "code": "if ( s [ i ] == ' o ' && s [ i + 1 ] == ' g ' && s [ i + 2 ] == ' o ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "print \" * * * \"",
      "code": "cout << \" *** \" ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "increment i by 2",
      "code": "i += 2 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "while s [ i + 1 ] equals ' g ' and s [ i + 2 ] equals ' o ' increment i by 2",
      "code": "while ( s [ i + 1 ] == ' g ' && s [ i + 2 ] == ' o ' ) { i += 2 ; }",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "print s [ i ]",
      "code": "cout << s [ i ] ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( s [ i ] . at ( \" ogo \" ) == 0 )"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘at’ in ‘s.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[]<char, std::char_traits<char>, std::allocator<char> >(((std::__cxx11::basic_string<char>::size_type)i))’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        10
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )",
        "cout << \" -1 \" << endl ;",
        "cout << s [ i ] << endl ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        10,
        9
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )",
        "cout << \" -1 \" << endl ;",
        "cout << s [ i ] << endl ;",
        "else ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        10,
        1
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )",
        "cout << \" -1 \" << endl ;",
        "cout << s [ i ] << endl ;",
        "char n ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        9
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )",
        "cout << \" -1 \" << endl ;",
        "else ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        9,
        1
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )",
        "cout << \" -1 \" << endl ;",
        "else ;",
        "char n ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        1
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )",
        "cout << \" -1 \" << endl ;",
        "char n ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )",
        "cout << s [ i ] << endl ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        9
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )",
        "cout << s [ i ] << endl ;",
        "else ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        9,
        6
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )",
        "cout << s [ i ] << endl ;",
        "else ;",
        "cout << \" -1\\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        9,
        1
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )",
        "cout << s [ i ] << endl ;",
        "else ;",
        "char n ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        6
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )",
        "cout << s [ i ] << endl ;",
        "cout << \" -1\\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        6,
        1
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )",
        "cout << s [ i ] << endl ;",
        "cout << \" -1\\n \" ;",
        "char n ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        1
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )",
        "cout << s [ i ] << endl ;",
        "char n ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )",
        "else ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        6
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )",
        "else ;",
        "cout << \" -1\\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        6,
        1
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )",
        "else ;",
        "cout << \" -1\\n \" ;",
        "char n ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        1
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )",
        "else ;",
        "char n ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )",
        "cout << \" -1\\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        1
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )",
        "cout << \" -1\\n \" ;",
        "char n ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "if ( strcmp ( s [ i ] ) == \" ogo \" )",
        "char n ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    }
  ]
}