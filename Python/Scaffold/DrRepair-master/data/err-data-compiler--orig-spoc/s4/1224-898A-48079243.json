{
  "meta": {
    "index": 1224,
    "hitid": "3OKP4QVBP2RYNM8HX8181QMV16OAGG",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "898A",
    "subid": "48079243"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = long long",
      "code": "long long n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if n / 10 is 0",
      "code": "if ( n / 10 == 0 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if n is less than 6",
      "code": "if ( n <= 5 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "print \" 0 \"",
      "code": "cout << \" 0\\n \" ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print \" 10 \"",
      "code": "cout << \" 10\\n \" ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if n mod 10 is less than 6",
      "code": "if ( n % 10 <= 5 )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "print n / 10 then 0",
      "code": "cout << n / 10 << 0 << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print n / 10 + 1 then 0",
      "code": "cout << n / 10 + 1 << 0 << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        12,
        11
      ],
      "mod_code": [
        "cout << n / 10 << \" \" << 0 << endl ;",
        "cout << n / 10 + 1 << endl ;",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        12,
        11,
        6
      ],
      "mod_code": [
        "cout << n / 10 << \" \" << 0 << endl ;",
        "cout << n / 10 + 1 << endl ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        12,
        11,
        8
      ],
      "mod_code": [
        "cout << n / 10 << \" \" << 0 << endl ;",
        "cout << n / 10 + 1 << endl ;",
        "else else",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        12,
        6
      ],
      "mod_code": [
        "cout << n / 10 << \" \" << 0 << endl ;",
        "cout << n / 10 + 1 << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        12,
        6,
        8
      ],
      "mod_code": [
        "cout << n / 10 << \" \" << 0 << endl ;",
        "cout << n / 10 + 1 << endl ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        12,
        8
      ],
      "mod_code": [
        "cout << n / 10 << \" \" << 0 << endl ;",
        "cout << n / 10 + 1 << endl ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "cout << n / 10 << \" \" << 0 << endl ;",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        11,
        6
      ],
      "mod_code": [
        "cout << n / 10 << \" \" << 0 << endl ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        11,
        6,
        12
      ],
      "mod_code": [
        "cout << n / 10 << \" \" << 0 << endl ;",
        "else else",
        "else else",
        "cout << n / 10 + 1 << \" \\n \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        11,
        6,
        8
      ],
      "mod_code": [
        "cout << n / 10 << \" \" << 0 << endl ;",
        "else else",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        11,
        12
      ],
      "mod_code": [
        "cout << n / 10 << \" \" << 0 << endl ;",
        "else else",
        "cout << n / 10 + 1 << \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        11,
        12,
        8
      ],
      "mod_code": [
        "cout << n / 10 << \" \" << 0 << endl ;",
        "else else",
        "cout << n / 10 + 1 << \" \\n \" ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        11,
        8
      ],
      "mod_code": [
        "cout << n / 10 << \" \" << 0 << endl ;",
        "else else",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "cout << n / 10 << \" \" << 0 << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        6,
        12
      ],
      "mod_code": [
        "cout << n / 10 << \" \" << 0 << endl ;",
        "else else",
        "cout << n / 10 + 1 << \" \\n \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        6,
        12,
        8
      ],
      "mod_code": [
        "cout << n / 10 << \" \" << 0 << endl ;",
        "else else",
        "cout << n / 10 + 1 << \" \\n \" ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        6,
        8
      ],
      "mod_code": [
        "cout << n / 10 << \" \" << 0 << endl ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        12,
        8
      ],
      "mod_code": [
        "cout << n / 10 << \" \" << 0 << endl ;",
        "cout << n / 10 + 1 << \" \\n \" ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "cout << n / 10 << \" \" << 0 << endl ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        11
      ],
      "mod_code": [
        "cout << n / 10 + 1 << endl ;",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        11,
        6
      ],
      "mod_code": [
        "cout << n / 10 + 1 << endl ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        11,
        6,
        8
      ],
      "mod_code": [
        "cout << n / 10 + 1 << endl ;",
        "else else",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        11,
        8
      ],
      "mod_code": [
        "cout << n / 10 + 1 << endl ;",
        "else else",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "cout << n / 10 + 1 << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        6,
        8
      ],
      "mod_code": [
        "cout << n / 10 + 1 << endl ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        8
      ],
      "mod_code": [
        "cout << n / 10 + 1 << endl ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        6,
        12
      ],
      "mod_code": [
        "else else",
        "else else",
        "cout << n / 10 + 1 << \" \\n \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        6,
        12,
        8
      ],
      "mod_code": [
        "else else",
        "else else",
        "cout << n / 10 + 1 << \" \\n \" ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        6,
        8
      ],
      "mod_code": [
        "else else",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "else else",
        "cout << n / 10 + 1 << \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        12,
        8
      ],
      "mod_code": [
        "else else",
        "cout << n / 10 + 1 << \" \\n \" ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "else else",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "else else",
        "cout << n / 10 + 1 << \" \\n \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        12,
        8
      ],
      "mod_code": [
        "else else",
        "cout << n / 10 + 1 << \" \\n \" ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        8
      ],
      "mod_code": [
        "cout << n / 10 + 1 << \" \\n \" ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}