{
  "meta": {
    "index": 957,
    "hitid": "3KA7IJSNW6Z9J96865RRQAKTKFYPBW",
    "workerid": "A1APYLD4DUK33J",
    "probid": "275A",
    "subid": "48195494"
  },
  "lines": [
    {
      "line": 0,
      "text": "create 2d integer array mat with size 3 by 3 with mat = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 } }",
      "code": "int mat [ 3 ] [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 } } ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare imprimir with no arguments , returning void",
      "code": "void imprimir ( )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for e = 0 to 3 exclusive , print mat [ i ] [ e ]",
      "code": "for ( int e = 0 ; e < 3 ; e ++ ) { cout << mat [ i ] [ e ] ; }",
      "indent": 2
    },
    {
      "line": 4,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "declare encender with integers i , e as arguments , returning void",
      "code": "void encender ( int i , int e )",
      "indent": 0
    },
    {
      "line": 8,
      "text": "set mat [ i ] [ e ] to not mat [ i ] [ e ]",
      "code": "mat [ i ] [ e ] = ! mat [ i ] [ e ] ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if e + 1 is less than or equal to 2 , set mat [ i ] [ e + 1 ] to not mat [ i ] [ e + 1 ]",
      "code": "if ( e + 1 <= 2 ) { mat [ i ] [ e + 1 ] = ! mat [ i ] [ e + 1 ] ; }",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if e - 1 is greater than or equal to 0 , set mat [ i ] [ e - 1 ] to not mat [ i ] [ e - 1 ]",
      "code": "if ( e - 1 >= 0 ) { mat [ i ] [ e - 1 ] = ! mat [ i ] [ e - 1 ] ; }",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if i - 1 is greater than or equal to 0 , set mat [ i - 1 ] [ e ] to not mat [ i - 1 ] [ e ]",
      "code": "if ( i - 1 >= 0 ) { mat [ i - 1 ] [ e ] = ! mat [ i - 1 ] [ e ] ; }",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if i + 1 is less than or equal to 2 , set mat [ i + 1 ] [ e ] to not mat [ i + 1 ] [ e ]",
      "code": "if ( i + 1 <= 2 ) { mat [ i + 1 ] [ e ] = ! mat [ i + 1 ] [ e ] ; }",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 15,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for e = 0 to 3 exclusive",
      "code": "for ( int e = 0 ; e < 3 ; e ++ )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "create integer aux",
      "code": "int aux ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "read aux",
      "code": "cin >> aux ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "if aux % 2 is not 0 , run encender with i , e as arguments",
      "code": "if ( aux % 2 != 0 ) encender ( i , e ) ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "run imprimir",
      "code": "imprimir ( ) ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "void imprimir ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 19,
      "err_msg": "assignment of function ‘void encender(int, int)’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , 1 , 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( e = 0 ; e < 3 ; e ++ )"
      ],
      "err_line": 16,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( aux % 2 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 19,
      "err_msg": "assignment of function ‘void encender(int, int)’"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        7
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        7,
        9
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        7,
        10
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        7,
        11
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        7,
        12
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        7,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        9
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        9,
        10
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        9,
        11
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        9,
        12
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        9,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        10
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        10,
        11
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        10,
        12
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        10,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        11
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        11,
        12
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        11,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        12
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        12,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        1,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void imprimir ( ) ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void encender ( int i , int e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        7,
        9
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        7,
        9,
        10
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        7,
        9,
        11
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        7,
        9,
        12
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        7,
        9,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        7,
        10
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void encender ( int i , int e ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        7,
        10,
        11
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void encender ( int i , int e ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        7,
        10,
        12
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void encender ( int i , int e ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        7,
        10,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void encender ( int i , int e ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        7,
        11
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void encender ( int i , int e ) ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        7,
        11,
        12
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void encender ( int i , int e ) ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        7,
        11,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void encender ( int i , int e ) ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        7,
        12
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void encender ( int i , int e ) ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        7,
        12,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void encender ( int i , int e ) ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        7,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "void encender ( int i , int e ) ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        9,
        10
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        9,
        10,
        11
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        9,
        10,
        12
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        9,
        10,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        9,
        11
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        9,
        11,
        12
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        9,
        11,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        9,
        12
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        9,
        12,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        9,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        10,
        11
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        10,
        11,
        12
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        10,
        11,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        10,
        12
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        10,
        12,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        10,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        11,
        12
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        11,
        12,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        11,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        12,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        0,
        19
      ],
      "mod_code": [
        "int mat [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 0,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        9
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        9,
        10
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        9,
        11
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        9,
        12
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        9,
        19
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        10
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        10,
        11
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        10,
        12
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        10,
        19
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        11
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        11,
        12
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        11,
        19
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        12
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        12,
        19
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        7,
        19
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "void encender ( int i , int e ) ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        9,
        10
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        9,
        10,
        11
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        9,
        10,
        12
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        9,
        10,
        19
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        9,
        11
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        9,
        11,
        12
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        9,
        11,
        19
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        9,
        12
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        9,
        12,
        19
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        9,
        19
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        11
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        11,
        12
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        11,
        19
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        12
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        12,
        19
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        19
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        11,
        12
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        11,
        12,
        19
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        11,
        19
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        12,
        19
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        19
      ],
      "mod_code": [
        "void imprimir ( ) ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        9,
        10
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        9,
        10,
        11
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        9,
        10,
        12
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        9,
        10,
        19
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        9,
        11
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        9,
        11,
        12
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        9,
        11,
        19
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        9,
        12
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        9,
        12,
        19
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        9,
        19
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        10,
        11
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        10,
        11,
        12
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        10,
        11,
        19
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        10,
        12
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        10,
        12,
        19
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        10,
        19
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        12
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        12,
        19
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        11,
        19
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        12,
        19
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        19
      ],
      "mod_code": [
        "void encender ( int i , int e ) ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        10,
        11,
        19
      ],
      "mod_code": [
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 19,
      "err_msg": "assignment of function ‘void encender(int, int)’"
    },
    {
      "mod_line": [
        9,
        10,
        12,
        19
      ],
      "mod_code": [
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 19,
      "err_msg": "assignment of function ‘void encender(int, int)’"
    },
    {
      "mod_line": [
        9,
        10,
        19
      ],
      "mod_code": [
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 19,
      "err_msg": "assignment of function ‘void encender(int, int)’"
    },
    {
      "mod_line": [
        9,
        11,
        12,
        19
      ],
      "mod_code": [
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 19,
      "err_msg": "assignment of function ‘void encender(int, int)’"
    },
    {
      "mod_line": [
        9,
        11,
        19
      ],
      "mod_code": [
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 19,
      "err_msg": "assignment of function ‘void encender(int, int)’"
    },
    {
      "mod_line": [
        9,
        12,
        19
      ],
      "mod_code": [
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 19,
      "err_msg": "assignment of function ‘void encender(int, int)’"
    },
    {
      "mod_line": [
        9,
        19
      ],
      "mod_code": [
        "if ( e + 1 <= 2 ) mat [ i ] [ e + 1 ] = mat [ i ] [ e + 1 ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 19,
      "err_msg": "assignment of function ‘void encender(int, int)’"
    },
    {
      "mod_line": [
        10,
        11,
        12,
        19
      ],
      "mod_code": [
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 19,
      "err_msg": "assignment of function ‘void encender(int, int)’"
    },
    {
      "mod_line": [
        10,
        11,
        19
      ],
      "mod_code": [
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 19,
      "err_msg": "assignment of function ‘void encender(int, int)’"
    },
    {
      "mod_line": [
        10,
        12,
        19
      ],
      "mod_code": [
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 19,
      "err_msg": "assignment of function ‘void encender(int, int)’"
    },
    {
      "mod_line": [
        10,
        19
      ],
      "mod_code": [
        "if ( e - 1 >= 0 ) mat [ i ] [ e - 1 ] = mat [ i ] [ e - 1 ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 19,
      "err_msg": "assignment of function ‘void encender(int, int)’"
    },
    {
      "mod_line": [
        11,
        12,
        19
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 19,
      "err_msg": "assignment of function ‘void encender(int, int)’"
    },
    {
      "mod_line": [
        11,
        19
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) mat [ i - 1 ] [ e ] = mat [ i - 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 19,
      "err_msg": "assignment of function ‘void encender(int, int)’"
    },
    {
      "mod_line": [
        12,
        19
      ],
      "mod_code": [
        "if ( i + 1 <= 2 ) mat [ i + 1 ] [ e ] = mat [ i + 1 ] [ e ] ;",
        "if ( aux % 2 != 0 ) encender = encender ( i , e ) ;"
      ],
      "err_line": 19,
      "err_msg": "assignment of function ‘void encender(int, int)’"
    }
  ]
}