{
  "meta": {
    "index": 1499,
    "hitid": "3N7PQ0KLI5J0JND5IYWAEFNDIGQE3G",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "837A",
    "subid": "48873964"
  },
  "lines": [
    {
      "line": 0,
      "text": "N , K , ans , A , val , x , y = int",
      "code": "int N , K , ans , A , val , x , y ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "T , S , P = string",
      "code": "string T , S , P ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read N",
      "code": "cin >> N ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read S",
      "code": "getline ( cin , S ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read S",
      "code": "getline ( cin , S ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to N exclusive",
      "code": "for ( int i = 0 ; i < N ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if S [ i ] is ' '",
      "code": "if ( S [ i ] == ' ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "val = max ( val , ans )",
      "code": "val = max ( val , ans ) ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "ans = 0",
      "code": "ans = 0 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if S [ i ] is an uppercase letter",
      "code": "else if ( S [ i ] <= ' Z ' && S [ i ] >= ' A ' )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increment ans",
      "code": "ans ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "val = max ( val , ans )",
      "code": "val = max ( val , ans ) ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print val",
      "code": "cout << val << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int N , K , ans , A , val , val , y ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int val’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char T , S , P ;"
      ],
      "err_line": 4,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "gets ( S ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "gets ( S ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < N ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        4
      ],
      "mod_code": [
        "cin >> S ;",
        "int ans = 0 ;",
        "else if ( isdigit ( S [ i ] ) )",
        "gets ( S ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        9,
        13,
        4
      ],
      "mod_code": [
        "cin >> S ;",
        "int ans = 0 ;",
        "int val = max ( val , ans ) ;",
        "gets ( S ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        9,
        4
      ],
      "mod_code": [
        "cin >> S ;",
        "int ans = 0 ;",
        "gets ( S ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        10,
        13,
        4
      ],
      "mod_code": [
        "cin >> S ;",
        "else if ( isdigit ( S [ i ] ) )",
        "int val = max ( val , ans ) ;",
        "gets ( S ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        10,
        4
      ],
      "mod_code": [
        "cin >> S ;",
        "else if ( isdigit ( S [ i ] ) )",
        "gets ( S ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        13,
        4
      ],
      "mod_code": [
        "cin >> S ;",
        "int val = max ( val , ans ) ;",
        "gets ( S ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "cin >> S ;",
        "gets ( S ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        10,
        13,
        4
      ],
      "mod_code": [
        "int ans = 0 ;",
        "else if ( isdigit ( S [ i ] ) )",
        "int val = max ( val , ans ) ;",
        "gets ( S ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        10,
        4
      ],
      "mod_code": [
        "int ans = 0 ;",
        "else if ( isdigit ( S [ i ] ) )",
        "gets ( S ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        13,
        4
      ],
      "mod_code": [
        "int ans = 0 ;",
        "int val = max ( val , ans ) ;",
        "gets ( S ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "int ans = 0 ;",
        "gets ( S ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        13,
        4
      ],
      "mod_code": [
        "else if ( isdigit ( S [ i ] ) )",
        "int val = max ( val , ans ) ;",
        "gets ( S ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "else if ( isdigit ( S [ i ] ) )",
        "gets ( S ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "int val = max ( val , ans ) ;",
        "gets ( S ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}