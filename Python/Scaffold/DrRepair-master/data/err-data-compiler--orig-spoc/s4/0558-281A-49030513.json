{
  "meta": {
    "index": 558,
    "hitid": "3EFNPKWBMSI1SXYBARXVTQL9NSF034",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "281A",
    "subid": "49030513"
  },
  "lines": [
    {
      "line": 0,
      "text": "in the function toUpp that takes character s and returns character",
      "code": "char toUpp ( char s )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = integer with n = s",
      "code": "int n = s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if n > = 97 and n < = 122 n = n - 32",
      "code": "if ( n >= 97 && n <= 122 ) n -= 32 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return ( char ) n",
      "code": "return ( char ) n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "s [ 0 ] = call toUpp on s [ 0 ]",
      "code": "s [ 0 ] = toUpp ( s [ 0 ] ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print s",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "s [ 0 ] = toUpp [ 0 ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "return ( char ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "s [ 0 ] = toUpp [ 0 ] = toUpp [ 0 ] ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of function ‘char toUpp(char)’"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "if ( n >= 97 && n <= 122 ) n += 32 ;",
        "s [ 0 ] = toUpp [ 0 ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char (*)(char)’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        8,
        3
      ],
      "mod_code": [
        "if ( n >= 97 && n <= 122 ) n += 32 ;",
        "s [ 0 ] = toUpp [ 0 ] ;",
        "return ( char ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        2,
        8,
        3,
        7
      ],
      "mod_code": [
        "if ( n >= 97 && n <= 122 ) n += 32 ;",
        "s [ 0 ] = toUpp [ 0 ] ;",
        "return ( char ) ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        2,
        8,
        3,
        0
      ],
      "mod_code": [
        "if ( n >= 97 && n <= 122 ) n += 32 ;",
        "s [ 0 ] = toUpp [ 0 ] ;",
        "return ( char ) ;",
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        7
      ],
      "mod_code": [
        "if ( n >= 97 && n <= 122 ) n += 32 ;",
        "s [ 0 ] = toUpp [ 0 ] ;",
        "gets ( s ) ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        8,
        7,
        0
      ],
      "mod_code": [
        "if ( n >= 97 && n <= 122 ) n += 32 ;",
        "s [ 0 ] = toUpp [ 0 ] ;",
        "gets ( s ) ;",
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        0
      ],
      "mod_code": [
        "if ( n >= 97 && n <= 122 ) n += 32 ;",
        "s [ 0 ] = toUpp [ 0 ] ;",
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "if ( n >= 97 && n <= 122 ) n += 32 ;",
        "return ( char ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        2,
        3,
        7
      ],
      "mod_code": [
        "if ( n >= 97 && n <= 122 ) n += 32 ;",
        "return ( char ) ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        8
      ],
      "mod_code": [
        "if ( n >= 97 && n <= 122 ) n += 32 ;",
        "return ( char ) ;",
        "gets ( s ) ;",
        "s [ 0 ] = toUpp [ 0 ] = toUpp [ 0 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        0
      ],
      "mod_code": [
        "if ( n >= 97 && n <= 122 ) n += 32 ;",
        "return ( char ) ;",
        "gets ( s ) ;",
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        8
      ],
      "mod_code": [
        "if ( n >= 97 && n <= 122 ) n += 32 ;",
        "return ( char ) ;",
        "s [ 0 ] = toUpp [ 0 ] = toUpp [ 0 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        0
      ],
      "mod_code": [
        "if ( n >= 97 && n <= 122 ) n += 32 ;",
        "return ( char ) ;",
        "s [ 0 ] = toUpp [ 0 ] = toUpp [ 0 ] ;",
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        0
      ],
      "mod_code": [
        "if ( n >= 97 && n <= 122 ) n += 32 ;",
        "return ( char ) ;",
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "if ( n >= 97 && n <= 122 ) n += 32 ;",
        "gets ( s ) ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        7,
        8
      ],
      "mod_code": [
        "if ( n >= 97 && n <= 122 ) n += 32 ;",
        "gets ( s ) ;",
        "s [ 0 ] = toUpp [ 0 ] = toUpp [ 0 ] ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        7,
        8,
        0
      ],
      "mod_code": [
        "if ( n >= 97 && n <= 122 ) n += 32 ;",
        "gets ( s ) ;",
        "s [ 0 ] = toUpp [ 0 ] = toUpp [ 0 ] ;",
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        7,
        0
      ],
      "mod_code": [
        "if ( n >= 97 && n <= 122 ) n += 32 ;",
        "gets ( s ) ;",
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "if ( n >= 97 && n <= 122 ) n += 32 ;",
        "s [ 0 ] = toUpp [ 0 ] = toUpp [ 0 ] ;"
      ],
      "err_line": 8,
      "err_msg": "assignment of function ‘char toUpp(char)’"
    },
    {
      "mod_line": [
        2,
        8,
        0
      ],
      "mod_code": [
        "if ( n >= 97 && n <= 122 ) n += 32 ;",
        "s [ 0 ] = toUpp [ 0 ] = toUpp [ 0 ] ;",
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "if ( n >= 97 && n <= 122 ) n += 32 ;",
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "s [ 0 ] = toUpp [ 0 ] ;",
        "return ( char ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        8,
        3,
        7
      ],
      "mod_code": [
        "s [ 0 ] = toUpp [ 0 ] ;",
        "return ( char ) ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        8,
        3,
        7,
        0
      ],
      "mod_code": [
        "s [ 0 ] = toUpp [ 0 ] ;",
        "return ( char ) ;",
        "gets ( s ) ;",
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        3,
        0
      ],
      "mod_code": [
        "s [ 0 ] = toUpp [ 0 ] ;",
        "return ( char ) ;",
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "s [ 0 ] = toUpp [ 0 ] ;",
        "gets ( s ) ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8,
        7,
        0
      ],
      "mod_code": [
        "s [ 0 ] = toUpp [ 0 ] ;",
        "gets ( s ) ;",
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "s [ 0 ] = toUpp [ 0 ] ;",
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "return ( char ) ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        3,
        7,
        8
      ],
      "mod_code": [
        "return ( char ) ;",
        "gets ( s ) ;",
        "s [ 0 ] = toUpp [ 0 ] = toUpp [ 0 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        3,
        7,
        8,
        0
      ],
      "mod_code": [
        "return ( char ) ;",
        "gets ( s ) ;",
        "s [ 0 ] = toUpp [ 0 ] = toUpp [ 0 ] ;",
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        7,
        0
      ],
      "mod_code": [
        "return ( char ) ;",
        "gets ( s ) ;",
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "return ( char ) ;",
        "s [ 0 ] = toUpp [ 0 ] = toUpp [ 0 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘char’"
    },
    {
      "mod_line": [
        3,
        8,
        0
      ],
      "mod_code": [
        "return ( char ) ;",
        "s [ 0 ] = toUpp [ 0 ] = toUpp [ 0 ] ;",
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        0
      ],
      "mod_code": [
        "return ( char ) ;",
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "gets ( s ) ;",
        "s [ 0 ] = toUpp [ 0 ] = toUpp [ 0 ] ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        8,
        0
      ],
      "mod_code": [
        "gets ( s ) ;",
        "s [ 0 ] = toUpp [ 0 ] = toUpp [ 0 ] ;",
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "gets ( s ) ;",
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "s [ 0 ] = toUpp [ 0 ] = toUpp [ 0 ] ;",
        "char toUpp ( char s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}