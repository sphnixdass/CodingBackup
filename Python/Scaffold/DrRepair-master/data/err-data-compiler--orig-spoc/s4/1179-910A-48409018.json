{
  "meta": {
    "index": 1179,
    "hitid": "3PN6H8C9R4KVB2YQVI00V5JYNREAD1",
    "workerid": "AIWEXPJAU66D9",
    "probid": "910A",
    "subid": "48409018"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer variables n , d and res and array of integers dp with size 105",
      "code": "int n , d , dp [ 105 ] , res ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare string str",
      "code": "string str ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n and d",
      "code": "cin >> n >> d ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "assign value of 0 to dp [ 0 ]",
      "code": "dp [ 0 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if str [ i ] = ' 1 '",
      "code": "if ( str [ i ] == ' 1 ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set res to INT_MAX",
      "code": "res = INT_MAX ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "for j = i - 1 decrement j while j > = 0 and j > = i - d",
      "code": "for ( int j = i - 1 ; j >= 0 && j >= i - d ; -- j )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if str [ j ] = ' 1 ' , set res to min of res and dp [ j ]",
      "code": "if ( str [ j ] == ' 1 ' ) { res = min ( res , dp [ j ] ) ; }",
      "indent": 4
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 12,
      "text": "dp [ i ] = INT_MAX if res = = INT_MAX or res + 1 otherwise",
      "code": "dp [ i ] = ( res == INT_MAX ) ? INT_MAX : ( res + 1 ) ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "res = - 1 if dp [ n - 1 ] = = INT_MAX or dp [ n - 1 ] otherwise",
      "code": "res = ( dp [ n - 1 ] == INT_MAX ) ? - 1 : dp [ n - 1 ] ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print res",
      "code": "cout << res << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char str ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( j = i - 1 ; j >= 0 && j >= i - d ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        12,
        4
      ],
      "mod_code": [
        "for ( int j = i - 1 ; j >= 0 && j >= i - d ; j ++ )",
        "if ( res == INT_MAX ) dp [ i ] = INT_MAX ? INT_MAX : res + 1 ;",
        "gets ( str ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        12,
        4,
        2
      ],
      "mod_code": [
        "for ( int j = i - 1 ; j >= 0 && j >= i - d ; j ++ )",
        "if ( res == INT_MAX ) dp [ i ] = INT_MAX ? INT_MAX : res + 1 ;",
        "gets ( str ) ;",
        "char str ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        12,
        4,
        5
      ],
      "mod_code": [
        "for ( int j = i - 1 ; j >= 0 && j >= i - d ; j ++ )",
        "if ( res == INT_MAX ) dp [ i ] = INT_MAX ? INT_MAX : res + 1 ;",
        "gets ( str ) ;",
        "dp [ 0 ] = ' 0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        12,
        2
      ],
      "mod_code": [
        "for ( int j = i - 1 ; j >= 0 && j >= i - d ; j ++ )",
        "if ( res == INT_MAX ) dp [ i ] = INT_MAX ? INT_MAX : res + 1 ;",
        "char str ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        12,
        2,
        5
      ],
      "mod_code": [
        "for ( int j = i - 1 ; j >= 0 && j >= i - d ; j ++ )",
        "if ( res == INT_MAX ) dp [ i ] = INT_MAX ? INT_MAX : res + 1 ;",
        "char str ;",
        "dp [ 0 ] = ' 0 ' ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "for ( int j = i - 1 ; j >= 0 && j >= i - d ; j ++ )",
        "gets ( str ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        4,
        2
      ],
      "mod_code": [
        "for ( int j = i - 1 ; j >= 0 && j >= i - d ; j ++ )",
        "gets ( str ) ;",
        "char str ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        4,
        2,
        5
      ],
      "mod_code": [
        "for ( int j = i - 1 ; j >= 0 && j >= i - d ; j ++ )",
        "gets ( str ) ;",
        "char str ;",
        "dp [ 0 ] = ' 0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        4,
        5
      ],
      "mod_code": [
        "for ( int j = i - 1 ; j >= 0 && j >= i - d ; j ++ )",
        "gets ( str ) ;",
        "dp [ 0 ] = ' 0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "for ( int j = i - 1 ; j >= 0 && j >= i - d ; j ++ )",
        "char str ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        2,
        5
      ],
      "mod_code": [
        "for ( int j = i - 1 ; j >= 0 && j >= i - d ; j ++ )",
        "char str ;",
        "dp [ 0 ] = ' 0 ' ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "if ( res == INT_MAX ) dp [ i ] = INT_MAX ? INT_MAX : res + 1 ;",
        "gets ( str ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        4,
        2
      ],
      "mod_code": [
        "if ( res == INT_MAX ) dp [ i ] = INT_MAX ? INT_MAX : res + 1 ;",
        "gets ( str ) ;",
        "char str ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        4,
        2,
        5
      ],
      "mod_code": [
        "if ( res == INT_MAX ) dp [ i ] = INT_MAX ? INT_MAX : res + 1 ;",
        "gets ( str ) ;",
        "char str ;",
        "dp [ 0 ] = ' 0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        4,
        2,
        9
      ],
      "mod_code": [
        "if ( res == INT_MAX ) dp [ i ] = INT_MAX ? INT_MAX : res + 1 ;",
        "gets ( str ) ;",
        "char str ;",
        "for ( j = i - 1 ; j >= 0 && j >= i - d ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        4,
        5
      ],
      "mod_code": [
        "if ( res == INT_MAX ) dp [ i ] = INT_MAX ? INT_MAX : res + 1 ;",
        "gets ( str ) ;",
        "dp [ 0 ] = ' 0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        4,
        5,
        9
      ],
      "mod_code": [
        "if ( res == INT_MAX ) dp [ i ] = INT_MAX ? INT_MAX : res + 1 ;",
        "gets ( str ) ;",
        "dp [ 0 ] = ' 0 ' ;",
        "for ( j = i - 1 ; j >= 0 && j >= i - d ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        4,
        9
      ],
      "mod_code": [
        "if ( res == INT_MAX ) dp [ i ] = INT_MAX ? INT_MAX : res + 1 ;",
        "gets ( str ) ;",
        "for ( j = i - 1 ; j >= 0 && j >= i - d ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "if ( res == INT_MAX ) dp [ i ] = INT_MAX ? INT_MAX : res + 1 ;",
        "char str ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        2,
        5
      ],
      "mod_code": [
        "if ( res == INT_MAX ) dp [ i ] = INT_MAX ? INT_MAX : res + 1 ;",
        "char str ;",
        "dp [ 0 ] = ' 0 ' ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        2,
        5,
        9
      ],
      "mod_code": [
        "if ( res == INT_MAX ) dp [ i ] = INT_MAX ? INT_MAX : res + 1 ;",
        "char str ;",
        "dp [ 0 ] = ' 0 ' ;",
        "for ( j = i - 1 ; j >= 0 && j >= i - d ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        2,
        9
      ],
      "mod_code": [
        "if ( res == INT_MAX ) dp [ i ] = INT_MAX ? INT_MAX : res + 1 ;",
        "char str ;",
        "for ( j = i - 1 ; j >= 0 && j >= i - d ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        5,
        9
      ],
      "mod_code": [
        "if ( res == INT_MAX ) dp [ i ] = INT_MAX ? INT_MAX : res + 1 ;",
        "dp [ 0 ] = ' 0 ' ;",
        "for ( j = i - 1 ; j >= 0 && j >= i - d ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        9
      ],
      "mod_code": [
        "if ( res == INT_MAX ) dp [ i ] = INT_MAX ? INT_MAX : res + 1 ;",
        "for ( j = i - 1 ; j >= 0 && j >= i - d ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "gets ( str ) ;",
        "char str ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        2,
        5
      ],
      "mod_code": [
        "gets ( str ) ;",
        "char str ;",
        "dp [ 0 ] = ' 0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        2,
        5,
        9
      ],
      "mod_code": [
        "gets ( str ) ;",
        "char str ;",
        "dp [ 0 ] = ' 0 ' ;",
        "for ( j = i - 1 ; j >= 0 && j >= i - d ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        2,
        9
      ],
      "mod_code": [
        "gets ( str ) ;",
        "char str ;",
        "for ( j = i - 1 ; j >= 0 && j >= i - d ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "gets ( str ) ;",
        "dp [ 0 ] = ' 0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        5,
        9
      ],
      "mod_code": [
        "gets ( str ) ;",
        "dp [ 0 ] = ' 0 ' ;",
        "for ( j = i - 1 ; j >= 0 && j >= i - d ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "gets ( str ) ;",
        "for ( j = i - 1 ; j >= 0 && j >= i - d ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "char str ;",
        "dp [ 0 ] = ' 0 ' ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        5,
        9
      ],
      "mod_code": [
        "char str ;",
        "dp [ 0 ] = ' 0 ' ;",
        "for ( j = i - 1 ; j >= 0 && j >= i - d ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "char str ;",
        "for ( j = i - 1 ; j >= 0 && j >= i - d ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "dp [ 0 ] = ' 0 ' ;",
        "for ( j = i - 1 ; j >= 0 && j >= i - d ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    }
  ]
}