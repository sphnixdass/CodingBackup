{
  "meta": {
    "index": 340,
    "hitid": "38RHULDV9Y99QQHFO1X34RW282JWI5",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "617A",
    "subid": "42359413"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a = int",
      "code": "int a ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "i , counter , c = int with i = 5 and counter = a and c = 0",
      "code": "int i = 5 , counter = a , c = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "arr = int array of size 5 with the values 1 , 2 , 3 , 4 , 5",
      "code": "int arr [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if a is less than 6",
      "code": "if ( a <= 5 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print 1",
      "code": "cout << 1 << endl ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set c to a / 5",
      "code": "c = a / 5 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if a is not a multiple of 5",
      "code": "if ( a % 5 != 0 )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "print c + 1",
      "code": "cout << c + 1 << endl ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print c",
      "code": "cout << c << endl ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int i , counter = 5 , counter = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int arr [ 5 ] = { 1 , 2 , 3 , 4 , 5 , 5 } ;"
      ],
      "err_line": 4,
      "err_msg": "too many initializers for ‘int [5]’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "cout << c ;",
        "int i , counter = 5 , counter = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        12,
        3,
        8
      ],
      "mod_code": [
        "cout << c ;",
        "int i , counter = 5 , counter = 0 ;",
        "c /= 5 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        12,
        3,
        8,
        2
      ],
      "mod_code": [
        "cout << c ;",
        "int i , counter = 5 , counter = 0 ;",
        "c /= 5 ;",
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        3,
        8,
        7
      ],
      "mod_code": [
        "cout << c ;",
        "int i , counter = 5 , counter = 0 ;",
        "c /= 5 ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        12,
        3,
        8,
        10
      ],
      "mod_code": [
        "cout << c ;",
        "int i , counter = 5 , counter = 0 ;",
        "c /= 5 ;",
        "cout << c + 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        12,
        3,
        2
      ],
      "mod_code": [
        "cout << c ;",
        "int i , counter = 5 , counter = 0 ;",
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        3,
        2,
        7
      ],
      "mod_code": [
        "cout << c ;",
        "int i , counter = 5 , counter = 0 ;",
        "gets ( a ) ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        3,
        2,
        10
      ],
      "mod_code": [
        "cout << c ;",
        "int i , counter = 5 , counter = 0 ;",
        "gets ( a ) ;",
        "cout << c + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        3,
        7
      ],
      "mod_code": [
        "cout << c ;",
        "int i , counter = 5 , counter = 0 ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        12,
        3,
        7,
        10
      ],
      "mod_code": [
        "cout << c ;",
        "int i , counter = 5 , counter = 0 ;",
        "else else",
        "cout << c + 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        12,
        3,
        10
      ],
      "mod_code": [
        "cout << c ;",
        "int i , counter = 5 , counter = 0 ;",
        "cout << c + 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        12,
        8,
        2
      ],
      "mod_code": [
        "cout << c ;",
        "c /= 5 ;",
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        8,
        2,
        7
      ],
      "mod_code": [
        "cout << c ;",
        "c /= 5 ;",
        "gets ( a ) ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        8,
        2,
        10
      ],
      "mod_code": [
        "cout << c ;",
        "c /= 5 ;",
        "gets ( a ) ;",
        "cout << c + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        8,
        7
      ],
      "mod_code": [
        "cout << c ;",
        "c /= 5 ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        8,
        7,
        10
      ],
      "mod_code": [
        "cout << c ;",
        "c /= 5 ;",
        "else else",
        "cout << c + 1 ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "cout << c ;",
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        2,
        7
      ],
      "mod_code": [
        "cout << c ;",
        "gets ( a ) ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        2,
        7,
        10
      ],
      "mod_code": [
        "cout << c ;",
        "gets ( a ) ;",
        "else else",
        "cout << c + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        2,
        10
      ],
      "mod_code": [
        "cout << c ;",
        "gets ( a ) ;",
        "cout << c + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        7
      ],
      "mod_code": [
        "cout << c ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        7,
        10
      ],
      "mod_code": [
        "cout << c ;",
        "else else",
        "cout << c + 1 ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "int i , counter = 5 , counter = 0 ;",
        "c /= 5 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        3,
        8,
        2
      ],
      "mod_code": [
        "int i , counter = 5 , counter = 0 ;",
        "c /= 5 ;",
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        2,
        7
      ],
      "mod_code": [
        "int i , counter = 5 , counter = 0 ;",
        "c /= 5 ;",
        "gets ( a ) ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        2,
        10
      ],
      "mod_code": [
        "int i , counter = 5 , counter = 0 ;",
        "c /= 5 ;",
        "gets ( a ) ;",
        "cout << c + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        7
      ],
      "mod_code": [
        "int i , counter = 5 , counter = 0 ;",
        "c /= 5 ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        3,
        8,
        7,
        10
      ],
      "mod_code": [
        "int i , counter = 5 , counter = 0 ;",
        "c /= 5 ;",
        "else else",
        "cout << c + 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        3,
        8,
        10
      ],
      "mod_code": [
        "int i , counter = 5 , counter = 0 ;",
        "c /= 5 ;",
        "cout << c + 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int i , counter = 5 , counter = 0 ;",
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        2,
        7
      ],
      "mod_code": [
        "int i , counter = 5 , counter = 0 ;",
        "gets ( a ) ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        2,
        7,
        10
      ],
      "mod_code": [
        "int i , counter = 5 , counter = 0 ;",
        "gets ( a ) ;",
        "else else",
        "cout << c + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        2,
        10
      ],
      "mod_code": [
        "int i , counter = 5 , counter = 0 ;",
        "gets ( a ) ;",
        "cout << c + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "int i , counter = 5 , counter = 0 ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        3,
        7,
        10
      ],
      "mod_code": [
        "int i , counter = 5 , counter = 0 ;",
        "else else",
        "cout << c + 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "int i , counter = 5 , counter = 0 ;",
        "cout << c + 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int counter’"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "c /= 5 ;",
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        2,
        7
      ],
      "mod_code": [
        "c /= 5 ;",
        "gets ( a ) ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        2,
        7,
        10
      ],
      "mod_code": [
        "c /= 5 ;",
        "gets ( a ) ;",
        "else else",
        "cout << c + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        2,
        10
      ],
      "mod_code": [
        "c /= 5 ;",
        "gets ( a ) ;",
        "cout << c + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "c /= 5 ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        7,
        10
      ],
      "mod_code": [
        "c /= 5 ;",
        "else else",
        "cout << c + 1 ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "gets ( a ) ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        7,
        10
      ],
      "mod_code": [
        "gets ( a ) ;",
        "else else",
        "cout << c + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "gets ( a ) ;",
        "cout << c + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "else else",
        "cout << c + 1 ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}