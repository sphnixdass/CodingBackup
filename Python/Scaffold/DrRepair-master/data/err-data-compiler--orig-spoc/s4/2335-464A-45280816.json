{
  "meta": {
    "index": 2335,
    "hitid": "37M4O367VJC19QSMDF8M6KQ65EYM5T",
    "workerid": "AIWEXPJAU66D9",
    "probid": "464A",
    "subid": "45280816"
  },
  "lines": [
    {
      "line": 0,
      "text": "define function fail",
      "code": "void fail ( )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "print \" NO \\ n \"",
      "code": "cout << \" NO\\n \" ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "call function exit ( 0 )",
      "code": "exit ( 0 ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "create long long ints n and p",
      "code": "long long int n , p ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read n and p",
      "code": "cin >> n >> p ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "declare string variable s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if p is equal to 1",
      "code": "if ( p == 1 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "call function fail",
      "code": "fail ( ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else if p = 2",
      "code": "else if ( p == 2 )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if n is greater than 2",
      "code": "if ( n > 2 )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "call function fail",
      "code": "fail ( ) ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else if n = 2",
      "code": "else if ( n == 2 )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if s is equal to \" ab \"",
      "code": "if ( s == \" ab \" )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "print \" ba \\ n \"",
      "code": "cout << \" ba\\n \" ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 19,
      "text": "call function fail",
      "code": "fail ( ) ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if s = \" a \"",
      "code": "if ( s == \" a \" )",
      "indent": 3
    },
    {
      "line": 22,
      "text": "print \" b \\ n \"",
      "code": "cout << \" b\\n \" ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 25,
      "text": "call function fail",
      "code": "fail ( ) ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 28,
      "text": "loop i from n - 1 to 0 inclusive counting down",
      "code": "for ( int i = n - 1 ; i >= 0 ; i -- )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "create int good = - 1",
      "code": "int good = - 1 ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "for j = 1 to p exclusive",
      "code": "for ( int j = 1 ; j < p ; j ++ )",
      "indent": 3
    },
    {
      "line": 31,
      "text": "if s [ i ] + j > = ' a ' + p , skip the rest of the loop",
      "code": "if ( s [ i ] + j >= ' a ' + p ) continue ;",
      "indent": 4
    },
    {
      "line": 32,
      "text": "if i > = 1 and s [ i ] + j = s [ i - 1 ] , skip the rest of the loop",
      "code": "if ( i >= 1 && s [ i ] + j == s [ i - 1 ] ) continue ;",
      "indent": 4
    },
    {
      "line": 33,
      "text": "if i > = 2 and s [ i ] + j = s [ i - 2 ] , skip the rest of the loop",
      "code": "if ( i >= 2 && s [ i ] + j == s [ i - 2 ] ) continue ;",
      "indent": 4
    },
    {
      "line": 34,
      "text": "set good to j",
      "code": "good = j ;",
      "indent": 4
    },
    {
      "line": 35,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 37,
      "text": "if good = - 1 , skip the rest of the loop",
      "code": "if ( good == - 1 ) continue ;",
      "indent": 3
    },
    {
      "line": 38,
      "text": "append good to s",
      "code": "s [ i ] += good ;",
      "indent": 3
    },
    {
      "line": 39,
      "text": "for j = i + 1 to n exclusive",
      "code": "for ( int j = i + 1 ; j < n ; j ++ )",
      "indent": 3
    },
    {
      "line": 40,
      "text": "for character c = ' a ' to ' c ' inclusive",
      "code": "for ( char c = ' a ' ; c <= ' c ' ; c ++ )",
      "indent": 4
    },
    {
      "line": 41,
      "text": "if j > = 1 and s [ j - 1 ] = c , skip the rest of the loop",
      "code": "if ( j >= 1 && s [ j - 1 ] == c ) continue ;",
      "indent": 5
    },
    {
      "line": 42,
      "text": "if j > = 2 and s [ j - 2 ] = c , skip the rest of the loop",
      "code": "if ( j >= 2 && s [ j - 2 ] == c ) continue ;",
      "indent": 5
    },
    {
      "line": 43,
      "text": "set s [ j ] to c",
      "code": "s [ j ] = c ;",
      "indent": 5
    },
    {
      "line": 44,
      "text": "break the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 47,
      "text": "print s",
      "code": "cout << s << endl ;",
      "indent": 3
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 50,
      "text": "call function fail",
      "code": "fail ( ) ;",
      "indent": 2
    },
    {
      "line": 51,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 52,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 53,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "s . push ( good ) ;"
      ],
      "err_line": 38,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘push’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 6,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 7,
      "err_msg": "conflicting declaration ‘std::__cxx11::string n’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "function ( ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘function’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "function ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘function’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "function ( ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘function’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( s = \" a \" )"
      ],
      "err_line": 21,
      "err_msg": "could not convert ‘s.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"a\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "function ( ) ;"
      ],
      "err_line": 25,
      "err_msg": "‘function’ was not declared in this scope"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 28,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "good to ;"
      ],
      "err_line": 34,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 35,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 39,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        44
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 44,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        50
      ],
      "mod_code": [
        "function ( ) ;"
      ],
      "err_line": 50,
      "err_msg": "‘function’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        38
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "s . push ( good ) ;"
      ],
      "err_line": 38,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘push’"
    },
    {
      "mod_line": [
        16,
        38,
        21
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "s . push ( good ) ;",
        "if ( s = \" a \" )"
      ],
      "err_line": 21,
      "err_msg": "could not convert ‘s.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"a\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        16,
        38,
        21,
        35
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "s . push ( good ) ;",
        "if ( s = \" a \" )",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "could not convert ‘s.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"a\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        16,
        38,
        35
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "s . push ( good ) ;",
        "break break ;"
      ],
      "err_line": 35,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        16,
        21
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "if ( s = \" a \" )"
      ],
      "err_line": 21,
      "err_msg": "could not convert ‘s.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"a\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        16,
        21,
        35
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "if ( s = \" a \" )",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "could not convert ‘s.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"a\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        16,
        21,
        35,
        38
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "if ( s = \" a \" )",
        "break break ;",
        "s += good ;"
      ],
      "err_line": 21,
      "err_msg": "could not convert ‘s.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"a\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        16,
        21,
        38
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "if ( s = \" a \" )",
        "s += good ;"
      ],
      "err_line": 21,
      "err_msg": "could not convert ‘s.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"a\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        16,
        35
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "break break ;"
      ],
      "err_line": 35,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        16,
        35,
        38
      ],
      "mod_code": [
        "cout << \" R\\n \" ;",
        "break break ;",
        "s += good ;"
      ],
      "err_line": 35,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        38,
        21
      ],
      "mod_code": [
        "s . push ( good ) ;",
        "if ( s = \" a \" )"
      ],
      "err_line": 21,
      "err_msg": "could not convert ‘s.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"a\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        38,
        21,
        35
      ],
      "mod_code": [
        "s . push ( good ) ;",
        "if ( s = \" a \" )",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "could not convert ‘s.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"a\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        38,
        21,
        35,
        16
      ],
      "mod_code": [
        "s . push ( good ) ;",
        "if ( s = \" a \" )",
        "break break ;",
        "cout << \" L\\n \" ;"
      ],
      "err_line": 21,
      "err_msg": "could not convert ‘s.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"a\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        38,
        21,
        16
      ],
      "mod_code": [
        "s . push ( good ) ;",
        "if ( s = \" a \" )",
        "cout << \" L\\n \" ;"
      ],
      "err_line": 21,
      "err_msg": "could not convert ‘s.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"a\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        38,
        35
      ],
      "mod_code": [
        "s . push ( good ) ;",
        "break break ;"
      ],
      "err_line": 35,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        38,
        35,
        16
      ],
      "mod_code": [
        "s . push ( good ) ;",
        "break break ;",
        "cout << \" L\\n \" ;"
      ],
      "err_line": 35,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        38,
        16
      ],
      "mod_code": [
        "s . push ( good ) ;",
        "cout << \" L\\n \" ;"
      ],
      "err_line": 38,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘push’"
    },
    {
      "mod_line": [
        21,
        35
      ],
      "mod_code": [
        "if ( s = \" a \" )",
        "break break ;"
      ],
      "err_line": 21,
      "err_msg": "could not convert ‘s.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"a\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        21,
        35,
        38
      ],
      "mod_code": [
        "if ( s = \" a \" )",
        "break break ;",
        "s += good ;"
      ],
      "err_line": 21,
      "err_msg": "could not convert ‘s.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"a\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        21,
        35,
        38,
        16
      ],
      "mod_code": [
        "if ( s = \" a \" )",
        "break break ;",
        "s += good ;",
        "cout << \" L\\n \" ;"
      ],
      "err_line": 21,
      "err_msg": "could not convert ‘s.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"a\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        21,
        35,
        16
      ],
      "mod_code": [
        "if ( s = \" a \" )",
        "break break ;",
        "cout << \" L\\n \" ;"
      ],
      "err_line": 21,
      "err_msg": "could not convert ‘s.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"a\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        21,
        38
      ],
      "mod_code": [
        "if ( s = \" a \" )",
        "s += good ;"
      ],
      "err_line": 21,
      "err_msg": "could not convert ‘s.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"a\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        21,
        38,
        16
      ],
      "mod_code": [
        "if ( s = \" a \" )",
        "s += good ;",
        "cout << \" L\\n \" ;"
      ],
      "err_line": 21,
      "err_msg": "could not convert ‘s.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"a\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        21,
        16
      ],
      "mod_code": [
        "if ( s = \" a \" )",
        "cout << \" L\\n \" ;"
      ],
      "err_line": 21,
      "err_msg": "could not convert ‘s.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=<char, std::char_traits<char>, std::allocator<char> >(((const char*)\"a\"))’ from ‘std::__cxx11::basic_string<char>’ to ‘bool’"
    },
    {
      "mod_line": [
        35,
        38
      ],
      "mod_code": [
        "break break ;",
        "s += good ;"
      ],
      "err_line": 35,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        35,
        38,
        16
      ],
      "mod_code": [
        "break break ;",
        "s += good ;",
        "cout << \" L\\n \" ;"
      ],
      "err_line": 35,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        35,
        16
      ],
      "mod_code": [
        "break break ;",
        "cout << \" L\\n \" ;"
      ],
      "err_line": 35,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}