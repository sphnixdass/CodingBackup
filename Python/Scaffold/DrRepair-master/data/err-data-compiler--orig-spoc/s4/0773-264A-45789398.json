{
  "meta": {
    "index": 773,
    "hitid": "375VSR8FVW3QDKP3PBBJHNRBC09ZR5",
    "workerid": "AIWEXPJAU66D9",
    "probid": "264A",
    "subid": "45789398"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant long long maxn = 2 * 1e6 + 2",
      "code": "const long long maxn = 2 * 1e6 + 2 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "arr is a new array of long longs with size maxn",
      "code": "long long arr [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create string variable s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s from the input",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare new long long variables f = maxn / 2 , l = maxn / 2 - 1 and r = maxn / 2 + 1",
      "code": "long long f = maxn / 2 , l = maxn / 2 - 1 , r = maxn / 2 + 1 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "assign 1 to arr [ f ]",
      "code": "arr [ f ] = 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for integer i = 1 to length of s exclusive incrementing i",
      "code": "for ( int i = 1 ; i < s . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if s [ i ] is equal to ' l '",
      "code": "if ( s [ i ] == ' l ' )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "change the value of arr [ l ] to i + 1",
      "code": "arr [ l ] = i + 1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "decrement l",
      "code": "l -- ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set arr [ r ] to i + 1",
      "code": "arr [ r ] = i + 1 ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment r by one",
      "code": "r ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if s [ 0 ] is equal to ' l '",
      "code": "if ( s [ 0 ] == ' l ' )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "start for loop from i = f + 1 to maxn exclusive",
      "code": "for ( int i = f + 1 ; i < maxn ; i ++ )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if arr [ i ] ! = 0 , print arr [ i ] and \" \\ n \"",
      "code": "if ( arr [ i ] != 0 ) cout << arr [ i ] << \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "start for loop from i = l to f inclusive",
      "code": "for ( int i = l ; i <= f ; i ++ )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if arr [ i ] ! = 0 , print arr [ i ] and \" \\ n \"",
      "code": "if ( arr [ i ] != 0 ) cout << arr [ i ] << \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 24,
      "text": "in a for loop , change i from f to maxn exclusive",
      "code": "for ( int i = f ; i < maxn ; i ++ )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if arr [ i ] ! = 0 , print arr [ i ] and \" \\ n \" to the output",
      "code": "if ( arr [ i ] != 0 ) cout << arr [ i ] << \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "in a for loop , change i from l to f exclusive incrementing i",
      "code": "for ( int i = l ; i < f ; i ++ )",
      "indent": 2
    },
    {
      "line": 28,
      "text": "if arr [ i ] ! = 0 , print arr [ i ] and \" \\ n \"",
      "code": "if ( arr [ i ] != 0 ) cout << arr [ i ] << \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( cin >> s )"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "arr [ f ] ] = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "for ( i = l ; i <= f ; i ++ )"
      ],
      "err_line": 20,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "for ( i = l ; i < f ; i ++ )"
      ],
      "err_line": 27,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "while ( cin >> s )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        4,
        6
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "while ( cin >> s )",
        "arr [ f ] ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        4,
        6,
        23
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "while ( cin >> s )",
        "arr [ f ] ] = 1 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        4,
        6,
        27
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "while ( cin >> s )",
        "arr [ f ] ] = 1 ;",
        "for ( i = l ; i < f ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        4,
        6,
        11
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "while ( cin >> s )",
        "arr [ f ] ] = 1 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        4,
        23
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "while ( cin >> s )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        4,
        23,
        27
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "while ( cin >> s )",
        "else else",
        "for ( i = l ; i < f ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        4,
        23,
        11
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "while ( cin >> s )",
        "else else",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        4,
        27
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "while ( cin >> s )",
        "for ( i = l ; i < f ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        4,
        27,
        11
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "while ( cin >> s )",
        "for ( i = l ; i < f ; i ++ )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        4,
        11
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "while ( cin >> s )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "arr [ f ] ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        6,
        23
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "arr [ f ] ] = 1 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        6,
        23,
        27
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "arr [ f ] ] = 1 ;",
        "else else",
        "for ( i = l ; i < f ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        6,
        23,
        11
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "arr [ f ] ] = 1 ;",
        "else else",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        6,
        27
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "arr [ f ] ] = 1 ;",
        "for ( i = l ; i < f ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        6,
        27,
        11
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "arr [ f ] ] = 1 ;",
        "for ( i = l ; i < f ; i ++ )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        6,
        11
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "arr [ f ] ] = 1 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        23
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        23,
        27
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "else else",
        "for ( i = l ; i < f ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        23,
        27,
        11
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "else else",
        "for ( i = l ; i < f ; i ++ )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        23,
        11
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "else else",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        27
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "for ( i = l ; i < f ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        27,
        11
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "for ( i = l ; i < f ; i ++ )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "long long maxn = 2 * 1e6 + 2 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "while ( cin >> s )",
        "arr [ f ] ] = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        23
      ],
      "mod_code": [
        "while ( cin >> s )",
        "arr [ f ] ] = 1 ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        23,
        27
      ],
      "mod_code": [
        "while ( cin >> s )",
        "arr [ f ] ] = 1 ;",
        "else else",
        "for ( i = l ; i < f ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        23,
        11
      ],
      "mod_code": [
        "while ( cin >> s )",
        "arr [ f ] ] = 1 ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        27
      ],
      "mod_code": [
        "while ( cin >> s )",
        "arr [ f ] ] = 1 ;",
        "for ( i = l ; i < f ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        27,
        11
      ],
      "mod_code": [
        "while ( cin >> s )",
        "arr [ f ] ] = 1 ;",
        "for ( i = l ; i < f ; i ++ )",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        11
      ],
      "mod_code": [
        "while ( cin >> s )",
        "arr [ f ] ] = 1 ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        23
      ],
      "mod_code": [
        "while ( cin >> s )",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        23,
        27
      ],
      "mod_code": [
        "while ( cin >> s )",
        "else else",
        "for ( i = l ; i < f ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        23,
        27,
        11
      ],
      "mod_code": [
        "while ( cin >> s )",
        "else else",
        "for ( i = l ; i < f ; i ++ )",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        23,
        11
      ],
      "mod_code": [
        "while ( cin >> s )",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        27
      ],
      "mod_code": [
        "while ( cin >> s )",
        "for ( i = l ; i < f ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        27,
        11
      ],
      "mod_code": [
        "while ( cin >> s )",
        "for ( i = l ; i < f ; i ++ )",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "while ( cin >> s )",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        23
      ],
      "mod_code": [
        "arr [ f ] ] = 1 ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        23,
        27
      ],
      "mod_code": [
        "arr [ f ] ] = 1 ;",
        "else else",
        "for ( i = l ; i < f ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        23,
        27,
        11
      ],
      "mod_code": [
        "arr [ f ] ] = 1 ;",
        "else else",
        "for ( i = l ; i < f ; i ++ )",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        23,
        11
      ],
      "mod_code": [
        "arr [ f ] ] = 1 ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        27
      ],
      "mod_code": [
        "arr [ f ] ] = 1 ;",
        "for ( i = l ; i < f ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        27,
        11
      ],
      "mod_code": [
        "arr [ f ] ] = 1 ;",
        "for ( i = l ; i < f ; i ++ )",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "arr [ f ] ] = 1 ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        23,
        27
      ],
      "mod_code": [
        "else else",
        "for ( i = l ; i < f ; i ++ )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        27,
        11
      ],
      "mod_code": [
        "else else",
        "for ( i = l ; i < f ; i ++ )",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        11
      ],
      "mod_code": [
        "else else",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        27,
        11
      ],
      "mod_code": [
        "for ( i = l ; i < f ; i ++ )",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}