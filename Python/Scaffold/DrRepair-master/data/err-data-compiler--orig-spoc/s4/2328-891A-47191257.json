{
  "meta": {
    "index": 2328,
    "hitid": "3VLL1PIENQING7XNXJUFNSM60QROZC",
    "workerid": "A1AYVATMT88U1W",
    "probid": "891A",
    "subid": "47191257"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n be a integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let int p [ n ] , count , gcd be integers with count is equal to 0 and gcd is equal to 0",
      "code": "int p [ n ] , count = 0 , gcd = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read p [ i ]",
      "code": "cin >> p [ i ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if ( p [ i ] is equal to1 ) , increase count by 1",
      "code": "if ( p [ i ] == 1 ) count ++ ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "the value of gcd is equal to __gcd ( gcd , p [ i ] )",
      "code": "gcd = __gcd ( gcd , p [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "check if ( count )",
      "code": "if ( count )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print n - count and endl ;",
      "code": "cout << n - count << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else if ( gcd is not equal to 1 )",
      "code": "else if ( gcd != 1 )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print - 1 and newline",
      "code": "cout << - 1 << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "let integer value minmum is equal to INT_MAX ;",
      "code": "int minmum = INT_MAX ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "initialize integer value gcd to 0",
      "code": "int gcd = 0 ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "for j = i to n exclusive",
      "code": "for ( int j = i ; j < n ; j ++ )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "gcd is equal to __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) )",
      "code": "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ) ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "if ( gcd is equal to 1 ) minmum is equal to min ( minmum , j - i ) ;",
      "code": "if ( gcd == 1 ) minmum = min ( minmum , j - i ) ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print minmum + n - 1 and newline",
      "code": "cout << minmum + n - 1 << endl ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( p [ i ] == ) ) count ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else if ( gcd ( gcd ) != 1 )"
      ],
      "err_line": 11,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int p [ n ] , count = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘gcd’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "p >> p [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( p [ i ] == to1 ) count ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘to1’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "gcd += gcd ( gcd , p [ i ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( count ( count ) )"
      ],
      "err_line": 9,
      "err_msg": "‘count’ cannot be used as a function"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else if ( gcd ( gcd ) == 1 )"
      ],
      "err_line": 11,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "minmum = INT_MAX ;"
      ],
      "err_line": 14,
      "err_msg": "‘minmum’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "int gcd gcd = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘gcd’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( j = i ; j < n ; j ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( gcd == min ( minmum , j - i ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "if ( p [ i ] == ) ) count ++ ;",
        "else if ( gcd ( gcd ) != 1 )"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        11,
        14
      ],
      "mod_code": [
        "if ( p [ i ] == ) ) count ++ ;",
        "else if ( gcd ( gcd ) != 1 )",
        "minmum = INT_MAX ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        11,
        14,
        18
      ],
      "mod_code": [
        "if ( p [ i ] == ) ) count ++ ;",
        "else if ( gcd ( gcd ) != 1 )",
        "minmum = INT_MAX ;",
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        11,
        14,
        15
      ],
      "mod_code": [
        "if ( p [ i ] == ) ) count ++ ;",
        "else if ( gcd ( gcd ) != 1 )",
        "minmum = INT_MAX ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        11,
        18
      ],
      "mod_code": [
        "if ( p [ i ] == ) ) count ++ ;",
        "else if ( gcd ( gcd ) != 1 )",
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        11,
        18,
        15
      ],
      "mod_code": [
        "if ( p [ i ] == ) ) count ++ ;",
        "else if ( gcd ( gcd ) != 1 )",
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        11,
        15
      ],
      "mod_code": [
        "if ( p [ i ] == ) ) count ++ ;",
        "else if ( gcd ( gcd ) != 1 )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "if ( p [ i ] == ) ) count ++ ;",
        "minmum = INT_MAX ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        14,
        18
      ],
      "mod_code": [
        "if ( p [ i ] == ) ) count ++ ;",
        "minmum = INT_MAX ;",
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        14,
        18,
        15
      ],
      "mod_code": [
        "if ( p [ i ] == ) ) count ++ ;",
        "minmum = INT_MAX ;",
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        14,
        15
      ],
      "mod_code": [
        "if ( p [ i ] == ) ) count ++ ;",
        "minmum = INT_MAX ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        18
      ],
      "mod_code": [
        "if ( p [ i ] == ) ) count ++ ;",
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        18,
        15
      ],
      "mod_code": [
        "if ( p [ i ] == ) ) count ++ ;",
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "if ( p [ i ] == ) ) count ++ ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "else if ( gcd ( gcd ) != 1 )",
        "minmum = INT_MAX ;"
      ],
      "err_line": 11,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        11,
        14,
        18
      ],
      "mod_code": [
        "else if ( gcd ( gcd ) != 1 )",
        "minmum = INT_MAX ;",
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        11,
        14,
        18,
        15
      ],
      "mod_code": [
        "else if ( gcd ( gcd ) != 1 )",
        "minmum = INT_MAX ;",
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        11,
        14,
        18,
        6
      ],
      "mod_code": [
        "else if ( gcd ( gcd ) != 1 )",
        "minmum = INT_MAX ;",
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;",
        "if ( p [ i ] == to1 ) count ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘to1’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        14,
        15
      ],
      "mod_code": [
        "else if ( gcd ( gcd ) != 1 )",
        "minmum = INT_MAX ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        11,
        14,
        15,
        6
      ],
      "mod_code": [
        "else if ( gcd ( gcd ) != 1 )",
        "minmum = INT_MAX ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( p [ i ] == to1 ) count ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘to1’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        14,
        6
      ],
      "mod_code": [
        "else if ( gcd ( gcd ) != 1 )",
        "minmum = INT_MAX ;",
        "if ( p [ i ] == to1 ) count ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘to1’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        18
      ],
      "mod_code": [
        "else if ( gcd ( gcd ) != 1 )",
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        11,
        18,
        15
      ],
      "mod_code": [
        "else if ( gcd ( gcd ) != 1 )",
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        11,
        18,
        15,
        6
      ],
      "mod_code": [
        "else if ( gcd ( gcd ) != 1 )",
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( p [ i ] == to1 ) count ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘to1’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        18,
        6
      ],
      "mod_code": [
        "else if ( gcd ( gcd ) != 1 )",
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;",
        "if ( p [ i ] == to1 ) count ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘to1’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        15
      ],
      "mod_code": [
        "else if ( gcd ( gcd ) != 1 )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘gcd’ cannot be used as a function"
    },
    {
      "mod_line": [
        11,
        15,
        6
      ],
      "mod_code": [
        "else if ( gcd ( gcd ) != 1 )",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( p [ i ] == to1 ) count ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘to1’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "else if ( gcd ( gcd ) != 1 )",
        "if ( p [ i ] == to1 ) count ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘to1’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        18
      ],
      "mod_code": [
        "minmum = INT_MAX ;",
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘minmum’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        18,
        15
      ],
      "mod_code": [
        "minmum = INT_MAX ;",
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘minmum’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        18,
        15,
        6
      ],
      "mod_code": [
        "minmum = INT_MAX ;",
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( p [ i ] == to1 ) count ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘to1’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        18,
        6
      ],
      "mod_code": [
        "minmum = INT_MAX ;",
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;",
        "if ( p [ i ] == to1 ) count ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘to1’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15
      ],
      "mod_code": [
        "minmum = INT_MAX ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘minmum’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        6
      ],
      "mod_code": [
        "minmum = INT_MAX ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( p [ i ] == to1 ) count ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘to1’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        6
      ],
      "mod_code": [
        "minmum = INT_MAX ;",
        "if ( p [ i ] == to1 ) count ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘to1’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        15
      ],
      "mod_code": [
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        15,
        6
      ],
      "mod_code": [
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( p [ i ] == to1 ) count ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘to1’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        6
      ],
      "mod_code": [
        "gcd = __gcd ( gcd , __gcd ( p [ j ] , p [ i ] ) ;",
        "if ( p [ i ] == to1 ) count ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘to1’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( p [ i ] == to1 ) count ++ ;"
      ],
      "err_line": 6,
      "err_msg": "‘to1’ was not declared in this scope"
    }
  ]
}