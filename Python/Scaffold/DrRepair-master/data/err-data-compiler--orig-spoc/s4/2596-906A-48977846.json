{
  "meta": {
    "index": 2596,
    "hitid": "3FDWKV9VCNWIU5I1EGGUEWIM4VUUMM",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "906A",
    "subid": "48977846"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant int M = 100010",
      "code": "const int M = 100010 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let int n and int arrays mark of size M , mark0 of size M , and no of size M",
      "code": "int n , mark [ M ] , mark0 [ M ] , no [ M ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let char c and char array s of size M",
      "code": "char c , s [ M ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "let integers f1 = 0 , f2 = 0 , have = 26 , ok = 0 , ans = 0",
      "code": "int f1 = 0 , f2 = 0 , have = 26 , ok = 0 , ans = 0 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "assign 0 to all contents of mark0",
      "code": "memset ( mark0 , 0 , sizeof ( mark0 ) ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set 0 to everything in mark",
      "code": "memset ( mark , 0 , sizeof ( mark ) ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set everything in no to 0",
      "code": "memset ( no , 0 , sizeof ( no ) ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 97 to 122 , set mark [ i ] to 1",
      "code": "for ( int i = 97 ; i <= 122 ; i ++ ) mark [ i ] = 1 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "let int l",
      "code": "int l ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 1 to n",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read c and s",
      "code": "cin >> c >> s ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "increment f2",
      "code": "f2 ++ ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set l to strlen ( s )",
      "code": "l = strlen ( s ) ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if c is equal to ' ! '",
      "code": "if ( c == ' ! ' )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "increase f1 by 1",
      "code": "f1 ++ ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "if ok is equal to 1",
      "code": "if ( ok == 1 )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "increment ans",
      "code": "ans ++ ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "continue to next loop iteration",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 21,
      "text": "if f1 is equal to 1",
      "code": "if ( f1 == 1 )",
      "indent": 3
    },
    {
      "line": 22,
      "text": "set have to 0",
      "code": "have = 0 ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "set indices 97 to 122 to 0 in mark",
      "code": "for ( int i = 97 ; i <= 122 ; i ++ ) mark [ i ] = 0 ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "for i = 0 to l exclusive",
      "code": "for ( int i = 0 ; i < l ; i ++ )",
      "indent": 4
    },
    {
      "line": 25,
      "text": "if ! mark [ s [ i ] ] and ! no [ s [ i ] ] are truthy",
      "code": "if ( ! mark [ s [ i ] ] && ! no [ s [ i ] ] )",
      "indent": 5
    },
    {
      "line": 26,
      "text": "increment have",
      "code": "have ++ ;",
      "indent": 6
    },
    {
      "line": 27,
      "text": "set mark [ s [ i ] ] to 1",
      "code": "mark [ s [ i ] ] = 1 ;",
      "indent": 6
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 30,
      "text": "if have is 1 , set ok to 1",
      "code": "if ( have == 1 ) ok = 1 ;",
      "indent": 4
    },
    {
      "line": 31,
      "text": "otherwise do",
      "code": "else",
      "indent": 3
    },
    {
      "line": 32,
      "text": "set everything in mark0 to 0",
      "code": "memset ( mark0 , 0 , sizeof ( mark0 ) ) ;",
      "indent": 4
    },
    {
      "line": 33,
      "text": "for i = 0 to l exclusive , set mark0 [ s [ i ] ] to 1",
      "code": "for ( int i = 0 ; i < l ; i ++ ) mark0 [ s [ i ] ] = 1 ;",
      "indent": 4
    },
    {
      "line": 34,
      "text": "for i = 97 to 122",
      "code": "for ( int i = 97 ; i <= 122 ; i ++ )",
      "indent": 4
    },
    {
      "line": 35,
      "text": "if mark [ i ] and ! mark0 [ i ] equal truthy",
      "code": "if ( mark [ i ] && ! mark0 [ i ] )",
      "indent": 5
    },
    {
      "line": 36,
      "text": "set mark [ i ] to 0",
      "code": "mark [ i ] = 0 ;",
      "indent": 6
    },
    {
      "line": 37,
      "text": "decrease have by 1",
      "code": "have -- ;",
      "indent": 6
    },
    {
      "line": 38,
      "text": "if have is equal to 1 , set ok to 1",
      "code": "if ( have == 1 ) ok = 1 ;",
      "indent": 6
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 42,
      "text": "if c is equal to ' ? '",
      "code": "if ( c == ' ? ' )",
      "indent": 2
    },
    {
      "line": 43,
      "text": "if f2 is n , continute to next loop iteration",
      "code": "if ( f2 == n ) continue ;",
      "indent": 3
    },
    {
      "line": 44,
      "text": "if ok is 1",
      "code": "if ( ok == 1 )",
      "indent": 3
    },
    {
      "line": 45,
      "text": "increment ans",
      "code": "ans ++ ;",
      "indent": 4
    },
    {
      "line": 46,
      "text": "continue to next loop iteration",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 48,
      "text": "if no [ s [ 0 ] is equal to 1",
      "code": "no [ s [ 0 ] ] = 1 ;",
      "indent": 3
    },
    {
      "line": 49,
      "text": "if mark [ s [ 0 ] ] is 1",
      "code": "if ( mark [ s [ 0 ] ] == 1 )",
      "indent": 3
    },
    {
      "line": 50,
      "text": "set mark [ s [ 0 ] ] to 0",
      "code": "mark [ s [ 0 ] ] = 0 ;",
      "indent": 4
    },
    {
      "line": 51,
      "text": "decrease have by 1",
      "code": "have -- ;",
      "indent": 4
    },
    {
      "line": 52,
      "text": "if have is 1 , set ok to 1",
      "code": "if ( have == 1 ) ok = 1 ;",
      "indent": 4
    },
    {
      "line": 53,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 54,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 55,
      "text": "if c is equal to ' . '",
      "code": "if ( c == ' . ' )",
      "indent": 2
    },
    {
      "line": 56,
      "text": "if ok is 1 , continute to next loop iteration",
      "code": "if ( ok == 1 ) continue ;",
      "indent": 3
    },
    {
      "line": 57,
      "text": "for i = 0 to l exclusive",
      "code": "for ( int i = 0 ; i < l ; i ++ )",
      "indent": 3
    },
    {
      "line": 58,
      "text": "if mark [ s [ i ] ] is 1",
      "code": "if ( mark [ s [ i ] ] == 1 )",
      "indent": 4
    },
    {
      "line": 59,
      "text": "set no [ s [ i ] ] to 1",
      "code": "no [ s [ i ] ] = 1 ;",
      "indent": 5
    },
    {
      "line": 60,
      "text": "set mark [ s [ i ] ] to 0",
      "code": "mark [ s [ i ] ] = 0 ;",
      "indent": 5
    },
    {
      "line": 61,
      "text": "reduce have by 1",
      "code": "have -- ;",
      "indent": 5
    },
    {
      "line": 62,
      "text": "if have is equal to 1 , set ok to 1",
      "code": "if ( have == 1 ) ok = 1 ;",
      "indent": 5
    },
    {
      "line": 63,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 64,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 65,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 66,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 67,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char s , s [ M ] ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘char s [100010]’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "mark . resize ( 0 ) ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘resize’ in ‘mark’, which is of non-class type ‘int [100010]’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "memset ( mark , 0 , 97 = 0 ) ;"
      ],
      "err_line": 23,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        48
      ],
      "mod_code": [
        "if ( no [ s [ 0 ] == 1 )"
      ],
      "err_line": 48,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , mark0 [ M ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "memset ( mark0 , mark0 + n ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "mark . clear ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘clear’ in ‘mark’, which is of non-class type ‘int [100010]’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "memset ( no , 0 , sizeof ( ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int * l ;"
      ],
      "err_line": 14,
      "err_msg": "invalid conversion from ‘size_t {aka long unsigned int}’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "c >> c >> s ;"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘int’ and ‘char [100010]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "continue continue ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "memset ( 97 , 0 , 97 = 0 ) ;"
      ],
      "err_line": 23,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 27,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 41,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        46
      ],
      "mod_code": [
        "continue continue ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        48
      ],
      "mod_code": [
        "if ( no [ s [ 0 ] == ' 1 ' )"
      ],
      "err_line": 48,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        50
      ],
      "mod_code": [
        "mark [ s [ 0 ] ] ] = 0 ;"
      ],
      "err_line": 50,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        59
      ],
      "mod_code": [
        "no [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 59,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        60
      ],
      "mod_code": [
        "mark [ s [ i ] ] ] = 0 ;"
      ],
      "err_line": 60,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "char s , s [ M ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        2,
        6
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "char s , s [ M ] ;",
        "mark . resize ( 0 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        23
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "char s , s [ M ] ;",
        "mark . resize ( 0 ) ;",
        "memset ( mark , 0 , 97 = 0 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        48
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "char s , s [ M ] ;",
        "mark . resize ( 0 ) ;",
        "if ( no [ s [ 0 ] == 1 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        27
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "char s , s [ M ] ;",
        "mark . resize ( 0 ) ;",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        2,
        23
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "char s , s [ M ] ;",
        "memset ( mark , 0 , 97 = 0 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        2,
        23,
        48
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "char s , s [ M ] ;",
        "memset ( mark , 0 , 97 = 0 ) ;",
        "if ( no [ s [ 0 ] == 1 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        2,
        23,
        27
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "char s , s [ M ] ;",
        "memset ( mark , 0 , 97 = 0 ) ;",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        2,
        48
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "char s , s [ M ] ;",
        "if ( no [ s [ 0 ] == 1 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        2,
        48,
        27
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "char s , s [ M ] ;",
        "if ( no [ s [ 0 ] == 1 )",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        2,
        27
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "char s , s [ M ] ;",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "mark . resize ( 0 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        6,
        23
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "mark . resize ( 0 ) ;",
        "memset ( mark , 0 , 97 = 0 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        6,
        23,
        48
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "mark . resize ( 0 ) ;",
        "memset ( mark , 0 , 97 = 0 ) ;",
        "if ( no [ s [ 0 ] == 1 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        6,
        23,
        27
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "mark . resize ( 0 ) ;",
        "memset ( mark , 0 , 97 = 0 ) ;",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        6,
        48
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "mark . resize ( 0 ) ;",
        "if ( no [ s [ 0 ] == 1 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        6,
        48,
        27
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "mark . resize ( 0 ) ;",
        "if ( no [ s [ 0 ] == 1 )",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        6,
        27
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "mark . resize ( 0 ) ;",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        23
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "memset ( mark , 0 , 97 = 0 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        23,
        48
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "memset ( mark , 0 , 97 = 0 ) ;",
        "if ( no [ s [ 0 ] == 1 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        23,
        48,
        27
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "memset ( mark , 0 , 97 = 0 ) ;",
        "if ( no [ s [ 0 ] == 1 )",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        23,
        27
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "memset ( mark , 0 , 97 = 0 ) ;",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        48
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "if ( no [ s [ 0 ] == 1 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        48,
        27
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "if ( no [ s [ 0 ] == 1 )",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        1,
        27
      ],
      "mod_code": [
        "int n , mark0 [ M ] , mark0 [ M ] , no [ M ] ;",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int mark0 [100010]’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "char s , s [ M ] ;",
        "mark . resize ( 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘char s [100010]’"
    },
    {
      "mod_line": [
        2,
        6,
        23
      ],
      "mod_code": [
        "char s , s [ M ] ;",
        "mark . resize ( 0 ) ;",
        "memset ( mark , 0 , 97 = 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘char s [100010]’"
    },
    {
      "mod_line": [
        2,
        6,
        23,
        48
      ],
      "mod_code": [
        "char s , s [ M ] ;",
        "mark . resize ( 0 ) ;",
        "memset ( mark , 0 , 97 = 0 ) ;",
        "if ( no [ s [ 0 ] == 1 )"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘char s [100010]’"
    },
    {
      "mod_line": [
        2,
        6,
        23,
        27
      ],
      "mod_code": [
        "char s , s [ M ] ;",
        "mark . resize ( 0 ) ;",
        "memset ( mark , 0 , 97 = 0 ) ;",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘char s [100010]’"
    },
    {
      "mod_line": [
        2,
        6,
        48
      ],
      "mod_code": [
        "char s , s [ M ] ;",
        "mark . resize ( 0 ) ;",
        "if ( no [ s [ 0 ] == 1 )"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘char s [100010]’"
    },
    {
      "mod_line": [
        2,
        6,
        48,
        27
      ],
      "mod_code": [
        "char s , s [ M ] ;",
        "mark . resize ( 0 ) ;",
        "if ( no [ s [ 0 ] == 1 )",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘char s [100010]’"
    },
    {
      "mod_line": [
        2,
        6,
        27
      ],
      "mod_code": [
        "char s , s [ M ] ;",
        "mark . resize ( 0 ) ;",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘char s [100010]’"
    },
    {
      "mod_line": [
        2,
        23
      ],
      "mod_code": [
        "char s , s [ M ] ;",
        "memset ( mark , 0 , 97 = 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘char s [100010]’"
    },
    {
      "mod_line": [
        2,
        23,
        48
      ],
      "mod_code": [
        "char s , s [ M ] ;",
        "memset ( mark , 0 , 97 = 0 ) ;",
        "if ( no [ s [ 0 ] == 1 )"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘char s [100010]’"
    },
    {
      "mod_line": [
        2,
        23,
        48,
        27
      ],
      "mod_code": [
        "char s , s [ M ] ;",
        "memset ( mark , 0 , 97 = 0 ) ;",
        "if ( no [ s [ 0 ] == 1 )",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘char s [100010]’"
    },
    {
      "mod_line": [
        2,
        23,
        27
      ],
      "mod_code": [
        "char s , s [ M ] ;",
        "memset ( mark , 0 , 97 = 0 ) ;",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘char s [100010]’"
    },
    {
      "mod_line": [
        2,
        48
      ],
      "mod_code": [
        "char s , s [ M ] ;",
        "if ( no [ s [ 0 ] == 1 )"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘char s [100010]’"
    },
    {
      "mod_line": [
        2,
        48,
        27
      ],
      "mod_code": [
        "char s , s [ M ] ;",
        "if ( no [ s [ 0 ] == 1 )",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘char s [100010]’"
    },
    {
      "mod_line": [
        2,
        27
      ],
      "mod_code": [
        "char s , s [ M ] ;",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘char s [100010]’"
    },
    {
      "mod_line": [
        6,
        23
      ],
      "mod_code": [
        "mark . resize ( 0 ) ;",
        "memset ( mark , 0 , 97 = 0 ) ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘resize’ in ‘mark’, which is of non-class type ‘int [100010]’"
    },
    {
      "mod_line": [
        6,
        23,
        48
      ],
      "mod_code": [
        "mark . resize ( 0 ) ;",
        "memset ( mark , 0 , 97 = 0 ) ;",
        "if ( no [ s [ 0 ] == 1 )"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘resize’ in ‘mark’, which is of non-class type ‘int [100010]’"
    },
    {
      "mod_line": [
        6,
        23,
        48,
        27
      ],
      "mod_code": [
        "mark . resize ( 0 ) ;",
        "memset ( mark , 0 , 97 = 0 ) ;",
        "if ( no [ s [ 0 ] == 1 )",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘resize’ in ‘mark’, which is of non-class type ‘int [100010]’"
    },
    {
      "mod_line": [
        6,
        23,
        27
      ],
      "mod_code": [
        "mark . resize ( 0 ) ;",
        "memset ( mark , 0 , 97 = 0 ) ;",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘resize’ in ‘mark’, which is of non-class type ‘int [100010]’"
    },
    {
      "mod_line": [
        6,
        48
      ],
      "mod_code": [
        "mark . resize ( 0 ) ;",
        "if ( no [ s [ 0 ] == 1 )"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘resize’ in ‘mark’, which is of non-class type ‘int [100010]’"
    },
    {
      "mod_line": [
        6,
        48,
        27
      ],
      "mod_code": [
        "mark . resize ( 0 ) ;",
        "if ( no [ s [ 0 ] == 1 )",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘resize’ in ‘mark’, which is of non-class type ‘int [100010]’"
    },
    {
      "mod_line": [
        6,
        27
      ],
      "mod_code": [
        "mark . resize ( 0 ) ;",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘resize’ in ‘mark’, which is of non-class type ‘int [100010]’"
    },
    {
      "mod_line": [
        23,
        48
      ],
      "mod_code": [
        "memset ( mark , 0 , 97 = 0 ) ;",
        "if ( no [ s [ 0 ] == 1 )"
      ],
      "err_line": 23,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        23,
        48,
        27
      ],
      "mod_code": [
        "memset ( mark , 0 , 97 = 0 ) ;",
        "if ( no [ s [ 0 ] == 1 )",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 23,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        23,
        27
      ],
      "mod_code": [
        "memset ( mark , 0 , 97 = 0 ) ;",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 23,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        48,
        27
      ],
      "mod_code": [
        "if ( no [ s [ 0 ] == 1 )",
        "mark [ s [ i ] ] ] = 1 ;"
      ],
      "err_line": 27,
      "err_msg": "expected ‘;’ before ‘]’ token"
    }
  ]
}