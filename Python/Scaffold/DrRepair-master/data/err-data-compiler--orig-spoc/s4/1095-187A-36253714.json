{
  "meta": {
    "index": 1095,
    "hitid": "3U74KRR67MF9CAOCQC5KMFLKPK1NTH",
    "workerid": "A1APYLD4DUK33J",
    "probid": "187A",
    "subid": "36253714"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer N with N = 2e6 + 6",
      "code": "const int N = 2e6 + 6 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer arrays pos , id , arr , BIT , brr with pos size N , id size N , arr size N , BIT size N , brr size N",
      "code": "int pos [ N ] , id [ N ] , arr [ N ] , BIT [ N ] , brr [ N ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare updt with integers idx , x as arguments , returning void",
      "code": "void updt ( int idx , int x )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "while idx is less than or equal to N / 10 , increment BIT [ idx ] by x , increment idx by ( idx bitwise and - idx )",
      "code": "while ( idx <= N / 10 ) BIT [ idx ] += x , idx += ( idx & - idx ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "declare qry with integer idx as argument , returning integer",
      "code": "int qry ( int idx )",
      "indent": 0
    },
    {
      "line": 6,
      "text": "create integer ret with ret = 0",
      "code": "int ret = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "while idx is greater than or equal to 1 , increment ret by BIT [ idx ] , decrement idx by ( idx bitwise and - idx )",
      "code": "while ( idx >= 1 ) ret += BIT [ idx ] , idx -= ( idx & - idx ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return ret from function",
      "code": "return ret ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 11,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read arr [ i ]",
      "code": "cin >> arr [ i ] ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "set pos [ arr [ i ] ] to i",
      "code": "pos [ arr [ i ] ] = i ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = 1 to n inclusive , read brr [ i ]",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) cin >> brr [ i ] ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "create integer mn with mn = 0",
      "code": "int mn = 0 ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "create integer now with now = pos [ brr [ i ] ]",
      "code": "int now = pos [ brr [ i ] ] ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "create integer ret with ret = result of run qry with now as argument",
      "code": "int ret = qry ( now ) ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "increment ret by now",
      "code": "ret += now ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if ret is greater than i",
      "code": "if ( ret > i )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "run updt with 1 , 1 as arguments",
      "code": "updt ( 1 , 1 ) ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "run updt with now , - 1 as arguments",
      "code": "updt ( now , - 1 ) ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "set mn to maximum of mn and n - now + 1",
      "code": "mn = max ( mn , n - now + 1 ) ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "print mn print \" \\ n \"",
      "code": "cout << mn << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const int N = N + 6 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] , brr [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "void updt ( int idx , int x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += x ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int qry ( int idx ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "return ret ret ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘ret’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "long int n ;"
      ],
      "err_line": 26,
      "err_msg": "no matching function for call to ‘max(int&, long int)’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "arr >> arr [ i ] ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘int [2000006]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "pos [ arr [ i ] ] ] = i ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "long int mn = 0 ;"
      ],
      "err_line": 26,
      "err_msg": "no matching function for call to ‘max(long int&, int)’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "int now = pos [ i [ i ] ] ;"
      ],
      "err_line": 20,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "updt = updt ( 1 , 1 ) ;"
      ],
      "err_line": 24,
      "err_msg": "assignment of function ‘void updt(int, int)’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "updt ( updt , - 1 ) ;"
      ],
      "err_line": 25,
      "err_msg": "invalid conversion from ‘void (*)(int, int)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] ;",
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        1,
        3,
        7
      ],
      "mod_code": [
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] ;",
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;",
        "while ( idx >= 1 ) ret += BIT [ idx ] , idx += ( idx & idx ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        1,
        3,
        7,
        11
      ],
      "mod_code": [
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] ;",
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;",
        "while ( idx >= 1 ) ret += BIT [ idx ] , idx += ( idx & idx ) ;",
        "long int n ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        1,
        3,
        7,
        5
      ],
      "mod_code": [
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] ;",
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;",
        "while ( idx >= 1 ) ret += BIT [ idx ] , idx += ( idx & idx ) ;",
        "int qry ( int idx ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        1,
        3,
        11
      ],
      "mod_code": [
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] ;",
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;",
        "long int n ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        1,
        3,
        11,
        5
      ],
      "mod_code": [
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] ;",
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;",
        "long int n ;",
        "int qry ( int idx ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        1,
        3,
        5
      ],
      "mod_code": [
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] ;",
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;",
        "int qry ( int idx ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] ;",
        "while ( idx >= 1 ) ret += BIT [ idx ] , idx += ( idx & idx ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        1,
        7,
        11
      ],
      "mod_code": [
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] ;",
        "while ( idx >= 1 ) ret += BIT [ idx ] , idx += ( idx & idx ) ;",
        "long int n ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        1,
        7,
        11,
        5
      ],
      "mod_code": [
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] ;",
        "while ( idx >= 1 ) ret += BIT [ idx ] , idx += ( idx & idx ) ;",
        "long int n ;",
        "int qry ( int idx ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        1,
        7,
        5
      ],
      "mod_code": [
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] ;",
        "while ( idx >= 1 ) ret += BIT [ idx ] , idx += ( idx & idx ) ;",
        "int qry ( int idx ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] ;",
        "long int n ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        1,
        11,
        5
      ],
      "mod_code": [
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] ;",
        "long int n ;",
        "int qry ( int idx ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] ;",
        "int qry ( int idx ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;",
        "while ( idx >= 1 ) ret += BIT [ idx ] , idx += ( idx & idx ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        7,
        1
      ],
      "mod_code": [
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;",
        "while ( idx >= 1 ) ret += BIT [ idx ] , idx += ( idx & idx ) ;",
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] , brr [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        3,
        7,
        1,
        11
      ],
      "mod_code": [
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;",
        "while ( idx >= 1 ) ret += BIT [ idx ] , idx += ( idx & idx ) ;",
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] , brr [ N ] ;",
        "long int n ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        3,
        7,
        1,
        5
      ],
      "mod_code": [
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;",
        "while ( idx >= 1 ) ret += BIT [ idx ] , idx += ( idx & idx ) ;",
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] , brr [ N ] ;",
        "int qry ( int idx ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        3,
        7,
        11
      ],
      "mod_code": [
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;",
        "while ( idx >= 1 ) ret += BIT [ idx ] , idx += ( idx & idx ) ;",
        "long int n ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        7,
        11,
        5
      ],
      "mod_code": [
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;",
        "while ( idx >= 1 ) ret += BIT [ idx ] , idx += ( idx & idx ) ;",
        "long int n ;",
        "int qry ( int idx ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        7,
        5
      ],
      "mod_code": [
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;",
        "while ( idx >= 1 ) ret += BIT [ idx ] , idx += ( idx & idx ) ;",
        "int qry ( int idx ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;",
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] , brr [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        3,
        1,
        11
      ],
      "mod_code": [
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;",
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] , brr [ N ] ;",
        "long int n ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        3,
        1,
        11,
        5
      ],
      "mod_code": [
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;",
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] , brr [ N ] ;",
        "long int n ;",
        "int qry ( int idx ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        3,
        1,
        5
      ],
      "mod_code": [
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;",
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] , brr [ N ] ;",
        "int qry ( int idx ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;",
        "long int n ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        5
      ],
      "mod_code": [
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;",
        "long int n ;",
        "int qry ( int idx ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "while ( idx <= N / 10 ) BIT [ idx ] += x , idx [ idx ] += - idx ;",
        "int qry ( int idx ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "while ( idx >= 1 ) ret += BIT [ idx ] , idx += ( idx & idx ) ;",
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] , brr [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        7,
        1,
        11
      ],
      "mod_code": [
        "while ( idx >= 1 ) ret += BIT [ idx ] , idx += ( idx & idx ) ;",
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] , brr [ N ] ;",
        "long int n ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        7,
        1,
        11,
        5
      ],
      "mod_code": [
        "while ( idx >= 1 ) ret += BIT [ idx ] , idx += ( idx & idx ) ;",
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] , brr [ N ] ;",
        "long int n ;",
        "int qry ( int idx ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        7,
        1,
        5
      ],
      "mod_code": [
        "while ( idx >= 1 ) ret += BIT [ idx ] , idx += ( idx & idx ) ;",
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] , brr [ N ] ;",
        "int qry ( int idx ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "while ( idx >= 1 ) ret += BIT [ idx ] , idx += ( idx & idx ) ;",
        "long int n ;"
      ],
      "err_line": 26,
      "err_msg": "no matching function for call to ‘max(int&, long int)’"
    },
    {
      "mod_line": [
        7,
        11,
        5
      ],
      "mod_code": [
        "while ( idx >= 1 ) ret += BIT [ idx ] , idx += ( idx & idx ) ;",
        "long int n ;",
        "int qry ( int idx ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "while ( idx >= 1 ) ret += BIT [ idx ] , idx += ( idx & idx ) ;",
        "int qry ( int idx ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] , brr [ N ] ;",
        "long int n ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        1,
        11,
        5
      ],
      "mod_code": [
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] , brr [ N ] ;",
        "long int n ;",
        "int qry ( int idx ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int pos [ N ] , id [ N ] , arr [ N ] , arr [ N ] , arr [ N ] , brr [ N ] ;",
        "int qry ( int idx ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int arr [2000006]’"
    },
    {
      "mod_line": [
        11,
        5
      ],
      "mod_code": [
        "long int n ;",
        "int qry ( int idx ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}