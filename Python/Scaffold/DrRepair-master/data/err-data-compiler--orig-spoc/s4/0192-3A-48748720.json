{
  "meta": {
    "index": 192,
    "hitid": "3UEBBGULPFICOVQKSTCHJ6YD7UIFU0",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "3A",
    "subid": "48748720"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create char arrays a and b of size 10",
      "code": "char a [ 10 ] , b [ 10 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a and b and while a and b are truthy",
      "code": "while ( cin >> a >> b )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let ints x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' , x2 = b [ 0 ] - ' a ' + 1 , and y2 = b [ 1 ] - ' 0 '",
      "code": "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' , x2 = b [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "let int ans = max ( fabs ( x1 - x2 ) , fabs ( y1 - y2 ) )",
      "code": "int ans = max ( fabs ( x1 - x2 ) , fabs ( y1 - y2 ) ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "while ans - - is truthy",
      "code": "while ( ans -- )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if x1 is not equal to x2",
      "code": "if ( x1 != x2 )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "if x1 is greater than x2",
      "code": "if ( x1 > x2 )",
      "indent": 4
    },
    {
      "line": 9,
      "text": "if y1 is equal to y2",
      "code": "if ( y1 == y2 )",
      "indent": 5
    },
    {
      "line": 10,
      "text": "decrease x1 by 1",
      "code": "x1 -- ;",
      "indent": 6
    },
    {
      "line": 11,
      "text": "print \" L \"",
      "code": "cout << \" L \" << endl ;",
      "indent": 6
    },
    {
      "line": 12,
      "text": "else if y1 is more than y2",
      "code": "else if ( y1 > y2 )",
      "indent": 5
    },
    {
      "line": 13,
      "text": "reduce y1 by 1",
      "code": "y1 -- ;",
      "indent": 6
    },
    {
      "line": 14,
      "text": "reduce x1 by 1",
      "code": "x1 -- ;",
      "indent": 6
    },
    {
      "line": 15,
      "text": "print \" LD \"",
      "code": "cout << \" LD \" << endl ;",
      "indent": 6
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 17,
      "text": "reduce y2 by 1",
      "code": "y2 -- ;",
      "indent": 6
    },
    {
      "line": 18,
      "text": "decrease x1 by 1",
      "code": "x1 -- ;",
      "indent": 6
    },
    {
      "line": 19,
      "text": "print \" LU \"",
      "code": "cout << \" LU \" << endl ;",
      "indent": 6
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 21,
      "text": "otherwise do",
      "code": "else",
      "indent": 4
    },
    {
      "line": 22,
      "text": "if y1 is equal to y2",
      "code": "if ( y1 == y2 )",
      "indent": 5
    },
    {
      "line": 23,
      "text": "decrease x2 by 1",
      "code": "x2 -- ;",
      "indent": 6
    },
    {
      "line": 24,
      "text": "print \" R \"",
      "code": "cout << \" R \" << endl ;",
      "indent": 6
    },
    {
      "line": 25,
      "text": "else if y1 is greater than y2",
      "code": "else if ( y1 > y2 )",
      "indent": 5
    },
    {
      "line": 26,
      "text": "reduce y1 by 1",
      "code": "y1 -- ;",
      "indent": 6
    },
    {
      "line": 27,
      "text": "reduce x2 by 1",
      "code": "x2 -- ;",
      "indent": 6
    },
    {
      "line": 28,
      "text": "print \" RD \"",
      "code": "cout << \" RD \" << endl ;",
      "indent": 6
    },
    {
      "line": 29,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 30,
      "text": "reduce y2 by 1",
      "code": "y2 -- ;",
      "indent": 6
    },
    {
      "line": 31,
      "text": "decrease x2 by 1",
      "code": "x2 -- ;",
      "indent": 6
    },
    {
      "line": 32,
      "text": "print \" RU \"",
      "code": "cout << \" RU \" << endl ;",
      "indent": 6
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 35,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 36,
      "text": "if y1 is more than y2",
      "code": "if ( y1 > y2 )",
      "indent": 4
    },
    {
      "line": 37,
      "text": "lessen y1 by 1",
      "code": "y1 -- ;",
      "indent": 5
    },
    {
      "line": 38,
      "text": "print \" D \"",
      "code": "cout << \" D \" << endl ;",
      "indent": 5
    },
    {
      "line": 39,
      "text": "otherwise",
      "code": "else",
      "indent": 4
    },
    {
      "line": 40,
      "text": "reduce y2 by 1",
      "code": "y2 -- ;",
      "indent": 5
    },
    {
      "line": 41,
      "text": "print \" U \"",
      "code": "cout << \" U \" << endl ;",
      "indent": 5
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = b [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = a [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int ans = max ( fabs ( x1 - x2 ) ) , fabs ( y1 - y2 ) ;"
      ],
      "err_line": 4,
      "err_msg": "no matching function for call to ‘max(__gnu_cxx::__enable_if<true, double>::__type)’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 35,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = b [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "while ( cin >> a >> b >> b )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        2,
        24
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = b [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "while ( cin >> a >> b >> b )",
        "cout << \" R \" ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        2,
        24,
        19
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = b [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "while ( cin >> a >> b >> b )",
        "cout << \" R \" ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        2,
        24,
        29
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = b [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "while ( cin >> a >> b >> b )",
        "cout << \" R \" ;",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        2,
        19
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = b [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "while ( cin >> a >> b >> b )",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        2,
        19,
        29
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = b [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "while ( cin >> a >> b >> b )",
        "cout << \" -1 \" << endl ;",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        2,
        29
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = b [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "while ( cin >> a >> b >> b )",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        24
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = b [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "cout << \" R \" ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        24,
        19
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = b [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "cout << \" R \" ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        24,
        19,
        29
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = b [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "cout << \" R \" ;",
        "cout << \" -1 \" << endl ;",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        24,
        29
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = b [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "cout << \" R \" ;",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        19
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = b [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        19,
        29
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = b [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "cout << \" -1 \" << endl ;",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        29
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = b [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "while ( cin >> a >> b >> b )",
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = a [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        2,
        3,
        24
      ],
      "mod_code": [
        "while ( cin >> a >> b >> b )",
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = a [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "cout << \" R \" ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        2,
        3,
        24,
        19
      ],
      "mod_code": [
        "while ( cin >> a >> b >> b )",
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = a [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "cout << \" R \" ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        2,
        3,
        24,
        29
      ],
      "mod_code": [
        "while ( cin >> a >> b >> b )",
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = a [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "cout << \" R \" ;",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        2,
        3,
        19
      ],
      "mod_code": [
        "while ( cin >> a >> b >> b )",
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = a [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        2,
        3,
        19,
        29
      ],
      "mod_code": [
        "while ( cin >> a >> b >> b )",
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = a [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "cout << \" -1 \" << endl ;",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        2,
        3,
        29
      ],
      "mod_code": [
        "while ( cin >> a >> b >> b )",
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = a [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        24
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = a [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "cout << \" R \" ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        24,
        19
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = a [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "cout << \" R \" ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        24,
        19,
        29
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = a [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "cout << \" R \" ;",
        "cout << \" -1 \" << endl ;",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        24,
        29
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = a [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "cout << \" R \" ;",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        19
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = a [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        19,
        29
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = a [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "cout << \" -1 \" << endl ;",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        29
      ],
      "mod_code": [
        "int x1 = a [ 0 ] - ' a ' + 1 , y1 = a [ 1 ] - ' 0 ' + y1 = a [ 0 ] - ' a ' + 1 , y2 = b [ 1 ] - ' 0 ' ;",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    }
  ]
}