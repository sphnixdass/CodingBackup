{
  "meta": {
    "index": 1452,
    "hitid": "3M0556243SEZT56BVS0V5B6JZYQNFH",
    "workerid": "A24WRPQYGMQLGF",
    "probid": "359A",
    "subid": "41670755"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function read that returns an integer",
      "code": "int read ( )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "x = integer = 0",
      "code": "int x = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "c = character , read c",
      "code": "char c = getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while c is not from 0 to 9 , then read c",
      "code": "while ( ! isdigit ( c ) ) c = getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while c is from 0 to 9",
      "code": "while ( isdigit ( c ) )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "x = the bits of x shifted left 1 bit + the bits of x shifted left 3 bits + c - 0",
      "code": "x = ( x << 1 ) + ( x << 3 ) + c - ' 0 ' ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read c",
      "code": "c = getchar ( ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return x",
      "code": "return x ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "m , n = integer",
      "code": "int m , n ;",
      "indent": 0
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 12,
      "text": "read n , m",
      "code": "n = read ( ) , m = read ( ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "t = integer",
      "code": "int t ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 1 to n inclusive",
      "code": "for ( register int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for j = 1 to m inclusive",
      "code": "for ( register int j = 1 ; j <= m ; j ++ )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "read t",
      "code": "t = read ( ) ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "if i is 1 or i is n or j is 1 or j is m and t is nonzero",
      "code": "if ( ( i == 1 || i == n || j == 1 || j == m ) && t )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "print 2",
      "code": "puts ( \" 2 \" ) ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print 4",
      "code": "puts ( \" 4 \" ) ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char c , c ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int read ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( j = 1 ; j <= m ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "char c , c ;",
        "while ( c != 0 ) cin >> c ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        3,
        4
      ],
      "mod_code": [
        "char c , c ;",
        "while ( c != 0 ) cin >> c ;",
        "while ( c == 0 )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        5
      ],
      "mod_code": [
        "char c , c ;",
        "while ( c != 0 ) cin >> c ;",
        "while ( c == 0 )",
        "x - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        6
      ],
      "mod_code": [
        "char c , c ;",
        "while ( c != 0 ) cin >> c ;",
        "while ( c == 0 )",
        "cin >> c ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        17
      ],
      "mod_code": [
        "char c , c ;",
        "while ( c != 0 ) cin >> c ;",
        "while ( c == 0 )",
        "if ( i == 1 || i == n || j == 1 || j == m )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        3,
        5
      ],
      "mod_code": [
        "char c , c ;",
        "while ( c != 0 ) cin >> c ;",
        "x - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        6
      ],
      "mod_code": [
        "char c , c ;",
        "while ( c != 0 ) cin >> c ;",
        "x - 1 ;",
        "cin >> c ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        17
      ],
      "mod_code": [
        "char c , c ;",
        "while ( c != 0 ) cin >> c ;",
        "x - 1 ;",
        "if ( i == 1 || i == n || j == 1 || j == m )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        3,
        6
      ],
      "mod_code": [
        "char c , c ;",
        "while ( c != 0 ) cin >> c ;",
        "cin >> c ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        17
      ],
      "mod_code": [
        "char c , c ;",
        "while ( c != 0 ) cin >> c ;",
        "cin >> c ;",
        "if ( i == 1 || i == n || j == 1 || j == m )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        3,
        17
      ],
      "mod_code": [
        "char c , c ;",
        "while ( c != 0 ) cin >> c ;",
        "if ( i == 1 || i == n || j == 1 || j == m )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "char c , c ;",
        "while ( c == 0 )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        4,
        5
      ],
      "mod_code": [
        "char c , c ;",
        "while ( c == 0 )",
        "x - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        6
      ],
      "mod_code": [
        "char c , c ;",
        "while ( c == 0 )",
        "x - 1 ;",
        "cin >> c ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        17
      ],
      "mod_code": [
        "char c , c ;",
        "while ( c == 0 )",
        "x - 1 ;",
        "if ( i == 1 || i == n || j == 1 || j == m )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        4,
        6
      ],
      "mod_code": [
        "char c , c ;",
        "while ( c == 0 )",
        "cin >> c ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        17
      ],
      "mod_code": [
        "char c , c ;",
        "while ( c == 0 )",
        "cin >> c ;",
        "if ( i == 1 || i == n || j == 1 || j == m )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        4,
        17
      ],
      "mod_code": [
        "char c , c ;",
        "while ( c == 0 )",
        "if ( i == 1 || i == n || j == 1 || j == m )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "char c , c ;",
        "x - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        5,
        6
      ],
      "mod_code": [
        "char c , c ;",
        "x - 1 ;",
        "cin >> c ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        17
      ],
      "mod_code": [
        "char c , c ;",
        "x - 1 ;",
        "cin >> c ;",
        "if ( i == 1 || i == n || j == 1 || j == m )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        5,
        17
      ],
      "mod_code": [
        "char c , c ;",
        "x - 1 ;",
        "if ( i == 1 || i == n || j == 1 || j == m )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "char c , c ;",
        "cin >> c ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        6,
        17
      ],
      "mod_code": [
        "char c , c ;",
        "cin >> c ;",
        "if ( i == 1 || i == n || j == 1 || j == m )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    },
    {
      "mod_line": [
        2,
        17
      ],
      "mod_code": [
        "char c , c ;",
        "if ( i == 1 || i == n || j == 1 || j == m )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘char c’"
    }
  ]
}