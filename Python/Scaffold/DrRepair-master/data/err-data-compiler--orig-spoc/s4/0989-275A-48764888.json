{
  "meta": {
    "index": 989,
    "hitid": "3ZUE82NE0AVEQYJ7PQBCNEGOA3QF8K",
    "workerid": "AIWEXPJAU66D9",
    "probid": "275A",
    "subid": "48764888"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create 2d arrays of long longs arr and l with size 3 by 3",
      "code": "long long arr [ 3 ] [ 3 ] , l [ 3 ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "set first sizeof ( l ) bytes at the pointer l to 0",
      "code": "memset ( l , 0 , sizeof ( l ) ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( long long i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for j from 0 to 3 exclusive , read arr [ i ] [ j ]",
      "code": "for ( long long j = 0 ; j < 3 ; j ++ ) { cin >> arr [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i from 0 to 3 exclusive",
      "code": "for ( long long i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for j from 0 to 3 exclusive",
      "code": "for ( long long j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if arr [ i ] [ j ] is odd",
      "code": "if ( arr [ i ] [ j ] % 2 == 1 )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if i + 1 < 3 , set l [ i + 1 ] [ j ] to ! l [ i + 1 ] [ j ]",
      "code": "if ( i + 1 < 3 ) l [ i + 1 ] [ j ] = ! l [ i + 1 ] [ j ] ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "if i - 1 > = 0 , set ! l [ i - 1 ] [ j ] to l [ i - 1 ] [ j ]",
      "code": "if ( i - 1 >= 0 ) l [ i - 1 ] [ j ] = ! l [ i - 1 ] [ j ] ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "if j + 1 < 3 , set l [ i ] [ j + 1 ] to ! l [ i ] [ j + 1 ]",
      "code": "if ( j + 1 < 3 ) l [ i ] [ j + 1 ] = ! l [ i ] [ j + 1 ] ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "if j - 1 > = 0 , set l [ i ] [ j - 1 ] to ! l [ i ] [ j - 1 ]",
      "code": "if ( j - 1 >= 0 ) l [ i ] [ j - 1 ] = ! l [ i ] [ j - 1 ] ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "change l [ i ] [ j ] to ! l [ i ] [ j ]",
      "code": "l [ i ] [ j ] = ! l [ i ] [ j ] ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i from 0 to 3 exclusive",
      "code": "for ( long long i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for j from 0 to 3 exclusive , print ! l [ i ] [ j ]",
      "code": "for ( long long j = 0 ; j < 3 ; j ++ ) cout << ! l [ i ] [ j ] ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long arr [ 3 ] , l [ 3 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long int arr [ 3 ] , l [ 3 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "memset ( l , 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) { ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ; }"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "long long arr [ 3 ] , l [ 3 ] ;",
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        2
      ],
      "mod_code": [
        "long long arr [ 3 ] , l [ 3 ] ;",
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;",
        "memset ( l , 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        1,
        10,
        2,
        13
      ],
      "mod_code": [
        "long long arr [ 3 ] , l [ 3 ] ;",
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;",
        "memset ( l , 0 ) ;",
        "l [ i ] [ j ] = l [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        1,
        10,
        2,
        7
      ],
      "mod_code": [
        "long long arr [ 3 ] , l [ 3 ] ;",
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;",
        "memset ( l , 0 ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        1,
        10,
        13
      ],
      "mod_code": [
        "long long arr [ 3 ] , l [ 3 ] ;",
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;",
        "l [ i ] [ j ] = l [ i ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        13,
        7
      ],
      "mod_code": [
        "long long arr [ 3 ] , l [ 3 ] ;",
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;",
        "l [ i ] [ j ] = l [ i ] [ j ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        7
      ],
      "mod_code": [
        "long long arr [ 3 ] , l [ 3 ] ;",
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "long long arr [ 3 ] , l [ 3 ] ;",
        "memset ( l , 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        1,
        2,
        13
      ],
      "mod_code": [
        "long long arr [ 3 ] , l [ 3 ] ;",
        "memset ( l , 0 ) ;",
        "l [ i ] [ j ] = l [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        1,
        2,
        13,
        7
      ],
      "mod_code": [
        "long long arr [ 3 ] , l [ 3 ] ;",
        "memset ( l , 0 ) ;",
        "l [ i ] [ j ] = l [ i ] [ j ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        1,
        2,
        7
      ],
      "mod_code": [
        "long long arr [ 3 ] , l [ 3 ] ;",
        "memset ( l , 0 ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "long long arr [ 3 ] , l [ 3 ] ;",
        "l [ i ] [ j ] = l [ i ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        13,
        7
      ],
      "mod_code": [
        "long long arr [ 3 ] , l [ 3 ] ;",
        "l [ i ] [ j ] = l [ i ] [ j ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "long long arr [ 3 ] , l [ 3 ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;",
        "memset ( l , 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        2,
        13
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;",
        "memset ( l , 0 ) ;",
        "l [ i ] [ j ] = l [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        2,
        13,
        1
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;",
        "memset ( l , 0 ) ;",
        "l [ i ] [ j ] = l [ i ] [ j ] ;",
        "long long int arr [ 3 ] , l [ 3 ] ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        2,
        13,
        7
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;",
        "memset ( l , 0 ) ;",
        "l [ i ] [ j ] = l [ i ] [ j ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        2,
        1
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;",
        "memset ( l , 0 ) ;",
        "long long int arr [ 3 ] , l [ 3 ] ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        2,
        1,
        7
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;",
        "memset ( l , 0 ) ;",
        "long long int arr [ 3 ] , l [ 3 ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        2,
        7
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;",
        "memset ( l , 0 ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;",
        "l [ i ] [ j ] = l [ i ] [ j ] ;"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        10,
        13,
        1
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;",
        "l [ i ] [ j ] = l [ i ] [ j ] ;",
        "long long int arr [ 3 ] , l [ 3 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        13,
        1,
        7
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;",
        "l [ i ] [ j ] = l [ i ] [ j ] ;",
        "long long int arr [ 3 ] , l [ 3 ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        13,
        7
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;",
        "l [ i ] [ j ] = l [ i ] [ j ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;",
        "long long int arr [ 3 ] , l [ 3 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        1,
        7
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;",
        "long long int arr [ 3 ] , l [ 3 ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) ! l [ i - 1 ] [ j ] = l [ i - 1 ] [ j ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "memset ( l , 0 ) ;",
        "l [ i ] [ j ] = l [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        2,
        13,
        1
      ],
      "mod_code": [
        "memset ( l , 0 ) ;",
        "l [ i ] [ j ] = l [ i ] [ j ] ;",
        "long long int arr [ 3 ] , l [ 3 ] ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        2,
        13,
        1,
        7
      ],
      "mod_code": [
        "memset ( l , 0 ) ;",
        "l [ i ] [ j ] = l [ i ] [ j ] ;",
        "long long int arr [ 3 ] , l [ 3 ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        2,
        13,
        7
      ],
      "mod_code": [
        "memset ( l , 0 ) ;",
        "l [ i ] [ j ] = l [ i ] [ j ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "memset ( l , 0 ) ;",
        "long long int arr [ 3 ] , l [ 3 ] ;"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        2,
        1,
        7
      ],
      "mod_code": [
        "memset ( l , 0 ) ;",
        "long long int arr [ 3 ] , l [ 3 ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "memset ( l , 0 ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        13,
        1
      ],
      "mod_code": [
        "l [ i ] [ j ] = l [ i ] [ j ] ;",
        "long long int arr [ 3 ] , l [ 3 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        1,
        7
      ],
      "mod_code": [
        "l [ i ] [ j ] = l [ i ] [ j ] ;",
        "long long int arr [ 3 ] , l [ 3 ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "l [ i ] [ j ] = l [ i ] [ j ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "long long int arr [ 3 ] , l [ 3 ] ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘long long int[long long int]’ for array subscript"
    }
  ]
}