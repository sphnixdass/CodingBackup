{
  "meta": {
    "index": 2598,
    "hitid": "3GL25Y6843OAB9CWJLRHY3HQYDBMX6",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "906A",
    "subid": "48970461"
  },
  "lines": [
    {
      "line": 0,
      "text": "st = string",
      "code": "string st ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "se , ans = set of char",
      "code": "set < char > se , ans ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "n , cnt = integers with cnt = 0",
      "code": "int n , cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "c = character",
      "code": "char c ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "flag = bool with flag = false",
      "code": "bool flag = false ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to 25 , insert a + i in ans",
      "code": "for ( int i = 0 ; i < 26 ; i ++ ) ans . insert ( ' a ' + i ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read c , st",
      "code": "cin >> c >> st ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if c is !",
      "code": "if ( c == ' ! ' )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if not flag",
      "code": "if ( ! flag )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "clear on se",
      "code": "se . clear ( ) ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "for j = 0 to st . length ( ) exclusive , insert st [ j ] in se",
      "code": "for ( int j = 0 ; j < st . length ( ) ; j ++ ) se . insert ( st [ j ] ) ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "for j = ans . begin ( ) to j is not ans . end ( )",
      "code": "for ( set < char > :: iterator j = ans . begin ( ) ; j != ans . end ( ) ; )",
      "indent": 4
    },
    {
      "line": 15,
      "text": "if is not se . count ( * j )",
      "code": "if ( ! se . count ( * j ) )",
      "indent": 5
    },
    {
      "line": 16,
      "text": "k = set of characters iterator with k = j",
      "code": "set < char > :: iterator k = j ;",
      "indent": 6
    },
    {
      "line": 17,
      "text": "increment j",
      "code": "j ++ ;",
      "indent": 6
    },
    {
      "line": 18,
      "text": "erase k from ans",
      "code": "ans . erase ( k ) ;",
      "indent": 6
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 20,
      "text": "increment j",
      "code": "j ++ ;",
      "indent": 6
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 23,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "else if c is ' . ' and not flag",
      "code": "else if ( c == ' . ' && ! flag )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "for j = 0 to st . length ( ) exclusive",
      "code": "for ( int j = 0 ; j < st . length ( ) ; j ++ )",
      "indent": 3
    },
    {
      "line": 26,
      "text": "if ans . count ( st [ j ] ) , erase st [ j ] from ans",
      "code": "if ( ans . count ( st [ j ] ) ) ans . erase ( st [ j ] ) ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "else if c is ?",
      "code": "else if ( c == ' ? ' )",
      "indent": 2
    },
    {
      "line": 28,
      "text": "if not flag",
      "code": "if ( ! flag )",
      "indent": 3
    },
    {
      "line": 29,
      "text": "if ans . count ( st [ 0 ] ) , erase st [ 0 ] from ans",
      "code": "if ( ans . count ( st [ 0 ] ) ) ans . erase ( st [ 0 ] ) ;",
      "indent": 4
    },
    {
      "line": 30,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 31,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 33,
      "text": "if ans . size ( ) is 1 , flag = true",
      "code": "if ( ans . size ( ) == 1 ) flag = true ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 35,
      "text": "print cnt",
      "code": "cout << cnt << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char se , ans ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘insert’ in ‘ans’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 9,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "set < char > c ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) ans . insert ( a + i ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "se . clear se . clear ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘se’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( int j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::set<char>::iterator {aka std::_Rb_tree_const_iterator<char>}’ to ‘int’ in initialization"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "ans . erase ( ) ;"
      ],
      "err_line": 18,
      "err_msg": "no matching function for call to ‘std::set<char>::erase()’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "for ( j = 0 ; j < st . length ( ) ; j ++ )"
      ],
      "err_line": 25,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "else if ( c == \" ? \" )"
      ],
      "err_line": 27,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        14
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        14,
        16
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "set < char > :: iterator k ;"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        14,
        16,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "set < char > :: iterator k ;",
        "if ( c )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        14,
        16,
        27
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "set < char > :: iterator k ;",
        "else if ( c == \" ? \" )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        14,
        16,
        24
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "set < char > :: iterator k ;",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        14,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "if ( c )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        14,
        10,
        27
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "if ( c )",
        "else if ( c == \" ? \" )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        14,
        10,
        24
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "if ( c )",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        14,
        27
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "else if ( c == \" ? \" )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        14,
        27,
        24
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "else if ( c == \" ? \" )",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        14,
        24
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        16
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "set < char > :: iterator k ;"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        16,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "set < char > :: iterator k ;",
        "if ( c )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        16,
        10,
        27
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "set < char > :: iterator k ;",
        "if ( c )",
        "else if ( c == \" ? \" )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        16,
        10,
        24
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "set < char > :: iterator k ;",
        "if ( c )",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        16,
        27
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "set < char > :: iterator k ;",
        "else if ( c == \" ? \" )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        16,
        27,
        24
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "set < char > :: iterator k ;",
        "else if ( c == \" ? \" )",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        16,
        24
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "set < char > :: iterator k ;",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "if ( c )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10,
        27
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "if ( c )",
        "else if ( c == \" ? \" )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10,
        27,
        24
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "if ( c )",
        "else if ( c == \" ? \" )",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        10,
        24
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "if ( c )",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        27
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "else if ( c == \" ? \" )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        27,
        24
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "else if ( c == \" ? \" )",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        24
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 26 ; i ++ ) { ans . insert ( a + i ) ; }",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        16
      ],
      "mod_code": [
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "set < char > :: iterator k ;"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        16,
        10
      ],
      "mod_code": [
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "set < char > :: iterator k ;",
        "if ( c )"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        16,
        10,
        27
      ],
      "mod_code": [
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "set < char > :: iterator k ;",
        "if ( c )",
        "else if ( c == \" ? \" )"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        16,
        10,
        24
      ],
      "mod_code": [
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "set < char > :: iterator k ;",
        "if ( c )",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        16,
        27
      ],
      "mod_code": [
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "set < char > :: iterator k ;",
        "else if ( c == \" ? \" )"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        16,
        27,
        24
      ],
      "mod_code": [
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "set < char > :: iterator k ;",
        "else if ( c == \" ? \" )",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        16,
        24
      ],
      "mod_code": [
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "set < char > :: iterator k ;",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        10
      ],
      "mod_code": [
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "if ( c )"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        10,
        27
      ],
      "mod_code": [
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "if ( c )",
        "else if ( c == \" ? \" )"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        10,
        27,
        24
      ],
      "mod_code": [
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "if ( c )",
        "else if ( c == \" ? \" )",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        10,
        24
      ],
      "mod_code": [
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "if ( c )",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        27
      ],
      "mod_code": [
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "else if ( c == \" ? \" )"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        27,
        24
      ],
      "mod_code": [
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "else if ( c == \" ? \" )",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        24
      ],
      "mod_code": [
        "for ( j = ans . begin ( ) ; j != ans . end ( ) ; j ++ )",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 14,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        10,
        27
      ],
      "mod_code": [
        "set < char > :: iterator k ;",
        "if ( c )",
        "else if ( c == \" ? \" )"
      ],
      "err_line": 27,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        10,
        27,
        24
      ],
      "mod_code": [
        "set < char > :: iterator k ;",
        "if ( c )",
        "else if ( c == \" ? \" )",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 27,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        27
      ],
      "mod_code": [
        "set < char > :: iterator k ;",
        "else if ( c == \" ? \" )"
      ],
      "err_line": 27,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        27,
        24
      ],
      "mod_code": [
        "set < char > :: iterator k ;",
        "else if ( c == \" ? \" )",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 27,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        27
      ],
      "mod_code": [
        "if ( c )",
        "else if ( c == \" ? \" )"
      ],
      "err_line": 27,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        27,
        24
      ],
      "mod_code": [
        "if ( c )",
        "else if ( c == \" ? \" )",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 27,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        27,
        24
      ],
      "mod_code": [
        "else if ( c == \" ? \" )",
        "else if ( c == ' . ' && flag != flag )"
      ],
      "err_line": 27,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    }
  ]
}