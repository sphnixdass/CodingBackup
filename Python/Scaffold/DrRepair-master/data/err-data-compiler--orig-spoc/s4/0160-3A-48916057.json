{
  "meta": {
    "index": 160,
    "hitid": "371QPA24C2I6Y3HNLP7MP88HM4GT15",
    "workerid": "A1APYLD4DUK33J",
    "probid": "3A",
    "subid": "48916057"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create strings s1 , s2",
      "code": "string s1 , s2 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s1 read s2",
      "code": "cin >> s1 >> s2 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer mx with mx = maximum of absolute value of s1 [ 0 ] - s2 [ 0 ] and absolute value of s1 [ 1 ] - s2 [ 1 ]",
      "code": "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print mx print newline",
      "code": "cout << mx << endl ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while s1 is not s2",
      "code": "while ( s1 != s2 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if s1 [ 0 ] is greater than s2 [ 0 ]",
      "code": "if ( s1 [ 0 ] > s2 [ 0 ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print \" L \"",
      "code": "cout << \" L \" ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "set s1 [ 0 ] to s1 [ 0 ] - 1",
      "code": "s1 [ 0 ] = s1 [ 0 ] - 1 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else if s1 [ 0 ] is less than s2 [ 0 ]",
      "code": "else if ( s1 [ 0 ] < s2 [ 0 ] )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "print \" R \"",
      "code": "cout << \" R \" ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "set s1 [ 0 ] to s1 [ 0 ] + 1",
      "code": "s1 [ 0 ] = s1 [ 0 ] + 1 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if s1 [ 1 ] is greater than s2 [ 1 ]",
      "code": "if ( s1 [ 1 ] > s2 [ 1 ] )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print \" D \"",
      "code": "cout << \" D \" ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "set s1 [ 1 ] to s1 [ 1 ] - 1",
      "code": "s1 [ 1 ] = s1 [ 1 ] - 1 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "else if s1 [ 1 ] is less than s2 [ 1 ]",
      "code": "else if ( s1 [ 1 ] < s2 [ 1 ] )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "print \" U \"",
      "code": "cout << \" U \" ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "set s1 [ 1 ] to s1 [ 1 ] + 1",
      "code": "s1 [ 1 ] = s1 [ 1 ] + 1 ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "s1 , s2 ;"
      ],
      "err_line": 1,
      "err_msg": "‘s1’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s1 >> s1 >> s2 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] , abs ( s1 [ 1 ] - s2 [ 1 ] ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘abs(int, int)’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "while ( s1 -- )"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator--(int)’ declared for postfix ‘--’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" L \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        7,
        10
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        7,
        10,
        17
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        7,
        10,
        9
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;",
        "else if ( s1 [ 0 ] <= s2 [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        7,
        10,
        5
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;",
        "while ( s1 -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        7,
        17
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        7,
        17,
        9
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;",
        "else if ( s1 [ 0 ] <= s2 [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        7,
        17,
        5
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;",
        "while ( s1 -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        7,
        9
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" L \" << endl ;",
        "else if ( s1 [ 0 ] <= s2 [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        5
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" L \" << endl ;",
        "else if ( s1 [ 0 ] <= s2 [ 0 ] )",
        "while ( s1 -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        7,
        5
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" L \" << endl ;",
        "while ( s1 -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        10,
        17
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        10,
        17,
        9
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;",
        "else if ( s1 [ 0 ] <= s2 [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        10,
        17,
        5
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;",
        "while ( s1 -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        10,
        9
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" R \" << endl ;",
        "else if ( s1 [ 0 ] <= s2 [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        10,
        9,
        5
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" R \" << endl ;",
        "else if ( s1 [ 0 ] <= s2 [ 0 ] )",
        "while ( s1 -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        10,
        5
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" R \" << endl ;",
        "while ( s1 -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        17
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" U \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        17,
        9
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" U \" << endl ;",
        "else if ( s1 [ 0 ] <= s2 [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        17,
        9,
        5
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" U \" << endl ;",
        "else if ( s1 [ 0 ] <= s2 [ 0 ] )",
        "while ( s1 -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        17,
        5
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "cout << \" U \" << endl ;",
        "while ( s1 -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "else if ( s1 [ 0 ] <= s2 [ 0 ] )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        9,
        5
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "else if ( s1 [ 0 ] <= s2 [ 0 ] )",
        "while ( s1 -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "int mx = max ( abs ( s1 [ 0 ] - s2 [ 0 ] ) , abs ( s1 [ 1 ] - s2 [ 1 ] ) ;",
        "while ( s1 -- )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        10,
        17,
        5
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;",
        "while ( s1 -- )"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator--(int)’ declared for postfix ‘--’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10,
        9,
        5
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;",
        "else if ( s1 [ 0 ] <= s2 [ 0 ] )",
        "while ( s1 -- )"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator--(int)’ declared for postfix ‘--’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10,
        5
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << \" R \" << endl ;",
        "while ( s1 -- )"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator--(int)’ declared for postfix ‘--’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        17,
        9,
        5
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;",
        "else if ( s1 [ 0 ] <= s2 [ 0 ] )",
        "while ( s1 -- )"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator--(int)’ declared for postfix ‘--’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        17,
        5
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;",
        "while ( s1 -- )"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator--(int)’ declared for postfix ‘--’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        5
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "else if ( s1 [ 0 ] <= s2 [ 0 ] )",
        "while ( s1 -- )"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator--(int)’ declared for postfix ‘--’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "while ( s1 -- )"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator--(int)’ declared for postfix ‘--’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        17,
        9,
        5
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;",
        "else if ( s1 [ 0 ] <= s2 [ 0 ] )",
        "while ( s1 -- )"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator--(int)’ declared for postfix ‘--’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        17,
        5
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;",
        "while ( s1 -- )"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator--(int)’ declared for postfix ‘--’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        9,
        5
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "else if ( s1 [ 0 ] <= s2 [ 0 ] )",
        "while ( s1 -- )"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator--(int)’ declared for postfix ‘--’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        5
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "while ( s1 -- )"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator--(int)’ declared for postfix ‘--’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        9,
        5
      ],
      "mod_code": [
        "cout << \" U \" << endl ;",
        "else if ( s1 [ 0 ] <= s2 [ 0 ] )",
        "while ( s1 -- )"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator--(int)’ declared for postfix ‘--’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        5
      ],
      "mod_code": [
        "cout << \" U \" << endl ;",
        "while ( s1 -- )"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator--(int)’ declared for postfix ‘--’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "else if ( s1 [ 0 ] <= s2 [ 0 ] )",
        "while ( s1 -- )"
      ],
      "err_line": 5,
      "err_msg": "no ‘operator--(int)’ declared for postfix ‘--’ [-fpermissive]"
    }
  ]
}