{
  "meta": {
    "index": 886,
    "hitid": "3IHWR4LC7D7Y0PLXQYHXQBTGP8LI86",
    "workerid": "A3S392MV6HWTTE",
    "probid": "820A",
    "subid": "43922611"
  },
  "lines": [
    {
      "line": 0,
      "text": "set mod = 1e9 + 7",
      "code": "const long long mod = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "set inf to constant integer 1000000000",
      "code": "const int inf = 1000000000 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "set maxn to constant integer 300005",
      "code": "const int maxn = 300005 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "set maxa to constant integer 300005",
      "code": "const int maxa = 300005 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare gcd which takes a large long a and large long b",
      "code": "long long gcd ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 5,
      "text": "if b > 0 return gcd of b and a mod b else return a",
      "code": "return b ? gcd ( b , a % b ) : a ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "declare powmod which takes a large long a and large long b",
      "code": "long long powmod ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 8,
      "text": "set ret = 1",
      "code": "long long res = 1 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set a = a remainder of a and mod",
      "code": "a %= mod ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if b < 0 return - 1",
      "code": "if ( b < 0 ) return - 1 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "read b until b = 1",
      "code": "for ( ; b ; b >>= 1 )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if b and 1 res = res * remainder of a and mod",
      "code": "if ( b & 1 ) res = res * a % mod ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set a = a * remainder a and mod",
      "code": "a = a * a % mod ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "return res",
      "code": "return res ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 17,
      "text": "set INF = 10000000",
      "code": "int INF = 10000000 ;",
      "indent": 0
    },
    {
      "line": 18,
      "text": "start , finish = clockticks",
      "code": "clock_t start , finish ;",
      "indent": 0
    },
    {
      "line": 19,
      "text": "duartion = double",
      "code": "double duration ;",
      "indent": 0
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 21,
      "text": "c , v , vm , a , l = integer",
      "code": "int c , v , vm , a , l ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "read c , v , vm , a , l",
      "code": "cin >> c >> v >> vm >> a >> l ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "set cnt = 0",
      "code": "int cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "set now = 0",
      "code": "int now = 0 ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "now = v",
      "code": "now = v ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "while now < c",
      "code": "while ( now < c )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "set v = min of vm and v + a",
      "code": "v = min ( vm , v + a ) ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "set now = now + v - l",
      "code": "now += v - l ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "print cnt",
      "code": "cout << cnt << endl ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "return b > 0 ? gcd ( b , a % b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "bool powmod ( long long a , long long large )"
      ],
      "err_line": 10,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "ret = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "‘ret’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( b && 1 ) res += a ( a , mod ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘a’ cannot be used as a function"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "start = finish = clockticks ;"
      ],
      "err_line": 18,
      "err_msg": "‘start’ does not name a type"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "mod = 1e9 + 7 ;"
      ],
      "err_line": 0,
      "err_msg": "‘mod’ does not name a type"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "const int maxn , 300005 ;"
      ],
      "err_line": 2,
      "err_msg": "uninitialized const ‘maxn’ [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "bool gcd ( long long a , long long b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "return b > 0 ? gcd ( b and a % b : a ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int ret = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "‘res’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( b && 1 ) { res += a ( a , mod ) ; }"
      ],
      "err_line": 12,
      "err_msg": "‘a’ cannot be used as a function"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "int start = clockticks , finish = clockticks ;"
      ],
      "err_line": 18,
      "err_msg": "‘clockticks’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "cnt = 0 ;"
      ],
      "err_line": 23,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "now = 0 ;"
      ],
      "err_line": 24,
      "err_msg": "‘now’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "int now = v ;"
      ],
      "err_line": 25,
      "err_msg": "redeclaration of ‘int now’"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "return b > 0 ? gcd ( b , a % b ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        7
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "return b > 0 ? gcd ( b , a % b ) ;",
        "bool powmod ( long long a , long long large )"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        8
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "return b > 0 ? gcd ( b , a % b ) ;",
        "bool powmod ( long long a , long long large )",
        "ret = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        12
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "return b > 0 ? gcd ( b , a % b ) ;",
        "bool powmod ( long long a , long long large )",
        "if ( b && 1 ) res += a ( a , mod ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        18
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "return b > 0 ? gcd ( b , a % b ) ;",
        "bool powmod ( long long a , long long large )",
        "start = finish = clockticks ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        8
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "return b > 0 ? gcd ( b , a % b ) ;",
        "ret = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        8,
        12
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "return b > 0 ? gcd ( b , a % b ) ;",
        "ret = 1 ;",
        "if ( b && 1 ) res += a ( a , mod ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        8,
        18
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "return b > 0 ? gcd ( b , a % b ) ;",
        "ret = 1 ;",
        "start = finish = clockticks ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        12
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "return b > 0 ? gcd ( b , a % b ) ;",
        "if ( b && 1 ) res += a ( a , mod ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        12,
        18
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "return b > 0 ? gcd ( b , a % b ) ;",
        "if ( b && 1 ) res += a ( a , mod ) ;",
        "start = finish = clockticks ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        18
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "return b > 0 ? gcd ( b , a % b ) ;",
        "start = finish = clockticks ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "bool powmod ( long long a , long long large )"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        8
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "bool powmod ( long long a , long long large )",
        "ret = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        8,
        12
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "bool powmod ( long long a , long long large )",
        "ret = 1 ;",
        "if ( b && 1 ) res += a ( a , mod ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        8,
        18
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "bool powmod ( long long a , long long large )",
        "ret = 1 ;",
        "start = finish = clockticks ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        12
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "bool powmod ( long long a , long long large )",
        "if ( b && 1 ) res += a ( a , mod ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        12,
        18
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "bool powmod ( long long a , long long large )",
        "if ( b && 1 ) res += a ( a , mod ) ;",
        "start = finish = clockticks ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        18
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "bool powmod ( long long a , long long large )",
        "start = finish = clockticks ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "ret = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8,
        12
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "ret = 1 ;",
        "if ( b && 1 ) res += a ( a , mod ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8,
        12,
        18
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "ret = 1 ;",
        "if ( b && 1 ) res += a ( a , mod ) ;",
        "start = finish = clockticks ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8,
        18
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "ret = 1 ;",
        "start = finish = clockticks ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "if ( b && 1 ) res += a ( a , mod ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        12,
        18
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "if ( b && 1 ) res += a ( a , mod ) ;",
        "start = finish = clockticks ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        18
      ],
      "mod_code": [
        "bool gcd ( long long a , long long large )",
        "start = finish = clockticks ;"
      ],
      "err_line": 5,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "return b > 0 ? gcd ( b , a % b ) ;",
        "bool powmod ( long long a , long long large )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        7,
        8
      ],
      "mod_code": [
        "return b > 0 ? gcd ( b , a % b ) ;",
        "bool powmod ( long long a , long long large )",
        "ret = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        7,
        8,
        12
      ],
      "mod_code": [
        "return b > 0 ? gcd ( b , a % b ) ;",
        "bool powmod ( long long a , long long large )",
        "ret = 1 ;",
        "if ( b && 1 ) res += a ( a , mod ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        7,
        8,
        18
      ],
      "mod_code": [
        "return b > 0 ? gcd ( b , a % b ) ;",
        "bool powmod ( long long a , long long large )",
        "ret = 1 ;",
        "start = finish = clockticks ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        7,
        12
      ],
      "mod_code": [
        "return b > 0 ? gcd ( b , a % b ) ;",
        "bool powmod ( long long a , long long large )",
        "if ( b && 1 ) res += a ( a , mod ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        7,
        12,
        18
      ],
      "mod_code": [
        "return b > 0 ? gcd ( b , a % b ) ;",
        "bool powmod ( long long a , long long large )",
        "if ( b && 1 ) res += a ( a , mod ) ;",
        "start = finish = clockticks ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        7,
        18
      ],
      "mod_code": [
        "return b > 0 ? gcd ( b , a % b ) ;",
        "bool powmod ( long long a , long long large )",
        "start = finish = clockticks ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "return b > 0 ? gcd ( b , a % b ) ;",
        "ret = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        8,
        12
      ],
      "mod_code": [
        "return b > 0 ? gcd ( b , a % b ) ;",
        "ret = 1 ;",
        "if ( b && 1 ) res += a ( a , mod ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        8,
        12,
        18
      ],
      "mod_code": [
        "return b > 0 ? gcd ( b , a % b ) ;",
        "ret = 1 ;",
        "if ( b && 1 ) res += a ( a , mod ) ;",
        "start = finish = clockticks ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        8,
        18
      ],
      "mod_code": [
        "return b > 0 ? gcd ( b , a % b ) ;",
        "ret = 1 ;",
        "start = finish = clockticks ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "return b > 0 ? gcd ( b , a % b ) ;",
        "if ( b && 1 ) res += a ( a , mod ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        12,
        18
      ],
      "mod_code": [
        "return b > 0 ? gcd ( b , a % b ) ;",
        "if ( b && 1 ) res += a ( a , mod ) ;",
        "start = finish = clockticks ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        18
      ],
      "mod_code": [
        "return b > 0 ? gcd ( b , a % b ) ;",
        "start = finish = clockticks ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "bool powmod ( long long a , long long large )",
        "ret = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "‘ret’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        8,
        12
      ],
      "mod_code": [
        "bool powmod ( long long a , long long large )",
        "ret = 1 ;",
        "if ( b && 1 ) res += a ( a , mod ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘ret’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        8,
        12,
        18
      ],
      "mod_code": [
        "bool powmod ( long long a , long long large )",
        "ret = 1 ;",
        "if ( b && 1 ) res += a ( a , mod ) ;",
        "start = finish = clockticks ;"
      ],
      "err_line": 8,
      "err_msg": "‘ret’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        8,
        18
      ],
      "mod_code": [
        "bool powmod ( long long a , long long large )",
        "ret = 1 ;",
        "start = finish = clockticks ;"
      ],
      "err_line": 8,
      "err_msg": "‘ret’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "bool powmod ( long long a , long long large )",
        "if ( b && 1 ) res += a ( a , mod ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        12,
        18
      ],
      "mod_code": [
        "bool powmod ( long long a , long long large )",
        "if ( b && 1 ) res += a ( a , mod ) ;",
        "start = finish = clockticks ;"
      ],
      "err_line": 10,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        18
      ],
      "mod_code": [
        "bool powmod ( long long a , long long large )",
        "start = finish = clockticks ;"
      ],
      "err_line": 10,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "ret = 1 ;",
        "if ( b && 1 ) res += a ( a , mod ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘ret’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        12,
        18
      ],
      "mod_code": [
        "ret = 1 ;",
        "if ( b && 1 ) res += a ( a , mod ) ;",
        "start = finish = clockticks ;"
      ],
      "err_line": 8,
      "err_msg": "‘ret’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        18
      ],
      "mod_code": [
        "ret = 1 ;",
        "start = finish = clockticks ;"
      ],
      "err_line": 8,
      "err_msg": "‘ret’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        18
      ],
      "mod_code": [
        "if ( b && 1 ) res += a ( a , mod ) ;",
        "start = finish = clockticks ;"
      ],
      "err_line": 12,
      "err_msg": "‘a’ cannot be used as a function"
    }
  ]
}