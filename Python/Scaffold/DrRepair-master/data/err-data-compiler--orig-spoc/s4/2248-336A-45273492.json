{
  "meta": {
    "index": 2248,
    "hitid": "3EKZL9T8Y8G0GX0Q1SFHSLOKG9MHCO",
    "workerid": "A1APYLD4DUK33J",
    "probid": "336A",
    "subid": "45273492"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers a , b",
      "code": "int a , b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a read b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if a is greater than or equal to 0 and b is greater than or equal to 0",
      "code": "if ( a >= 0 && b >= 0 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print 0 print \" \" print a + b print \" \" print a + b print \" \" print 0 print newline",
      "code": "cout << 0 << \" \" << a + b << \" \" << a + b << \" \" << 0 << endl ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else if a is greater than 0 and b is less than 0",
      "code": "else if ( a > 0 && b < 0 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print 0 print \" \" print b - a print \" \" print a - b print \" \" print 0 print newline",
      "code": "cout << 0 << \" \" << b - a << \" \" << a - b << \" \" << 0 << endl ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else if a is less than 0 and b is greater than 0",
      "code": "else if ( a < 0 && b > 0 )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print a - b print \" \" print 0 print \" \" print 0 print \" \" print b - a print newline",
      "code": "cout << a - b << \" \" << 0 << \" \" << 0 << \" \" << b - a << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print a + b print \" \" print 0 print \" \" print 0 print \" \" print a + b print newline",
      "code": "cout << a + b << \" \" << 0 << \" \" << 0 << \" \" << a + b << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "cout << 0 << \" \" << b - b << \" \" << a - b << \" \" << 0 << endl ;",
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        6,
        8,
        4
      ],
      "mod_code": [
        "cout << 0 << \" \" << b - b << \" \" << a - b << \" \" << 0 << endl ;",
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "cout << 0 << \" \" << a + b << \" \" << a + b << \" \" << a << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        6,
        8,
        4,
        9
      ],
      "mod_code": [
        "cout << 0 << \" \" << b - b << \" \" << a - b << \" \" << 0 << endl ;",
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "cout << 0 << \" \" << a + b << \" \" << a + b << \" \" << a << endl ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        6,
        8,
        4,
        2
      ],
      "mod_code": [
        "cout << 0 << \" \" << b - b << \" \" << a - b << \" \" << 0 << endl ;",
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "cout << 0 << \" \" << a + b << \" \" << a + b << \" \" << a << endl ;",
        "a >> a >> b ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        6,
        8,
        4,
        10
      ],
      "mod_code": [
        "cout << 0 << \" \" << b - b << \" \" << a - b << \" \" << 0 << endl ;",
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "cout << 0 << \" \" << a + b << \" \" << a + b << \" \" << a << endl ;",
        "cout << a + b << \" \" << 0 << \" \" << a << \" \" << a + b << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        6,
        8,
        9
      ],
      "mod_code": [
        "cout << 0 << \" \" << b - b << \" \" << a - b << \" \" << 0 << endl ;",
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        6,
        8,
        9,
        2
      ],
      "mod_code": [
        "cout << 0 << \" \" << b - b << \" \" << a - b << \" \" << 0 << endl ;",
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "else else",
        "a >> a >> b ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        6,
        8,
        9,
        10
      ],
      "mod_code": [
        "cout << 0 << \" \" << b - b << \" \" << a - b << \" \" << 0 << endl ;",
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "else else",
        "cout << a + b << \" \" << 0 << \" \" << a << \" \" << a + b << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        6,
        8,
        2
      ],
      "mod_code": [
        "cout << 0 << \" \" << b - b << \" \" << a - b << \" \" << 0 << endl ;",
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "a >> a >> b ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        6,
        8,
        2,
        10
      ],
      "mod_code": [
        "cout << 0 << \" \" << b - b << \" \" << a - b << \" \" << 0 << endl ;",
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "a >> a >> b ;",
        "cout << a + b << \" \" << 0 << \" \" << a << \" \" << a + b << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        6,
        8,
        10
      ],
      "mod_code": [
        "cout << 0 << \" \" << b - b << \" \" << a - b << \" \" << 0 << endl ;",
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "cout << a + b << \" \" << 0 << \" \" << a << \" \" << a + b << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        6,
        4,
        9
      ],
      "mod_code": [
        "cout << 0 << \" \" << b - b << \" \" << a - b << \" \" << 0 << endl ;",
        "cout << 0 << \" \" << a + b << \" \" << a + b << \" \" << a << endl ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        4,
        9,
        2
      ],
      "mod_code": [
        "cout << 0 << \" \" << b - b << \" \" << a - b << \" \" << 0 << endl ;",
        "cout << 0 << \" \" << a + b << \" \" << a + b << \" \" << a << endl ;",
        "else else",
        "a >> a >> b ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        4,
        9,
        10
      ],
      "mod_code": [
        "cout << 0 << \" \" << b - b << \" \" << a - b << \" \" << 0 << endl ;",
        "cout << 0 << \" \" << a + b << \" \" << a + b << \" \" << a << endl ;",
        "else else",
        "cout << a + b << \" \" << 0 << \" \" << a << \" \" << a + b << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "cout << 0 << \" \" << b - b << \" \" << a - b << \" \" << 0 << endl ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        9,
        2
      ],
      "mod_code": [
        "cout << 0 << \" \" << b - b << \" \" << a - b << \" \" << 0 << endl ;",
        "else else",
        "a >> a >> b ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        9,
        2,
        10
      ],
      "mod_code": [
        "cout << 0 << \" \" << b - b << \" \" << a - b << \" \" << 0 << endl ;",
        "else else",
        "a >> a >> b ;",
        "cout << a + b << \" \" << 0 << \" \" << a << \" \" << a + b << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        9,
        10
      ],
      "mod_code": [
        "cout << 0 << \" \" << b - b << \" \" << a - b << \" \" << 0 << endl ;",
        "else else",
        "cout << a + b << \" \" << 0 << \" \" << a << \" \" << a + b << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "cout << 0 << \" \" << a + b << \" \" << a + b << \" \" << a << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        8,
        4,
        9
      ],
      "mod_code": [
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "cout << 0 << \" \" << a + b << \" \" << a + b << \" \" << a << endl ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        8,
        4,
        9,
        2
      ],
      "mod_code": [
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "cout << 0 << \" \" << a + b << \" \" << a + b << \" \" << a << endl ;",
        "else else",
        "a >> a >> b ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        8,
        4,
        9,
        10
      ],
      "mod_code": [
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "cout << 0 << \" \" << a + b << \" \" << a + b << \" \" << a << endl ;",
        "else else",
        "cout << a + b << \" \" << 0 << \" \" << a << \" \" << a + b << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        8,
        4,
        2
      ],
      "mod_code": [
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "cout << 0 << \" \" << a + b << \" \" << a + b << \" \" << a << endl ;",
        "a >> a >> b ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        8,
        4,
        2,
        10
      ],
      "mod_code": [
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "cout << 0 << \" \" << a + b << \" \" << a + b << \" \" << a << endl ;",
        "a >> a >> b ;",
        "cout << a + b << \" \" << 0 << \" \" << a << \" \" << a + b << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        8,
        4,
        10
      ],
      "mod_code": [
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "cout << 0 << \" \" << a + b << \" \" << a + b << \" \" << a << endl ;",
        "cout << a + b << \" \" << 0 << \" \" << a << \" \" << a + b << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        8,
        9,
        2
      ],
      "mod_code": [
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "else else",
        "a >> a >> b ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        8,
        9,
        2,
        10
      ],
      "mod_code": [
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "else else",
        "a >> a >> b ;",
        "cout << a + b << \" \" << 0 << \" \" << a << \" \" << a + b << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        8,
        9,
        10
      ],
      "mod_code": [
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "else else",
        "cout << a + b << \" \" << 0 << \" \" << a << \" \" << a + b << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "a >> a >> b ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        8,
        2,
        10
      ],
      "mod_code": [
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "a >> a >> b ;",
        "cout << a + b << \" \" << 0 << \" \" << a << \" \" << a + b << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "cout << a - b << \" \" << 0 << \" \" << b - \" \" << b - a << endl ;",
        "cout << a + b << \" \" << 0 << \" \" << a << \" \" << a + b << endl ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "cout << 0 << \" \" << a + b << \" \" << a + b << \" \" << a << endl ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        9,
        2
      ],
      "mod_code": [
        "cout << 0 << \" \" << a + b << \" \" << a + b << \" \" << a << endl ;",
        "else else",
        "a >> a >> b ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        9,
        2,
        10
      ],
      "mod_code": [
        "cout << 0 << \" \" << a + b << \" \" << a + b << \" \" << a << endl ;",
        "else else",
        "a >> a >> b ;",
        "cout << a + b << \" \" << 0 << \" \" << a << \" \" << a + b << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        9,
        10
      ],
      "mod_code": [
        "cout << 0 << \" \" << a + b << \" \" << a + b << \" \" << a << endl ;",
        "else else",
        "cout << a + b << \" \" << 0 << \" \" << a << \" \" << a + b << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "else else",
        "a >> a >> b ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        2,
        10
      ],
      "mod_code": [
        "else else",
        "a >> a >> b ;",
        "cout << a + b << \" \" << 0 << \" \" << a << \" \" << a + b << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "else else",
        "cout << a + b << \" \" << 0 << \" \" << a << \" \" << a + b << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}