{
  "meta": {
    "index": 1992,
    "hitid": "338GLSUI435W9IYG3OHH45GPMXYFSL",
    "workerid": "A24WRPQYGMQLGF",
    "probid": "389A",
    "subid": "48214949"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function gcd with arguments integer x and integer y that returns an integer",
      "code": "int gcd ( int x , int y )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if x < y , then return the result of calling gcd with arguments of y and x",
      "code": "if ( x < y ) { return gcd ( y , x ) ; }",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if y is 0 , then return x",
      "code": "if ( y == 0 ) { return x ; }",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return the result of calling gcd with arguments of y and x modulo y",
      "code": "return gcd ( y , x % y ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "n , g , x = integer",
      "code": "int n , g , x ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read g",
      "code": "cin >> g ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "g = the result of calling gcd with arguments of g and x",
      "code": "g = gcd ( g , x ) ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print the result of g * n",
      "code": "cout << g * n << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "gets ( g ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        7
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        7,
        10
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "while ( cin >> n )",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        7,
        11
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "while ( cin >> n )",
        "int g = gcd ( g , x ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        7,
        8
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "while ( cin >> n )",
        "gets ( g ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        10
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        10,
        11
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "cin >> n ;",
        "int g = gcd ( g , x ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        10,
        8
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "cin >> n ;",
        "gets ( g ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        11
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "int g = gcd ( g , x ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        11,
        8
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "int g = gcd ( g , x ) ;",
        "gets ( g ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        8
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "gets ( g ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        10
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "while ( cin >> n )",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        10,
        11
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "while ( cin >> n )",
        "cin >> n ;",
        "int g = gcd ( g , x ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        10,
        8
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "while ( cin >> n )",
        "cin >> n ;",
        "gets ( g ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        11
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "while ( cin >> n )",
        "int g = gcd ( g , x ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        11,
        8
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "while ( cin >> n )",
        "int g = gcd ( g , x ) ;",
        "gets ( g ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        8
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "while ( cin >> n )",
        "gets ( g ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        10,
        11
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "cin >> n ;",
        "int g = gcd ( g , x ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        10,
        11,
        8
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "cin >> n ;",
        "int g = gcd ( g , x ) ;",
        "gets ( g ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        10,
        8
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "cin >> n ;",
        "gets ( g ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "int g = gcd ( g , x ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11,
        8
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "int g = gcd ( g , x ) ;",
        "gets ( g ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "int gcd ( int x , int y ) ;",
        "gets ( g ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "while ( cin >> n )"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        7,
        10
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "while ( cin >> n )",
        "cin >> n ;"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        7,
        10,
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "while ( cin >> n )",
        "cin >> n ;",
        "int g = gcd ( g , x ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        7,
        10,
        8
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "while ( cin >> n )",
        "cin >> n ;",
        "gets ( g ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        7,
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "while ( cin >> n )",
        "int g = gcd ( g , x ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        7,
        11,
        8
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "while ( cin >> n )",
        "int g = gcd ( g , x ) ;",
        "gets ( g ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        7,
        8
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "while ( cin >> n )",
        "gets ( g ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "cin >> n ;"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "cin >> n ;",
        "int g = gcd ( g , x ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        11,
        8
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "cin >> n ;",
        "int g = gcd ( g , x ) ;",
        "gets ( g ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        10,
        8
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "cin >> n ;",
        "gets ( g ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "int g = gcd ( g , x ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11,
        8
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "int g = gcd ( g , x ) ;",
        "gets ( g ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "gets ( g ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10,
        11,
        8
      ],
      "mod_code": [
        "while ( cin >> n )",
        "cin >> n ;",
        "int g = gcd ( g , x ) ;",
        "gets ( g ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10,
        8
      ],
      "mod_code": [
        "while ( cin >> n )",
        "cin >> n ;",
        "gets ( g ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        11,
        8
      ],
      "mod_code": [
        "while ( cin >> n )",
        "int g = gcd ( g , x ) ;",
        "gets ( g ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "while ( cin >> n )",
        "gets ( g ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        11,
        8
      ],
      "mod_code": [
        "cin >> n ;",
        "int g = gcd ( g , x ) ;",
        "gets ( g ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "cin >> n ;",
        "gets ( g ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "int g = gcd ( g , x ) ;",
        "gets ( g ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    }
  ]
}