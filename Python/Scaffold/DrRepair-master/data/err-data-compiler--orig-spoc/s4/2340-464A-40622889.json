{
  "meta": {
    "index": 2340,
    "hitid": "3J6BHNX0U9MA9RYPW3RSLOYO7U3KNC",
    "workerid": "A2O34N3Y3RJLJ6",
    "probid": "464A",
    "subid": "40622889"
  },
  "lines": [
    {
      "line": 0,
      "text": "define function bigmod taking integers a , b , m",
      "code": "long long bigmod ( long long a , long long b , long long m )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if b is 0 , return 1 modulo m",
      "code": "if ( b == 0 ) return 1 % m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "define integer x , set to bigmod ( a , b / 2 , m )",
      "code": "long long x = bigmod ( a , b / 2 , m ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set x to ( x modulo m x modulo m ) modulo m",
      "code": "x = ( x % m * x % m ) % m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if b is odd , then assign ( x modulo m a modulo m ) modulo m to x",
      "code": "if ( b % 2 ) x = ( x % m * a % m ) % m ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "return x",
      "code": "return x ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "define string s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 8,
      "text": "let n be integer",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 9,
      "text": "define function f , taking ints i , k",
      "code": "int f ( int i , int k )",
      "indent": 0
    },
    {
      "line": 10,
      "text": "if i is n , return 1",
      "code": "if ( i == n ) return 1 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "iterate while s [ i ] - character a is < k , incrementing s [ i ]",
      "code": "for ( ; s [ i ] - ' a ' < k ; s [ i ] ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if i and ( s [ i ] is s [ i - 1 ] ) then continue",
      "code": "if ( i && s [ i ] == s [ i - 1 ] ) continue ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if i > 1 and ( s [ i ] is s [ i - 2 ] ) , continue",
      "code": "if ( i > 1 && s [ i ] == s [ i - 2 ] ) continue ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if f ( i + 1 , k ) , return 1",
      "code": "if ( f ( i + 1 , k ) ) return 1 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": ";",
      "code": ";",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "set s [ i ] to character a",
      "code": "s [ i ] = ' a ' ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 21,
      "text": "define int k",
      "code": "int k ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "read n , k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "increment s [ s length - 1 ]",
      "code": "s [ s . size ( ) - 1 ] ++ ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if f ( 0 , k )",
      "code": "if ( f ( 0 , k ) )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print s and newline",
      "code": "cout << s << endl ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "otherwise",
      "code": "else",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print NO and newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": ";",
      "code": ";",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;"
      ],
      "err_line": 12,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int x , b = bigmod ( a , b / 2 ) ;"
      ],
      "err_line": 2,
      "err_msg": "declaration of ‘int b’ shadows a parameter"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "vector < string > s ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator-’ (operand types are ‘std::__cxx11::basic_string<char>’ and ‘char’)"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "while ( s [ i ] - 1 == k ) s [ i ] ++ ;"
      ],
      "err_line": 12,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "s [ i ] = \" a \" ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "int n ;"
      ],
      "err_line": 22,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 23,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "s [ s ++ - 1 ] ++ ;"
      ],
      "err_line": 24,
      "err_msg": "no ‘operator++(int)’ declared for postfix ‘++’ [-fpermissive]"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "if ( f ( i , k ) )"
      ],
      "err_line": 25,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        17
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "s [ i ] = \" a \" ;"
      ],
      "err_line": 12,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        11,
        17,
        2
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "s [ i ] = \" a \" ;",
        "int x , b = bigmod ( a , b / 2 ) ;"
      ],
      "err_line": 2,
      "err_msg": "declaration of ‘int b’ shadows a parameter"
    },
    {
      "mod_line": [
        11,
        17,
        2,
        23
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "s [ i ] = \" a \" ;",
        "int x , b = bigmod ( a , b / 2 ) ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "declaration of ‘int b’ shadows a parameter"
    },
    {
      "mod_line": [
        11,
        17,
        2,
        21
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "s [ i ] = \" a \" ;",
        "int x , b = bigmod ( a , b / 2 ) ;",
        "int n ;"
      ],
      "err_line": 2,
      "err_msg": "declaration of ‘int b’ shadows a parameter"
    },
    {
      "mod_line": [
        11,
        17,
        2,
        0
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "s [ i ] = \" a \" ;",
        "int x , b = bigmod ( a , b / 2 ) ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        17,
        23
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "s [ i ] = \" a \" ;",
        "gets ( s ) ;"
      ],
      "err_line": 12,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        11,
        17,
        23,
        21
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "s [ i ] = \" a \" ;",
        "gets ( s ) ;",
        "int n ;"
      ],
      "err_line": 12,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        11,
        17,
        23,
        0
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "s [ i ] = \" a \" ;",
        "gets ( s ) ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        17,
        21
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "s [ i ] = \" a \" ;",
        "int n ;"
      ],
      "err_line": 12,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        11,
        17,
        21,
        0
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "s [ i ] = \" a \" ;",
        "int n ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        17,
        0
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "s [ i ] = \" a \" ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "int x , b = bigmod ( a , b / 2 ) ;"
      ],
      "err_line": 2,
      "err_msg": "declaration of ‘int b’ shadows a parameter"
    },
    {
      "mod_line": [
        11,
        2,
        23
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "int x , b = bigmod ( a , b / 2 ) ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "declaration of ‘int b’ shadows a parameter"
    },
    {
      "mod_line": [
        11,
        2,
        23,
        21
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "int x , b = bigmod ( a , b / 2 ) ;",
        "gets ( s ) ;",
        "int n ;"
      ],
      "err_line": 2,
      "err_msg": "declaration of ‘int b’ shadows a parameter"
    },
    {
      "mod_line": [
        11,
        2,
        23,
        0
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "int x , b = bigmod ( a , b / 2 ) ;",
        "gets ( s ) ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        2,
        21
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "int x , b = bigmod ( a , b / 2 ) ;",
        "int n ;"
      ],
      "err_line": 2,
      "err_msg": "declaration of ‘int b’ shadows a parameter"
    },
    {
      "mod_line": [
        11,
        2,
        21,
        0
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "int x , b = bigmod ( a , b / 2 ) ;",
        "int n ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        2,
        0
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "int x , b = bigmod ( a , b / 2 ) ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        23
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "gets ( s ) ;"
      ],
      "err_line": 12,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        11,
        23,
        21
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "gets ( s ) ;",
        "int n ;"
      ],
      "err_line": 12,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        11,
        23,
        21,
        0
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "gets ( s ) ;",
        "int n ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        23,
        0
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "gets ( s ) ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        21
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "int n ;"
      ],
      "err_line": 12,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        11,
        21,
        0
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "int n ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        0
      ],
      "mod_code": [
        "while ( s [ i ] - ' a ' ) s [ i ] ++ ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        2
      ],
      "mod_code": [
        "s [ i ] = \" a \" ;",
        "int x , b = bigmod ( a , b / 2 ) ;"
      ],
      "err_line": 2,
      "err_msg": "declaration of ‘int b’ shadows a parameter"
    },
    {
      "mod_line": [
        17,
        2,
        23
      ],
      "mod_code": [
        "s [ i ] = \" a \" ;",
        "int x , b = bigmod ( a , b / 2 ) ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "declaration of ‘int b’ shadows a parameter"
    },
    {
      "mod_line": [
        17,
        2,
        23,
        21
      ],
      "mod_code": [
        "s [ i ] = \" a \" ;",
        "int x , b = bigmod ( a , b / 2 ) ;",
        "gets ( s ) ;",
        "int n ;"
      ],
      "err_line": 2,
      "err_msg": "declaration of ‘int b’ shadows a parameter"
    },
    {
      "mod_line": [
        17,
        2,
        23,
        0
      ],
      "mod_code": [
        "s [ i ] = \" a \" ;",
        "int x , b = bigmod ( a , b / 2 ) ;",
        "gets ( s ) ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        2,
        21
      ],
      "mod_code": [
        "s [ i ] = \" a \" ;",
        "int x , b = bigmod ( a , b / 2 ) ;",
        "int n ;"
      ],
      "err_line": 2,
      "err_msg": "declaration of ‘int b’ shadows a parameter"
    },
    {
      "mod_line": [
        17,
        2,
        21,
        0
      ],
      "mod_code": [
        "s [ i ] = \" a \" ;",
        "int x , b = bigmod ( a , b / 2 ) ;",
        "int n ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        2,
        0
      ],
      "mod_code": [
        "s [ i ] = \" a \" ;",
        "int x , b = bigmod ( a , b / 2 ) ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        23
      ],
      "mod_code": [
        "s [ i ] = \" a \" ;",
        "gets ( s ) ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        23,
        21
      ],
      "mod_code": [
        "s [ i ] = \" a \" ;",
        "gets ( s ) ;",
        "int n ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        23,
        21,
        0
      ],
      "mod_code": [
        "s [ i ] = \" a \" ;",
        "gets ( s ) ;",
        "int n ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        23,
        0
      ],
      "mod_code": [
        "s [ i ] = \" a \" ;",
        "gets ( s ) ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        21
      ],
      "mod_code": [
        "s [ i ] = \" a \" ;",
        "int n ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        21,
        0
      ],
      "mod_code": [
        "s [ i ] = \" a \" ;",
        "int n ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        0
      ],
      "mod_code": [
        "s [ i ] = \" a \" ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        23
      ],
      "mod_code": [
        "int x , b = bigmod ( a , b / 2 ) ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "declaration of ‘int b’ shadows a parameter"
    },
    {
      "mod_line": [
        2,
        23,
        21
      ],
      "mod_code": [
        "int x , b = bigmod ( a , b / 2 ) ;",
        "gets ( s ) ;",
        "int n ;"
      ],
      "err_line": 2,
      "err_msg": "declaration of ‘int b’ shadows a parameter"
    },
    {
      "mod_line": [
        2,
        23,
        21,
        0
      ],
      "mod_code": [
        "int x , b = bigmod ( a , b / 2 ) ;",
        "gets ( s ) ;",
        "int n ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        23,
        0
      ],
      "mod_code": [
        "int x , b = bigmod ( a , b / 2 ) ;",
        "gets ( s ) ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        21
      ],
      "mod_code": [
        "int x , b = bigmod ( a , b / 2 ) ;",
        "int n ;"
      ],
      "err_line": 2,
      "err_msg": "declaration of ‘int b’ shadows a parameter"
    },
    {
      "mod_line": [
        2,
        21,
        0
      ],
      "mod_code": [
        "int x , b = bigmod ( a , b / 2 ) ;",
        "int n ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "int x , b = bigmod ( a , b / 2 ) ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        23,
        21
      ],
      "mod_code": [
        "gets ( s ) ;",
        "int n ;"
      ],
      "err_line": 22,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        21,
        0
      ],
      "mod_code": [
        "gets ( s ) ;",
        "int n ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        23,
        0
      ],
      "mod_code": [
        "gets ( s ) ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        0
      ],
      "mod_code": [
        "int n ;",
        "bool bigmod ( int a , int b , int m ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}