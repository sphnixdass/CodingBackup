{
  "meta": {
    "index": 283,
    "hitid": "3L60IFZKF3CRX5B6NKTI3CL0T1RHHX",
    "workerid": "A1MJVTR0PCKBWW",
    "probid": "777A",
    "subid": "37490463"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , x , i = long long integers",
      "code": "long long n , x , i ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , x",
      "code": "cin >> n >> x ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "integers = vis [ 3 ] = 0 , 0 , 0",
      "code": "int vis [ 3 ] = { 0 , 0 , 0 } ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set vis [ x ] to 1",
      "code": "vis [ x ] = 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "n = n modulus 6",
      "code": "n %= 6 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if n is true do the following",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if n modulo 2 is 0 then do the following",
      "code": "if ( n % 2 == 0 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "swap vis [ 0 ] and vis [ 1 ]",
      "code": "swap ( vis [ 0 ] , vis [ 1 ] ) ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "swap vis [ 1 ] and vis [ 2 ]",
      "code": "swap ( vis [ 1 ] , vis [ 2 ] ) ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for = 0 to less than 3 do the following",
      "code": "for ( i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if vis [ i ] is true",
      "code": "if ( vis [ i ] ) cout << i << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( vis [ i ] )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "swap ( vis [ 1 ] , vis [ 2 ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( j = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( vis [ i ] == true )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;",
        "if ( vis [ i ] )"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        3,
        13,
        9
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;",
        "if ( vis [ i ] )",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        3,
        13,
        9,
        2
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;",
        "if ( vis [ i ] )",
        "else ;",
        "cin >> n , x ;"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        3,
        13,
        9,
        6
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;",
        "if ( vis [ i ] )",
        "else ;",
        "if ( n -- )"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        3,
        13,
        2
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;",
        "if ( vis [ i ] )",
        "cin >> n , x ;"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        3,
        13,
        2,
        6
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;",
        "if ( vis [ i ] )",
        "cin >> n , x ;",
        "if ( n -- )"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        3,
        13,
        6
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;",
        "if ( vis [ i ] )",
        "if ( n -- )"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        3,
        9,
        2
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;",
        "else ;",
        "cin >> n , x ;"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        3,
        9,
        2,
        13
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;",
        "else ;",
        "cin >> n , x ;",
        "if ( vis [ i ] == true )"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        3,
        9,
        2,
        6
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;",
        "else ;",
        "cin >> n , x ;",
        "if ( n -- )"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        3,
        9,
        13
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;",
        "else ;",
        "if ( vis [ i ] == true )"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        3,
        9,
        13,
        6
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;",
        "else ;",
        "if ( vis [ i ] == true )",
        "if ( n -- )"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        3,
        9,
        6
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;",
        "else ;",
        "if ( n -- )"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;",
        "cin >> n , x ;"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        3,
        2,
        13
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;",
        "cin >> n , x ;",
        "if ( vis [ i ] == true )"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        3,
        2,
        13,
        6
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;",
        "cin >> n , x ;",
        "if ( vis [ i ] == true )",
        "if ( n -- )"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        3,
        2,
        6
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;",
        "cin >> n , x ;",
        "if ( n -- )"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;",
        "if ( vis [ i ] == true )"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        3,
        13,
        6
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;",
        "if ( vis [ i ] == true )",
        "if ( n -- )"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "int vis [ 3 ] = 0 , 0 , 0 ;",
        "if ( n -- )"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        13,
        9
      ],
      "mod_code": [
        "if ( vis [ i ] )",
        "else ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        9,
        2
      ],
      "mod_code": [
        "if ( vis [ i ] )",
        "else ;",
        "cin >> n , x ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        9,
        2,
        6
      ],
      "mod_code": [
        "if ( vis [ i ] )",
        "else ;",
        "cin >> n , x ;",
        "if ( n -- )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        9,
        6
      ],
      "mod_code": [
        "if ( vis [ i ] )",
        "else ;",
        "if ( n -- )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        2
      ],
      "mod_code": [
        "if ( vis [ i ] )",
        "cin >> n , x ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        2,
        6
      ],
      "mod_code": [
        "if ( vis [ i ] )",
        "cin >> n , x ;",
        "if ( n -- )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        6
      ],
      "mod_code": [
        "if ( vis [ i ] )",
        "if ( n -- )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        2,
        13
      ],
      "mod_code": [
        "else ;",
        "cin >> n , x ;",
        "if ( vis [ i ] == true )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        2,
        13,
        6
      ],
      "mod_code": [
        "else ;",
        "cin >> n , x ;",
        "if ( vis [ i ] == true )",
        "if ( n -- )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "else ;",
        "if ( vis [ i ] == true )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        13,
        6
      ],
      "mod_code": [
        "else ;",
        "if ( vis [ i ] == true )",
        "if ( n -- )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "cin >> n , x ;",
        "if ( vis [ i ] == true )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        13,
        6
      ],
      "mod_code": [
        "cin >> n , x ;",
        "if ( vis [ i ] == true )",
        "if ( n -- )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        6
      ],
      "mod_code": [
        "if ( vis [ i ] == true )",
        "if ( n -- )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}