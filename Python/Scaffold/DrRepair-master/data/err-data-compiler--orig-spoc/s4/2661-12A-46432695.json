{
  "meta": {
    "index": 2661,
    "hitid": "3NCN4N1H1GB9GOUVQQEZMLFYJYLNBH",
    "workerid": "AIWEXPJAU66D9",
    "probid": "12A",
    "subid": "46432695"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create strings a , b , c",
      "code": "string a , b , c ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a , b and c",
      "code": "cin >> a >> b >> c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set string str to a + b + c",
      "code": "string str = a + b + c ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set string rts to str",
      "code": "string rts = str ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "reverse str",
      "code": "reverse ( str . begin ( ) , str . end ( ) ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if str equals to rts",
      "code": "if ( str == rts )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( str == ' rts ' )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string a , b , c , c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> a , b >> c ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string str += b + c ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "string rts = ' str ' ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "reverse ( str . begin ( ) , str . reverse ( ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘reverse’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "if ( str == ' rts ' )",
        "string a , b , c , c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        6,
        1,
        2
      ],
      "mod_code": [
        "if ( str == ' rts ' )",
        "string a , b , c , c ;",
        "cin >> a , b >> c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        6,
        1,
        2,
        8
      ],
      "mod_code": [
        "if ( str == ' rts ' )",
        "string a , b , c , c ;",
        "cin >> a , b >> c ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        6,
        1,
        2,
        3
      ],
      "mod_code": [
        "if ( str == ' rts ' )",
        "string a , b , c , c ;",
        "cin >> a , b >> c ;",
        "string str += b + c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        6,
        1,
        8
      ],
      "mod_code": [
        "if ( str == ' rts ' )",
        "string a , b , c , c ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        6,
        1,
        8,
        3
      ],
      "mod_code": [
        "if ( str == ' rts ' )",
        "string a , b , c , c ;",
        "else else",
        "string str += b + c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        6,
        1,
        3
      ],
      "mod_code": [
        "if ( str == ' rts ' )",
        "string a , b , c , c ;",
        "string str += b + c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "if ( str == ' rts ' )",
        "cin >> a , b >> c ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        2,
        8
      ],
      "mod_code": [
        "if ( str == ' rts ' )",
        "cin >> a , b >> c ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        2,
        8,
        3
      ],
      "mod_code": [
        "if ( str == ' rts ' )",
        "cin >> a , b >> c ;",
        "else else",
        "string str += b + c ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        2,
        3
      ],
      "mod_code": [
        "if ( str == ' rts ' )",
        "cin >> a , b >> c ;",
        "string str += b + c ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "if ( str == ' rts ' )",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        6,
        8,
        3
      ],
      "mod_code": [
        "if ( str == ' rts ' )",
        "else else",
        "string str += b + c ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "if ( str == ' rts ' )",
        "string str += b + c ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "if ( str == \" rts \" )",
        "string a , b , c , c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        6,
        1,
        2
      ],
      "mod_code": [
        "if ( str == \" rts \" )",
        "string a , b , c , c ;",
        "cin >> a , b >> c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        6,
        1,
        2,
        8
      ],
      "mod_code": [
        "if ( str == \" rts \" )",
        "string a , b , c , c ;",
        "cin >> a , b >> c ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        6,
        1,
        2,
        3
      ],
      "mod_code": [
        "if ( str == \" rts \" )",
        "string a , b , c , c ;",
        "cin >> a , b >> c ;",
        "string str += b + c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        6,
        1,
        8
      ],
      "mod_code": [
        "if ( str == \" rts \" )",
        "string a , b , c , c ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        6,
        1,
        8,
        3
      ],
      "mod_code": [
        "if ( str == \" rts \" )",
        "string a , b , c , c ;",
        "else else",
        "string str += b + c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        6,
        1,
        3
      ],
      "mod_code": [
        "if ( str == \" rts \" )",
        "string a , b , c , c ;",
        "string str += b + c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "if ( str == \" rts \" )",
        "cin >> a , b >> c ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        2,
        8
      ],
      "mod_code": [
        "if ( str == \" rts \" )",
        "cin >> a , b >> c ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        2,
        8,
        3
      ],
      "mod_code": [
        "if ( str == \" rts \" )",
        "cin >> a , b >> c ;",
        "else else",
        "string str += b + c ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        2,
        3
      ],
      "mod_code": [
        "if ( str == \" rts \" )",
        "cin >> a , b >> c ;",
        "string str += b + c ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "if ( str == \" rts \" )",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        8,
        3
      ],
      "mod_code": [
        "if ( str == \" rts \" )",
        "else else",
        "string str += b + c ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "if ( str == \" rts \" )",
        "string str += b + c ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "string a , b , c , c ;",
        "cin >> a , b >> c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        1,
        2,
        8
      ],
      "mod_code": [
        "string a , b , c , c ;",
        "cin >> a , b >> c ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        3
      ],
      "mod_code": [
        "string a , b , c , c ;",
        "cin >> a , b >> c ;",
        "else else",
        "string str += b + c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "string a , b , c , c ;",
        "cin >> a , b >> c ;",
        "string str += b + c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "string a , b , c , c ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        1,
        8,
        3
      ],
      "mod_code": [
        "string a , b , c , c ;",
        "else else",
        "string str += b + c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "string a , b , c , c ;",
        "string str += b + c ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "cin >> a , b >> c ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8,
        3
      ],
      "mod_code": [
        "cin >> a , b >> c ;",
        "else else",
        "string str += b + c ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "cin >> a , b >> c ;",
        "string str += b + c ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "else else",
        "string str += b + c ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘+=’ token"
    }
  ]
}