{
  "meta": {
    "index": 948,
    "hitid": "3EHIMLB7F7TY4UADKGZCQZS1QI3H8K",
    "workerid": "A1APYLD4DUK33J",
    "probid": "275A",
    "subid": "48584434"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create 2d integer arrays a , b , with a size 3 by 3 , b size 3 by 3 , with b = { 0 }",
      "code": "int a [ 3 ] [ 3 ] , b [ 3 ] [ 3 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for j = 0 to 3 exclusive",
      "code": "for ( int j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 4,
      "text": "read a [ i ] [ j ]",
      "code": "cin >> a [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 5,
      "text": "if a [ i ] [ j ] % 2 is 0",
      "code": "if ( a [ i ] [ j ] % 2 == 0 )",
      "indent": 3
    },
    {
      "line": 6,
      "text": "set a [ i ] [ j ] to 0",
      "code": "a [ i ] [ j ] = 0 ;",
      "indent": 4
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 8,
      "text": "set a [ i ] [ j ] to 1",
      "code": "a [ i ] [ j ] = 1 ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for j = 0 to 3 exclusive",
      "code": "for ( int j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if a [ i ] [ j ] is 1",
      "code": "if ( a [ i ] [ j ] == 1 )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "increment b [ i ] [ j ] by 1",
      "code": "b [ i ] [ j ] += 1 ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "if j is less than 2",
      "code": "if ( j < 2 )",
      "indent": 4
    },
    {
      "line": 16,
      "text": "increment b [ i ] [ increment j ] by 1",
      "code": "b [ i ] [ ++ j ] += 1 ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "decrement j",
      "code": "j -- ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 19,
      "text": "if j is greater than 0",
      "code": "if ( j > 0 )",
      "indent": 4
    },
    {
      "line": 20,
      "text": "increment b [ i ] [ decrement j ] by 1",
      "code": "b [ i ] [ -- j ] += 1 ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "increment j",
      "code": "j ++ ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 23,
      "text": "if i is less than 2",
      "code": "if ( i < 2 )",
      "indent": 4
    },
    {
      "line": 24,
      "text": "increment b [ increment i ] [ j ] by 1",
      "code": "b [ ++ i ] [ j ] += 1 ;",
      "indent": 5
    },
    {
      "line": 25,
      "text": "decrement i",
      "code": "i -- ;",
      "indent": 5
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 27,
      "text": "if i is greater than 0",
      "code": "if ( i > 0 )",
      "indent": 4
    },
    {
      "line": 28,
      "text": "increment b [ decrement i ] [ j ] by 1",
      "code": "b [ -- i ] [ j ] += 1 ;",
      "indent": 5
    },
    {
      "line": 29,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 5
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 34,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 35,
      "text": "for j = 0 to 3 exclusive",
      "code": "for ( int j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 36,
      "text": "if b [ i ] [ j ] % 2 is 0",
      "code": "if ( b [ i ] [ j ] % 2 == 0 )",
      "indent": 3
    },
    {
      "line": 37,
      "text": "set b [ i ] [ j ] to 0",
      "code": "b [ i ] [ j ] = 0 ;",
      "indent": 4
    },
    {
      "line": 38,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 39,
      "text": "set b [ i ] [ j ] to 1",
      "code": "b [ i ] [ j ] = 1 ;",
      "indent": 4
    },
    {
      "line": 40,
      "text": "if b [ i ] [ j ] is true",
      "code": "if ( b [ i ] [ j ] )",
      "indent": 3
    },
    {
      "line": 41,
      "text": "set b [ i ] [ j ] to 0",
      "code": "b [ i ] [ j ] = 0 ;",
      "indent": 4
    },
    {
      "line": 42,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 43,
      "text": "set b [ i ] [ j ] to 1",
      "code": "b [ i ] [ j ] = 1 ;",
      "indent": 4
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 46,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 47,
      "text": "for j = 0 to 3 exclusive , print b [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < 3 ; j ++ ) { cout << b [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 48,
      "text": "print ' \\ n '",
      "code": "cout << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 51,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 34,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 35,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 42,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        46
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 46,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ] [ j ] ++ ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        16,
        20
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ] [ j ] ++ ;",
        "b [ i ] [ j ] ++ ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        16,
        20,
        24
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ] [ j ] ++ ;",
        "b [ i ] [ j ] ++ ;",
        "b [ i ++ ] [ j ] ++ ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        16,
        20,
        28
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ] [ j ] ++ ;",
        "b [ i ] [ j ] ++ ;",
        "b [ i ++ ] [ j ] ++ ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        16,
        20,
        23
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ] [ j ] ++ ;",
        "b [ i ] [ j ] ++ ;",
        "if ( i <= 2 )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        16,
        24
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ] [ j ] ++ ;",
        "b [ i ++ ] [ j ] ++ ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        16,
        24,
        28
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ] [ j ] ++ ;",
        "b [ i ++ ] [ j ] ++ ;",
        "b [ i ++ ] [ j ] ++ ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        16,
        24,
        23
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ] [ j ] ++ ;",
        "b [ i ++ ] [ j ] ++ ;",
        "if ( i <= 2 )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        16,
        28
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ] [ j ] ++ ;",
        "b [ i ++ ] [ j ] ++ ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        16,
        28,
        23
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ] [ j ] ++ ;",
        "b [ i ++ ] [ j ] ++ ;",
        "if ( i <= 2 )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        16,
        23
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ] [ j ] ++ ;",
        "if ( i <= 2 )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        20
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ] [ j ] ++ ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        20,
        24
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ] [ j ] ++ ;",
        "b [ i ++ ] [ j ] ++ ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        20,
        24,
        28
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ] [ j ] ++ ;",
        "b [ i ++ ] [ j ] ++ ;",
        "b [ i ++ ] [ j ] ++ ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        20,
        24,
        23
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ] [ j ] ++ ;",
        "b [ i ++ ] [ j ] ++ ;",
        "if ( i <= 2 )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        20,
        28
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ] [ j ] ++ ;",
        "b [ i ++ ] [ j ] ++ ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        20,
        28,
        23
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ] [ j ] ++ ;",
        "b [ i ++ ] [ j ] ++ ;",
        "if ( i <= 2 )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        20,
        23
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ] [ j ] ++ ;",
        "if ( i <= 2 )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        24
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ++ ] [ j ] ++ ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        24,
        28
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ++ ] [ j ] ++ ;",
        "b [ i ++ ] [ j ] ++ ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        24,
        28,
        23
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ++ ] [ j ] ++ ;",
        "b [ i ++ ] [ j ] ++ ;",
        "if ( i <= 2 )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        24,
        23
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ++ ] [ j ] ++ ;",
        "if ( i <= 2 )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        28
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ++ ] [ j ] ++ ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        28,
        23
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "b [ i ++ ] [ j ] ++ ;",
        "if ( i <= 2 )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        23
      ],
      "mod_code": [
        "int a [ 3 ] = { 0 } , b [ 3 ] = { 0 } ;",
        "if ( i <= 2 )"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}