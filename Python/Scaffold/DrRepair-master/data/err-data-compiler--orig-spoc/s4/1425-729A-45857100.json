{
  "meta": {
    "index": 1425,
    "hitid": "3CMIQF80GNKOD9QSARP8FZOBANG6QF",
    "workerid": "A1APYLD4DUK33J",
    "probid": "729A",
    "subid": "45857100"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create boolean bisa with bisa = false",
      "code": "bool bisa = false ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to size of s exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if ( i is less than size of s ) is false , abort program",
      "code": "assert ( i < s . size ( ) ) ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if i is less than or equal to size of s - 3 and s [ i ] is ' o ' and s [ i + 1 ] is ' g ' and s [ i + 2 ] is ' o '",
      "code": "if ( ( i <= s . size ( ) - 3 ) && s [ i ] == ' o ' && s [ i + 1 ] == ' g ' && s [ i + 2 ] == ' o ' )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set s [ i ] to ' * '",
      "code": "s [ i ] = ' * ' ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "set s [ i + 1 ] to ' * '",
      "code": "s [ i + 1 ] = ' * ' ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "set s [ i + 2 ] to ' * '",
      "code": "s [ i + 2 ] = ' * ' ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "set bisa to true",
      "code": "bisa = true ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment i by 2",
      "code": "i += 2 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else if i is less than or equal to size of s - 2 and s [ i ] is ' g ' and s [ i + 1 ] is ' o ' and bisa",
      "code": "else if ( ( i <= s . size ( ) - 2 ) && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "remove from beginning of s + i to beginning of s + i + 2 from s",
      "code": "s . erase ( s . begin ( ) + i , s . begin ( ) + i + 2 ) ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "decrement i",
      "code": "i -- ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 18,
      "text": "set bisa to false",
      "code": "bisa = false ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print s print newline",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘std::__cxx11::string n’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "s . erase ( s . begin ( ) + i ) ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        15,
        2
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "s . erase ( s . begin ( ) + i ) ;",
        "while ( cin >> n )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        2,
        12
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "s . erase ( s . begin ( ) + i ) ;",
        "while ( cin >> n )",
        "bool bisa = true ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        2,
        4
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "s . erase ( s . begin ( ) + i ) ;",
        "while ( cin >> n )",
        "gets ( s ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        2,
        10
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "s . erase ( s . begin ( ) + i ) ;",
        "while ( cin >> n )",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        15,
        12
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "s . erase ( s . begin ( ) + i ) ;",
        "bool bisa = true ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        15,
        12,
        4
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "s . erase ( s . begin ( ) + i ) ;",
        "bool bisa = true ;",
        "gets ( s ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        14,
        15,
        12,
        10
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "s . erase ( s . begin ( ) + i ) ;",
        "bool bisa = true ;",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        15,
        4
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "s . erase ( s . begin ( ) + i ) ;",
        "gets ( s ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        14,
        15,
        4,
        10
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "s . erase ( s . begin ( ) + i ) ;",
        "gets ( s ) ;",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        14,
        15,
        10
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "s . erase ( s . begin ( ) + i ) ;",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        2
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "while ( cin >> n )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        2,
        12
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "while ( cin >> n )",
        "bool bisa = true ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        2,
        12,
        4
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "while ( cin >> n )",
        "bool bisa = true ;",
        "gets ( s ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        2,
        12,
        10
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "while ( cin >> n )",
        "bool bisa = true ;",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        2,
        4
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "while ( cin >> n )",
        "gets ( s ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        2,
        4,
        10
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "while ( cin >> n )",
        "gets ( s ) ;",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        2,
        10
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "while ( cin >> n )",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "bool bisa = true ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        12,
        4
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "bool bisa = true ;",
        "gets ( s ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        14,
        12,
        4,
        10
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "bool bisa = true ;",
        "gets ( s ) ;",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        14,
        12,
        10
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "bool bisa = true ;",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        4
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "gets ( s ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        14,
        4,
        10
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "gets ( s ) ;",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        14,
        10
      ],
      "mod_code": [
        "else if ( i <= s . size ( ) - 2 && s [ i ] == ' g ' && s [ i + 1 ] == ' o ' && bisa [ i + 1 ] == ' o ' )",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        2
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) + i ) ;",
        "while ( cin >> n )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        2,
        12
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) + i ) ;",
        "while ( cin >> n )",
        "bool bisa = true ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        2,
        12,
        4
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) + i ) ;",
        "while ( cin >> n )",
        "bool bisa = true ;",
        "gets ( s ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        2,
        12,
        10
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) + i ) ;",
        "while ( cin >> n )",
        "bool bisa = true ;",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        2,
        4
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) + i ) ;",
        "while ( cin >> n )",
        "gets ( s ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        2,
        4,
        10
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) + i ) ;",
        "while ( cin >> n )",
        "gets ( s ) ;",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        2,
        10
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) + i ) ;",
        "while ( cin >> n )",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        12,
        4
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) + i ) ;",
        "bool bisa = true ;",
        "gets ( s ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        15,
        12,
        4,
        10
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) + i ) ;",
        "bool bisa = true ;",
        "gets ( s ) ;",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        15,
        4
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) + i ) ;",
        "gets ( s ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        15,
        4,
        10
      ],
      "mod_code": [
        "s . erase ( s . begin ( ) + i ) ;",
        "gets ( s ) ;",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "while ( cin >> n )",
        "bool bisa = true ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        12,
        4
      ],
      "mod_code": [
        "while ( cin >> n )",
        "bool bisa = true ;",
        "gets ( s ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        12,
        4,
        10
      ],
      "mod_code": [
        "while ( cin >> n )",
        "bool bisa = true ;",
        "gets ( s ) ;",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        12,
        10
      ],
      "mod_code": [
        "while ( cin >> n )",
        "bool bisa = true ;",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "while ( cin >> n )",
        "gets ( s ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        10
      ],
      "mod_code": [
        "while ( cin >> n )",
        "gets ( s ) ;",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "while ( cin >> n )",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "bool bisa = true ;",
        "gets ( s ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        4,
        10
      ],
      "mod_code": [
        "bool bisa = true ;",
        "gets ( s ) ;",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "gets ( s ) ;",
        "if ( s [ i + 1 ] == ' * ' )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}