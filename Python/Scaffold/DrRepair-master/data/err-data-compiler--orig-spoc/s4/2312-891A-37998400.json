{
  "meta": {
    "index": 2312,
    "hitid": "385MDVINFC95L11L6JI3GSB2KUDJWY",
    "workerid": "AIWEXPJAU66D9",
    "probid": "891A",
    "subid": "37998400"
  },
  "lines": [
    {
      "line": 0,
      "text": "integer function gcd with integer arguments a and b",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return a if b = 0 and gcd ( b , a % b ) otherwise",
      "code": "return b == 0 ? a : gcd ( b , a % b ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare integer variables n and key , with key = 0",
      "code": "int n , key = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "a is an array of integers with 2005 elements",
      "code": "int a [ 2005 ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for integer i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read a [ i ]",
      "code": "cin >> a [ i ] ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if a [ i ] = 1 increment key",
      "code": "if ( a [ i ] == 1 ) { key ++ ; }",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if key is greater than 0",
      "code": "if ( key > 0 )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print n - key and a new line",
      "code": "cout << n - key << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for integer i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for integer j = 1 to n exclusive",
      "code": "for ( int j = 1 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "a [ j ] = gcd of a [ j ] , a [ j + 1 ]",
      "code": "a [ j ] = gcd ( a [ j ] , a [ j + 1 ] ) ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "if a [ j ] = 1",
      "code": "if ( a [ j ] == 1 )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "print n - 1 + i and a new line",
      "code": "cout << n - 1 + i << endl ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print - 1 and a new line",
      "code": "cout << - 1 << endl ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "a >> a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [2005]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;"
      ],
      "err_line": 17,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        0,
        18
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( a [ j ] == ' 1 ' )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        18,
        11
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( a [ j ] == ' 1 ' )",
        "if ( key >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        18,
        11,
        1
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( a [ j ] == ' 1 ' )",
        "if ( key >= 0 )",
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        18,
        11,
        17
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( a [ j ] == ' 1 ' )",
        "if ( key >= 0 )",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        18,
        11,
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( a [ j ] == ' 1 ' )",
        "if ( key >= 0 )",
        "a >> a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        18,
        1
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( a [ j ] == ' 1 ' )",
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        18,
        1,
        17
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( a [ j ] == ' 1 ' )",
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        18,
        1,
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( a [ j ] == ' 1 ' )",
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        18,
        17
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( a [ j ] == ' 1 ' )",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        18,
        17,
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( a [ j ] == ' 1 ' )",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        18,
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( a [ j ] == ' 1 ' )",
        "a >> a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( key >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11,
        1
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( key >= 0 )",
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11,
        1,
        17
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( key >= 0 )",
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11,
        1,
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( key >= 0 )",
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11,
        17
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( key >= 0 )",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11,
        17,
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( key >= 0 )",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11,
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( key >= 0 )",
        "a >> a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        17
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        17,
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        17
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        17,
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        18,
        11,
        1,
        17
      ],
      "mod_code": [
        "if ( a [ j ] == ' 1 ' )",
        "if ( key >= 0 )",
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;"
      ],
      "err_line": 17,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        18,
        11,
        1,
        8
      ],
      "mod_code": [
        "if ( a [ j ] == ' 1 ' )",
        "if ( key >= 0 )",
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [2005]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        18,
        11,
        17
      ],
      "mod_code": [
        "if ( a [ j ] == ' 1 ' )",
        "if ( key >= 0 )",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;"
      ],
      "err_line": 17,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        18,
        11,
        17,
        8
      ],
      "mod_code": [
        "if ( a [ j ] == ' 1 ' )",
        "if ( key >= 0 )",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [2005]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        18,
        11,
        8
      ],
      "mod_code": [
        "if ( a [ j ] == ' 1 ' )",
        "if ( key >= 0 )",
        "a >> a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [2005]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        18,
        1,
        17
      ],
      "mod_code": [
        "if ( a [ j ] == ' 1 ' )",
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;"
      ],
      "err_line": 17,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        18,
        1,
        17,
        8
      ],
      "mod_code": [
        "if ( a [ j ] == ' 1 ' )",
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [2005]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        18,
        1,
        8
      ],
      "mod_code": [
        "if ( a [ j ] == ' 1 ' )",
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [2005]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        18,
        17
      ],
      "mod_code": [
        "if ( a [ j ] == ' 1 ' )",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;"
      ],
      "err_line": 17,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        18,
        17,
        8
      ],
      "mod_code": [
        "if ( a [ j ] == ' 1 ' )",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [2005]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        18,
        8
      ],
      "mod_code": [
        "if ( a [ j ] == ' 1 ' )",
        "a >> a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [2005]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        11,
        1,
        17
      ],
      "mod_code": [
        "if ( key >= 0 )",
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;"
      ],
      "err_line": 17,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        11,
        1,
        17,
        8
      ],
      "mod_code": [
        "if ( key >= 0 )",
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [2005]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        11,
        1,
        8
      ],
      "mod_code": [
        "if ( key >= 0 )",
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [2005]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        11,
        17
      ],
      "mod_code": [
        "if ( key >= 0 )",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;"
      ],
      "err_line": 17,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        11,
        17,
        8
      ],
      "mod_code": [
        "if ( key >= 0 )",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [2005]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "if ( key >= 0 )",
        "a >> a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [2005]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        1,
        17
      ],
      "mod_code": [
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;"
      ],
      "err_line": 17,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        1,
        17,
        8
      ],
      "mod_code": [
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;",
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [2005]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "return b == 0 && a == 0 && gcd ( b , a % b ) ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [2005]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        17,
        8
      ],
      "mod_code": [
        "a [ j ] = gcd ( a [ j ] ) , a [ j + 1 ] ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [2005]’ and ‘int’ to binary ‘operator>>’"
    }
  ]
}