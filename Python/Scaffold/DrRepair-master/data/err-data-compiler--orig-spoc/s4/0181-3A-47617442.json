{
  "meta": {
    "index": 181,
    "hitid": "3L55D8AUFARM2SQFBSJ5ELJN53PYCP",
    "workerid": "AIWEXPJAU66D9",
    "probid": "3A",
    "subid": "47617442"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s1 , s2 , t1 and t2 = characters",
      "code": "char s1 , s2 , t1 , t2 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integers f , i , m and n",
      "code": "int f , i , m , n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read s1 and s2",
      "code": "cin >> s1 >> s2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read t1 and t2",
      "code": "cin >> t1 >> t2 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "m = t1 - s1",
      "code": "m = t1 - s1 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "n = t2 - s2",
      "code": "n = t2 - s2 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if abs ( m ) is greater than abs ( n )",
      "code": "if ( abs ( m ) > abs ( n ) )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print abs ( m ) and a new line",
      "code": "cout << abs ( m ) << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "f = 1",
      "code": "f = 1 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print abs ( n ) and a new line",
      "code": "cout << abs ( n ) << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if abs ( m ) is equal to abs ( n )",
      "code": "if ( abs ( m ) == abs ( n ) )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "f = 0",
      "code": "f = 0 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 15,
      "text": "f = 2",
      "code": "f = 2 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if m is less than 0",
      "code": "if ( m < 0 )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if n is less than 0",
      "code": "if ( n < 0 )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if m is less than n",
      "code": "if ( m < n )",
      "indent": 3
    },
    {
      "line": 21,
      "text": "for i = - n to 0 exclusive decrement i",
      "code": "for ( i = - n ; i > 0 ; i -- )",
      "indent": 4
    },
    {
      "line": 22,
      "text": "print \" LD \" and a new line",
      "code": "cout << \" LD \" << endl ;",
      "indent": 5
    },
    {
      "line": 23,
      "text": "increase m by one",
      "code": "m ++ ;",
      "indent": 5
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 25,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 26,
      "text": "for i = - m to 0 exclusive decrement i",
      "code": "for ( i = - m ; i > 0 ; i -- )",
      "indent": 4
    },
    {
      "line": 27,
      "text": "print \" LD \" and a new line",
      "code": "cout << \" LD \" << endl ;",
      "indent": 5
    },
    {
      "line": 28,
      "text": "increase n",
      "code": "n ++ ;",
      "indent": 5
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 31,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 32,
      "text": "if - m is less than n",
      "code": "if ( - m < n )",
      "indent": 3
    },
    {
      "line": 33,
      "text": "for i = - m to 0 exclusive decrement i",
      "code": "for ( i = - m ; i > 0 ; i -- )",
      "indent": 4
    },
    {
      "line": 34,
      "text": "print \" LU \" and a new line",
      "code": "cout << \" LU \" << endl ;",
      "indent": 5
    },
    {
      "line": 35,
      "text": "decrement n",
      "code": "n -- ;",
      "indent": 5
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 37,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 38,
      "text": "for i = n to 0 exclusive decrement i",
      "code": "for ( i = n ; i > 0 ; i -- )",
      "indent": 4
    },
    {
      "line": 39,
      "text": "print \" LU \" and a new line",
      "code": "cout << \" LU \" << endl ;",
      "indent": 5
    },
    {
      "line": 40,
      "text": "increment m",
      "code": "m ++ ;",
      "indent": 5
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 44,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 45,
      "text": "if n is less than 0",
      "code": "if ( n < 0 )",
      "indent": 2
    },
    {
      "line": 46,
      "text": "if m is less than - n",
      "code": "if ( m < - n )",
      "indent": 3
    },
    {
      "line": 47,
      "text": "for i = m to 0 exclusive decrement i",
      "code": "for ( i = m ; i > 0 ; i -- )",
      "indent": 4
    },
    {
      "line": 48,
      "text": "print \" RD \" and a new line",
      "code": "cout << \" RD \" << endl ;",
      "indent": 5
    },
    {
      "line": 49,
      "text": "increment n",
      "code": "n ++ ;",
      "indent": 5
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 51,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 52,
      "text": "for i = - n to 0 exclusive decrement i",
      "code": "for ( i = - n ; i > 0 ; i -- )",
      "indent": 4
    },
    {
      "line": 53,
      "text": "print \" RD \" and a new line",
      "code": "cout << \" RD \" << endl ;",
      "indent": 5
    },
    {
      "line": 54,
      "text": "decrement m",
      "code": "m -- ;",
      "indent": 5
    },
    {
      "line": 55,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 57,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 58,
      "text": "if m is less than n",
      "code": "if ( m < n )",
      "indent": 3
    },
    {
      "line": 59,
      "text": "for i = m to 0 exclusive decrement i",
      "code": "for ( i = m ; i > 0 ; i -- )",
      "indent": 4
    },
    {
      "line": 60,
      "text": "print \" RU \" and a new line",
      "code": "cout << \" RU \" << endl ;",
      "indent": 5
    },
    {
      "line": 61,
      "text": "decrease n by one",
      "code": "n -- ;",
      "indent": 5
    },
    {
      "line": 62,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 63,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 64,
      "text": "for i = n to 0 exclusive decrement i",
      "code": "for ( i = n ; i > 0 ; i -- )",
      "indent": 4
    },
    {
      "line": 65,
      "text": "print \" RU \" and a new line",
      "code": "cout << \" RU \" << endl ;",
      "indent": 5
    },
    {
      "line": 66,
      "text": "decrement m",
      "code": "m -- ;",
      "indent": 5
    },
    {
      "line": 67,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 68,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 69,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 70,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 71,
      "text": "if f is equal to 1",
      "code": "if ( f == 1 )",
      "indent": 1
    },
    {
      "line": 72,
      "text": "if m is less than 0",
      "code": "if ( m < 0 )",
      "indent": 2
    },
    {
      "line": 73,
      "text": "for i = - m to 0 exclusive decrement i and print \" L \" with new line on every iteration",
      "code": "for ( i = - m ; i > 0 ; i -- ) { cout << \" L \" << endl ; }",
      "indent": 3
    },
    {
      "line": 74,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 75,
      "text": "for i = m to 0 exclusive decrement i and print \" R \" with new line on every iteration",
      "code": "for ( i = m ; i > 0 ; i -- ) { cout << \" R \" << endl ; }",
      "indent": 3
    },
    {
      "line": 76,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 77,
      "text": "else if f is 2",
      "code": "else if ( f == 2 )",
      "indent": 1
    },
    {
      "line": 78,
      "text": "if n is less than 0",
      "code": "if ( n < 0 )",
      "indent": 2
    },
    {
      "line": 79,
      "text": "for i = - n to 0 exclusive decrement i and print \" D \" with new line on every iteration",
      "code": "for ( i = - n ; i > 0 ; i -- ) { cout << \" D \" << endl ; }",
      "indent": 3
    },
    {
      "line": 80,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 81,
      "text": "for i = n to 0 exclusive decrement i and print \" U \" with new line on every iteration",
      "code": "for ( i = n ; i > 0 ; i -- ) { cout << \" U \" << endl ; }",
      "indent": 3
    },
    {
      "line": 82,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 83,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 84,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 85,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string s1 , s2 , t1 , t2 ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator-’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 31,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 37,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        44
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 44,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        51
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 51,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        57
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 57,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        63
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 63,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        71
      ],
      "mod_code": [
        "if ( f == l )"
      ],
      "err_line": 71,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        74
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 74,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        77
      ],
      "mod_code": [
        "else if ( f == 2 2"
      ],
      "err_line": 77,
      "err_msg": "expected ‘)’ before numeric constant"
    },
    {
      "mod_line": [
        80
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 80,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}