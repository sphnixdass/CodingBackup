{
  "meta": {
    "index": 173,
    "hitid": "30Z7M1Q8UYEJU72ZEAPK9D5XCL28AK",
    "workerid": "A1APYLD4DUK33J",
    "probid": "3A",
    "subid": "48114779"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create characters x1 , x2",
      "code": "char x1 , x2 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integers hi2 , y2",
      "code": "int hi2 , y2 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read x1 read hi2 read x2 read y2",
      "code": "cin >> x1 >> hi2 >> x2 >> y2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print maximum of absolute value of x1 - x2 and absolute value of hi2 - y2 , print ' \\ n '",
      "code": "cout << max ( abs ( x1 - x2 ) , abs ( hi2 - y2 ) ) << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while x1 is less than x2 and hi2 is greater than y2",
      "code": "while ( x1 < x2 && hi2 > y2 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print \" RD \" print ' \\ n '",
      "code": "cout << \" RD \" << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment x1",
      "code": "x1 ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "decrement hi2",
      "code": "hi2 -- ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "while x1 is less than x2 and hi2 is less than y2",
      "code": "while ( x1 < x2 && hi2 < y2 )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print \" RU \" print ' \\ n '",
      "code": "cout << \" RU \" << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "increment x1",
      "code": "x1 ++ ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "increment hi2",
      "code": "hi2 ++ ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "while x1 is greater than x2 and hi2 is less than y2",
      "code": "while ( x1 > x2 && hi2 < y2 )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print \" LU \" print ' \\ n '",
      "code": "cout << \" LU \" << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "decrement x1",
      "code": "x1 -- ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "increment hi2",
      "code": "hi2 ++ ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "while x1 is greater than x2 and hi2 is greater than y2",
      "code": "while ( x1 > x2 && hi2 > y2 )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print \" LD \" print ' \\ n '",
      "code": "cout << \" LD \" << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "decrement x1",
      "code": "x1 -- ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "decrement hi2",
      "code": "hi2 -- ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "while x1 is greater than x2",
      "code": "while ( x1 > x2 )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print \" L \" print ' \\ n '",
      "code": "cout << \" L \" << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "decrement x1",
      "code": "x1 -- ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "while x1 is less than x2",
      "code": "while ( x1 < x2 )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print \" R \" print ' \\ n '",
      "code": "cout << \" R \" << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "increment x1",
      "code": "x1 ++ ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 33,
      "text": "while hi2 is less than y2",
      "code": "while ( hi2 < y2 )",
      "indent": 1
    },
    {
      "line": 34,
      "text": "print \" U \" print ' \\ n '",
      "code": "cout << \" U \" << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "increment hi2",
      "code": "hi2 ++ ;",
      "indent": 2
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 37,
      "text": "while hi2 is greater than y2",
      "code": "while ( hi2 > y2 )",
      "indent": 1
    },
    {
      "line": 38,
      "text": "print \" D \" print ' \\ n '",
      "code": "cout << \" D \" << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 39,
      "text": "decrement hi2",
      "code": "hi2 -- ;",
      "indent": 2
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "long int hi2 , y2 ;"
      ],
      "err_line": 4,
      "err_msg": "no matching function for call to ‘max(int, long int)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> x1 >> hi2 >> x2 >> n ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        4,
        10,
        1
      ],
      "mod_code": [
        "cout << \" -1 \" << ' \\n ' ;",
        "cout << max ( abs ( x1 - x2 ) , abs ( hi2 ) - y2 ) << ' \\n ' ;",
        "while ( x1 < x2 && hi2 <= y2 )",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        6,
        4,
        30,
        1
      ],
      "mod_code": [
        "cout << \" -1 \" << ' \\n ' ;",
        "cout << max ( abs ( x1 - x2 ) , abs ( hi2 ) - y2 ) << ' \\n ' ;",
        "cout << \" -1 \" << ' \\n ' ;",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        6,
        4,
        37,
        1
      ],
      "mod_code": [
        "cout << \" -1 \" << ' \\n ' ;",
        "cout << max ( abs ( x1 - x2 ) , abs ( hi2 ) - y2 ) << ' \\n ' ;",
        "while ( hi2 >= y2 )",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        6,
        4,
        1
      ],
      "mod_code": [
        "cout << \" -1 \" << ' \\n ' ;",
        "cout << max ( abs ( x1 - x2 ) , abs ( hi2 ) - y2 ) << ' \\n ' ;",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        6,
        10,
        30,
        1
      ],
      "mod_code": [
        "cout << \" -1 \" << ' \\n ' ;",
        "while ( x1 < x2 && hi2 <= y2 )",
        "cout << \" -1 \" << ' \\n ' ;",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        6,
        10,
        37,
        1
      ],
      "mod_code": [
        "cout << \" -1 \" << ' \\n ' ;",
        "while ( x1 < x2 && hi2 <= y2 )",
        "while ( hi2 >= y2 )",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        6,
        10,
        1
      ],
      "mod_code": [
        "cout << \" -1 \" << ' \\n ' ;",
        "while ( x1 < x2 && hi2 <= y2 )",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        6,
        30,
        37,
        1
      ],
      "mod_code": [
        "cout << \" -1 \" << ' \\n ' ;",
        "cout << \" -1 \" << ' \\n ' ;",
        "while ( hi2 >= y2 )",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        6,
        30,
        1
      ],
      "mod_code": [
        "cout << \" -1 \" << ' \\n ' ;",
        "cout << \" -1 \" << ' \\n ' ;",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        6,
        37,
        1
      ],
      "mod_code": [
        "cout << \" -1 \" << ' \\n ' ;",
        "while ( hi2 >= y2 )",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "cout << \" -1 \" << ' \\n ' ;",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        4,
        10,
        30,
        1
      ],
      "mod_code": [
        "cout << max ( abs ( x1 - x2 ) , abs ( hi2 ) - y2 ) << ' \\n ' ;",
        "while ( x1 < x2 && hi2 <= y2 )",
        "cout << \" -1 \" << ' \\n ' ;",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        4,
        10,
        37,
        1
      ],
      "mod_code": [
        "cout << max ( abs ( x1 - x2 ) , abs ( hi2 ) - y2 ) << ' \\n ' ;",
        "while ( x1 < x2 && hi2 <= y2 )",
        "while ( hi2 >= y2 )",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        4,
        10,
        1
      ],
      "mod_code": [
        "cout << max ( abs ( x1 - x2 ) , abs ( hi2 ) - y2 ) << ' \\n ' ;",
        "while ( x1 < x2 && hi2 <= y2 )",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        4,
        30,
        37,
        1
      ],
      "mod_code": [
        "cout << max ( abs ( x1 - x2 ) , abs ( hi2 ) - y2 ) << ' \\n ' ;",
        "cout << \" -1 \" << ' \\n ' ;",
        "while ( hi2 >= y2 )",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        4,
        30,
        1
      ],
      "mod_code": [
        "cout << max ( abs ( x1 - x2 ) , abs ( hi2 ) - y2 ) << ' \\n ' ;",
        "cout << \" -1 \" << ' \\n ' ;",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        4,
        37,
        1
      ],
      "mod_code": [
        "cout << max ( abs ( x1 - x2 ) , abs ( hi2 ) - y2 ) << ' \\n ' ;",
        "while ( hi2 >= y2 )",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "cout << max ( abs ( x1 - x2 ) , abs ( hi2 ) - y2 ) << ' \\n ' ;",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        10,
        30,
        37,
        1
      ],
      "mod_code": [
        "while ( x1 < x2 && hi2 <= y2 )",
        "cout << \" -1 \" << ' \\n ' ;",
        "while ( hi2 >= y2 )",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        10,
        30,
        1
      ],
      "mod_code": [
        "while ( x1 < x2 && hi2 <= y2 )",
        "cout << \" -1 \" << ' \\n ' ;",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        10,
        37,
        1
      ],
      "mod_code": [
        "while ( x1 < x2 && hi2 <= y2 )",
        "while ( hi2 >= y2 )",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "while ( x1 < x2 && hi2 <= y2 )",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        30,
        37,
        1
      ],
      "mod_code": [
        "cout << \" -1 \" << ' \\n ' ;",
        "while ( hi2 >= y2 )",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        30,
        1
      ],
      "mod_code": [
        "cout << \" -1 \" << ' \\n ' ;",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    },
    {
      "mod_line": [
        37,
        1
      ],
      "mod_code": [
        "while ( hi2 >= y2 )",
        "char x1 , x2 , x2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char x2’"
    }
  ]
}