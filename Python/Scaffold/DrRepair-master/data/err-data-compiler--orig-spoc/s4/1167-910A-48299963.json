{
  "meta": {
    "index": 1167,
    "hitid": "3HRWUH63QUW7R8DMPGNMJZF69HFN5Q",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "910A",
    "subid": "48299963"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "d = int",
      "code": "int d ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read d",
      "code": "cin >> d ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "step = int vector of size n",
      "code": "vector < int > step ( n ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to n set step [ i ] to 1000",
      "code": "for ( int i = 0 ; i < int ( n ) ; i ++ ) { step [ i ] = 1000 ; }",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set step [ 0 ] to 0",
      "code": "step [ 0 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to n",
      "code": "for ( int i = 0 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for j = max ( 0 , i - d ) to i",
      "code": "for ( int j = max ( 0 , i - d ) ; j < i ; ++ j )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if s [ i ] equals ' 1 ' then set step [ i ] to min ( step [ i ] , step [ j ] + 1 )",
      "code": "if ( s [ i ] == ' 1 ' ) { step [ i ] = min ( step [ i ] , step [ j ] + 1 ) ; }",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if step [ n - 1 ] equals 1000",
      "code": "if ( step [ n - 1 ] == 1000 )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print \" - 1 \"",
      "code": "cout << \" -1 \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print step [ n - 1 ]",
      "code": "cout << step [ n - 1 ] << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 4,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "vector < int > step [ n ] ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<int>’ and ‘int’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "for ( int j = max ( 0 , i - d ) ; j >= i ; j -- )",
        "while ( cin >> n )"
      ],
      "err_line": 4,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        2,
        4
      ],
      "mod_code": [
        "for ( int j = max ( 0 , i - d ) ; j >= i ; j -- )",
        "while ( cin >> n )",
        "cin >> n ;"
      ],
      "err_line": 11,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        2,
        4,
        9
      ],
      "mod_code": [
        "for ( int j = max ( 0 , i - d ) ; j >= i ; j -- )",
        "while ( cin >> n )",
        "cin >> n ;",
        "step [ 0 ] = ' 0 ' ;"
      ],
      "err_line": 11,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        2,
        4,
        6
      ],
      "mod_code": [
        "for ( int j = max ( 0 , i - d ) ; j >= i ; j -- )",
        "while ( cin >> n )",
        "cin >> n ;",
        "gets ( s ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        2,
        4,
        15
      ],
      "mod_code": [
        "for ( int j = max ( 0 , i - d ) ; j >= i ; j -- )",
        "while ( cin >> n )",
        "cin >> n ;",
        "if ( step [ n - 1 ] == ' 1000 ' )"
      ],
      "err_line": 11,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        2,
        9
      ],
      "mod_code": [
        "for ( int j = max ( 0 , i - d ) ; j >= i ; j -- )",
        "while ( cin >> n )",
        "step [ 0 ] = ' 0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        2,
        9,
        6
      ],
      "mod_code": [
        "for ( int j = max ( 0 , i - d ) ; j >= i ; j -- )",
        "while ( cin >> n )",
        "step [ 0 ] = ' 0 ' ;",
        "gets ( s ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        2,
        9,
        15
      ],
      "mod_code": [
        "for ( int j = max ( 0 , i - d ) ; j >= i ; j -- )",
        "while ( cin >> n )",
        "step [ 0 ] = ' 0 ' ;",
        "if ( step [ n - 1 ] == ' 1000 ' )"
      ],
      "err_line": 4,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        2,
        6
      ],
      "mod_code": [
        "for ( int j = max ( 0 , i - d ) ; j >= i ; j -- )",
        "while ( cin >> n )",
        "gets ( s ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        2,
        6,
        15
      ],
      "mod_code": [
        "for ( int j = max ( 0 , i - d ) ; j >= i ; j -- )",
        "while ( cin >> n )",
        "gets ( s ) ;",
        "if ( step [ n - 1 ] == ' 1000 ' )"
      ],
      "err_line": 4,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        2,
        15
      ],
      "mod_code": [
        "for ( int j = max ( 0 , i - d ) ; j >= i ; j -- )",
        "while ( cin >> n )",
        "if ( step [ n - 1 ] == ' 1000 ' )"
      ],
      "err_line": 4,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        4,
        9,
        6
      ],
      "mod_code": [
        "for ( int j = max ( 0 , i - d ) ; j >= i ; j -- )",
        "cin >> n ;",
        "step [ 0 ] = ' 0 ' ;",
        "gets ( s ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        4,
        6
      ],
      "mod_code": [
        "for ( int j = max ( 0 , i - d ) ; j >= i ; j -- )",
        "cin >> n ;",
        "gets ( s ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        4,
        6,
        15
      ],
      "mod_code": [
        "for ( int j = max ( 0 , i - d ) ; j >= i ; j -- )",
        "cin >> n ;",
        "gets ( s ) ;",
        "if ( step [ n - 1 ] == ' 1000 ' )"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        9,
        6
      ],
      "mod_code": [
        "for ( int j = max ( 0 , i - d ) ; j >= i ; j -- )",
        "step [ 0 ] = ' 0 ' ;",
        "gets ( s ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        9,
        6,
        15
      ],
      "mod_code": [
        "for ( int j = max ( 0 , i - d ) ; j >= i ; j -- )",
        "step [ 0 ] = ' 0 ' ;",
        "gets ( s ) ;",
        "if ( step [ n - 1 ] == ' 1000 ' )"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "for ( int j = max ( 0 , i - d ) ; j >= i ; j -- )",
        "gets ( s ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        6,
        15
      ],
      "mod_code": [
        "for ( int j = max ( 0 , i - d ) ; j >= i ; j -- )",
        "gets ( s ) ;",
        "if ( step [ n - 1 ] == ' 1000 ' )"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "while ( cin >> n )",
        "cin >> n ;"
      ],
      "err_line": 11,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        9
      ],
      "mod_code": [
        "while ( cin >> n )",
        "cin >> n ;",
        "step [ 0 ] = ' 0 ' ;"
      ],
      "err_line": 11,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        9,
        6
      ],
      "mod_code": [
        "while ( cin >> n )",
        "cin >> n ;",
        "step [ 0 ] = ' 0 ' ;",
        "gets ( s ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        4,
        9,
        15
      ],
      "mod_code": [
        "while ( cin >> n )",
        "cin >> n ;",
        "step [ 0 ] = ' 0 ' ;",
        "if ( step [ n - 1 ] == ' 1000 ' )"
      ],
      "err_line": 11,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        6
      ],
      "mod_code": [
        "while ( cin >> n )",
        "cin >> n ;",
        "gets ( s ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        15
      ],
      "mod_code": [
        "while ( cin >> n )",
        "cin >> n ;",
        "gets ( s ) ;",
        "if ( step [ n - 1 ] == ' 1000 ' )"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        4,
        15
      ],
      "mod_code": [
        "while ( cin >> n )",
        "cin >> n ;",
        "if ( step [ n - 1 ] == ' 1000 ' )"
      ],
      "err_line": 11,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "while ( cin >> n )",
        "step [ 0 ] = ' 0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        6
      ],
      "mod_code": [
        "while ( cin >> n )",
        "step [ 0 ] = ' 0 ' ;",
        "gets ( s ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        6,
        15
      ],
      "mod_code": [
        "while ( cin >> n )",
        "step [ 0 ] = ' 0 ' ;",
        "gets ( s ) ;",
        "if ( step [ n - 1 ] == ' 1000 ' )"
      ],
      "err_line": 4,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9,
        15
      ],
      "mod_code": [
        "while ( cin >> n )",
        "step [ 0 ] = ' 0 ' ;",
        "if ( step [ n - 1 ] == ' 1000 ' )"
      ],
      "err_line": 4,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "while ( cin >> n )",
        "gets ( s ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        15
      ],
      "mod_code": [
        "while ( cin >> n )",
        "gets ( s ) ;",
        "if ( step [ n - 1 ] == ' 1000 ' )"
      ],
      "err_line": 4,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "while ( cin >> n )",
        "if ( step [ n - 1 ] == ' 1000 ' )"
      ],
      "err_line": 4,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        6
      ],
      "mod_code": [
        "cin >> n ;",
        "step [ 0 ] = ' 0 ' ;",
        "gets ( s ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        9,
        6,
        15
      ],
      "mod_code": [
        "cin >> n ;",
        "step [ 0 ] = ' 0 ' ;",
        "gets ( s ) ;",
        "if ( step [ n - 1 ] == ' 1000 ' )"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "cin >> n ;",
        "gets ( s ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        6,
        15
      ],
      "mod_code": [
        "cin >> n ;",
        "gets ( s ) ;",
        "if ( step [ n - 1 ] == ' 1000 ' )"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "step [ 0 ] = ' 0 ' ;",
        "gets ( s ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        6,
        15
      ],
      "mod_code": [
        "step [ 0 ] = ' 0 ' ;",
        "gets ( s ) ;",
        "if ( step [ n - 1 ] == ' 1000 ' )"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "gets ( s ) ;",
        "if ( step [ n - 1 ] == ' 1000 ' )"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}