{
  "meta": {
    "index": 2327,
    "hitid": "3VDI8GSXAFNK4YF20AHU5ZG0AVTG8C",
    "workerid": "A1APYLD4DUK33J",
    "probid": "891A",
    "subid": "45857923"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integer array a with size 2005",
      "code": "int a [ 2005 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare gcd with integers a , b as arguments , returning integer",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "return a if b is 0 , else return result of run gcd with b , a % b as arguments",
      "code": "return b == 0 ? a : gcd ( b , a % b ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "create integers i , j , n , cnt with cnt = 0",
      "code": "int i , j , n , cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read a [ i ]",
      "code": "cin >> a [ i ] ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if a [ i ] is 1 , increment cnt",
      "code": "if ( a [ i ] == 1 ) cnt ++ ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if cnt is true",
      "code": "if ( cnt )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print n - cnt print newline",
      "code": "cout << n - cnt << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "create integers res , flag , with res = - 1 , flag = 0",
      "code": "int res = - 1 , flag = 0 ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for i = 1 to n exclusive",
      "code": "for ( i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for j = 1 to n exclusive",
      "code": "for ( j = 1 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "create integer tmp with tmp = result of run gcd with a [ j ] , a [ j + 1 ] as arguments",
      "code": "int tmp = gcd ( a [ j ] , a [ j + 1 ] ) ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "set a [ j ] to tmp",
      "code": "a [ j ] = tmp ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "if tmp is 1",
      "code": "if ( tmp == 1 )",
      "indent": 3
    },
    {
      "line": 21,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "set res to i",
      "code": "res = i ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "if flag is true , break loop",
      "code": "if ( flag ) break ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "if res is - 1",
      "code": "if ( res == - 1 )",
      "indent": 1
    },
    {
      "line": 29,
      "text": "print - 1 print newline",
      "code": "cout << - 1 << endl ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 31,
      "text": "print n + res - 1 print newline",
      "code": "cout << n + res - 1 << endl ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int i , j , n , cnt , cnt = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "a >> a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid operands of types ‘int [2005]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "int tmp = gcd ( gcd ( a [ j ] , a [ j + 1 ] ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "if ( tmp == l )"
      ],
      "err_line": 20,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        28
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( ! res )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        28,
        19
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( ! res )",
        "a [ j ] = ' tmp ' ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        28,
        19,
        21
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( ! res )",
        "a [ j ] = ' tmp ' ;",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        28,
        19,
        22
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( ! res )",
        "a [ j ] = ' tmp ' ;",
        "res = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        28,
        19,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( ! res )",
        "a [ j ] = ' tmp ' ;",
        "int res = - 1 , flag = - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        28,
        21
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( ! res )",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        28,
        21,
        22
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( ! res )",
        "int flag = 1 ;",
        "res = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        28,
        21,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( ! res )",
        "int flag = 1 ;",
        "int res = - 1 , flag = - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        28,
        22
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( ! res )",
        "res = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        28,
        22,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( ! res )",
        "res = 1 ;",
        "int res = - 1 , flag = - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        28,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( ! res )",
        "int res = - 1 , flag = - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        19
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "a [ j ] = ' tmp ' ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        19,
        21
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "a [ j ] = ' tmp ' ;",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        19,
        21,
        22
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "a [ j ] = ' tmp ' ;",
        "int flag = 1 ;",
        "res = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        19,
        21,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "a [ j ] = ' tmp ' ;",
        "int flag = 1 ;",
        "int res = - 1 , flag = - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        19,
        22
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "a [ j ] = ' tmp ' ;",
        "res = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        19,
        22,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "a [ j ] = ' tmp ' ;",
        "res = 1 ;",
        "int res = - 1 , flag = - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        19,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "a [ j ] = ' tmp ' ;",
        "int res = - 1 , flag = - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        21
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int flag = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        21,
        22
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int flag = 1 ;",
        "res = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        21,
        22,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int flag = 1 ;",
        "res = 1 ;",
        "int res = - 1 , flag = - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        21,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int flag = 1 ;",
        "int res = - 1 , flag = - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        22
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "res = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        22,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "res = 1 ;",
        "int res = - 1 , flag = - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int res = - 1 , flag = - 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}