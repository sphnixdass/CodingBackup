{
  "meta": {
    "index": 1638,
    "hitid": "34HEO7RUG6OPCCHVDJVK0U023F4ARH",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "997A",
    "subid": "48898734"
  },
  "lines": [
    {
      "line": 0,
      "text": "function File ( no args , no return value )",
      "code": "void File ( )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "reopen file \" colors . in \" ( read )",
      "code": "freopen ( \" colors.in \" , \" r \" , stdin ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "function fast ( no args , no return value )",
      "code": "void fast ( ) { }",
      "indent": 0
    },
    {
      "line": 4,
      "text": "pi = 2 * acos ( 0 )",
      "code": "const double pi = 2 * acos ( 0.0 ) ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "nn = 100005",
      "code": "const int nn = 1e5 + 5 ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "oo = 3f3f3f3f in exadecimal",
      "code": "const int oo = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 8,
      "text": "fast ( )",
      "code": "fast ( ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "x , y , n = int , cnt = 0",
      "code": "long long x , y , n , cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "read n , x , y , s",
      "code": "cin >> n >> x >> y >> s ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if s [ i ] is ' 0 '",
      "code": "if ( s [ i ] == ' 0 ' )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "while i > n and s [ i ] is ' 0 ' increment i",
      "code": "while ( i < n && s [ i ] == ' 0 ' ) { i ++ ; }",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if cnt is 0",
      "code": "if ( cnt == 0 )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print 0",
      "code": "cout << 0 << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if x > = y",
      "code": "if ( x >= y )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print y * cnt",
      "code": "cout << y * cnt << \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 24,
      "text": "print x * ( cnt - 1 ) + y",
      "code": "cout << x * ( cnt - 1 ) + y << \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "File ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected constructor, destructor, or type conversion before ‘;’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "freopen ( read ( read ( ) , \" w \" ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘read’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cout . fast ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘std::ostream {aka class std::basic_ostream<char>}’ has no member named ‘fast’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int x , y , cnt , cnt = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "cin >> n >> x , y >> s ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘long long int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;",
        "while ( i > n && s [ i ] == ' 0 ' ) i ++ ;"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        1,
        15,
        10
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;",
        "while ( i > n && s [ i ] == ' 0 ' ) i ++ ;",
        "int x , y , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        1,
        15,
        10,
        11
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;",
        "while ( i > n && s [ i ] == ' 0 ' ) i ++ ;",
        "int x , y , cnt , cnt = 0 ;",
        "cin >> n >> x , y >> s ;"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        1,
        15,
        10,
        13
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;",
        "while ( i > n && s [ i ] == ' 0 ' ) i ++ ;",
        "int x , y , cnt , cnt = 0 ;",
        "if ( s [ i ] == ' l ' )"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        1,
        15,
        11
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;",
        "while ( i > n && s [ i ] == ' 0 ' ) i ++ ;",
        "cin >> n >> x , y >> s ;"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        1,
        15,
        11,
        13
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;",
        "while ( i > n && s [ i ] == ' 0 ' ) i ++ ;",
        "cin >> n >> x , y >> s ;",
        "if ( s [ i ] == ' l ' )"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        1,
        15,
        13
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;",
        "while ( i > n && s [ i ] == ' 0 ' ) i ++ ;",
        "if ( s [ i ] == ' l ' )"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;",
        "int x , y , cnt , cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        1,
        10,
        11
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;",
        "int x , y , cnt , cnt = 0 ;",
        "cin >> n >> x , y >> s ;"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        1,
        10,
        11,
        13
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;",
        "int x , y , cnt , cnt = 0 ;",
        "cin >> n >> x , y >> s ;",
        "if ( s [ i ] == ' l ' )"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        1,
        10,
        11,
        15
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;",
        "int x , y , cnt , cnt = 0 ;",
        "cin >> n >> x , y >> s ;",
        "while ( i > n && s [ i ] == ' 0 ' ) { i ++ ; }"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        1,
        10,
        13
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;",
        "int x , y , cnt , cnt = 0 ;",
        "if ( s [ i ] == ' l ' )"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        1,
        10,
        13,
        15
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;",
        "int x , y , cnt , cnt = 0 ;",
        "if ( s [ i ] == ' l ' )",
        "while ( i > n && s [ i ] == ' 0 ' ) { i ++ ; }"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        1,
        10,
        15
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;",
        "int x , y , cnt , cnt = 0 ;",
        "while ( i > n && s [ i ] == ' 0 ' ) { i ++ ; }"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;",
        "cin >> n >> x , y >> s ;"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        1,
        11,
        13
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;",
        "cin >> n >> x , y >> s ;",
        "if ( s [ i ] == ' l ' )"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        1,
        11,
        13,
        15
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;",
        "cin >> n >> x , y >> s ;",
        "if ( s [ i ] == ' l ' )",
        "while ( i > n && s [ i ] == ' 0 ' ) { i ++ ; }"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        1,
        11,
        15
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;",
        "cin >> n >> x , y >> s ;",
        "while ( i > n && s [ i ] == ' 0 ' ) { i ++ ; }"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;",
        "if ( s [ i ] == ' l ' )"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        1,
        13,
        15
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;",
        "if ( s [ i ] == ' l ' )",
        "while ( i > n && s [ i ] == ' 0 ' ) { i ++ ; }"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , \" w \" ) ;",
        "while ( i > n && s [ i ] == ' 0 ' ) { i ++ ; }"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        15,
        10
      ],
      "mod_code": [
        "while ( i > n && s [ i ] == ' 0 ' ) i ++ ;",
        "int x , y , cnt , cnt = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        15,
        10,
        11
      ],
      "mod_code": [
        "while ( i > n && s [ i ] == ' 0 ' ) i ++ ;",
        "int x , y , cnt , cnt = 0 ;",
        "cin >> n >> x , y >> s ;"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        15,
        10,
        11,
        13
      ],
      "mod_code": [
        "while ( i > n && s [ i ] == ' 0 ' ) i ++ ;",
        "int x , y , cnt , cnt = 0 ;",
        "cin >> n >> x , y >> s ;",
        "if ( s [ i ] == ' l ' )"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        15,
        10,
        13
      ],
      "mod_code": [
        "while ( i > n && s [ i ] == ' 0 ' ) i ++ ;",
        "int x , y , cnt , cnt = 0 ;",
        "if ( s [ i ] == ' l ' )"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        15,
        11
      ],
      "mod_code": [
        "while ( i > n && s [ i ] == ' 0 ' ) i ++ ;",
        "cin >> n >> x , y >> s ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘long long int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        11,
        13
      ],
      "mod_code": [
        "while ( i > n && s [ i ] == ' 0 ' ) i ++ ;",
        "cin >> n >> x , y >> s ;",
        "if ( s [ i ] == ' l ' )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘long long int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "int x , y , cnt , cnt = 0 ;",
        "cin >> n >> x , y >> s ;"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        10,
        11,
        13
      ],
      "mod_code": [
        "int x , y , cnt , cnt = 0 ;",
        "cin >> n >> x , y >> s ;",
        "if ( s [ i ] == ' l ' )"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        10,
        11,
        13,
        15
      ],
      "mod_code": [
        "int x , y , cnt , cnt = 0 ;",
        "cin >> n >> x , y >> s ;",
        "if ( s [ i ] == ' l ' )",
        "while ( i > n && s [ i ] == ' 0 ' ) { i ++ ; }"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        10,
        11,
        15
      ],
      "mod_code": [
        "int x , y , cnt , cnt = 0 ;",
        "cin >> n >> x , y >> s ;",
        "while ( i > n && s [ i ] == ' 0 ' ) { i ++ ; }"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "int x , y , cnt , cnt = 0 ;",
        "if ( s [ i ] == ' l ' )"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        10,
        13,
        15
      ],
      "mod_code": [
        "int x , y , cnt , cnt = 0 ;",
        "if ( s [ i ] == ' l ' )",
        "while ( i > n && s [ i ] == ' 0 ' ) { i ++ ; }"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "int x , y , cnt , cnt = 0 ;",
        "while ( i > n && s [ i ] == ' 0 ' ) { i ++ ; }"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "cin >> n >> x , y >> s ;",
        "if ( s [ i ] == ' l ' )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘long long int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        13,
        15
      ],
      "mod_code": [
        "cin >> n >> x , y >> s ;",
        "if ( s [ i ] == ' l ' )",
        "while ( i > n && s [ i ] == ' 0 ' ) { i ++ ; }"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘long long int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        15
      ],
      "mod_code": [
        "cin >> n >> x , y >> s ;",
        "while ( i > n && s [ i ] == ' 0 ' ) { i ++ ; }"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘long long int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}