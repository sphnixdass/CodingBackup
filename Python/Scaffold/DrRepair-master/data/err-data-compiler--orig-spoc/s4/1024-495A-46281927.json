{
  "meta": {
    "index": 1024,
    "hitid": "3VADEH0UHCR80VNAHRDMGZUTO3MPSZ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "495A",
    "subid": "46281927"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "delare string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare x = 0 , y = 0 as integers",
      "code": "int x = 0 , y = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if s [ 0 ] is ' 0 ' , let x be 2",
      "code": "if ( s [ 0 ] == ' 0 ' ) x = 2 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if s [ 1 ] is ' 0 ' , let y be 2",
      "code": "if ( s [ 1 ] == ' 0 ' ) y = 2 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if s [ 0 ] is ' 1 ' , let x be 7",
      "code": "if ( s [ 0 ] == ' 1 ' ) x = 7 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if s [ 1 ] is ' 1 ' , let y be 7",
      "code": "if ( s [ 1 ] == ' 1 ' ) y = 7 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if s [ 0 ] is ' 2 ' , let x be 2",
      "code": "if ( s [ 0 ] == ' 2 ' ) x = 2 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if s [ 1 ] is ' 2 ' , let y be 2",
      "code": "if ( s [ 1 ] == ' 2 ' ) y = 2 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if s [ 0 ] is ' 3 ' , let x be 3",
      "code": "if ( s [ 0 ] == ' 3 ' ) x = 3 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if s [ 1 ] is ' 3 ' , let y be 3",
      "code": "if ( s [ 1 ] == ' 3 ' ) y = 3 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if s [ 0 ] is ' 4 ' , let x be 3",
      "code": "if ( s [ 0 ] == ' 4 ' ) x = 3 ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if s [ 1 ] is ' 4 ' , let y be 3",
      "code": "if ( s [ 1 ] == ' 4 ' ) y = 3 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if s [ 0 ] is ' 5 ' , let x be 4",
      "code": "if ( s [ 0 ] == ' 5 ' ) x = 4 ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if s [ 1 ] is ' 5 ' , let y be 4",
      "code": "if ( s [ 1 ] == ' 5 ' ) y = 4 ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if s [ 0 ] is ' 6 ' , let x be 2",
      "code": "if ( s [ 0 ] == ' 6 ' ) x = 2 ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if s [ 1 ] is ' 6 ' , let y be 2",
      "code": "if ( s [ 1 ] == ' 6 ' ) y = 2 ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if s [ 0 ] is ' 7 ' , let x be 5",
      "code": "if ( s [ 0 ] == ' 7 ' ) x = 5 ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if s [ 1 ] is ' 7 ' , let y be 5",
      "code": "if ( s [ 1 ] == ' 7 ' ) y = 5 ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if s [ 0 ] is ' 8 ' , let x be 1",
      "code": "if ( s [ 0 ] == ' 8 ' ) x = 1 ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if s [ 1 ] is ' 8 ' , let y be 1",
      "code": "if ( s [ 1 ] == ' 8 ' ) y = 1 ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if s [ 0 ] is ' 9 ' , let x be 2",
      "code": "if ( s [ 0 ] == ' 9 ' ) x = 2 ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "if s [ 1 ] is ' 9 ' , let y be 2",
      "code": "if ( s [ 1 ] == ' 9 ' ) y = 2 ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print x * y and newline",
      "code": "cout << x * y << endl ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "vector < string > s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "vector < string > s ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::vector<std::__cxx11::basic_string<char> >’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}