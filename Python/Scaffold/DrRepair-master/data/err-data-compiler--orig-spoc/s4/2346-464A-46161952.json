{
  "meta": {
    "index": 2346,
    "hitid": "3ODOP6T3ASET63KTPS6SMJ6UZDM24D",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "464A",
    "subid": "46161952"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "c , s = arrays of size 2000",
      "code": "char c [ 2000 ] , s [ 2000 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "n , p = integers",
      "code": "int n , p ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n and p",
      "code": "cin >> n >> p ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read c",
      "code": "cin >> c ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if p is 1 and n > 1",
      "code": "if ( p == 1 && n > 1 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print NO",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "else if p is 2 and n > 2",
      "code": "else if ( p == 2 && n > 2 )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print NO",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = n - 1 down to 0",
      "code": "for ( int i = n - 1 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for a = c [ i ] + 1 to a + p - 1",
      "code": "for ( char a = c [ i ] + 1 ; a <= ' a ' + p - 1 ; a ++ )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if i - 1 > = 0 and c [ i - 1 ] is a , continue iteration",
      "code": "if ( i - 1 >= 0 && c [ i - 1 ] == a ) continue ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if i - 2 > = 0 and c [ i - 2 ] is a , continue iteration",
      "code": "if ( i - 2 >= 0 && c [ i - 2 ] == a ) continue ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "c [ i ] = a",
      "code": "c [ i ] = a ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "for j = i + 1 to n exclusive",
      "code": "for ( int j = i + 1 ; j < n ; j ++ )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "for b = a to a + p - 1",
      "code": "for ( char b = ' a ' ; b <= ' a ' + p - 1 ; b ++ )",
      "indent": 4
    },
    {
      "line": 19,
      "text": "if j - 1 > = 0 and c [ j - 1 ] is b , continue iteration",
      "code": "if ( j - 1 >= 0 && c [ j - 1 ] == b ) continue ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "if j - 2 > = 0 and c [ j - 2 ] is b , continue iteration",
      "code": "if ( j - 2 >= 0 && c [ j - 2 ] == b ) continue ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "c [ j ] = b",
      "code": "c [ j ] = b ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "break loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 25,
      "text": "c [ n ] = character 0",
      "code": "c [ n ] = ' \\0 ' ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "print c",
      "code": "cout << c << endl ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print NO",
      "code": "cout << \" NO\\n \" ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int c [ 2000 ] , s [ 2000 ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2000]’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "c = getchar ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘char [2000]’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 12,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( a = c [ i ] + 1 ; a <= a + p - 1 ; a ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( b = a ; b <= a + p - 1 ; b ++ )"
      ],
      "err_line": 18,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "char c [ n ] = ' 0 ' ;"
      ],
      "err_line": 25,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "int c [ 2000 ] , s [ 2000 ] ;",
        "for ( int a = c [ i ] + 1 ; a <= a + p - 1 ; a ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2000]’)"
    },
    {
      "mod_line": [
        1,
        13,
        18
      ],
      "mod_code": [
        "int c [ 2000 ] , s [ 2000 ] ;",
        "for ( int a = c [ i ] + 1 ; a <= a + p - 1 ; a ++ )",
        "for ( int b = a ; b <= a + p - 1 ; b ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2000]’)"
    },
    {
      "mod_line": [
        1,
        13,
        18,
        25
      ],
      "mod_code": [
        "int c [ 2000 ] , s [ 2000 ] ;",
        "for ( int a = c [ i ] + 1 ; a <= a + p - 1 ; a ++ )",
        "for ( int b = a ; b <= a + p - 1 ; b ++ )",
        "c [ n ] = ' 0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2000]’)"
    },
    {
      "mod_line": [
        1,
        13,
        25
      ],
      "mod_code": [
        "int c [ 2000 ] , s [ 2000 ] ;",
        "for ( int a = c [ i ] + 1 ; a <= a + p - 1 ; a ++ )",
        "c [ n ] = ' 0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2000]’)"
    },
    {
      "mod_line": [
        1,
        13,
        25,
        18
      ],
      "mod_code": [
        "int c [ 2000 ] , s [ 2000 ] ;",
        "for ( int a = c [ i ] + 1 ; a <= a + p - 1 ; a ++ )",
        "c [ n ] = ' 0 ' ;",
        "for ( b = a ; b <= a + p - 1 ; b ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2000]’)"
    },
    {
      "mod_line": [
        1,
        13,
        18
      ],
      "mod_code": [
        "int c [ 2000 ] , s [ 2000 ] ;",
        "for ( int a = c [ i ] + 1 ; a <= a + p - 1 ; a ++ )",
        "for ( b = a ; b <= a + p - 1 ; b ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2000]’)"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "int c [ 2000 ] , s [ 2000 ] ;",
        "for ( int b = a ; b <= a + p - 1 ; b ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2000]’)"
    },
    {
      "mod_line": [
        1,
        18,
        25
      ],
      "mod_code": [
        "int c [ 2000 ] , s [ 2000 ] ;",
        "for ( int b = a ; b <= a + p - 1 ; b ++ )",
        "c [ n ] = ' 0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2000]’)"
    },
    {
      "mod_line": [
        1,
        18,
        25,
        13
      ],
      "mod_code": [
        "int c [ 2000 ] , s [ 2000 ] ;",
        "for ( int b = a ; b <= a + p - 1 ; b ++ )",
        "c [ n ] = ' 0 ' ;",
        "for ( a = c [ i ] + 1 ; a <= a + p - 1 ; a ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2000]’)"
    },
    {
      "mod_line": [
        1,
        18,
        13
      ],
      "mod_code": [
        "int c [ 2000 ] , s [ 2000 ] ;",
        "for ( int b = a ; b <= a + p - 1 ; b ++ )",
        "for ( a = c [ i ] + 1 ; a <= a + p - 1 ; a ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2000]’)"
    },
    {
      "mod_line": [
        1,
        25
      ],
      "mod_code": [
        "int c [ 2000 ] , s [ 2000 ] ;",
        "c [ n ] = ' 0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2000]’)"
    },
    {
      "mod_line": [
        1,
        25,
        13
      ],
      "mod_code": [
        "int c [ 2000 ] , s [ 2000 ] ;",
        "c [ n ] = ' 0 ' ;",
        "for ( a = c [ i ] + 1 ; a <= a + p - 1 ; a ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2000]’)"
    },
    {
      "mod_line": [
        1,
        25,
        13,
        18
      ],
      "mod_code": [
        "int c [ 2000 ] , s [ 2000 ] ;",
        "c [ n ] = ' 0 ' ;",
        "for ( a = c [ i ] + 1 ; a <= a + p - 1 ; a ++ )",
        "for ( b = a ; b <= a + p - 1 ; b ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2000]’)"
    },
    {
      "mod_line": [
        1,
        25,
        18
      ],
      "mod_code": [
        "int c [ 2000 ] , s [ 2000 ] ;",
        "c [ n ] = ' 0 ' ;",
        "for ( b = a ; b <= a + p - 1 ; b ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2000]’)"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "int c [ 2000 ] , s [ 2000 ] ;",
        "for ( a = c [ i ] + 1 ; a <= a + p - 1 ; a ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2000]’)"
    },
    {
      "mod_line": [
        1,
        13,
        18
      ],
      "mod_code": [
        "int c [ 2000 ] , s [ 2000 ] ;",
        "for ( a = c [ i ] + 1 ; a <= a + p - 1 ; a ++ )",
        "for ( b = a ; b <= a + p - 1 ; b ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2000]’)"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "int c [ 2000 ] , s [ 2000 ] ;",
        "for ( b = a ; b <= a + p - 1 ; b ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2000]’)"
    },
    {
      "mod_line": [
        13,
        25,
        18
      ],
      "mod_code": [
        "for ( int a = c [ i ] + 1 ; a <= a + p - 1 ; a ++ )",
        "c [ n ] = ' 0 ' ;",
        "for ( b = a ; b <= a + p - 1 ; b ++ )"
      ],
      "err_line": 18,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        18
      ],
      "mod_code": [
        "for ( int a = c [ i ] + 1 ; a <= a + p - 1 ; a ++ )",
        "for ( b = a ; b <= a + p - 1 ; b ++ )"
      ],
      "err_line": 18,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        25,
        13
      ],
      "mod_code": [
        "for ( int b = a ; b <= a + p - 1 ; b ++ )",
        "c [ n ] = ' 0 ' ;",
        "for ( a = c [ i ] + 1 ; a <= a + p - 1 ; a ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        13
      ],
      "mod_code": [
        "for ( int b = a ; b <= a + p - 1 ; b ++ )",
        "for ( a = c [ i ] + 1 ; a <= a + p - 1 ; a ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        13
      ],
      "mod_code": [
        "c [ n ] = ' 0 ' ;",
        "for ( a = c [ i ] + 1 ; a <= a + p - 1 ; a ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        13,
        18
      ],
      "mod_code": [
        "c [ n ] = ' 0 ' ;",
        "for ( a = c [ i ] + 1 ; a <= a + p - 1 ; a ++ )",
        "for ( b = a ; b <= a + p - 1 ; b ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        25,
        18
      ],
      "mod_code": [
        "c [ n ] = ' 0 ' ;",
        "for ( b = a ; b <= a + p - 1 ; b ++ )"
      ],
      "err_line": 18,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        18
      ],
      "mod_code": [
        "for ( a = c [ i ] + 1 ; a <= a + p - 1 ; a ++ )",
        "for ( b = a ; b <= a + p - 1 ; b ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘a’ was not declared in this scope"
    }
  ]
}