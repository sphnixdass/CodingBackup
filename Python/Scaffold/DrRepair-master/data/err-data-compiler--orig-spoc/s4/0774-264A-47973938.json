{
  "meta": {
    "index": 774,
    "hitid": "3HEA4ZVWVDG31J7GLGR0PIFKJJD55R",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "264A",
    "subid": "47973938"
  },
  "lines": [
    {
      "line": 0,
      "text": "MAX = const integer with MAX = 1e6 + 7",
      "code": "const int MAX = 1e6 + 7 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "wynik = integer array of size MAX",
      "code": "int wynik [ MAX ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "n = integer with n = s . size ( )",
      "code": "int n = s . size ( ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "lewa = integer with lewa = 0",
      "code": "int lewa = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "prawa = integer with prawa = n - 1",
      "code": "int prawa = n - 1 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if s [ i ] is l",
      "code": "if ( s [ i ] == ' l ' )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "wynik [ decrement prawa ] = i",
      "code": "wynik [ prawa -- ] = i ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "wynik [ increment lewa ] = i",
      "code": "wynik [ lewa ++ ] = i ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for i = 0 to n exclusive , print wynik [ i ] + 1",
      "code": "for ( int i = 0 ; i < n ; ++ i ) { cout << wynik [ i ] + 1 << \" \\n \" ; }",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( s [ i ] == l )"
      ],
      "err_line": 9,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "n = s . size ( ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "if ( s [ i ] == l )",
        "wynik [ prawa - prawa ] = i ;"
      ],
      "err_line": 9,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == l )",
        "wynik [ prawa - prawa ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cout << wynik [ i ] + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        15,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == l )",
        "wynik [ prawa - prawa ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cout << wynik [ i ] + 1 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        10,
        15,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == l )",
        "wynik [ prawa - prawa ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cout << wynik [ i ] + 1 ;",
        "wynik [ ++ lewa ] = i ;"
      ],
      "err_line": 9,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == l )",
        "wynik [ prawa - prawa ] = i ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        10,
        4,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == l )",
        "wynik [ prawa - prawa ] = i ;",
        "s >> s ;",
        "wynik [ ++ lewa ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        10,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == l )",
        "wynik [ prawa - prawa ] = i ;",
        "wynik [ ++ lewa ] = i ;"
      ],
      "err_line": 9,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == l )",
        "for ( int i = 0 ; i < n ; i ++ ) cout << wynik [ i ] + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == l )",
        "for ( int i = 0 ; i < n ; i ++ ) cout << wynik [ i ] + 1 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        15,
        4,
        10
      ],
      "mod_code": [
        "if ( s [ i ] == l )",
        "for ( int i = 0 ; i < n ; i ++ ) cout << wynik [ i ] + 1 ;",
        "s >> s ;",
        "wynik [ -- prawa ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        15,
        4,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == l )",
        "for ( int i = 0 ; i < n ; i ++ ) cout << wynik [ i ] + 1 ;",
        "s >> s ;",
        "wynik [ ++ lewa ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        15,
        10
      ],
      "mod_code": [
        "if ( s [ i ] == l )",
        "for ( int i = 0 ; i < n ; i ++ ) cout << wynik [ i ] + 1 ;",
        "wynik [ -- prawa ] = i ;"
      ],
      "err_line": 9,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15,
        10,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == l )",
        "for ( int i = 0 ; i < n ; i ++ ) cout << wynik [ i ] + 1 ;",
        "wynik [ -- prawa ] = i ;",
        "wynik [ ++ lewa ] = i ;"
      ],
      "err_line": 9,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == l )",
        "for ( int i = 0 ; i < n ; i ++ ) cout << wynik [ i ] + 1 ;",
        "wynik [ ++ lewa ] = i ;"
      ],
      "err_line": 9,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == l )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        4,
        10
      ],
      "mod_code": [
        "if ( s [ i ] == l )",
        "s >> s ;",
        "wynik [ -- prawa ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        4,
        10,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == l )",
        "s >> s ;",
        "wynik [ -- prawa ] = i ;",
        "wynik [ ++ lewa ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        4,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == l )",
        "s >> s ;",
        "wynik [ ++ lewa ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "if ( s [ i ] == l )",
        "wynik [ -- prawa ] = i ;"
      ],
      "err_line": 9,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == l )",
        "wynik [ -- prawa ] = i ;",
        "wynik [ ++ lewa ] = i ;"
      ],
      "err_line": 9,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == l )",
        "wynik [ ++ lewa ] = i ;"
      ],
      "err_line": 9,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        15,
        4
      ],
      "mod_code": [
        "wynik [ prawa - prawa ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cout << wynik [ i ] + 1 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        15,
        4,
        12
      ],
      "mod_code": [
        "wynik [ prawa - prawa ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cout << wynik [ i ] + 1 ;",
        "s >> s ;",
        "wynik [ ++ lewa ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "wynik [ prawa - prawa ] = i ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        4,
        12
      ],
      "mod_code": [
        "wynik [ prawa - prawa ] = i ;",
        "s >> s ;",
        "wynik [ ++ lewa ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cout << wynik [ i ] + 1 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        4,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cout << wynik [ i ] + 1 ;",
        "s >> s ;",
        "wynik [ -- prawa ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        4,
        10,
        12
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cout << wynik [ i ] + 1 ;",
        "s >> s ;",
        "wynik [ -- prawa ] = i ;",
        "wynik [ ++ lewa ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        4,
        12
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cout << wynik [ i ] + 1 ;",
        "s >> s ;",
        "wynik [ ++ lewa ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "s >> s ;",
        "wynik [ -- prawa ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        10,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "wynik [ -- prawa ] = i ;",
        "wynik [ ++ lewa ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "wynik [ ++ lewa ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}