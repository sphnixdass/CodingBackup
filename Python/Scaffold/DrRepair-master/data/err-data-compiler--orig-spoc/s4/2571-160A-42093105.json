{
  "meta": {
    "index": 2571,
    "hitid": "3D5G8J4N5AYMKFXLS3RBWWFXCAYTVA",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "160A",
    "subid": "42093105"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare insertion taking in int s and int array A",
      "code": "void insertion ( int A [ ] , int s )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let integers value = 0 and hole = 0",
      "code": "int value = 0 , hole = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 1 to s exclusive",
      "code": "for ( int i = 1 ; i < s ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set value to A [ i ]",
      "code": "value = A [ i ] ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "set hole to i",
      "code": "hole = i ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "while hole is greater than 0 and A [ hole - 1 ] is less than value",
      "code": "while ( hole > 0 && A [ hole - 1 ] < value )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set A [ hole ] to A [ hole - 1 ]",
      "code": "A [ hole ] = A [ hole - 1 ] ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "decrease hole by 1",
      "code": "hole -- ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set A [ hole ] to value",
      "code": "A [ hole ] = value ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 13,
      "text": "let ints Ncoins = 0 , tSum = 0 , minCoinValue = 0 , minusSum = 0 , and coin = 0",
      "code": "int Ncoins = 0 , tSum = 0 , minCoinValue = 0 , minusSum = 0 , coin = 0 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read Ncoins",
      "code": "cin >> Ncoins ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "let int array A of size Ncoins that contains { 0 }",
      "code": "int A [ Ncoins ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for i = 0 to Ncoins exclusive",
      "code": "for ( int i = 0 ; i < Ncoins ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "read A [ i ]",
      "code": "cin >> A [ i ] ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "set tSum to tSum + A [ i ]",
      "code": "tSum = tSum + A [ i ] ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "call insertion with arguments A and Ncoins",
      "code": "insertion ( A , Ncoins ) ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "for i = 0 to Ncoins exclusive",
      "code": "for ( int i = 0 ; i < Ncoins ; i ++ )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "set minCoinValue to minCoinValue + A [ i ]",
      "code": "minCoinValue = minCoinValue + A [ i ] ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "set minusSum to tSum - minCoinValue",
      "code": "minusSum = tSum - minCoinValue ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "increment coin",
      "code": "coin ++ ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if minCoinValue is greater than minusSum",
      "code": "if ( minCoinValue > minusSum )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "print coin",
      "code": "cout << coin << endl ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [Ncoins]’)"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int insertion ( int s , int A )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "hole to ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "char A [ hole ] = A [ hole - 1 ] ;"
      ],
      "err_line": 6,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "int Ncoins = 0 , tSum = 0 , minCoinValue = 0 , minusSum = 0 , minusSum = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘int minusSum’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "gets ( Ncoins ) ;"
      ],
      "err_line": 14,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( i = 0 ; i < Ncoins ; i ++ )"
      ],
      "err_line": 16,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "{ A [ i ] ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "insertion ( A A Ncoins , Ncoins ) ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘)’ before ‘A’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < Ncoins ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 27,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "int hole = 0 , hole = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        3
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "int hole = 0 , hole = 0 ;",
        "A [ i ] = A [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        3,
        5
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "int hole = 0 , hole = 0 ;",
        "A [ i ] = A [ i ] ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        3,
        9
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "int hole = 0 , hole = 0 ;",
        "A [ i ] = A [ i ] ;",
        "A [ hole ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        3,
        15
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "int hole = 0 , hole = 0 ;",
        "A [ i ] = A [ i ] ;",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        3,
        23
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "int hole = 0 , hole = 0 ;",
        "A [ i ] = A [ i ] ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        5
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "int hole = 0 , hole = 0 ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        5,
        9
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "int hole = 0 , hole = 0 ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "A [ hole ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        5,
        15
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "int hole = 0 , hole = 0 ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        5,
        23
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "int hole = 0 , hole = 0 ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        9
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "int hole = 0 , hole = 0 ;",
        "A [ hole ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        9,
        15
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "int hole = 0 , hole = 0 ;",
        "A [ hole ] = 0 ;",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        9,
        23
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "int hole = 0 , hole = 0 ;",
        "A [ hole ] = 0 ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        15
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "int hole = 0 , hole = 0 ;",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        15,
        23
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "int hole = 0 , hole = 0 ;",
        "int A [ Ncoins ] [ Ncoins ] ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1,
        23
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "int hole = 0 , hole = 0 ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "A [ i ] = A [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        5
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "A [ i ] = A [ i ] ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        9
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "A [ i ] = A [ i ] ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "A [ hole ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        15
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "A [ i ] = A [ i ] ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        23
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "A [ i ] = A [ i ] ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        9
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "A [ i ] = A [ i ] ;",
        "A [ hole ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        9,
        15
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "A [ i ] = A [ i ] ;",
        "A [ hole ] = 0 ;",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        9,
        23
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "A [ i ] = A [ i ] ;",
        "A [ hole ] = 0 ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        15
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "A [ i ] = A [ i ] ;",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        15,
        23
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "A [ i ] = A [ i ] ;",
        "int A [ Ncoins ] [ Ncoins ] ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        23
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "A [ i ] = A [ i ] ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        9
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "A [ hole ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        9,
        15
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "A [ hole ] = 0 ;",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        9,
        23
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "A [ hole ] = 0 ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        15
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        15,
        23
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "int A [ Ncoins ] [ Ncoins ] ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        23
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "A [ hole ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        15
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "A [ hole ] = 0 ;",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        15,
        23
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "A [ hole ] = 0 ;",
        "int A [ Ncoins ] [ Ncoins ] ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        23
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "A [ hole ] = 0 ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        15,
        23
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "int A [ Ncoins ] [ Ncoins ] ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        23
      ],
      "mod_code": [
        "int insertion ( int s , int A ) ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "A [ i ] = A [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        3,
        5
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "A [ i ] = A [ i ] ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        9
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "A [ i ] = A [ i ] ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "A [ hole ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        15
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "A [ i ] = A [ i ] ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        23
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "A [ i ] = A [ i ] ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        3,
        9
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "A [ i ] = A [ i ] ;",
        "A [ hole ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        3,
        9,
        15
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "A [ i ] = A [ i ] ;",
        "A [ hole ] = 0 ;",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        3,
        9,
        23
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "A [ i ] = A [ i ] ;",
        "A [ hole ] = 0 ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        3,
        15
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "A [ i ] = A [ i ] ;",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        3,
        15,
        23
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "A [ i ] = A [ i ] ;",
        "int A [ Ncoins ] [ Ncoins ] ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        3,
        23
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "A [ i ] = A [ i ] ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        5,
        9
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "A [ hole ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        5,
        9,
        15
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "A [ hole ] = 0 ;",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        5,
        9,
        23
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "A [ hole ] = 0 ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        5,
        15
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        5,
        15,
        23
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "int A [ Ncoins ] [ Ncoins ] ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        5,
        23
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "A [ hole ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        9,
        15
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "A [ hole ] = 0 ;",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        9,
        15,
        23
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "A [ hole ] = 0 ;",
        "int A [ Ncoins ] [ Ncoins ] ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        9,
        23
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "A [ hole ] = 0 ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        15,
        23
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "int A [ Ncoins ] [ Ncoins ] ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        1,
        23
      ],
      "mod_code": [
        "int hole = 0 , hole = 0 ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int hole’"
    },
    {
      "mod_line": [
        3,
        5,
        9,
        15
      ],
      "mod_code": [
        "A [ i ] = A [ i ] ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "A [ hole ] = 0 ;",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [Ncoins]’)"
    },
    {
      "mod_line": [
        3,
        5,
        15
      ],
      "mod_code": [
        "A [ i ] = A [ i ] ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [Ncoins]’)"
    },
    {
      "mod_line": [
        3,
        5,
        15,
        23
      ],
      "mod_code": [
        "A [ i ] = A [ i ] ;",
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "int A [ Ncoins ] [ Ncoins ] ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [Ncoins]’)"
    },
    {
      "mod_line": [
        3,
        9,
        15
      ],
      "mod_code": [
        "A [ i ] = A [ i ] ;",
        "A [ hole ] = 0 ;",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [Ncoins]’)"
    },
    {
      "mod_line": [
        3,
        9,
        15,
        23
      ],
      "mod_code": [
        "A [ i ] = A [ i ] ;",
        "A [ hole ] = 0 ;",
        "int A [ Ncoins ] [ Ncoins ] ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [Ncoins]’)"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "A [ i ] = A [ i ] ;",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [Ncoins]’)"
    },
    {
      "mod_line": [
        3,
        15,
        23
      ],
      "mod_code": [
        "A [ i ] = A [ i ] ;",
        "int A [ Ncoins ] [ Ncoins ] ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [Ncoins]’)"
    },
    {
      "mod_line": [
        5,
        9,
        15
      ],
      "mod_code": [
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "A [ hole ] = 0 ;",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [Ncoins]’)"
    },
    {
      "mod_line": [
        5,
        9,
        15,
        23
      ],
      "mod_code": [
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "A [ hole ] = 0 ;",
        "int A [ Ncoins ] [ Ncoins ] ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [Ncoins]’)"
    },
    {
      "mod_line": [
        5,
        15
      ],
      "mod_code": [
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [Ncoins]’)"
    },
    {
      "mod_line": [
        5,
        15,
        23
      ],
      "mod_code": [
        "while ( hole > 0 && A [ hole - 1 ] < 0 )",
        "int A [ Ncoins ] [ Ncoins ] ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [Ncoins]’)"
    },
    {
      "mod_line": [
        9,
        15
      ],
      "mod_code": [
        "A [ hole ] = 0 ;",
        "int A [ Ncoins ] [ Ncoins ] ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [Ncoins]’)"
    },
    {
      "mod_line": [
        9,
        15,
        23
      ],
      "mod_code": [
        "A [ hole ] = 0 ;",
        "int A [ Ncoins ] [ Ncoins ] ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [Ncoins]’)"
    },
    {
      "mod_line": [
        15,
        23
      ],
      "mod_code": [
        "int A [ Ncoins ] [ Ncoins ] ;",
        "minusSum -= minCoinValue ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [Ncoins]’)"
    }
  ]
}