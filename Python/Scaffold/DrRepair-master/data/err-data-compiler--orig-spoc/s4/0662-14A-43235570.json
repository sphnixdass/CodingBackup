{
  "meta": {
    "index": 662,
    "hitid": "3BVS8WK9Q0PH2NJ4TA17HDJHXZSBIQ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "14A",
    "subid": "43235570"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "integers m and n , integer array c with size 4",
      "code": "int m , n , c [ 4 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "set value of c [ 0 ] to 0",
      "code": "c [ 0 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set value of c [ 1 ] to 0",
      "code": "c [ 1 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set value of c [ 2 ] to 0",
      "code": "c [ 2 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set value of c [ 3 ] to 0",
      "code": "c [ 3 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read m and n",
      "code": "cin >> m >> n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "integer arrays s with size n + 9 and r with size m + 9",
      "code": "int s [ n + 9 ] , r [ m + 9 ] ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "declare character array a of size m * n + 11",
      "code": "char a [ m * n + 11 ] ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "fill first n elements of s with 0",
      "code": "for ( int i = 0 ; i <= n ; i ++ ) { s [ i ] = 0 ; }",
      "indent": 1
    },
    {
      "line": 10,
      "text": "fill first m elements of r with 0",
      "code": "for ( int i = 0 ; i <= m ; i ++ ) { r [ i ] = 0 ; }",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 1 to m * n inclusive",
      "code": "for ( int i = 1 ; i <= m * n ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read a [ i ]",
      "code": "cin >> a [ i ] ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if a [ i ] is equal to ' * '",
      "code": "if ( a [ i ] == ' * ' )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "increment s [ ( i - 1 ) % n + 1 ]",
      "code": "s [ ( i - 1 ) % n + 1 ] ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "increment r [ ( i - 1 ) / n + 1 ]",
      "code": "r [ ( i - 1 ) / n + 1 ] ++ ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for i = 1 to m inclusive",
      "code": "for ( int i = 1 ; i <= m ; i ++ )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if r [ i ] is greater than 0",
      "code": "if ( r [ i ] > 0 )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "set c [ 0 ] to i",
      "code": "c [ 0 ] = i ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "for i = m to 1 inclusive decrementing i",
      "code": "for ( int i = m ; i >= 1 ; i -- )",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if r [ i ] is greater than 0",
      "code": "if ( r [ i ] > 0 )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "c [ 1 ] = i",
      "code": "c [ 1 ] = i ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 31,
      "text": "if s [ i ] is greater than 0",
      "code": "if ( s [ i ] > 0 )",
      "indent": 2
    },
    {
      "line": 32,
      "text": "assign value of i to the c [ 2 ]",
      "code": "c [ 2 ] = i ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 36,
      "text": "for integer i = n to 1 inclusive decrementing i",
      "code": "for ( int i = n ; i >= 1 ; i -- )",
      "indent": 1
    },
    {
      "line": 37,
      "text": "if s [ i ] is greater than 0",
      "code": "if ( s [ i ] > 0 )",
      "indent": 2
    },
    {
      "line": 38,
      "text": "assign value of i to the c [ 3 ]",
      "code": "c [ 3 ] = i ;",
      "indent": 3
    },
    {
      "line": 39,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 42,
      "text": "for integer i = c [ 0 ] to c [ 1 ] inclusive",
      "code": "for ( int i = c [ 0 ] ; i <= c [ 1 ] ; i ++ )",
      "indent": 1
    },
    {
      "line": 43,
      "text": "for integer j = c [ 2 ] to c [ 3 ] inclusive , print a [ ( i - 1 ) * n + j ]",
      "code": "for ( int j = c [ 2 ] ; j <= c [ 3 ] ; j ++ ) { cout << a [ ( i - 1 ) * n + j ] ; }",
      "indent": 2
    },
    {
      "line": 44,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "char a [ m * n ] + 11 ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int m , c , c [ 4 ] ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘int c [4]’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "cin >> m >> k ;"
      ],
      "err_line": 6,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i <= m * n ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "a >> a [ i ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘char [((m * n) + 11)]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else if ( a [ i ] == ' * ' )"
      ],
      "err_line": 13,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( i = 1 ; i <= m ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "for ( i = m ; i >= 1 ; i -- )"
      ],
      "err_line": 24,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 30,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 39,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        43
      ],
      "mod_code": [
        "for ( int j = c [ 2 ] ; j <= c [ 3 ] ; j ++ ) cout << a [ ( i - 1 ) * n + ( i - 1 ) ;"
      ],
      "err_line": 43,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;",
        "char a [ m * n ] + 11 ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        7,
        8,
        9
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;",
        "char a [ m * n ] + 11 ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        7,
        8,
        9,
        10
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;",
        "char a [ m * n ] + 11 ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }",
        "for ( int i = 0 ; i < m ; i ++ ) { r [ i ] = 0 ; }"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        7,
        8,
        9,
        10
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;",
        "char a [ m * n ] + 11 ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }",
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> r [ i ] ; }"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        7,
        8,
        9,
        38
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;",
        "char a [ m * n ] + 11 ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }",
        "c [ 3 ] = ' i ' ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        7,
        8,
        10
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;",
        "char a [ m * n ] + 11 ;",
        "for ( int i = 0 ; i < m ; i ++ ) { r [ i ] = 0 ; }"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        7,
        8,
        10,
        38
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;",
        "char a [ m * n ] + 11 ;",
        "for ( int i = 0 ; i < m ; i ++ ) { r [ i ] = 0 ; }",
        "c [ 3 ] = ' i ' ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        7,
        8,
        10
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;",
        "char a [ m * n ] + 11 ;",
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> r [ i ] ; }"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        7,
        8,
        10,
        38
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;",
        "char a [ m * n ] + 11 ;",
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> r [ i ] ; }",
        "c [ 3 ] = ' i ' ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        7,
        8,
        38
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;",
        "char a [ m * n ] + 11 ;",
        "c [ 3 ] = ' i ' ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        7,
        9,
        10
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }",
        "for ( int i = 0 ; i < m ; i ++ ) { r [ i ] = 0 ; }"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        7,
        9,
        10,
        38
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }",
        "for ( int i = 0 ; i < m ; i ++ ) { r [ i ] = 0 ; }",
        "c [ 3 ] = ' i ' ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        7,
        9,
        10
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }",
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> r [ i ] ; }"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        7,
        9,
        10,
        38
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }",
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> r [ i ] ; }",
        "c [ 3 ] = ' i ' ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        7,
        9,
        38
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }",
        "c [ 3 ] = ' i ' ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;",
        "for ( int i = 0 ; i < m ; i ++ ) { r [ i ] = 0 ; }"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        7,
        10,
        38
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;",
        "for ( int i = 0 ; i < m ; i ++ ) { r [ i ] = 0 ; }",
        "c [ 3 ] = ' i ' ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;",
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> r [ i ] ; }"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        7,
        10,
        38
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;",
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> r [ i ] ; }",
        "c [ 3 ] = ' i ' ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        7,
        38
      ],
      "mod_code": [
        "int s [ n + 9 ] , r [ m + 9 ] , r [ m + 9 ] ;",
        "c [ 3 ] = ' i ' ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int r [(m + 9)]’"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "char a [ m * n ] + 11 ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8,
        9,
        10
      ],
      "mod_code": [
        "char a [ m * n ] + 11 ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }",
        "for ( int i = 0 ; i < m ; i ++ ) { r [ i ] = 0 ; }"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8,
        9,
        10,
        38
      ],
      "mod_code": [
        "char a [ m * n ] + 11 ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }",
        "for ( int i = 0 ; i < m ; i ++ ) { r [ i ] = 0 ; }",
        "c [ 3 ] = ' i ' ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8,
        9,
        10
      ],
      "mod_code": [
        "char a [ m * n ] + 11 ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }",
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> r [ i ] ; }"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8,
        9,
        10,
        38
      ],
      "mod_code": [
        "char a [ m * n ] + 11 ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }",
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> r [ i ] ; }",
        "c [ 3 ] = ' i ' ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8,
        9,
        38
      ],
      "mod_code": [
        "char a [ m * n ] + 11 ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> s [ i ] ; }",
        "c [ 3 ] = ' i ' ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "char a [ m * n ] + 11 ;",
        "for ( int i = 0 ; i < m ; i ++ ) { r [ i ] = 0 ; }"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8,
        10,
        38
      ],
      "mod_code": [
        "char a [ m * n ] + 11 ;",
        "for ( int i = 0 ; i < m ; i ++ ) { r [ i ] = 0 ; }",
        "c [ 3 ] = ' i ' ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "char a [ m * n ] + 11 ;",
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> r [ i ] ; }"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8,
        10,
        38
      ],
      "mod_code": [
        "char a [ m * n ] + 11 ;",
        "for ( int i = 0 ; i < m ; i ++ ) { cin >> r [ i ] ; }",
        "c [ 3 ] = ' i ' ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        8,
        38
      ],
      "mod_code": [
        "char a [ m * n ] + 11 ;",
        "c [ 3 ] = ' i ' ;"
      ],
      "err_line": 8,
      "err_msg": "expected initializer before ‘+’ token"
    }
  ]
}