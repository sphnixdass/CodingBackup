{
  "meta": {
    "index": 2602,
    "hitid": "3QX22DUVOOBI7K71J6QZAIK5I23MV3",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "906A",
    "subid": "48971441"
  },
  "lines": [
    {
      "line": 0,
      "text": "create bool array now of size 30",
      "code": "bool now [ 30 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let char array a of size 100010",
      "code": "char a [ 100010 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create bool arrays a of size 30 and mark of size 30",
      "code": "bool b [ 30 ] , mark [ 30 ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "create int n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "let char c",
      "code": "char c ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "let int cnt = 0",
      "code": "int cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "let int cnt3 = 0",
      "code": "int cnt3 = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "create integer ans = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "let bool ho = 0",
      "code": "bool ho = 0 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for x = 1 to n",
      "code": "for ( int x = 1 ; x <= n ; ++ x )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "read c and s",
      "code": "cin >> c >> s ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if x is equal to n , break loop",
      "code": "if ( x == n ) break ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "create int l = s . length ( )",
      "code": "int l = s . length ( ) ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set all indexes of now to 0",
      "code": "memset ( now , 0 , sizeof ( now ) ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "create int cnt2 = 0",
      "code": "int cnt2 = 0 ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if cnt2 equals 25 , set cnt to 1",
      "code": "if ( cnt3 == 25 ) cnt = 1 ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if c is equal to ' ! '",
      "code": "if ( c == ' ! ' )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if cnt is equal to 1",
      "code": "if ( cnt == 1 )",
      "indent": 3
    },
    {
      "line": 21,
      "text": "increase ans by 1",
      "code": "ans ++ ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "continue loop",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 24,
      "text": "if ho is equal to 0",
      "code": "if ( ho == 0 )",
      "indent": 3
    },
    {
      "line": 25,
      "text": "for i = 0 to l exclusive",
      "code": "for ( int i = 0 ; i < l ; ++ i )",
      "indent": 4
    },
    {
      "line": 26,
      "text": "if mark [ s [ i ] - ' a ' is equal to 0",
      "code": "if ( mark [ s [ i ] - ' a ' ] == 0 )",
      "indent": 5
    },
    {
      "line": 27,
      "text": "set a [ + + cnt ] to s [ i ]",
      "code": "a [ ++ cnt ] = s [ i ] ;",
      "indent": 6
    },
    {
      "line": 28,
      "text": "set mark [ s [ i ] - ' a ' ] to 1",
      "code": "mark [ s [ i ] - ' a ' ] = 1 ;",
      "indent": 6
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 31,
      "text": "for i = 1 to cnt",
      "code": "for ( int i = 1 ; i <= cnt ; ++ i )",
      "indent": 4
    },
    {
      "line": 32,
      "text": "if b [ a [ i ] - ' a ' is equal to 0 , set a [ + + cnt2 ] to a [ i ]",
      "code": "if ( b [ a [ i ] - ' a ' ] == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
      "indent": 5
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 34,
      "text": "set ho to 1",
      "code": "ho = 1 ;",
      "indent": 4
    },
    {
      "line": 35,
      "text": "set cnt to cnt2",
      "code": "cnt = cnt2 ;",
      "indent": 4
    },
    {
      "line": 36,
      "text": "continue to next loop iteration",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 38,
      "text": "for i = 0 to l exclusive , set now [ s [ i ] - ' a ' ] to 1",
      "code": "for ( int i = 0 ; i < l ; ++ i ) now [ s [ i ] - ' a ' ] = 1 ;",
      "indent": 3
    },
    {
      "line": 39,
      "text": "for i = 1 to cnt",
      "code": "for ( int i = 1 ; i <= cnt ; ++ i )",
      "indent": 3
    },
    {
      "line": 40,
      "text": "if now [ a [ i ] - ' a ' is equal to 1 and b [ a [ i ] - ' a ' is equal to 0 , set a [ + + cnt2 ] to a [ i ]",
      "code": "if ( now [ a [ i ] - ' a ' ] == 1 && b [ a [ i ] - ' a ' ] == 0 ) { a [ ++ cnt2 ] = a [ i ] ; }",
      "indent": 4
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 42,
      "text": "set cnt to cnt2",
      "code": "cnt = cnt2 ;",
      "indent": 3
    },
    {
      "line": 43,
      "text": "else if c equals ' . '",
      "code": "else if ( c == ' . ' )",
      "indent": 2
    },
    {
      "line": 44,
      "text": "if cnt equals 1 , continue loop",
      "code": "if ( cnt == 1 ) continue ;",
      "indent": 3
    },
    {
      "line": 45,
      "text": "for i = 0 to l exclusive",
      "code": "for ( int i = 0 ; i < l ; ++ i )",
      "indent": 3
    },
    {
      "line": 46,
      "text": "if b [ s [ i ] - ' a ' equals 0",
      "code": "if ( b [ s [ i ] - ' a ' ] == 0 )",
      "indent": 4
    },
    {
      "line": 47,
      "text": "set b [ s [ i ] - ' a ' to 1",
      "code": "b [ s [ i ] - ' a ' ] = 1 ;",
      "indent": 5
    },
    {
      "line": 48,
      "text": "increment cnt3 + +",
      "code": "cnt3 ++ ;",
      "indent": 5
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 51,
      "text": "for i = 0 to l exclusive , set now [ s [ i ] - ' a ' to 1",
      "code": "for ( int i = 0 ; i < l ; ++ i ) { now [ s [ i ] - ' a ' ] = 1 ; }",
      "indent": 3
    },
    {
      "line": 52,
      "text": "for i = 1 to cnt",
      "code": "for ( int i = 1 ; i <= cnt ; ++ i )",
      "indent": 3
    },
    {
      "line": 53,
      "text": "if now [ a [ i ] - ' a ' is equal to 0 , set a [ + + cnt2 ] to a [ i ]",
      "code": "if ( now [ a [ i ] - ' a ' ] == 0 ) { a [ ++ cnt2 ] = a [ i ] ; }",
      "indent": 4
    },
    {
      "line": 54,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 55,
      "text": "set cnt to cnt2",
      "code": "cnt = cnt2 ;",
      "indent": 3
    },
    {
      "line": 56,
      "text": "otherwise",
      "code": "else",
      "indent": 2
    },
    {
      "line": 57,
      "text": "if cnt is equal to 1",
      "code": "if ( cnt == 1 )",
      "indent": 3
    },
    {
      "line": 58,
      "text": "increase ans by 1",
      "code": "ans ++ ;",
      "indent": 4
    },
    {
      "line": 59,
      "text": "continue loop",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 60,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 61,
      "text": "if b [ s [ 0 ] - ' a ' is equal to 0 , increment cnt3",
      "code": "if ( b [ s [ 0 ] - ' a ' ] == 0 ) cnt3 ++ ;",
      "indent": 3
    },
    {
      "line": 62,
      "text": "set b [ s [ 0 ] - ' a ' to 1",
      "code": "b [ s [ 0 ] - ' a ' ] = 1 ;",
      "indent": 3
    },
    {
      "line": 63,
      "text": "for i = 1 to cnt",
      "code": "for ( int i = 1 ; i <= cnt ; ++ i )",
      "indent": 3
    },
    {
      "line": 64,
      "text": "if a [ i ] equals s [ 0 ] , continue to next loop iteration",
      "code": "if ( a [ i ] == s [ 0 ] ) continue ;",
      "indent": 4
    },
    {
      "line": 65,
      "text": "set a [ + + cnt2 ] to a [ i ]",
      "code": "a [ ++ cnt2 ] = a [ i ] ;",
      "indent": 4
    },
    {
      "line": 66,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 67,
      "text": "set cnt to cnt2",
      "code": "cnt = cnt2 ;",
      "indent": 3
    },
    {
      "line": 68,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 69,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 70,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 71,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 72,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }"
      ],
      "err_line": 40,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        46
      ],
      "mod_code": [
        "if ( b [ s [ i ] - ' a ' == 0 )"
      ],
      "err_line": 46,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        51
      ],
      "mod_code": [
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 51,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        53
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 53,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        61
      ],
      "mod_code": [
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 61,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool now = new bool [ 30 ] ;"
      ],
      "err_line": 16,
      "err_msg": "cannot convert ‘bool’ to ‘void*’ for argument ‘1’ to ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "bool mark [ 30 ] , mark [ 30 ] ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘bool mark [30]’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int a ;"
      ],
      "err_line": 5,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 13,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "char a ;"
      ],
      "err_line": 13,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 7,
      "err_msg": "conflicting declaration ‘std::__cxx11::string n’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "ans = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( x = 1 ; x <= n ; x ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "c >> c >> s ;"
      ],
      "err_line": 13,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "int l = new int . length ( ) ;"
      ],
      "err_line": 15,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "if ( cnt2 == \" 25 \" ) cnt = 1 ;"
      ],
      "err_line": 18,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "continue continue ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "for ( i = 0 ; i < l ; i ++ )"
      ],
      "err_line": 25,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' ) == 0 )"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "mark [ s [ i ] - ' a ' ] ] = 1 ;"
      ],
      "err_line": 28,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "for ( i = 1 ; i <= cnt ; i ++ )"
      ],
      "err_line": 31,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) { a [ ++ cnt2 ] = a [ i ] ; }"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "continue continue ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "for ( i = 1 ; i <= cnt ; i ++ )"
      ],
      "err_line": 39,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' == 0 ) { a [ ++ cnt2 ] = a [ i ] ; }"
      ],
      "err_line": 40,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        45
      ],
      "mod_code": [
        "for ( i = 0 ; i < l ; i ++ )"
      ],
      "err_line": 45,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        46
      ],
      "mod_code": [
        "if ( b [ s [ i ] - ' a ' )"
      ],
      "err_line": 46,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        51
      ],
      "mod_code": [
        "for ( int i = 0 ; i < l ; i ++ ) now [ s [ i ] - ' a ' + 1 ;"
      ],
      "err_line": 51,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        52
      ],
      "mod_code": [
        "for ( i = 1 ; i <= cnt ; i ++ )"
      ],
      "err_line": 52,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        53
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' == 0 ) { a [ ++ cnt2 ] = a [ i ] ; }"
      ],
      "err_line": 53,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        59
      ],
      "mod_code": [
        "continue continue ;"
      ],
      "err_line": 59,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        61
      ],
      "mod_code": [
        "if ( b [ s [ 0 ] - ' a ' ) cnt3 ++ ;"
      ],
      "err_line": 61,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        63
      ],
      "mod_code": [
        "for ( i = 1 ; i <= cnt ; i ++ )"
      ],
      "err_line": 63,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        26
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        26,
        32
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        26,
        32,
        40
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        26,
        32,
        46
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        26,
        32,
        51
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        26,
        32,
        53
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        26,
        32,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        26,
        40
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        26,
        40,
        46
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        26,
        40,
        51
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        26,
        40,
        53
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        26,
        40,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        26,
        46
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ i ] - ' a ' == 0 )"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        26,
        46,
        51
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        26,
        46,
        53
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        26,
        46,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        26,
        51
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        26,
        51,
        53
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        26,
        51,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        26,
        53
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        26,
        53,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        26,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        32
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        32,
        40
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        32,
        40,
        46
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        32,
        40,
        51
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        32,
        40,
        53
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        32,
        40,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        32,
        46
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        32,
        46,
        51
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        32,
        46,
        53
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        32,
        46,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        32,
        51
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        32,
        51,
        53
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        32,
        51,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        32,
        53
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        32,
        53,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        32,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        40
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        40,
        46
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        40,
        46,
        51
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        40,
        46,
        53
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        40,
        46,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        40,
        51
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        40,
        51,
        53
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        40,
        51,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        40,
        53
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        40,
        53,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        40,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        46
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        46,
        51
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        46,
        51,
        53
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        46,
        51,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        46,
        53
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        46,
        53,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        46,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        51
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        51,
        53
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        51,
        53,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        51,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        53
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        53,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        2,
        61
      ],
      "mod_code": [
        "bool a [ 30 ] , mark [ 30 ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘bool a [30]’"
    },
    {
      "mod_line": [
        26,
        32
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        32,
        40
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        32,
        40,
        46
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        32,
        40,
        51
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        32,
        40,
        53
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        32,
        40,
        61
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        32,
        46
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        32,
        46,
        51
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        32,
        46,
        53
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        32,
        46,
        61
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        32,
        51
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        32,
        51,
        53
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        32,
        51,
        61
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        32,
        53
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        32,
        53,
        61
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        32,
        61
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        40
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        40,
        46
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        40,
        46,
        51
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        40,
        46,
        53
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        40,
        46,
        61
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        40,
        51
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        40,
        51,
        53
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        40,
        51,
        61
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        40,
        53
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        40,
        53,
        61
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        40,
        61
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        46
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ i ] - ' a ' == 0 )"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        46,
        51
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        46,
        51,
        53
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        46,
        51,
        61
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        46,
        53
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        46,
        53,
        61
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        46,
        61
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        51
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        51,
        53
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        51,
        53,
        61
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        51,
        61
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        53
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        53,
        61
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        26,
        61
      ],
      "mod_code": [
        "if ( mark [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        40
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        40,
        46
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        40,
        46,
        51
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        40,
        46,
        53
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        40,
        46,
        61
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        40,
        51
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        40,
        51,
        53
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        40,
        51,
        61
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        40,
        53
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        40,
        53,
        61
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        40,
        61
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        46
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        46,
        51
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        46,
        51,
        53
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        46,
        51,
        61
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        46,
        53
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        46,
        53,
        61
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        46,
        61
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        51
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        51,
        53
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        51,
        53,
        61
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        51,
        61
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        53
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        53,
        61
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        32,
        61
      ],
      "mod_code": [
        "if ( b [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        40,
        46
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )"
      ],
      "err_line": 40,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        40,
        46,
        51
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 40,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        40,
        46,
        51,
        53
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 40,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        40,
        46,
        51,
        61
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 40,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        40,
        46,
        53
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 40,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        40,
        46,
        53,
        61
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 40,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        40,
        46,
        61
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 40,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        40,
        51
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 40,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        40,
        51,
        53
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 40,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        40,
        51,
        53,
        61
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 40,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        40,
        51,
        61
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 40,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        40,
        53
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 40,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        40,
        53,
        61
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 40,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        40,
        61
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' == 1 && b [ a [ i ] - ' a ' ) { a [ ++ cnt2 ] = a [ i ] ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 40,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        46,
        51
      ],
      "mod_code": [
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }"
      ],
      "err_line": 46,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        46,
        51,
        53
      ],
      "mod_code": [
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        46,
        51,
        53,
        61
      ],
      "mod_code": [
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        46,
        51,
        61
      ],
      "mod_code": [
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        46,
        53
      ],
      "mod_code": [
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        46,
        53,
        61
      ],
      "mod_code": [
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        46,
        61
      ],
      "mod_code": [
        "if ( b [ s [ i ] - ' a ' == 0 )",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        51,
        53
      ],
      "mod_code": [
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;"
      ],
      "err_line": 51,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        51,
        53,
        61
      ],
      "mod_code": [
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 51,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        51,
        61
      ],
      "mod_code": [
        "for ( int i = 0 ; i < l ; i ++ ) { now [ s [ i ] - ' a ' + 1 ; }",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 51,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        53,
        61
      ],
      "mod_code": [
        "if ( now [ a [ i ] - ' a ' == 0 ) a [ ++ cnt2 ] = a [ i ] ;",
        "if ( b [ s [ 0 ] - ' a ' == 0 ) cnt3 ++ ;"
      ],
      "err_line": 53,
      "err_msg": "expected ‘]’ before ‘)’ token"
    }
  ]
}