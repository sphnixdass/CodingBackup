{
  "meta": {
    "index": 1144,
    "hitid": "3XBXDSS888DQ5RUBJ9Q2YQ21Y8IXLC",
    "workerid": "A1MJVTR0PCKBWW",
    "probid": "86A",
    "subid": "25714882"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "set long long integer l , r , k to 1 , t",
      "code": "long long l , r , k = 1 , t ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read l , r",
      "code": "cin >> l >> r ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set t to r",
      "code": "t = r ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if t is greater than 0 then do k * = 10 , t divided by 10 ;",
      "code": "while ( t > 0 ) k *= 10 , t /= 10 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "divide k by 10 ;",
      "code": "k /= 10 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set l to max ( k , l )",
      "code": "l = max ( k , l ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if is less than or equal to r then do | | ( k * 5 - 1 > = l & & k * 5 - 1 < = r",
      "code": "if ( ( k * 5 >= l && k * 5 <= r ) || ( k * 5 - 1 >= l && k * 5 - 1 <= r ) )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "output ( k * ( long long ) 5 ) * ( k * ( long long ) 5 - 1 )",
      "code": "cout << ( k * ( long long ) 5 ) * ( k * ( long long ) 5 - 1 ) << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else",
      "code": "else if ( k * 5 > r )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "output r * ( k * ( long long ) 10 - ( long long ) 1 - r )",
      "code": "cout << r * ( k * ( long long ) 10 - ( long long ) 1 - r ) << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 12,
      "text": "output l * ( k * ( long long ) 10 - ( long long ) 1 - l )",
      "code": "cout << l * ( k * ( long long ) 10 - ( long long ) 1 - l ) << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cout << ( long long ) ( k * ( long long ) 5 * ( long long ) 5 - ( long long ) 5 - ( long long ) 5 - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int t = r ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int t’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int l = max ( k , l ) ;"
      ],
      "err_line": 6,
      "err_msg": "conflicting declaration ‘int l’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( <= r ) || ( k * 5 - 1 >= l && k * 5 - 1 <= r ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘<=’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cout << ( long long ) ( k * ( long long ) ( long long ) 5 * ( long long ) 5 - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "if ( t > 0 ) k += 10 , t /= 10 ;",
        "cout << ( long long ) ( k * ( long long ) 5 * ( long long ) 5 - ( long long ) 5 - ( long long ) 5 - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        8,
        9
      ],
      "mod_code": [
        "if ( t > 0 ) k += 10 , t /= 10 ;",
        "cout << ( long long ) ( k * ( long long ) 5 * ( long long ) 5 - ( long long ) 5 - ( long long ) 5 - 1 ;",
        "else"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        8,
        9,
        10
      ],
      "mod_code": [
        "if ( t > 0 ) k += 10 , t /= 10 ;",
        "cout << ( long long ) ( k * ( long long ) 5 * ( long long ) 5 - ( long long ) 5 - ( long long ) 5 - 1 ;",
        "else",
        "cout << r * ( long long ) ( k * ( long long ) 1 - ( long long ) 1 - r - r ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        8,
        9,
        11
      ],
      "mod_code": [
        "if ( t > 0 ) k += 10 , t /= 10 ;",
        "cout << ( long long ) ( k * ( long long ) 5 * ( long long ) 5 - ( long long ) 5 - ( long long ) 5 - 1 ;",
        "else",
        "else ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        8,
        10
      ],
      "mod_code": [
        "if ( t > 0 ) k += 10 , t /= 10 ;",
        "cout << ( long long ) ( k * ( long long ) 5 * ( long long ) 5 - ( long long ) 5 - ( long long ) 5 - 1 ;",
        "cout << r * ( long long ) ( k * ( long long ) 1 - ( long long ) 1 - r - r ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        8,
        10,
        11
      ],
      "mod_code": [
        "if ( t > 0 ) k += 10 , t /= 10 ;",
        "cout << ( long long ) ( k * ( long long ) 5 * ( long long ) 5 - ( long long ) 5 - ( long long ) 5 - 1 ;",
        "cout << r * ( long long ) ( k * ( long long ) 1 - ( long long ) 1 - r - r ) << endl ;",
        "else ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        8,
        11
      ],
      "mod_code": [
        "if ( t > 0 ) k += 10 , t /= 10 ;",
        "cout << ( long long ) ( k * ( long long ) 5 * ( long long ) 5 - ( long long ) 5 - ( long long ) 5 - 1 ;",
        "else ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "if ( t > 0 ) k += 10 , t /= 10 ;",
        "else"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        9,
        10
      ],
      "mod_code": [
        "if ( t > 0 ) k += 10 , t /= 10 ;",
        "else",
        "cout << r * ( long long ) ( k * ( long long ) 1 - ( long long ) 1 - r - r ) << endl ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        9,
        10,
        8
      ],
      "mod_code": [
        "if ( t > 0 ) k += 10 , t /= 10 ;",
        "else",
        "cout << r * ( long long ) ( k * ( long long ) 1 - ( long long ) 1 - r - r ) << endl ;",
        "cout << ( long long ) ( k * ( long long ) ( long long ) 5 * ( long long ) 5 - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        9,
        10,
        11
      ],
      "mod_code": [
        "if ( t > 0 ) k += 10 , t /= 10 ;",
        "else",
        "cout << r * ( long long ) ( k * ( long long ) 1 - ( long long ) 1 - r - r ) << endl ;",
        "else ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        9,
        8
      ],
      "mod_code": [
        "if ( t > 0 ) k += 10 , t /= 10 ;",
        "else",
        "cout << ( long long ) ( k * ( long long ) ( long long ) 5 * ( long long ) 5 - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        9,
        8,
        11
      ],
      "mod_code": [
        "if ( t > 0 ) k += 10 , t /= 10 ;",
        "else",
        "cout << ( long long ) ( k * ( long long ) ( long long ) 5 * ( long long ) 5 - 1 ;",
        "else ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        9,
        11
      ],
      "mod_code": [
        "if ( t > 0 ) k += 10 , t /= 10 ;",
        "else",
        "else ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        10,
        8
      ],
      "mod_code": [
        "if ( t > 0 ) k += 10 , t /= 10 ;",
        "cout << r * ( long long ) ( k * ( long long ) 1 - ( long long ) 1 - r - r ) << endl ;",
        "cout << ( long long ) ( k * ( long long ) ( long long ) 5 * ( long long ) 5 - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        10,
        8,
        11
      ],
      "mod_code": [
        "if ( t > 0 ) k += 10 , t /= 10 ;",
        "cout << r * ( long long ) ( k * ( long long ) 1 - ( long long ) 1 - r - r ) << endl ;",
        "cout << ( long long ) ( k * ( long long ) ( long long ) 5 * ( long long ) 5 - 1 ;",
        "else ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "if ( t > 0 ) k += 10 , t /= 10 ;",
        "cout << ( long long ) ( k * ( long long ) ( long long ) 5 * ( long long ) 5 - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        8,
        11
      ],
      "mod_code": [
        "if ( t > 0 ) k += 10 , t /= 10 ;",
        "cout << ( long long ) ( k * ( long long ) ( long long ) 5 * ( long long ) 5 - 1 ;",
        "else ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "cout << ( long long ) ( k * ( long long ) 5 * ( long long ) 5 - ( long long ) 5 - ( long long ) 5 - 1 ;",
        "else"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        9,
        10
      ],
      "mod_code": [
        "cout << ( long long ) ( k * ( long long ) 5 * ( long long ) 5 - ( long long ) 5 - ( long long ) 5 - 1 ;",
        "else",
        "cout << r * ( long long ) ( k * ( long long ) 1 - ( long long ) 1 - r - r ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        9,
        10,
        11
      ],
      "mod_code": [
        "cout << ( long long ) ( k * ( long long ) 5 * ( long long ) 5 - ( long long ) 5 - ( long long ) 5 - 1 ;",
        "else",
        "cout << r * ( long long ) ( k * ( long long ) 1 - ( long long ) 1 - r - r ) << endl ;",
        "else ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        9,
        11
      ],
      "mod_code": [
        "cout << ( long long ) ( k * ( long long ) 5 * ( long long ) 5 - ( long long ) 5 - ( long long ) 5 - 1 ;",
        "else",
        "else ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "cout << ( long long ) ( k * ( long long ) 5 * ( long long ) 5 - ( long long ) 5 - ( long long ) 5 - 1 ;",
        "cout << r * ( long long ) ( k * ( long long ) 1 - ( long long ) 1 - r - r ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        10,
        11
      ],
      "mod_code": [
        "cout << ( long long ) ( k * ( long long ) 5 * ( long long ) 5 - ( long long ) 5 - ( long long ) 5 - 1 ;",
        "cout << r * ( long long ) ( k * ( long long ) 1 - ( long long ) 1 - r - r ) << endl ;",
        "else ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "cout << ( long long ) ( k * ( long long ) 5 * ( long long ) 5 - ( long long ) 5 - ( long long ) 5 - 1 ;",
        "else ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "else",
        "cout << r * ( long long ) ( k * ( long long ) 1 - ( long long ) 1 - r - r ) << endl ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        10,
        8
      ],
      "mod_code": [
        "else",
        "cout << r * ( long long ) ( k * ( long long ) 1 - ( long long ) 1 - r - r ) << endl ;",
        "cout << ( long long ) ( k * ( long long ) ( long long ) 5 * ( long long ) 5 - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        9,
        10,
        8,
        11
      ],
      "mod_code": [
        "else",
        "cout << r * ( long long ) ( k * ( long long ) 1 - ( long long ) 1 - r - r ) << endl ;",
        "cout << ( long long ) ( k * ( long long ) ( long long ) 5 * ( long long ) 5 - 1 ;",
        "else ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        9,
        10,
        11
      ],
      "mod_code": [
        "else",
        "cout << r * ( long long ) ( k * ( long long ) 1 - ( long long ) 1 - r - r ) << endl ;",
        "else ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "else",
        "cout << ( long long ) ( k * ( long long ) ( long long ) 5 * ( long long ) 5 - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        9,
        8,
        11
      ],
      "mod_code": [
        "else",
        "cout << ( long long ) ( k * ( long long ) ( long long ) 5 * ( long long ) 5 - 1 ;",
        "else ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "else",
        "else ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "cout << r * ( long long ) ( k * ( long long ) 1 - ( long long ) 1 - r - r ) << endl ;",
        "cout << ( long long ) ( k * ( long long ) ( long long ) 5 * ( long long ) 5 - 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        10,
        8,
        11
      ],
      "mod_code": [
        "cout << r * ( long long ) ( k * ( long long ) 1 - ( long long ) 1 - r - r ) << endl ;",
        "cout << ( long long ) ( k * ( long long ) ( long long ) 5 * ( long long ) 5 - 1 ;",
        "else ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "cout << ( long long ) ( k * ( long long ) ( long long ) 5 * ( long long ) 5 - 1 ;",
        "else ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    }
  ]
}