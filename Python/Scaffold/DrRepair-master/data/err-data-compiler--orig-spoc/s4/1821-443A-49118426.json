{
  "meta": {
    "index": 1821,
    "hitid": "344M16OZKI97NR6F0HGPNTLJMADNEQ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "443A",
    "subid": "49118426"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let s be a unique set of characters",
      "code": "set < char > s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare string str",
      "code": "string str ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read input into str",
      "code": "getline ( cin , str ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to length of str exclusive",
      "code": "for ( int i = 0 ; i < str . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if ( str [ i ] ! = ' ' & & str [ i ] ! = ' { ' & & str [ i ] ! = ' } ' & & str [ i ] ! = ' , ' ) , insert str [ i ] into s",
      "code": "if ( str [ i ] != ' ' && str [ i ] != ' { ' && str [ i ] != ' } ' && str [ i ] != ' , ' ) s . insert ( str [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "print length of s",
      "code": "cout << s . size ( ) << endl ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) s . insert ( str [ i ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "set < unique > s ;"
      ],
      "err_line": 1,
      "err_msg": "type/value mismatch at argument 1 in template parameter list for ‘template<class _Key, class _Compare, class _Alloc> class std::set’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char str ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) { s . insert ( str [ i ] ) ; }"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "cout << s . length ( ) << endl ;"
      ],
      "err_line": 6,
      "err_msg": "‘class std::set<char>’ has no member named ‘length’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "cin >> str ;",
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) s . insert ( str [ i ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        5,
        2
      ],
      "mod_code": [
        "cin >> str ;",
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) s . insert ( str [ i ] ) ;",
        "char str ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        5,
        2,
        1
      ],
      "mod_code": [
        "cin >> str ;",
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) s . insert ( str [ i ] ) ;",
        "char str ;",
        "set < unique > s ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        5,
        2,
        6
      ],
      "mod_code": [
        "cin >> str ;",
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) s . insert ( str [ i ] ) ;",
        "char str ;",
        "cout << s . length ( ) << endl ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        5,
        1
      ],
      "mod_code": [
        "cin >> str ;",
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) s . insert ( str [ i ] ) ;",
        "set < unique > s ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        5,
        1,
        6
      ],
      "mod_code": [
        "cin >> str ;",
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) s . insert ( str [ i ] ) ;",
        "set < unique > s ;",
        "cout << s . length ( ) << endl ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        5,
        6
      ],
      "mod_code": [
        "cin >> str ;",
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) s . insert ( str [ i ] ) ;",
        "cout << s . length ( ) << endl ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "cin >> str ;",
        "char str ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3,
        2,
        1
      ],
      "mod_code": [
        "cin >> str ;",
        "char str ;",
        "set < unique > s ;"
      ],
      "err_line": 1,
      "err_msg": "type/value mismatch at argument 1 in template parameter list for ‘template<class _Key, class _Compare, class _Alloc> class std::set’"
    },
    {
      "mod_line": [
        3,
        2,
        1,
        6
      ],
      "mod_code": [
        "cin >> str ;",
        "char str ;",
        "set < unique > s ;",
        "cout << s . length ( ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "type/value mismatch at argument 1 in template parameter list for ‘template<class _Key, class _Compare, class _Alloc> class std::set’"
    },
    {
      "mod_line": [
        3,
        2,
        1,
        5
      ],
      "mod_code": [
        "cin >> str ;",
        "char str ;",
        "set < unique > s ;",
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) { s . insert ( str [ i ] ) ; }"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        2,
        6
      ],
      "mod_code": [
        "cin >> str ;",
        "char str ;",
        "cout << s . length ( ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3,
        2,
        6,
        5
      ],
      "mod_code": [
        "cin >> str ;",
        "char str ;",
        "cout << s . length ( ) << endl ;",
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) { s . insert ( str [ i ] ) ; }"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        2,
        5
      ],
      "mod_code": [
        "cin >> str ;",
        "char str ;",
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) { s . insert ( str [ i ] ) ; }"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "cin >> str ;",
        "set < unique > s ;"
      ],
      "err_line": 1,
      "err_msg": "type/value mismatch at argument 1 in template parameter list for ‘template<class _Key, class _Compare, class _Alloc> class std::set’"
    },
    {
      "mod_line": [
        3,
        1,
        6
      ],
      "mod_code": [
        "cin >> str ;",
        "set < unique > s ;",
        "cout << s . length ( ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "type/value mismatch at argument 1 in template parameter list for ‘template<class _Key, class _Compare, class _Alloc> class std::set’"
    },
    {
      "mod_line": [
        3,
        1,
        6,
        5
      ],
      "mod_code": [
        "cin >> str ;",
        "set < unique > s ;",
        "cout << s . length ( ) << endl ;",
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) { s . insert ( str [ i ] ) ; }"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        1,
        5
      ],
      "mod_code": [
        "cin >> str ;",
        "set < unique > s ;",
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) { s . insert ( str [ i ] ) ; }"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "cin >> str ;",
        "cout << s . length ( ) << endl ;"
      ],
      "err_line": 6,
      "err_msg": "‘class std::set<char>’ has no member named ‘length’"
    },
    {
      "mod_line": [
        3,
        6,
        5
      ],
      "mod_code": [
        "cin >> str ;",
        "cout << s . length ( ) << endl ;",
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) { s . insert ( str [ i ] ) ; }"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "cin >> str ;",
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) { s . insert ( str [ i ] ) ; }"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) s . insert ( str [ i ] ) ;",
        "char str ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        5,
        2,
        1
      ],
      "mod_code": [
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) s . insert ( str [ i ] ) ;",
        "char str ;",
        "set < unique > s ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        5,
        2,
        1,
        6
      ],
      "mod_code": [
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) s . insert ( str [ i ] ) ;",
        "char str ;",
        "set < unique > s ;",
        "cout << s . length ( ) << endl ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        5,
        2,
        6
      ],
      "mod_code": [
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) s . insert ( str [ i ] ) ;",
        "char str ;",
        "cout << s . length ( ) << endl ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) s . insert ( str [ i ] ) ;",
        "set < unique > s ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        5,
        1,
        6
      ],
      "mod_code": [
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) s . insert ( str [ i ] ) ;",
        "set < unique > s ;",
        "cout << s . length ( ) << endl ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) s . insert ( str [ i ] ) ;",
        "cout << s . length ( ) << endl ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "char str ;",
        "set < unique > s ;"
      ],
      "err_line": 1,
      "err_msg": "type/value mismatch at argument 1 in template parameter list for ‘template<class _Key, class _Compare, class _Alloc> class std::set’"
    },
    {
      "mod_line": [
        2,
        1,
        6
      ],
      "mod_code": [
        "char str ;",
        "set < unique > s ;",
        "cout << s . length ( ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "type/value mismatch at argument 1 in template parameter list for ‘template<class _Key, class _Compare, class _Alloc> class std::set’"
    },
    {
      "mod_line": [
        2,
        1,
        6,
        5
      ],
      "mod_code": [
        "char str ;",
        "set < unique > s ;",
        "cout << s . length ( ) << endl ;",
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) { s . insert ( str [ i ] ) ; }"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        1,
        5
      ],
      "mod_code": [
        "char str ;",
        "set < unique > s ;",
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) { s . insert ( str [ i ] ) ; }"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "char str ;",
        "cout << s . length ( ) << endl ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        2,
        6,
        5
      ],
      "mod_code": [
        "char str ;",
        "cout << s . length ( ) << endl ;",
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) { s . insert ( str [ i ] ) ; }"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "char str ;",
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) { s . insert ( str [ i ] ) ; }"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "set < unique > s ;",
        "cout << s . length ( ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "type/value mismatch at argument 1 in template parameter list for ‘template<class _Key, class _Compare, class _Alloc> class std::set’"
    },
    {
      "mod_line": [
        1,
        6,
        5
      ],
      "mod_code": [
        "set < unique > s ;",
        "cout << s . length ( ) << endl ;",
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) { s . insert ( str [ i ] ) ; }"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "set < unique > s ;",
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) { s . insert ( str [ i ] ) ; }"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "cout << s . length ( ) << endl ;",
        "if ( ( str [ i ] != ' ' && str [ i ] != ' ' && str [ i ] != ' } ' && str [ i ] != ' } ) { s . insert ( str [ i ] ) ; }"
      ],
      "err_line": 5,
      "err_msg": "missing terminating ' character"
    }
  ]
}