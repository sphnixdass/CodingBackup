{
  "meta": {
    "index": 2371,
    "hitid": "3G4VVJO6PZAACCA2CI4KPD3J797KPB",
    "workerid": "ACI8PUCF5OPDC",
    "probid": "365A",
    "subid": "34346361"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer n , k",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "get n , k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create string s and s1 with s = \" 0123456789 \"",
      "code": "string s = \" 0123456789 \" , s1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integer res , c with both set to 0",
      "code": "int res = 0 , c = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while n not equal to zero do increment n and the following",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "get s1",
      "code": "cin >> s1 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for integer i = 0 to k with increment i",
      "code": "for ( int i = 0 ; i <= k ; i ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if position of s [ i ] in s1 is less than size of s1 then increment c",
      "code": "if ( s1 . find ( s [ i ] ) < s1 . size ( ) ) c ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if c greater than or equal to k + 1 then increment res",
      "code": "if ( c >= k + 1 ) res ++ ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set c to 0",
      "code": "c = 0 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print res",
      "code": "cout << res << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        7,
        5,
        6
      ],
      "mod_code": [
        "string s , s1 = \" 0123456789 \" ;",
        "for ( int i = 0 ; i < k ; i ++ )",
        "while ( n )",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        7,
        11,
        6
      ],
      "mod_code": [
        "string s , s1 = \" 0123456789 \" ;",
        "for ( int i = 0 ; i < k ; i ++ )",
        "int c = 0 ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        7,
        2,
        6
      ],
      "mod_code": [
        "string s , s1 = \" 0123456789 \" ;",
        "for ( int i = 0 ; i < k ; i ++ )",
        "cin >> n , k ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        7,
        6
      ],
      "mod_code": [
        "string s , s1 = \" 0123456789 \" ;",
        "for ( int i = 0 ; i < k ; i ++ )",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        5,
        11,
        6
      ],
      "mod_code": [
        "string s , s1 = \" 0123456789 \" ;",
        "while ( n )",
        "int c = 0 ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        5,
        2,
        6
      ],
      "mod_code": [
        "string s , s1 = \" 0123456789 \" ;",
        "while ( n )",
        "cin >> n , k ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        5,
        6
      ],
      "mod_code": [
        "string s , s1 = \" 0123456789 \" ;",
        "while ( n )",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        11,
        2,
        6
      ],
      "mod_code": [
        "string s , s1 = \" 0123456789 \" ;",
        "int c = 0 ;",
        "cin >> n , k ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        11,
        6
      ],
      "mod_code": [
        "string s , s1 = \" 0123456789 \" ;",
        "int c = 0 ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        2,
        6
      ],
      "mod_code": [
        "string s , s1 = \" 0123456789 \" ;",
        "cin >> n , k ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "string s , s1 = \" 0123456789 \" ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        5,
        11,
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ )",
        "while ( n )",
        "int c = 0 ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        5,
        2,
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ )",
        "while ( n )",
        "cin >> n , k ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        5,
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ )",
        "while ( n )",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        11,
        2,
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ )",
        "int c = 0 ;",
        "cin >> n , k ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        11,
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ )",
        "int c = 0 ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        2,
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ )",
        "cin >> n , k ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ )",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        11,
        2,
        6
      ],
      "mod_code": [
        "while ( n )",
        "int c = 0 ;",
        "cin >> n , k ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        11,
        6
      ],
      "mod_code": [
        "while ( n )",
        "int c = 0 ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        2,
        6
      ],
      "mod_code": [
        "while ( n )",
        "cin >> n , k ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "while ( n )",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        2,
        6
      ],
      "mod_code": [
        "int c = 0 ;",
        "cin >> n , k ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "int c = 0 ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "cin >> n , k ;",
        "gets ( s1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}