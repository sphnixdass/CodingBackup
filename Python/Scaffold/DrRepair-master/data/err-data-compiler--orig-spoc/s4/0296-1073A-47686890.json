{
  "meta": {
    "index": 296,
    "hitid": "3E22YV8GG10BKIV59VW0H5KN149NPG",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "1073A",
    "subid": "47686890"
  },
  "lines": [
    {
      "line": 0,
      "text": "inf function max taking two ints a and b and returning an int",
      "code": "int max ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return a if it is greater than b else return b",
      "code": "return a > b ? a : b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "loop while reading n",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if n equals 1",
      "code": "if ( n == 1 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "continue loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "for i = 1 to size of s",
      "code": "for ( int i = 1 ; i < s . size ( ) ; i ++ )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if s [ i ] does not equal s [ i - 1 ]",
      "code": "if ( s [ i ] != s [ i - 1 ] )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "print s [ i - 1 ] then s [ i ]",
      "code": "cout << s [ i - 1 ] << s [ i ] << endl ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "call exit with 0",
      "code": "exit ( 0 ) ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int max ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( n == l )"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "continue continue ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "exit ( 0 , 0 ) ;"
      ],
      "err_line": 16,
      "err_msg": "too many arguments to function ‘void exit(int)’"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "continue continue ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        10,
        4
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "continue continue ;",
        "char n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        10,
        4,
        7
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "continue continue ;",
        "char n ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        10,
        4,
        15
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "continue continue ;",
        "char n ;",
        "cout << s [ i - 1 ] << s [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        10,
        4,
        6
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "continue continue ;",
        "char n ;",
        "while ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        10,
        7
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "continue continue ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        10,
        7,
        15
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "continue continue ;",
        "s >> s ;",
        "cout << s [ i - 1 ] << s [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        10,
        7,
        6
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "continue continue ;",
        "s >> s ;",
        "while ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        10,
        15
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "continue continue ;",
        "cout << s [ i - 1 ] << s [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        10,
        15,
        6
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "continue continue ;",
        "cout << s [ i - 1 ] << s [ i ] ;",
        "while ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        10,
        6
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "continue continue ;",
        "while ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "char n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4,
        7
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "char n ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4,
        7,
        15
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "char n ;",
        "s >> s ;",
        "cout << s [ i - 1 ] << s [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4,
        7,
        6
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "char n ;",
        "s >> s ;",
        "while ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4,
        15
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "char n ;",
        "cout << s [ i - 1 ] << s [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4,
        15,
        6
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "char n ;",
        "cout << s [ i - 1 ] << s [ i ] ;",
        "while ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        4,
        6
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "char n ;",
        "while ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        15
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "s >> s ;",
        "cout << s [ i - 1 ] << s [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        15,
        6
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "s >> s ;",
        "cout << s [ i - 1 ] << s [ i ] ;",
        "while ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        6
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "s >> s ;",
        "while ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "cout << s [ i - 1 ] << s [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        15,
        6
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "cout << s [ i - 1 ] << s [ i ] ;",
        "while ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "int max ( int a , int b ) ;",
        "while ( n -- )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "continue continue ;",
        "char n ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        10,
        4,
        7
      ],
      "mod_code": [
        "continue continue ;",
        "char n ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        4,
        7,
        15
      ],
      "mod_code": [
        "continue continue ;",
        "char n ;",
        "s >> s ;",
        "cout << s [ i - 1 ] << s [ i ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        4,
        7,
        6
      ],
      "mod_code": [
        "continue continue ;",
        "char n ;",
        "s >> s ;",
        "while ( n -- )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        4,
        15
      ],
      "mod_code": [
        "continue continue ;",
        "char n ;",
        "cout << s [ i - 1 ] << s [ i ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        10,
        4,
        15,
        6
      ],
      "mod_code": [
        "continue continue ;",
        "char n ;",
        "cout << s [ i - 1 ] << s [ i ] ;",
        "while ( n -- )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        10,
        4,
        6
      ],
      "mod_code": [
        "continue continue ;",
        "char n ;",
        "while ( n -- )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "continue continue ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        7,
        15
      ],
      "mod_code": [
        "continue continue ;",
        "s >> s ;",
        "cout << s [ i - 1 ] << s [ i ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        7,
        15,
        6
      ],
      "mod_code": [
        "continue continue ;",
        "s >> s ;",
        "cout << s [ i - 1 ] << s [ i ] ;",
        "while ( n -- )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        7,
        6
      ],
      "mod_code": [
        "continue continue ;",
        "s >> s ;",
        "while ( n -- )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "continue continue ;",
        "cout << s [ i - 1 ] << s [ i ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        10,
        15,
        6
      ],
      "mod_code": [
        "continue continue ;",
        "cout << s [ i - 1 ] << s [ i ] ;",
        "while ( n -- )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "continue continue ;",
        "while ( n -- )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "char n ;",
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        7,
        15
      ],
      "mod_code": [
        "char n ;",
        "s >> s ;",
        "cout << s [ i - 1 ] << s [ i ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        7,
        15,
        6
      ],
      "mod_code": [
        "char n ;",
        "s >> s ;",
        "cout << s [ i - 1 ] << s [ i ] ;",
        "while ( n -- )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        7,
        6
      ],
      "mod_code": [
        "char n ;",
        "s >> s ;",
        "while ( n -- )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "cout << s [ i - 1 ] << s [ i ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        15,
        6
      ],
      "mod_code": [
        "s >> s ;",
        "cout << s [ i - 1 ] << s [ i ] ;",
        "while ( n -- )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "s >> s ;",
        "while ( n -- )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}