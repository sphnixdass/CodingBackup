{
  "meta": {
    "index": 1687,
    "hitid": "3P520RYKCH0KMYXVMHZ8XU70I09U51",
    "workerid": "AIWEXPJAU66D9",
    "probid": "992A",
    "subid": "43558355"
  },
  "lines": [
    {
      "line": 0,
      "text": "create a map from integers to booleans with name mp",
      "code": "map < int , bool > mp ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "clear mp",
      "code": "mp . clear ( ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let n , ans and x be ints where ans = 0",
      "code": "int n , ans = 0 , x ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while n ! = 0 , decrement it and continue the loop",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if x is true and mp [ x ] is false",
      "code": "if ( x && ! mp [ x ] )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment ans by one",
      "code": "ans ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "assign the new value = 1 to mp [ x ]",
      "code": "mp [ x ] = 1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "mp . clear mp ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘mp’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int n , ans , x , x ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        7,
        6,
        2
      ],
      "mod_code": [
        "int n , ans , x = 0 ;",
        "if ( x == true && mp [ x ] == false )",
        "cin >> n ;",
        "mp . clear mp ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘mp’"
    },
    {
      "mod_line": [
        3,
        7,
        2
      ],
      "mod_code": [
        "int n , ans , x = 0 ;",
        "if ( x == true && mp [ x ] == false )",
        "mp . clear mp ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘mp’"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        2
      ],
      "mod_code": [
        "int n , ans , x = 0 ;",
        "cin >> n ;",
        "if ( ! x && ! mp [ x ] )",
        "mp . clear mp ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘mp’"
    },
    {
      "mod_line": [
        3,
        6,
        2
      ],
      "mod_code": [
        "int n , ans , x = 0 ;",
        "cin >> n ;",
        "mp . clear mp ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘mp’"
    },
    {
      "mod_line": [
        3,
        7,
        2
      ],
      "mod_code": [
        "int n , ans , x = 0 ;",
        "if ( ! x && ! mp [ x ] )",
        "mp . clear mp ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘mp’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int n , ans , x = 0 ;",
        "mp . clear mp ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘mp’"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "if ( x == true && mp [ x ] == false )",
        "int n , ans , x , x ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        7,
        3,
        6
      ],
      "mod_code": [
        "if ( x == true && mp [ x ] == false )",
        "int n , ans , x , x ;",
        "cin >> n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        7,
        3,
        6,
        2
      ],
      "mod_code": [
        "if ( x == true && mp [ x ] == false )",
        "int n , ans , x , x ;",
        "cin >> n ;",
        "mp . clear mp ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘mp’"
    },
    {
      "mod_line": [
        7,
        3,
        2
      ],
      "mod_code": [
        "if ( x == true && mp [ x ] == false )",
        "int n , ans , x , x ;",
        "mp . clear mp ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘mp’"
    },
    {
      "mod_line": [
        7,
        6,
        2
      ],
      "mod_code": [
        "if ( x == true && mp [ x ] == false )",
        "cin >> n ;",
        "mp . clear mp ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘mp’"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "if ( x == true && mp [ x ] == false )",
        "mp . clear mp ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘mp’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "int n , ans , x , x ;",
        "cin >> n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        6,
        7
      ],
      "mod_code": [
        "int n , ans , x , x ;",
        "cin >> n ;",
        "if ( ! x && ! mp [ x ] )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        2
      ],
      "mod_code": [
        "int n , ans , x , x ;",
        "cin >> n ;",
        "if ( ! x && ! mp [ x ] )",
        "mp . clear mp ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘mp’"
    },
    {
      "mod_line": [
        3,
        6,
        2
      ],
      "mod_code": [
        "int n , ans , x , x ;",
        "cin >> n ;",
        "mp . clear mp ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘mp’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "int n , ans , x , x ;",
        "if ( ! x && ! mp [ x ] )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        7,
        2
      ],
      "mod_code": [
        "int n , ans , x , x ;",
        "if ( ! x && ! mp [ x ] )",
        "mp . clear mp ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘mp’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int n , ans , x , x ;",
        "mp . clear mp ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘mp’"
    },
    {
      "mod_line": [
        6,
        7,
        2
      ],
      "mod_code": [
        "cin >> n ;",
        "if ( ! x && ! mp [ x ] )",
        "mp . clear mp ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘mp’"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "cin >> n ;",
        "mp . clear mp ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘mp’"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "if ( ! x && ! mp [ x ] )",
        "mp . clear mp ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘mp’"
    }
  ]
}