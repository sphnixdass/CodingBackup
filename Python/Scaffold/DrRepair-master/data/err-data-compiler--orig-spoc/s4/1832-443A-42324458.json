{
  "meta": {
    "index": 1832,
    "hitid": "3D42WVSDH8PT54AP2U96MR4Q2VWYF9",
    "workerid": "AIWEXPJAU66D9",
    "probid": "443A",
    "subid": "42324458"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let s be string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read line and store it into s",
      "code": "getline ( cin , s ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let st be a unique set of characters",
      "code": "set < char > st ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for long long i = 0 to length of s exclusive",
      "code": "for ( long long i = 0 ; i < s . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if ( s [ i ] ! = ' { ' & & s [ i ] ! = ' } ' & & s [ i ] ! = ' ' & & s [ i ] ! = ' , ' ) , insert s [ i ] into set st",
      "code": "if ( s [ i ] != ' { ' && s [ i ] != ' } ' && s [ i ] != ' ' && s [ i ] != ' , ' ) st . insert ( s [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print length of st and a new line",
      "code": "cout << st . size ( ) << endl ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( s [ i ] != ' & ' && s [ i ] != ' } & s [ i ] != ' } & s [ i ] != ' , ' ) st . insert ( s [ i ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "set < unique > st ;"
      ],
      "err_line": 3,
      "err_msg": "type/value mismatch at argument 1 in template parameter list for ‘template<class _Key, class _Compare, class _Alloc> class std::set’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( s [ i ] != ' & ' && s [ i ] != ' } & s [ i ] != ' } & s [ i ] != ' , ' ) { st . insert ( s [ i ] ) ; }"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cout << st . length ( ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "‘class std::set<char>’ has no member named ‘length’"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "if ( s [ i ] != ' & ' && s [ i ] != ' } & s [ i ] != ' } & s [ i ] != ' , ' ) st . insert ( s [ i ] ) ;",
        "cout << st . length ( ) << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        7,
        3
      ],
      "mod_code": [
        "if ( s [ i ] != ' & ' && s [ i ] != ' } & s [ i ] != ' } & s [ i ] != ' , ' ) st . insert ( s [ i ] ) ;",
        "cout << st . length ( ) << endl ;",
        "set < unique > st ;"
      ],
      "err_line": 3,
      "err_msg": "type/value mismatch at argument 1 in template parameter list for ‘template<class _Key, class _Compare, class _Alloc> class std::set’"
    },
    {
      "mod_line": [
        5,
        7,
        3,
        2
      ],
      "mod_code": [
        "if ( s [ i ] != ' & ' && s [ i ] != ' } & s [ i ] != ' } & s [ i ] != ' , ' ) st . insert ( s [ i ] ) ;",
        "cout << st . length ( ) << endl ;",
        "set < unique > st ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        7,
        2
      ],
      "mod_code": [
        "if ( s [ i ] != ' & ' && s [ i ] != ' } & s [ i ] != ' } & s [ i ] != ' , ' ) st . insert ( s [ i ] ) ;",
        "cout << st . length ( ) << endl ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "if ( s [ i ] != ' & ' && s [ i ] != ' } & s [ i ] != ' } & s [ i ] != ' , ' ) st . insert ( s [ i ] ) ;",
        "set < unique > st ;"
      ],
      "err_line": 3,
      "err_msg": "type/value mismatch at argument 1 in template parameter list for ‘template<class _Key, class _Compare, class _Alloc> class std::set’"
    },
    {
      "mod_line": [
        5,
        3,
        2
      ],
      "mod_code": [
        "if ( s [ i ] != ' & ' && s [ i ] != ' } & s [ i ] != ' } & s [ i ] != ' , ' ) st . insert ( s [ i ] ) ;",
        "set < unique > st ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "if ( s [ i ] != ' & ' && s [ i ] != ' } & s [ i ] != ' } & s [ i ] != ' , ' ) st . insert ( s [ i ] ) ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "if ( s [ i ] != ' & ' && s [ i ] != ' } & s [ i ] != ' } & s [ i ] != ' , ' ) { st . insert ( s [ i ] ) ; }",
        "cout << st . length ( ) << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        7,
        3
      ],
      "mod_code": [
        "if ( s [ i ] != ' & ' && s [ i ] != ' } & s [ i ] != ' } & s [ i ] != ' , ' ) { st . insert ( s [ i ] ) ; }",
        "cout << st . length ( ) << endl ;",
        "set < unique > st ;"
      ],
      "err_line": 3,
      "err_msg": "type/value mismatch at argument 1 in template parameter list for ‘template<class _Key, class _Compare, class _Alloc> class std::set’"
    },
    {
      "mod_line": [
        5,
        7,
        3,
        2
      ],
      "mod_code": [
        "if ( s [ i ] != ' & ' && s [ i ] != ' } & s [ i ] != ' } & s [ i ] != ' , ' ) { st . insert ( s [ i ] ) ; }",
        "cout << st . length ( ) << endl ;",
        "set < unique > st ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        7,
        2
      ],
      "mod_code": [
        "if ( s [ i ] != ' & ' && s [ i ] != ' } & s [ i ] != ' } & s [ i ] != ' , ' ) { st . insert ( s [ i ] ) ; }",
        "cout << st . length ( ) << endl ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "if ( s [ i ] != ' & ' && s [ i ] != ' } & s [ i ] != ' } & s [ i ] != ' , ' ) { st . insert ( s [ i ] ) ; }",
        "set < unique > st ;"
      ],
      "err_line": 3,
      "err_msg": "type/value mismatch at argument 1 in template parameter list for ‘template<class _Key, class _Compare, class _Alloc> class std::set’"
    },
    {
      "mod_line": [
        5,
        3,
        2
      ],
      "mod_code": [
        "if ( s [ i ] != ' & ' && s [ i ] != ' } & s [ i ] != ' } & s [ i ] != ' , ' ) { st . insert ( s [ i ] ) ; }",
        "set < unique > st ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "if ( s [ i ] != ' & ' && s [ i ] != ' } & s [ i ] != ' } & s [ i ] != ' , ' ) { st . insert ( s [ i ] ) ; }",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "cout << st . length ( ) << endl ;",
        "set < unique > st ;"
      ],
      "err_line": 3,
      "err_msg": "type/value mismatch at argument 1 in template parameter list for ‘template<class _Key, class _Compare, class _Alloc> class std::set’"
    },
    {
      "mod_line": [
        7,
        3,
        2
      ],
      "mod_code": [
        "cout << st . length ( ) << endl ;",
        "set < unique > st ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "cout << st . length ( ) << endl ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "set < unique > st ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    }
  ]
}