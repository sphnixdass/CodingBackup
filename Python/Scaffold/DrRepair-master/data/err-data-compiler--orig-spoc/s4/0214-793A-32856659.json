{
  "meta": {
    "index": 214,
    "hitid": "3NBFJK3IOHCNPQ2I7R6Q2L60P0YGOG",
    "workerid": "AIWEXPJAU66D9",
    "probid": "793A",
    "subid": "32856659"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare long integer array a with size 100000",
      "code": "long int a [ 100000 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare long long integers n and k",
      "code": "long long int n , k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create long long integer i",
      "code": "long long int i ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive , read a [ i ]",
      "code": "for ( i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 6,
      "text": "sort array a",
      "code": "sort ( a , a + n ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "create integer yu = a [ 0 ] % k",
      "code": "int yu = a [ 0 ] % k ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "declare long long integer time = 0",
      "code": "long long int time = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 1 to n exclusive",
      "code": "for ( i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if a [ i ] % k ! = yu",
      "code": "if ( a [ i ] % k != yu )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print \" - 1 \" and a new line",
      "code": "cout << \" -1 \" << endl ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "increase time by ( a [ i ] - a [ 0 ] ) / k",
      "code": "time += ( a [ i ] - a [ 0 ] ) / k ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print time",
      "code": "cout << time << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "time += a [ i ] - a [ 0 ] ) / k ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        3,
        10,
        14
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "n >> n >> k ;",
        "if ( a [ i ] % k != 0 )",
        "time += a [ i ] - a [ 0 ] ) / k ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        3,
        16,
        14
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "n >> n >> k ;",
        "cout << time ;",
        "time += a [ i ] - a [ 0 ] ) / k ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        3,
        14
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "n >> n >> k ;",
        "time += a [ i ] - a [ 0 ] ) / k ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        3,
        14,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "n >> n >> k ;",
        "time += a [ i ] - a [ 0 ] ) / k ;",
        "sort ( a , a + 4 ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        10,
        16,
        14
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "if ( a [ i ] % k != 0 )",
        "cout << time ;",
        "time += a [ i ] - a [ 0 ] ) / k ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        10,
        14
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "if ( a [ i ] % k != 0 )",
        "time += a [ i ] - a [ 0 ] ) / k ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        10,
        14,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "if ( a [ i ] % k != 0 )",
        "time += a [ i ] - a [ 0 ] ) / k ;",
        "sort ( a , a + 4 ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        16,
        14
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "cout << time ;",
        "time += a [ i ] - a [ 0 ] ) / k ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        16,
        14,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "cout << time ;",
        "time += a [ i ] - a [ 0 ] ) / k ;",
        "sort ( a , a + 4 ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "time += a [ i ] - a [ 0 ] ) / k ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        14,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "time += a [ i ] - a [ 0 ] ) / k ;",
        "sort ( a , a + 4 ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        10,
        16,
        14
      ],
      "mod_code": [
        "n >> n >> k ;",
        "if ( a [ i ] % k != 0 )",
        "cout << time ;",
        "time += a [ i ] - a [ 0 ] ) / k ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        10,
        14
      ],
      "mod_code": [
        "n >> n >> k ;",
        "if ( a [ i ] % k != 0 )",
        "time += a [ i ] - a [ 0 ] ) / k ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        10,
        14,
        6
      ],
      "mod_code": [
        "n >> n >> k ;",
        "if ( a [ i ] % k != 0 )",
        "time += a [ i ] - a [ 0 ] ) / k ;",
        "sort ( a , a + 4 ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        16,
        14
      ],
      "mod_code": [
        "n >> n >> k ;",
        "cout << time ;",
        "time += a [ i ] - a [ 0 ] ) / k ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        16,
        14,
        6
      ],
      "mod_code": [
        "n >> n >> k ;",
        "cout << time ;",
        "time += a [ i ] - a [ 0 ] ) / k ;",
        "sort ( a , a + 4 ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "n >> n >> k ;",
        "time += a [ i ] - a [ 0 ] ) / k ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        14,
        6
      ],
      "mod_code": [
        "n >> n >> k ;",
        "time += a [ i ] - a [ 0 ] ) / k ;",
        "sort ( a , a + 4 ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        16,
        14
      ],
      "mod_code": [
        "if ( a [ i ] % k != 0 )",
        "cout << time ;",
        "time += a [ i ] - a [ 0 ] ) / k ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        16,
        14,
        6
      ],
      "mod_code": [
        "if ( a [ i ] % k != 0 )",
        "cout << time ;",
        "time += a [ i ] - a [ 0 ] ) / k ;",
        "sort ( a , a + 4 ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        14
      ],
      "mod_code": [
        "if ( a [ i ] % k != 0 )",
        "time += a [ i ] - a [ 0 ] ) / k ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        10,
        14,
        6
      ],
      "mod_code": [
        "if ( a [ i ] % k != 0 )",
        "time += a [ i ] - a [ 0 ] ) / k ;",
        "sort ( a , a + 4 ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        14
      ],
      "mod_code": [
        "cout << time ;",
        "time += a [ i ] - a [ 0 ] ) / k ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        16,
        14,
        6
      ],
      "mod_code": [
        "cout << time ;",
        "time += a [ i ] - a [ 0 ] ) / k ;",
        "sort ( a , a + 4 ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        14,
        6
      ],
      "mod_code": [
        "time += a [ i ] - a [ 0 ] ) / k ;",
        "sort ( a , a + 4 ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    }
  ]
}