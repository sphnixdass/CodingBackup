{
  "meta": {
    "index": 1027,
    "hitid": "3WGCNLZJKF2ZHELQZZ77K4QVKK71DE",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "495A",
    "subid": "44837379"
  },
  "lines": [
    {
      "line": 0,
      "text": "mod = const long long with mod = 1000000007",
      "code": "const long long mod = 1000000007 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "in the functin powmod that takes long long a , b and returns long long",
      "code": "long long powmod ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "res = long long with res = 1",
      "code": "long long res = 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "a = a modulo mod",
      "code": "a %= mod ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "assert on b > = 0",
      "code": "assert ( b >= 0 ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for b , b = right shift b 1 place",
      "code": "for ( ; b ; b >>= 1 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if ( b bitwise and 1 ) , res = res * a modulo mod",
      "code": "if ( b & 1 ) res = res * a % mod ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "a = a * a modulo mod",
      "code": "a = a * a % mod ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "return res",
      "code": "return res ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 11,
      "text": "in the function gcd that takes long long a , b and returns long long",
      "code": "long long gcd ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 12,
      "text": "return if b , gcd ( b , a modulo b ) else a",
      "code": "return b ? gcd ( b , a % b ) : a ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 15,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "_x = integer with _x = n / 10",
      "code": "int _x = n / 10 ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "_y = integer with _y = n modulo 10",
      "code": "int _y = n % 10 ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "ans1 = integer with ans1 = 0",
      "code": "int ans1 = 0 ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "ans2 = intege with ans2 = 0",
      "code": "int ans2 = 0 ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if ( _x is 1 )",
      "code": "if ( _x == 1 )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "ans1 = 7",
      "code": "ans1 = 7 ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "else if ( _x is 2 )",
      "code": "else if ( _x == 2 )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "ans1 = 2",
      "code": "ans1 = 2 ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "else if ( _x is 3 )",
      "code": "else if ( _x == 3 )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "ans1 = 3",
      "code": "ans1 = 3 ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "else if ( _x is 4 )",
      "code": "else if ( _x == 4 )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "ans1 = 3",
      "code": "ans1 = 3 ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "else if ( _x is 5 )",
      "code": "else if ( _x == 5 )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "ans1 = 4",
      "code": "ans1 = 4 ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "else if ( _x is 6 )",
      "code": "else if ( _x == 6 )",
      "indent": 1
    },
    {
      "line": 32,
      "text": "ans1 = 2",
      "code": "ans1 = 2 ;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "else if ( _x is 7 )",
      "code": "else if ( _x == 7 )",
      "indent": 1
    },
    {
      "line": 34,
      "text": "ans1 = 5",
      "code": "ans1 = 5 ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "else if ( _x is 8 )",
      "code": "else if ( _x == 8 )",
      "indent": 1
    },
    {
      "line": 36,
      "text": "ans1 = 1",
      "code": "ans1 = 1 ;",
      "indent": 2
    },
    {
      "line": 37,
      "text": "else if ( _x is 9 )",
      "code": "else if ( _x == 9 )",
      "indent": 1
    },
    {
      "line": 38,
      "text": "ans1 = 2",
      "code": "ans1 = 2 ;",
      "indent": 2
    },
    {
      "line": 39,
      "text": "else if ( _x is 0 )",
      "code": "else if ( _x == 0 )",
      "indent": 1
    },
    {
      "line": 40,
      "text": "ans1 = 2",
      "code": "ans1 = 2 ;",
      "indent": 2
    },
    {
      "line": 41,
      "text": "if ( _y is 1 )",
      "code": "if ( _y == 1 )",
      "indent": 1
    },
    {
      "line": 42,
      "text": "ans2 = 7",
      "code": "ans2 = 7 ;",
      "indent": 2
    },
    {
      "line": 43,
      "text": "else if ( _y is 2 )",
      "code": "else if ( _y == 2 )",
      "indent": 1
    },
    {
      "line": 44,
      "text": "ans2 = 2",
      "code": "ans2 = 2 ;",
      "indent": 2
    },
    {
      "line": 45,
      "text": "else if ( _y is 3 )",
      "code": "else if ( _y == 3 )",
      "indent": 1
    },
    {
      "line": 46,
      "text": "ans2 = 3",
      "code": "ans2 = 3 ;",
      "indent": 2
    },
    {
      "line": 47,
      "text": "else if ( _y is 4 )",
      "code": "else if ( _y == 4 )",
      "indent": 1
    },
    {
      "line": 48,
      "text": "ans2 = 3",
      "code": "ans2 = 3 ;",
      "indent": 2
    },
    {
      "line": 49,
      "text": "else if ( _y is 5 )",
      "code": "else if ( _y == 5 )",
      "indent": 1
    },
    {
      "line": 50,
      "text": "ans2 = 4",
      "code": "ans2 = 4 ;",
      "indent": 2
    },
    {
      "line": 51,
      "text": "else if ( _y is 6 )",
      "code": "else if ( _y == 6 )",
      "indent": 1
    },
    {
      "line": 52,
      "text": "ans2 = 2",
      "code": "ans2 = 2 ;",
      "indent": 2
    },
    {
      "line": 53,
      "text": "else if ( _y is 7 )",
      "code": "else if ( _y == 7 )",
      "indent": 1
    },
    {
      "line": 54,
      "text": "ans2 = 5",
      "code": "ans2 = 5 ;",
      "indent": 2
    },
    {
      "line": 55,
      "text": "else if ( _y is 8 )",
      "code": "else if ( _y == 8 )",
      "indent": 1
    },
    {
      "line": 56,
      "text": "ans2 = 1",
      "code": "ans2 = 1 ;",
      "indent": 2
    },
    {
      "line": 57,
      "text": "else if ( _y is 9 )",
      "code": "else if ( _y == 9 )",
      "indent": 1
    },
    {
      "line": 58,
      "text": "ans2 = 2",
      "code": "ans2 = 2 ;",
      "indent": 2
    },
    {
      "line": 59,
      "text": "else if ( _y is 0 )",
      "code": "else if ( _y == 0 )",
      "indent": 1
    },
    {
      "line": 60,
      "text": "ans2 = 2",
      "code": "ans2 = 2 ;",
      "indent": 2
    },
    {
      "line": 61,
      "text": "print ans1 * ans2",
      "code": "cout << ans1 * ans2 << endl ;",
      "indent": 1
    },
    {
      "line": 62,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 63,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long powmod ( long long a , long long b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "assert ( b ) >= 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘void’ and ‘int’ to binary ‘operator>=’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( int b , b ; b <= b ; b ++ )"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "return b == gcd ( b , a % b ) : a ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 21,
      "err_msg": "‘_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "string ans1 = 4 ;"
      ],
      "err_line": 30,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "string ans1 = 5 ;"
      ],
      "err_line": 34,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "long long gcd ( long long a , long long b ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        11,
        60
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "long long gcd ( long long a , long long b ) ;",
        "int ans2 = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        11,
        60,
        56
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "long long gcd ( long long a , long long b ) ;",
        "int ans2 = 2 ;",
        "int ans2 = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        11,
        60,
        12
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "long long gcd ( long long a , long long b ) ;",
        "int ans2 = 2 ;",
        "return b == gcd ( b , a % b ) : a ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        11,
        60,
        40
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "long long gcd ( long long a , long long b ) ;",
        "int ans2 = 2 ;",
        "int ans1 = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        11,
        56
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "long long gcd ( long long a , long long b ) ;",
        "int ans2 = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        11,
        56,
        12
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "long long gcd ( long long a , long long b ) ;",
        "int ans2 = 1 ;",
        "return b == gcd ( b , a % b ) : a ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        11,
        56,
        40
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "long long gcd ( long long a , long long b ) ;",
        "int ans2 = 1 ;",
        "int ans1 = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        11,
        12
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "long long gcd ( long long a , long long b ) ;",
        "return b == gcd ( b , a % b ) : a ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        11,
        12,
        40
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "long long gcd ( long long a , long long b ) ;",
        "return b == gcd ( b , a % b ) : a ;",
        "int ans1 = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        11,
        40
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "long long gcd ( long long a , long long b ) ;",
        "int ans1 = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        60
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "int ans2 = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        60,
        56
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "int ans2 = 2 ;",
        "int ans2 = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        60,
        56,
        12
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "int ans2 = 2 ;",
        "int ans2 = 1 ;",
        "return b == gcd ( b , a % b ) : a ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        60,
        56,
        40
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "int ans2 = 2 ;",
        "int ans2 = 1 ;",
        "int ans1 = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        60,
        12
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "int ans2 = 2 ;",
        "return b == gcd ( b , a % b ) : a ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        60,
        12,
        40
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "int ans2 = 2 ;",
        "return b == gcd ( b , a % b ) : a ;",
        "int ans1 = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        60,
        40
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "int ans2 = 2 ;",
        "int ans1 = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        56
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "int ans2 = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        56,
        12
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "int ans2 = 1 ;",
        "return b == gcd ( b , a % b ) : a ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        56,
        12,
        40
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "int ans2 = 1 ;",
        "return b == gcd ( b , a % b ) : a ;",
        "int ans1 = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        56,
        40
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "int ans2 = 1 ;",
        "int ans1 = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "return b == gcd ( b , a % b ) : a ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        12,
        40
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "return b == gcd ( b , a % b ) : a ;",
        "int ans1 = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        5,
        40
      ],
      "mod_code": [
        "for ( int b , b ; b <= 1 ; b ++ )",
        "int ans1 = 2 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int b’"
    },
    {
      "mod_line": [
        11,
        60
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "int ans2 = 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        60,
        56
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "int ans2 = 2 ;",
        "int ans2 = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        60,
        56,
        12
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "int ans2 = 2 ;",
        "int ans2 = 1 ;",
        "return b == gcd ( b , a % b ) : a ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        60,
        56,
        40
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "int ans2 = 2 ;",
        "int ans2 = 1 ;",
        "int ans1 = 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        60,
        12
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "int ans2 = 2 ;",
        "return b == gcd ( b , a % b ) : a ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        60,
        12,
        40
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "int ans2 = 2 ;",
        "return b == gcd ( b , a % b ) : a ;",
        "int ans1 = 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        60,
        40
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "int ans2 = 2 ;",
        "int ans1 = 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        56
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "int ans2 = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        56,
        12
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "int ans2 = 1 ;",
        "return b == gcd ( b , a % b ) : a ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        56,
        12,
        40
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "int ans2 = 1 ;",
        "return b == gcd ( b , a % b ) : a ;",
        "int ans1 = 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        56,
        40
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "int ans2 = 1 ;",
        "int ans1 = 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "return b == gcd ( b , a % b ) : a ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        12,
        40
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "return b == gcd ( b , a % b ) : a ;",
        "int ans1 = 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        40
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "int ans1 = 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        60,
        56,
        12
      ],
      "mod_code": [
        "int ans2 = 2 ;",
        "int ans2 = 1 ;",
        "return b == gcd ( b , a % b ) : a ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        60,
        56,
        12,
        40
      ],
      "mod_code": [
        "int ans2 = 2 ;",
        "int ans2 = 1 ;",
        "return b == gcd ( b , a % b ) : a ;",
        "int ans1 = 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        60,
        12
      ],
      "mod_code": [
        "int ans2 = 2 ;",
        "return b == gcd ( b , a % b ) : a ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        60,
        12,
        40
      ],
      "mod_code": [
        "int ans2 = 2 ;",
        "return b == gcd ( b , a % b ) : a ;",
        "int ans1 = 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        56,
        12
      ],
      "mod_code": [
        "int ans2 = 1 ;",
        "return b == gcd ( b , a % b ) : a ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        56,
        12,
        40
      ],
      "mod_code": [
        "int ans2 = 1 ;",
        "return b == gcd ( b , a % b ) : a ;",
        "int ans1 = 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        12,
        40
      ],
      "mod_code": [
        "return b == gcd ( b , a % b ) : a ;",
        "int ans1 = 2 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘:’ token"
    }
  ]
}