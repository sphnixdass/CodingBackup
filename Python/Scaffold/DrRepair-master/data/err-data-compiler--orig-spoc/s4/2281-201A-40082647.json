{
  "meta": {
    "index": 2281,
    "hitid": "3GKAWYFRAPN2Y64SK1IXL08TMDEPDW",
    "workerid": "A1APYLD4DUK33J",
    "probid": "201A",
    "subid": "40082647"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integer start with size 100000",
      "code": "int start [ 100000 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "set start [ 1 ] to 1",
      "code": "start [ 1 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 1 to 100 inclusive , increment i by 2",
      "code": "for ( int i = 1 ; i <= 100 ; i += 2 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for j = i * i / 2 + 2 to ( i + 2 ) * ( i + 2 ) / 2 + 1 inclusive , set start [ j ] to i + 2",
      "code": "for ( int j = i * i / 2 + 2 ; j <= ( i + 2 ) * ( i + 2 ) / 2 + 1 ; j ++ ) start [ j ] = i + 2 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if n is 2",
      "code": "if ( n == 2 )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print 3 print newline",
      "code": "cout << 3 << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else if n is 3",
      "code": "else if ( n == 3 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print 5 print newline",
      "code": "cout << 5 << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print start [ n ] print newline",
      "code": "cout << start [ n ] << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int start ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "start [ 1 ] ] = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 100 ; i += 2 )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "for ( int j = i * i / 2 + 2 ; j <= ( i + 2 ) * ( i + 2 ) / ( i + 2 ) / 2 + 1 ; j ++ ) { start [ j ] = i + 2 ; }",
        "for ( i = 1 ; i <= 100 ; i += 2 )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3,
        0
      ],
      "mod_code": [
        "for ( int j = i * i / 2 + 2 ; j <= ( i + 2 ) * ( i + 2 ) / ( i + 2 ) / 2 + 1 ; j ++ ) { start [ j ] = i + 2 ; }",
        "for ( i = 1 ; i <= 100 ; i += 2 )",
        "int start ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        3,
        0,
        2
      ],
      "mod_code": [
        "for ( int j = i * i / 2 + 2 ; j <= ( i + 2 ) * ( i + 2 ) / ( i + 2 ) / 2 + 1 ; j ++ ) { start [ j ] = i + 2 ; }",
        "for ( i = 1 ; i <= 100 ; i += 2 )",
        "int start ;",
        "start [ 1 ] ] = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        3,
        0,
        12
      ],
      "mod_code": [
        "for ( int j = i * i / 2 + 2 ; j <= ( i + 2 ) * ( i + 2 ) / ( i + 2 ) / 2 + 1 ; j ++ ) { start [ j ] = i + 2 ; }",
        "for ( i = 1 ; i <= 100 ; i += 2 )",
        "int start ;",
        "cout << start [ n ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        3,
        2
      ],
      "mod_code": [
        "for ( int j = i * i / 2 + 2 ; j <= ( i + 2 ) * ( i + 2 ) / ( i + 2 ) / 2 + 1 ; j ++ ) { start [ j ] = i + 2 ; }",
        "for ( i = 1 ; i <= 100 ; i += 2 )",
        "start [ 1 ] ] = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        3,
        2,
        12
      ],
      "mod_code": [
        "for ( int j = i * i / 2 + 2 ; j <= ( i + 2 ) * ( i + 2 ) / ( i + 2 ) / 2 + 1 ; j ++ ) { start [ j ] = i + 2 ; }",
        "for ( i = 1 ; i <= 100 ; i += 2 )",
        "start [ 1 ] ] = 1 ;",
        "cout << start [ n ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        3,
        12
      ],
      "mod_code": [
        "for ( int j = i * i / 2 + 2 ; j <= ( i + 2 ) * ( i + 2 ) / ( i + 2 ) / 2 + 1 ; j ++ ) { start [ j ] = i + 2 ; }",
        "for ( i = 1 ; i <= 100 ; i += 2 )",
        "cout << start [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        0
      ],
      "mod_code": [
        "for ( int j = i * i / 2 + 2 ; j <= ( i + 2 ) * ( i + 2 ) / ( i + 2 ) / 2 + 1 ; j ++ ) { start [ j ] = i + 2 ; }",
        "int start ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        0,
        2
      ],
      "mod_code": [
        "for ( int j = i * i / 2 + 2 ; j <= ( i + 2 ) * ( i + 2 ) / ( i + 2 ) / 2 + 1 ; j ++ ) { start [ j ] = i + 2 ; }",
        "int start ;",
        "start [ 1 ] ] = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        0,
        2,
        12
      ],
      "mod_code": [
        "for ( int j = i * i / 2 + 2 ; j <= ( i + 2 ) * ( i + 2 ) / ( i + 2 ) / 2 + 1 ; j ++ ) { start [ j ] = i + 2 ; }",
        "int start ;",
        "start [ 1 ] ] = 1 ;",
        "cout << start [ n ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        0,
        12
      ],
      "mod_code": [
        "for ( int j = i * i / 2 + 2 ; j <= ( i + 2 ) * ( i + 2 ) / ( i + 2 ) / 2 + 1 ; j ++ ) { start [ j ] = i + 2 ; }",
        "int start ;",
        "cout << start [ n ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "for ( int j = i * i / 2 + 2 ; j <= ( i + 2 ) * ( i + 2 ) / ( i + 2 ) / 2 + 1 ; j ++ ) { start [ j ] = i + 2 ; }",
        "start [ 1 ] ] = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        2,
        12
      ],
      "mod_code": [
        "for ( int j = i * i / 2 + 2 ; j <= ( i + 2 ) * ( i + 2 ) / ( i + 2 ) / 2 + 1 ; j ++ ) { start [ j ] = i + 2 ; }",
        "start [ 1 ] ] = 1 ;",
        "cout << start [ n ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        0
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 100 ; i += 2 )",
        "int start ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        0,
        2
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 100 ; i += 2 )",
        "int start ;",
        "start [ 1 ] ] = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        0,
        2,
        12
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 100 ; i += 2 )",
        "int start ;",
        "start [ 1 ] ] = 1 ;",
        "cout << start [ n ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        0,
        12
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 100 ; i += 2 )",
        "int start ;",
        "cout << start [ n ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 100 ; i += 2 )",
        "start [ 1 ] ] = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        2,
        12
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 100 ; i += 2 )",
        "start [ 1 ] ] = 1 ;",
        "cout << start [ n ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 100 ; i += 2 )",
        "cout << start [ n ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "int start ;",
        "start [ 1 ] ] = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        2,
        12
      ],
      "mod_code": [
        "int start ;",
        "start [ 1 ] ] = 1 ;",
        "cout << start [ n ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "int start ;",
        "cout << start [ n ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "start [ 1 ] ] = 1 ;",
        "cout << start [ n ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘]’ token"
    }
  ]
}