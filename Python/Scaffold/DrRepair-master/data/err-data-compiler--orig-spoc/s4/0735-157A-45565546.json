{
  "meta": {
    "index": 735,
    "hitid": "3X7837UUADS7RMMFF15ZIYCPXFIJ66",
    "workerid": "AIWEXPJAU66D9",
    "probid": "157A",
    "subid": "45565546"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer variable MAX_N = 1e + 5",
      "code": "const int MAX_N = 1e+5 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "void function solve",
      "code": "void solve ( )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare new long long n",
      "code": "long long n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read from the input to n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "a is a new 2d array of long longs with size n by n",
      "code": "long long a [ n ] [ n ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create an arrays of long longs row and col with n elements",
      "code": "long long row [ n ] , col [ n ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i from 0 to n exclusive incrementing i",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "assign 0 to row [ i ]",
      "code": "row [ i ] = 0 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set col [ i ] to 0",
      "code": "col [ i ] = 0 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "in a for loop , change i from 0 to n exclusive incrementing i",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for j from 0 to n exclusive incrementing j",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "read input to a [ i ] [ j ]",
      "code": "cin >> a [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "add a [ i ] [ j ] to row [ i ]",
      "code": "row [ i ] += a [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "change col [ j ] to col [ j ] + a [ i ] [ j ]",
      "code": "col [ j ] += a [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "create new long long variable answer with value 0",
      "code": "long long answer = 0 ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for integer i = 0 to n exclusive incrementing i",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if col [ j ] is greater than row [ i ] , increment answer by one",
      "code": "if ( col [ j ] > row [ i ] ) answer ++ ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print answer",
      "code": "cout << answer << endl ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 26,
      "text": "t is a new integer variable",
      "code": "int t ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "assign 1 to t",
      "code": "t = 1 ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "call solve ( ) in a loop , decrementing t , while t ! = 0",
      "code": "while ( t -- ) solve ( ) ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const int MAX_N = += 5 ;"
      ],
      "err_line": 0,
      "err_msg": "expected primary-expression before ‘+=’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "void solve ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "a >> a [ i ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘long long int [n][n]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "row [ i ] = row + a [ i ] [ j ] ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘long long int*’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "int t = 1 ;"
      ],
      "err_line": 27,
      "err_msg": "redeclaration of ‘int t’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "void solve ( ) ;",
        "col [ i ] = ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        23
      ],
      "mod_code": [
        "void solve ( ) ;",
        "col [ i ] = ' 0 ' ;",
        "cout << answer ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        23,
        10
      ],
      "mod_code": [
        "void solve ( ) ;",
        "col [ i ] = ' 0 ' ;",
        "cout << answer ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        23,
        12
      ],
      "mod_code": [
        "void solve ( ) ;",
        "col [ i ] = ' 0 ' ;",
        "cout << answer ;",
        "a >> a [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        23,
        14
      ],
      "mod_code": [
        "void solve ( ) ;",
        "col [ i ] = ' 0 ' ;",
        "cout << answer ;",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        10
      ],
      "mod_code": [
        "void solve ( ) ;",
        "col [ i ] = ' 0 ' ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        10,
        12
      ],
      "mod_code": [
        "void solve ( ) ;",
        "col [ i ] = ' 0 ' ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "a >> a [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        10,
        14
      ],
      "mod_code": [
        "void solve ( ) ;",
        "col [ i ] = ' 0 ' ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        12
      ],
      "mod_code": [
        "void solve ( ) ;",
        "col [ i ] = ' 0 ' ;",
        "a >> a [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        12,
        14
      ],
      "mod_code": [
        "void solve ( ) ;",
        "col [ i ] = ' 0 ' ;",
        "a >> a [ i ] [ j ] ;",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        14
      ],
      "mod_code": [
        "void solve ( ) ;",
        "col [ i ] = ' 0 ' ;",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23
      ],
      "mod_code": [
        "void solve ( ) ;",
        "cout << answer ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23,
        10
      ],
      "mod_code": [
        "void solve ( ) ;",
        "cout << answer ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23,
        10,
        12
      ],
      "mod_code": [
        "void solve ( ) ;",
        "cout << answer ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "a >> a [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23,
        10,
        14
      ],
      "mod_code": [
        "void solve ( ) ;",
        "cout << answer ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23,
        12
      ],
      "mod_code": [
        "void solve ( ) ;",
        "cout << answer ;",
        "a >> a [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23,
        12,
        14
      ],
      "mod_code": [
        "void solve ( ) ;",
        "cout << answer ;",
        "a >> a [ i ] [ j ] ;",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        23,
        14
      ],
      "mod_code": [
        "void solve ( ) ;",
        "cout << answer ;",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "void solve ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        12
      ],
      "mod_code": [
        "void solve ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "a >> a [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        12,
        14
      ],
      "mod_code": [
        "void solve ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "a >> a [ i ] [ j ] ;",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        14
      ],
      "mod_code": [
        "void solve ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "void solve ( ) ;",
        "a >> a [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        12,
        14
      ],
      "mod_code": [
        "void solve ( ) ;",
        "a >> a [ i ] [ j ] ;",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "void solve ( ) ;",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        23,
        10
      ],
      "mod_code": [
        "col [ i ] = ' 0 ' ;",
        "cout << answer ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        23,
        10,
        12
      ],
      "mod_code": [
        "col [ i ] = ' 0 ' ;",
        "cout << answer ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "a >> a [ i ] [ j ] ;"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        23,
        10,
        14
      ],
      "mod_code": [
        "col [ i ] = ' 0 ' ;",
        "cout << answer ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        23,
        12
      ],
      "mod_code": [
        "col [ i ] = ' 0 ' ;",
        "cout << answer ;",
        "a >> a [ i ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘long long int [n][n]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        8,
        23,
        12,
        14
      ],
      "mod_code": [
        "col [ i ] = ' 0 ' ;",
        "cout << answer ;",
        "a >> a [ i ] [ j ] ;",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘long long int [n][n]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        8,
        23,
        14
      ],
      "mod_code": [
        "col [ i ] = ' 0 ' ;",
        "cout << answer ;",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "col [ i ] = ' 0 ' ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        10,
        12
      ],
      "mod_code": [
        "col [ i ] = ' 0 ' ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "a >> a [ i ] [ j ] ;"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        10,
        12,
        14
      ],
      "mod_code": [
        "col [ i ] = ' 0 ' ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "a >> a [ i ] [ j ] ;",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        10,
        14
      ],
      "mod_code": [
        "col [ i ] = ' 0 ' ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "col [ i ] = ' 0 ' ;",
        "a >> a [ i ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘long long int [n][n]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        8,
        12,
        14
      ],
      "mod_code": [
        "col [ i ] = ' 0 ' ;",
        "a >> a [ i ] [ j ] ;",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘long long int [n][n]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "col [ i ] = ' 0 ' ;",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        10
      ],
      "mod_code": [
        "cout << answer ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        10,
        12
      ],
      "mod_code": [
        "cout << answer ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "a >> a [ i ] [ j ] ;"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        10,
        12,
        14
      ],
      "mod_code": [
        "cout << answer ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "a >> a [ i ] [ j ] ;",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        10,
        14
      ],
      "mod_code": [
        "cout << answer ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        12
      ],
      "mod_code": [
        "cout << answer ;",
        "a >> a [ i ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘long long int [n][n]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        23,
        12,
        14
      ],
      "mod_code": [
        "cout << answer ;",
        "a >> a [ i ] [ j ] ;",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘long long int [n][n]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        23,
        14
      ],
      "mod_code": [
        "cout << answer ;",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 14,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "a >> a [ i ] [ j ] ;"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        12,
        14
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "a >> a [ i ] [ j ] ;",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        14
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "a >> a [ i ] [ j ] ;",
        "col [ j ] += a [ i ] [ j ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘long long int [n][n]’ and ‘long long int’ to binary ‘operator>>’"
    }
  ]
}