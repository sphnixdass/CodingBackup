{
  "meta": {
    "index": 603,
    "hitid": "36818Z1KV37XTAWT2TUOIWXMWZA3AN",
    "workerid": "AIWEXPJAU66D9",
    "probid": "14A",
    "subid": "39931019"
  },
  "lines": [
    {
      "line": 0,
      "text": "let f be a 2d array of integers with size 90 by 100",
      "code": "int f [ 90 ] [ 100 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n and m",
      "code": "int n , m ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare character variable s",
      "code": "char s ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "hangx = array of integers of size 4409",
      "code": "int hangx [ 4409 ] ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "coty = array of integers of size 4999",
      "code": "int coty [ 4999 ] ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "create integer tt with value 0",
      "code": "int tt = 0 ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "define function xaydung with int arguments hang and cot",
      "code": "void xaydung ( int hang , int cot )",
      "indent": 0
    },
    {
      "line": 7,
      "text": "set integer x to hang",
      "code": "int x = hang ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create integer y with value cot",
      "code": "int y = cot ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set integer bao1 to 0",
      "code": "int bao1 = 0 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "create integer bao2 with value 0",
      "code": "int bao2 = 0 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "create integer demx with value 0",
      "code": "int demx = 0 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "set integer demy to 0",
      "code": "int demy = 0 ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "maxx = integer",
      "code": "int maxx ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if m is less than n",
      "code": "if ( m < n )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "maxx = n",
      "code": "maxx = n ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 17,
      "text": "set value of maxx to m",
      "code": "maxx = m ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "for i = 1 to maxx inclusive",
      "code": "for ( int i = 1 ; i <= maxx ; i ++ )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "increase x by i",
      "code": "x += i ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "increase y by i",
      "code": "y += i ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if bao1 = 0 and x < = n and f [ x ] [ cot ] > 0",
      "code": "if ( bao1 == 0 && x <= n && f [ x ] [ cot ] > 0 )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "increase demx by one",
      "code": "++ demx ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 24,
      "text": "set bao1 to 1",
      "code": "bao1 = 1 ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "if bao2 = 0 and y < = m and f [ hang ] [ y ] > 0",
      "code": "if ( bao2 == 0 && y <= m && f [ hang ] [ y ] > 0 )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "increase demy by one",
      "code": "++ demy ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 28,
      "text": "set bao2 to 1",
      "code": "bao2 = 1 ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "if bao1 * bao2 is equal to 1 , break the loop",
      "code": "if ( bao1 * bao2 == 1 ) break ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "decrease x by i",
      "code": "x -= i ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "decrease y by i",
      "code": "y -= i ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 33,
      "text": "if demx is equal to n - 1",
      "code": "if ( demx == n - 1 )",
      "indent": 1
    },
    {
      "line": 34,
      "text": "if coty [ 0 ] > cot or coty [ tt - 1 ] < cot",
      "code": "if ( coty [ 0 ] > cot || coty [ tt - 1 ] < cot )",
      "indent": 2
    },
    {
      "line": 35,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) f [ i ] [ cot ] = 2 ;",
      "indent": 3
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 37,
      "text": "if demy is equal to m - 1",
      "code": "if ( demy == m - 1 )",
      "indent": 1
    },
    {
      "line": 38,
      "text": "if hangx [ 0 ] > hang or hang > hangx [ tt - 1 ]",
      "code": "if ( hangx [ 0 ] > hang || hang > hangx [ tt - 1 ] )",
      "indent": 2
    },
    {
      "line": 39,
      "text": "for i = 1 to m inclusive set f [ hang ] [ i ] to 2",
      "code": "for ( int i = 1 ; i <= m ; i ++ ) f [ hang ] [ i ] = 2 ;",
      "indent": 3
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 43,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 44,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 45,
      "text": "for j = 1 to m inclusive",
      "code": "for ( int j = 1 ; j <= m ; j ++ )",
      "indent": 2
    },
    {
      "line": 46,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 3
    },
    {
      "line": 47,
      "text": "if s is equal to ' . '",
      "code": "if ( s == ' . ' )",
      "indent": 3
    },
    {
      "line": 48,
      "text": "f [ i ] [ j ] = 1",
      "code": "f [ i ] [ j ] = 1 ;",
      "indent": 4
    },
    {
      "line": 49,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 50,
      "text": "f [ i ] [ j ] = 0",
      "code": "f [ i ] [ j ] = 0 ;",
      "indent": 4
    },
    {
      "line": 51,
      "text": "set hangx [ tt ] to i",
      "code": "hangx [ tt ] = i ;",
      "indent": 4
    },
    {
      "line": 52,
      "text": "set coty [ tt ] to j",
      "code": "coty [ tt ] = j ;",
      "indent": 4
    },
    {
      "line": 53,
      "text": "increment tt",
      "code": "tt ++ ;",
      "indent": 4
    },
    {
      "line": 54,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 55,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 57,
      "text": "sort hangx",
      "code": "sort ( hangx , hangx + tt ) ;",
      "indent": 1
    },
    {
      "line": 58,
      "text": "sort coty",
      "code": "sort ( coty , coty + tt ) ;",
      "indent": 1
    },
    {
      "line": 59,
      "text": "for integer i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 60,
      "text": "for j = 1 to m inclusive",
      "code": "for ( int j = 1 ; j <= m ; j ++ )",
      "indent": 2
    },
    {
      "line": 61,
      "text": "if f [ i ] [ j ] > 0 , call xaydung ( i , j )",
      "code": "if ( f [ i ] [ j ] > 0 ) { xaydung ( i , j ) ; }",
      "indent": 3
    },
    {
      "line": 62,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 63,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 64,
      "text": "for integer i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 65,
      "text": "integer chodoi with value 0",
      "code": "int chodoi = 0 ;",
      "indent": 2
    },
    {
      "line": 66,
      "text": "for j = 1 to m inclusive",
      "code": "for ( int j = 1 ; j <= m ; j ++ )",
      "indent": 2
    },
    {
      "line": 67,
      "text": "if f [ i ] [ j ] is not 2",
      "code": "if ( f [ i ] [ j ] != 2 )",
      "indent": 3
    },
    {
      "line": 68,
      "text": "if f [ i ] [ j ] is 1",
      "code": "if ( f [ i ] [ j ] == 1 )",
      "indent": 4
    },
    {
      "line": 69,
      "text": "print \" . \"",
      "code": "cout << \" . \" ;",
      "indent": 5
    },
    {
      "line": 70,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 71,
      "text": "print \" * \"",
      "code": "cout << \" * \" ;",
      "indent": 5
    },
    {
      "line": 72,
      "text": "if chodoi is 0 , set chodoi to 1",
      "code": "if ( chodoi == 0 ) chodoi = 1 ;",
      "indent": 4
    },
    {
      "line": 73,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 74,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 75,
      "text": "if chodoi is 1 print new line",
      "code": "if ( chodoi == 1 ) cout << endl ;",
      "indent": 2
    },
    {
      "line": 76,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 77,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 78,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 36,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        57
      ],
      "mod_code": [
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;"
      ],
      "err_line": 57,
      "err_msg": "request for member ‘begin’ in ‘hangx’, which is of non-class type ‘int [4409]’"
    },
    {
      "mod_line": [
        58
      ],
      "mod_code": [
        "sort ( coty . begin ( ) , coty . end ( ) ) ;"
      ],
      "err_line": 58,
      "err_msg": "request for member ‘begin’ in ‘coty’, which is of non-class type ‘int [4999]’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char s [ 101 ] ;"
      ],
      "err_line": 47,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int tt create ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "y = cot ;"
      ],
      "err_line": 8,
      "err_msg": "‘y’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "bao1 = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "‘bao1’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int bao2 create ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int demx create ;"
      ],
      "err_line": 11,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "demy = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "‘demy’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "* maxx = m ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( i = 1 ; i <= maxx ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 35,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        43
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 43,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        44
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 44,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        45
      ],
      "mod_code": [
        "for ( j = 1 ; j <= m ; j ++ )"
      ],
      "err_line": 45,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        47
      ],
      "mod_code": [
        "else if ( s == ' . ' )"
      ],
      "err_line": 47,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        49
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 49,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        51
      ],
      "mod_code": [
        "hangx [ tt ] ] = i ;"
      ],
      "err_line": 51,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        52
      ],
      "mod_code": [
        "coty [ tt ] ] = j ;"
      ],
      "err_line": 52,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        60
      ],
      "mod_code": [
        "for ( j = 1 ; j <= m ; j ++ )"
      ],
      "err_line": 60,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        65
      ],
      "mod_code": [
        "const int chodoi = 0 ;"
      ],
      "err_line": 72,
      "err_msg": "assignment of read-only variable ‘chodoi’"
    },
    {
      "mod_line": [
        66
      ],
      "mod_code": [
        "for ( j = 1 ; j <= m ; j ++ )"
      ],
      "err_line": 66,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        70
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 70,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        35,
        57
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;"
      ],
      "err_line": 36,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        35,
        57,
        58
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "sort ( coty . begin ( ) , coty . end ( ) ) ;"
      ],
      "err_line": 36,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        35,
        57,
        58,
        17
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "* maxx = m ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        35,
        57,
        58,
        23
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "else else"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        35,
        57,
        58,
        68
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 36,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        35,
        57,
        17
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "* maxx = m ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        35,
        57,
        17,
        23
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "* maxx = m ;",
        "else else"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        35,
        57,
        17,
        68
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "* maxx = m ;",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        35,
        57,
        23
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "else else"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        35,
        57,
        23,
        68
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "else else",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        35,
        57,
        68
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 36,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        35,
        58
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "sort ( coty . begin ( ) , coty . end ( ) ) ;"
      ],
      "err_line": 36,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        35,
        58,
        17
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "* maxx = m ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        35,
        58,
        17,
        23
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "* maxx = m ;",
        "else else"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        35,
        58,
        17,
        68
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "* maxx = m ;",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        35,
        58,
        23
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "else else"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        35,
        58,
        23,
        68
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "else else",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        35,
        58,
        68
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 36,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        35,
        17
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "* maxx = m ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        35,
        17,
        23
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "* maxx = m ;",
        "else else"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        35,
        17,
        23,
        68
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "* maxx = m ;",
        "else else",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        35,
        17,
        68
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "* maxx = m ;",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        35,
        23
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "else else"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        35,
        23,
        68
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "else else",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        35,
        68
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 36,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        57,
        58
      ],
      "mod_code": [
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "sort ( coty . begin ( ) , coty . end ( ) ) ;"
      ],
      "err_line": 57,
      "err_msg": "request for member ‘begin’ in ‘hangx’, which is of non-class type ‘int [4409]’"
    },
    {
      "mod_line": [
        57,
        58,
        17
      ],
      "mod_code": [
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "* maxx = m ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        57,
        58,
        17,
        23
      ],
      "mod_code": [
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "* maxx = m ;",
        "else else"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        57,
        58,
        17,
        68
      ],
      "mod_code": [
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "* maxx = m ;",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        57,
        58,
        23
      ],
      "mod_code": [
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "else else"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        57,
        58,
        23,
        68
      ],
      "mod_code": [
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "else else",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        57,
        58,
        68
      ],
      "mod_code": [
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 57,
      "err_msg": "request for member ‘begin’ in ‘hangx’, which is of non-class type ‘int [4409]’"
    },
    {
      "mod_line": [
        57,
        17
      ],
      "mod_code": [
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "* maxx = m ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        57,
        17,
        23
      ],
      "mod_code": [
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "* maxx = m ;",
        "else else"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        57,
        17,
        23,
        68
      ],
      "mod_code": [
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "* maxx = m ;",
        "else else",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        57,
        17,
        68
      ],
      "mod_code": [
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "* maxx = m ;",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        57,
        23
      ],
      "mod_code": [
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "else else"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        57,
        23,
        68
      ],
      "mod_code": [
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "else else",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        57,
        68
      ],
      "mod_code": [
        "sort ( hangx . begin ( ) , hangx . end ( ) ) ;",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 57,
      "err_msg": "request for member ‘begin’ in ‘hangx’, which is of non-class type ‘int [4409]’"
    },
    {
      "mod_line": [
        58,
        17
      ],
      "mod_code": [
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "* maxx = m ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        58,
        17,
        23
      ],
      "mod_code": [
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "* maxx = m ;",
        "else else"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        58,
        17,
        23,
        68
      ],
      "mod_code": [
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "* maxx = m ;",
        "else else",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        58,
        17,
        68
      ],
      "mod_code": [
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "* maxx = m ;",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        58,
        23
      ],
      "mod_code": [
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "else else"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        58,
        23,
        68
      ],
      "mod_code": [
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "else else",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        58,
        68
      ],
      "mod_code": [
        "sort ( coty . begin ( ) , coty . end ( ) ) ;",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 58,
      "err_msg": "request for member ‘begin’ in ‘coty’, which is of non-class type ‘int [4999]’"
    },
    {
      "mod_line": [
        17,
        23
      ],
      "mod_code": [
        "* maxx = m ;",
        "else else"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        17,
        23,
        68
      ],
      "mod_code": [
        "* maxx = m ;",
        "else else",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        17,
        68
      ],
      "mod_code": [
        "* maxx = m ;",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        23,
        68
      ],
      "mod_code": [
        "else else",
        "if ( f [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}