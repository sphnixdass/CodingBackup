{
  "meta": {
    "index": 1342,
    "hitid": "368IUKXGA523DXPDAEAJFUY15RTP66",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "75A",
    "subid": "41524360"
  },
  "lines": [
    {
      "line": 0,
      "text": "in the inline function add that takes strings a , b and returns string",
      "code": "inline string add ( string a , string b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "i = i",
      "code": "int i ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "ans = string with ans = \" \"",
      "code": "string ans = \" \" ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "cry = integer with cry = 0",
      "code": "int cry = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to max ( a . size ( ) , b . size ( ) ) + 1 exclusive",
      "code": "for ( i = 0 ; i < max ( a . size ( ) , b . size ( ) ) + 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "ta , tb = integer",
      "code": "int ta , tb ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if i > = a . size ( )",
      "code": "if ( i >= a . size ( ) )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "ta = 0",
      "code": "ta = 0 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "ta = a [ i ] - ' 0 '",
      "code": "ta = a [ i ] - ' 0 ' ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if i > = b . size ( )",
      "code": "if ( i >= b . size ( ) )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "tb = 0",
      "code": "tb = 0 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 13,
      "text": "tb = b [ i ] - ' 0 '",
      "code": "tb = b [ i ] - ' 0 ' ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "p = integer with p = ta + tb + cry",
      "code": "int p = ta + tb + cry ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "cry = p / 10",
      "code": "cry = p / 10 ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "p = p modulo 10 ;",
      "code": "p %= 10 ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "ans = and + ' 0 ' + p",
      "code": "ans += ' 0 ' + p ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if ans [ ans . size ( ) - 1 ] is ' 0 ' , ans = substring of ans from index 0 to ans . size ( ) - 1",
      "code": "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "return ans",
      "code": "return ans ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 22,
      "text": "in the inline function era that takes string p and returns string",
      "code": "inline string era ( string p )",
      "indent": 0
    },
    {
      "line": 23,
      "text": "for i = 0 to p . size ( ) exclusive",
      "code": "for ( int i = 0 ; i < p . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "if p [ i ] is ' 0 '",
      "code": "if ( p [ i ] == ' 0 ' )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "p = substring of p from index 0 to i + substring of p from index i + 1",
      "code": "p = p . substr ( 0 , i ) + p . substr ( i + 1 ) ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "decrement i",
      "code": "i -- ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "return p",
      "code": "return p ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 32,
      "text": "a , b , c = srings",
      "code": "string a , b , c ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "read a and b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "reverse a . begin ( ) and a . end ( ) )",
      "code": "reverse ( a . begin ( ) , a . end ( ) ) ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "reverse b . begin ( ) and b . end ( ) )",
      "code": "reverse ( b . begin ( ) , b . end ( ) ) ;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "c = add a and b",
      "code": "c = add ( a , b ) ;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "a = call era on a",
      "code": "a = era ( a ) ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "b = call era on b",
      "code": "b = era ( b ) ;",
      "indent": 1
    },
    {
      "line": 39,
      "text": "c = call era on c",
      "code": "c = era ( c ) ;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "if add a and b is c",
      "code": "if ( add ( a , b ) == c )",
      "indent": 1
    },
    {
      "line": 41,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 44,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 1
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "i = i ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "int a , b , c = srings ;"
      ],
      "err_line": 32,
      "err_msg": "‘srings’ was not declared in this scope"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "if ( ! a && b == c )"
      ],
      "err_line": 40,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "inline string add ( string a , int b )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘b’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string ans = ' \" ;"
      ],
      "err_line": 2,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 ) - 1 ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator-’ (operand types are ‘std::__cxx11::basic_string<char>’ and ‘int’)"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "inline string era ( string p ) ;"
      ],
      "err_line": 23,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "for ( i = 0 ; i < p . size ( ) ; i ++ )"
      ],
      "err_line": 23,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "long long a , b , c = srings ;"
      ],
      "err_line": 32,
      "err_msg": "‘srings’ was not declared in this scope"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "a >> a >> b ;"
      ],
      "err_line": 33,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "reverse ( a . begin ( ) ) , a . end ( ) ;"
      ],
      "err_line": 34,
      "err_msg": "no matching function for call to ‘reverse(std::__cxx11::basic_string<char>::iterator)’"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "reverse ( b . begin ( ) ) , b . end ( ) ;"
      ],
      "err_line": 35,
      "err_msg": "no matching function for call to ‘reverse(std::__cxx11::basic_string<char>::iterator)’"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "int c = += a , b ;"
      ],
      "err_line": 36,
      "err_msg": "conflicting declaration ‘int c’"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "a = era ;"
      ],
      "err_line": 37,
      "err_msg": "invalid conversion from ‘std::__cxx11::string (*)(std::__cxx11::string) {aka std::__cxx11::basic_string<char> (*)(std::__cxx11::basic_string<char>)}’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "b = era . call ( ) ;"
      ],
      "err_line": 38,
      "err_msg": "request for member ‘call’ in ‘era’, which is of non-class type ‘std::__cxx11::string(std::__cxx11::string) {aka std::__cxx11::basic_string<char>(std::__cxx11::basic_string<char>)}’"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "c = era ;"
      ],
      "err_line": 39,
      "err_msg": "invalid conversion from ‘std::__cxx11::string (*)(std::__cxx11::string) {aka std::__cxx11::basic_string<char> (*)(std::__cxx11::basic_string<char>)}’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        15
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        15,
        17
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;",
        "ans = ' 0 ' + p + p ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        15,
        19
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        15,
        32
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        15,
        36
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        15,
        40
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        17
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "ans = ' 0 ' + p + p ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        17,
        19
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        17,
        32
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "ans = ' 0 ' + p + p ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        17,
        36
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "ans = ' 0 ' + p + p ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        17,
        40
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "ans = ' 0 ' + p + p ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        19
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        19,
        32
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        19,
        36
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        19,
        40
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        32
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "int a , b , c = srings ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        32,
        36
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        32,
        40
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "int a , b , c = srings ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        36
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "c = max ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        36,
        40
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4,
        40
      ],
      "mod_code": [
        "i = i ;",
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "i = i ;",
        "cry /= 10 ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        15,
        17
      ],
      "mod_code": [
        "i = i ;",
        "cry /= 10 ;",
        "ans = ' 0 ' + p + p ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        15,
        17,
        19
      ],
      "mod_code": [
        "i = i ;",
        "cry /= 10 ;",
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        15,
        17,
        32
      ],
      "mod_code": [
        "i = i ;",
        "cry /= 10 ;",
        "ans = ' 0 ' + p + p ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        15,
        17,
        36
      ],
      "mod_code": [
        "i = i ;",
        "cry /= 10 ;",
        "ans = ' 0 ' + p + p ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        15,
        17,
        40
      ],
      "mod_code": [
        "i = i ;",
        "cry /= 10 ;",
        "ans = ' 0 ' + p + p ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        15,
        19
      ],
      "mod_code": [
        "i = i ;",
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        15,
        19,
        32
      ],
      "mod_code": [
        "i = i ;",
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        15,
        19,
        36
      ],
      "mod_code": [
        "i = i ;",
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        15,
        19,
        40
      ],
      "mod_code": [
        "i = i ;",
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        15,
        32
      ],
      "mod_code": [
        "i = i ;",
        "cry /= 10 ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        15,
        32,
        36
      ],
      "mod_code": [
        "i = i ;",
        "cry /= 10 ;",
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        15,
        32,
        40
      ],
      "mod_code": [
        "i = i ;",
        "cry /= 10 ;",
        "int a , b , c = srings ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        15,
        36
      ],
      "mod_code": [
        "i = i ;",
        "cry /= 10 ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        15,
        36,
        40
      ],
      "mod_code": [
        "i = i ;",
        "cry /= 10 ;",
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        15,
        40
      ],
      "mod_code": [
        "i = i ;",
        "cry /= 10 ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        17
      ],
      "mod_code": [
        "i = i ;",
        "ans = ' 0 ' + p + p ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        17,
        19
      ],
      "mod_code": [
        "i = i ;",
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        17,
        19,
        32
      ],
      "mod_code": [
        "i = i ;",
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        17,
        19,
        36
      ],
      "mod_code": [
        "i = i ;",
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        17,
        19,
        40
      ],
      "mod_code": [
        "i = i ;",
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        17,
        32
      ],
      "mod_code": [
        "i = i ;",
        "ans = ' 0 ' + p + p ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        17,
        32,
        36
      ],
      "mod_code": [
        "i = i ;",
        "ans = ' 0 ' + p + p ;",
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        17,
        32,
        40
      ],
      "mod_code": [
        "i = i ;",
        "ans = ' 0 ' + p + p ;",
        "int a , b , c = srings ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        17,
        36
      ],
      "mod_code": [
        "i = i ;",
        "ans = ' 0 ' + p + p ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        17,
        36,
        40
      ],
      "mod_code": [
        "i = i ;",
        "ans = ' 0 ' + p + p ;",
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        17,
        40
      ],
      "mod_code": [
        "i = i ;",
        "ans = ' 0 ' + p + p ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        19
      ],
      "mod_code": [
        "i = i ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        19,
        32
      ],
      "mod_code": [
        "i = i ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        19,
        32,
        36
      ],
      "mod_code": [
        "i = i ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        19,
        32,
        40
      ],
      "mod_code": [
        "i = i ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        19,
        36
      ],
      "mod_code": [
        "i = i ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        19,
        36,
        40
      ],
      "mod_code": [
        "i = i ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        19,
        40
      ],
      "mod_code": [
        "i = i ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        32
      ],
      "mod_code": [
        "i = i ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        32,
        36
      ],
      "mod_code": [
        "i = i ;",
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        32,
        36,
        40
      ],
      "mod_code": [
        "i = i ;",
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        32,
        40
      ],
      "mod_code": [
        "i = i ;",
        "int a , b , c = srings ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        36
      ],
      "mod_code": [
        "i = i ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        36,
        40
      ],
      "mod_code": [
        "i = i ;",
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        40
      ],
      "mod_code": [
        "i = i ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 1,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        15,
        17
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;",
        "ans = ' 0 ' + p + p ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        15,
        17,
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;",
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        15,
        17,
        32
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;",
        "ans = ' 0 ' + p + p ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        15,
        17,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;",
        "ans = ' 0 ' + p + p ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        15,
        17,
        40
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;",
        "ans = ' 0 ' + p + p ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        15,
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        15,
        19,
        32
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        15,
        19,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        15,
        19,
        40
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        15,
        32
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        15,
        32,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;",
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        15,
        32,
        40
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;",
        "int a , b , c = srings ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        15,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        15,
        36,
        40
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;",
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        15,
        40
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "cry /= 10 ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        17
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "ans = ' 0 ' + p + p ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        17,
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        17,
        19,
        32
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        17,
        19,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        17,
        19,
        40
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        17,
        32
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "ans = ' 0 ' + p + p ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        17,
        32,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "ans = ' 0 ' + p + p ;",
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        17,
        32,
        40
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "ans = ' 0 ' + p + p ;",
        "int a , b , c = srings ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        17,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "ans = ' 0 ' + p + p ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        17,
        36,
        40
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "ans = ' 0 ' + p + p ;",
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        17,
        40
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "ans = ' 0 ' + p + p ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        19,
        32
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        19,
        32,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        19,
        32,
        40
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        19,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        19,
        36,
        40
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        19,
        40
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        32
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "int a , b , c = srings ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        32,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        32,
        36,
        40
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        32,
        40
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "int a , b , c = srings ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        36
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "c = max ( a , b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        36,
        40
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        40
      ],
      "mod_code": [
        "for ( int i = 0 ; i < max ( a . size ( ) + b . size ( ) + 1 ; i ++ )",
        "if ( ! a && b == c )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        15,
        17,
        19
      ],
      "mod_code": [
        "cry /= 10 ;",
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        15,
        17,
        19,
        32
      ],
      "mod_code": [
        "cry /= 10 ;",
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        15,
        17,
        19,
        36
      ],
      "mod_code": [
        "cry /= 10 ;",
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        15,
        17,
        19,
        40
      ],
      "mod_code": [
        "cry /= 10 ;",
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        15,
        17,
        32
      ],
      "mod_code": [
        "cry /= 10 ;",
        "ans = ' 0 ' + p + p ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 32,
      "err_msg": "‘srings’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        17,
        32,
        36
      ],
      "mod_code": [
        "cry /= 10 ;",
        "ans = ' 0 ' + p + p ;",
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 32,
      "err_msg": "‘srings’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        17,
        32,
        40
      ],
      "mod_code": [
        "cry /= 10 ;",
        "ans = ' 0 ' + p + p ;",
        "int a , b , c = srings ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 32,
      "err_msg": "‘srings’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        17,
        36,
        40
      ],
      "mod_code": [
        "cry /= 10 ;",
        "ans = ' 0 ' + p + p ;",
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 40,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        17,
        40
      ],
      "mod_code": [
        "cry /= 10 ;",
        "ans = ' 0 ' + p + p ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 40,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        19
      ],
      "mod_code": [
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        15,
        19,
        32
      ],
      "mod_code": [
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        15,
        19,
        32,
        36
      ],
      "mod_code": [
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        15,
        19,
        32,
        40
      ],
      "mod_code": [
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        15,
        19,
        36
      ],
      "mod_code": [
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        15,
        19,
        36,
        40
      ],
      "mod_code": [
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        15,
        19,
        40
      ],
      "mod_code": [
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        15,
        32
      ],
      "mod_code": [
        "cry /= 10 ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 32,
      "err_msg": "‘srings’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        32,
        36
      ],
      "mod_code": [
        "cry /= 10 ;",
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 32,
      "err_msg": "‘srings’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        32,
        36,
        40
      ],
      "mod_code": [
        "cry /= 10 ;",
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 32,
      "err_msg": "‘srings’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        32,
        40
      ],
      "mod_code": [
        "cry /= 10 ;",
        "int a , b , c = srings ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 32,
      "err_msg": "‘srings’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        36,
        40
      ],
      "mod_code": [
        "cry /= 10 ;",
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 40,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        40
      ],
      "mod_code": [
        "cry /= 10 ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 40,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        19
      ],
      "mod_code": [
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        17,
        19,
        32
      ],
      "mod_code": [
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        17,
        19,
        32,
        36
      ],
      "mod_code": [
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        17,
        19,
        32,
        40
      ],
      "mod_code": [
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        17,
        19,
        36
      ],
      "mod_code": [
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        17,
        19,
        36,
        40
      ],
      "mod_code": [
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        17,
        19,
        40
      ],
      "mod_code": [
        "ans = ' 0 ' + p + p ;",
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        17,
        32
      ],
      "mod_code": [
        "ans = ' 0 ' + p + p ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 32,
      "err_msg": "‘srings’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        32,
        36
      ],
      "mod_code": [
        "ans = ' 0 ' + p + p ;",
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 32,
      "err_msg": "‘srings’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        32,
        36,
        40
      ],
      "mod_code": [
        "ans = ' 0 ' + p + p ;",
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 32,
      "err_msg": "‘srings’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        32,
        40
      ],
      "mod_code": [
        "ans = ' 0 ' + p + p ;",
        "int a , b , c = srings ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 32,
      "err_msg": "‘srings’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        36,
        40
      ],
      "mod_code": [
        "ans = ' 0 ' + p + p ;",
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 40,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        40
      ],
      "mod_code": [
        "ans = ' 0 ' + p + p ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 40,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        32
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        19,
        32,
        36
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        19,
        32,
        36,
        40
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        19,
        32,
        40
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "int a , b , c = srings ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        19,
        36
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        19,
        36,
        40
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        19,
        40
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . substr ( 0 - 1 ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        32,
        36
      ],
      "mod_code": [
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;"
      ],
      "err_line": 32,
      "err_msg": "‘srings’ was not declared in this scope"
    },
    {
      "mod_line": [
        32,
        36,
        40
      ],
      "mod_code": [
        "int a , b , c = srings ;",
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 32,
      "err_msg": "‘srings’ was not declared in this scope"
    },
    {
      "mod_line": [
        32,
        40
      ],
      "mod_code": [
        "int a , b , c = srings ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 32,
      "err_msg": "‘srings’ was not declared in this scope"
    },
    {
      "mod_line": [
        36,
        40
      ],
      "mod_code": [
        "c = max ( a , b ) ;",
        "if ( ! a && b == c )"
      ],
      "err_line": 40,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}