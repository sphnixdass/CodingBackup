{
  "meta": {
    "index": 1726,
    "hitid": "363A7XIFV4GH5JYCM30U1RP5OLBVAP",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "262A",
    "subid": "47821177"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function lucky taking an int b and returning an int",
      "code": "int lucky ( int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "nod , c = int with nod = 0 and c = b",
      "code": "int nod = 0 , c = b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 0 increment i while c is not 0",
      "code": "for ( int i = 0 ; c != 0 ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set c to c / 10",
      "code": "c /= 10 ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "increment nod",
      "code": "nod ++ ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "s = int with s = 0",
      "code": "int s = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to nod",
      "code": "for ( int i = 0 ; i < nod ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if b mod 10 equals 4 or 7 then increment s",
      "code": "if ( b % 10 == 4 || b % 10 == 7 ) { s ++ ; }",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set b to b / 10",
      "code": "b /= 10 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "return s",
      "code": "return s ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 14,
      "text": "n , k = int",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "read n then k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "v = int vector",
      "code": "vector < int > v ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = 0 to n",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "a = int",
      "code": "int a ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "append a to v",
      "code": "v . push_back ( a ) ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "s = int with s = 0",
      "code": "int s = 0 ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "for i = 0 to n",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "if lucky of v [ i ] is less or equal to k then increment s",
      "code": "if ( lucky ( v [ i ] ) <= k ) s ++ ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print s",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < nod ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "vector < string > v ;"
      ],
      "err_line": 20,
      "err_msg": "no matching function for call to ‘std::vector<std::__cxx11::basic_string<char> >::push_back(int&)’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 17,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "gets ( a ) ;"
      ],
      "err_line": 19,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "v . push ( a ) ;"
      ],
      "err_line": 20,
      "err_msg": "‘class std::vector<int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 23,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        8,
        24,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ )",
        "if ( b % 10 == 4 || b % 7 == 7 ) s ++ ;",
        "if ( v [ i ] <= k ) s ++ ;",
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        26,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ )",
        "if ( b % 10 == 4 || b % 7 == 7 ) s ++ ;",
        "cout << s ;",
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ )",
        "if ( b % 10 == 4 || b % 7 == 7 ) s ++ ;",
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        24,
        26,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ )",
        "if ( v [ i ] <= k ) s ++ ;",
        "cout << s ;",
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        24,
        8,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ )",
        "if ( v [ i ] <= k ) s ++ ;",
        "if ( b % 10 == 4 ) s ++ ;",
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        24,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ )",
        "if ( v [ i ] <= k ) s ++ ;",
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        26,
        8,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ )",
        "cout << s ;",
        "if ( b % 10 == 4 ) s ++ ;",
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        26,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ )",
        "cout << s ;",
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ )",
        "if ( b % 10 == 4 ) s ++ ;",
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 0 ; i ++ )",
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        24,
        26,
        0
      ],
      "mod_code": [
        "if ( b % 10 == 4 || b % 7 == 7 ) s ++ ;",
        "if ( v [ i ] <= k ) s ++ ;",
        "cout << s ;",
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        24,
        0
      ],
      "mod_code": [
        "if ( b % 10 == 4 || b % 7 == 7 ) s ++ ;",
        "if ( v [ i ] <= k ) s ++ ;",
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        26,
        0
      ],
      "mod_code": [
        "if ( b % 10 == 4 || b % 7 == 7 ) s ++ ;",
        "cout << s ;",
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "if ( b % 10 == 4 || b % 7 == 7 ) s ++ ;",
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        24,
        26,
        8,
        0
      ],
      "mod_code": [
        "if ( v [ i ] <= k ) s ++ ;",
        "cout << s ;",
        "if ( b % 10 == 4 ) s ++ ;",
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        24,
        26,
        0
      ],
      "mod_code": [
        "if ( v [ i ] <= k ) s ++ ;",
        "cout << s ;",
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        24,
        8,
        0
      ],
      "mod_code": [
        "if ( v [ i ] <= k ) s ++ ;",
        "if ( b % 10 == 4 ) s ++ ;",
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        24,
        0
      ],
      "mod_code": [
        "if ( v [ i ] <= k ) s ++ ;",
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        26,
        8,
        0
      ],
      "mod_code": [
        "cout << s ;",
        "if ( b % 10 == 4 ) s ++ ;",
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        26,
        0
      ],
      "mod_code": [
        "cout << s ;",
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "if ( b % 10 == 4 ) s ++ ;",
        "int lucky ( int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}