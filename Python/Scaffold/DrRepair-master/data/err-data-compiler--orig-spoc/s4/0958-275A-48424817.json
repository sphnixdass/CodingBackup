{
  "meta": {
    "index": 958,
    "hitid": "3KWGG5KP6JWM8B11SPVUKQWGXVNCMU",
    "workerid": "AIWEXPJAU66D9",
    "probid": "275A",
    "subid": "48424817"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare 2d arrays of integers MAT and TOOG with size 3 by 3",
      "code": "int MAT [ 3 ] [ 3 ] , TOOG [ 3 ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for integer i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for j from 0 to 3 exclusive , assign 1 to MAT [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < 3 ; j ++ ) MAT [ i ] [ j ] = 1 ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 0 to 3 exclusive",
      "code": "for ( int j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read TOOG [ i ] [ j ]",
      "code": "cin >> TOOG [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "create arrays of integers _i with elements 1 , 0 , - 1 , 0 , 0 and j with elements 0 , 1 , 0 , - 1 , 0",
      "code": "int _i [ 5 ] = { 1 , 0 , - 1 , 0 , 0 } , _j [ 5 ] = { 0 , 1 , 0 , - 1 , 0 } ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "if TOOG [ i ] [ j ] is odd",
      "code": "if ( TOOG [ i ] [ j ] % 2 != 0 )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "for integer c = 0 to 5 exclusive",
      "code": "for ( int c = 0 ; c < 5 ; c ++ )",
      "indent": 4
    },
    {
      "line": 10,
      "text": "create integer ni = i + _i [ c ] and nj = j + _j [ c ]",
      "code": "int ni = i + _i [ c ] , nj = j + _j [ c ] ;",
      "indent": 5
    },
    {
      "line": 11,
      "text": "if ( ni < 3 and ni > = 0 ) and ( nj < 3 and nj > = 0 ) , change MAT [ ni ] [ nj ] to 0 if MAT [ ni ] [ nj ] ! = 0 , or 1 otherwise",
      "code": "if ( ( ni < 3 and ni >= 0 ) and ( nj < 3 and nj >= 0 ) ) MAT [ ni ] [ nj ] = ( MAT [ ni ] [ nj ] ) ? 0 : 1 ;",
      "indent": 5
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for integer i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for j from 0 to 3 exclusive , print MAT [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < 3 ; j ++ ) cout << MAT [ i ] [ j ] ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print \" \\ n \"",
      "code": "cout << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;"
      ],
      "err_line": 10,
      "err_msg": "‘_j’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int ni = i + _i [ c ] , nj += _j [ c ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "<< \" \\n \" ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] , TOOG [ 3 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int TOOG [3]’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 3 ; j ++ ) MAT [ i ] [ j ] [ j ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , 0 , - 1 , 1 , - 1 , 0 } ;"
      ],
      "err_line": 10,
      "err_msg": "‘_j’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        3,
        7
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        3,
        7,
        10
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        3,
        7,
        11
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "else"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        3,
        7,
        18
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        3,
        10
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        3,
        10,
        11
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;",
        "else"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        3,
        10,
        18
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        3,
        11
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "else"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        3,
        11,
        18
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "else",
        "<< \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        3,
        18
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        7,
        10
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        7,
        10,
        11
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;",
        "else"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        7,
        10,
        18
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        7,
        11
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "else"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        7,
        11,
        18
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "else",
        "<< \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        7,
        18
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        11
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;",
        "else"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        11,
        18
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;",
        "else",
        "<< \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        18
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "else"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        11,
        18
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "else",
        "<< \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "int MAT [ 3 ] , TOOG [ 3 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        7,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        7,
        10,
        11
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;",
        "else"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        7,
        10,
        18
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        7,
        11
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "else"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        7,
        11,
        18
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "else",
        "<< \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        7,
        18
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        10,
        11
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;",
        "else"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        10,
        11,
        18
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;",
        "else",
        "<< \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        10,
        18
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "else"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        11,
        18
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "else",
        "<< \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        18
      ],
      "mod_code": [
        "for ( int j = 0 ; j < 3 ; j ++ ) { MAT [ i ] [ j ] [ j ] = 1 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        7,
        10,
        11
      ],
      "mod_code": [
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;",
        "else"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        7,
        10,
        11,
        18
      ],
      "mod_code": [
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;",
        "else",
        "<< \" \\n \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        7,
        10,
        18
      ],
      "mod_code": [
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "int ni = i + _i [ c ] , nj += _j [ c ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "else"
      ],
      "err_line": 10,
      "err_msg": "‘_j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        11,
        18
      ],
      "mod_code": [
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "else",
        "<< \" \\n \" ;"
      ],
      "err_line": 10,
      "err_msg": "‘_j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        18
      ],
      "mod_code": [
        "int _i [ ] = { 0 , 0 , - 1 , 0 , 0 , - 1 , 1 , 0 , - 1 , 0 } ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 10,
      "err_msg": "‘_j’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "int ni = i + _i [ c ] , nj += _j [ c ] ;",
        "else"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        10,
        11,
        18
      ],
      "mod_code": [
        "int ni = i + _i [ c ] , nj += _j [ c ] ;",
        "else",
        "<< \" \\n \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        10,
        18
      ],
      "mod_code": [
        "int ni = i + _i [ c ] , nj += _j [ c ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        11,
        18
      ],
      "mod_code": [
        "else",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    }
  ]
}