{
  "meta": {
    "index": 2204,
    "hitid": "3E9ZFLPWOYMOFQM5Y6TP6AA9H4QXI0",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "556A",
    "subid": "41655144"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , i , c , d = integers with c = 0 and d = 0",
      "code": "int n , i , c = 0 , d = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "Read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "Read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if s [ i ] is 1",
      "code": "if ( s [ i ] == ' 1 ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment c",
      "code": "c ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment d",
      "code": "d ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if c is less than d",
      "code": "if ( c < d )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print n - 2 * c and a new line",
      "code": "cout << n - 2 * c << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print n - 2 * d and a new line",
      "code": "cout << n - 2 * d << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "{ n ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "{ s ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        1,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "int n , i , c , d = 0 ;",
        "{ n ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        6,
        1,
        3,
        8
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "int n , i , c , d = 0 ;",
        "{ n ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        1,
        3,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "int n , i , c , d = 0 ;",
        "{ n ;",
        "{ s ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        6,
        1,
        3,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "int n , i , c , d = 0 ;",
        "{ n ;",
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        1,
        8
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "int n , i , c , d = 0 ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        1,
        8,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "int n , i , c , d = 0 ;",
        "else else",
        "{ s ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        1,
        8,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "int n , i , c , d = 0 ;",
        "else else",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        1,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "int n , i , c , d = 0 ;",
        "{ s ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        6,
        1,
        4,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "int n , i , c , d = 0 ;",
        "{ s ;",
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        1,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "int n , i , c , d = 0 ;",
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "{ n ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        6,
        3,
        8
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "{ n ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        3,
        8,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "{ n ;",
        "else else",
        "{ s ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        3,
        8,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "{ n ;",
        "else else",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        3,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "{ n ;",
        "{ s ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        6,
        3,
        4,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "{ n ;",
        "{ s ;",
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        3,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "{ n ;",
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        8,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "else else",
        "{ s ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        8,
        4,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "else else",
        "{ s ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        8,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "else else",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "{ s ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        6,
        4,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "{ s ;",
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == 1 )",
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int n , i , c , d = 0 ;",
        "{ n ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        1,
        3,
        8
      ],
      "mod_code": [
        "int n , i , c , d = 0 ;",
        "{ n ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        4
      ],
      "mod_code": [
        "int n , i , c , d = 0 ;",
        "{ n ;",
        "else else",
        "{ s ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        13
      ],
      "mod_code": [
        "int n , i , c , d = 0 ;",
        "{ n ;",
        "else else",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "int n , i , c , d = 0 ;",
        "{ n ;",
        "{ s ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        13
      ],
      "mod_code": [
        "int n , i , c , d = 0 ;",
        "{ n ;",
        "{ s ;",
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        3,
        13
      ],
      "mod_code": [
        "int n , i , c , d = 0 ;",
        "{ n ;",
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int n , i , c , d = 0 ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        8,
        4
      ],
      "mod_code": [
        "int n , i , c , d = 0 ;",
        "else else",
        "{ s ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        8,
        4,
        13
      ],
      "mod_code": [
        "int n , i , c , d = 0 ;",
        "else else",
        "{ s ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        8,
        13
      ],
      "mod_code": [
        "int n , i , c , d = 0 ;",
        "else else",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int n , i , c , d = 0 ;",
        "{ s ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        1,
        4,
        13
      ],
      "mod_code": [
        "int n , i , c , d = 0 ;",
        "{ s ;",
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "int n , i , c , d = 0 ;",
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "{ n ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        8,
        4
      ],
      "mod_code": [
        "{ n ;",
        "else else",
        "{ s ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        8,
        4,
        13
      ],
      "mod_code": [
        "{ n ;",
        "else else",
        "{ s ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        8,
        13
      ],
      "mod_code": [
        "{ n ;",
        "else else",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "{ n ;",
        "{ s ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        3,
        4,
        13
      ],
      "mod_code": [
        "{ n ;",
        "{ s ;",
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "{ n ;",
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "else else",
        "{ s ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        4,
        13
      ],
      "mod_code": [
        "else else",
        "{ s ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "else else",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "{ s ;",
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}