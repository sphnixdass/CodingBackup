{
  "meta": {
    "index": 136,
    "hitid": "3E24UO25QZKLSXDCVEX4QUTBV7FO6C",
    "workerid": "A1APYLD4DUK33J",
    "probid": "3A",
    "subid": "44887025"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create characters a , s",
      "code": "char a , s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create long longs n , m , res , o , p",
      "code": "long long n , m , res , o , p ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read a read n",
      "code": "cin >> a >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s read m",
      "code": "cin >> s >> m ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set o to n - m",
      "code": "o = n - m ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if o is less than 0 , set o to o * - 1",
      "code": "if ( o < 0 ) o *= - 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set p to integer casted a - integer casted s",
      "code": "p = int ( a ) - int ( s ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if p is less than 0 , set p to p * - 1",
      "code": "if ( p < 0 ) p *= - 1 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set res to maximum of o and p",
      "code": "res = max ( o , p ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print res print newline",
      "code": "cout << res << endl ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if integer casted s is less than integer casted a",
      "code": "if ( int ( s ) < int ( a ) )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "while n is not m and s is not a",
      "code": "while ( ( n != m ) && ( s != a ) )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if n is greater than m",
      "code": "if ( n > m )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "print \" LD \" print newline",
      "code": "cout << \" LD \" << endl ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "set a to character casted ( integer casted a - 1 )",
      "code": "a = char ( int ( a ) - 1 ) ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "decrement n",
      "code": "n -- ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 18,
      "text": "if n is less than m",
      "code": "if ( n < m )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "print \" LU \" print newline",
      "code": "cout << \" LU \" << endl ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "set a to character casted ( integer casted a - 1 )",
      "code": "a = char ( int ( a ) - 1 ) ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "increment n",
      "code": "n ++ ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "if n is not m",
      "code": "if ( n != m )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "while n is not m",
      "code": "while ( n != m )",
      "indent": 3
    },
    {
      "line": 26,
      "text": "if n is greater than m",
      "code": "if ( n > m )",
      "indent": 4
    },
    {
      "line": 27,
      "text": "print \" D \" print newline",
      "code": "cout << \" D \" << endl ;",
      "indent": 5
    },
    {
      "line": 28,
      "text": "decrement n",
      "code": "n -- ;",
      "indent": 5
    },
    {
      "line": 29,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 30,
      "text": "print \" U \" print newline",
      "code": "cout << \" U \" << endl ;",
      "indent": 5
    },
    {
      "line": 31,
      "text": "increment n",
      "code": "n ++ ;",
      "indent": 5
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 34,
      "text": "if a is not s",
      "code": "if ( a != s )",
      "indent": 2
    },
    {
      "line": 35,
      "text": "while a is not s",
      "code": "while ( a != s )",
      "indent": 3
    },
    {
      "line": 36,
      "text": "print \" L \" print newline",
      "code": "cout << \" L \" << endl ;",
      "indent": 4
    },
    {
      "line": 37,
      "text": "set a to character casted ( integer casted a - 1 )",
      "code": "a = char ( int ( a ) - 1 ) ;",
      "indent": 4
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 39,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 40,
      "text": "while n is not m and s is not a",
      "code": "while ( ( n != m ) && ( s != a ) )",
      "indent": 2
    },
    {
      "line": 41,
      "text": "if n is greater than m",
      "code": "if ( n > m )",
      "indent": 3
    },
    {
      "line": 42,
      "text": "print \" RD \" print newline",
      "code": "cout << \" RD \" << endl ;",
      "indent": 4
    },
    {
      "line": 43,
      "text": "set a to character casted ( integer casted ( a ) - 1 )",
      "code": "a = char ( int ( a ) + 1 ) ;",
      "indent": 4
    },
    {
      "line": 44,
      "text": "decrement n",
      "code": "n -- ;",
      "indent": 4
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 46,
      "text": "if n is less than m",
      "code": "if ( n < m )",
      "indent": 3
    },
    {
      "line": 47,
      "text": "print \" RU \" print newline",
      "code": "cout << \" RU \" << endl ;",
      "indent": 4
    },
    {
      "line": 48,
      "text": "set a to character casted ( integer casted ( a ) + 1 )",
      "code": "a = char ( int ( a ) + 1 ) ;",
      "indent": 4
    },
    {
      "line": 49,
      "text": "increment n",
      "code": "n ++ ;",
      "indent": 4
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 51,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 52,
      "text": "if n is not m",
      "code": "if ( n != m )",
      "indent": 2
    },
    {
      "line": 53,
      "text": "while n is not m",
      "code": "while ( n != m )",
      "indent": 3
    },
    {
      "line": 54,
      "text": "if n is greater than m",
      "code": "if ( n > m )",
      "indent": 4
    },
    {
      "line": 55,
      "text": "print \" D \" print newline",
      "code": "cout << \" D \" << endl ;",
      "indent": 5
    },
    {
      "line": 56,
      "text": "decrement n",
      "code": "n -- ;",
      "indent": 5
    },
    {
      "line": 57,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 58,
      "text": "print \" U \" print newline",
      "code": "cout << \" U \" << endl ;",
      "indent": 5
    },
    {
      "line": 59,
      "text": "increment n",
      "code": "n ++ ;",
      "indent": 5
    },
    {
      "line": 60,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 61,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 62,
      "text": "if a is not s",
      "code": "if ( a != s )",
      "indent": 2
    },
    {
      "line": 63,
      "text": "while a is not s",
      "code": "while ( a != s )",
      "indent": 3
    },
    {
      "line": 64,
      "text": "print \" R \" print newline",
      "code": "cout << \" R \" << endl ;",
      "indent": 4
    },
    {
      "line": 65,
      "text": "set a to character casted ( integer casted ( a ) + 1 )",
      "code": "a = char ( int ( a ) + 1 ) ;",
      "indent": 4
    },
    {
      "line": 66,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 67,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 68,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;"
      ],
      "err_line": 20,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;"
      ],
      "err_line": 37,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        48
      ],
      "mod_code": [
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 48,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        65
      ],
      "mod_code": [
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 65,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char a , s , s ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char s’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "long long n , m , res , p , p ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘long long int p’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> a >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int p = int ( a ) - ( int ) s ;"
      ],
      "err_line": 7,
      "err_msg": "conflicting declaration ‘int p’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "a = int ( int ) a - 1 ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "a = int ( int ) a - 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "a = int ( int ) a - 1 ;"
      ],
      "err_line": 37,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 39,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        43
      ],
      "mod_code": [
        "a = * ( int ) ( a ) - 1 ;"
      ],
      "err_line": 43,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        57
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 57,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        20
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        20,
        37
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        20,
        37,
        43
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        20,
        37,
        48
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        20,
        37,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        20,
        43
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        20,
        43,
        48
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        20,
        43,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        20,
        48
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        20,
        48,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) ( a ) + 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        20,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        37
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        37,
        43
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        37,
        43,
        48
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        37,
        43,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        37,
        48
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        37,
        48,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) ( a ) + 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        37,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        43
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        43,
        48
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        43,
        48,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;",
        "a = * ( int ) ( a ) + 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        43,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        48
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        48,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) ( a ) + 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        15,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 15,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        20,
        37
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;"
      ],
      "err_line": 20,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        20,
        37,
        43
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;"
      ],
      "err_line": 20,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        20,
        37,
        43,
        48
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 20,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        20,
        37,
        43,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 20,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        20,
        37,
        48
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 20,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        20,
        37,
        48,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) ( a ) + 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 20,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        20,
        37,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 20,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        20,
        43
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;"
      ],
      "err_line": 20,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        20,
        43,
        48
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 20,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        20,
        43,
        48,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;",
        "a = * ( int ) ( a ) + 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 20,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        20,
        43,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 20,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        20,
        48
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 20,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        20,
        48,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) ( a ) + 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 20,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        20,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 20,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        37,
        43
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;"
      ],
      "err_line": 37,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        37,
        43,
        48
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 37,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        37,
        43,
        48,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;",
        "a = * ( int ) ( a ) + 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 37,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        37,
        43,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 37,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        37,
        48
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 37,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        37,
        48,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) ( a ) + 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 37,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        37,
        65
      ],
      "mod_code": [
        "a = * ( int ) a - 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 37,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        43,
        48
      ],
      "mod_code": [
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 48,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        43,
        48,
        65
      ],
      "mod_code": [
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;",
        "a = * ( int ) ( a ) + 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 48,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        43,
        65
      ],
      "mod_code": [
        "a = ( int ) ( ( int ) ( a ) - 1 ) ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 65,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        48,
        65
      ],
      "mod_code": [
        "a = * ( int ) ( a ) + 1 ;",
        "a = * ( int ) ( a ) + 1 ;"
      ],
      "err_line": 48,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    }
  ]
}