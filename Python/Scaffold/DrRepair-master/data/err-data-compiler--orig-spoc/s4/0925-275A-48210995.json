{
  "meta": {
    "index": 925,
    "hitid": "311HQEI8RSAGV15OGXDDC60BBOE7ZD",
    "workerid": "A1APYLD4DUK33J",
    "probid": "275A",
    "subid": "48210995"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create 2d integer arrays a , b with a size 3 by 3 , b size 3 by 3",
      "code": "int a [ 3 ] [ 3 ] , b [ 3 ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for j = 0 to 3 exclusive",
      "code": "for ( int j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 4,
      "text": "read a [ i ] [ j ]",
      "code": "cin >> a [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 5,
      "text": "set b [ i ] [ j ] to 1",
      "code": "b [ i ] [ j ] = 1 ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for j = 0 to 3 exclusive",
      "code": "for ( int j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if a [ i ] [ j ] is greater than 0",
      "code": "if ( a [ i ] [ j ] > 0 )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if a [ i ] [ j ] % 2 is not 0",
      "code": "if ( a [ i ] [ j ] % 2 != 0 )",
      "indent": 4
    },
    {
      "line": 12,
      "text": "set b [ i ] [ j ] to not b [ i ] [ j ]",
      "code": "b [ i ] [ j ] = ! ( b [ i ] [ j ] ) ;",
      "indent": 5
    },
    {
      "line": 13,
      "text": "if i + 1 is less than 3 , set b [ i + 1 ] [ j ] to not b [ i + 1 ] [ j ]",
      "code": "if ( i + 1 < 3 ) { b [ i + 1 ] [ j ] = ! ( b [ i + 1 ] [ j ] ) ; }",
      "indent": 5
    },
    {
      "line": 14,
      "text": "if i - 1 is greater than or equal to 0 , set b [ i - 1 ] [ j ] to not b [ i - 1 ] [ j ]",
      "code": "if ( i - 1 >= 0 ) { b [ i - 1 ] [ j ] = ! ( b [ i - 1 ] [ j ] ) ; }",
      "indent": 5
    },
    {
      "line": 15,
      "text": "if j + 1 is less than 3 , set b [ i ] [ j + 1 ] to not b [ i ] [ j + 1 ]",
      "code": "if ( j + 1 < 3 ) { b [ i ] [ j + 1 ] = ! ( b [ i ] [ j + 1 ] ) ; }",
      "indent": 5
    },
    {
      "line": 16,
      "text": "if j - 1 is less than or equal to 0 set b [ i ] [ j - 1 ] to not b [ i ] [ j - 1 ]",
      "code": "if ( j - 1 >= 0 ) { b [ i ] [ j - 1 ] = ! ( b [ i ] [ j - 1 ] ) ; }",
      "indent": 5
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "for j = 0 to 3 exclusive , print b [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < 3 ; j ++ ) { cout << b [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 23,
      "text": "print \" \\ n \"",
      "code": "cout << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] [ 3 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 21,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j ] = b [ i ] [ j ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        12,
        13
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        12,
        13,
        14
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        12,
        13,
        15
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        12,
        13,
        16
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        12,
        13,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        12,
        14
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        12,
        14,
        15
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        12,
        14,
        16
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        12,
        14,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        12,
        15
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        12,
        15,
        16
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        12,
        15,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        12,
        16
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        12,
        16,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        12,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        13,
        14
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        13,
        14,
        15
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        13,
        14,
        16
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        13,
        14,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        13,
        15
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        13,
        15,
        16
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        13,
        15,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        13,
        16
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        13,
        16,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        13,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        14,
        15
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        14,
        15,
        16
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        14,
        15,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        14,
        16
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        14,
        16,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        14,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        15,
        16
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        15,
        16,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        15,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        16,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        1,
        23
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        12,
        13,
        14,
        23
      ],
      "mod_code": [
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        13,
        15,
        23
      ],
      "mod_code": [
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        13,
        16,
        23
      ],
      "mod_code": [
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        13,
        23
      ],
      "mod_code": [
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        14,
        15,
        23
      ],
      "mod_code": [
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        14,
        16,
        23
      ],
      "mod_code": [
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        14,
        23
      ],
      "mod_code": [
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        15,
        16,
        23
      ],
      "mod_code": [
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        15,
        23
      ],
      "mod_code": [
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        16,
        23
      ],
      "mod_code": [
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        23
      ],
      "mod_code": [
        "b [ i ] [ j ] = b [ i ] [ j ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13,
        14,
        15,
        23
      ],
      "mod_code": [
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13,
        14,
        16,
        23
      ],
      "mod_code": [
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13,
        14,
        23
      ],
      "mod_code": [
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13,
        15,
        16,
        23
      ],
      "mod_code": [
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13,
        15,
        23
      ],
      "mod_code": [
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13,
        16,
        23
      ],
      "mod_code": [
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13,
        23
      ],
      "mod_code": [
        "if ( i + 1 < 3 ) b [ i + 1 ] [ j ] = b [ i + 1 ] [ j ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        15,
        16,
        23
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        15,
        23
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        16,
        23
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        23
      ],
      "mod_code": [
        "if ( i - 1 >= 0 ) b [ i - 1 ] [ j ] = b [ i - 1 ] [ j ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        16,
        23
      ],
      "mod_code": [
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;",
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        23
      ],
      "mod_code": [
        "if ( j + 1 < 3 ) b [ i ] [ j + 1 ] = b [ i ] [ j + 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        23
      ],
      "mod_code": [
        "if ( j - 1 <= 0 ) b [ i ] [ j - 1 ] = b [ i ] [ j - 1 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘<<’ token"
    }
  ]
}