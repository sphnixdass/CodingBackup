{
  "meta": {
    "index": 1107,
    "hitid": "37VHPF5VYCX7NMZXYOLBF8VLC32C8Z",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1085A",
    "subid": "48454814"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare integers n and cnt",
      "code": "int n , cnt ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create character arrays s and ans with 55 elements",
      "code": "char s [ 55 ] , ans [ 55 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read s",
      "code": "gets ( s ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare integer n = length of s",
      "code": "int n = strlen ( s ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set value of cnt to n",
      "code": "cnt = n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "declare integers l = 0 and r = n - 1",
      "code": "int l = 0 , r = n - 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "declare integer cur = n & 1",
      "code": "int cur = n & 1 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "while l is less than r",
      "code": "while ( l < r )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if cur & 1",
      "code": "if ( cur & 1 )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "decrement cnt and set ans [ cnt ] = s [ l ]",
      "code": "ans [ -- cnt ] = s [ l ] ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "increase l",
      "code": "l ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 13,
      "text": "decrement cnt and set ans [ cnt ] = s [ r ]",
      "code": "ans [ -- cnt ] = s [ r ] ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "decrement r",
      "code": "r -- ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "increase cur by one",
      "code": "cur ++ ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if l = r , decrement cnt and set ans [ cnt ] = s [ l ]",
      "code": "if ( l == r ) ans [ -- cnt ] = s [ l ] ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "call function puts with arguments ans",
      "code": "puts ( ans ) ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int n = s . length ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "puts ( ) ;"
      ],
      "err_line": 19,
      "err_msg": "too few arguments to function ‘int puts(const char*)’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n , cnt cnt ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘cnt’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid operands of types ‘char [55]’ and ‘char [55]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int n = s . size ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "* cnt = n ;"
      ],
      "err_line": 5,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int l = 0 , l = n - 1 ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "if ( l == r ) cnt [ cnt ] = s [ l ] = s [ l ] ;"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "ans [ cnt ] = s [ l ] = s [ l ] ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        4,
        10,
        13
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "ans [ cnt ] = s [ l ] = s [ l ] ;",
        "ans [ cnt ] = s [ r ] = s [ r ] ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        4,
        10,
        13,
        18
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "ans [ cnt ] = s [ l ] = s [ l ] ;",
        "ans [ cnt ] = s [ r ] = s [ r ] ;",
        "if ( l == r ) ans [ cnt ] = s [ l ] = s [ l ] ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        4,
        10,
        13,
        19
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "ans [ cnt ] = s [ l ] = s [ l ] ;",
        "ans [ cnt ] = s [ r ] = s [ r ] ;",
        "puts ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        4,
        10,
        13,
        18
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "ans [ cnt ] = s [ l ] = s [ l ] ;",
        "ans [ cnt ] = s [ r ] = s [ r ] ;",
        "if ( l == r ) cnt [ cnt ] = s [ l ] = s [ l ] ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        4,
        10,
        18
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "ans [ cnt ] = s [ l ] = s [ l ] ;",
        "if ( l == r ) ans [ cnt ] = s [ l ] = s [ l ] ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        4,
        10,
        18,
        19
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "ans [ cnt ] = s [ l ] = s [ l ] ;",
        "if ( l == r ) ans [ cnt ] = s [ l ] = s [ l ] ;",
        "puts ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        4,
        10,
        19
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "ans [ cnt ] = s [ l ] = s [ l ] ;",
        "puts ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        4,
        10,
        19,
        18
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "ans [ cnt ] = s [ l ] = s [ l ] ;",
        "puts ( ) ;",
        "if ( l == r ) cnt [ cnt ] = s [ l ] = s [ l ] ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        4,
        10,
        18
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "ans [ cnt ] = s [ l ] = s [ l ] ;",
        "if ( l == r ) cnt [ cnt ] = s [ l ] = s [ l ] ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "ans [ cnt ] = s [ r ] = s [ r ] ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        4,
        13,
        18
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "ans [ cnt ] = s [ r ] = s [ r ] ;",
        "if ( l == r ) ans [ cnt ] = s [ l ] = s [ l ] ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        4,
        13,
        18,
        19
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "ans [ cnt ] = s [ r ] = s [ r ] ;",
        "if ( l == r ) ans [ cnt ] = s [ l ] = s [ l ] ;",
        "puts ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        4,
        13,
        19
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "ans [ cnt ] = s [ r ] = s [ r ] ;",
        "puts ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        4,
        13,
        19,
        18
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "ans [ cnt ] = s [ r ] = s [ r ] ;",
        "puts ( ) ;",
        "if ( l == r ) cnt [ cnt ] = s [ l ] = s [ l ] ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        4,
        13,
        18
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "ans [ cnt ] = s [ r ] = s [ r ] ;",
        "if ( l == r ) cnt [ cnt ] = s [ l ] = s [ l ] ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        4,
        18
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "if ( l == r ) ans [ cnt ] = s [ l ] = s [ l ] ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        4,
        18,
        19
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "if ( l == r ) ans [ cnt ] = s [ l ] = s [ l ] ;",
        "puts ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        4,
        19
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "puts ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        4,
        19,
        18
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "puts ( ) ;",
        "if ( l == r ) cnt [ cnt ] = s [ l ] = s [ l ] ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        4,
        18
      ],
      "mod_code": [
        "int n = s . length ( ) ;",
        "if ( l == r ) cnt [ cnt ] = s [ l ] = s [ l ] ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char [55]’"
    },
    {
      "mod_line": [
        10,
        13,
        18,
        19
      ],
      "mod_code": [
        "ans [ cnt ] = s [ l ] = s [ l ] ;",
        "ans [ cnt ] = s [ r ] = s [ r ] ;",
        "if ( l == r ) ans [ cnt ] = s [ l ] = s [ l ] ;",
        "puts ( ) ;"
      ],
      "err_line": 19,
      "err_msg": "too few arguments to function ‘int puts(const char*)’"
    },
    {
      "mod_line": [
        10,
        13,
        19
      ],
      "mod_code": [
        "ans [ cnt ] = s [ l ] = s [ l ] ;",
        "ans [ cnt ] = s [ r ] = s [ r ] ;",
        "puts ( ) ;"
      ],
      "err_line": 19,
      "err_msg": "too few arguments to function ‘int puts(const char*)’"
    },
    {
      "mod_line": [
        10,
        13,
        19,
        18
      ],
      "mod_code": [
        "ans [ cnt ] = s [ l ] = s [ l ] ;",
        "ans [ cnt ] = s [ r ] = s [ r ] ;",
        "puts ( ) ;",
        "if ( l == r ) cnt [ cnt ] = s [ l ] = s [ l ] ;"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        13,
        18
      ],
      "mod_code": [
        "ans [ cnt ] = s [ l ] = s [ l ] ;",
        "ans [ cnt ] = s [ r ] = s [ r ] ;",
        "if ( l == r ) cnt [ cnt ] = s [ l ] = s [ l ] ;"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        18,
        19
      ],
      "mod_code": [
        "ans [ cnt ] = s [ l ] = s [ l ] ;",
        "if ( l == r ) ans [ cnt ] = s [ l ] = s [ l ] ;",
        "puts ( ) ;"
      ],
      "err_line": 19,
      "err_msg": "too few arguments to function ‘int puts(const char*)’"
    },
    {
      "mod_line": [
        10,
        19
      ],
      "mod_code": [
        "ans [ cnt ] = s [ l ] = s [ l ] ;",
        "puts ( ) ;"
      ],
      "err_line": 19,
      "err_msg": "too few arguments to function ‘int puts(const char*)’"
    },
    {
      "mod_line": [
        10,
        19,
        18
      ],
      "mod_code": [
        "ans [ cnt ] = s [ l ] = s [ l ] ;",
        "puts ( ) ;",
        "if ( l == r ) cnt [ cnt ] = s [ l ] = s [ l ] ;"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        18
      ],
      "mod_code": [
        "ans [ cnt ] = s [ l ] = s [ l ] ;",
        "if ( l == r ) cnt [ cnt ] = s [ l ] = s [ l ] ;"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        18,
        19
      ],
      "mod_code": [
        "ans [ cnt ] = s [ r ] = s [ r ] ;",
        "if ( l == r ) ans [ cnt ] = s [ l ] = s [ l ] ;",
        "puts ( ) ;"
      ],
      "err_line": 19,
      "err_msg": "too few arguments to function ‘int puts(const char*)’"
    },
    {
      "mod_line": [
        13,
        19
      ],
      "mod_code": [
        "ans [ cnt ] = s [ r ] = s [ r ] ;",
        "puts ( ) ;"
      ],
      "err_line": 19,
      "err_msg": "too few arguments to function ‘int puts(const char*)’"
    },
    {
      "mod_line": [
        13,
        19,
        18
      ],
      "mod_code": [
        "ans [ cnt ] = s [ r ] = s [ r ] ;",
        "puts ( ) ;",
        "if ( l == r ) cnt [ cnt ] = s [ l ] = s [ l ] ;"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        18
      ],
      "mod_code": [
        "ans [ cnt ] = s [ r ] = s [ r ] ;",
        "if ( l == r ) cnt [ cnt ] = s [ l ] = s [ l ] ;"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        18,
        19
      ],
      "mod_code": [
        "if ( l == r ) ans [ cnt ] = s [ l ] = s [ l ] ;",
        "puts ( ) ;"
      ],
      "err_line": 19,
      "err_msg": "too few arguments to function ‘int puts(const char*)’"
    },
    {
      "mod_line": [
        19,
        18
      ],
      "mod_code": [
        "puts ( ) ;",
        "if ( l == r ) cnt [ cnt ] = s [ l ] = s [ l ] ;"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}