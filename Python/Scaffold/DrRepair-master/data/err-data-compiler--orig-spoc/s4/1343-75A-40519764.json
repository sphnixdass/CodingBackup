{
  "meta": {
    "index": 1343,
    "hitid": "37OPIVELUUXCNI3SHEJQMQYWFJ9HAJ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "75A",
    "subid": "40519764"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long long integers a , b",
      "code": "long long int a , b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a read b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create long long integer c with c = a + b",
      "code": "long long int c = a + b ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create long long integers a_ , b_ , c_",
      "code": "long long int a_ , b_ , c_ ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set a_ to b_ to c_ to 0",
      "code": "a_ = b_ = c_ = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "while a is true",
      "code": "while ( a )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if a % 10 is true , set a_ to ( 10 * a_ ) + ( a % 10 )",
      "code": "if ( a % 10 ) { a_ = ( 10 * a_ ) + ( a % 10 ) ; }",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set a to a / 10",
      "code": "a /= 10 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "while b is true",
      "code": "while ( b )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if b % 10 , set b_ to 10 * b_ + ( b % 10 )",
      "code": "if ( b % 10 ) { b_ = 10 * b_ + ( b % 10 ) ; }",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set b to b / 10",
      "code": "b /= 10 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "while c is true",
      "code": "while ( c )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if c % 10 , set c_ to 10 * c_ + ( c % 10 )",
      "code": "if ( c % 10 ) { c_ = 10 * c_ + ( c % 10 ) ; }",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set c to c / 10",
      "code": "c /= 10 ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "while a_ is true",
      "code": "while ( a_ )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "set a to 10 * a + ( a_ % 10 )",
      "code": "a = 10 * a + ( a_ % 10 ) ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "set a_ to a_ / 10",
      "code": "a_ /= 10 ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "while b_",
      "code": "while ( b_ )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "set b to 10 * b + ( b_ % 10 )",
      "code": "b = 10 * b + ( b_ % 10 ) ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "set b_ to b_ / 10",
      "code": "b_ /= 10 ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "while c_",
      "code": "while ( c_ )",
      "indent": 1
    },
    {
      "line": 27,
      "text": "set c to 10 * c + ( c_ % 10 )",
      "code": "c = 10 * c + ( c_ % 10 ) ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "set c_ to c_ / 10",
      "code": "c_ /= 10 ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "if a + b is c",
      "code": "if ( a + b == c )",
      "indent": 1
    },
    {
      "line": 31,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 33,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        31,
        33,
        2,
        32
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "a >> a >> b ;",
        "else else"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        31,
        33,
        18,
        32
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "while ( ! a_ )",
        "else else"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        31,
        33,
        32
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "else else"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        31,
        33,
        32,
        10
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "else else",
        "while ( b == true )"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        31,
        2,
        18,
        32
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "a >> a >> b ;",
        "while ( ! a_ )",
        "else else"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        31,
        2,
        32
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "a >> a >> b ;",
        "else else"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        31,
        2,
        32,
        10
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "a >> a >> b ;",
        "else else",
        "while ( b == true )"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        31,
        18,
        32
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "while ( ! a_ )",
        "else else"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        31,
        18,
        32,
        10
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "while ( ! a_ )",
        "else else",
        "while ( b == true )"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        31,
        32
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "else else"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        31,
        32,
        10
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "else else",
        "while ( b == true )"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        33,
        2,
        18,
        32
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "a >> a >> b ;",
        "while ( ! a_ )",
        "else else"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        33,
        2,
        32
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "a >> a >> b ;",
        "else else"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        33,
        2,
        32,
        10
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "a >> a >> b ;",
        "else else",
        "while ( b == true )"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        33,
        18,
        32
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "while ( ! a_ )",
        "else else"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        33,
        18,
        32,
        10
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "while ( ! a_ )",
        "else else",
        "while ( b == true )"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        33,
        32
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "else else"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        33,
        32,
        10
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "else else",
        "while ( b == true )"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        18,
        32
      ],
      "mod_code": [
        "a >> a >> b ;",
        "while ( ! a_ )",
        "else else"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        18,
        32,
        10
      ],
      "mod_code": [
        "a >> a >> b ;",
        "while ( ! a_ )",
        "else else",
        "while ( b == true )"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        32
      ],
      "mod_code": [
        "a >> a >> b ;",
        "else else"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        32,
        10
      ],
      "mod_code": [
        "a >> a >> b ;",
        "else else",
        "while ( b == true )"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        18,
        32
      ],
      "mod_code": [
        "while ( ! a_ )",
        "else else"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        18,
        32,
        10
      ],
      "mod_code": [
        "while ( ! a_ )",
        "else else",
        "while ( b == true )"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        32,
        10
      ],
      "mod_code": [
        "else else",
        "while ( b == true )"
      ],
      "err_line": 32,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}