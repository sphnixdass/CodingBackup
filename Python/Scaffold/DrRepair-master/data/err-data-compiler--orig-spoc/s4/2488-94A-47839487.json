{
  "meta": {
    "index": 2488,
    "hitid": "3BO3NEOQM0BCJDECNW1BM2ZBGJNIAN",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "94A",
    "subid": "47839487"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "binarycoding = string",
      "code": "string binarycoding ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read binarycoding",
      "code": "cin >> binarycoding ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "v = string vector of size 10",
      "code": "vector < string > v ( 10 ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read 10 values into v",
      "code": "for ( int i = 0 ; i < 10 ; i ++ ) cin >> v [ i ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "c = int with c = 0",
      "code": "int c = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "temp = string",
      "code": "string temp ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to size of binarycoding inclusive",
      "code": "for ( int i = 0 ; i <= binarycoding . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if c is 10",
      "code": "if ( c == 10 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set c to 0",
      "code": "c = 0 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "for i = 0 to size of v",
      "code": "for ( int i = 0 ; i < v . size ( ) ; i ++ )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if v [ i ] is temp",
      "code": "if ( v [ i ] == temp )",
      "indent": 4
    },
    {
      "line": 12,
      "text": "print i",
      "code": "cout << i ;",
      "indent": 5
    },
    {
      "line": 13,
      "text": "break",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 16,
      "text": "clear temp",
      "code": "temp . clear ( ) ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "increment c",
      "code": "c ++ ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "append binarycoding [ i ] to temp",
      "code": "temp += binarycoding [ i ] ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( binarycoding ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "vector < string > v [ 10 ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "char temp ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::basic_string<char>’ and ‘char’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i <= binarycoding . size ( ) ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( v [ i ] == ' temp ' )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::basic_string<char>’ and ‘int’)"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        8,
        13
      ],
      "mod_code": [
        "cout << i << endl ;",
        "if ( ! c )",
        "break break ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        8,
        13,
        16
      ],
      "mod_code": [
        "cout << i << endl ;",
        "if ( ! c )",
        "break break ;",
        "temp = temp ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        8,
        13,
        10
      ],
      "mod_code": [
        "cout << i << endl ;",
        "if ( ! c )",
        "break break ;",
        "for ( i = 0 ; i < v . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "cout << i << endl ;",
        "break break ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        13,
        16
      ],
      "mod_code": [
        "cout << i << endl ;",
        "break break ;",
        "temp = temp ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        13,
        16,
        10
      ],
      "mod_code": [
        "cout << i << endl ;",
        "break break ;",
        "temp = temp ;",
        "for ( i = 0 ; i < v . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        13,
        10
      ],
      "mod_code": [
        "cout << i << endl ;",
        "break break ;",
        "for ( i = 0 ; i < v . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "if ( ! c )",
        "break break ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        8,
        13,
        12
      ],
      "mod_code": [
        "if ( ! c )",
        "break break ;",
        "cout << i << \" \\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        8,
        13,
        12,
        16
      ],
      "mod_code": [
        "if ( ! c )",
        "break break ;",
        "cout << i << \" \\n \" ;",
        "temp = temp ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        8,
        13,
        12,
        10
      ],
      "mod_code": [
        "if ( ! c )",
        "break break ;",
        "cout << i << \" \\n \" ;",
        "for ( i = 0 ; i < v . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        8,
        13,
        16
      ],
      "mod_code": [
        "if ( ! c )",
        "break break ;",
        "temp = temp ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        8,
        13,
        16,
        10
      ],
      "mod_code": [
        "if ( ! c )",
        "break break ;",
        "temp = temp ;",
        "for ( i = 0 ; i < v . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        8,
        13,
        10
      ],
      "mod_code": [
        "if ( ! c )",
        "break break ;",
        "for ( i = 0 ; i < v . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        12
      ],
      "mod_code": [
        "break break ;",
        "cout << i << \" \\n \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        12,
        16
      ],
      "mod_code": [
        "break break ;",
        "cout << i << \" \\n \" ;",
        "temp = temp ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        12,
        16,
        10
      ],
      "mod_code": [
        "break break ;",
        "cout << i << \" \\n \" ;",
        "temp = temp ;",
        "for ( i = 0 ; i < v . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        12,
        10
      ],
      "mod_code": [
        "break break ;",
        "cout << i << \" \\n \" ;",
        "for ( i = 0 ; i < v . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        16
      ],
      "mod_code": [
        "break break ;",
        "temp = temp ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        16,
        10
      ],
      "mod_code": [
        "break break ;",
        "temp = temp ;",
        "for ( i = 0 ; i < v . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        10
      ],
      "mod_code": [
        "break break ;",
        "for ( i = 0 ; i < v . size ( ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}