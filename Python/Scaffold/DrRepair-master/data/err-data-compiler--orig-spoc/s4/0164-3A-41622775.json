{
  "meta": {
    "index": 164,
    "hitid": "37S0QRNUFBA5BJ9KHC56DMZ2MX288G",
    "workerid": "AIWEXPJAU66D9",
    "probid": "3A",
    "subid": "41622775"
  },
  "lines": [
    {
      "line": 0,
      "text": "let s and t be strings",
      "code": "string s , t ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "xs , ys , xt , yt and n = integers",
      "code": "int xs , ys , xt , yt , n ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "l is an array of strings of length 200",
      "code": "string l [ 200 ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "read s and t",
      "code": "cin >> s >> t ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "xs = s [ 0 ] - ' a ' + 1",
      "code": "xs = s [ 0 ] - ' a ' + 1 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "ys = s [ 1 ] - ' 1 ' + 1",
      "code": "ys = s [ 1 ] - ' 1 ' + 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "xt = t [ 0 ] - ' a ' + 1",
      "code": "xt = t [ 0 ] - ' a ' + 1 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "yt = t [ 1 ] - ' 1 ' + 1",
      "code": "yt = t [ 1 ] - ' 1 ' + 1 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "while xs ! = xt or ys ! = yt",
      "code": "while ( xs != xt or ys != yt )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if xt > xs and yt > ys",
      "code": "if ( xt > xs and yt > ys )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set l [ n ] to \" RU \"",
      "code": "l [ n ] = \" RU \" ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "increase n",
      "code": "n ++ ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increase xs",
      "code": "xs ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "increase ys",
      "code": "ys ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else if xt > xs and yt < ys",
      "code": "else if ( xt > xs and yt < ys )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set l [ n ] to \" RD \"",
      "code": "l [ n ] = \" RD \" ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "increase n by one",
      "code": "n ++ ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "increment xs",
      "code": "xs ++ ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "decrement ys",
      "code": "ys -- ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "else if xt < xs and yt is greater than ys",
      "code": "else if ( xt < xs and yt > ys )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "set l [ n ] to \" LU \"",
      "code": "l [ n ] = \" LU \" ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "increase n",
      "code": "n ++ ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "decrement xs",
      "code": "xs -- ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "increase ys by one",
      "code": "ys ++ ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "else if xt < xs and yt is less than ys",
      "code": "else if ( xt < xs and yt < ys )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "set l [ n ] to \" LD \"",
      "code": "l [ n ] = \" LD \" ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "increase n",
      "code": "n ++ ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "decrement xs",
      "code": "xs -- ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "decrement ys",
      "code": "ys -- ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "else if xt > xs and yt is equal to ys",
      "code": "else if ( xt > xs and yt == ys )",
      "indent": 2
    },
    {
      "line": 31,
      "text": "set l [ n ] to \" R \"",
      "code": "l [ n ] = \" R \" ;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "increment n",
      "code": "n ++ ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "increase xs",
      "code": "xs ++ ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "else if xt < xs and yt is equal to ys",
      "code": "else if ( xt < xs and yt == ys )",
      "indent": 2
    },
    {
      "line": 35,
      "text": "set l [ n ] to \" L \"",
      "code": "l [ n ] = \" L \" ;",
      "indent": 3
    },
    {
      "line": 36,
      "text": "increase n by one",
      "code": "n ++ ;",
      "indent": 3
    },
    {
      "line": 37,
      "text": "decrease xs by one",
      "code": "xs -- ;",
      "indent": 3
    },
    {
      "line": 38,
      "text": "else if xt is equal to xs and yt is greater than ys",
      "code": "else if ( xt == xs and yt > ys )",
      "indent": 2
    },
    {
      "line": 39,
      "text": "set l [ n ] to \" U \"",
      "code": "l [ n ] = \" U \" ;",
      "indent": 3
    },
    {
      "line": 40,
      "text": "increment n",
      "code": "n ++ ;",
      "indent": 3
    },
    {
      "line": 41,
      "text": "increase ys by one",
      "code": "ys ++ ;",
      "indent": 3
    },
    {
      "line": 42,
      "text": "else if xt = xs and yt < ys",
      "code": "else if ( xt == xs and yt < ys )",
      "indent": 2
    },
    {
      "line": 43,
      "text": "set l [ n ] to \" D \"",
      "code": "l [ n ] = \" D \" ;",
      "indent": 3
    },
    {
      "line": 44,
      "text": "increase n",
      "code": "n ++ ;",
      "indent": 3
    },
    {
      "line": 45,
      "text": "decrease ys by one",
      "code": "ys -- ;",
      "indent": 3
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 48,
      "text": "print n and a new line",
      "code": "cout << n << endl ;",
      "indent": 1
    },
    {
      "line": 49,
      "text": "print n elements of l with a new line after each one",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cout << l [ i ] << endl ; }",
      "indent": 1
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 51,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string s , t t ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘t’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string a [ 200 ] ;"
      ],
      "err_line": 11,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s >> t ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "l [ n ] = ' L \" ;"
      ],
      "err_line": 35,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "l [ n ] = ' U \" ;"
      ],
      "err_line": 39,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        43
      ],
      "mod_code": [
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 43,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        31
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = \" -1 \" ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        31,
        35
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = \" -1 \" ;",
        "l [ n ] = ' L \" ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        31,
        35,
        39
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = \" -1 \" ;",
        "l [ n ] = ' L \" ;",
        "l [ n ] = ' U \" ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        31,
        35,
        9
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = \" -1 \" ;",
        "l [ n ] = ' L \" ;",
        "while ( xs != xt || xs != yt )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        31,
        35,
        43
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = \" -1 \" ;",
        "l [ n ] = ' L \" ;",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        31,
        39
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = \" -1 \" ;",
        "l [ n ] = ' U \" ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        31,
        39,
        9
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = \" -1 \" ;",
        "l [ n ] = ' U \" ;",
        "while ( xs != xt || xs != yt )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        31,
        39,
        43
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = \" -1 \" ;",
        "l [ n ] = ' U \" ;",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        31,
        9
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = \" -1 \" ;",
        "while ( xs != xt || xs != yt )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        31,
        9,
        43
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = \" -1 \" ;",
        "while ( xs != xt || xs != yt )",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        31,
        43
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = \" -1 \" ;",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        35
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = ' L \" ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        35,
        39
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = ' L \" ;",
        "l [ n ] = ' U \" ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        35,
        39,
        9
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = ' L \" ;",
        "l [ n ] = ' U \" ;",
        "while ( xs != xt || xs != yt )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        35,
        39,
        43
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = ' L \" ;",
        "l [ n ] = ' U \" ;",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        35,
        9
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = ' L \" ;",
        "while ( xs != xt || xs != yt )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        35,
        9,
        43
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = ' L \" ;",
        "while ( xs != xt || xs != yt )",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        35,
        43
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = ' L \" ;",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        39
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = ' U \" ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        39,
        9
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = ' U \" ;",
        "while ( xs != xt || xs != yt )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        39,
        9,
        43
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = ' U \" ;",
        "while ( xs != xt || xs != yt )",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        39,
        43
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = ' U \" ;",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "while ( xs != xt || xs != yt )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        9,
        43
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "while ( xs != xt || xs != yt )",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11,
        43
      ],
      "mod_code": [
        "l [ n ] = ' RU \" ;",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        31,
        35
      ],
      "mod_code": [
        "l [ n ] = \" -1 \" ;",
        "l [ n ] = ' L \" ;"
      ],
      "err_line": 35,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        31,
        35,
        39
      ],
      "mod_code": [
        "l [ n ] = \" -1 \" ;",
        "l [ n ] = ' L \" ;",
        "l [ n ] = ' U \" ;"
      ],
      "err_line": 35,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        31,
        35,
        39,
        9
      ],
      "mod_code": [
        "l [ n ] = \" -1 \" ;",
        "l [ n ] = ' L \" ;",
        "l [ n ] = ' U \" ;",
        "while ( xs != xt || xs != yt )"
      ],
      "err_line": 35,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        31,
        35,
        39,
        43
      ],
      "mod_code": [
        "l [ n ] = \" -1 \" ;",
        "l [ n ] = ' L \" ;",
        "l [ n ] = ' U \" ;",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 35,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        31,
        35,
        9
      ],
      "mod_code": [
        "l [ n ] = \" -1 \" ;",
        "l [ n ] = ' L \" ;",
        "while ( xs != xt || xs != yt )"
      ],
      "err_line": 35,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        31,
        35,
        9,
        43
      ],
      "mod_code": [
        "l [ n ] = \" -1 \" ;",
        "l [ n ] = ' L \" ;",
        "while ( xs != xt || xs != yt )",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 35,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        31,
        35,
        43
      ],
      "mod_code": [
        "l [ n ] = \" -1 \" ;",
        "l [ n ] = ' L \" ;",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 35,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        31,
        39
      ],
      "mod_code": [
        "l [ n ] = \" -1 \" ;",
        "l [ n ] = ' U \" ;"
      ],
      "err_line": 39,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        31,
        39,
        9
      ],
      "mod_code": [
        "l [ n ] = \" -1 \" ;",
        "l [ n ] = ' U \" ;",
        "while ( xs != xt || xs != yt )"
      ],
      "err_line": 39,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        31,
        39,
        9,
        43
      ],
      "mod_code": [
        "l [ n ] = \" -1 \" ;",
        "l [ n ] = ' U \" ;",
        "while ( xs != xt || xs != yt )",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 39,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        31,
        39,
        43
      ],
      "mod_code": [
        "l [ n ] = \" -1 \" ;",
        "l [ n ] = ' U \" ;",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 39,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        31,
        9,
        43
      ],
      "mod_code": [
        "l [ n ] = \" -1 \" ;",
        "while ( xs != xt || xs != yt )",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 43,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        31,
        43
      ],
      "mod_code": [
        "l [ n ] = \" -1 \" ;",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 43,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        35,
        39
      ],
      "mod_code": [
        "l [ n ] = ' L \" ;",
        "l [ n ] = ' U \" ;"
      ],
      "err_line": 35,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        35,
        39,
        9
      ],
      "mod_code": [
        "l [ n ] = ' L \" ;",
        "l [ n ] = ' U \" ;",
        "while ( xs != xt || xs != yt )"
      ],
      "err_line": 35,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        35,
        39,
        9,
        43
      ],
      "mod_code": [
        "l [ n ] = ' L \" ;",
        "l [ n ] = ' U \" ;",
        "while ( xs != xt || xs != yt )",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 35,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        35,
        39,
        43
      ],
      "mod_code": [
        "l [ n ] = ' L \" ;",
        "l [ n ] = ' U \" ;",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 35,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        35,
        9
      ],
      "mod_code": [
        "l [ n ] = ' L \" ;",
        "while ( xs != xt || xs != yt )"
      ],
      "err_line": 35,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        35,
        9,
        43
      ],
      "mod_code": [
        "l [ n ] = ' L \" ;",
        "while ( xs != xt || xs != yt )",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 35,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        35,
        43
      ],
      "mod_code": [
        "l [ n ] = ' L \" ;",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 35,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        39,
        9
      ],
      "mod_code": [
        "l [ n ] = ' U \" ;",
        "while ( xs != xt || xs != yt )"
      ],
      "err_line": 39,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        39,
        9,
        43
      ],
      "mod_code": [
        "l [ n ] = ' U \" ;",
        "while ( xs != xt || xs != yt )",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 39,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        39,
        43
      ],
      "mod_code": [
        "l [ n ] = ' U \" ;",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 39,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        43
      ],
      "mod_code": [
        "while ( xs != xt || xs != yt )",
        "l [ n ] = ' D \" ;"
      ],
      "err_line": 43,
      "err_msg": "missing terminating ' character"
    }
  ]
}