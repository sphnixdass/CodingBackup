{
  "meta": {
    "index": 629,
    "hitid": "386659BNTLB5IUKWNNJC5X6CPTK102",
    "workerid": "AIWEXPJAU66D9",
    "probid": "14A",
    "subid": "45251107"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n and m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "vec is vector of char of size n * m",
      "code": "vector < char > vec ( n * m ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for integer j = 0 to m exclusive read vec [ j + i * m ]",
      "code": "for ( int j = 0 ; j < m ; j ++ ) { cin >> vec [ j + i * m ] ; }",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "create integer h1 with value - 1",
      "code": "int h1 = - 1 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for integer j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if vec [ j + i * m ] is equal to ' * '",
      "code": "if ( vec [ j + i * m ] == ' * ' )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "h1 = i",
      "code": "h1 = i ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if h1 is equal to i",
      "code": "if ( h1 == i ) break ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "set integer h2 to - 1",
      "code": "int h2 = - 1 ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for integer i = n - 1 to 0 incluisive , decrementing i",
      "code": "for ( int i = n - 1 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for integer j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if vec [ j + i * m ] is equal to ' * '",
      "code": "if ( vec [ j + i * m ] == ' * ' )",
      "indent": 3
    },
    {
      "line": 21,
      "text": "set value of h2 to i",
      "code": "h2 = i ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if h2 is equal to i",
      "code": "if ( h2 == i ) break ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "create integer s1 with value - 1",
      "code": "int s1 = - 1 ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "for integer j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 1
    },
    {
      "line": 29,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 30,
      "text": "if vec [ j + i * m ] is equal to ' * '",
      "code": "if ( vec [ j + i * m ] == ' * ' )",
      "indent": 3
    },
    {
      "line": 31,
      "text": "set value of s1 to j",
      "code": "s1 = j ;",
      "indent": 4
    },
    {
      "line": 32,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 35,
      "text": "if s1 is equal to j , break",
      "code": "if ( s1 == j ) break ;",
      "indent": 2
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 37,
      "text": "set integer s2 to - 1",
      "code": "int s2 = - 1 ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "for integer j = m - 1 to 0 inclusive , decrementing j",
      "code": "for ( int j = m - 1 ; j >= 0 ; j -- )",
      "indent": 1
    },
    {
      "line": 39,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 40,
      "text": "if vec [ j + i * m ] is equal to ' * '",
      "code": "if ( vec [ j + i * m ] == ' * ' )",
      "indent": 3
    },
    {
      "line": 41,
      "text": "set s2 to j",
      "code": "s2 = j ;",
      "indent": 4
    },
    {
      "line": 42,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 45,
      "text": "if s2 is equal to j , break",
      "code": "if ( s2 == j ) break ;",
      "indent": 2
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 47,
      "text": "increment h1 in the loop until h1 < = h2",
      "code": "for ( h1 ; h1 <= h2 ; h1 ++ )",
      "indent": 1
    },
    {
      "line": 48,
      "text": "for q = s1 to s2 inclusive",
      "code": "for ( int q = s1 ; q <= s2 ; q ++ )",
      "indent": 2
    },
    {
      "line": 49,
      "text": "if q is equal to s2",
      "code": "if ( q == s2 )",
      "indent": 3
    },
    {
      "line": 50,
      "text": "print vec [ q + h1 * m ] and a new line",
      "code": "cout << vec [ q + h1 * m ] << endl ;",
      "indent": 4
    },
    {
      "line": 51,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 52,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 53,
      "text": "print vec [ q + h1 * m ]",
      "code": "cout << vec [ q + h1 * m ] ;",
      "indent": 3
    },
    {
      "line": 54,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 55,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 57,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( h1 == i )"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "if ( h2 == i )"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 2,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int h1 create ;"
      ],
      "err_line": 7,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( s == i )"
      ],
      "err_line": 15,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "h2 = - 1 ;"
      ],
      "err_line": 17,
      "err_msg": "‘h2’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "* h2 = i ;"
      ],
      "err_line": 21,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "if ( h2 == n )"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "int s1 create ;"
      ],
      "err_line": 27,
      "err_msg": "expected initializer before ‘create’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "* s1 = j ;"
      ],
      "err_line": 31,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "s2 = - 1 ;"
      ],
      "err_line": 37,
      "err_msg": "‘s2’ was not declared in this scope"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 39,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "s2 to ;"
      ],
      "err_line": 41,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 42,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        48
      ],
      "mod_code": [
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 48,
      "err_msg": "‘q’ was not declared in this scope"
    },
    {
      "mod_line": [
        51
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 51,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "if ( h1 == i )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        15,
        25
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "if ( h1 == i )",
        "if ( h2 == i )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        15,
        25,
        47
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "if ( h1 == i )",
        "if ( h2 == i )",
        "for ( int h1 = h2 ; ; h1 ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        15,
        25,
        53
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "if ( h1 == i )",
        "if ( h2 == i )",
        "cout << vec [ q + h1 * m ] << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        15,
        25,
        48
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "if ( h1 == i )",
        "if ( h2 == i )",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        15,
        47
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "if ( h1 == i )",
        "for ( int h1 = h2 ; ; h1 ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        15,
        47,
        53
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "if ( h1 == i )",
        "for ( int h1 = h2 ; ; h1 ++ )",
        "cout << vec [ q + h1 * m ] << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        15,
        47,
        48
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "if ( h1 == i )",
        "for ( int h1 = h2 ; ; h1 ++ )",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        15,
        53
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "if ( h1 == i )",
        "cout << vec [ q + h1 * m ] << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        15,
        53,
        48
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "if ( h1 == i )",
        "cout << vec [ q + h1 * m ] << endl ;",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        15,
        48
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "if ( h1 == i )",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        25
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "if ( h2 == i )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        25,
        47
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "if ( h2 == i )",
        "for ( int h1 = h2 ; ; h1 ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        25,
        47,
        53
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "if ( h2 == i )",
        "for ( int h1 = h2 ; ; h1 ++ )",
        "cout << vec [ q + h1 * m ] << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        25,
        47,
        48
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "if ( h2 == i )",
        "for ( int h1 = h2 ; ; h1 ++ )",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        25,
        53
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "if ( h2 == i )",
        "cout << vec [ q + h1 * m ] << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        25,
        53,
        48
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "if ( h2 == i )",
        "cout << vec [ q + h1 * m ] << endl ;",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        25,
        48
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "if ( h2 == i )",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        47
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "for ( int h1 = h2 ; ; h1 ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        47,
        53
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "for ( int h1 = h2 ; ; h1 ++ )",
        "cout << vec [ q + h1 * m ] << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        47,
        53,
        48
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "for ( int h1 = h2 ; ; h1 ++ )",
        "cout << vec [ q + h1 * m ] << endl ;",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        47,
        48
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "for ( int h1 = h2 ; ; h1 ++ )",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        53
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "cout << vec [ q + h1 * m ] << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        53,
        48
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "cout << vec [ q + h1 * m ] << endl ;",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        48
      ],
      "mod_code": [
        "vector < char > vec ( n ) * m ;",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘,’ or ‘;’ before ‘*’ token"
    },
    {
      "mod_line": [
        15,
        25
      ],
      "mod_code": [
        "if ( h1 == i )",
        "if ( h2 == i )"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        25,
        47
      ],
      "mod_code": [
        "if ( h1 == i )",
        "if ( h2 == i )",
        "for ( int h1 = h2 ; ; h1 ++ )"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        25,
        47,
        53
      ],
      "mod_code": [
        "if ( h1 == i )",
        "if ( h2 == i )",
        "for ( int h1 = h2 ; ; h1 ++ )",
        "cout << vec [ q + h1 * m ] << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        25,
        47,
        48
      ],
      "mod_code": [
        "if ( h1 == i )",
        "if ( h2 == i )",
        "for ( int h1 = h2 ; ; h1 ++ )",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        25,
        53
      ],
      "mod_code": [
        "if ( h1 == i )",
        "if ( h2 == i )",
        "cout << vec [ q + h1 * m ] << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        25,
        53,
        48
      ],
      "mod_code": [
        "if ( h1 == i )",
        "if ( h2 == i )",
        "cout << vec [ q + h1 * m ] << endl ;",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        25,
        48
      ],
      "mod_code": [
        "if ( h1 == i )",
        "if ( h2 == i )",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        47
      ],
      "mod_code": [
        "if ( h1 == i )",
        "for ( int h1 = h2 ; ; h1 ++ )"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        47,
        53
      ],
      "mod_code": [
        "if ( h1 == i )",
        "for ( int h1 = h2 ; ; h1 ++ )",
        "cout << vec [ q + h1 * m ] << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        47,
        53,
        48
      ],
      "mod_code": [
        "if ( h1 == i )",
        "for ( int h1 = h2 ; ; h1 ++ )",
        "cout << vec [ q + h1 * m ] << endl ;",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        47,
        48
      ],
      "mod_code": [
        "if ( h1 == i )",
        "for ( int h1 = h2 ; ; h1 ++ )",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        53
      ],
      "mod_code": [
        "if ( h1 == i )",
        "cout << vec [ q + h1 * m ] << endl ;"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        53,
        48
      ],
      "mod_code": [
        "if ( h1 == i )",
        "cout << vec [ q + h1 * m ] << endl ;",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        48
      ],
      "mod_code": [
        "if ( h1 == i )",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        47
      ],
      "mod_code": [
        "if ( h2 == i )",
        "for ( int h1 = h2 ; ; h1 ++ )"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        47,
        53
      ],
      "mod_code": [
        "if ( h2 == i )",
        "for ( int h1 = h2 ; ; h1 ++ )",
        "cout << vec [ q + h1 * m ] << endl ;"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        47,
        53,
        48
      ],
      "mod_code": [
        "if ( h2 == i )",
        "for ( int h1 = h2 ; ; h1 ++ )",
        "cout << vec [ q + h1 * m ] << endl ;",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        47,
        48
      ],
      "mod_code": [
        "if ( h2 == i )",
        "for ( int h1 = h2 ; ; h1 ++ )",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        53
      ],
      "mod_code": [
        "if ( h2 == i )",
        "cout << vec [ q + h1 * m ] << endl ;"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        53,
        48
      ],
      "mod_code": [
        "if ( h2 == i )",
        "cout << vec [ q + h1 * m ] << endl ;",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25,
        48
      ],
      "mod_code": [
        "if ( h2 == i )",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        47,
        53,
        48
      ],
      "mod_code": [
        "for ( int h1 = h2 ; ; h1 ++ )",
        "cout << vec [ q + h1 * m ] << endl ;",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 48,
      "err_msg": "‘q’ was not declared in this scope"
    },
    {
      "mod_line": [
        47,
        48
      ],
      "mod_code": [
        "for ( int h1 = h2 ; ; h1 ++ )",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 48,
      "err_msg": "‘q’ was not declared in this scope"
    },
    {
      "mod_line": [
        53,
        48
      ],
      "mod_code": [
        "cout << vec [ q + h1 * m ] << endl ;",
        "for ( q = s1 ; q <= s2 ; q ++ )"
      ],
      "err_line": 48,
      "err_msg": "‘q’ was not declared in this scope"
    }
  ]
}