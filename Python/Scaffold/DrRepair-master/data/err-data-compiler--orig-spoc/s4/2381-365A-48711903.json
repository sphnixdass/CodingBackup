{
  "meta": {
    "index": 2381,
    "hitid": "3R5OYNIC2C39FV0P6RICQ4QFQMYPTM",
    "workerid": "ACI8PUCF5OPDC",
    "probid": "365A",
    "subid": "48711903"
  },
  "lines": [
    {
      "line": 0,
      "text": "define function f with integer a and k as arguments and returns a boolean value",
      "code": "bool fit ( int a , int k )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create boolean array arr with dimension k + 1",
      "code": "bool arr [ k + 1 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for integer i = 0 to k with increment i do set arr [ i ] to false",
      "code": "for ( int i = 0 ; i < k + 1 ; i ++ ) { arr [ i ] = false ; }",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while a greater than 0 do",
      "code": "while ( a > 0 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if a mod 10 less than or equal to k then set arr [ a mod 10 ] to true",
      "code": "if ( a % 10 <= k ) { arr [ a % 10 ] = true ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "divide a by 10",
      "code": "a = a / 10 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for integer i = 0 to k with increment i",
      "code": "for ( int i = 0 ; i < k + 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if arr [ i ] is equal to false then return false to calling statement",
      "code": "if ( arr [ i ] == false ) { return false ; }",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "return true to calling statement",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 13,
      "text": "create integers n , k",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "get n , k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "create integer array arr with dimension n",
      "code": "int arr [ n ] ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for integer i = 0 to n exclusive do get arr [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }",
      "indent": 1
    },
    {
      "line": 17,
      "text": "create integer counter with counter = 0",
      "code": "int counter = 0 ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if function fit ( arr [ i ] , k ) returns true then increment counter",
      "code": "if ( fit ( arr [ i ] , k ) ) { counter = counter + 1 ; }",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print counter",
      "code": "cout << counter << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool f ( int a , int k )"
      ],
      "err_line": 19,
      "err_msg": "‘fit’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool f ( int a , int k ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "bool f ( int a , int k )",
        "for ( int i = 0 ; i < k ; i ++ ) { arr [ i ] = false ; }"
      ],
      "err_line": 19,
      "err_msg": "‘fit’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        7
      ],
      "mod_code": [
        "bool f ( int a , int k )",
        "for ( int i = 0 ; i < k ; i ++ ) { arr [ i ] = false ; }",
        "for ( int i = 0 ; i < k ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘fit’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        7,
        10
      ],
      "mod_code": [
        "bool f ( int a , int k )",
        "for ( int i = 0 ; i < k ; i ++ ) { arr [ i ] = false ; }",
        "for ( int i = 0 ; i < k ; i ++ )",
        "cout << true ;"
      ],
      "err_line": 19,
      "err_msg": "‘fit’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        7,
        17
      ],
      "mod_code": [
        "bool f ( int a , int k )",
        "for ( int i = 0 ; i < k ; i ++ ) { arr [ i ] = false ; }",
        "for ( int i = 0 ; i < k ; i ++ )",
        "int counter = 1 ;"
      ],
      "err_line": 19,
      "err_msg": "‘fit’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        10
      ],
      "mod_code": [
        "bool f ( int a , int k )",
        "for ( int i = 0 ; i < k ; i ++ ) { arr [ i ] = false ; }",
        "cout << true ;"
      ],
      "err_line": 19,
      "err_msg": "‘fit’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        10,
        17
      ],
      "mod_code": [
        "bool f ( int a , int k )",
        "for ( int i = 0 ; i < k ; i ++ ) { arr [ i ] = false ; }",
        "cout << true ;",
        "int counter = 1 ;"
      ],
      "err_line": 19,
      "err_msg": "‘fit’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        2,
        17
      ],
      "mod_code": [
        "bool f ( int a , int k )",
        "for ( int i = 0 ; i < k ; i ++ ) { arr [ i ] = false ; }",
        "int counter = 1 ;"
      ],
      "err_line": 19,
      "err_msg": "‘fit’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "bool f ( int a , int k )",
        "for ( int i = 0 ; i < k ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘fit’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        7,
        10
      ],
      "mod_code": [
        "bool f ( int a , int k )",
        "for ( int i = 0 ; i < k ; i ++ )",
        "cout << true ;"
      ],
      "err_line": 19,
      "err_msg": "‘fit’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        7,
        10,
        17
      ],
      "mod_code": [
        "bool f ( int a , int k )",
        "for ( int i = 0 ; i < k ; i ++ )",
        "cout << true ;",
        "int counter = 1 ;"
      ],
      "err_line": 19,
      "err_msg": "‘fit’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        7,
        17
      ],
      "mod_code": [
        "bool f ( int a , int k )",
        "for ( int i = 0 ; i < k ; i ++ )",
        "int counter = 1 ;"
      ],
      "err_line": 19,
      "err_msg": "‘fit’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "bool f ( int a , int k )",
        "cout << true ;"
      ],
      "err_line": 19,
      "err_msg": "‘fit’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        10,
        17
      ],
      "mod_code": [
        "bool f ( int a , int k )",
        "cout << true ;",
        "int counter = 1 ;"
      ],
      "err_line": 19,
      "err_msg": "‘fit’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        17
      ],
      "mod_code": [
        "bool f ( int a , int k )",
        "int counter = 1 ;"
      ],
      "err_line": 19,
      "err_msg": "‘fit’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        10,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { arr [ i ] = false ; }",
        "for ( int i = 0 ; i < k ; i ++ )",
        "cout << true ;",
        "bool f ( int a , int k ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        7,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { arr [ i ] = false ; }",
        "for ( int i = 0 ; i < k ; i ++ )",
        "bool f ( int a , int k ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        7,
        0,
        17
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { arr [ i ] = false ; }",
        "for ( int i = 0 ; i < k ; i ++ )",
        "bool f ( int a , int k ) ;",
        "int counter = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        10,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { arr [ i ] = false ; }",
        "cout << true ;",
        "bool f ( int a , int k ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        10,
        0,
        17
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { arr [ i ] = false ; }",
        "cout << true ;",
        "bool f ( int a , int k ) ;",
        "int counter = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { arr [ i ] = false ; }",
        "bool f ( int a , int k ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0,
        17
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ ) { arr [ i ] = false ; }",
        "bool f ( int a , int k ) ;",
        "int counter = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        10,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ )",
        "cout << true ;",
        "bool f ( int a , int k ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        10,
        0,
        17
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ )",
        "cout << true ;",
        "bool f ( int a , int k ) ;",
        "int counter = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ )",
        "bool f ( int a , int k ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        0,
        17
      ],
      "mod_code": [
        "for ( int i = 0 ; i < k ; i ++ )",
        "bool f ( int a , int k ) ;",
        "int counter = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "cout << true ;",
        "bool f ( int a , int k ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0,
        17
      ],
      "mod_code": [
        "cout << true ;",
        "bool f ( int a , int k ) ;",
        "int counter = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        17
      ],
      "mod_code": [
        "bool f ( int a , int k ) ;",
        "int counter = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}