{
  "meta": {
    "index": 418,
    "hitid": "3UQVX1UPFSBC7F2S6RJQAGGHI1802X",
    "workerid": "A1APYLD4DUK33J",
    "probid": "996A",
    "subid": "48898730"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer array arr with arr = { 1 , 5 , 10 , 20 , 100 }",
      "code": "int arr [ ] = { 1 , 5 , 10 , 20 , 100 } ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integers count , n , m , i , j with count = 0",
      "code": "int count = 0 , n , m , i , j ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 4 to 0 inclusive , decrementing i",
      "code": "for ( i = 4 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if n is greater than or equal to arr [ i ]",
      "code": "if ( n >= arr [ i ] )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set m to n / arr [ i ]",
      "code": "m = n / arr [ i ] ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "set count to count + m",
      "code": "count = count + m ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "if n % arr [ i ] is 0",
      "code": "if ( n % arr [ i ] == 0 )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 11,
      "text": "set m to n / arr [ i ]",
      "code": "m = n / arr [ i ] ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "set n to n - ( m * arr [ i ] )",
      "code": "n = n - ( m * arr [ i ] ) ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print count print newline",
      "code": "cout << count << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        10,
        9
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "else else",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        10,
        9,
        11
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "else else",
        "break break ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        10,
        9,
        16
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "else else",
        "break break ;",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        10,
        9,
        6
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "else else",
        "break break ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        10,
        11
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "else else",
        "m /= arr [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        10,
        11,
        16
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "else else",
        "m /= arr [ i ] ;",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        10,
        11,
        6
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "else else",
        "m /= arr [ i ] ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        10,
        16
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "else else",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        10,
        16,
        6
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "else else",
        "cout << count ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        10,
        6
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "else else",
        "m /= arr [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "break break ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        9,
        11
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "break break ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        9,
        11,
        16
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "break break ;",
        "m /= arr [ i ] ;",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        9,
        11,
        6
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "break break ;",
        "m /= arr [ i ] ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        9,
        16
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "break break ;",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        9,
        16,
        6
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "break break ;",
        "cout << count ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        9,
        6
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "break break ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        16
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "m /= arr [ i ] ;",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        16,
        6
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "m /= arr [ i ] ;",
        "cout << count ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        6
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "m /= arr [ i ] ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        16,
        6
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "cout << count ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 5 , 10 , 20 , 100 } ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "else else",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        9,
        11
      ],
      "mod_code": [
        "else else",
        "break break ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        9,
        11,
        16
      ],
      "mod_code": [
        "else else",
        "break break ;",
        "m /= arr [ i ] ;",
        "cout << count ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        9,
        11,
        6
      ],
      "mod_code": [
        "else else",
        "break break ;",
        "m /= arr [ i ] ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        9,
        16
      ],
      "mod_code": [
        "else else",
        "break break ;",
        "cout << count ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        9,
        16,
        6
      ],
      "mod_code": [
        "else else",
        "break break ;",
        "cout << count ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        9,
        6
      ],
      "mod_code": [
        "else else",
        "break break ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "else else",
        "m /= arr [ i ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        11,
        16
      ],
      "mod_code": [
        "else else",
        "m /= arr [ i ] ;",
        "cout << count ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        11,
        16,
        6
      ],
      "mod_code": [
        "else else",
        "m /= arr [ i ] ;",
        "cout << count ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        11,
        6
      ],
      "mod_code": [
        "else else",
        "m /= arr [ i ] ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        16
      ],
      "mod_code": [
        "else else",
        "cout << count ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        16,
        6
      ],
      "mod_code": [
        "else else",
        "cout << count ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "else else",
        "m /= arr [ i ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "break break ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        11,
        16
      ],
      "mod_code": [
        "break break ;",
        "m /= arr [ i ] ;",
        "cout << count ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        11,
        16,
        6
      ],
      "mod_code": [
        "break break ;",
        "m /= arr [ i ] ;",
        "cout << count ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        11,
        6
      ],
      "mod_code": [
        "break break ;",
        "m /= arr [ i ] ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        16
      ],
      "mod_code": [
        "break break ;",
        "cout << count ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        16,
        6
      ],
      "mod_code": [
        "break break ;",
        "cout << count ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "break break ;",
        "m /= arr [ i ] ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}