{
  "meta": {
    "index": 83,
    "hitid": "35A1YQPVFEAFD72VS0AUERJPN365IJ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "3A",
    "subid": "48266012"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create character array c1 of size 2",
      "code": "char c1 [ 2 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create character array c2 of size 2",
      "code": "char c2 [ 2 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read c1 [ 0 ] read c1 [ 1 ]",
      "code": "cin >> c1 [ 0 ] >> c1 [ 1 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read c2 [ 0 ] read c2 [ 1 ]",
      "code": "cin >> c2 [ 0 ] >> c2 [ 1 ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create string vector ans",
      "code": "vector < string > ans ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "while c1 [ 0 ] is not c2 [ 0 ] or c1 [ 1 ] is not c2 [ 1 ]",
      "code": "while ( c1 [ 0 ] != c2 [ 0 ] || c1 [ 1 ] != c2 [ 1 ] )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if c1 [ 0 ] is less than c2 [ 0 ] and c1 [ 1 ] is less than c2 [ 1 ]",
      "code": "if ( c1 [ 0 ] < c2 [ 0 ] && c1 [ 1 ] < c2 [ 1 ] )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "add element \" RU \" to end of ans",
      "code": "ans . push_back ( \" RU \" ) ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "increment c1 [ 0 ]",
      "code": "c1 [ 0 ] ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "increment c1 [ 1 ]",
      "code": "c1 [ 1 ] ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if c1 [ 0 ] is less than c2 [ 0 ] and c1 [ 1 ] is c2 [ 1 ]",
      "code": "else if ( c1 [ 0 ] < c2 [ 0 ] && c1 [ 1 ] == c2 [ 1 ] )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "add element \" R \" to end of ans",
      "code": "ans . push_back ( \" R \" ) ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment c1 [ 0 ]",
      "code": "c1 [ 0 ] ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else if c1 [ 0 ] is less than c2 [ 0 ] and c1 [ 1 ] is greater than c2 [ 1 ]",
      "code": "else if ( c1 [ 0 ] < c2 [ 0 ] && c1 [ 1 ] > c2 [ 1 ] )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "add element \" RD \" to end of ans",
      "code": "ans . push_back ( \" RD \" ) ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "increment c1 [ 0 ]",
      "code": "c1 [ 0 ] ++ ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "decrement c1 [ 1 ]",
      "code": "c1 [ 1 ] -- ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else if c1 [ 0 ] is c2 [ 0 ] and c1 [ 1 ] is less than c2 [ 1 ]",
      "code": "else if ( c1 [ 0 ] == c2 [ 0 ] && c1 [ 1 ] < c2 [ 1 ] )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "add element \" U \" to end of ans",
      "code": "ans . push_back ( \" U \" ) ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "increment c1 [ 1 ]",
      "code": "c1 [ 1 ] ++ ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "else if c1 [ 0 ] is c2 [ 0 ] and c1 [ 1 ] is greater than c2 [ 1 ]",
      "code": "else if ( c1 [ 0 ] == c2 [ 0 ] && c1 [ 1 ] > c2 [ 1 ] )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "add element \" D \" to end of ans",
      "code": "ans . push_back ( \" D \" ) ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "decrement c1 [ 1 ]",
      "code": "c1 [ 1 ] -- ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "else if c1 [ 0 ] is greater than c2 [ 0 ] and c1 [ 1 ] is greater than c2 [ 1 ]",
      "code": "else if ( c1 [ 0 ] > c2 [ 0 ] && c1 [ 1 ] > c2 [ 1 ] )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "add element \" LD \" to end of ans",
      "code": "ans . push_back ( \" LD \" ) ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "decrement c1 [ 1 ]",
      "code": "c1 [ 1 ] -- ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "decrement c1 [ 0 ]",
      "code": "c1 [ 0 ] -- ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "else if c1 [ 0 ] is greater than c2 [ 0 ] and c1 [ 1 ] is c2 [ 1 ]",
      "code": "else if ( c1 [ 0 ] > c2 [ 0 ] && c1 [ 1 ] == c2 [ 1 ] )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "add element \" L \" to end of ans",
      "code": "ans . push_back ( \" L \" ) ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "increment c1 [ 0 ]",
      "code": "c1 [ 0 ] -- ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "else if c1 [ 0 ] is greater than c2 [ 0 ] and c1 [ 1 ] is less than c2 [ 1 ]",
      "code": "else if ( c1 [ 0 ] > c2 [ 0 ] && c1 [ 1 ] < c2 [ 1 ] )",
      "indent": 2
    },
    {
      "line": 32,
      "text": "add element \" LU \" to end of ans",
      "code": "ans . push_back ( \" LU \" ) ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "decrement c1 [ 0 ]",
      "code": "c1 [ 0 ] -- ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "increment c1 [ 1 ]",
      "code": "c1 [ 1 ] ++ ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 37,
      "text": "print size of ans print newline",
      "code": "cout << ans . size ( ) << endl ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "for i = 0 to size of ans exclusive , print ans [ i ] print newline",
      "code": "for ( int i = 0 ; i < ans . size ( ) ; i ++ ) { cout << ans [ i ] << endl ; }",
      "indent": 1
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char a [ 2 ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char a [ 2 ] ;"
      ],
      "err_line": 4,
      "err_msg": "‘c2’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> c1 [ 0 ] >> c1 [ 1 ] << endl ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator<<’ (operand types are ‘std::basic_istream<char>’ and ‘<unresolved overloaded function type>’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "vector < char > ans ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::vector<char>::value_type {aka char}’ [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "ans += \" RU \" ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "ans += \" R \" ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "ans . push ( \" RD \" ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘class std::vector<std::__cxx11::basic_string<char> >’ has no member named ‘push’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "ans += \" U \" ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "ans += \" D \" ;"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "ans . push ( \" LD \" ) ;"
      ],
      "err_line": 25,
      "err_msg": "‘class std::vector<std::__cxx11::basic_string<char> >’ has no member named ‘push’"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "ans += \" L \" ;"
      ],
      "err_line": 29,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "ans . push ( \" LU \" ) ;"
      ],
      "err_line": 32,
      "err_msg": "‘class std::vector<std::__cxx11::basic_string<char> >’ has no member named ‘push’"
    },
    {
      "mod_line": [
        30,
        1
      ],
      "mod_code": [
        "c1 [ 0 ] ++ ;",
        "char a [ 2 ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        1,
        7
      ],
      "mod_code": [
        "c1 [ 0 ] ++ ;",
        "char a [ 2 ] ;",
        "if ( c1 [ 0 ] < c2 [ 0 ] && c1 [ 1 ] <= c2 [ 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        1,
        7,
        22
      ],
      "mod_code": [
        "c1 [ 0 ] ++ ;",
        "char a [ 2 ] ;",
        "if ( c1 [ 0 ] < c2 [ 0 ] && c1 [ 1 ] <= c2 [ 1 ] )",
        "ans += \" D \" ;"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        1,
        7,
        6
      ],
      "mod_code": [
        "c1 [ 0 ] ++ ;",
        "char a [ 2 ] ;",
        "if ( c1 [ 0 ] < c2 [ 0 ] && c1 [ 1 ] <= c2 [ 1 ] )",
        "while ( c1 [ 0 ] != c2 [ 0 ] && c1 [ 1 ] != c2 [ 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        1,
        22
      ],
      "mod_code": [
        "c1 [ 0 ] ++ ;",
        "char a [ 2 ] ;",
        "ans += \" D \" ;"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        1,
        22,
        6
      ],
      "mod_code": [
        "c1 [ 0 ] ++ ;",
        "char a [ 2 ] ;",
        "ans += \" D \" ;",
        "while ( c1 [ 0 ] != c2 [ 0 ] && c1 [ 1 ] != c2 [ 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        1,
        6
      ],
      "mod_code": [
        "c1 [ 0 ] ++ ;",
        "char a [ 2 ] ;",
        "while ( c1 [ 0 ] != c2 [ 0 ] && c1 [ 1 ] != c2 [ 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        7,
        22
      ],
      "mod_code": [
        "c1 [ 0 ] ++ ;",
        "if ( c1 [ 0 ] < c2 [ 0 ] && c1 [ 1 ] <= c2 [ 1 ] )",
        "ans += \" D \" ;"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        30,
        7,
        22,
        6
      ],
      "mod_code": [
        "c1 [ 0 ] ++ ;",
        "if ( c1 [ 0 ] < c2 [ 0 ] && c1 [ 1 ] <= c2 [ 1 ] )",
        "ans += \" D \" ;",
        "while ( c1 [ 0 ] != c2 [ 0 ] && c1 [ 1 ] != c2 [ 1 ] )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        30,
        22
      ],
      "mod_code": [
        "c1 [ 0 ] ++ ;",
        "ans += \" D \" ;"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        30,
        22,
        6
      ],
      "mod_code": [
        "c1 [ 0 ] ++ ;",
        "ans += \" D \" ;",
        "while ( c1 [ 0 ] != c2 [ 0 ] && c1 [ 1 ] != c2 [ 1 ] )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "char a [ 2 ] ;",
        "if ( c1 [ 0 ] < c2 [ 0 ] && c1 [ 1 ] <= c2 [ 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        7,
        30
      ],
      "mod_code": [
        "char a [ 2 ] ;",
        "if ( c1 [ 0 ] < c2 [ 0 ] && c1 [ 1 ] <= c2 [ 1 ] )",
        "++ c1 [ 0 ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        7,
        30,
        22
      ],
      "mod_code": [
        "char a [ 2 ] ;",
        "if ( c1 [ 0 ] < c2 [ 0 ] && c1 [ 1 ] <= c2 [ 1 ] )",
        "++ c1 [ 0 ] ;",
        "ans += \" D \" ;"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        7,
        30,
        6
      ],
      "mod_code": [
        "char a [ 2 ] ;",
        "if ( c1 [ 0 ] < c2 [ 0 ] && c1 [ 1 ] <= c2 [ 1 ] )",
        "++ c1 [ 0 ] ;",
        "while ( c1 [ 0 ] != c2 [ 0 ] && c1 [ 1 ] != c2 [ 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        7,
        22
      ],
      "mod_code": [
        "char a [ 2 ] ;",
        "if ( c1 [ 0 ] < c2 [ 0 ] && c1 [ 1 ] <= c2 [ 1 ] )",
        "ans += \" D \" ;"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        7,
        22,
        6
      ],
      "mod_code": [
        "char a [ 2 ] ;",
        "if ( c1 [ 0 ] < c2 [ 0 ] && c1 [ 1 ] <= c2 [ 1 ] )",
        "ans += \" D \" ;",
        "while ( c1 [ 0 ] != c2 [ 0 ] && c1 [ 1 ] != c2 [ 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        7,
        6
      ],
      "mod_code": [
        "char a [ 2 ] ;",
        "if ( c1 [ 0 ] < c2 [ 0 ] && c1 [ 1 ] <= c2 [ 1 ] )",
        "while ( c1 [ 0 ] != c2 [ 0 ] && c1 [ 1 ] != c2 [ 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        30
      ],
      "mod_code": [
        "char a [ 2 ] ;",
        "++ c1 [ 0 ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        30,
        22
      ],
      "mod_code": [
        "char a [ 2 ] ;",
        "++ c1 [ 0 ] ;",
        "ans += \" D \" ;"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        30,
        22,
        6
      ],
      "mod_code": [
        "char a [ 2 ] ;",
        "++ c1 [ 0 ] ;",
        "ans += \" D \" ;",
        "while ( c1 [ 0 ] != c2 [ 0 ] && c1 [ 1 ] != c2 [ 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        30,
        6
      ],
      "mod_code": [
        "char a [ 2 ] ;",
        "++ c1 [ 0 ] ;",
        "while ( c1 [ 0 ] != c2 [ 0 ] && c1 [ 1 ] != c2 [ 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        22
      ],
      "mod_code": [
        "char a [ 2 ] ;",
        "ans += \" D \" ;"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        22,
        6
      ],
      "mod_code": [
        "char a [ 2 ] ;",
        "ans += \" D \" ;",
        "while ( c1 [ 0 ] != c2 [ 0 ] && c1 [ 1 ] != c2 [ 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "char a [ 2 ] ;",
        "while ( c1 [ 0 ] != c2 [ 0 ] && c1 [ 1 ] != c2 [ 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "‘c1’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        30,
        22
      ],
      "mod_code": [
        "if ( c1 [ 0 ] < c2 [ 0 ] && c1 [ 1 ] <= c2 [ 1 ] )",
        "++ c1 [ 0 ] ;",
        "ans += \" D \" ;"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        7,
        30,
        22,
        6
      ],
      "mod_code": [
        "if ( c1 [ 0 ] < c2 [ 0 ] && c1 [ 1 ] <= c2 [ 1 ] )",
        "++ c1 [ 0 ] ;",
        "ans += \" D \" ;",
        "while ( c1 [ 0 ] != c2 [ 0 ] && c1 [ 1 ] != c2 [ 1 ] )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        7,
        22
      ],
      "mod_code": [
        "if ( c1 [ 0 ] < c2 [ 0 ] && c1 [ 1 ] <= c2 [ 1 ] )",
        "ans += \" D \" ;"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        7,
        22,
        6
      ],
      "mod_code": [
        "if ( c1 [ 0 ] < c2 [ 0 ] && c1 [ 1 ] <= c2 [ 1 ] )",
        "ans += \" D \" ;",
        "while ( c1 [ 0 ] != c2 [ 0 ] && c1 [ 1 ] != c2 [ 1 ] )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        30,
        22
      ],
      "mod_code": [
        "++ c1 [ 0 ] ;",
        "ans += \" D \" ;"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        30,
        22,
        6
      ],
      "mod_code": [
        "++ c1 [ 0 ] ;",
        "ans += \" D \" ;",
        "while ( c1 [ 0 ] != c2 [ 0 ] && c1 [ 1 ] != c2 [ 1 ] )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        22,
        6
      ],
      "mod_code": [
        "ans += \" D \" ;",
        "while ( c1 [ 0 ] != c2 [ 0 ] && c1 [ 1 ] != c2 [ 1 ] )"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    }
  ]
}