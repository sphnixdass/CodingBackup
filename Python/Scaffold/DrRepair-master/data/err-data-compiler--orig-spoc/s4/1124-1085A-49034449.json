{
  "meta": {
    "index": 1124,
    "hitid": "3UOMW19E6D0O04GV0QE83OLUAD1C5X",
    "workerid": "A1AYVATMT88U1W",
    "probid": "1085A",
    "subid": "49034449"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let s , t be strings with t value as space",
      "code": "string s , t = \" \" ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let n , m , i , j be integers with values n is equal to ( ( s . size ( ) - 1 ) / 2 ) , m is equal to n + 1 , i is equal to n and j is equal to m respectively",
      "code": "int n = ( ( s . size ( ) - 1 ) / 2 ) , m = n + 1 , i = n , j = m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while ( i is greater than or equal to 0 )",
      "code": "while ( i >= 0 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "t is equal to ( t + ith element of array s )",
      "code": "t += s [ i ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if ( j is greater than or equal to s . size ( ) ) , then stop",
      "code": "if ( j >= s . size ( ) ) { break ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "t is equal to ( t + jth element of array s )",
      "code": "t += s [ j ] ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "decrease i value by 1",
      "code": "i -- ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increase j value by 1",
      "code": "j ++ ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print t and next line",
      "code": "cout << t << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int n , m , i , j = ( s . size ( ) - 1 ) , m = n + 1 , i = n + 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "t += s [ equal ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘<unresolved overloaded function type>’)"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "t += s [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        3,
        7,
        5
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "t += s [ i ] ;",
        "t += s [ equal ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        3,
        7,
        5,
        4
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "t += s [ i ] ;",
        "t += s [ equal ] ;",
        "while ( i >= ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        3,
        7,
        5,
        2
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "t += s [ i ] ;",
        "t += s [ equal ] ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        7,
        5,
        1
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "t += s [ i ] ;",
        "t += s [ equal ] ;",
        "string s , t = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        3,
        7,
        4
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "t += s [ i ] ;",
        "while ( i >= ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        3,
        7,
        4,
        2
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "t += s [ i ] ;",
        "while ( i >= ' 0 ' )",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        7,
        4,
        1
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "t += s [ i ] ;",
        "while ( i >= ' 0 ' )",
        "string s , t = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        3,
        7,
        2
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "t += s [ i ] ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        7,
        2,
        1
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "t += s [ i ] ;",
        "gets ( s ) ;",
        "string s , t = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        7,
        1
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "t += s [ i ] ;",
        "string s , t = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "t += s [ equal ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        3,
        5,
        4
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "t += s [ equal ] ;",
        "while ( i >= ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        3,
        5,
        4,
        2
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "t += s [ equal ] ;",
        "while ( i >= ' 0 ' )",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        5,
        4,
        1
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "t += s [ equal ] ;",
        "while ( i >= ' 0 ' )",
        "string s , t = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        3,
        5,
        2
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "t += s [ equal ] ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        5,
        2,
        1
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "t += s [ equal ] ;",
        "gets ( s ) ;",
        "string s , t = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        5,
        1
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "t += s [ equal ] ;",
        "string s , t = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "while ( i >= ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        3,
        4,
        2
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "while ( i >= ' 0 ' )",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        4,
        2,
        1
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "while ( i >= ' 0 ' )",
        "gets ( s ) ;",
        "string s , t = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        4,
        1
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "while ( i >= ' 0 ' )",
        "string s , t = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        2,
        1
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "gets ( s ) ;",
        "string s , t = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "int n , m , i , j , m = ( s . size ( ) - 1 ) , m = n + 1 , j = n + 1 ;",
        "string s , t = \" \" ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "t += s [ i ] ;",
        "t += s [ equal ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘<unresolved overloaded function type>’)"
    },
    {
      "mod_line": [
        7,
        5,
        4
      ],
      "mod_code": [
        "t += s [ i ] ;",
        "t += s [ equal ] ;",
        "while ( i >= ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘<unresolved overloaded function type>’)"
    },
    {
      "mod_line": [
        7,
        5,
        4,
        2
      ],
      "mod_code": [
        "t += s [ i ] ;",
        "t += s [ equal ] ;",
        "while ( i >= ' 0 ' )",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        5,
        4,
        1
      ],
      "mod_code": [
        "t += s [ i ] ;",
        "t += s [ equal ] ;",
        "while ( i >= ' 0 ' )",
        "string s , t = \" \" ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘<unresolved overloaded function type>’)"
    },
    {
      "mod_line": [
        7,
        5,
        2
      ],
      "mod_code": [
        "t += s [ i ] ;",
        "t += s [ equal ] ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        5,
        2,
        1
      ],
      "mod_code": [
        "t += s [ i ] ;",
        "t += s [ equal ] ;",
        "gets ( s ) ;",
        "string s , t = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        5,
        1
      ],
      "mod_code": [
        "t += s [ i ] ;",
        "t += s [ equal ] ;",
        "string s , t = \" \" ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘<unresolved overloaded function type>’)"
    },
    {
      "mod_line": [
        7,
        4,
        2
      ],
      "mod_code": [
        "t += s [ i ] ;",
        "while ( i >= ' 0 ' )",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        4,
        2,
        1
      ],
      "mod_code": [
        "t += s [ i ] ;",
        "while ( i >= ' 0 ' )",
        "gets ( s ) ;",
        "string s , t = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "t += s [ i ] ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        2,
        1
      ],
      "mod_code": [
        "t += s [ i ] ;",
        "gets ( s ) ;",
        "string s , t = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "t += s [ equal ] ;",
        "while ( i >= ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘<unresolved overloaded function type>’)"
    },
    {
      "mod_line": [
        5,
        4,
        2
      ],
      "mod_code": [
        "t += s [ equal ] ;",
        "while ( i >= ' 0 ' )",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        4,
        2,
        1
      ],
      "mod_code": [
        "t += s [ equal ] ;",
        "while ( i >= ' 0 ' )",
        "gets ( s ) ;",
        "string s , t = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        4,
        1
      ],
      "mod_code": [
        "t += s [ equal ] ;",
        "while ( i >= ' 0 ' )",
        "string s , t = \" \" ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘<unresolved overloaded function type>’)"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "t += s [ equal ] ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        2,
        1
      ],
      "mod_code": [
        "t += s [ equal ] ;",
        "gets ( s ) ;",
        "string s , t = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "t += s [ equal ] ;",
        "string s , t = \" \" ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘<unresolved overloaded function type>’)"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "while ( i >= ' 0 ' )",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        2,
        1
      ],
      "mod_code": [
        "while ( i >= ' 0 ' )",
        "gets ( s ) ;",
        "string s , t = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "gets ( s ) ;",
        "string s , t = \" \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}