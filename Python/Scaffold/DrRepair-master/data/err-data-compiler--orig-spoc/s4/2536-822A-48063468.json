{
  "meta": {
    "index": 2536,
    "hitid": "3P520RYKCH0KMYXVMHZ8XU70I07U5Z",
    "workerid": "A24WRPQYGMQLGF",
    "probid": "822A",
    "subid": "48063468"
  },
  "lines": [
    {
      "line": 0,
      "text": "in function fact with argument integer n that returns an unsigned long long",
      "code": "unsigned long long fact ( int n )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "ans = unsigned long long = 1",
      "code": "unsigned long long ans = 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while . > = 1",
      "code": "while ( n >= 1 )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "ans = ans * n",
      "code": "ans *= n ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "decrease n by 1",
      "code": "n -- ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "return ans",
      "code": "return ans ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 9,
      "text": "a , b = integer",
      "code": "int a , b ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read a , b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print call fact with argument of the lower value between a and b",
      "code": "cout << fact ( min ( a , b ) ) << endl ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( . >> 1 )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "unsigned long long fact ( int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "while ( . >> 1 )",
        "unsigned long long fact ( int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0,
        11
      ],
      "mod_code": [
        "while ( . >> 1 )",
        "unsigned long long fact ( int n ) ;",
        "cout << fact ( min ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0,
        11,
        10
      ],
      "mod_code": [
        "while ( . >> 1 )",
        "unsigned long long fact ( int n ) ;",
        "cout << fact ( min ( a , b ) ) ;",
        "cin >> a , b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0,
        10
      ],
      "mod_code": [
        "while ( . >> 1 )",
        "unsigned long long fact ( int n ) ;",
        "cin >> a , b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "while ( . >> 1 )",
        "cout << fact ( min ( a , b ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        2,
        11,
        10
      ],
      "mod_code": [
        "while ( . >> 1 )",
        "cout << fact ( min ( a , b ) ) ;",
        "cin >> a , b ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "while ( . >> 1 )",
        "cin >> a , b ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "unsigned long long fact ( int n ) ;",
        "cout << fact ( min ( a , b ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11,
        10
      ],
      "mod_code": [
        "unsigned long long fact ( int n ) ;",
        "cout << fact ( min ( a , b ) ) ;",
        "cin >> a , b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11,
        10,
        2
      ],
      "mod_code": [
        "unsigned long long fact ( int n ) ;",
        "cout << fact ( min ( a , b ) ) ;",
        "cin >> a , b ;",
        "while ( 1 >= 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11,
        2
      ],
      "mod_code": [
        "unsigned long long fact ( int n ) ;",
        "cout << fact ( min ( a , b ) ) ;",
        "while ( 1 >= 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "unsigned long long fact ( int n ) ;",
        "cin >> a , b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        10,
        2
      ],
      "mod_code": [
        "unsigned long long fact ( int n ) ;",
        "cin >> a , b ;",
        "while ( 1 >= 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "unsigned long long fact ( int n ) ;",
        "while ( 1 >= 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}