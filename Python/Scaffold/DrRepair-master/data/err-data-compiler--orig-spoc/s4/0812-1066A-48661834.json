{
  "meta": {
    "index": 812,
    "hitid": "35JDMRECC431DZPTDD3UX9CMMLPGEK",
    "workerid": "A1AYVATMT88U1W",
    "probid": "1066A",
    "subid": "48661834"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let t be a integer",
      "code": "int t ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while t is decremented by 1",
      "code": "while ( t -- )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let d , v , l , r be long integers",
      "code": "long long int d , v , l , r ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "read d , v , l , r",
      "code": "cin >> d >> v >> l >> r ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "let count be a integer with count = d / v",
      "code": "int count = d / v ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "r is equal to v * ( r / v )",
      "code": "r = v * ( r / v ) ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if l modulo v is not equal to 0 , l is equal to v * ( ( l / v ) + 1 )",
      "code": "if ( l % v != 0 ) l = v * ( ( l / v ) + 1 ) ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print count - ( ( r - l ) / v ) - 1 and newline",
      "code": "cout << count - ( ( r - l ) / v ) - 1 << endl ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( l % v != 0 ) l = v * ( l / v ) + 1 ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "cin >> d >> v , l >> r ;",
        "if ( l % v != 0 ) l = v * ( l / v ) + 1 ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        8,
        3
      ],
      "mod_code": [
        "cin >> d >> v , l >> r ;",
        "if ( l % v != 0 ) l = v * ( l / v ) + 1 ) ;",
        "while ( -- t )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        8,
        3,
        7
      ],
      "mod_code": [
        "cin >> d >> v , l >> r ;",
        "if ( l % v != 0 ) l = v * ( l / v ) + 1 ) ;",
        "while ( -- t )",
        "r *= ( r / v ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        8,
        7
      ],
      "mod_code": [
        "cin >> d >> v , l >> r ;",
        "if ( l % v != 0 ) l = v * ( l / v ) + 1 ) ;",
        "r *= ( r / v ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "if ( l % v != 0 ) l = v * ( l / v ) + 1 ) ;",
        "while ( -- t )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        3,
        7
      ],
      "mod_code": [
        "if ( l % v != 0 ) l = v * ( l / v ) + 1 ) ;",
        "while ( -- t )",
        "r *= ( r / v ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "if ( l % v != 0 ) l = v * ( l / v ) + 1 ) ;",
        "r *= ( r / v ) ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘)’ token"
    }
  ]
}