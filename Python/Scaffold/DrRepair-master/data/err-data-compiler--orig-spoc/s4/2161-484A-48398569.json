{
  "meta": {
    "index": 2161,
    "hitid": "3KQC8JMJGCMC3X478Z4GZIKQAWBH3S",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "484A",
    "subid": "48398569"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare inline is_palindrome taking in constant string & s and returning bool",
      "code": "inline bool is_palindrome ( const string & s )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return equal ( s . begin ( ) , s . end ( ) , s . rbegin ( ) )",
      "code": "return equal ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create const long long MOD = 1000000007",
      "code": "const long long MOD = 1000000007 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "let const long long INF = 1e9 + 5",
      "code": "const long long INF = 1e9 + 5 ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "create const double eps = 1e - 7",
      "code": "const double eps = 1e-7 ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "let constant double PI = acos ( - 1 . 0 )",
      "code": "const double PI = acos ( - 1.0 ) ;",
      "indent": 0
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 8,
      "text": "let int n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "create unsigned long long ints l , r , ans , and tmp",
      "code": "unsigned long long l , r , ans , tmp ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "while n - - is truthy",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read l and r",
      "code": "cin >> l >> r ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set ans to 1",
      "code": "ans = l ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "for i = 0 to 64 exclusive",
      "code": "for ( long long i = ( long long ) ( 0 ) ; i < ( long long ) ( 64 ) ; i ++ )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if ( ans | ( 1ULL < < i ) ) < = r is truthy , perform OR on ans and ( 1ULL < < i )",
      "code": "if ( ( ans | ( 1ULL << i ) ) <= r ) { ans |= ( 1ULL << i ) ; }",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "print ans",
      "code": "cout << ans << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘perform’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "inline bool is_palindrome ( const string & s ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) , s . rbegin ( ) ) ;"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "double const double PI = acos ( - 1.0 ) ;"
      ],
      "err_line": 6,
      "err_msg": "two or more data types in declaration of ‘PI’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int a ;"
      ],
      "err_line": 9,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "ans = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        13,
        15
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "ans = 1 ;",
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        13,
        15,
        6
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "ans = 1 ;",
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "double const double PI = acos ( - 1.0 ) ;"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        13,
        15,
        12
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "ans = 1 ;",
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "while ( cin >> l >> r )"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        13,
        15,
        14
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "ans = 1 ;",
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        13,
        6
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "ans = 1 ;",
        "double const double PI = acos ( - 1.0 ) ;"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        13,
        6,
        12
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "ans = 1 ;",
        "double const double PI = acos ( - 1.0 ) ;",
        "while ( cin >> l >> r )"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        13,
        6,
        14
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "ans = 1 ;",
        "double const double PI = acos ( - 1.0 ) ;",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        13,
        12
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "ans = 1 ;",
        "while ( cin >> l >> r )"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        13,
        12,
        14
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "ans = 1 ;",
        "while ( cin >> l >> r )",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        13,
        14
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "ans = 1 ;",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        15,
        6
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "double const double PI = acos ( - 1.0 ) ;"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        15,
        6,
        12
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "double const double PI = acos ( - 1.0 ) ;",
        "while ( cin >> l >> r )"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        15,
        6,
        14
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "double const double PI = acos ( - 1.0 ) ;",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        15,
        12
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "while ( cin >> l >> r )"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        15,
        12,
        14
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "while ( cin >> l >> r )",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        15,
        14
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "double const double PI = acos ( - 1.0 ) ;"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        6,
        12
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "double const double PI = acos ( - 1.0 ) ;",
        "while ( cin >> l >> r )"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        6,
        12,
        14
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "double const double PI = acos ( - 1.0 ) ;",
        "while ( cin >> l >> r )",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        6,
        14
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "double const double PI = acos ( - 1.0 ) ;",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "while ( cin >> l >> r )"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        12,
        14
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "while ( cin >> l >> r )",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "return ( s . begin ( ) , s . end ( ) , s . rbegin ( ) ) ;",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>::const_reverse_iterator {aka std::reverse_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >}’ to ‘bool’ in return"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "ans = 1 ;",
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;"
      ],
      "err_line": 15,
      "err_msg": "‘perform’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        6
      ],
      "mod_code": [
        "ans = 1 ;",
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "double const double PI = acos ( - 1.0 ) ;"
      ],
      "err_line": 6,
      "err_msg": "two or more data types in declaration of ‘PI’"
    },
    {
      "mod_line": [
        13,
        15,
        6,
        12
      ],
      "mod_code": [
        "ans = 1 ;",
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "double const double PI = acos ( - 1.0 ) ;",
        "while ( cin >> l >> r )"
      ],
      "err_line": 6,
      "err_msg": "two or more data types in declaration of ‘PI’"
    },
    {
      "mod_line": [
        13,
        15,
        6,
        14
      ],
      "mod_code": [
        "ans = 1 ;",
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "double const double PI = acos ( - 1.0 ) ;",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "two or more data types in declaration of ‘PI’"
    },
    {
      "mod_line": [
        13,
        15,
        12
      ],
      "mod_code": [
        "ans = 1 ;",
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "while ( cin >> l >> r )"
      ],
      "err_line": 15,
      "err_msg": "‘perform’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        12,
        14
      ],
      "mod_code": [
        "ans = 1 ;",
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "while ( cin >> l >> r )",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        15,
        14
      ],
      "mod_code": [
        "ans = 1 ;",
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        6
      ],
      "mod_code": [
        "ans = 1 ;",
        "double const double PI = acos ( - 1.0 ) ;"
      ],
      "err_line": 6,
      "err_msg": "two or more data types in declaration of ‘PI’"
    },
    {
      "mod_line": [
        13,
        6,
        12
      ],
      "mod_code": [
        "ans = 1 ;",
        "double const double PI = acos ( - 1.0 ) ;",
        "while ( cin >> l >> r )"
      ],
      "err_line": 6,
      "err_msg": "two or more data types in declaration of ‘PI’"
    },
    {
      "mod_line": [
        13,
        6,
        12,
        14
      ],
      "mod_code": [
        "ans = 1 ;",
        "double const double PI = acos ( - 1.0 ) ;",
        "while ( cin >> l >> r )",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "two or more data types in declaration of ‘PI’"
    },
    {
      "mod_line": [
        13,
        6,
        14
      ],
      "mod_code": [
        "ans = 1 ;",
        "double const double PI = acos ( - 1.0 ) ;",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "two or more data types in declaration of ‘PI’"
    },
    {
      "mod_line": [
        13,
        12,
        14
      ],
      "mod_code": [
        "ans = 1 ;",
        "while ( cin >> l >> r )",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        14
      ],
      "mod_code": [
        "ans = 1 ;",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        6
      ],
      "mod_code": [
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "double const double PI = acos ( - 1.0 ) ;"
      ],
      "err_line": 6,
      "err_msg": "two or more data types in declaration of ‘PI’"
    },
    {
      "mod_line": [
        15,
        6,
        12
      ],
      "mod_code": [
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "double const double PI = acos ( - 1.0 ) ;",
        "while ( cin >> l >> r )"
      ],
      "err_line": 6,
      "err_msg": "two or more data types in declaration of ‘PI’"
    },
    {
      "mod_line": [
        15,
        6,
        12,
        14
      ],
      "mod_code": [
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "double const double PI = acos ( - 1.0 ) ;",
        "while ( cin >> l >> r )",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "two or more data types in declaration of ‘PI’"
    },
    {
      "mod_line": [
        15,
        6,
        14
      ],
      "mod_code": [
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "double const double PI = acos ( - 1.0 ) ;",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "two or more data types in declaration of ‘PI’"
    },
    {
      "mod_line": [
        15,
        12
      ],
      "mod_code": [
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "while ( cin >> l >> r )"
      ],
      "err_line": 15,
      "err_msg": "‘perform’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        12,
        14
      ],
      "mod_code": [
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "while ( cin >> l >> r )",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        14
      ],
      "mod_code": [
        "if ( ( ans | ( 1ULL << i ) ) <= r ) perform |= ( 1ULL << i ) ;",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "double const double PI = acos ( - 1.0 ) ;",
        "while ( cin >> l >> r )"
      ],
      "err_line": 6,
      "err_msg": "two or more data types in declaration of ‘PI’"
    },
    {
      "mod_line": [
        6,
        12,
        14
      ],
      "mod_code": [
        "double const double PI = acos ( - 1.0 ) ;",
        "while ( cin >> l >> r )",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "two or more data types in declaration of ‘PI’"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "double const double PI = acos ( - 1.0 ) ;",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "two or more data types in declaration of ‘PI’"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "while ( cin >> l >> r )",
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘i’ was not declared in this scope"
    }
  ]
}