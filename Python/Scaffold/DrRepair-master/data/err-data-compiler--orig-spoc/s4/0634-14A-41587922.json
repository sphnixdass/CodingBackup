{
  "meta": {
    "index": 634,
    "hitid": "3KVQ0UJWPXFXE2M0HHE9FISX2E3W5G",
    "workerid": "AIWEXPJAU66D9",
    "probid": "14A",
    "subid": "41587922"
  },
  "lines": [
    {
      "line": 0,
      "text": "lu , ru , ld , rd , n , i , j and m = integers",
      "code": "int lu , ru , ld , rd , n , i , j , m ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let c be a 2d array of characters with size 60 by 60",
      "code": "char c [ 60 ] [ 60 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "lu = 100000",
      "code": "lu = 100000 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set value of ld to 100000",
      "code": "ld = 100000 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for j = 1 to m inclusive read input to c [ i ] [ j ]",
      "code": "for ( j = 1 ; j <= m ; j ++ ) cin >> c [ i ] [ j ] ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for i = 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for j = 1 to m inclusive",
      "code": "for ( j = 1 ; j <= m ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if c [ i ] [ j ] is equal to ' * '",
      "code": "if ( c [ i ] [ j ] == ' * ' )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if i < = lu , lu = i",
      "code": "if ( i <= lu ) lu = i ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "if i > = ru , ru = i",
      "code": "if ( i >= ru ) ru = i ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "if j < = ld , ld = j",
      "code": "if ( j <= ld ) ld = j ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "if j > = rd , rd = j",
      "code": "if ( j >= rd ) rd = j ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "for i = lu to ru inclusive",
      "code": "for ( i = lu ; i <= ru ; i ++ )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for j = ld to rd inclusive print c [ i ] [ j ]",
      "code": "for ( j = ld ; j <= rd ; j ++ ) cout << c [ i ] [ j ] ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "const long long lu = 100000 ;"
      ],
      "err_line": 11,
      "err_msg": "assignment of read-only variable ‘lu’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char a [ 60 ] [ 60 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "const int lu = 100000 + 5 ;"
      ],
      "err_line": 11,
      "err_msg": "assignment of read-only variable ‘lu’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "* ld = 100000 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "const long long lu = 100000 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        4,
        10
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "const long long lu = 100000 ;",
        "if ( c [ i ] [ j ] == ' ) ' )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        4,
        10,
        5
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "const long long lu = 100000 ;",
        "if ( c [ i ] [ j ] == ' ) ' )",
        "* ld = 100000 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        4,
        10,
        1
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "const long long lu = 100000 ;",
        "if ( c [ i ] [ j ] == ' ) ' )",
        "char a [ 60 ] [ 60 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        4,
        10,
        3
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "const long long lu = 100000 ;",
        "if ( c [ i ] [ j ] == ' ) ' )",
        "cin >> n >> k ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        4,
        5
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "const long long lu = 100000 ;",
        "* ld = 100000 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        4,
        5,
        1
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "const long long lu = 100000 ;",
        "* ld = 100000 ;",
        "char a [ 60 ] [ 60 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        4,
        5,
        3
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "const long long lu = 100000 ;",
        "* ld = 100000 ;",
        "cin >> n >> k ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        4,
        1
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "const long long lu = 100000 ;",
        "char a [ 60 ] [ 60 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        4,
        1,
        3
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "const long long lu = 100000 ;",
        "char a [ 60 ] [ 60 ] ;",
        "cin >> n >> k ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        4,
        3
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "const long long lu = 100000 ;",
        "cin >> n >> k ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "if ( c [ i ] [ j ] == ' ) ' )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        10,
        5
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "if ( c [ i ] [ j ] == ' ) ' )",
        "* ld = 100000 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        10,
        5,
        1
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "if ( c [ i ] [ j ] == ' ) ' )",
        "* ld = 100000 ;",
        "char a [ 60 ] [ 60 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        10,
        5,
        3
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "if ( c [ i ] [ j ] == ' ) ' )",
        "* ld = 100000 ;",
        "cin >> n >> k ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        10,
        1
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "if ( c [ i ] [ j ] == ' ) ' )",
        "char a [ 60 ] [ 60 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        10,
        1,
        3
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "if ( c [ i ] [ j ] == ' ) ' )",
        "char a [ 60 ] [ 60 ] ;",
        "cin >> n >> k ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        10,
        3
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "if ( c [ i ] [ j ] == ' ) ' )",
        "cin >> n >> k ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "* ld = 100000 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        5,
        1
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "* ld = 100000 ;",
        "char a [ 60 ] [ 60 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        5,
        1,
        3
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "* ld = 100000 ;",
        "char a [ 60 ] [ 60 ] ;",
        "cin >> n >> k ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        5,
        3
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "* ld = 100000 ;",
        "cin >> n >> k ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "char a [ 60 ] [ 60 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        1,
        3
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "char a [ 60 ] [ 60 ] ;",
        "cin >> n >> k ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "int lu , ru , ld , rd , n , i , i , m ;",
        "cin >> n >> k ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int i’"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "const long long lu = 100000 ;",
        "if ( c [ i ] [ j ] == ' ) ' )"
      ],
      "err_line": 11,
      "err_msg": "assignment of read-only variable ‘lu’"
    },
    {
      "mod_line": [
        4,
        10,
        5
      ],
      "mod_code": [
        "const long long lu = 100000 ;",
        "if ( c [ i ] [ j ] == ' ) ' )",
        "* ld = 100000 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        10,
        5,
        1
      ],
      "mod_code": [
        "const long long lu = 100000 ;",
        "if ( c [ i ] [ j ] == ' ) ' )",
        "* ld = 100000 ;",
        "char a [ 60 ] [ 60 ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        10,
        5,
        3
      ],
      "mod_code": [
        "const long long lu = 100000 ;",
        "if ( c [ i ] [ j ] == ' ) ' )",
        "* ld = 100000 ;",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        1
      ],
      "mod_code": [
        "const long long lu = 100000 ;",
        "if ( c [ i ] [ j ] == ' ) ' )",
        "char a [ 60 ] [ 60 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        1,
        3
      ],
      "mod_code": [
        "const long long lu = 100000 ;",
        "if ( c [ i ] [ j ] == ' ) ' )",
        "char a [ 60 ] [ 60 ] ;",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        3
      ],
      "mod_code": [
        "const long long lu = 100000 ;",
        "if ( c [ i ] [ j ] == ' ) ' )",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "const long long lu = 100000 ;",
        "* ld = 100000 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        5,
        1
      ],
      "mod_code": [
        "const long long lu = 100000 ;",
        "* ld = 100000 ;",
        "char a [ 60 ] [ 60 ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        5,
        1,
        3
      ],
      "mod_code": [
        "const long long lu = 100000 ;",
        "* ld = 100000 ;",
        "char a [ 60 ] [ 60 ] ;",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        3
      ],
      "mod_code": [
        "const long long lu = 100000 ;",
        "* ld = 100000 ;",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "const long long lu = 100000 ;",
        "char a [ 60 ] [ 60 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        1,
        3
      ],
      "mod_code": [
        "const long long lu = 100000 ;",
        "char a [ 60 ] [ 60 ] ;",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "const long long lu = 100000 ;",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        5
      ],
      "mod_code": [
        "if ( c [ i ] [ j ] == ' ) ' )",
        "* ld = 100000 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        5,
        1
      ],
      "mod_code": [
        "if ( c [ i ] [ j ] == ' ) ' )",
        "* ld = 100000 ;",
        "char a [ 60 ] [ 60 ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        10,
        5,
        1,
        3
      ],
      "mod_code": [
        "if ( c [ i ] [ j ] == ' ) ' )",
        "* ld = 100000 ;",
        "char a [ 60 ] [ 60 ] ;",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        5,
        3
      ],
      "mod_code": [
        "if ( c [ i ] [ j ] == ' ) ' )",
        "* ld = 100000 ;",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "if ( c [ i ] [ j ] == ' ) ' )",
        "char a [ 60 ] [ 60 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        1,
        3
      ],
      "mod_code": [
        "if ( c [ i ] [ j ] == ' ) ' )",
        "char a [ 60 ] [ 60 ] ;",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "if ( c [ i ] [ j ] == ' ) ' )",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "* ld = 100000 ;",
        "char a [ 60 ] [ 60 ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        5,
        1,
        3
      ],
      "mod_code": [
        "* ld = 100000 ;",
        "char a [ 60 ] [ 60 ] ;",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "* ld = 100000 ;",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "char a [ 60 ] [ 60 ] ;",
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    }
  ]
}