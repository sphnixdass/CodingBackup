{
  "meta": {
    "index": 1986,
    "hitid": "3XH7ZM9YX2OB7T7QLDHK4ZPIXXJ9RY",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "801A",
    "subid": "46619243"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "cnt = int with cnt = 0",
      "code": "int cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to size of s - 1",
      "code": "for ( int i = 0 ; i < s . size ( ) - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "is s8i ] is ' V ' and s [ i + 1 ] is ' K '",
      "code": "if ( s [ i ] == ' V ' && s [ i + 1 ] == ' K ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set s [ i ] to ' . '",
      "code": "s [ i ] = ' . ' ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "set s [ i + 1 ] to ' . '",
      "code": "s [ i + 1 ] = ' . ' ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 0 to size of s - 1",
      "code": "for ( int i = 0 ; i < s . size ( ) - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if s from position i to i + 2 is \" VV \" or \" KK \"",
      "code": "if ( s . substr ( i , 2 ) == \" VV \" || s . substr ( i , 2 ) == \" KK \" )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print cnt",
      "code": "cout << cnt << endl ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;"
      ],
      "err_line": 12,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘position’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' K ' , s [ i + 1 ] = ' K ' ;"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "s [ i ] ] = ' . ' ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( s . find ( i ) == \" i \" || i == \" VV \" )"
      ],
      "err_line": 12,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        12,
        6
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "s [ i ] ] = ' . ' ;"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        12,
        6,
        17
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "s [ i ] ] = ' . ' ;",
        "cout << cnt ;"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        12,
        6,
        11
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "s [ i ] ] = ' . ' ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        12,
        6,
        3
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "s [ i ] ] = ' . ' ;",
        "int cnt = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        12,
        17
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "cout << cnt ;"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        12,
        17,
        11
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "cout << cnt ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        12,
        17,
        3
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "cout << cnt ;",
        "int cnt = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        12,
        11
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        12,
        11,
        3
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )",
        "int cnt = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        12,
        3
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "int cnt = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "s [ i ] ] = ' . ' ;"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        6,
        17
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "s [ i ] ] = ' . ' ;",
        "cout << cnt ;"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        6,
        17,
        11
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "s [ i ] ] = ' . ' ;",
        "cout << cnt ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        6,
        17,
        3
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "s [ i ] ] = ' . ' ;",
        "cout << cnt ;",
        "int cnt = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        6,
        11
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "s [ i ] ] = ' . ' ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        6,
        11,
        3
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "s [ i ] ] = ' . ' ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )",
        "int cnt = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        6,
        3
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "s [ i ] ] = ' . ' ;",
        "int cnt = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        17
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "cout << cnt ;"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        17,
        11
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "cout << cnt ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        17,
        11,
        3
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "cout << cnt ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )",
        "int cnt = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        17,
        3
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "cout << cnt ;",
        "int cnt = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        11,
        3
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )",
        "int cnt = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "bool s [ i + 1 ] = ' V ' , s [ i + 1 ] = ' K ' ;",
        "int cnt = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "s [ i ] ] = ' . ' ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        6,
        17
      ],
      "mod_code": [
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "s [ i ] ] = ' . ' ;",
        "cout << cnt ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        6,
        17,
        11
      ],
      "mod_code": [
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "s [ i ] ] = ' . ' ;",
        "cout << cnt ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        6,
        17,
        3
      ],
      "mod_code": [
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "s [ i ] ] = ' . ' ;",
        "cout << cnt ;",
        "int cnt = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        6,
        11
      ],
      "mod_code": [
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "s [ i ] ] = ' . ' ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        6,
        11,
        3
      ],
      "mod_code": [
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "s [ i ] ] = ' . ' ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )",
        "int cnt = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        6,
        3
      ],
      "mod_code": [
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "s [ i ] ] = ' . ' ;",
        "int cnt = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        12,
        17
      ],
      "mod_code": [
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "cout << cnt ;"
      ],
      "err_line": 12,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘position’"
    },
    {
      "mod_line": [
        12,
        17,
        11
      ],
      "mod_code": [
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "cout << cnt ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        17,
        11,
        3
      ],
      "mod_code": [
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "cout << cnt ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )",
        "int cnt = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        17,
        3
      ],
      "mod_code": [
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "cout << cnt ;",
        "int cnt = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘position’"
    },
    {
      "mod_line": [
        12,
        11
      ],
      "mod_code": [
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        11,
        3
      ],
      "mod_code": [
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )",
        "int cnt = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "if ( s . position ( ) == \" i \" ) i + 2 == \" KK \" ;",
        "int cnt = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "‘std::__cxx11::string {aka class std::__cxx11::basic_string<char>}’ has no member named ‘position’"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "s [ i ] ] = ' . ' ;",
        "cout << cnt ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        17,
        11
      ],
      "mod_code": [
        "s [ i ] ] = ' . ' ;",
        "cout << cnt ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        17,
        11,
        3
      ],
      "mod_code": [
        "s [ i ] ] = ' . ' ;",
        "cout << cnt ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )",
        "int cnt = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        17,
        3
      ],
      "mod_code": [
        "s [ i ] ] = ' . ' ;",
        "cout << cnt ;",
        "int cnt = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "s [ i ] ] = ' . ' ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        11,
        3
      ],
      "mod_code": [
        "s [ i ] ] = ' . ' ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )",
        "int cnt = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "s [ i ] ] = ' . ' ;",
        "int cnt = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        17,
        11
      ],
      "mod_code": [
        "cout << cnt ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        11,
        3
      ],
      "mod_code": [
        "cout << cnt ;",
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )",
        "int cnt = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )",
        "int cnt = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}