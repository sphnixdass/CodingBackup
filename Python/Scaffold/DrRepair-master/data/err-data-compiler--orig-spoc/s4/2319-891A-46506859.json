{
  "meta": {
    "index": 2319,
    "hitid": "3FDWKV9VCNWIU5I1EGGUEWIM38XUME",
    "workerid": "AIWEXPJAU66D9",
    "probid": "891A",
    "subid": "46506859"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer maxn = 2010",
      "code": "const int maxn = 2010 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create constant integer inf = 0 x3f3f3f3f",
      "code": "const int inf = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let num be integer array with size maxn",
      "code": "int num [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "function gcd with integer arguments a and b that returns integer",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "return a if b = 0 , or gcd ( b , a % b )",
      "code": "return b == 0 ? a : gcd ( b , a % b ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "declare integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "while read n from the input",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "declare integer cnt_1 = 0",
      "code": "int cnt_1 = 0 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "declare integer ans = inf",
      "code": "int ans = inf ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "read num [ i ]",
      "code": "cin >> num [ i ] ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment cnt_1 if num [ i ] = 1",
      "code": "if ( num [ i ] == 1 ) cnt_1 ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if cnt_1 is greater than 0",
      "code": "if ( cnt_1 )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print n - cnt_1",
      "code": "cout << n - cnt_1 << endl ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 18,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "create integer x = num [ i ]",
      "code": "int x = num [ i ] ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "for j = i + 1 to n exclusive",
      "code": "for ( int j = i + 1 ; j < n ; j ++ )",
      "indent": 4
    },
    {
      "line": 21,
      "text": "set value of x to gcd ( x , num [ j ] )",
      "code": "x = gcd ( x , num [ j ] ) ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "if x = 1 , set value of ans to min of ans and j - i",
      "code": "if ( x == 1 ) { ans = min ( ans , j - i ) ; }",
      "indent": 5
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 25,
      "text": "if ans = inf",
      "code": "if ( ans == inf )",
      "indent": 3
    },
    {
      "line": 26,
      "text": "print - 1",
      "code": "cout << - 1 << endl ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 28,
      "text": "print ans + n - 1",
      "code": "cout << ans + n - 1 << endl ;",
      "indent": 4
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const maxn = 2010 ;"
      ],
      "err_line": 0,
      "err_msg": "‘maxn’ does not name a type"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "while ( cin >> n ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "cnt_1 = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "‘cnt_1’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cin >> num >> num [ i ] ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [2010]’)"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "x = num [ i ] ;"
      ],
      "err_line": 19,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 20,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "* x = gcd ( x , num [ j ] ) ;"
      ],
      "err_line": 21,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        20
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        20,
        17
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        20,
        17,
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "else else",
        "while ( cin >> n ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        20,
        17,
        25
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "else else",
        "if ( ans = inf )"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        20,
        17,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "else else",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        20,
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "while ( cin >> n ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        20,
        8,
        25
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "while ( cin >> n ;",
        "if ( ans = inf )"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        20,
        8,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "while ( cin >> n ;",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        20,
        25
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "if ( ans = inf )"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        20,
        25,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "if ( ans = inf )",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        20,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        17
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        17,
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "else else",
        "while ( cin >> n ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        17,
        8,
        25
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "else else",
        "while ( cin >> n ;",
        "if ( ans = inf )"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        17,
        8,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "else else",
        "while ( cin >> n ;",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        17,
        25
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "else else",
        "if ( ans = inf )"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        17,
        25,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "else else",
        "if ( ans = inf )",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        17,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "else else",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "while ( cin >> n ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        8,
        25
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "while ( cin >> n ;",
        "if ( ans = inf )"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        8,
        25,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "while ( cin >> n ;",
        "if ( ans = inf )",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        8,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "while ( cin >> n ;",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        25
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( ans = inf )"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        25,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( ans = inf )",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        20,
        17
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "else else"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        17,
        8
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "else else",
        "while ( cin >> n ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        20,
        17,
        8,
        25
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "else else",
        "while ( cin >> n ;",
        "if ( ans = inf )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        20,
        17,
        8,
        15
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "else else",
        "while ( cin >> n ;",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        20,
        17,
        25
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "else else",
        "if ( ans = inf )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        17,
        25,
        15
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "else else",
        "if ( ans = inf )",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        17,
        15
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "else else",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        8
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "while ( cin >> n ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        20,
        8,
        25
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "while ( cin >> n ;",
        "if ( ans = inf )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        20,
        8,
        25,
        15
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "while ( cin >> n ;",
        "if ( ans = inf )",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        20,
        8,
        15
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "while ( cin >> n ;",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        20,
        25
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "if ( ans = inf )"
      ],
      "err_line": 20,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        25,
        15
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "if ( ans = inf )",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 20,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        15
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 20,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        8
      ],
      "mod_code": [
        "else else",
        "while ( cin >> n ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        17,
        8,
        25
      ],
      "mod_code": [
        "else else",
        "while ( cin >> n ;",
        "if ( ans = inf )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        17,
        8,
        25,
        15
      ],
      "mod_code": [
        "else else",
        "while ( cin >> n ;",
        "if ( ans = inf )",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        17,
        8,
        15
      ],
      "mod_code": [
        "else else",
        "while ( cin >> n ;",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        17,
        25
      ],
      "mod_code": [
        "else else",
        "if ( ans = inf )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        17,
        25,
        15
      ],
      "mod_code": [
        "else else",
        "if ( ans = inf )",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        17,
        15
      ],
      "mod_code": [
        "else else",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        25
      ],
      "mod_code": [
        "while ( cin >> n ;",
        "if ( ans = inf )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        25,
        15
      ],
      "mod_code": [
        "while ( cin >> n ;",
        "if ( ans = inf )",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        8,
        15
      ],
      "mod_code": [
        "while ( cin >> n ;",
        "if ( cnt_1 >= 0 )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘;’ token"
    }
  ]
}