{
  "meta": {
    "index": 80,
    "hitid": "3Z56AA6EK4UXSUS0IYIRYQ4619D6MX",
    "workerid": "A1AYVATMT88U1W",
    "probid": "263A",
    "subid": "49069024"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let arr , indx1 , indx2 , x be integers with indx1 = 0 , indx2 = 0 , x = 1 , arr = 2d array of integers with 5 elements in rows and columns respectively",
      "code": "int arr [ 5 ] [ 5 ] , indx1 = 0 , indx2 = 0 , x = 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 0 to 4 inclusive",
      "code": "for ( int i = 0 ; i <= 4 ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for j = 0 to 4 inclusive , read arr [ i ] [ j ]",
      "code": "for ( int j = 0 ; j <= 4 ; j ++ ) { cin >> arr [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to 4 inclusive",
      "code": "for ( int i = 0 ; i <= 4 ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for j = 0 to 4 inclusive",
      "code": "for ( int j = 0 ; j <= 4 ; j ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if arr [ i ] [ j ] is equal to x",
      "code": "if ( arr [ i ] [ j ] == x )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "indx1 is equal to i",
      "code": "indx1 = i ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "indx2 is equal to j",
      "code": "indx2 = j ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "stop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "let y , z be integers with y = absolute of 2 - indx1 , z = absolute of 2 - indx2",
      "code": "int y = abs ( 2 - indx1 ) , z = abs ( 2 - indx2 ) ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print y + z and newline",
      "code": "cout << y + z << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx2 [ 5 ] , x = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 4 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( j = 0 ; j <= 4 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "indx1 to ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "indx2 to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "stop ;"
      ],
      "err_line": 10,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        14,
        2
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "for ( i = 0 ; i <= 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        14,
        2,
        7
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "if ( arr [ i ] [ j ] == ' x ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        14,
        2,
        5
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "for ( i = 0 ; i <= 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        14,
        2,
        9
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "indx2 to ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        14,
        7
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "if ( arr [ i ] [ j ] == ' x ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        14,
        7,
        5
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "if ( arr [ i ] [ j ] == ' x ' )",
        "for ( i = 0 ; i <= 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        14,
        7,
        9
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "if ( arr [ i ] [ j ] == ' x ' )",
        "indx2 to ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        14,
        5
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "for ( i = 0 ; i <= 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        14,
        5,
        9
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "indx2 to ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        14,
        9
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "indx2 to ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "for ( i = 0 ; i <= 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        2,
        7
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "if ( arr [ i ] [ j ] == ' x ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        2,
        7,
        5
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "if ( arr [ i ] [ j ] == ' x ' )",
        "for ( i = 0 ; i <= 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        2,
        7,
        9
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "if ( arr [ i ] [ j ] == ' x ' )",
        "indx2 to ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "for ( i = 0 ; i <= 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        9
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "indx2 to ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        2,
        9
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "indx2 to ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "if ( arr [ i ] [ j ] == ' x ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        7,
        5
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "if ( arr [ i ] [ j ] == ' x ' )",
        "for ( i = 0 ; i <= 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        7,
        5,
        9
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "if ( arr [ i ] [ j ] == ' x ' )",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "indx2 to ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        7,
        9
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "if ( arr [ i ] [ j ] == ' x ' )",
        "indx2 to ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "for ( i = 0 ; i <= 4 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        5,
        9
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "indx2 to ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "int arr [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , indx1 [ 5 ] , x = 0 ;",
        "indx2 to ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int indx1 [5]’"
    },
    {
      "mod_line": [
        14,
        2
      ],
      "mod_code": [
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "for ( i = 0 ; i <= 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        2,
        7
      ],
      "mod_code": [
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "if ( arr [ i ] [ j ] == ' x ' )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        2,
        7,
        5
      ],
      "mod_code": [
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "if ( arr [ i ] [ j ] == ' x ' )",
        "for ( i = 0 ; i <= 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        2,
        7,
        9
      ],
      "mod_code": [
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "if ( arr [ i ] [ j ] == ' x ' )",
        "indx2 to ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        2,
        5
      ],
      "mod_code": [
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "for ( i = 0 ; i <= 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        2,
        5,
        9
      ],
      "mod_code": [
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "indx2 to ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        2,
        9
      ],
      "mod_code": [
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "indx2 to ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        7
      ],
      "mod_code": [
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "if ( arr [ i ] [ j ] == ' x ' )"
      ],
      "err_line": 14,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        7,
        5
      ],
      "mod_code": [
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "if ( arr [ i ] [ j ] == ' x ' )",
        "for ( i = 0 ; i <= 4 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        7,
        5,
        9
      ],
      "mod_code": [
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "if ( arr [ i ] [ j ] == ' x ' )",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "indx2 to ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        7,
        9
      ],
      "mod_code": [
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "if ( arr [ i ] [ j ] == ' x ' )",
        "indx2 to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        14,
        5
      ],
      "mod_code": [
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "for ( i = 0 ; i <= 4 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        5,
        9
      ],
      "mod_code": [
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "indx2 to ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        9
      ],
      "mod_code": [
        "int y = abs ( 2 - indx1 , z ) = abs ( 2 - indx2 ) ;",
        "indx2 to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "if ( arr [ i ] [ j ] == ' x ' )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "if ( arr [ i ] [ j ] == ' x ' )",
        "for ( i = 0 ; i <= 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        5,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "if ( arr [ i ] [ j ] == ' x ' )",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "indx2 to ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "if ( arr [ i ] [ j ] == ' x ' )",
        "indx2 to ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "for ( i = 0 ; i <= 4 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "indx2 to ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "indx2 to ;"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == ' x ' )",
        "for ( i = 0 ; i <= 4 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        5,
        9
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == ' x ' )",
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "indx2 to ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "if ( arr [ i ] [ j ] == ' x ' )",
        "indx2 to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 4 ; i ++ )",
        "indx2 to ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}