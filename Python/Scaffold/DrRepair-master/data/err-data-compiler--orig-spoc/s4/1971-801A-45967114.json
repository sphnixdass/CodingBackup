{
  "meta": {
    "index": 1971,
    "hitid": "3G57RS03HHZB2MOT3XP2RBC8Z9K52O",
    "workerid": "ACI8PUCF5OPDC",
    "probid": "801A",
    "subid": "45967114"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integer ans , t , i , len",
      "code": "int ans , t , i , len ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string str",
      "code": "string str ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "define function count which returns integer and takes no argument",
      "code": "int count ( )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create integer i",
      "code": "int i ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integer ans with ans = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 1 to len - 1 with increment i",
      "code": "for ( i = 1 ; i <= len - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if str [ i ] is equal to ' K ' and str [ i - 1 ] is equal to ' V ' then increment ans",
      "code": "if ( str [ i ] == ' K ' && str [ i - 1 ] == ' V ' ) ans ++ ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "return ans to the calling statement",
      "code": "return ans ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 10,
      "text": "get str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "set len to size of str",
      "code": "len = str . size ( ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "call function count and set ans to return value",
      "code": "ans = count ( ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 0 to len - 1 with i + +",
      "code": "for ( i = 0 ; i <= len - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if str [ i ] is equal to ' V ' then",
      "code": "if ( str [ i ] == ' V ' )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "set str [ i ] to ' K '",
      "code": "str [ i ] = ' K ' ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "call function count and set t to return value",
      "code": "t = count ( ) ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "if t greater than ans then set ans to t",
      "code": "if ( t > ans ) ans = t ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "set str [ i ] to ' V '",
      "code": "str [ i ] = ' V ' ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 20,
      "text": "set str [ i ] to ' V '",
      "code": "str [ i ] = ' V ' ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "call function count and set t to return value",
      "code": "t = count ( ) ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "if t greater than ans then set ans to t",
      "code": "if ( t > ans ) ans = t ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "set str [ i ] to ' K '",
      "code": "str [ i ] = ' K ' ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int count ( int 0 )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "return count = count ;"
      ],
      "err_line": 12,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "count ( count ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘count(<unresolved overloaded function type>)’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "count ( count ) ;"
      ],
      "err_line": 21,
      "err_msg": "no matching function for call to ‘count(<unresolved overloaded function type>)’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char str ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int count ( int ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "{ return ans ;"
      ],
      "err_line": 10,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 10,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "count ( count ) ;"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘count(<unresolved overloaded function type>)’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "else if ( str [ i ] == ' V ' )"
      ],
      "err_line": 14,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "count ( count , t ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘count(<unresolved overloaded function type>, int&)’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "count ( count , t ) ;"
      ],
      "err_line": 21,
      "err_msg": "no matching function for call to ‘count(<unresolved overloaded function type>, int&)’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "if ( str [ i ] == ' K ' )"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "int count ( int 0 )",
        "return count = count ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        12,
        13
      ],
      "mod_code": [
        "int count ( int 0 )",
        "return count = count ;",
        "for ( int i = 0 ; i < len - 1 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        12,
        13,
        16
      ],
      "mod_code": [
        "int count ( int 0 )",
        "return count = count ;",
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "count ( count ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        12,
        13,
        21
      ],
      "mod_code": [
        "int count ( int 0 )",
        "return count = count ;",
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "count ( count ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        12,
        13,
        7
      ],
      "mod_code": [
        "int count ( int 0 )",
        "return count = count ;",
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "{ return ans ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        12,
        16
      ],
      "mod_code": [
        "int count ( int 0 )",
        "return count = count ;",
        "count ( count ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        12,
        16,
        21
      ],
      "mod_code": [
        "int count ( int 0 )",
        "return count = count ;",
        "count ( count ) ;",
        "count ( count ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        12,
        16,
        7
      ],
      "mod_code": [
        "int count ( int 0 )",
        "return count = count ;",
        "count ( count ) ;",
        "{ return ans ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        12,
        21
      ],
      "mod_code": [
        "int count ( int 0 )",
        "return count = count ;",
        "count ( count ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        12,
        21,
        7
      ],
      "mod_code": [
        "int count ( int 0 )",
        "return count = count ;",
        "count ( count ) ;",
        "{ return ans ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        12,
        7
      ],
      "mod_code": [
        "int count ( int 0 )",
        "return count = count ;",
        "{ return ans ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "int count ( int 0 )",
        "for ( int i = 0 ; i < len - 1 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        13,
        16
      ],
      "mod_code": [
        "int count ( int 0 )",
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "count ( count ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        13,
        16,
        21
      ],
      "mod_code": [
        "int count ( int 0 )",
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "count ( count ) ;",
        "count ( count ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        13,
        16,
        7
      ],
      "mod_code": [
        "int count ( int 0 )",
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "count ( count ) ;",
        "{ return ans ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        13,
        21
      ],
      "mod_code": [
        "int count ( int 0 )",
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "count ( count ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        13,
        21,
        7
      ],
      "mod_code": [
        "int count ( int 0 )",
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "count ( count ) ;",
        "{ return ans ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        13,
        7
      ],
      "mod_code": [
        "int count ( int 0 )",
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "{ return ans ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        16
      ],
      "mod_code": [
        "int count ( int 0 )",
        "count ( count ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        16,
        21
      ],
      "mod_code": [
        "int count ( int 0 )",
        "count ( count ) ;",
        "count ( count ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        16,
        21,
        7
      ],
      "mod_code": [
        "int count ( int 0 )",
        "count ( count ) ;",
        "count ( count ) ;",
        "{ return ans ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        16,
        7
      ],
      "mod_code": [
        "int count ( int 0 )",
        "count ( count ) ;",
        "{ return ans ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        21
      ],
      "mod_code": [
        "int count ( int 0 )",
        "count ( count ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        21,
        7
      ],
      "mod_code": [
        "int count ( int 0 )",
        "count ( count ) ;",
        "{ return ans ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "int count ( int 0 )",
        "{ return ans ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘...’ before numeric constant"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "return count = count ;",
        "for ( int i = 0 ; i < len - 1 ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        12,
        13,
        16
      ],
      "mod_code": [
        "return count = count ;",
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "count ( count ) ;"
      ],
      "err_line": 12,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        12,
        13,
        16,
        21
      ],
      "mod_code": [
        "return count = count ;",
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "count ( count ) ;",
        "count ( count ) ;"
      ],
      "err_line": 12,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        12,
        13,
        16,
        7
      ],
      "mod_code": [
        "return count = count ;",
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "count ( count ) ;",
        "{ return ans ;"
      ],
      "err_line": 10,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        13,
        21
      ],
      "mod_code": [
        "return count = count ;",
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "count ( count ) ;"
      ],
      "err_line": 12,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        12,
        13,
        21,
        7
      ],
      "mod_code": [
        "return count = count ;",
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "count ( count ) ;",
        "{ return ans ;"
      ],
      "err_line": 10,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        13,
        7
      ],
      "mod_code": [
        "return count = count ;",
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "{ return ans ;"
      ],
      "err_line": 10,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        16
      ],
      "mod_code": [
        "return count = count ;",
        "count ( count ) ;"
      ],
      "err_line": 12,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        12,
        16,
        21
      ],
      "mod_code": [
        "return count = count ;",
        "count ( count ) ;",
        "count ( count ) ;"
      ],
      "err_line": 12,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        12,
        16,
        21,
        7
      ],
      "mod_code": [
        "return count = count ;",
        "count ( count ) ;",
        "count ( count ) ;",
        "{ return ans ;"
      ],
      "err_line": 10,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        16,
        7
      ],
      "mod_code": [
        "return count = count ;",
        "count ( count ) ;",
        "{ return ans ;"
      ],
      "err_line": 10,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        21
      ],
      "mod_code": [
        "return count = count ;",
        "count ( count ) ;"
      ],
      "err_line": 12,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        12,
        21,
        7
      ],
      "mod_code": [
        "return count = count ;",
        "count ( count ) ;",
        "{ return ans ;"
      ],
      "err_line": 10,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        7
      ],
      "mod_code": [
        "return count = count ;",
        "{ return ans ;"
      ],
      "err_line": 10,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        16
      ],
      "mod_code": [
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "count ( count ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘count(<unresolved overloaded function type>)’"
    },
    {
      "mod_line": [
        13,
        16,
        21
      ],
      "mod_code": [
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "count ( count ) ;",
        "count ( count ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘count(<unresolved overloaded function type>)’"
    },
    {
      "mod_line": [
        13,
        16,
        21,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "count ( count ) ;",
        "count ( count ) ;",
        "{ return ans ;"
      ],
      "err_line": 10,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        16,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "count ( count ) ;",
        "{ return ans ;"
      ],
      "err_line": 10,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        21
      ],
      "mod_code": [
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "count ( count ) ;"
      ],
      "err_line": 21,
      "err_msg": "no matching function for call to ‘count(<unresolved overloaded function type>)’"
    },
    {
      "mod_line": [
        13,
        21,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "count ( count ) ;",
        "{ return ans ;"
      ],
      "err_line": 10,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < len - 1 ; i ++ )",
        "{ return ans ;"
      ],
      "err_line": 10,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        21
      ],
      "mod_code": [
        "count ( count ) ;",
        "count ( count ) ;"
      ],
      "err_line": 16,
      "err_msg": "no matching function for call to ‘count(<unresolved overloaded function type>)’"
    },
    {
      "mod_line": [
        16,
        21,
        7
      ],
      "mod_code": [
        "count ( count ) ;",
        "count ( count ) ;",
        "{ return ans ;"
      ],
      "err_line": 10,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        16,
        7
      ],
      "mod_code": [
        "count ( count ) ;",
        "{ return ans ;"
      ],
      "err_line": 10,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        21,
        7
      ],
      "mod_code": [
        "count ( count ) ;",
        "{ return ans ;"
      ],
      "err_line": 10,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    }
  ]
}