{
  "meta": {
    "index": 2520,
    "hitid": "36D1BWBEHNV9AT9ZVW6O8DNUL4E2MF",
    "workerid": "AIWEXPJAU66D9",
    "probid": "822A",
    "subid": "42290690"
  },
  "lines": [
    {
      "line": 0,
      "text": "function factorial with long argument A that returns long",
      "code": "long factorial ( long A )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare long variable with name ans = 1",
      "code": "long ans = 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i from 1 to A inclusive , multiply ans by i",
      "code": "for ( int i = 1 ; i <= A ; i ++ ) ans *= i ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return ans",
      "code": "return ans ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "declare longs A and B",
      "code": "long A , B ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read A and B from the user input",
      "code": "cin >> A >> B ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print factorial ( min of A and B ) and \" \\ n \" to the standard output",
      "code": "cout << factorial ( min ( A , B ) ) << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long factorial ( long A ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long name = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "string A , B ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘const std::__cxx11::basic_string<char>’ to ‘long int’ for argument ‘1’ to ‘long int factorial(long int)’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cout << factorial ( A , B ) << \" \\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "too many arguments to function ‘long int factorial(long int)’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i )",
        "long name = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        1,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i )",
        "long name = 1 ;",
        "cout << factorial ( A , B ) << \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        1,
        8,
        0
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i )",
        "long name = 1 ;",
        "cout << factorial ( A , B ) << \" \\n \" ;",
        "long long factorial ( long A ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1,
        8,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i )",
        "long name = 1 ;",
        "cout << factorial ( A , B ) << \" \\n \" ;",
        "string A , B ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        1,
        0
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i )",
        "long name = 1 ;",
        "long long factorial ( long A ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1,
        0,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i )",
        "long name = 1 ;",
        "long long factorial ( long A ) ;",
        "string A , B ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i )",
        "long name = 1 ;",
        "string A , B ;"
      ],
      "err_line": 3,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i )",
        "cout << factorial ( A , B ) << \" \\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "too many arguments to function ‘long int factorial(long int)’"
    },
    {
      "mod_line": [
        2,
        8,
        0
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i )",
        "cout << factorial ( A , B ) << \" \\n \" ;",
        "long long factorial ( long A ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        0,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i )",
        "cout << factorial ( A , B ) << \" \\n \" ;",
        "long long factorial ( long A ) ;",
        "string A , B ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i )",
        "cout << factorial ( A , B ) << \" \\n \" ;",
        "string A , B ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘long int’ for argument ‘1’ to ‘long int factorial(long int)’"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i )",
        "long long factorial ( long A ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i )",
        "long long factorial ( long A ) ;",
        "string A , B ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i )",
        "string A , B ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘const std::__cxx11::basic_string<char>’ to ‘long int’ for argument ‘1’ to ‘long int factorial(long int)’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i ) { ans += i ; }",
        "long name = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        1,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i ) { ans += i ; }",
        "long name = 1 ;",
        "cout << factorial ( A , B ) << \" \\n \" ;"
      ],
      "err_line": 2,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        1,
        8,
        0
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i ) { ans += i ; }",
        "long name = 1 ;",
        "cout << factorial ( A , B ) << \" \\n \" ;",
        "long long factorial ( long A ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1,
        8,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i ) { ans += i ; }",
        "long name = 1 ;",
        "cout << factorial ( A , B ) << \" \\n \" ;",
        "string A , B ;"
      ],
      "err_line": 2,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        1,
        0
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i ) { ans += i ; }",
        "long name = 1 ;",
        "long long factorial ( long A ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1,
        0,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i ) { ans += i ; }",
        "long name = 1 ;",
        "long long factorial ( long A ) ;",
        "string A , B ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i ) { ans += i ; }",
        "long name = 1 ;",
        "string A , B ;"
      ],
      "err_line": 2,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i ) { ans += i ; }",
        "cout << factorial ( A , B ) << \" \\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "too many arguments to function ‘long int factorial(long int)’"
    },
    {
      "mod_line": [
        2,
        8,
        0
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i ) { ans += i ; }",
        "cout << factorial ( A , B ) << \" \\n \" ;",
        "long long factorial ( long A ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        0,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i ) { ans += i ; }",
        "cout << factorial ( A , B ) << \" \\n \" ;",
        "long long factorial ( long A ) ;",
        "string A , B ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        8,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i ) { ans += i ; }",
        "cout << factorial ( A , B ) << \" \\n \" ;",
        "string A , B ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘long int’ for argument ‘1’ to ‘long int factorial(long int)’"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i ) { ans += i ; }",
        "long long factorial ( long A ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        0,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i ) { ans += i ; }",
        "long long factorial ( long A ) ;",
        "string A , B ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= A ; i += i ) { ans += i ; }",
        "string A , B ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘const std::__cxx11::basic_string<char>’ to ‘long int’ for argument ‘1’ to ‘long int factorial(long int)’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "long name = 1 ;",
        "cout << factorial ( A , B ) << \" \\n \" ;"
      ],
      "err_line": 2,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        8,
        0
      ],
      "mod_code": [
        "long name = 1 ;",
        "cout << factorial ( A , B ) << \" \\n \" ;",
        "long long factorial ( long A ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        0,
        6
      ],
      "mod_code": [
        "long name = 1 ;",
        "cout << factorial ( A , B ) << \" \\n \" ;",
        "long long factorial ( long A ) ;",
        "string A , B ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        6
      ],
      "mod_code": [
        "long name = 1 ;",
        "cout << factorial ( A , B ) << \" \\n \" ;",
        "string A , B ;"
      ],
      "err_line": 2,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "long name = 1 ;",
        "long long factorial ( long A ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        0,
        6
      ],
      "mod_code": [
        "long name = 1 ;",
        "long long factorial ( long A ) ;",
        "string A , B ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "long name = 1 ;",
        "string A , B ;"
      ],
      "err_line": 2,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "cout << factorial ( A , B ) << \" \\n \" ;",
        "long long factorial ( long A ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        0,
        6
      ],
      "mod_code": [
        "cout << factorial ( A , B ) << \" \\n \" ;",
        "long long factorial ( long A ) ;",
        "string A , B ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "cout << factorial ( A , B ) << \" \\n \" ;",
        "string A , B ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘long int’ for argument ‘1’ to ‘long int factorial(long int)’"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "long long factorial ( long A ) ;",
        "string A , B ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}