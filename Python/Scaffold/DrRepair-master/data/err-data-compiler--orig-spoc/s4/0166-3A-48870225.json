{
  "meta": {
    "index": 166,
    "hitid": "3KVQ0UJWPXFXE2M0HHE9FISX2E45WQ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "3A",
    "subid": "48870225"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "p1 and p2 = array of chars of size 3",
      "code": "char p1 [ 3 ] , p2 [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read p1 and p2",
      "code": "cin >> p1 >> p2 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "x and y are integers with x = p2 [ 0 ] - p1 [ 0 ] , y = p2 [ 1 ] - p1 [ 1 ] ;",
      "code": "int x = p2 [ 0 ] - p1 [ 0 ] , y = p2 [ 1 ] - p1 [ 1 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "dx and dy = char pointers",
      "code": "const char * dx = \" \" , * dy = \" \" ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if x is greater than 0",
      "code": "if ( x > 0 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set value of dx to \" R \"",
      "code": "dx = \" R \" ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else if x is less than 0",
      "code": "else if ( x < 0 )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set value of dx to \" L \"",
      "code": "dx = \" L \" ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if y is greater than 0",
      "code": "if ( y > 0 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "dy = \" U \"",
      "code": "dy = \" U \" ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else if y is less than 0",
      "code": "else if ( y < 0 )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "set dy to \" D \"",
      "code": "dy = \" D \" ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "x = absolute value of x",
      "code": "x = abs ( x ) ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "y = absolute value of y",
      "code": "y = abs ( y ) ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print ( lesser of x and y ) + abs ( y - x ) and a new line",
      "code": "cout << ( x < y ? x : y ) + abs ( y - x ) << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if x is less than y",
      "code": "if ( x < y )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "while x - -",
      "code": "while ( x -- )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print dx and dy and a new line",
      "code": "cout << dx << dy << endl ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "decrease y by one",
      "code": "y -- ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "while y - - print dy",
      "code": "while ( y -- ) cout << dy << endl ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 23,
      "text": "while y - -",
      "code": "while ( y -- )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "print dx , dy and a new line",
      "code": "cout << dx << dy << endl ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "decrement x",
      "code": "x -- ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "while x - - print dx",
      "code": "while ( x -- ) cout << dx << endl ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "dx . \" R \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "dx . \" L \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "dy . \" D \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘abs(int&, int&)’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "chars . array ( 3 , p2 [ 3 ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘chars’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "p1 >> p1 >> p2 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘char [3]’ and ‘char [3]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int x = p2 [ 0 ] - p1 [ 0 ] ;"
      ],
      "err_line": 9,
      "err_msg": "‘y’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char * dx , dy ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "const int dy = \" U \" ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "int x = abs ( x ) ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "int y = abs ( y ) ;"
      ],
      "err_line": 14,
      "err_msg": "redeclaration of ‘int y’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "cout << ( lesser ( x , y ) ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 15,
      "err_msg": "‘lesser’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "dx . \" L \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        10
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "string dy = \" U \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        12
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "dy . \" D \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        15
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        21
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        10
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "string dy = \" U \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        10,
        12
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "string dy = \" U \" ;",
        "dy . \" D \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        10,
        15
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        10,
        21
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "string dy = \" U \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        10,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "string dy = \" U \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        10,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "string dy = \" U \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        12
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "dy . \" D \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        12,
        15
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        12,
        21
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        12,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "dy . \" D \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        12,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "dy . \" D \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        15
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        15,
        21
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        15,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        15,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        21
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        21,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        21,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "while ( y -- ) cout << dy ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        24,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" R \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        10
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;",
        "string dy = \" U \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        10,
        12
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "dy . \" D \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        10,
        15
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        10,
        21
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        10,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        10,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        12
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;",
        "dy . \" D \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        12,
        15
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        12,
        21
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;",
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        12,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;",
        "dy . \" D \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        12,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;",
        "dy . \" D \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        15
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        15,
        21
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        15,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        15,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        21
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        21,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        21,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;",
        "while ( y -- ) cout << dy ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        24,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dx . \" L \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "string dy = \" U \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        12
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "string dy = \" U \" ;",
        "dy . \" D \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        12,
        15
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        12,
        21
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        12,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        12,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        15
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        15,
        21
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        15,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        15,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        21
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "string dy = \" U \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        21,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "string dy = \" U \" ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        21,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "string dy = \" U \" ;",
        "while ( y -- ) cout << dy ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "string dy = \" U \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        24,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "string dy = \" U \" ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "string dy = \" U \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dy . \" D \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        15
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        15,
        21
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        15,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        15,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        21
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        21,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        21,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dy . \" D \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        24,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dy . \" D \" ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "dy . \" D \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        15,
        21
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        15,
        21,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        15,
        21,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        15,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        15,
        24,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        15,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        21
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        21,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        21,
        24,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        21,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "while ( y -- ) cout << dy ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        24
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        24,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        27
      ],
      "mod_code": [
        "char p1 , p2 [ 3 ] ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        8,
        10
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "string dy = \" U \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        8,
        10,
        12
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "dy . \" D \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        8,
        10,
        15
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        8,
        10,
        21
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        8,
        10,
        24
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        8,
        10,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        8,
        12
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "dy . \" D \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        8,
        12,
        15
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        8,
        12,
        21
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        8,
        12,
        24
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "dy . \" D \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        8,
        12,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "dy . \" D \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        8,
        15
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        8,
        15,
        21
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        8,
        15,
        24
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        8,
        15,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        8,
        21
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        8,
        21,
        24
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        8,
        21,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "while ( y -- ) cout << dy ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        8,
        24
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        8,
        24,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        8,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dx . \" L \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "string dy = \" U \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        10,
        12
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "string dy = \" U \" ;",
        "dy . \" D \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        10,
        12,
        15
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        10,
        12,
        21
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        10,
        12,
        24
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        10,
        12,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        10,
        15
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        10,
        15,
        21
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        10,
        15,
        24
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        10,
        15,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        10,
        21
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "string dy = \" U \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        10,
        21,
        24
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "string dy = \" U \" ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        10,
        21,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "string dy = \" U \" ;",
        "while ( y -- ) cout << dy ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        10,
        24
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "string dy = \" U \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        10,
        24,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "string dy = \" U \" ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        10,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "string dy = \" U \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dy . \" D \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        12,
        15
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        12,
        15,
        21
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        12,
        15,
        24
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        12,
        15,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        12,
        21
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        12,
        21,
        24
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        12,
        21,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        12,
        24
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dy . \" D \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        12,
        24,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dy . \" D \" ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        12,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "dy . \" D \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        15,
        21
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        15,
        21,
        24
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        15,
        21,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        15,
        24
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        15,
        24,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        15,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        21
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        21,
        24
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        21,
        24,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        21,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "while ( y -- ) cout << dy ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        24
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        24,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        6,
        27
      ],
      "mod_code": [
        "dx . \" R \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "string dy = \" U \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        10,
        12
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "dy . \" D \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        10,
        12,
        15
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        10,
        12,
        21
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        10,
        12,
        24
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        10,
        12,
        27
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        10,
        15
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        10,
        15,
        21
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        10,
        15,
        24
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        10,
        15,
        27
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        10,
        21
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        10,
        21,
        24
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        10,
        21,
        27
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "while ( y -- ) cout << dy ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        10,
        24
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        10,
        24,
        27
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        10,
        27
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "string dy = \" U \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "dy . \" D \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        12,
        15
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        12,
        15,
        21
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        12,
        15,
        24
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        12,
        15,
        27
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        12,
        21
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        12,
        21,
        24
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        12,
        21,
        27
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        12,
        24
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "dy . \" D \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        12,
        24,
        27
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "dy . \" D \" ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        12,
        27
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "dy . \" D \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        15
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        15,
        21
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        15,
        21,
        24
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        15,
        21,
        27
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        15,
        24
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        15,
        24,
        27
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        15,
        27
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        21
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        21,
        24
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        21,
        24,
        27
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        21,
        27
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "while ( y -- ) cout << dy ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        24
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        24,
        27
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        27
      ],
      "mod_code": [
        "dx . \" L \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "string dy = \" U \" ;",
        "dy . \" D \" ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        10,
        12,
        15
      ],
      "mod_code": [
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        10,
        12,
        15,
        21
      ],
      "mod_code": [
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        10,
        12,
        15,
        24
      ],
      "mod_code": [
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        10,
        12,
        15,
        27
      ],
      "mod_code": [
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        10,
        12,
        21
      ],
      "mod_code": [
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        10,
        12,
        21,
        24
      ],
      "mod_code": [
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        10,
        12,
        21,
        27
      ],
      "mod_code": [
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        10,
        12,
        24
      ],
      "mod_code": [
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        10,
        12,
        24,
        27
      ],
      "mod_code": [
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        10,
        12,
        27
      ],
      "mod_code": [
        "string dy = \" U \" ;",
        "dy . \" D \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘abs(int&, int&)’"
    },
    {
      "mod_line": [
        10,
        15,
        21
      ],
      "mod_code": [
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘abs(int&, int&)’"
    },
    {
      "mod_line": [
        10,
        15,
        21,
        24
      ],
      "mod_code": [
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘abs(int&, int&)’"
    },
    {
      "mod_line": [
        10,
        15,
        21,
        27
      ],
      "mod_code": [
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘abs(int&, int&)’"
    },
    {
      "mod_line": [
        10,
        15,
        24
      ],
      "mod_code": [
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘abs(int&, int&)’"
    },
    {
      "mod_line": [
        10,
        15,
        24,
        27
      ],
      "mod_code": [
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘abs(int&, int&)’"
    },
    {
      "mod_line": [
        10,
        15,
        27
      ],
      "mod_code": [
        "string dy = \" U \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘abs(int&, int&)’"
    },
    {
      "mod_line": [
        12,
        15
      ],
      "mod_code": [
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        12,
        15,
        21
      ],
      "mod_code": [
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        12,
        15,
        21,
        24
      ],
      "mod_code": [
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        12,
        15,
        21,
        27
      ],
      "mod_code": [
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        12,
        15,
        24
      ],
      "mod_code": [
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        12,
        15,
        24,
        27
      ],
      "mod_code": [
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        12,
        15,
        27
      ],
      "mod_code": [
        "dy . \" D \" ;",
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        12,
        21
      ],
      "mod_code": [
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        12,
        21,
        24
      ],
      "mod_code": [
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        12,
        21,
        24,
        27
      ],
      "mod_code": [
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        12,
        21,
        27
      ],
      "mod_code": [
        "dy . \" D \" ;",
        "while ( y -- ) cout << dy ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        12,
        24
      ],
      "mod_code": [
        "dy . \" D \" ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        12,
        24,
        27
      ],
      "mod_code": [
        "dy . \" D \" ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        12,
        27
      ],
      "mod_code": [
        "dy . \" D \" ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 12,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        15,
        21
      ],
      "mod_code": [
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘abs(int&, int&)’"
    },
    {
      "mod_line": [
        15,
        21,
        24
      ],
      "mod_code": [
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘abs(int&, int&)’"
    },
    {
      "mod_line": [
        15,
        21,
        24,
        27
      ],
      "mod_code": [
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘abs(int&, int&)’"
    },
    {
      "mod_line": [
        15,
        21,
        27
      ],
      "mod_code": [
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( y -- ) cout << dy ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘abs(int&, int&)’"
    },
    {
      "mod_line": [
        15,
        24
      ],
      "mod_code": [
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘abs(int&, int&)’"
    },
    {
      "mod_line": [
        15,
        24,
        27
      ],
      "mod_code": [
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "cout << \" dx \" << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘abs(int&, int&)’"
    },
    {
      "mod_line": [
        15,
        27
      ],
      "mod_code": [
        "cout << ( int ) abs ( x , y ) + abs ( y - x ) << endl ;",
        "while ( x -- ) cout << dx ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘abs(int&, int&)’"
    }
  ]
}