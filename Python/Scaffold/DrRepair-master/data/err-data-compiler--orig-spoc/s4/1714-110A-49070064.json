{
  "meta": {
    "index": 1714,
    "hitid": "3T5ZXGO9DEIQ1JA3CWMJCXH6GE3ZQ0",
    "workerid": "ACI8PUCF5OPDC",
    "probid": "110A",
    "subid": "49070064"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string str",
      "code": "string str ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "get str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer len with len = length of str",
      "code": "int len = str . length ( ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integer count with count = 0",
      "code": "int count = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for integer i = 0 to len exclusive",
      "code": "for ( int i = 0 ; i < len ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if str [ i ] is equal to 4 or 7 then increment count",
      "code": "if ( str [ i ] == ' 4 ' || str [ i ] == ' 7 ' ) { count ++ ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if count is equal to 4 or 7 then",
      "code": "if ( count == 4 || count == 7 )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char str ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( count == \" 4 \" || count == \" 7 \" )"
      ],
      "err_line": 8,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "gets ( str ) ;",
        "char str ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        10
      ],
      "mod_code": [
        "gets ( str ) ;",
        "char str ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        10,
        6
      ],
      "mod_code": [
        "gets ( str ) ;",
        "char str ;",
        "else else",
        "if ( str [ i ] == ' 4 ' ) count ++ ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        10,
        8
      ],
      "mod_code": [
        "gets ( str ) ;",
        "char str ;",
        "else else",
        "if ( count == \" 4 \" || count == \" 7 \" )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        6
      ],
      "mod_code": [
        "gets ( str ) ;",
        "char str ;",
        "if ( str [ i ] == ' 4 ' ) count ++ ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        6,
        8
      ],
      "mod_code": [
        "gets ( str ) ;",
        "char str ;",
        "if ( str [ i ] == ' 4 ' ) count ++ ;",
        "if ( count == \" 4 \" || count == \" 7 \" )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        8
      ],
      "mod_code": [
        "gets ( str ) ;",
        "char str ;",
        "if ( count == \" 4 \" || count == \" 7 \" )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "gets ( str ) ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        10,
        6
      ],
      "mod_code": [
        "gets ( str ) ;",
        "else else",
        "if ( str [ i ] == ' 4 ' ) count ++ ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        10,
        6,
        8
      ],
      "mod_code": [
        "gets ( str ) ;",
        "else else",
        "if ( str [ i ] == ' 4 ' ) count ++ ;",
        "if ( count == \" 4 \" || count == \" 7 \" )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        10,
        8
      ],
      "mod_code": [
        "gets ( str ) ;",
        "else else",
        "if ( count == \" 4 \" || count == \" 7 \" )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "gets ( str ) ;",
        "if ( str [ i ] == ' 4 ' ) count ++ ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        6,
        8
      ],
      "mod_code": [
        "gets ( str ) ;",
        "if ( str [ i ] == ' 4 ' ) count ++ ;",
        "if ( count == \" 4 \" || count == \" 7 \" )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "gets ( str ) ;",
        "if ( count == \" 4 \" || count == \" 7 \" )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "char str ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        1,
        10,
        6
      ],
      "mod_code": [
        "char str ;",
        "else else",
        "if ( str [ i ] == ' 4 ' ) count ++ ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        1,
        10,
        6,
        8
      ],
      "mod_code": [
        "char str ;",
        "else else",
        "if ( str [ i ] == ' 4 ' ) count ++ ;",
        "if ( count == \" 4 \" || count == \" 7 \" )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        1,
        10,
        8
      ],
      "mod_code": [
        "char str ;",
        "else else",
        "if ( count == \" 4 \" || count == \" 7 \" )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "char str ;",
        "if ( str [ i ] == ' 4 ' ) count ++ ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "char str ;",
        "if ( str [ i ] == ' 4 ' ) count ++ ;",
        "if ( count == \" 4 \" || count == \" 7 \" )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "char str ;",
        "if ( count == \" 4 \" || count == \" 7 \" )"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "else else",
        "if ( str [ i ] == ' 4 ' ) count ++ ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        6,
        8
      ],
      "mod_code": [
        "else else",
        "if ( str [ i ] == ' 4 ' ) count ++ ;",
        "if ( count == \" 4 \" || count == \" 7 \" )"
      ],
      "err_line": 8,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "else else",
        "if ( count == \" 4 \" || count == \" 7 \" )"
      ],
      "err_line": 8,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "if ( str [ i ] == ' 4 ' ) count ++ ;",
        "if ( count == \" 4 \" || count == \" 7 \" )"
      ],
      "err_line": 8,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    }
  ]
}