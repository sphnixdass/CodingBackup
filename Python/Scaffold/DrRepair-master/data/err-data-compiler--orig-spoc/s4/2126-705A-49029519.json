{
  "meta": {
    "index": 2126,
    "hitid": "35O6H0UNLSAB8IM1AIVUQSYP1K65JB",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "705A",
    "subid": "49029519"
  },
  "lines": [
    {
      "line": 0,
      "text": "r = string",
      "code": "string r ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a , d = int",
      "code": "int a , d ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print \" I hate \"",
      "code": "cout << \" I hate \" ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 1 to a exclusive",
      "code": "for ( int i = 1 ; i < a ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if a is 1",
      "code": "if ( a == 1 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if i is odd",
      "code": "else if ( i % 2 != 0 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print \" that I love \"",
      "code": "cout << \" that I love \" ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print \" that I hate \"",
      "code": "cout << \" that I hate \" ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" it \"",
      "code": "cout << \" it \" << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ d ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        9,
        11,
        10
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" Oh, \" << endl ;",
        "cout << \" Oh, \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        9,
        5,
        10
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" Oh, \" << endl ;",
        "for ( int i = 1 ; i <= a ; i ++ )",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        9,
        10
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" Oh, \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        11,
        5,
        10
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" Oh, \" << endl ;",
        "for ( int i = 1 ; i <= a ; i ++ )",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        11,
        9,
        10
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" Oh, \" << endl ;",
        "cout << \" OOOO- \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        11,
        10
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" Oh, \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        5,
        9,
        10
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "for ( int i = 1 ; i <= a ; i ++ )",
        "cout << \" OOOO- \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        5,
        10
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "for ( int i = 1 ; i <= a ; i ++ )",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        9,
        10
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" OOOO- \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        11,
        5,
        10
      ],
      "mod_code": [
        "cout << \" Oh, \" << endl ;",
        "cout << \" Oh, \" << endl ;",
        "for ( int i = 1 ; i <= a ; i ++ )",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        11,
        10
      ],
      "mod_code": [
        "cout << \" Oh, \" << endl ;",
        "cout << \" Oh, \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        5,
        10
      ],
      "mod_code": [
        "cout << \" Oh, \" << endl ;",
        "for ( int i = 1 ; i <= a ; i ++ )",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "cout << \" Oh, \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        5,
        9,
        10
      ],
      "mod_code": [
        "cout << \" Oh, \" << endl ;",
        "for ( int i = 1 ; i <= a ; i ++ )",
        "cout << \" OOOO- \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        5,
        10
      ],
      "mod_code": [
        "cout << \" Oh, \" << endl ;",
        "for ( int i = 1 ; i <= a ; i ++ )",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        9,
        10
      ],
      "mod_code": [
        "cout << \" Oh, \" << endl ;",
        "cout << \" OOOO- \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "cout << \" Oh, \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        9,
        10
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= a ; i ++ )",
        "cout << \" OOOO- \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= a ; i ++ )",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "cout << \" OOOO- \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}