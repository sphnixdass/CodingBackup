{
  "meta": {
    "index": 943,
    "hitid": "3D06DR5225DYFW438BZ3EV6SXS2AMQ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "275A",
    "subid": "48092756"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare change with 2d boolean array mat with size [ ] by 3 , integers i , j as arguments , returning void",
      "code": "void change ( bool mat [ ] [ 3 ] , int i , int j )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if mat [ i ] [ j ] is true",
      "code": "if ( mat [ i ] [ j ] == true )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "set mat [ i ] [ j ] to false",
      "code": "mat [ i ] [ j ] = false ;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set mat [ i ] [ j ] to true",
      "code": "mat [ i ] [ j ] = true ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "create 2d boolean array lights with size 3 by 3",
      "code": "bool lights [ 3 ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for j = 0 to 3 exclusive , set lights [ i ] [ j ] to true",
      "code": "for ( int j = 0 ; j < 3 ; j ++ ) { lights [ i ] [ j ] = true ; }",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "create 2d boolean array toggle with size 3 by 3",
      "code": "bool toggle [ 3 ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for j = 0 to 3 exclusive",
      "code": "for ( int j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "create integer temp",
      "code": "int temp ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "read temp",
      "code": "cin >> temp ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "if temp % 2 is 0",
      "code": "if ( temp % 2 == 0 )",
      "indent": 3
    },
    {
      "line": 17,
      "text": "set toggle [ i ] [ j ] to 0",
      "code": "toggle [ i ] [ j ] = 0 ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 19,
      "text": "set toggle [ i ] [ j ] to 0",
      "code": "toggle [ i ] [ j ] = 1 ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "create integers i , j , with i = 0 , j = 0",
      "code": "int i = 0 , j = 0 ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "while i is less than 3",
      "code": "while ( i < 3 )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "set j to 0",
      "code": "j = 0 ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "while j is less than 3",
      "code": "while ( j < 3 )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "if toggle [ i ] [ j ] is 1",
      "code": "if ( toggle [ i ] [ j ] == 1 )",
      "indent": 3
    },
    {
      "line": 27,
      "text": "run change with lights , i , j as arguments",
      "code": "change ( lights , i , j ) ;",
      "indent": 4
    },
    {
      "line": 28,
      "text": "if ( i - 1 ) is greater than or equal to 0 , run change with lights , i - 1 , j as arguments",
      "code": "if ( ( i - 1 ) >= 0 ) change ( lights , i - 1 , j ) ;",
      "indent": 4
    },
    {
      "line": 29,
      "text": "if i + 1 is less than 3 , run change with lights , i + 1 , j as arguments",
      "code": "if ( ( i + 1 ) < 3 ) change ( lights , i + 1 , j ) ;",
      "indent": 4
    },
    {
      "line": 30,
      "text": "if j - 1 is greater than or equal to 0 , run change with lights , i , j - 1 as arguments",
      "code": "if ( ( j - 1 ) >= 0 ) change ( lights , i , j - 1 ) ;",
      "indent": 4
    },
    {
      "line": 31,
      "text": "if j + 1 is less than 3 , run change with lights , i , j + 1 as arguments",
      "code": "if ( ( j + 1 ) < 3 ) change ( lights , i , j + 1 ) ;",
      "indent": 4
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 33,
      "text": "increment j",
      "code": "j ++ ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 35,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 2
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 37,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 38,
      "text": "for j = 0 to 3 exclusive , print lights [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < 3 ; j ++ ) { cout << lights [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 39,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;"
      ],
      "err_line": 28,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;"
      ],
      "err_line": 29,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;"
      ],
      "err_line": 31,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j , j ;"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "mat [ i ] [ j ] ] = false ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "mat [ i ] [ j ] ] = true ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "bool lights [ 3 ] [ 11 ] ;"
      ],
      "err_line": 27,
      "err_msg": "cannot convert ‘bool (*)[11]’ to ‘bool (*)[3]’ for argument ‘1’ to ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "int n ;"
      ],
      "err_line": 15,
      "err_msg": "‘temp’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 15,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "int i , j = 0 , j = 0 ;"
      ],
      "err_line": 22,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "change ( change , i , j ) ;"
      ],
      "err_line": 27,
      "err_msg": "cannot convert ‘void (*)(bool (*)[3], int, int)’ to ‘bool (*)[3]’ for argument ‘1’ to ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "if ( i + 1 < 3 ) change = change ( lights , i + 1 , j ) ;"
      ],
      "err_line": 29,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "if ( j - 1 >= 0 ) change = change ( lights , i , j - 1 ) ;"
      ],
      "err_line": 30,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        0,
        19
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "toggle [ i ] [ j ] = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        19,
        28
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "toggle [ i ] [ j ] = 0 ;",
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        19,
        28,
        29
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "toggle [ i ] [ j ] = 0 ;",
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        19,
        28,
        31
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "toggle [ i ] [ j ] = 0 ;",
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        19,
        28,
        23
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "toggle [ i ] [ j ] = 0 ;",
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "while ( i <= 3 )"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        19,
        29
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "toggle [ i ] [ j ] = 0 ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        19,
        29,
        31
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "toggle [ i ] [ j ] = 0 ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        19,
        29,
        23
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "toggle [ i ] [ j ] = 0 ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;",
        "while ( i <= 3 )"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        19,
        31
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "toggle [ i ] [ j ] = 0 ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        19,
        31,
        23
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "toggle [ i ] [ j ] = 0 ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;",
        "while ( i <= 3 )"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        19,
        23
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "toggle [ i ] [ j ] = 0 ;",
        "while ( i <= 3 )"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        28
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        28,
        29
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        28,
        29,
        31
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        28,
        29,
        23
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;",
        "while ( i <= 3 )"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        28,
        31
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        28,
        31,
        23
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;",
        "while ( i <= 3 )"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        28,
        23
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "while ( i <= 3 )"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        29
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        29,
        31
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        29,
        31,
        23
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;",
        "while ( i <= 3 )"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        29,
        23
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;",
        "while ( i <= 3 )"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        31
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        31,
        23
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;",
        "while ( i <= 3 )"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        0,
        23
      ],
      "mod_code": [
        "void change [ 3 ] [ 3 ] , i , j ;",
        "while ( i <= 3 )"
      ],
      "err_line": 0,
      "err_msg": "declaration of ‘change’ as array of void"
    },
    {
      "mod_line": [
        19,
        28
      ],
      "mod_code": [
        "toggle [ i ] [ j ] = 0 ;",
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;"
      ],
      "err_line": 28,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        19,
        28,
        29
      ],
      "mod_code": [
        "toggle [ i ] [ j ] = 0 ;",
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;"
      ],
      "err_line": 28,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        19,
        28,
        29,
        31
      ],
      "mod_code": [
        "toggle [ i ] [ j ] = 0 ;",
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;"
      ],
      "err_line": 28,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        19,
        28,
        29,
        23
      ],
      "mod_code": [
        "toggle [ i ] [ j ] = 0 ;",
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;",
        "while ( i <= 3 )"
      ],
      "err_line": 28,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        19,
        28,
        31
      ],
      "mod_code": [
        "toggle [ i ] [ j ] = 0 ;",
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;"
      ],
      "err_line": 28,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        19,
        28,
        31,
        23
      ],
      "mod_code": [
        "toggle [ i ] [ j ] = 0 ;",
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;",
        "while ( i <= 3 )"
      ],
      "err_line": 28,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        19,
        28,
        23
      ],
      "mod_code": [
        "toggle [ i ] [ j ] = 0 ;",
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "while ( i <= 3 )"
      ],
      "err_line": 28,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        19,
        29
      ],
      "mod_code": [
        "toggle [ i ] [ j ] = 0 ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;"
      ],
      "err_line": 29,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        19,
        29,
        31
      ],
      "mod_code": [
        "toggle [ i ] [ j ] = 0 ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;"
      ],
      "err_line": 29,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        19,
        29,
        31,
        23
      ],
      "mod_code": [
        "toggle [ i ] [ j ] = 0 ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;",
        "while ( i <= 3 )"
      ],
      "err_line": 29,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        19,
        29,
        23
      ],
      "mod_code": [
        "toggle [ i ] [ j ] = 0 ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;",
        "while ( i <= 3 )"
      ],
      "err_line": 29,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        19,
        31
      ],
      "mod_code": [
        "toggle [ i ] [ j ] = 0 ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;"
      ],
      "err_line": 31,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        19,
        31,
        23
      ],
      "mod_code": [
        "toggle [ i ] [ j ] = 0 ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;",
        "while ( i <= 3 )"
      ],
      "err_line": 31,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        28,
        29
      ],
      "mod_code": [
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;"
      ],
      "err_line": 28,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        28,
        29,
        31
      ],
      "mod_code": [
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;"
      ],
      "err_line": 28,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        28,
        29,
        31,
        23
      ],
      "mod_code": [
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;",
        "while ( i <= 3 )"
      ],
      "err_line": 28,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        28,
        29,
        23
      ],
      "mod_code": [
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;",
        "while ( i <= 3 )"
      ],
      "err_line": 28,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        28,
        31
      ],
      "mod_code": [
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;"
      ],
      "err_line": 28,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        28,
        31,
        23
      ],
      "mod_code": [
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;",
        "while ( i <= 3 )"
      ],
      "err_line": 28,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        28,
        23
      ],
      "mod_code": [
        "if ( ( i - 1 ) >= 0 ) change = lights , i - 1 , j ;",
        "while ( i <= 3 )"
      ],
      "err_line": 28,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        29,
        31
      ],
      "mod_code": [
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;"
      ],
      "err_line": 29,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        29,
        31,
        23
      ],
      "mod_code": [
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;",
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;",
        "while ( i <= 3 )"
      ],
      "err_line": 29,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        29,
        23
      ],
      "mod_code": [
        "if ( i + 1 < 3 ) change = lights , i + 1 , j ;",
        "while ( i <= 3 )"
      ],
      "err_line": 29,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    },
    {
      "mod_line": [
        31,
        23
      ],
      "mod_code": [
        "if ( j + 1 < 3 ) change = change ( lights , i , j + 1 ) ;",
        "while ( i <= 3 )"
      ],
      "err_line": 31,
      "err_msg": "assignment of function ‘void change(bool (*)[3], int, int)’"
    }
  ]
}