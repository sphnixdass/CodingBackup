{
  "meta": {
    "index": 2320,
    "hitid": "3FSEU3P2NRUHBT3CFUH6VKPC2WSRRV",
    "workerid": "A1APYLD4DUK33J",
    "probid": "891A",
    "subid": "47484559"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integer array dp with size 2001",
      "code": "int dp [ 2001 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare gcd with integers a , b , returning integer",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "if b is true return result of run gcd with b , a % b as arguments from function",
      "code": "if ( b ) return gcd ( b , a % b ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return a from function",
      "code": "return a ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "create integers n , cnt , with cnt = 0",
      "code": "int n , cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create integer array arr with size n , create integers minm , g , with minm = 2005 , g = 0",
      "code": "int arr [ n ] , minm = 2005 , g = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read arr [ i ]",
      "code": "cin >> arr [ i ] ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if arr [ i ] is 1 , increment cnt",
      "code": "if ( arr [ i ] == 1 ) cnt ++ ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set g to result of run gcd with arr [ i ] , g as arguments",
      "code": "g = gcd ( arr [ i ] , g ) ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if g is not 1",
      "code": "if ( g != 1 )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" - 1 \\ n \"",
      "code": "cout << \" -1\\n \" ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "else if cnt is true",
      "code": "else if ( cnt )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print n - cnt print \" \\ n \"",
      "code": "cout << n - cnt << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "set g to 0",
      "code": "g = 0 ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "create integer l with l = 0",
      "code": "int l = 0 ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "for j = i to n exclusive",
      "code": "for ( int j = i ; j < n ; j ++ )",
      "indent": 3
    },
    {
      "line": 23,
      "text": "set g to result of run gcd with g , arr [ j ] as arguments",
      "code": "g = gcd ( g , arr [ j ] ) ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "if g is 1 , break loop",
      "code": "if ( g == 1 ) break ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "increment l",
      "code": "l ++ ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "if g is 1 , set minm to minimum of minm and l",
      "code": "if ( g == 1 ) minm = min ( minm , l ) ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 29,
      "text": "print n + minm - 1 print \" \\ n \"",
      "code": "cout << n + minm - 1 << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int n , cnt = 0 , cnt ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int cnt’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 10,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "arr >> arr [ i ] ;"
      ],
      "err_line": 10,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "g = gcd ( arr [ i ] , g , g ) ;"
      ],
      "err_line": 12,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "l = 0 ;"
      ],
      "err_line": 21,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "for ( j = i ; j < n ; j ++ )"
      ],
      "err_line": 22,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "g ] = gcd ( g , arr [ j ] ) ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int arr [ n ] , minm = 0 , g = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        21
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "l = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        21,
        14
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "l = 0 ;",
        "if ( g )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        21,
        12
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "l = 0 ;",
        "g = gcd ( arr [ i ] , g , g ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        21,
        19
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "l = 0 ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        14
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "if ( g )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        14,
        12
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "if ( g )",
        "g = gcd ( arr [ i ] , g , g ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        14,
        19
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "if ( g )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        12
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "g = gcd ( arr [ i ] , g , g ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        12,
        19
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "g = gcd ( arr [ i ] , g , g ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        19
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        21
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "l = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        21,
        14
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "l = 0 ;",
        "if ( g )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        21,
        14,
        12
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "l = 0 ;",
        "if ( g )",
        "g = gcd ( arr [ i ] , g , g ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        21,
        14,
        19
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "l = 0 ;",
        "if ( g )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        21,
        12
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "l = 0 ;",
        "g = gcd ( arr [ i ] , g , g ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        21,
        12,
        19
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "l = 0 ;",
        "g = gcd ( arr [ i ] , g , g ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        21,
        19
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "l = 0 ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( g )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        14,
        12
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( g )",
        "g = gcd ( arr [ i ] , g , g ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        14,
        12,
        19
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( g )",
        "g = gcd ( arr [ i ] , g , g ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        14,
        19
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "if ( g )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "g = gcd ( arr [ i ] , g , g ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        12,
        19
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "g = gcd ( arr [ i ] , g , g ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        19
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        21
      ],
      "mod_code": [
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "l = 0 ;"
      ],
      "err_line": 21,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        21,
        14
      ],
      "mod_code": [
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "l = 0 ;",
        "if ( g )"
      ],
      "err_line": 21,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        21,
        14,
        12
      ],
      "mod_code": [
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "l = 0 ;",
        "if ( g )",
        "g = gcd ( arr [ i ] , g , g ) ;"
      ],
      "err_line": 12,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        8,
        21,
        14,
        19
      ],
      "mod_code": [
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "l = 0 ;",
        "if ( g )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        21,
        12
      ],
      "mod_code": [
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "l = 0 ;",
        "g = gcd ( arr [ i ] , g , g ) ;"
      ],
      "err_line": 12,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        8,
        21,
        12,
        19
      ],
      "mod_code": [
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "l = 0 ;",
        "g = gcd ( arr [ i ] , g , g ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        8,
        21,
        19
      ],
      "mod_code": [
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "l = 0 ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        14,
        12
      ],
      "mod_code": [
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "if ( g )",
        "g = gcd ( arr [ i ] , g , g ) ;"
      ],
      "err_line": 12,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        8,
        14,
        12,
        19
      ],
      "mod_code": [
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "if ( g )",
        "g = gcd ( arr [ i ] , g , g ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        8,
        14,
        19
      ],
      "mod_code": [
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "if ( g )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "g = gcd ( arr [ i ] , g , g ) ;"
      ],
      "err_line": 12,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        8,
        12,
        19
      ],
      "mod_code": [
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "g = gcd ( arr [ i ] , g , g ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        8,
        19
      ],
      "mod_code": [
        "int arr [ n ] , minm = 0 , g = 0 ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        21,
        14
      ],
      "mod_code": [
        "l = 0 ;",
        "if ( g )"
      ],
      "err_line": 21,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        14,
        12
      ],
      "mod_code": [
        "l = 0 ;",
        "if ( g )",
        "g = gcd ( arr [ i ] , g , g ) ;"
      ],
      "err_line": 12,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        21,
        14,
        12,
        19
      ],
      "mod_code": [
        "l = 0 ;",
        "if ( g )",
        "g = gcd ( arr [ i ] , g , g ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        21,
        14,
        19
      ],
      "mod_code": [
        "l = 0 ;",
        "if ( g )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        21,
        12
      ],
      "mod_code": [
        "l = 0 ;",
        "g = gcd ( arr [ i ] , g , g ) ;"
      ],
      "err_line": 12,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        21,
        12,
        19
      ],
      "mod_code": [
        "l = 0 ;",
        "g = gcd ( arr [ i ] , g , g ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        21,
        19
      ],
      "mod_code": [
        "l = 0 ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "if ( g )",
        "g = gcd ( arr [ i ] , g , g ) ;"
      ],
      "err_line": 12,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        14,
        12,
        19
      ],
      "mod_code": [
        "if ( g )",
        "g = gcd ( arr [ i ] , g , g ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        14,
        19
      ],
      "mod_code": [
        "if ( g )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        19
      ],
      "mod_code": [
        "g = gcd ( arr [ i ] , g , g ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "too many arguments to function ‘int gcd(int, int)’"
    }
  ]
}