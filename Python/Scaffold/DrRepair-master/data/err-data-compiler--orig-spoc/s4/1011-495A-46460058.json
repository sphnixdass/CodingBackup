{
  "meta": {
    "index": 1011,
    "hitid": "3KI0JD2ZU1CE7RLDESG2F87G6KK67O",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "495A",
    "subid": "46460058"
  },
  "lines": [
    {
      "line": 0,
      "text": "in integer function getGood that takes a = char",
      "code": "int getGood ( char a )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if a = ' 0 ' then return 2",
      "code": "if ( a == ' 0 ' ) return 2 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if a = ' 1 ' then return 7",
      "code": "if ( a == ' 1 ' ) return 7 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if a = ' 2 ' return 2",
      "code": "if ( a == ' 2 ' ) return 2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if a = ' 3 ' return 3",
      "code": "if ( a == ' 3 ' ) return 3 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if a = ' 4 ' return 3",
      "code": "if ( a == ' 4 ' ) return 3 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if a = ' 5 ' then return 4",
      "code": "if ( a == ' 5 ' ) return 4 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if a = ' 6 ' return 2",
      "code": "if ( a == ' 6 ' ) return 2 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if a = ' 7 ' return 5",
      "code": "if ( a == ' 7 ' ) return 5 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if a = ' 8 ' then return 1",
      "code": "if ( a == ' 8 ' ) return 1 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "in any other case return 2",
      "code": "return 2 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 13,
      "text": "a = string",
      "code": "string a ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print getGood of a [ 0 ] * getGood of a [ 1 ]",
      "code": "cout << getGood ( a [ 0 ] ) * getGood ( a [ 1 ] ) << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else"
      ],
      "err_line": 14,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "gets ( a ) ;"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "cout << getGood ( a [ 0 ] * getGood * a [ 1 ] ) << endl ;"
      ],
      "err_line": 15,
      "err_msg": "invalid operands of types ‘char’ and ‘int(char)’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "else",
        "cout << getGood ( a [ 0 ] * getGood ( a [ 1 ] ) ) << endl ;"
      ],
      "err_line": 14,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        15,
        14
      ],
      "mod_code": [
        "else",
        "cout << getGood ( a [ 0 ] * getGood ( a [ 1 ] ) ) << endl ;",
        "gets ( a ) ;"
      ],
      "err_line": 14,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        14
      ],
      "mod_code": [
        "else",
        "gets ( a ) ;"
      ],
      "err_line": 14,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        14,
        15
      ],
      "mod_code": [
        "else",
        "gets ( a ) ;",
        "cout << getGood ( a [ 0 ] * getGood * a [ 1 ] ) << endl ;"
      ],
      "err_line": 14,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "else",
        "cout << getGood ( a [ 0 ] * getGood * a [ 1 ] ) << endl ;"
      ],
      "err_line": 14,
      "err_msg": "a function-definition is not allowed here before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        14
      ],
      "mod_code": [
        "cout << getGood ( a [ 0 ] * getGood ( a [ 1 ] ) ) << endl ;",
        "gets ( a ) ;"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        15,
        14,
        10
      ],
      "mod_code": [
        "cout << getGood ( a [ 0 ] * getGood ( a [ 1 ] ) ) << endl ;",
        "gets ( a ) ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        10
      ],
      "mod_code": [
        "cout << getGood ( a [ 0 ] * getGood ( a [ 1 ] ) ) << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        15
      ],
      "mod_code": [
        "gets ( a ) ;",
        "cout << getGood ( a [ 0 ] * getGood * a [ 1 ] ) << endl ;"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        14,
        15,
        10
      ],
      "mod_code": [
        "gets ( a ) ;",
        "cout << getGood ( a [ 0 ] * getGood * a [ 1 ] ) << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        10
      ],
      "mod_code": [
        "gets ( a ) ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        10
      ],
      "mod_code": [
        "cout << getGood ( a [ 0 ] * getGood * a [ 1 ] ) << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}