{
  "meta": {
    "index": 2696,
    "hitid": "3DTJ4WT8BD914GKY35RJIGSSW96ZEA",
    "workerid": "A1APYLD4DUK33J",
    "probid": "12A",
    "subid": "46003293"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers i , j , k , l , p , q , r with p = 0 , q = 0",
      "code": "int i , j , k , l , p = 0 , q = 0 , r ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create strings a , b , c",
      "code": "string a , b , c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read a read b read c",
      "code": "cin >> a >> b >> c ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if b [ 0 ] is not b [ 2 ]",
      "code": "if ( b [ 0 ] != b [ 2 ] )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if a [ i ] is ' X ' , increment p",
      "code": "if ( a [ i ] == ' X ' ) p ++ ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for j = 0 to 3 exclusive",
      "code": "for ( j = 0 ; j < 3 ; j ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if c [ j ] is ' X '",
      "code": "if ( c [ j ] == ' X ' ) q ++ ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if p is not q",
      "code": "if ( p != q )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for i = 0 , j = 2 , to i is less than 3 , incrementing i , decrementing j",
      "code": "for ( i = 0 , j = 2 ; i < 3 ; i ++ , j -- )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if a [ i ] is not c [ j ]",
      "code": "if ( a [ i ] != c [ j ] )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int i , j , k , l , p , p , q , r = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( c [ j ] == ' X ' )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int i , j , k , l , p , q , q , r = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int q’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string a , b , c , c ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "a >> a >> b >> c ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( c [ j ] == ' o ' )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int i , j , k , l , p , p , q , r = 0 ;",
        "if ( c [ j ] == ' X ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        12,
        18
      ],
      "mod_code": [
        "int i , j , k , l , p , p , q , r = 0 ;",
        "if ( c [ j ] == ' X ' )",
        "for ( int i = 0 , j = 2 ; i < 3 ; i ++ , j -- , j -- )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        12,
        18,
        19
      ],
      "mod_code": [
        "int i , j , k , l , p , p , q , r = 0 ;",
        "if ( c [ j ] == ' X ' )",
        "for ( int i = 0 , j = 2 ; i < 3 ; i ++ , j -- , j -- )",
        "if ( a [ i ] == c [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        12,
        19
      ],
      "mod_code": [
        "int i , j , k , l , p , p , q , r = 0 ;",
        "if ( c [ j ] == ' X ' )",
        "if ( a [ i ] == c [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "int i , j , k , l , p , p , q , r = 0 ;",
        "for ( int i = 0 , j = 2 ; i < 3 ; i ++ , j -- , j -- )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        18,
        19
      ],
      "mod_code": [
        "int i , j , k , l , p , p , q , r = 0 ;",
        "for ( int i = 0 , j = 2 ; i < 3 ; i ++ , j -- , j -- )",
        "if ( a [ i ] == c [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        18,
        19,
        12
      ],
      "mod_code": [
        "int i , j , k , l , p , p , q , r = 0 ;",
        "for ( int i = 0 , j = 2 ; i < 3 ; i ++ , j -- , j -- )",
        "if ( a [ i ] == c [ j ] )",
        "if ( c [ j ] == ' o ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        18,
        12
      ],
      "mod_code": [
        "int i , j , k , l , p , p , q , r = 0 ;",
        "for ( int i = 0 , j = 2 ; i < 3 ; i ++ , j -- , j -- )",
        "if ( c [ j ] == ' o ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        19
      ],
      "mod_code": [
        "int i , j , k , l , p , p , q , r = 0 ;",
        "if ( a [ i ] == c [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        19,
        12
      ],
      "mod_code": [
        "int i , j , k , l , p , p , q , r = 0 ;",
        "if ( a [ i ] == c [ j ] )",
        "if ( c [ j ] == ' o ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int i , j , k , l , p , p , q , r = 0 ;",
        "if ( c [ j ] == ' o ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        12,
        18
      ],
      "mod_code": [
        "if ( c [ j ] == ' X ' )",
        "for ( int i = 0 , j = 2 ; i < 3 ; i ++ , j -- , j -- )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        18,
        19
      ],
      "mod_code": [
        "if ( c [ j ] == ' X ' )",
        "for ( int i = 0 , j = 2 ; i < 3 ; i ++ , j -- , j -- )",
        "if ( a [ i ] == c [ j ] )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        18,
        19,
        1
      ],
      "mod_code": [
        "if ( c [ j ] == ' X ' )",
        "for ( int i = 0 , j = 2 ; i < 3 ; i ++ , j -- , j -- )",
        "if ( a [ i ] == c [ j ] )",
        "int i , j , k , l , p , q , q , r = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int q’"
    },
    {
      "mod_line": [
        12,
        18,
        1
      ],
      "mod_code": [
        "if ( c [ j ] == ' X ' )",
        "for ( int i = 0 , j = 2 ; i < 3 ; i ++ , j -- , j -- )",
        "int i , j , k , l , p , q , q , r = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int q’"
    },
    {
      "mod_line": [
        12,
        19
      ],
      "mod_code": [
        "if ( c [ j ] == ' X ' )",
        "if ( a [ i ] == c [ j ] )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        19,
        1
      ],
      "mod_code": [
        "if ( c [ j ] == ' X ' )",
        "if ( a [ i ] == c [ j ] )",
        "int i , j , k , l , p , q , q , r = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int q’"
    },
    {
      "mod_line": [
        12,
        1
      ],
      "mod_code": [
        "if ( c [ j ] == ' X ' )",
        "int i , j , k , l , p , q , q , r = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int q’"
    },
    {
      "mod_line": [
        18,
        19,
        1
      ],
      "mod_code": [
        "for ( int i = 0 , j = 2 ; i < 3 ; i ++ , j -- , j -- )",
        "if ( a [ i ] == c [ j ] )",
        "int i , j , k , l , p , q , q , r = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int q’"
    },
    {
      "mod_line": [
        18,
        19,
        1,
        12
      ],
      "mod_code": [
        "for ( int i = 0 , j = 2 ; i < 3 ; i ++ , j -- , j -- )",
        "if ( a [ i ] == c [ j ] )",
        "int i , j , k , l , p , q , q , r = 0 ;",
        "if ( c [ j ] == ' o ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int q’"
    },
    {
      "mod_line": [
        18,
        19,
        12
      ],
      "mod_code": [
        "for ( int i = 0 , j = 2 ; i < 3 ; i ++ , j -- , j -- )",
        "if ( a [ i ] == c [ j ] )",
        "if ( c [ j ] == ' o ' )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        1
      ],
      "mod_code": [
        "for ( int i = 0 , j = 2 ; i < 3 ; i ++ , j -- , j -- )",
        "int i , j , k , l , p , q , q , r = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int q’"
    },
    {
      "mod_line": [
        18,
        1,
        12
      ],
      "mod_code": [
        "for ( int i = 0 , j = 2 ; i < 3 ; i ++ , j -- , j -- )",
        "int i , j , k , l , p , q , q , r = 0 ;",
        "if ( c [ j ] == ' o ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int q’"
    },
    {
      "mod_line": [
        18,
        12
      ],
      "mod_code": [
        "for ( int i = 0 , j = 2 ; i < 3 ; i ++ , j -- , j -- )",
        "if ( c [ j ] == ' o ' )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        1
      ],
      "mod_code": [
        "if ( a [ i ] == c [ j ] )",
        "int i , j , k , l , p , q , q , r = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int q’"
    },
    {
      "mod_line": [
        19,
        1,
        12
      ],
      "mod_code": [
        "if ( a [ i ] == c [ j ] )",
        "int i , j , k , l , p , q , q , r = 0 ;",
        "if ( c [ j ] == ' o ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int q’"
    },
    {
      "mod_line": [
        19,
        12
      ],
      "mod_code": [
        "if ( a [ i ] == c [ j ] )",
        "if ( c [ j ] == ' o ' )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int i , j , k , l , p , q , q , r = 0 ;",
        "if ( c [ j ] == ' o ' )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int q’"
    }
  ]
}