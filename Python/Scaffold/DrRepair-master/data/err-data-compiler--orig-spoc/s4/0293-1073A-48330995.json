{
  "meta": {
    "index": 293,
    "hitid": "3ABAOCJ4R8YQ2CBKX7WP4VLX1ALQMA",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1073A",
    "subid": "48330995"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read input to n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare string g",
      "code": "string g ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read g",
      "code": "cin >> g ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i from 0 to n - 1 exclusive",
      "code": "for ( int i = 0 ; i < n - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if g [ i ] ! = g [ i + 1 ]",
      "code": "if ( g [ i ] != g [ i + 1 ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "print substring of g from position i with length 2",
      "code": "cout << g . substr ( i , 2 ) << endl ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string g g ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘g’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "gets ( g ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "int a ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1,
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "int a ;",
        "n = n ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1,
        2,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "int a ;",
        "n = n ;",
        "string g g ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1,
        2,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "int a ;",
        "n = n ;",
        "if ( g [ i ] == g [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1,
        2,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "int a ;",
        "n = n ;",
        "gets ( g ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "int a ;",
        "string g g ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1,
        3,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "int a ;",
        "string g g ;",
        "if ( g [ i ] == g [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1,
        3,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "int a ;",
        "string g g ;",
        "gets ( g ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "int a ;",
        "if ( g [ i ] == g [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1,
        6,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "int a ;",
        "if ( g [ i ] == g [ i + 1 ] )",
        "gets ( g ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "int a ;",
        "gets ( g ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "n = n ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "n = n ;",
        "string g g ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘g’"
    },
    {
      "mod_line": [
        5,
        2,
        3,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "n = n ;",
        "string g g ;",
        "if ( g [ i ] == g [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘g’"
    },
    {
      "mod_line": [
        5,
        2,
        3,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "n = n ;",
        "string g g ;",
        "gets ( g ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘g’"
    },
    {
      "mod_line": [
        5,
        2,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "n = n ;",
        "if ( g [ i ] == g [ i + 1 ] )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2,
        6,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "n = n ;",
        "if ( g [ i ] == g [ i + 1 ] )",
        "gets ( g ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        2,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "n = n ;",
        "gets ( g ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "string g g ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘g’"
    },
    {
      "mod_line": [
        5,
        3,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "string g g ;",
        "if ( g [ i ] == g [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘g’"
    },
    {
      "mod_line": [
        5,
        3,
        6,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "string g g ;",
        "if ( g [ i ] == g [ i + 1 ] )",
        "gets ( g ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘g’"
    },
    {
      "mod_line": [
        5,
        3,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "string g g ;",
        "gets ( g ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘g’"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "if ( g [ i ] == g [ i + 1 ] )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "if ( g [ i ] == g [ i + 1 ] )",
        "gets ( g ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )",
        "gets ( g ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int a ;",
        "n = n ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "int a ;",
        "n = n ;",
        "string g g ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        6
      ],
      "mod_code": [
        "int a ;",
        "n = n ;",
        "string g g ;",
        "if ( g [ i ] == g [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        4
      ],
      "mod_code": [
        "int a ;",
        "n = n ;",
        "string g g ;",
        "gets ( g ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        6
      ],
      "mod_code": [
        "int a ;",
        "n = n ;",
        "if ( g [ i ] == g [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        4
      ],
      "mod_code": [
        "int a ;",
        "n = n ;",
        "if ( g [ i ] == g [ i + 1 ] )",
        "gets ( g ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        4
      ],
      "mod_code": [
        "int a ;",
        "n = n ;",
        "gets ( g ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int a ;",
        "string g g ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        6
      ],
      "mod_code": [
        "int a ;",
        "string g g ;",
        "if ( g [ i ] == g [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        4
      ],
      "mod_code": [
        "int a ;",
        "string g g ;",
        "if ( g [ i ] == g [ i + 1 ] )",
        "gets ( g ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "int a ;",
        "string g g ;",
        "gets ( g ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int a ;",
        "if ( g [ i ] == g [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6,
        4
      ],
      "mod_code": [
        "int a ;",
        "if ( g [ i ] == g [ i + 1 ] )",
        "gets ( g ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int a ;",
        "gets ( g ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "n = n ;",
        "string g g ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘g’"
    },
    {
      "mod_line": [
        2,
        3,
        6
      ],
      "mod_code": [
        "n = n ;",
        "string g g ;",
        "if ( g [ i ] == g [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘g’"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        4
      ],
      "mod_code": [
        "n = n ;",
        "string g g ;",
        "if ( g [ i ] == g [ i + 1 ] )",
        "gets ( g ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘g’"
    },
    {
      "mod_line": [
        2,
        3,
        4
      ],
      "mod_code": [
        "n = n ;",
        "string g g ;",
        "gets ( g ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘g’"
    },
    {
      "mod_line": [
        2,
        6,
        4
      ],
      "mod_code": [
        "n = n ;",
        "if ( g [ i ] == g [ i + 1 ] )",
        "gets ( g ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "n = n ;",
        "gets ( g ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "string g g ;",
        "if ( g [ i ] == g [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘g’"
    },
    {
      "mod_line": [
        3,
        6,
        4
      ],
      "mod_code": [
        "string g g ;",
        "if ( g [ i ] == g [ i + 1 ] )",
        "gets ( g ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘g’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "string g g ;",
        "gets ( g ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘g’"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "if ( g [ i ] == g [ i + 1 ] )",
        "gets ( g ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}