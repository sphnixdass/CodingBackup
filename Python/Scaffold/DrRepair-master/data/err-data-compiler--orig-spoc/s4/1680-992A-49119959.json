{
  "meta": {
    "index": 1680,
    "hitid": "3K1H3NEY7LTWLTBTHISARRU1M9TDGT",
    "workerid": "A1APYLD4DUK33J",
    "probid": "992A",
    "subid": "49119959"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers a , c = 1 , d = 0 , e = 0",
      "code": "int a , c = 1 , d = 0 , e = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare integer array b size a + 1",
      "code": "int b [ a + 1 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to a exclusive",
      "code": "for ( int i = 0 ; i < a ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read b [ i ]",
      "code": "cin >> b [ i ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if b [ i ] is not 0 , increment e",
      "code": "if ( b [ i ] != 0 ) { e ++ ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if e is 0",
      "code": "if ( e == 0 )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print \" 0 \" and newline",
      "code": "cout << \" 0 \" << endl ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if e is 1",
      "code": "if ( e == 1 )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" 1 \" and newline",
      "code": "cout << \" 1 \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "increment d",
      "code": "d ++ ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "sort from b to b + a",
      "code": "sort ( b , b + a ) ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i = 0 to a - 1 exclusive",
      "code": "for ( int i = 0 ; i < a - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if b [ i ] is not 0",
      "code": "if ( b [ i ] != 0 )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if b [ i ] is b [ i + 1 ]",
      "code": "if ( b [ i ] == b [ i + 1 ] )",
      "indent": 3
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 23,
      "text": "increment d",
      "code": "d ++ ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print d and newline",
      "code": "cout << d << endl ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a , c , d = 0 , e = 0 , e = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < a ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cin >> b >> b [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [(a + 1)]’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( e == l )"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "sort ( b , b + n ) ;"
      ],
      "err_line": 18,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( b [ i ] ] == b [ i + 1 ] )"
      ],
      "err_line": 21,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        19,
        15
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "else else"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        19,
        15,
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "else else",
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        15,
        2,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "else else",
        "gets ( a ) ;",
        "if ( b [ i ] ] == b [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        15,
        2,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "else else",
        "gets ( a ) ;",
        "int a , c , d = 0 , e = 0 , e = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        19,
        15,
        2,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "else else",
        "gets ( a ) ;",
        "if ( e == l )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        15,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "else else",
        "if ( b [ i ] ] == b [ i + 1 ] )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        19,
        15,
        21,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "else else",
        "if ( b [ i ] ] == b [ i + 1 ] )",
        "int a , c , d = 0 , e = 0 , e = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        19,
        15,
        21,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "else else",
        "if ( b [ i ] ] == b [ i + 1 ] )",
        "if ( e == l )"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        15,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "else else",
        "int a , c , d = 0 , e = 0 , e = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        19,
        15,
        1,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "else else",
        "int a , c , d = 0 , e = 0 , e = 0 ;",
        "if ( e == l )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        19,
        15,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "else else",
        "if ( e == l )"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        2,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "gets ( a ) ;",
        "if ( b [ i ] ] == b [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        2,
        21,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "gets ( a ) ;",
        "if ( b [ i ] ] == b [ i + 1 ] )",
        "int a , c , d = 0 , e = 0 , e = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        19,
        2,
        21,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "gets ( a ) ;",
        "if ( b [ i ] ] == b [ i + 1 ] )",
        "if ( e == l )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        2,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "gets ( a ) ;",
        "int a , c , d = 0 , e = 0 , e = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        19,
        2,
        1,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "gets ( a ) ;",
        "int a , c , d = 0 , e = 0 , e = 0 ;",
        "if ( e == l )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        19,
        2,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "gets ( a ) ;",
        "if ( e == l )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        21
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "if ( b [ i ] ] == b [ i + 1 ] )"
      ],
      "err_line": 19,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        21,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "if ( b [ i ] ] == b [ i + 1 ] )",
        "int a , c , d = 0 , e = 0 , e = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        19,
        21,
        1,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "if ( b [ i ] ] == b [ i + 1 ] )",
        "int a , c , d = 0 , e = 0 , e = 0 ;",
        "if ( e == l )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        19,
        21,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "if ( b [ i ] ] == b [ i + 1 ] )",
        "if ( e == l )"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        1
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "int a , c , d = 0 , e = 0 , e = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        19,
        1,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "int a , c , d = 0 , e = 0 , e = 0 ;",
        "if ( e == l )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        19,
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < a - 1 ; i ++ )",
        "if ( e == l )"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        2
      ],
      "mod_code": [
        "else else",
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        2,
        21
      ],
      "mod_code": [
        "else else",
        "gets ( a ) ;",
        "if ( b [ i ] ] == b [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        2,
        21,
        1
      ],
      "mod_code": [
        "else else",
        "gets ( a ) ;",
        "if ( b [ i ] ] == b [ i + 1 ] )",
        "int a , c , d = 0 , e = 0 , e = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        15,
        2,
        21,
        12
      ],
      "mod_code": [
        "else else",
        "gets ( a ) ;",
        "if ( b [ i ] ] == b [ i + 1 ] )",
        "if ( e == l )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        2,
        1
      ],
      "mod_code": [
        "else else",
        "gets ( a ) ;",
        "int a , c , d = 0 , e = 0 , e = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        15,
        2,
        1,
        12
      ],
      "mod_code": [
        "else else",
        "gets ( a ) ;",
        "int a , c , d = 0 , e = 0 , e = 0 ;",
        "if ( e == l )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        15,
        2,
        12
      ],
      "mod_code": [
        "else else",
        "gets ( a ) ;",
        "if ( e == l )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        21
      ],
      "mod_code": [
        "else else",
        "if ( b [ i ] ] == b [ i + 1 ] )"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        21,
        1
      ],
      "mod_code": [
        "else else",
        "if ( b [ i ] ] == b [ i + 1 ] )",
        "int a , c , d = 0 , e = 0 , e = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        15,
        21,
        1,
        12
      ],
      "mod_code": [
        "else else",
        "if ( b [ i ] ] == b [ i + 1 ] )",
        "int a , c , d = 0 , e = 0 , e = 0 ;",
        "if ( e == l )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        15,
        21,
        12
      ],
      "mod_code": [
        "else else",
        "if ( b [ i ] ] == b [ i + 1 ] )",
        "if ( e == l )"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        1
      ],
      "mod_code": [
        "else else",
        "int a , c , d = 0 , e = 0 , e = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        15,
        1,
        12
      ],
      "mod_code": [
        "else else",
        "int a , c , d = 0 , e = 0 , e = 0 ;",
        "if ( e == l )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        15,
        12
      ],
      "mod_code": [
        "else else",
        "if ( e == l )"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        21
      ],
      "mod_code": [
        "gets ( a ) ;",
        "if ( b [ i ] ] == b [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        21,
        1
      ],
      "mod_code": [
        "gets ( a ) ;",
        "if ( b [ i ] ] == b [ i + 1 ] )",
        "int a , c , d = 0 , e = 0 , e = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        2,
        21,
        1,
        12
      ],
      "mod_code": [
        "gets ( a ) ;",
        "if ( b [ i ] ] == b [ i + 1 ] )",
        "int a , c , d = 0 , e = 0 , e = 0 ;",
        "if ( e == l )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        2,
        21,
        12
      ],
      "mod_code": [
        "gets ( a ) ;",
        "if ( b [ i ] ] == b [ i + 1 ] )",
        "if ( e == l )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "gets ( a ) ;",
        "int a , c , d = 0 , e = 0 , e = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        2,
        1,
        12
      ],
      "mod_code": [
        "gets ( a ) ;",
        "int a , c , d = 0 , e = 0 , e = 0 ;",
        "if ( e == l )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "gets ( a ) ;",
        "if ( e == l )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        21,
        1
      ],
      "mod_code": [
        "if ( b [ i ] ] == b [ i + 1 ] )",
        "int a , c , d = 0 , e = 0 , e = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        21,
        1,
        12
      ],
      "mod_code": [
        "if ( b [ i ] ] == b [ i + 1 ] )",
        "int a , c , d = 0 , e = 0 , e = 0 ;",
        "if ( e == l )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        21,
        12
      ],
      "mod_code": [
        "if ( b [ i ] ] == b [ i + 1 ] )",
        "if ( e == l )"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int a , c , d = 0 , e = 0 , e = 0 ;",
        "if ( e == l )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int e’"
    }
  ]
}