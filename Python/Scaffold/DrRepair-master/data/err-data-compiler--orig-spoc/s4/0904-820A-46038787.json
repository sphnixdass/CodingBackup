{
  "meta": {
    "index": 904,
    "hitid": "3SX4X51T803MFZPFLREG6ZVXR5KOAB",
    "workerid": "AIWEXPJAU66D9",
    "probid": "820A",
    "subid": "46038787"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer variables c , v0 , v1 , a and l",
      "code": "int c , v0 , v1 , a , l ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read c , v0 , v1 , a and l",
      "code": "cin >> c >> v0 >> v1 >> a >> l ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare integer variables curs = v0 and cur = 0",
      "code": "int curs = v0 , cur = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for integer i = 1 to c inclusive",
      "code": "for ( int i = 1 ; i <= c ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "increase cur by curs if i is or curs - l otherwise",
      "code": "cur += curs - ( i == 1 ? 0 : l ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if cur > = c",
      "code": "if ( cur >= c )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print i and a new line",
      "code": "cout << i << endl ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "increase curs by a",
      "code": "curs += a ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set value of curs to min of curs and v1",
      "code": "curs = min ( curs , v1 ) ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" : ( \" and a new line",
      "code": "cout << \" :( \" << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cur += ( i == curs ) ? curs - l ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int c , v0 , v1 , a [ l ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cur += curs == curs ? curs - l ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "int curs = 0 , cur = 0 ;",
        "cur += ( i == curs ) ? curs - l ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        5,
        2
      ],
      "mod_code": [
        "int curs = 0 , cur = 0 ;",
        "cur += ( i == curs ) ? curs - l ;",
        "cin >> c >> v0 >> v1 >> l >> l ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        5,
        2,
        1
      ],
      "mod_code": [
        "int curs = 0 , cur = 0 ;",
        "cur += ( i == curs ) ? curs - l ;",
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "int c , v0 , v1 , a [ l ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        2,
        11
      ],
      "mod_code": [
        "int curs = 0 , cur = 0 ;",
        "cur += ( i == curs ) ? curs - l ;",
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        5,
        1
      ],
      "mod_code": [
        "int curs = 0 , cur = 0 ;",
        "cur += ( i == curs ) ? curs - l ;",
        "int c , v0 , v1 , a [ l ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        1,
        11
      ],
      "mod_code": [
        "int curs = 0 , cur = 0 ;",
        "cur += ( i == curs ) ? curs - l ;",
        "int c , v0 , v1 , a [ l ] ;",
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        11
      ],
      "mod_code": [
        "int curs = 0 , cur = 0 ;",
        "cur += ( i == curs ) ? curs - l ;",
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        2,
        1
      ],
      "mod_code": [
        "int curs = 0 , cur = 0 ;",
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "int c , v0 , v1 , a [ l ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2,
        1,
        5
      ],
      "mod_code": [
        "int curs = 0 , cur = 0 ;",
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "int c , v0 , v1 , a [ l ] ;",
        "cur += curs == curs ? curs - l ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2,
        1,
        11
      ],
      "mod_code": [
        "int curs = 0 , cur = 0 ;",
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "int c , v0 , v1 , a [ l ] ;",
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2,
        5
      ],
      "mod_code": [
        "int curs = 0 , cur = 0 ;",
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "cur += curs == curs ? curs - l ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        2,
        5,
        11
      ],
      "mod_code": [
        "int curs = 0 , cur = 0 ;",
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "cur += curs == curs ? curs - l ;",
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        2,
        11
      ],
      "mod_code": [
        "int curs = 0 , cur = 0 ;",
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "int curs = 0 , cur = 0 ;",
        "int c , v0 , v1 , a [ l ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        1,
        5
      ],
      "mod_code": [
        "int curs = 0 , cur = 0 ;",
        "int c , v0 , v1 , a [ l ] ;",
        "cur += curs == curs ? curs - l ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        1,
        5,
        11
      ],
      "mod_code": [
        "int curs = 0 , cur = 0 ;",
        "int c , v0 , v1 , a [ l ] ;",
        "cur += curs == curs ? curs - l ;",
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        1,
        11
      ],
      "mod_code": [
        "int curs = 0 , cur = 0 ;",
        "int c , v0 , v1 , a [ l ] ;",
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "int curs = 0 , cur = 0 ;",
        "cur += curs == curs ? curs - l ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        5,
        11
      ],
      "mod_code": [
        "int curs = 0 , cur = 0 ;",
        "cur += curs == curs ? curs - l ;",
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "int curs = 0 , cur = 0 ;",
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "cur += ( i == curs ) ? curs - l ;",
        "cin >> c >> v0 >> v1 >> l >> l ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        2,
        1
      ],
      "mod_code": [
        "cur += ( i == curs ) ? curs - l ;",
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "int c , v0 , v1 , a [ l ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2,
        1,
        11
      ],
      "mod_code": [
        "cur += ( i == curs ) ? curs - l ;",
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "int c , v0 , v1 , a [ l ] ;",
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2,
        11
      ],
      "mod_code": [
        "cur += ( i == curs ) ? curs - l ;",
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "cur += ( i == curs ) ? curs - l ;",
        "int c , v0 , v1 , a [ l ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1,
        11
      ],
      "mod_code": [
        "cur += ( i == curs ) ? curs - l ;",
        "int c , v0 , v1 , a [ l ] ;",
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "cur += ( i == curs ) ? curs - l ;",
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "int c , v0 , v1 , a [ l ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        1,
        5
      ],
      "mod_code": [
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "int c , v0 , v1 , a [ l ] ;",
        "cur += curs == curs ? curs - l ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        1,
        5,
        11
      ],
      "mod_code": [
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "int c , v0 , v1 , a [ l ] ;",
        "cur += curs == curs ? curs - l ;",
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        1,
        11
      ],
      "mod_code": [
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "int c , v0 , v1 , a [ l ] ;",
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "cur += curs == curs ? curs - l ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        5,
        11
      ],
      "mod_code": [
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "cur += curs == curs ? curs - l ;",
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int c , v0 , v1 , a [ l ] ;",
        "cur += curs == curs ? curs - l ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        11
      ],
      "mod_code": [
        "int c , v0 , v1 , a [ l ] ;",
        "cur += curs == curs ? curs - l ;",
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int c , v0 , v1 , a [ l ] ;",
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "cur += curs == curs ? curs - l ;",
        "* curs = min ( curs , v1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘:’ before ‘;’ token"
    }
  ]
}