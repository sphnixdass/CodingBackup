{
  "meta": {
    "index": 724,
    "hitid": "3QREJ3J433RKLRV4KQBD8WUZ2Z7LKF",
    "workerid": "A1AYVATMT88U1W",
    "probid": "157A",
    "subid": "45071855"
  },
  "lines": [
    {
      "line": 0,
      "text": "let n , c be integers , a = 2d array of integers with 40 rows and 40 columns , col = array of integers of length 40 , row = array of integers of length 40 , b = 2d array of integers with 40 rows and 40 columns",
      "code": "int n , a [ 40 ] [ 40 ] , col [ 40 ] , row [ 40 ] , b [ 40 ] [ 40 ] , c ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for j = 0 to n exclusive , read a [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < n ; j ++ ) { cin >> a [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "row [ i ] is equal to row [ i ] + a [ i ] [ j ]",
      "code": "row [ i ] += a [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "col [ j ] is equal to col [ j ] + a [ i ] [ j ]",
      "code": "col [ j ] += a [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "a [ i ] [ j ] is equal to row [ i ]",
      "code": "a [ i ] [ j ] = row [ i ] ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "b [ i ] [ j ] is equal to col [ j ]",
      "code": "b [ i ] [ j ] = col [ j ] ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if a [ i ] [ j ] is less than b [ i ] [ j ] , increment c by 1",
      "code": "if ( a [ i ] [ j ] < b [ i ] [ j ] ) c ++ ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print c and newline",
      "code": "cout << c << endl ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , row [ 40 ] , b [ 40 ] , b [ 40 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "col [ j ] = col [ j ] [ a [ i ] [ j ] ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘]’ before ‘;’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = row [ i ] ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "b [ i ] [ j ] ] = col [ j ] ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        12,
        15
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "b [ i ] [ j ] ] = col [ j ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        12,
        15,
        14
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "b [ i ] [ j ] ] = col [ j ] ;",
        "a [ i ] [ j ] ] = row [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        12,
        15,
        8
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "b [ i ] [ j ] ] = col [ j ] ;",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        12,
        15,
        19
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "b [ i ] [ j ] ] = col [ j ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        12,
        14
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "a [ i ] [ j ] ] = row [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        12,
        14,
        8
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "a [ i ] [ j ] ] = row [ i ] ;",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        12,
        14,
        19
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "a [ i ] [ j ] ] = row [ i ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        12,
        8
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        12,
        8,
        19
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        12,
        19
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "b [ i ] [ j ] ] = col [ j ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        15,
        14
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "b [ i ] [ j ] ] = col [ j ] ;",
        "a [ i ] [ j ] ] = row [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        15,
        14,
        8
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "b [ i ] [ j ] ] = col [ j ] ;",
        "a [ i ] [ j ] ] = row [ i ] ;",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        15,
        14,
        19
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "b [ i ] [ j ] ] = col [ j ] ;",
        "a [ i ] [ j ] ] = row [ i ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        15,
        8
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "b [ i ] [ j ] ] = col [ j ] ;",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        15,
        8,
        19
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "b [ i ] [ j ] ] = col [ j ] ;",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        15,
        19
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "b [ i ] [ j ] ] = col [ j ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "a [ i ] [ j ] ] = row [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        14,
        8
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "a [ i ] [ j ] ] = row [ i ] ;",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        14,
        8,
        19
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "a [ i ] [ j ] ] = row [ i ] ;",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        14,
        19
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "a [ i ] [ j ] ] = row [ i ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        8,
        19
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        0,
        19
      ],
      "mod_code": [
        "int n , c , a [ 40 ] , b [ 40 ] , b [ 40 ] , b [ 40 ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int b [40]’"
    },
    {
      "mod_line": [
        12,
        15
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "b [ i ] [ j ] ] = col [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        15,
        14
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "b [ i ] [ j ] ] = col [ j ] ;",
        "a [ i ] [ j ] ] = row [ i ] ;"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        15,
        14,
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "b [ i ] [ j ] ] = col [ j ] ;",
        "a [ i ] [ j ] ] = row [ i ] ;",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        15,
        14,
        19
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "b [ i ] [ j ] ] = col [ j ] ;",
        "a [ i ] [ j ] ] = row [ i ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        15,
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "b [ i ] [ j ] ] = col [ j ] ;",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        15,
        8,
        19
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "b [ i ] [ j ] ] = col [ j ] ;",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        15,
        19
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "b [ i ] [ j ] ] = col [ j ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "a [ i ] [ j ] ] = row [ i ] ;"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        14,
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "a [ i ] [ j ] ] = row [ i ] ;",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        14,
        8,
        19
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "a [ i ] [ j ] ] = row [ i ] ;",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        14,
        19
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "a [ i ] [ j ] ] = row [ i ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        8,
        19
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        19
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        14
      ],
      "mod_code": [
        "b [ i ] [ j ] ] = col [ j ] ;",
        "a [ i ] [ j ] ] = row [ i ] ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        15,
        14,
        8
      ],
      "mod_code": [
        "b [ i ] [ j ] ] = col [ j ] ;",
        "a [ i ] [ j ] ] = row [ i ] ;",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        14,
        8,
        19
      ],
      "mod_code": [
        "b [ i ] [ j ] ] = col [ j ] ;",
        "a [ i ] [ j ] ] = row [ i ] ;",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        14,
        19
      ],
      "mod_code": [
        "b [ i ] [ j ] ] = col [ j ] ;",
        "a [ i ] [ j ] ] = row [ i ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        15,
        8
      ],
      "mod_code": [
        "b [ i ] [ j ] ] = col [ j ] ;",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        8,
        19
      ],
      "mod_code": [
        "b [ i ] [ j ] ] = col [ j ] ;",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        19
      ],
      "mod_code": [
        "b [ i ] [ j ] ] = col [ j ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        8
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = row [ i ] ;",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        8,
        19
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = row [ i ] ;",
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        19
      ],
      "mod_code": [
        "a [ i ] [ j ] ] = row [ i ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        8,
        19
      ],
      "mod_code": [
        "row [ i ] [ j ] = row [ i ] + a [ i ] ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}