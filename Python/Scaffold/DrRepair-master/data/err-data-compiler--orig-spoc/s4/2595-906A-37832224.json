{
  "meta": {
    "index": 2595,
    "hitid": "3DFYDSXB2WUSTXCGBJ32Y4Q501ZUJI",
    "workerid": "A1APYLD4DUK33J",
    "probid": "906A",
    "subid": "37832224"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare character array s with size 100010",
      "code": "char s [ 100010 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare flag as boolean , boolean arrays ok size 1010 , exist size 1010",
      "code": "bool flag , ok [ 1010 ] , exist [ 1010 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare integer ans",
      "code": "int ans ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "let flag be false",
      "code": "flag = false ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "let ans be 0",
      "code": "ans = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = ' a ' to ' z ' inclusive , let ok [ i ] be 1",
      "code": "for ( int i = ' a ' ; i <= ' z ' ; i ++ ) ok [ i ] = 1 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "declare integer num = 26",
      "code": "int num = 26 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "declare character c",
      "code": "char c ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "read c read s",
      "code": "cin >> c >> s ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if flag is true",
      "code": "if ( flag )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if c is not ' . ' and i is not n - 1 , increment ans",
      "code": "if ( c != ' . ' && i != n - 1 ) ++ ans ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if c is ' ! '",
      "code": "if ( c == ' ! ' )",
      "indent": 3
    },
    {
      "line": 17,
      "text": "declare integer len = string length of s",
      "code": "int len = strlen ( s ) ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "set bytes from exist to size of exist to value 0",
      "code": "memset ( exist , 0 , sizeof ( exist ) ) ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "for j = 0 to len exclusive , let exist [ s [ j ] ] be 1",
      "code": "for ( int j = 0 ; j < len ; j ++ ) exist [ s [ j ] ] = 1 ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "for j = ' a ' to ' z ' inclusive",
      "code": "for ( int j = ' a ' ; j <= ' z ' ; ++ j )",
      "indent": 4
    },
    {
      "line": 21,
      "text": "if ok [ j ] and not exist [ j ]",
      "code": "if ( ok [ j ] && ! exist [ j ] )",
      "indent": 5
    },
    {
      "line": 22,
      "text": "decrement num",
      "code": "-- num ;",
      "indent": 6
    },
    {
      "line": 23,
      "text": "let ok [ j ] be 0",
      "code": "ok [ j ] = 0 ;",
      "indent": 6
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 26,
      "text": "if num is 1 , set flag to true",
      "code": "if ( num == 1 ) flag = true ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "else if c is ' . '",
      "code": "else if ( c == ' . ' )",
      "indent": 3
    },
    {
      "line": 28,
      "text": "let integer len = string length of s",
      "code": "int len = strlen ( s ) ;",
      "indent": 4
    },
    {
      "line": 29,
      "text": "set bytes from exist to size of exist to value 0",
      "code": "memset ( exist , 0 , sizeof ( exist ) ) ;",
      "indent": 4
    },
    {
      "line": 30,
      "text": "for j = 0 to len exclusive , let exist [ s [ j ] ] be 1",
      "code": "for ( int j = 0 ; j < len ; j ++ ) exist [ s [ j ] ] = 1 ;",
      "indent": 4
    },
    {
      "line": 31,
      "text": "for j = ' a ' to ' z ' inclusive",
      "code": "for ( int j = ' a ' ; j <= ' z ' ; ++ j )",
      "indent": 4
    },
    {
      "line": 32,
      "text": "if ok [ j ] and exist [ j ]",
      "code": "if ( ok [ j ] && exist [ j ] )",
      "indent": 5
    },
    {
      "line": 33,
      "text": "decrement num",
      "code": "-- num ;",
      "indent": 6
    },
    {
      "line": 34,
      "text": "let ok [ j ] be 0",
      "code": "ok [ j ] = 0 ;",
      "indent": 6
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 37,
      "text": "if num is 1 , let flag be true",
      "code": "if ( num == 1 ) flag = true ;",
      "indent": 4
    },
    {
      "line": 38,
      "text": "else if c is ' ? '",
      "code": "else if ( c == ' ? ' )",
      "indent": 3
    },
    {
      "line": 39,
      "text": "if ok [ s [ 0 ] ] is true",
      "code": "if ( ok [ s [ 0 ] ] )",
      "indent": 4
    },
    {
      "line": 40,
      "text": "decrement num",
      "code": "-- num ;",
      "indent": 5
    },
    {
      "line": 41,
      "text": "let ok [ s [ 0 ] ] be 0",
      "code": "ok [ s [ 0 ] ] = 0 ;",
      "indent": 5
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 43,
      "text": "if num is 1 , let flag be true",
      "code": "if ( num == 1 ) flag = true ;",
      "indent": 4
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 47,
      "text": "print ans , newline",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool flag [ 1010 ] , exist [ 1010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [1010]’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool ok [ 1010 ] , exist [ 1010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "character = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "c >> c >> s ;"
      ],
      "err_line": 12,
      "err_msg": "invalid operands of types ‘int’ and ‘char [100010]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "int len = s . size ( ) ;"
      ],
      "err_line": 17,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char [100010]’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "for ( j = ' a ' ; j <= ' z ' ; j ++ )"
      ],
      "err_line": 20,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "int len = s . size ( ) ;"
      ],
      "err_line": 28,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char [100010]’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "for ( j = ' a ' ; j <= ' z ' ; j ++ )"
      ],
      "err_line": 31,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "else if ( strcmp ( c ) == ' ? ' )"
      ],
      "err_line": 38,
      "err_msg": "invalid conversion from ‘char’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "ok [ s [ s ] ] = 0 ;"
      ],
      "err_line": 41,
      "err_msg": "invalid types ‘char [100010][char [100010]]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        21
      ],
      "mod_code": [
        "bool flag [ 1010 ] , exist [ 1010 ] ;",
        "if ( ok [ j ] != exist [ j ] )"
      ],
      "err_line": 6,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [1010]’"
    },
    {
      "mod_line": [
        1,
        21,
        15
      ],
      "mod_code": [
        "bool flag [ 1010 ] , exist [ 1010 ] ;",
        "if ( ok [ j ] != exist [ j ] )",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [1010]’"
    },
    {
      "mod_line": [
        1,
        21,
        15,
        11
      ],
      "mod_code": [
        "bool flag [ 1010 ] , exist [ 1010 ] ;",
        "if ( ok [ j ] != exist [ j ] )",
        "else else",
        "character = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [1010]’"
    },
    {
      "mod_line": [
        1,
        21,
        15,
        23
      ],
      "mod_code": [
        "bool flag [ 1010 ] , exist [ 1010 ] ;",
        "if ( ok [ j ] != exist [ j ] )",
        "else else",
        "ok [ j ] = ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [1010]’"
    },
    {
      "mod_line": [
        1,
        21,
        11
      ],
      "mod_code": [
        "bool flag [ 1010 ] , exist [ 1010 ] ;",
        "if ( ok [ j ] != exist [ j ] )",
        "character = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [1010]’"
    },
    {
      "mod_line": [
        1,
        21,
        11,
        23
      ],
      "mod_code": [
        "bool flag [ 1010 ] , exist [ 1010 ] ;",
        "if ( ok [ j ] != exist [ j ] )",
        "character = 1 ;",
        "ok [ j ] = ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [1010]’"
    },
    {
      "mod_line": [
        1,
        21,
        23
      ],
      "mod_code": [
        "bool flag [ 1010 ] , exist [ 1010 ] ;",
        "if ( ok [ j ] != exist [ j ] )",
        "ok [ j ] = ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [1010]’"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "bool flag [ 1010 ] , exist [ 1010 ] ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [1010]’"
    },
    {
      "mod_line": [
        1,
        15,
        11
      ],
      "mod_code": [
        "bool flag [ 1010 ] , exist [ 1010 ] ;",
        "else else",
        "character = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [1010]’"
    },
    {
      "mod_line": [
        1,
        15,
        11,
        23
      ],
      "mod_code": [
        "bool flag [ 1010 ] , exist [ 1010 ] ;",
        "else else",
        "character = 1 ;",
        "ok [ j ] = ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [1010]’"
    },
    {
      "mod_line": [
        1,
        15,
        23
      ],
      "mod_code": [
        "bool flag [ 1010 ] , exist [ 1010 ] ;",
        "else else",
        "ok [ j ] = ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [1010]’"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "bool flag [ 1010 ] , exist [ 1010 ] ;",
        "character = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [1010]’"
    },
    {
      "mod_line": [
        1,
        11,
        23
      ],
      "mod_code": [
        "bool flag [ 1010 ] , exist [ 1010 ] ;",
        "character = 1 ;",
        "ok [ j ] = ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [1010]’"
    },
    {
      "mod_line": [
        1,
        23
      ],
      "mod_code": [
        "bool flag [ 1010 ] , exist [ 1010 ] ;",
        "ok [ j ] = ' 0 ' ;"
      ],
      "err_line": 6,
      "err_msg": "incompatible types in assignment of ‘bool’ to ‘bool [1010]’"
    },
    {
      "mod_line": [
        21,
        15
      ],
      "mod_code": [
        "if ( ok [ j ] != exist [ j ] )",
        "else else"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        21,
        15,
        11
      ],
      "mod_code": [
        "if ( ok [ j ] != exist [ j ] )",
        "else else",
        "character = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        15,
        11,
        23
      ],
      "mod_code": [
        "if ( ok [ j ] != exist [ j ] )",
        "else else",
        "character = 1 ;",
        "ok [ j ] = ' 0 ' ;"
      ],
      "err_line": 11,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        15,
        11,
        1
      ],
      "mod_code": [
        "if ( ok [ j ] != exist [ j ] )",
        "else else",
        "character = 1 ;",
        "bool ok [ 1010 ] , exist [ 1010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        15,
        23
      ],
      "mod_code": [
        "if ( ok [ j ] != exist [ j ] )",
        "else else",
        "ok [ j ] = ' 0 ' ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        21,
        15,
        23,
        1
      ],
      "mod_code": [
        "if ( ok [ j ] != exist [ j ] )",
        "else else",
        "ok [ j ] = ' 0 ' ;",
        "bool ok [ 1010 ] , exist [ 1010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        15,
        1
      ],
      "mod_code": [
        "if ( ok [ j ] != exist [ j ] )",
        "else else",
        "bool ok [ 1010 ] , exist [ 1010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        11
      ],
      "mod_code": [
        "if ( ok [ j ] != exist [ j ] )",
        "character = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        11,
        23
      ],
      "mod_code": [
        "if ( ok [ j ] != exist [ j ] )",
        "character = 1 ;",
        "ok [ j ] = ' 0 ' ;"
      ],
      "err_line": 11,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        11,
        23,
        1
      ],
      "mod_code": [
        "if ( ok [ j ] != exist [ j ] )",
        "character = 1 ;",
        "ok [ j ] = ' 0 ' ;",
        "bool ok [ 1010 ] , exist [ 1010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        11,
        1
      ],
      "mod_code": [
        "if ( ok [ j ] != exist [ j ] )",
        "character = 1 ;",
        "bool ok [ 1010 ] , exist [ 1010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23,
        1
      ],
      "mod_code": [
        "if ( ok [ j ] != exist [ j ] )",
        "ok [ j ] = ' 0 ' ;",
        "bool ok [ 1010 ] , exist [ 1010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        1
      ],
      "mod_code": [
        "if ( ok [ j ] != exist [ j ] )",
        "bool ok [ 1010 ] , exist [ 1010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        11
      ],
      "mod_code": [
        "else else",
        "character = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        11,
        23
      ],
      "mod_code": [
        "else else",
        "character = 1 ;",
        "ok [ j ] = ' 0 ' ;"
      ],
      "err_line": 11,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        11,
        23,
        1
      ],
      "mod_code": [
        "else else",
        "character = 1 ;",
        "ok [ j ] = ' 0 ' ;",
        "bool ok [ 1010 ] , exist [ 1010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        11,
        1
      ],
      "mod_code": [
        "else else",
        "character = 1 ;",
        "bool ok [ 1010 ] , exist [ 1010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23
      ],
      "mod_code": [
        "else else",
        "ok [ j ] = ' 0 ' ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        23,
        1
      ],
      "mod_code": [
        "else else",
        "ok [ j ] = ' 0 ' ;",
        "bool ok [ 1010 ] , exist [ 1010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        1
      ],
      "mod_code": [
        "else else",
        "bool ok [ 1010 ] , exist [ 1010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        23
      ],
      "mod_code": [
        "character = 1 ;",
        "ok [ j ] = ' 0 ' ;"
      ],
      "err_line": 11,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        23,
        1
      ],
      "mod_code": [
        "character = 1 ;",
        "ok [ j ] = ' 0 ' ;",
        "bool ok [ 1010 ] , exist [ 1010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "character = 1 ;",
        "bool ok [ 1010 ] , exist [ 1010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        1
      ],
      "mod_code": [
        "ok [ j ] = ' 0 ' ;",
        "bool ok [ 1010 ] , exist [ 1010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘flag’ was not declared in this scope"
    }
  ]
}