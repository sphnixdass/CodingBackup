{
  "meta": {
    "index": 2347,
    "hitid": "3OYHVNTV5TSSRCY1XIR50DYTX48KOR",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "464A",
    "subid": "46620387"
  },
  "lines": [
    {
      "line": 0,
      "text": "s = string",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "sc = vector of int",
      "code": "vector < int > sc ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "n , p = int",
      "code": "int n , p ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "solve = function ( get int idx , return bool )",
      "code": "bool solve ( int idx )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "if idx is - 1 return false",
      "code": "if ( idx == - 1 ) return false ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while sc [ idx ] < p",
      "code": "while ( sc [ idx ] < p )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if idx and sc [ idx ] = = sc [ idx - 1 ]",
      "code": "if ( idx && sc [ idx ] == sc [ idx - 1 ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment sc [ idx ]",
      "code": "sc [ idx ] ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if idx > 1 and sc [ idx ] = = sc [ idx - 2 ]",
      "code": "else if ( idx > 1 && sc [ idx ] == sc [ idx - 2 ] )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment sc [ idx ]",
      "code": "sc [ idx ] ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if sc [ idx ] is p",
      "code": "if ( sc [ idx ] == p )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "sc [ idx ] = 0",
      "code": "sc [ idx ] = 0 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if idx increment sc [ idx - 1 ]",
      "code": "if ( idx ) sc [ idx - 1 ] ++ ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if solve ( idx - 1 ) return solve ( idx )",
      "code": "if ( solve ( idx - 1 ) ) return solve ( idx ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 18,
      "text": "return true",
      "code": "return true ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 21,
      "text": "read n , p , s",
      "code": "cin >> n >> p >> s ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "resize sc to n",
      "code": "sc . resize ( n ) ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "for i = 0 to n exclusive sc [ i ] = sc [ i ] - ' a '",
      "code": "for ( int i = 0 ; i < n ; i ++ ) sc [ i ] = s [ i ] - ' a ' ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "increment sc [ n - 1 ]",
      "code": "sc [ n - 1 ] ++ ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if solve ( n - 1 )",
      "code": "if ( solve ( n - 1 ) )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "for i = 0 to n exclusive print char ( ' a ' + sc [ i ] )",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cout << char ( ' a ' + sc [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "print newline",
      "code": "cout << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 29,
      "text": "print \" NO \"",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "bool solve ( int idx ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int n , p , p ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int p’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "while ( sc [ idx ] < p ) ;"
      ],
      "err_line": 11,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( idx == sc && sc [ idx ] == sc [ idx - 1 ] )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator==’ (operand types are ‘int’ and ‘std::vector<int>’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool solve(int)’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "sc . resize ( sc ) ;"
      ],
      "err_line": 22,
      "err_msg": "no matching function for call to ‘std::vector<int>::resize(std::vector<int>&)’"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        23
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        23,
        21
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }",
        "cin >> n >> p , s ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        23,
        21,
        15
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }",
        "cin >> n >> p , s ;",
        "if ( idx ) sc [ idx - 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        23,
        21,
        28
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }",
        "cin >> n >> p , s ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        23,
        21,
        16
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }",
        "cin >> n >> p , s ;",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        23,
        15
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }",
        "if ( idx ) sc [ idx - 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        23,
        15,
        28
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }",
        "if ( idx ) sc [ idx - 1 ] ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        23,
        15,
        16
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }",
        "if ( idx ) sc [ idx - 1 ] ;",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        23,
        28
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        23,
        28,
        16
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }",
        "else else",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        23,
        16
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        21
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "cin >> n >> p , s ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        21,
        15
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "cin >> n >> p , s ;",
        "if ( idx ) sc [ idx - 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        21,
        15,
        28
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "cin >> n >> p , s ;",
        "if ( idx ) sc [ idx - 1 ] ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        21,
        15,
        16
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "cin >> n >> p , s ;",
        "if ( idx ) sc [ idx - 1 ] ;",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        21,
        28
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "cin >> n >> p , s ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        21,
        28,
        16
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "cin >> n >> p , s ;",
        "else else",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        21,
        16
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "cin >> n >> p , s ;",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "if ( idx ) sc [ idx - 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        15,
        28
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "if ( idx ) sc [ idx - 1 ] ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        15,
        28,
        16
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "if ( idx ) sc [ idx - 1 ] ;",
        "else else",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        15,
        16
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "if ( idx ) sc [ idx - 1 ] ;",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        28
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        28,
        16
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "else else",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "bool solve ( int idx ) ;",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        23,
        21,
        15,
        28
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }",
        "cin >> n >> p , s ;",
        "if ( idx ) sc [ idx - 1 ] ;",
        "else else"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        21,
        15,
        16
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }",
        "cin >> n >> p , s ;",
        "if ( idx ) sc [ idx - 1 ] ;",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool solve(int)’"
    },
    {
      "mod_line": [
        23,
        21,
        28
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }",
        "cin >> n >> p , s ;",
        "else else"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        21,
        28,
        16
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }",
        "cin >> n >> p , s ;",
        "else else",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool solve(int)’"
    },
    {
      "mod_line": [
        23,
        21,
        16
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }",
        "cin >> n >> p , s ;",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool solve(int)’"
    },
    {
      "mod_line": [
        23,
        15,
        28
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }",
        "if ( idx ) sc [ idx - 1 ] ;",
        "else else"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        15,
        28,
        16
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }",
        "if ( idx ) sc [ idx - 1 ] ;",
        "else else",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool solve(int)’"
    },
    {
      "mod_line": [
        23,
        15,
        16
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }",
        "if ( idx ) sc [ idx - 1 ] ;",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool solve(int)’"
    },
    {
      "mod_line": [
        23,
        28
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }",
        "else else"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        28,
        16
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }",
        "else else",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool solve(int)’"
    },
    {
      "mod_line": [
        23,
        16
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { sc [ i ] = sc [ i ] - ' a ' ; }",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool solve(int)’"
    },
    {
      "mod_line": [
        21,
        15,
        28
      ],
      "mod_code": [
        "cin >> n >> p , s ;",
        "if ( idx ) sc [ idx - 1 ] ;",
        "else else"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        21,
        15,
        28,
        16
      ],
      "mod_code": [
        "cin >> n >> p , s ;",
        "if ( idx ) sc [ idx - 1 ] ;",
        "else else",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool solve(int)’"
    },
    {
      "mod_line": [
        21,
        15,
        16
      ],
      "mod_code": [
        "cin >> n >> p , s ;",
        "if ( idx ) sc [ idx - 1 ] ;",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool solve(int)’"
    },
    {
      "mod_line": [
        21,
        28
      ],
      "mod_code": [
        "cin >> n >> p , s ;",
        "else else"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        21,
        28,
        16
      ],
      "mod_code": [
        "cin >> n >> p , s ;",
        "else else",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool solve(int)’"
    },
    {
      "mod_line": [
        21,
        16
      ],
      "mod_code": [
        "cin >> n >> p , s ;",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool solve(int)’"
    },
    {
      "mod_line": [
        15,
        28
      ],
      "mod_code": [
        "if ( idx ) sc [ idx - 1 ] ;",
        "else else"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        28,
        16
      ],
      "mod_code": [
        "if ( idx ) sc [ idx - 1 ] ;",
        "else else",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool solve(int)’"
    },
    {
      "mod_line": [
        15,
        16
      ],
      "mod_code": [
        "if ( idx ) sc [ idx - 1 ] ;",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool solve(int)’"
    },
    {
      "mod_line": [
        28,
        16
      ],
      "mod_code": [
        "else else",
        "if ( solve ( idx - 1 ) == solve ( ) ) return solve ( idx ) ;"
      ],
      "err_line": 16,
      "err_msg": "too few arguments to function ‘bool solve(int)’"
    }
  ]
}