{
  "meta": {
    "index": 2395,
    "hitid": "3BO3NEOQM0BCJDECNW1BM2ZBGJPIAP",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "392A",
    "subid": "44380849"
  },
  "lines": [
    {
      "line": 0,
      "text": "create const ints Maxn = 3010 and INF = 0x3f3f3f3f",
      "code": "const int Maxn = 3010 , INF = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let long long int n",
      "code": "long long n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if n is equal to 0",
      "code": "if ( n == 0 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "print 1",
      "code": "cout << 1 << endl ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "else do",
      "code": "else",
      "indent": 1
    },
    {
      "line": 7,
      "text": "show ( ( long long ) ( n * sqrt ( 2 ) ) ) * 4",
      "code": "cout << ( ( long long ) ( n * sqrt ( 2 ) ) ) * 4 << endl ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cout << ( long long ) ( ( long long ) ( n * sqrt ( 2 ) ) * 4 << endl ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 8,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cout << ( long long ) ( n * sqrt ( 2 * sqrt ( 2 ) ) * 4 << endl ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘double’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "cout << ( long long ) ( ( long long ) ( n * sqrt ( 2 ) ) * 4 << endl ;",
        "else do"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        6,
        5
      ],
      "mod_code": [
        "cout << ( long long ) ( ( long long ) ( n * sqrt ( 2 ) ) * 4 << endl ;",
        "else do",
        "cout << 1 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        6,
        5,
        4
      ],
      "mod_code": [
        "cout << ( long long ) ( ( long long ) ( n * sqrt ( 2 ) ) * 4 << endl ;",
        "else do",
        "cout << 1 ;",
        "if ( n == ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        6,
        4
      ],
      "mod_code": [
        "cout << ( long long ) ( ( long long ) ( n * sqrt ( 2 ) ) * 4 << endl ;",
        "else do",
        "if ( n == ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "cout << ( long long ) ( ( long long ) ( n * sqrt ( 2 ) ) * 4 << endl ;",
        "cout << 1 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        5,
        4
      ],
      "mod_code": [
        "cout << ( long long ) ( ( long long ) ( n * sqrt ( 2 ) ) * 4 << endl ;",
        "cout << 1 ;",
        "if ( n == ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "cout << ( long long ) ( ( long long ) ( n * sqrt ( 2 ) ) * 4 << endl ;",
        "if ( n == ' 0 ' )"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "else do",
        "cout << 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        5,
        4
      ],
      "mod_code": [
        "else do",
        "cout << 1 ;",
        "if ( n == ' 0 ' )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        5,
        4,
        7
      ],
      "mod_code": [
        "else do",
        "cout << 1 ;",
        "if ( n == ' 0 ' )",
        "cout << ( long long ) ( n * sqrt ( 2 * sqrt ( 2 ) ) * 4 << endl ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘double’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        6,
        5,
        7
      ],
      "mod_code": [
        "else do",
        "cout << 1 ;",
        "cout << ( long long ) ( n * sqrt ( 2 * sqrt ( 2 ) ) * 4 << endl ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘double’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "else do",
        "if ( n == ' 0 ' )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        4,
        7
      ],
      "mod_code": [
        "else do",
        "if ( n == ' 0 ' )",
        "cout << ( long long ) ( n * sqrt ( 2 * sqrt ( 2 ) ) * 4 << endl ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘double’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "else do",
        "cout << ( long long ) ( n * sqrt ( 2 * sqrt ( 2 ) ) * 4 << endl ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘double’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        4,
        7
      ],
      "mod_code": [
        "cout << 1 ;",
        "if ( n == ' 0 ' )",
        "cout << ( long long ) ( n * sqrt ( 2 * sqrt ( 2 ) ) * 4 << endl ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘double’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "cout << 1 ;",
        "cout << ( long long ) ( n * sqrt ( 2 * sqrt ( 2 ) ) * 4 << endl ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘double’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "if ( n == ' 0 ' )",
        "cout << ( long long ) ( n * sqrt ( 2 * sqrt ( 2 ) ) * 4 << endl ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘double’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    }
  ]
}