{
  "meta": {
    "index": 280,
    "hitid": "3HFWPF5AK9D1T6INJTGF3WRSJ7QS3M",
    "workerid": "A1MJVTR0PCKBWW",
    "probid": "777A",
    "subid": "39246311"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "integers = n , k",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set n to n modulo 6",
      "code": "n = n % 6 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set if ( n = 0 ) n to 6",
      "code": "if ( n == 0 ) n = 6 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "integers = i , j",
      "code": "int i , j ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set integer a [ 3 ] to 0 , 0 , 0",
      "code": "int a [ 3 ] = { 0 , 0 , 0 } ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for = 0 to less than 3 do the following",
      "code": "for ( i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set a [ i ] to - 10",
      "code": "a [ i ] = - 10 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "for = 1 to less than or equal to n do the following",
      "code": "for ( j = 1 ; j <= n ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if j modulo 2 is 1 then do the following swap a [ 0 ] and a [ 1 ]",
      "code": "if ( j % 2 == 1 ) swap ( a [ 0 ] , a [ 1 ] ) ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if j modulo 2 is 0 then do the following swap a [ 1 ] and a [ 2 ]",
      "code": "if ( j % 2 == 0 ) swap ( a [ 1 ] , a [ 2 ] ) ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if a [ k ] is - 10 then do the following",
      "code": "if ( a [ k ] == - 10 )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "output i",
      "code": "cout << i << endl ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "for = 0 to less than 3 do the following",
      "code": "for ( j = 0 ; j < 3 ; j ++ ) a [ j ] = 0 ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int a [ 3 ] = 0 , 0 , 0 ;"
      ],
      "err_line": 6,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( j = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "int a [ 3 ] = 0 , 0 , 0 ;",
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        6,
        9,
        17
      ],
      "mod_code": [
        "int a [ 3 ] = 0 , 0 , 0 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        6,
        9,
        17,
        13
      ],
      "mod_code": [
        "int a [ 3 ] = 0 , 0 , 0 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "if ( ! a [ k ] == - 10 )"
      ],
      "err_line": 6,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        6,
        9,
        17
      ],
      "mod_code": [
        "int a [ 3 ] = 0 , 0 , 0 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "for ( j = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        6,
        9,
        17,
        13
      ],
      "mod_code": [
        "int a [ 3 ] = 0 , 0 , 0 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "for ( j = 0 ; i < 3 ; i ++ )",
        "if ( ! a [ k ] == - 10 )"
      ],
      "err_line": 6,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        6,
        9,
        13
      ],
      "mod_code": [
        "int a [ 3 ] = 0 , 0 , 0 ;",
        "for ( i = 1 ; i <= n ; i ++ )",
        "if ( ! a [ k ] == - 10 )"
      ],
      "err_line": 6,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "int a [ 3 ] = 0 , 0 , 0 ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        6,
        17,
        13
      ],
      "mod_code": [
        "int a [ 3 ] = 0 , 0 , 0 ;",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "if ( ! a [ k ] == - 10 )"
      ],
      "err_line": 6,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        6,
        17,
        13,
        9
      ],
      "mod_code": [
        "int a [ 3 ] = 0 , 0 , 0 ;",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "if ( ! a [ k ] == - 10 )",
        "for ( i = 1 ; i <= n ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        6,
        17,
        9
      ],
      "mod_code": [
        "int a [ 3 ] = 0 , 0 , 0 ;",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "for ( i = 1 ; i <= n ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "int a [ 3 ] = 0 , 0 , 0 ;",
        "for ( j = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        6,
        17,
        13
      ],
      "mod_code": [
        "int a [ 3 ] = 0 , 0 , 0 ;",
        "for ( j = 0 ; i < 3 ; i ++ )",
        "if ( ! a [ k ] == - 10 )"
      ],
      "err_line": 6,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        6,
        17,
        13,
        9
      ],
      "mod_code": [
        "int a [ 3 ] = 0 , 0 , 0 ;",
        "for ( j = 0 ; i < 3 ; i ++ )",
        "if ( ! a [ k ] == - 10 )",
        "for ( i = 1 ; i <= n ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        6,
        17,
        9
      ],
      "mod_code": [
        "int a [ 3 ] = 0 , 0 , 0 ;",
        "for ( j = 0 ; i < 3 ; i ++ )",
        "for ( i = 1 ; i <= n ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "int a [ 3 ] = 0 , 0 , 0 ;",
        "if ( ! a [ k ] == - 10 )"
      ],
      "err_line": 6,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        6,
        13,
        9
      ],
      "mod_code": [
        "int a [ 3 ] = 0 , 0 , 0 ;",
        "if ( ! a [ k ] == - 10 )",
        "for ( i = 1 ; i <= n ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "int a [ 3 ] = 0 , 0 , 0 ;",
        "for ( i = 1 ; i <= n ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        9,
        17
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        17,
        13
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "if ( ! a [ k ] == - 10 )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        17
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "for ( j = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        17,
        13
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "for ( j = 0 ; i < 3 ; i ++ )",
        "if ( ! a [ k ] == - 10 )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )",
        "if ( ! a [ k ] == - 10 )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        13,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )",
        "if ( ! a [ k ] == - 10 )",
        "for ( i = 1 ; i <= n ; j ++ )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )",
        "for ( i = 1 ; i <= n ; j ++ )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        13
      ],
      "mod_code": [
        "for ( j = 0 ; i < 3 ; i ++ )",
        "if ( ! a [ k ] == - 10 )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        13,
        9
      ],
      "mod_code": [
        "for ( j = 0 ; i < 3 ; i ++ )",
        "if ( ! a [ k ] == - 10 )",
        "for ( i = 1 ; i <= n ; j ++ )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        9
      ],
      "mod_code": [
        "for ( j = 0 ; i < 3 ; i ++ )",
        "for ( i = 1 ; i <= n ; j ++ )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}