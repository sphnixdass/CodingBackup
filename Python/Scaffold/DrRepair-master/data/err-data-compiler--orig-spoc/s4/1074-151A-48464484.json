{
  "meta": {
    "index": 1074,
    "hitid": "3ZVPAMTJWNXQM3UYZJNUWGB51ADRG6",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "151A",
    "subid": "48464484"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , l , k , c , d , p , nl , np , tml , tsd , slt = int",
      "code": "int n , l , k , c , d , p , nl , np , tml , tsd , slt ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n then l then k then c then d then p then nl then np",
      "code": "cin >> n >> l >> k >> c >> d >> p >> nl >> np ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set tml to ( k * l ) / nl",
      "code": "tml = ( k * l ) / nl ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set tsd to ( c * d )",
      "code": "tsd = ( c * d ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set slt to ( p / np )",
      "code": "slt = ( p / np ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "mi = int with mi = min of tml and tsd",
      "code": "int mi = min ( tml , tsd ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print ( min if mi and slt ) / n",
      "code": "cout << min ( mi , slt ) / n << endl ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int tml = ( k * l ) / nl ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int tml’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int tsd = ( c * d ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int tsd’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int slt = ( p / np ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int slt’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;",
        "cin >> n >> l >> k >> c >> d >> p >> p >> np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        2,
        7
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;",
        "cin >> n >> l >> k >> c >> d >> p >> p >> np ;",
        "cout << ( mi << slt ) / n << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        2,
        7,
        3
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;",
        "cin >> n >> l >> k >> c >> d >> p >> p >> np ;",
        "cout << ( mi << slt ) / n << endl ;",
        "int tml = ( k * l ) / nl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        2,
        7,
        5
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;",
        "cin >> n >> l >> k >> c >> d >> p >> p >> np ;",
        "cout << ( mi << slt ) / n << endl ;",
        "int slt = ( p / np ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;",
        "cin >> n >> l >> k >> c >> d >> p >> p >> np ;",
        "int tml = ( k * l ) / nl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        5
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;",
        "cin >> n >> l >> k >> c >> d >> p >> p >> np ;",
        "int tml = ( k * l ) / nl ;",
        "int slt = ( p / np ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        7
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;",
        "cin >> n >> l >> k >> c >> d >> p >> p >> np ;",
        "int tml = ( k * l ) / nl ;",
        "cout << ( mi << slt ) / n << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;",
        "cin >> n >> l >> k >> c >> d >> p >> p >> np ;",
        "int slt = ( p / np ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        7
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;",
        "cin >> n >> l >> k >> c >> d >> p >> p >> np ;",
        "int slt = ( p / np ) ;",
        "cout << ( mi << slt ) / n << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        2,
        7
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;",
        "cin >> n >> l >> k >> c >> d >> p >> p >> np ;",
        "cout << ( mi << slt ) / n << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;",
        "cout << ( mi << slt ) / n << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        7,
        3
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;",
        "cout << ( mi << slt ) / n << endl ;",
        "int tml = ( k * l ) / nl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        7,
        3,
        5
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;",
        "cout << ( mi << slt ) / n << endl ;",
        "int tml = ( k * l ) / nl ;",
        "int slt = ( p / np ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        7,
        5
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;",
        "cout << ( mi << slt ) / n << endl ;",
        "int slt = ( p / np ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;",
        "int tml = ( k * l ) / nl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        3,
        5
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;",
        "int tml = ( k * l ) / nl ;",
        "int slt = ( p / np ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        7
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;",
        "int tml = ( k * l ) / nl ;",
        "int slt = ( p / np ) ;",
        "cout << ( mi << slt ) / n << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        3,
        7
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;",
        "int tml = ( k * l ) / nl ;",
        "cout << ( mi << slt ) / n << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;",
        "int slt = ( p / np ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        5,
        7
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;",
        "int slt = ( p / np ) ;",
        "cout << ( mi << slt ) / n << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int n , l , k , c , d , p , p , np , tml , tsd , slt ;",
        "cout << ( mi << slt ) / n << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        2,
        7,
        3
      ],
      "mod_code": [
        "cin >> n >> l >> k >> c >> d >> p >> p >> np ;",
        "cout << ( mi << slt ) / n << endl ;",
        "int tml = ( k * l ) / nl ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int tml’"
    },
    {
      "mod_line": [
        2,
        7,
        3,
        5
      ],
      "mod_code": [
        "cin >> n >> l >> k >> c >> d >> p >> p >> np ;",
        "cout << ( mi << slt ) / n << endl ;",
        "int tml = ( k * l ) / nl ;",
        "int slt = ( p / np ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int tml’"
    },
    {
      "mod_line": [
        2,
        7,
        5
      ],
      "mod_code": [
        "cin >> n >> l >> k >> c >> d >> p >> p >> np ;",
        "cout << ( mi << slt ) / n << endl ;",
        "int slt = ( p / np ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int slt’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "cin >> n >> l >> k >> c >> d >> p >> p >> np ;",
        "int tml = ( k * l ) / nl ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int tml’"
    },
    {
      "mod_line": [
        2,
        3,
        5
      ],
      "mod_code": [
        "cin >> n >> l >> k >> c >> d >> p >> p >> np ;",
        "int tml = ( k * l ) / nl ;",
        "int slt = ( p / np ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int tml’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        7
      ],
      "mod_code": [
        "cin >> n >> l >> k >> c >> d >> p >> p >> np ;",
        "int tml = ( k * l ) / nl ;",
        "int slt = ( p / np ) ;",
        "cout << ( mi << slt ) / n << \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int tml’"
    },
    {
      "mod_line": [
        2,
        3,
        7
      ],
      "mod_code": [
        "cin >> n >> l >> k >> c >> d >> p >> p >> np ;",
        "int tml = ( k * l ) / nl ;",
        "cout << ( mi << slt ) / n << \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int tml’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "cin >> n >> l >> k >> c >> d >> p >> p >> np ;",
        "int slt = ( p / np ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int slt’"
    },
    {
      "mod_line": [
        2,
        5,
        7
      ],
      "mod_code": [
        "cin >> n >> l >> k >> c >> d >> p >> p >> np ;",
        "int slt = ( p / np ) ;",
        "cout << ( mi << slt ) / n << \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int slt’"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "cout << ( mi << slt ) / n << endl ;",
        "int tml = ( k * l ) / nl ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int tml’"
    },
    {
      "mod_line": [
        7,
        3,
        5
      ],
      "mod_code": [
        "cout << ( mi << slt ) / n << endl ;",
        "int tml = ( k * l ) / nl ;",
        "int slt = ( p / np ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int tml’"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "cout << ( mi << slt ) / n << endl ;",
        "int slt = ( p / np ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int slt’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "int tml = ( k * l ) / nl ;",
        "int slt = ( p / np ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int tml’"
    },
    {
      "mod_line": [
        3,
        5,
        7
      ],
      "mod_code": [
        "int tml = ( k * l ) / nl ;",
        "int slt = ( p / np ) ;",
        "cout << ( mi << slt ) / n << \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int tml’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "int tml = ( k * l ) / nl ;",
        "cout << ( mi << slt ) / n << \" \\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int tml’"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "int slt = ( p / np ) ;",
        "cout << ( mi << slt ) / n << \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int slt’"
    }
  ]
}