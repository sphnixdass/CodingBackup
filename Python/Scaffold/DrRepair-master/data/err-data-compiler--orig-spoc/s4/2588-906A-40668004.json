{
  "meta": {
    "index": 2588,
    "hitid": "31N9JPQXIPCJ71XHQIOV8WIWFD2HN8",
    "workerid": "A1AYVATMT88U1W",
    "probid": "906A",
    "subid": "40668004"
  },
  "lines": [
    {
      "line": 0,
      "text": "let maxn be a constant integer with maxn is equal to 1e5 + 5",
      "code": "const int maxn = 1e5 + 5 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , len , cnt , ans , flag , vis , now be integers with vis = array of integers of length 26 , now = array of integers of length 26",
      "code": "int n , len , cnt , ans , flag , vis [ 26 ] , now [ 26 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let c be a character",
      "code": "char c ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "let str be a string",
      "code": "string str ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read c and str",
      "code": "cin >> c >> str ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "the value of len = length of str",
      "code": "len = str . size ( ) ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if c is equal to not",
      "code": "if ( c == ' ! ' )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if flag is true",
      "code": "if ( flag )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "increase ans by 1",
      "code": "ans ++ ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "else do the following",
      "code": "else",
      "indent": 3
    },
    {
      "line": 13,
      "text": "fill now , now + 26 , 1",
      "code": "fill ( now , now + 26 , 1 ) ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "for j = 0 to len exclusive , now [ str [ j ] - a ] is equal to 0",
      "code": "for ( int j = 0 ; j < len ; j ++ ) { now [ str [ j ] - ' a ' ] = 0 ; }",
      "indent": 4
    },
    {
      "line": 15,
      "text": "for j = 0 to 26 exclusive",
      "code": "for ( int j = 0 ; j < 26 ; j ++ )",
      "indent": 4
    },
    {
      "line": 16,
      "text": "if now [ j ] is equal to 1 , set vis [ j ] to 1",
      "code": "if ( now [ j ] == 1 ) vis [ j ] = 1 ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "else if c is equal to ?",
      "code": "else if ( c == ' ? ' )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if flag and vis [ str [ 0 ] - a ] is equal to 1 , increment ans by 1",
      "code": "if ( flag && vis [ str [ 0 ] - ' a ' ] == 1 ) { ans ++ ; }",
      "indent": 3
    },
    {
      "line": 21,
      "text": "set vis [ str [ 0 ] - a ] to 1",
      "code": "vis [ str [ 0 ] - ' a ' ] = 1 ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 23,
      "text": "for j = 0 to len exclusive , vis [ str [ j ] - a ] is equal to 1",
      "code": "for ( int j = 0 ; j < len ; j ++ ) { vis [ str [ j ] - ' a ' ] = 1 ; }",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "set cnt to 0",
      "code": "cnt = 0 ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "for j = 0 to 26 exclusive",
      "code": "for ( int j = 0 ; j < 26 ; j ++ )",
      "indent": 2
    },
    {
      "line": 27,
      "text": "if vis [ j ] is equal to 1 , increment cnt by 1",
      "code": "if ( vis [ j ] == 1 ) cnt ++ ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 29,
      "text": "if cnt is equal to 25 , flag is equal to 1",
      "code": "if ( cnt == 25 ) flag = 1 ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "print ans and newline",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "memset ( now , now + 26 , 1 ) ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "else if ( c == \" ? \" )"
      ],
      "err_line": 19,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "if ( cnt == \" 25 \" ) flag = 1 ;"
      ],
      "err_line": 29,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , flag , vis [ 26 ] , now ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "a = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char str ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘size’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "c >> c >> str ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘int’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "now = now + now , now + 26 ;"
      ],
      "err_line": 13,
      "err_msg": "invalid operands of types ‘int [26]’ and ‘int [26]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( j = 0 ; j < 26 ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘j’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "for ( int j = 0 ; j < len ; j ++ ) { vis [ str [ j ] - a ] = 1 ; }"
      ],
      "err_line": 23,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "for ( j = 0 ; j < 26 ; j ++ )"
      ],
      "err_line": 26,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "if ( c == ' equal ' )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        9,
        13
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "if ( c == ' equal ' )",
        "memset ( now , now + 26 , 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        9,
        13,
        19
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "if ( c == ' equal ' )",
        "memset ( now , now + 26 , 1 ) ;",
        "else if ( c == \" ? \" )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        9,
        13,
        29
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "if ( c == ' equal ' )",
        "memset ( now , now + 26 , 1 ) ;",
        "if ( cnt == \" 25 \" ) flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        9,
        13,
        12
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "if ( c == ' equal ' )",
        "memset ( now , now + 26 , 1 ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        9,
        19
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "if ( c == ' equal ' )",
        "else if ( c == \" ? \" )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        9,
        19,
        29
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "if ( c == ' equal ' )",
        "else if ( c == \" ? \" )",
        "if ( cnt == \" 25 \" ) flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        9,
        19,
        12
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "if ( c == ' equal ' )",
        "else if ( c == \" ? \" )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        9,
        29
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "if ( c == ' equal ' )",
        "if ( cnt == \" 25 \" ) flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        9,
        29,
        12
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "if ( c == ' equal ' )",
        "if ( cnt == \" 25 \" ) flag = 1 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        9,
        12
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "if ( c == ' equal ' )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "memset ( now , now + 26 , 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        13,
        19
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "memset ( now , now + 26 , 1 ) ;",
        "else if ( c == \" ? \" )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        13,
        19,
        29
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "memset ( now , now + 26 , 1 ) ;",
        "else if ( c == \" ? \" )",
        "if ( cnt == \" 25 \" ) flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        13,
        19,
        12
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "memset ( now , now + 26 , 1 ) ;",
        "else if ( c == \" ? \" )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        13,
        29
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "memset ( now , now + 26 , 1 ) ;",
        "if ( cnt == \" 25 \" ) flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        13,
        29,
        12
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "memset ( now , now + 26 , 1 ) ;",
        "if ( cnt == \" 25 \" ) flag = 1 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        13,
        12
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "memset ( now , now + 26 , 1 ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        19
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "else if ( c == \" ? \" )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        19,
        29
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "else if ( c == \" ? \" )",
        "if ( cnt == \" 25 \" ) flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        19,
        29,
        12
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "else if ( c == \" ? \" )",
        "if ( cnt == \" 25 \" ) flag = 1 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        19,
        12
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "else if ( c == \" ? \" )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        29
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "if ( cnt == \" 25 \" ) flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        29,
        12
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "if ( cnt == \" 25 \" ) flag = 1 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int n , len , cnt , vis [ 26 ] , cnt , ans , vis [ 26 ] , now ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "if ( c == ' equal ' )",
        "memset ( now , now + 26 , 1 ) ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        13,
        19
      ],
      "mod_code": [
        "if ( c == ' equal ' )",
        "memset ( now , now + 26 , 1 ) ;",
        "else if ( c == \" ? \" )"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        13,
        19,
        29
      ],
      "mod_code": [
        "if ( c == ' equal ' )",
        "memset ( now , now + 26 , 1 ) ;",
        "else if ( c == \" ? \" )",
        "if ( cnt == \" 25 \" ) flag = 1 ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        13,
        19,
        12
      ],
      "mod_code": [
        "if ( c == ' equal ' )",
        "memset ( now , now + 26 , 1 ) ;",
        "else if ( c == \" ? \" )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        13,
        29
      ],
      "mod_code": [
        "if ( c == ' equal ' )",
        "memset ( now , now + 26 , 1 ) ;",
        "if ( cnt == \" 25 \" ) flag = 1 ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        13,
        29,
        12
      ],
      "mod_code": [
        "if ( c == ' equal ' )",
        "memset ( now , now + 26 , 1 ) ;",
        "if ( cnt == \" 25 \" ) flag = 1 ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        13,
        12
      ],
      "mod_code": [
        "if ( c == ' equal ' )",
        "memset ( now , now + 26 , 1 ) ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        19
      ],
      "mod_code": [
        "if ( c == ' equal ' )",
        "else if ( c == \" ? \" )"
      ],
      "err_line": 19,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        19,
        29
      ],
      "mod_code": [
        "if ( c == ' equal ' )",
        "else if ( c == \" ? \" )",
        "if ( cnt == \" 25 \" ) flag = 1 ;"
      ],
      "err_line": 19,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        19,
        29,
        12
      ],
      "mod_code": [
        "if ( c == ' equal ' )",
        "else if ( c == \" ? \" )",
        "if ( cnt == \" 25 \" ) flag = 1 ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        19,
        12
      ],
      "mod_code": [
        "if ( c == ' equal ' )",
        "else if ( c == \" ? \" )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        29
      ],
      "mod_code": [
        "if ( c == ' equal ' )",
        "if ( cnt == \" 25 \" ) flag = 1 ;"
      ],
      "err_line": 29,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        29,
        12
      ],
      "mod_code": [
        "if ( c == ' equal ' )",
        "if ( cnt == \" 25 \" ) flag = 1 ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "if ( c == ' equal ' )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        19
      ],
      "mod_code": [
        "memset ( now , now + 26 , 1 ) ;",
        "else if ( c == \" ? \" )"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        19,
        29
      ],
      "mod_code": [
        "memset ( now , now + 26 , 1 ) ;",
        "else if ( c == \" ? \" )",
        "if ( cnt == \" 25 \" ) flag = 1 ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        19,
        29,
        12
      ],
      "mod_code": [
        "memset ( now , now + 26 , 1 ) ;",
        "else if ( c == \" ? \" )",
        "if ( cnt == \" 25 \" ) flag = 1 ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        19,
        12
      ],
      "mod_code": [
        "memset ( now , now + 26 , 1 ) ;",
        "else if ( c == \" ? \" )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        29
      ],
      "mod_code": [
        "memset ( now , now + 26 , 1 ) ;",
        "if ( cnt == \" 25 \" ) flag = 1 ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        29,
        12
      ],
      "mod_code": [
        "memset ( now , now + 26 , 1 ) ;",
        "if ( cnt == \" 25 \" ) flag = 1 ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        12
      ],
      "mod_code": [
        "memset ( now , now + 26 , 1 ) ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        19,
        29
      ],
      "mod_code": [
        "else if ( c == \" ? \" )",
        "if ( cnt == \" 25 \" ) flag = 1 ;"
      ],
      "err_line": 19,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        29,
        12
      ],
      "mod_code": [
        "else if ( c == \" ? \" )",
        "if ( cnt == \" 25 \" ) flag = 1 ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        19,
        12
      ],
      "mod_code": [
        "else if ( c == \" ? \" )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        29,
        12
      ],
      "mod_code": [
        "if ( cnt == \" 25 \" ) flag = 1 ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}