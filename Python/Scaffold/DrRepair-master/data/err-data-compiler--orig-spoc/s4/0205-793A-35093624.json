{
  "meta": {
    "index": 205,
    "hitid": "3HYV4299H0QMKKJBUFR65WVOXFFE8U",
    "workerid": "AIWEXPJAU66D9",
    "probid": "793A",
    "subid": "35093624"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "T , k and cont are long longs , with cont = 0",
      "code": "long long T , k , cont = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read T and k",
      "code": "cin >> T >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "arr is an array of integers with size T",
      "code": "int arr [ T ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read T elements into arr",
      "code": "for ( int i = 0 ; i < T ; i ++ ) { cin >> arr [ i ] ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create integers mod = arr [ 0 ] % k and minimun = arr [ 0 ]",
      "code": "int mod = arr [ 0 ] % k , minimun = arr [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 1 to T exclusive set minimun to min of minimun and arr [ i ]",
      "code": "for ( int i = 1 ; i < T ; i ++ ) { minimun = min ( minimun , arr [ i ] ) ; }",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to T exclusive",
      "code": "for ( int i = 0 ; i < T ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if arr [ i ] % k ! = mod",
      "code": "if ( arr [ i ] % k != mod )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set value of cont to - 1",
      "code": "cont = - 1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "increase cont by ( arr [ i ] - minimun ) / k",
      "code": "cont += ( arr [ i ] - minimun ) / k ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print cont and a new line",
      "code": "cout << cont << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i < T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int mod = arr [ 0 ] % k % minimun = arr [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘minimun’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "* cont = - 1 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i < T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "cont += ( arr [ i ] - ' minimun ' ) / k ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "cont += ( arr [ i ] - ' minimun ' ) / k ;",
        "if ( arr [ i ] % k != 0 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        8,
        11
      ],
      "mod_code": [
        "for ( int i = 1 ; i < T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "cont += ( arr [ i ] - ' minimun ' ) / k ;",
        "if ( arr [ i ] % k != 0 )",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        8,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i < T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "cont += ( arr [ i ] - ' minimun ' ) / k ;",
        "if ( arr [ i ] % k != 0 )",
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        11
      ],
      "mod_code": [
        "for ( int i = 1 ; i < T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "cont += ( arr [ i ] - ' minimun ' ) / k ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        11,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i < T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "cont += ( arr [ i ] - ' minimun ' ) / k ;",
        "else else",
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i < T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "cont += ( arr [ i ] - ' minimun ' ) / k ;",
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "if ( arr [ i ] % k != 0 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        8,
        11
      ],
      "mod_code": [
        "for ( int i = 1 ; i < T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "if ( arr [ i ] % k != 0 )",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        8,
        11,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i < T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "if ( arr [ i ] % k != 0 )",
        "else else",
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        8,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i < T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "if ( arr [ i ] % k != 0 )",
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "for ( int i = 1 ; i < T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        11,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i < T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "else else",
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i < T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "cont += ( arr [ i ] - ' minimun ' ) / k ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "cont += ( arr [ i ] - ' minimun ' ) / k ;",
        "if ( arr [ i ] % k != 0 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        8,
        11
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "cont += ( arr [ i ] - ' minimun ' ) / k ;",
        "if ( arr [ i ] % k != 0 )",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        8,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "cont += ( arr [ i ] - ' minimun ' ) / k ;",
        "if ( arr [ i ] % k != 0 )",
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        11
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "cont += ( arr [ i ] - ' minimun ' ) / k ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        11,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "cont += ( arr [ i ] - ' minimun ' ) / k ;",
        "else else",
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "cont += ( arr [ i ] - ' minimun ' ) / k ;",
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "if ( arr [ i ] % k != 0 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        8,
        11
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "if ( arr [ i ] % k != 0 )",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        8,
        11,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "if ( arr [ i ] % k != 0 )",
        "else else",
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        8,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "if ( arr [ i ] % k != 0 )",
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        11,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "else else",
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= T ; i ++ ) { minimun = min ( minimun [ i ] ) ; }",
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        8,
        11
      ],
      "mod_code": [
        "cont += ( arr [ i ] - ' minimun ' ) / k ;",
        "if ( arr [ i ] % k != 0 )",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        8,
        11,
        7
      ],
      "mod_code": [
        "cont += ( arr [ i ] - ' minimun ' ) / k ;",
        "if ( arr [ i ] % k != 0 )",
        "else else",
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        8,
        7
      ],
      "mod_code": [
        "cont += ( arr [ i ] - ' minimun ' ) / k ;",
        "if ( arr [ i ] % k != 0 )",
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        11
      ],
      "mod_code": [
        "cont += ( arr [ i ] - ' minimun ' ) / k ;",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        11,
        7
      ],
      "mod_code": [
        "cont += ( arr [ i ] - ' minimun ' ) / k ;",
        "else else",
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        7
      ],
      "mod_code": [
        "cont += ( arr [ i ] - ' minimun ' ) / k ;",
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "if ( arr [ i ] % k != 0 )",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        11,
        7
      ],
      "mod_code": [
        "if ( arr [ i ] % k != 0 )",
        "else else",
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "if ( arr [ i ] % k != 0 )",
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "else else",
        "for ( i = 0 ; i < T ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}