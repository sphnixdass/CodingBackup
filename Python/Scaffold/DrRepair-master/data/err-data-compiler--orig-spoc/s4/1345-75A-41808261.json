{
  "meta": {
    "index": 1345,
    "hitid": "37VHPF5VYCX7NMZXYOLBF8VLC34C81",
    "workerid": "A1AYVATMT88U1W",
    "probid": "75A",
    "subid": "41808261"
  },
  "lines": [
    {
      "line": 0,
      "text": "let a is equal to array of integers of length 20",
      "code": "int a [ 20 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "do integer lzl ( int x )",
      "code": "int lzl ( int x )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let sum , z be integers with values sum is equal to 0 , z is equal to 0",
      "code": "int sum = 0 , z = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while ( x = 1 , do the following )",
      "code": "while ( x )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let a [ z + + ] is equal to x % 10",
      "code": "a [ z ++ ] = x % 10 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "let x is equal to x / 10",
      "code": "x /= 10 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for ( integer i is equal to z - 1 , i is greater than or equal to 0 , decrease value of i by 1 )",
      "code": "for ( int i = z - 1 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if ( a [ i ] ) sum is equal to sum * 10 + ith element of array a",
      "code": "if ( a [ i ] ) sum = sum * 10 + a [ i ] ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "return the value of sum",
      "code": "return sum ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 12,
      "text": "let a , b be integers",
      "code": "int a , b ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "while ( reading a , b )",
      "code": "while ( cin >> a >> b )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "let the value of integer t is equal to a + b",
      "code": "int t = a + b ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "t is equal to lzl ( t )",
      "code": "t = lzl ( t ) ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "let integer w is equal to lzl ( a ) + lzl ( b )",
      "code": "int w = lzl ( a ) + lzl ( b ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if ( t is equal to w )",
      "code": "if ( t == w )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print YES and newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 20,
      "text": "print NO and newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int lzl ( int x ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int sum = 0 , z , z ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "a [ z + ] ] = x % 10 ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘]’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "t = a + b ;"
      ],
      "err_line": 14,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "w = lzl ( a ) + lzl ( b ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘w’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int lzl ( int x ) ;",
        "while ( x == 1 )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        3,
        8
      ],
      "mod_code": [
        "int lzl ( int x ) ;",
        "while ( x == 1 )",
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        17
      ],
      "mod_code": [
        "int lzl ( int x ) ;",
        "while ( x == 1 )",
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )",
        "if ( t == ' w ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        16
      ],
      "mod_code": [
        "int lzl ( int x ) ;",
        "while ( x == 1 )",
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )",
        "w = lzl ( a ) + lzl ( b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        3,
        17
      ],
      "mod_code": [
        "int lzl ( int x ) ;",
        "while ( x == 1 )",
        "if ( t == ' w ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        3,
        17,
        16
      ],
      "mod_code": [
        "int lzl ( int x ) ;",
        "while ( x == 1 )",
        "if ( t == ' w ' )",
        "w = lzl ( a ) + lzl ( b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        3,
        16
      ],
      "mod_code": [
        "int lzl ( int x ) ;",
        "while ( x == 1 )",
        "w = lzl ( a ) + lzl ( b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int lzl ( int x ) ;",
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        17
      ],
      "mod_code": [
        "int lzl ( int x ) ;",
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )",
        "if ( t == ' w ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        17,
        16
      ],
      "mod_code": [
        "int lzl ( int x ) ;",
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )",
        "if ( t == ' w ' )",
        "w = lzl ( a ) + lzl ( b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        17,
        3
      ],
      "mod_code": [
        "int lzl ( int x ) ;",
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )",
        "if ( t == ' w ' )",
        "while ( ! x )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        16
      ],
      "mod_code": [
        "int lzl ( int x ) ;",
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )",
        "w = lzl ( a ) + lzl ( b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        16,
        3
      ],
      "mod_code": [
        "int lzl ( int x ) ;",
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )",
        "w = lzl ( a ) + lzl ( b ) ;",
        "while ( ! x )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        3
      ],
      "mod_code": [
        "int lzl ( int x ) ;",
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )",
        "while ( ! x )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        17
      ],
      "mod_code": [
        "int lzl ( int x ) ;",
        "if ( t == ' w ' )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        17,
        16
      ],
      "mod_code": [
        "int lzl ( int x ) ;",
        "if ( t == ' w ' )",
        "w = lzl ( a ) + lzl ( b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        17,
        16,
        3
      ],
      "mod_code": [
        "int lzl ( int x ) ;",
        "if ( t == ' w ' )",
        "w = lzl ( a ) + lzl ( b ) ;",
        "while ( ! x )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        17,
        3
      ],
      "mod_code": [
        "int lzl ( int x ) ;",
        "if ( t == ' w ' )",
        "while ( ! x )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "int lzl ( int x ) ;",
        "w = lzl ( a ) + lzl ( b ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        16,
        3
      ],
      "mod_code": [
        "int lzl ( int x ) ;",
        "w = lzl ( a ) + lzl ( b ) ;",
        "while ( ! x )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int lzl ( int x ) ;",
        "while ( ! x )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "while ( x == 1 )",
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        8,
        17
      ],
      "mod_code": [
        "while ( x == 1 )",
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )",
        "if ( t == ' w ' )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        8,
        17,
        16
      ],
      "mod_code": [
        "while ( x == 1 )",
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )",
        "if ( t == ' w ' )",
        "w = lzl ( a ) + lzl ( b ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        8,
        16
      ],
      "mod_code": [
        "while ( x == 1 )",
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )",
        "w = lzl ( a ) + lzl ( b ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        17,
        16
      ],
      "mod_code": [
        "while ( x == 1 )",
        "if ( t == ' w ' )",
        "w = lzl ( a ) + lzl ( b ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘w’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "while ( x == 1 )",
        "w = lzl ( a ) + lzl ( b ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘w’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        17
      ],
      "mod_code": [
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )",
        "if ( t == ' w ' )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        17,
        16
      ],
      "mod_code": [
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )",
        "if ( t == ' w ' )",
        "w = lzl ( a ) + lzl ( b ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        17,
        16,
        3
      ],
      "mod_code": [
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )",
        "if ( t == ' w ' )",
        "w = lzl ( a ) + lzl ( b ) ;",
        "while ( ! x )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        17,
        3
      ],
      "mod_code": [
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )",
        "if ( t == ' w ' )",
        "while ( ! x )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        16
      ],
      "mod_code": [
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )",
        "w = lzl ( a ) + lzl ( b ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        16,
        3
      ],
      "mod_code": [
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )",
        "w = lzl ( a ) + lzl ( b ) ;",
        "while ( ! x )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "if ( ( a [ i ] ) == sum * 10 + a [ i ] )",
        "while ( ! x )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        16
      ],
      "mod_code": [
        "if ( t == ' w ' )",
        "w = lzl ( a ) + lzl ( b ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘w’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        16,
        3
      ],
      "mod_code": [
        "if ( t == ' w ' )",
        "w = lzl ( a ) + lzl ( b ) ;",
        "while ( ! x )"
      ],
      "err_line": 16,
      "err_msg": "‘w’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        3
      ],
      "mod_code": [
        "w = lzl ( a ) + lzl ( b ) ;",
        "while ( ! x )"
      ],
      "err_line": 16,
      "err_msg": "‘w’ was not declared in this scope"
    }
  ]
}