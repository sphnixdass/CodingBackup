{
  "meta": {
    "index": 2005,
    "hitid": "3DFYDSXB2WUSTXCGBJ32Y4Q5010UJJ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "389A",
    "subid": "49066294"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare gcd with integers a , b as arguments , returning integer",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if b is 0 , return a from function",
      "code": "if ( b == 0 ) { return a ; }",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return result of run gcd with b , a % b as arguments",
      "code": "return gcd ( b , a % b ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "declare integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "declare arr size N as integer array",
      "code": "int arr [ n ] ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to n exclusive , read arr [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }",
      "indent": 1
    },
    {
      "line": 9,
      "text": "declare p = result of run gcd ( arr [ 0 ] , arr [ 1 ] ) as integer",
      "code": "int p = gcd ( arr [ 0 ] , arr [ 1 ] ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 2 to n exclusive , let p be result of run gcd with p , arr [ i ] as arguments",
      "code": "for ( int i = 2 ; i < n ; i ++ ) { p = gcd ( p , arr [ i ] ) ; }",
      "indent": 1
    },
    {
      "line": 11,
      "text": "let ans be p * n",
      "code": "int ans = p * n ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print ans print newline",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int arr [ N ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;"
      ],
      "err_line": 9,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "ans = p * n ;"
      ],
      "err_line": 11,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 8,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "ans *= n ;"
      ],
      "err_line": 11,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int arr [ N ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        9
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int arr [ N ] ;",
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        9,
        11
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int arr [ N ] ;",
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;",
        "ans = p * n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        9,
        11
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int arr [ N ] ;",
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;",
        "ans *= n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        9,
        6
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int arr [ N ] ;",
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        11
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int arr [ N ] ;",
        "ans = p * n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        11,
        6
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int arr [ N ] ;",
        "ans = p * n ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        11
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int arr [ N ] ;",
        "ans *= n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        11,
        6
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int arr [ N ] ;",
        "ans *= n ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        6
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int arr [ N ] ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        11
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;",
        "ans = p * n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        11,
        6
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;",
        "ans = p * n ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        11
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;",
        "ans *= n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        11,
        6
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;",
        "ans *= n ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        6
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "ans = p * n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11,
        6
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "ans = p * n ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "ans *= n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11,
        6
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "ans *= n ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "int arr [ N ] ;",
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        11
      ],
      "mod_code": [
        "int arr [ N ] ;",
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;",
        "ans = p * n ;"
      ],
      "err_line": 7,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        11,
        6
      ],
      "mod_code": [
        "int arr [ N ] ;",
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;",
        "ans = p * n ;",
        "while ( cin >> n )"
      ],
      "err_line": 7,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        11
      ],
      "mod_code": [
        "int arr [ N ] ;",
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;",
        "ans *= n ;"
      ],
      "err_line": 7,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        11,
        6
      ],
      "mod_code": [
        "int arr [ N ] ;",
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;",
        "ans *= n ;",
        "while ( cin >> n )"
      ],
      "err_line": 7,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        6
      ],
      "mod_code": [
        "int arr [ N ] ;",
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;",
        "while ( cin >> n )"
      ],
      "err_line": 7,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "int arr [ N ] ;",
        "ans = p * n ;"
      ],
      "err_line": 7,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        11,
        6
      ],
      "mod_code": [
        "int arr [ N ] ;",
        "ans = p * n ;",
        "while ( cin >> n )"
      ],
      "err_line": 7,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "int arr [ N ] ;",
        "ans *= n ;"
      ],
      "err_line": 7,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        11,
        6
      ],
      "mod_code": [
        "int arr [ N ] ;",
        "ans *= n ;",
        "while ( cin >> n )"
      ],
      "err_line": 7,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "int arr [ N ] ;",
        "while ( cin >> n )"
      ],
      "err_line": 7,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;",
        "ans = p * n ;"
      ],
      "err_line": 9,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        11,
        6
      ],
      "mod_code": [
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;",
        "ans = p * n ;",
        "while ( cin >> n )"
      ],
      "err_line": 8,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;",
        "ans *= n ;"
      ],
      "err_line": 9,
      "err_msg": "expression list treated as compound expression in functional cast [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        11,
        6
      ],
      "mod_code": [
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;",
        "ans *= n ;",
        "while ( cin >> n )"
      ],
      "err_line": 8,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "int p = int ( arr [ 0 ] , arr [ 1 ] ) ;",
        "while ( cin >> n )"
      ],
      "err_line": 8,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "ans = p * n ;",
        "while ( cin >> n )"
      ],
      "err_line": 8,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "ans *= n ;",
        "while ( cin >> n )"
      ],
      "err_line": 8,
      "err_msg": "‘arr’ was not declared in this scope"
    }
  ]
}