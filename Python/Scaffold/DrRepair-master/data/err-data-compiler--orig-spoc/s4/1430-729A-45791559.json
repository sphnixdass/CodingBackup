{
  "meta": {
    "index": 1430,
    "hitid": "3QGHA0EA0JUZ3I39IR5MI4SPCP8BW9",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "729A",
    "subid": "45791559"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create string x and y",
      "code": "string x , y ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read x , y",
      "code": "cin >> n >> x ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "n = n + 2",
      "code": "n += 2 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set x equal to x + x + x",
      "code": "x = ' x ' + x + ' x ' ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set bool cek = true",
      "code": "bool cek = true ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "assign - 1 to stop",
      "code": "int stop = - 1 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to n - 1 exclusive",
      "code": "for ( int i = 0 ; i < n - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if x [ i ] = o and x [ i + 2 ] = o and x [ i + 1 ] = g",
      "code": "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == ' g ' )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "assign 1 + 2 to stop",
      "code": "stop = i + 2 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "if cek is true",
      "code": "if ( cek )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "y = y + * * *",
      "code": "y += \" *** \" ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "set cek = false",
      "code": "cek = false ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 16,
      "text": "otherwise",
      "code": "else",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if i = stop",
      "code": "if ( i == stop )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "cek = true",
      "code": "cek = true ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "continue the loop",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 21,
      "text": "if i is different from 0 , y = y + x [ i ]",
      "code": "if ( i != 0 ) y += x [ i ] ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print y",
      "code": "cout << y << endl ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "break ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "y += * * * * * * } ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( i == break )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘break’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string x , y y ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘y’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < n - 1 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "y += * * * * * * * } ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        5,
        7
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "x = x + x + x ;",
        "break ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        9
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "x = x + x + x ;",
        "break ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        10
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "x = x + x + x ;",
        "break ;",
        "const int stop = 1 + 2 ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        13
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "x = x + x + x ;",
        "break ;",
        "y += * * * * * * } ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        17
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "x = x + x + x ;",
        "break ;",
        "if ( i == break )"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        3,
        5,
        9
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "x = x + x + x ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        9,
        10
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "x = x + x + x ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "const int stop = 1 + 2 ;"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        9,
        13
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "x = x + x + x ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "y += * * * * * * } ;"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        9,
        17
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "x = x + x + x ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "if ( i == break )"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        10,
        13
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "x = x + x + x ;",
        "const int stop = 1 + 2 ;",
        "y += * * * * * * } ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        5,
        10,
        17
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "x = x + x + x ;",
        "const int stop = 1 + 2 ;",
        "if ( i == break )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘break’"
    },
    {
      "mod_line": [
        3,
        5,
        13
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "x = x + x + x ;",
        "y += * * * * * * } ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        5,
        13,
        17
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "x = x + x + x ;",
        "y += * * * * * * } ;",
        "if ( i == break )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        5,
        17
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "x = x + x + x ;",
        "if ( i == break )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘break’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "break ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        3,
        7,
        9
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "break ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        10
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "break ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "const int stop = 1 + 2 ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        13
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "break ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "y += * * * * * * } ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        17
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "break ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "if ( i == break )"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        3,
        7,
        10
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "break ;",
        "const int stop = 1 + 2 ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        3,
        7,
        10,
        13
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "break ;",
        "const int stop = 1 + 2 ;",
        "y += * * * * * * } ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        3,
        7,
        10,
        17
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "break ;",
        "const int stop = 1 + 2 ;",
        "if ( i == break )"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        3,
        7,
        13
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "break ;",
        "y += * * * * * * } ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        3,
        7,
        13,
        17
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "break ;",
        "y += * * * * * * } ;",
        "if ( i == break )"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        3,
        7,
        17
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "break ;",
        "if ( i == break )"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        10
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "const int stop = 1 + 2 ;"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        10,
        13
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "const int stop = 1 + 2 ;",
        "y += * * * * * * } ;"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        10,
        17
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "const int stop = 1 + 2 ;",
        "if ( i == break )"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        13
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "y += * * * * * * } ;"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        13,
        17
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "y += * * * * * * } ;",
        "if ( i == break )"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        17
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "if ( i == break )"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        10,
        13
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "const int stop = 1 + 2 ;",
        "y += * * * * * * } ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        10,
        13,
        17
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "const int stop = 1 + 2 ;",
        "y += * * * * * * } ;",
        "if ( i == break )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        10,
        17
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "const int stop = 1 + 2 ;",
        "if ( i == break )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘break’"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "y += * * * * * * } ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        13,
        17
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "y += * * * * * * } ;",
        "if ( i == break )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        17
      ],
      "mod_code": [
        "cin >> x >> y ;",
        "if ( i == break )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘break’"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "x = x + x + x ;",
        "break ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        5,
        7,
        9
      ],
      "mod_code": [
        "x = x + x + x ;",
        "break ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        10
      ],
      "mod_code": [
        "x = x + x + x ;",
        "break ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "const int stop = 1 + 2 ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        13
      ],
      "mod_code": [
        "x = x + x + x ;",
        "break ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "y += * * * * * * } ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        17
      ],
      "mod_code": [
        "x = x + x + x ;",
        "break ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "if ( i == break )"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        5,
        7,
        10
      ],
      "mod_code": [
        "x = x + x + x ;",
        "break ;",
        "const int stop = 1 + 2 ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        5,
        7,
        10,
        13
      ],
      "mod_code": [
        "x = x + x + x ;",
        "break ;",
        "const int stop = 1 + 2 ;",
        "y += * * * * * * } ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        5,
        7,
        10,
        17
      ],
      "mod_code": [
        "x = x + x + x ;",
        "break ;",
        "const int stop = 1 + 2 ;",
        "if ( i == break )"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        5,
        7,
        13
      ],
      "mod_code": [
        "x = x + x + x ;",
        "break ;",
        "y += * * * * * * } ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        5,
        7,
        13,
        17
      ],
      "mod_code": [
        "x = x + x + x ;",
        "break ;",
        "y += * * * * * * } ;",
        "if ( i == break )"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        5,
        7,
        17
      ],
      "mod_code": [
        "x = x + x + x ;",
        "break ;",
        "if ( i == break )"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "x = x + x + x ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        9,
        10
      ],
      "mod_code": [
        "x = x + x + x ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "const int stop = 1 + 2 ;"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        13
      ],
      "mod_code": [
        "x = x + x + x ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "const int stop = 1 + 2 ;",
        "y += * * * * * * } ;"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        17
      ],
      "mod_code": [
        "x = x + x + x ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "const int stop = 1 + 2 ;",
        "if ( i == break )"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        9,
        13
      ],
      "mod_code": [
        "x = x + x + x ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "y += * * * * * * } ;"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        9,
        13,
        17
      ],
      "mod_code": [
        "x = x + x + x ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "y += * * * * * * } ;",
        "if ( i == break )"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        9,
        17
      ],
      "mod_code": [
        "x = x + x + x ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "if ( i == break )"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10,
        13
      ],
      "mod_code": [
        "x = x + x + x ;",
        "const int stop = 1 + 2 ;",
        "y += * * * * * * } ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        10,
        13,
        17
      ],
      "mod_code": [
        "x = x + x + x ;",
        "const int stop = 1 + 2 ;",
        "y += * * * * * * } ;",
        "if ( i == break )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        10,
        17
      ],
      "mod_code": [
        "x = x + x + x ;",
        "const int stop = 1 + 2 ;",
        "if ( i == break )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘break’"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "x = x + x + x ;",
        "y += * * * * * * } ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        13,
        17
      ],
      "mod_code": [
        "x = x + x + x ;",
        "y += * * * * * * } ;",
        "if ( i == break )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        17
      ],
      "mod_code": [
        "x = x + x + x ;",
        "if ( i == break )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘break’"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "break ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        7,
        9,
        10
      ],
      "mod_code": [
        "break ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "const int stop = 1 + 2 ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        7,
        9,
        10,
        13
      ],
      "mod_code": [
        "break ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "const int stop = 1 + 2 ;",
        "y += * * * * * * } ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        7,
        9,
        10,
        17
      ],
      "mod_code": [
        "break ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "const int stop = 1 + 2 ;",
        "if ( i == break )"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        7,
        9,
        13
      ],
      "mod_code": [
        "break ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "y += * * * * * * } ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        7,
        9,
        13,
        17
      ],
      "mod_code": [
        "break ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "y += * * * * * * } ;",
        "if ( i == break )"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        7,
        9,
        17
      ],
      "mod_code": [
        "break ;",
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "if ( i == break )"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "break ;",
        "const int stop = 1 + 2 ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        7,
        10,
        13
      ],
      "mod_code": [
        "break ;",
        "const int stop = 1 + 2 ;",
        "y += * * * * * * } ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        7,
        10,
        13,
        17
      ],
      "mod_code": [
        "break ;",
        "const int stop = 1 + 2 ;",
        "y += * * * * * * } ;",
        "if ( i == break )"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        7,
        10,
        17
      ],
      "mod_code": [
        "break ;",
        "const int stop = 1 + 2 ;",
        "if ( i == break )"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        7,
        13
      ],
      "mod_code": [
        "break ;",
        "y += * * * * * * } ;"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        7,
        13,
        17
      ],
      "mod_code": [
        "break ;",
        "y += * * * * * * } ;",
        "if ( i == break )"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        7,
        17
      ],
      "mod_code": [
        "break ;",
        "if ( i == break )"
      ],
      "err_line": 7,
      "err_msg": "break statement not within loop or switch"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "const int stop = 1 + 2 ;"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        13
      ],
      "mod_code": [
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "const int stop = 1 + 2 ;",
        "y += * * * * * * } ;"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        13,
        17
      ],
      "mod_code": [
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "const int stop = 1 + 2 ;",
        "y += * * * * * * } ;",
        "if ( i == break )"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        17
      ],
      "mod_code": [
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "const int stop = 1 + 2 ;",
        "if ( i == break )"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "y += * * * * * * } ;"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13,
        17
      ],
      "mod_code": [
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "y += * * * * * * } ;",
        "if ( i == break )"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        17
      ],
      "mod_code": [
        "if ( x [ i ] == ' o ' && x [ i + 2 ] == ' o ' && x [ i + 1 ] == g )",
        "if ( i == break )"
      ],
      "err_line": 9,
      "err_msg": "‘g’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "const int stop = 1 + 2 ;",
        "y += * * * * * * } ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        13,
        17
      ],
      "mod_code": [
        "const int stop = 1 + 2 ;",
        "y += * * * * * * } ;",
        "if ( i == break )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        17
      ],
      "mod_code": [
        "const int stop = 1 + 2 ;",
        "if ( i == break )"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘break’"
    },
    {
      "mod_line": [
        13,
        17
      ],
      "mod_code": [
        "y += * * * * * * } ;",
        "if ( i == break )"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}