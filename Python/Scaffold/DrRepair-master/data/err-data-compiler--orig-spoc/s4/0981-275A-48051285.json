{
  "meta": {
    "index": 981,
    "hitid": "3UQ1LLR26A2E9EMI8ZYOEIR3XNCALO",
    "workerid": "A24WRPQYGMQLGF",
    "probid": "275A",
    "subid": "48051285"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = integer array of size 4 and width 4 , m = integer array of size 4 and width 4",
      "code": "int n [ 4 ] [ 4 ] , m [ 4 ] [ 4 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 1 to 3 inclusive",
      "code": "for ( int i = 1 ; i <= 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n [ i ] [ 1 ] , n [ i ] [ 2 ] , n [ i ] [ 3 ]",
      "code": "cin >> n [ i ] [ 1 ] >> n [ i ] [ 2 ] >> n [ i ] [ 3 ] ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "m [ i ] [ 1 ] = 1",
      "code": "m [ i ] [ 1 ] = 1 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "m [ i ] [ 2 ] = 1",
      "code": "m [ i ] [ 2 ] = 1 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "m [ i ] [ 3 ] = 1",
      "code": "m [ i ] [ 3 ] = 1 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 1 to 3 inclusive",
      "code": "for ( int i = 1 ; i <= 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for j = 1 to 3 inclusive",
      "code": "for ( int j = 1 ; j <= 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if n [ i ] [ j ] is odd",
      "code": "if ( n [ i ] [ j ] % 2 != 0 )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "m [ i ] [ j ] = 0 if m [ i ] [ j ] is 1 else 1",
      "code": "m [ i ] [ j ] = ( m [ i ] [ j ] == 1 ) ? 0 : 1 ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "if i is 2",
      "code": "if ( i == 2 )",
      "indent": 4
    },
    {
      "line": 13,
      "text": "m [ i + 1 ] [ j ] = 0 if m [ i + 1 ] [ j ] is 1 else 1",
      "code": "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
      "indent": 5
    },
    {
      "line": 14,
      "text": "m [ i - 1 ] [ j ] = 0 if m [ i - 1 ] [ j ] is 1 else 1",
      "code": "m [ i - 1 ] [ j ] = m [ i - 1 ] [ j ] == 1 ? 0 : 1 ;",
      "indent": 5
    },
    {
      "line": 15,
      "text": "else if i is 3",
      "code": "else if ( i == 3 )",
      "indent": 4
    },
    {
      "line": 16,
      "text": "m [ i - 1 ] [ j ] = 0 if m [ i - 1 ] [ j ] is 1 else 1",
      "code": "m [ i - 1 ] [ j ] = m [ i - 1 ] [ j ] == 1 ? 0 : 1 ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 18,
      "text": "m [ i + 1 ] [ j ] = 0 if m [ i + 1 ] [ j ] is 1 else 1",
      "code": "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
      "indent": 5
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 20,
      "text": "if j is 2",
      "code": "if ( j == 2 )",
      "indent": 4
    },
    {
      "line": 21,
      "text": "m [ i + 1 ] [ j ] = 0 if m [ i + 1 ] [ j ] is 1 else 1",
      "code": "m [ i ] [ j + 1 ] = m [ i ] [ j + 1 ] == 1 ? 0 : 1 ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "m [ i - 1 ] [ j ] = 0 if m [ i - 1 ] [ j ] is 1 else 1",
      "code": "m [ i ] [ j - 1 ] = m [ i ] [ j - 1 ] == 1 ? 0 : 1 ;",
      "indent": 5
    },
    {
      "line": 23,
      "text": "else if j is 3",
      "code": "else if ( j == 3 )",
      "indent": 4
    },
    {
      "line": 24,
      "text": "m [ i - 1 ] [ j ] = 0 if m [ i - 1 ] [ j ] is 1 else 1",
      "code": "m [ i ] [ j - 1 ] = m [ i ] [ j - 1 ] == 1 ? 0 : 1 ;",
      "indent": 5
    },
    {
      "line": 25,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 26,
      "text": "m [ i + 1 ] [ j ] = 0 if m [ i + 1 ] [ j ] is 1 else 1",
      "code": "m [ i ] [ j + 1 ] = m [ i ] [ j + 1 ] == 1 ? 0 : 1 ;",
      "indent": 5
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "for i = 1 to 3 inclusive print m [ i ] [ 1 ] , m [ i ] [ 2 ] , m [ i ] [ 3 ]",
      "code": "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n [ 4 ] , n [ 4 ] , m [ 4 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int n [4]’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 3 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "m [ ' i ' ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [4]’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "m [ ' i ' ] = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [4]’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "m [ ' i ' ] = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [4]’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 3 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( j = 1 ; j <= 3 ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "m [ i + 1 ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 13,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [4]’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "m [ i - 1 ] = m [ i - 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [4]’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "m [ i - 1 ] = m [ i - 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 16,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [4]’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "m [ i + 1 ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 18,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [4]’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "m [ i + 1 ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 21,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [4]’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "m [ i - 1 ] = m [ i - 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 22,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [4]’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "m [ i - 1 ] = m [ i - 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 24,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [4]’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "m [ i + 1 ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 26,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [4]’"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        14
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        14,
        16
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        14,
        21
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        14,
        22
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        14,
        24
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        14,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        14,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        16
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        16,
        21
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        16,
        22
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        16,
        24
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        16,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        16,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        21
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        21,
        22
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        21,
        24
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        21,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        21,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        22
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        22,
        24
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        22,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        22,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        24
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        24,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        24,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        26,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        11,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14,
        16
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14,
        16,
        21
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14,
        16,
        22
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14,
        16,
        24
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14,
        16,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14,
        16,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14,
        21
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14,
        21,
        22
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14,
        21,
        24
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14,
        21,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14,
        21,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14,
        22
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14,
        22,
        24
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14,
        22,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14,
        22,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14,
        24
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14,
        24,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14,
        24,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14,
        26,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        14,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        16,
        21
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        16,
        21,
        22
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        16,
        21,
        24
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        16,
        21,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        16,
        21,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        16,
        22
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        16,
        22,
        24
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        16,
        22,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        16,
        22,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        16,
        24
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        16,
        24,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        16,
        24,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        16,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        16,
        26,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        16,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        21
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        21,
        22
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        21,
        22,
        24
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        21,
        22,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        21,
        22,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        21,
        24
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        21,
        24,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        21,
        24,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        21,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        21,
        26,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        21,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        22
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        22,
        24
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        22,
        24,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        22,
        24,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        22,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        22,
        26,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        22,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        24
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        24,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        24,
        26,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        24,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        26
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        26,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        1,
        31
      ],
      "mod_code": [
        "int n [ 4 ] , m [ 4 ] , m [ 4 ] ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m [4]’"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14,
        16
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14,
        16,
        21
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14,
        16,
        22
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14,
        16,
        24
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14,
        16,
        26
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14,
        16,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14,
        21
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14,
        21,
        22
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14,
        21,
        24
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14,
        21,
        26
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14,
        21,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14,
        22
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14,
        22,
        24
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14,
        22,
        26
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14,
        22,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14,
        24
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14,
        24,
        26
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14,
        24,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14,
        26
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14,
        26,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        14,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        16
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        16,
        21
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        16,
        21,
        22
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        16,
        21,
        24
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        16,
        21,
        26
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        16,
        21,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        16,
        22
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        16,
        22,
        24
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        16,
        22,
        26
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        16,
        22,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        16,
        24
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        16,
        24,
        26
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        16,
        24,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        16,
        26
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        16,
        26,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        16,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        21
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        21,
        22
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        21,
        22,
        24
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        21,
        22,
        26
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        21,
        22,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        21,
        24
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        21,
        24,
        26
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        21,
        24,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        21,
        26
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        21,
        26,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        21,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        22
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        22,
        24
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        22,
        24,
        26
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        22,
        24,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        22,
        26
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        22,
        26,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        22,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        24
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        24,
        26
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        24,
        26,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        24,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        26
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        26,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        11,
        31
      ],
      "mod_code": [
        "m [ i ] [ j ] = 0 ? m [ i ] [ j ] = 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 11,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        16
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        16,
        21
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        16,
        21,
        22
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        16,
        21,
        24
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        16,
        21,
        26
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        16,
        21,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        16,
        22
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        16,
        22,
        24
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        16,
        22,
        26
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        16,
        22,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        16,
        24
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        16,
        24,
        26
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        16,
        24,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        16,
        26
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        16,
        26,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        16,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        21
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        21,
        22
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        21,
        22,
        24
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        21,
        22,
        26
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        21,
        22,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        21,
        24
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        21,
        24,
        26
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        21,
        24,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        21,
        26
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        21,
        26,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        21,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        22
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        22,
        24
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        22,
        24,
        26
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        22,
        24,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        22,
        26
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        22,
        26,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        22,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        24
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        24,
        26
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        24,
        26,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        24,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        26
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        26,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        14,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 14,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        21
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        21,
        22
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        21,
        22,
        24
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        21,
        22,
        26
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        21,
        22,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        21,
        24
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        21,
        24,
        26
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        21,
        24,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        21,
        26
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        21,
        26,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        21,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        22
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        22,
        24
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        22,
        24,
        26
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        22,
        24,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        22,
        26
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        22,
        26,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        22,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        24
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        24,
        26
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        24,
        26,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        24,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        26
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        26,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        16,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 16,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        21,
        22
      ],
      "mod_code": [
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        21,
        22,
        24
      ],
      "mod_code": [
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        21,
        22,
        24,
        26
      ],
      "mod_code": [
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        21,
        22,
        24,
        31
      ],
      "mod_code": [
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 22,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        21,
        22,
        26
      ],
      "mod_code": [
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        21,
        22,
        26,
        31
      ],
      "mod_code": [
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 22,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        21,
        22,
        31
      ],
      "mod_code": [
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 22,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        21,
        24
      ],
      "mod_code": [
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        21,
        24,
        26
      ],
      "mod_code": [
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        21,
        24,
        26,
        31
      ],
      "mod_code": [
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 24,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        21,
        24,
        31
      ],
      "mod_code": [
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 24,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        22,
        24
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        22,
        24,
        26
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        22,
        24,
        26,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 22,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        22,
        24,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 22,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        22,
        26
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        22,
        26,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 22,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        22,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 22,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        24,
        26
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        24,
        26,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "m [ i + 1 ] [ j ] = m [ i + 1 ] [ j ] == 1 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 24,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        24,
        31
      ],
      "mod_code": [
        "m [ i - 1 ] = 0 ? m [ i - 1 ] [ j ] = 0 ? 0 : 1 ;",
        "for ( int i = 1 ; i <= 3 ; i ++ ) { cout << m [ i ] [ 1 ] << \" \" << m [ i ] [ 2 ] << m [ i ] [ 3 ] << endl ; }"
      ],
      "err_line": 24,
      "err_msg": "expected ‘:’ before ‘;’ token"
    }
  ]
}