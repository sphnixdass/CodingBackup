{
  "meta": {
    "index": 2243,
    "hitid": "3CKVGCS3PGZ5CEJQ06YW1YTLGV6S0R",
    "workerid": "A1MJVTR0PCKBWW",
    "probid": "336A",
    "subid": "48509129"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , m = long long integers",
      "code": "long long n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while reading n and m do the following",
      "code": "while ( cin >> n >> m )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if n and m are greater than or equal to 0 then do the following",
      "code": "if ( n >= 0 && m >= 0 )",
      "indent": 2
    },
    {
      "line": 4,
      "text": "output 0 , ( n + m ) , , ( n + m ) , 0",
      "code": "cout << \" 0 \" << ( n + m ) << \" \" << ( n + m ) << \" 0 \" << endl ;",
      "indent": 3
    },
    {
      "line": 5,
      "text": "else",
      "code": "else if ( n < 0 && m >= 0 )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set long long a to abs ( n )",
      "code": "long long a = abs ( n ) ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "output - , ( a + m ) , 0 0 , ( m + a )",
      "code": "cout << \" - \" << ( a + m ) << \" 0 0 \" << ( m + a ) << endl ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else if ( n >= 0 && m < 0 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set long long a to abs ( m )",
      "code": "long long a = abs ( m ) ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "output 0 - , ( n + a ) , , ( n + a ) , 0",
      "code": "cout << \" 0 - \" << ( n + a ) << \" \" << ( n + a ) << \" 0 \" << endl ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "output - , ( abs ( n ) + abs ( m ) ) , 0 0 - , ( abs ( n ) + abs ( m ) )",
      "code": "cout << \" - \" << ( abs ( n ) + abs ( m ) ) << \" 0 0 - \" << ( abs ( n ) + abs ( m ) ) << endl ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "else"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "else"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 12,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n >> m ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( n >= 0 && m >= 0 )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "else ;"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cout << \" - ( a + m ) , 0 << ( m + a ) << \" \\n \" ;"
      ],
      "err_line": 7,
      "err_msg": "stray ‘\\’ in program"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "else ;"
      ],
      "err_line": 11,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cout << 0 - ( n + a ) , ( n + a ) , 0 ) << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( n ) ) << endl ;"
      ],
      "err_line": 12,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "else"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        5,
        7
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "else",
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        8
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "else",
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "else"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        10
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "else",
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        12
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "else",
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5,
        8
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "else",
        "else"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        5,
        8,
        10
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "else",
        "else",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        5,
        8,
        12
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "else",
        "else",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 12,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5,
        10
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "else",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        5,
        10,
        12
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "else",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 12,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5,
        12
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "else",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 12,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        7,
        8
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "else"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        7,
        8,
        10
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "else",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        7,
        8,
        12
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "else",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        7,
        10
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        7,
        10,
        12
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        7,
        12
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "else"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        8,
        10
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "else",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        8,
        10,
        12
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "else",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 12,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        8,
        12
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "else",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 12,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        4,
        10,
        12
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 12,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "cout << 0 << ( n + m ) , ( n + m ) , 0 << endl ;",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 12,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "else",
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        7,
        8
      ],
      "mod_code": [
        "else",
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "else"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        7,
        8,
        10
      ],
      "mod_code": [
        "else",
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "else",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        7,
        8,
        12
      ],
      "mod_code": [
        "else",
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "else",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        7,
        10
      ],
      "mod_code": [
        "else",
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        7,
        10,
        12
      ],
      "mod_code": [
        "else",
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        7,
        12
      ],
      "mod_code": [
        "else",
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "else",
        "else"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        8,
        10
      ],
      "mod_code": [
        "else",
        "else",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        8,
        10,
        12
      ],
      "mod_code": [
        "else",
        "else",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 12,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        8,
        12
      ],
      "mod_code": [
        "else",
        "else",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 12,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "else",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;"
      ],
      "err_line": 8,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        10,
        12
      ],
      "mod_code": [
        "else",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 12,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "else",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 12,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "else"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7,
        8,
        10
      ],
      "mod_code": [
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "else",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7,
        8,
        10,
        12
      ],
      "mod_code": [
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "else",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7,
        8,
        12
      ],
      "mod_code": [
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "else",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7,
        10,
        12
      ],
      "mod_code": [
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "cout << \" - ( a + m ) , 0 << ( m + a ) << endl ;",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "else",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        10,
        12
      ],
      "mod_code": [
        "else",
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 12,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "else",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 12,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "cout << 0 << ( n + a ) , ( n + a ) , 0 ) << endl ;",
        "cout << \" - ( abs ( n ) + abs ( m ) ) , ( abs ( n ) + abs ( m ) + abs ( m ) ) << endl ;"
      ],
      "err_line": 12,
      "err_msg": "missing terminating \" character"
    }
  ]
}