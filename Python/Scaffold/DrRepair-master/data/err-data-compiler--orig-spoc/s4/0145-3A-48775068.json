{
  "meta": {
    "index": 145,
    "hitid": "371Q3BEXDH32EZPG40BO7XW7X0FSZ4",
    "workerid": "AIWEXPJAU66D9",
    "probid": "3A",
    "subid": "48775068"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a and b = strings",
      "code": "string a , b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a and b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare long long v1 = abs ( a [ 0 ] - b [ 0 ] ) and v2 = abs ( a [ 1 ] - b [ 1 ] ) ;",
      "code": "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) , v2 = abs ( a [ 1 ] - b [ 1 ] ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print v1 + v2 - min of v1 and v2 and a new line",
      "code": "cout << v1 + v2 - min ( v1 , v2 ) << endl ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare characters called c and d",
      "code": "char c , d ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if a [ 0 ] is greater than b [ 0 ]",
      "code": "if ( a [ 0 ] > b [ 0 ] )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "c = ' L '",
      "code": "c = ' L ' ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 9,
      "text": "c = ' R '",
      "code": "c = ' R ' ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if a [ 1 ] is greater than b [ 1 ]",
      "code": "if ( a [ 1 ] > b [ 1 ] )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "set value of d to ' D '",
      "code": "d = ' D ' ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "set value of d to ' U '",
      "code": "d = ' U ' ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "while v1 > 0 or v2 > 0",
      "code": "while ( v1 > 0 || v2 > 0 )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if v1 is greater than 0",
      "code": "if ( v1 > 0 )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print c",
      "code": "cout << c ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "decrease v1 by one",
      "code": "v1 -- ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if v2 is greater than 0",
      "code": "if ( v2 > 0 )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print d",
      "code": "cout << d ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "decrease v2",
      "code": "v2 -- ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "a >> a >> b ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "char c = d ;"
      ],
      "err_line": 5,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "* d = ' D ' ;"
      ],
      "err_line": 12,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘char’)"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "* d = ' U ' ;"
      ],
      "err_line": 14,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘char’)"
    },
    {
      "mod_line": [
        18,
        22,
        16,
        3
      ],
      "mod_code": [
        "cout << c << endl ;",
        "cout << d << endl ;",
        "while ( v1 > 0 || v1 > 0 )",
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        18,
        22,
        21,
        3
      ],
      "mod_code": [
        "cout << c << endl ;",
        "cout << d << endl ;",
        "if ( v2 >= 0 )",
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        18,
        22,
        3
      ],
      "mod_code": [
        "cout << c << endl ;",
        "cout << d << endl ;",
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        18,
        22,
        16,
        3
      ],
      "mod_code": [
        "cout << c << endl ;",
        "cout << d << \" \\n \" ;",
        "while ( v1 > 0 || v1 > 0 )",
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        18,
        22,
        21,
        3
      ],
      "mod_code": [
        "cout << c << endl ;",
        "cout << d << \" \\n \" ;",
        "if ( v2 >= 0 )",
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        18,
        22,
        3
      ],
      "mod_code": [
        "cout << c << endl ;",
        "cout << d << \" \\n \" ;",
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        18,
        16,
        21,
        3
      ],
      "mod_code": [
        "cout << c << endl ;",
        "while ( v1 > 0 || v1 > 0 )",
        "if ( v2 >= 0 )",
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        18,
        16,
        3
      ],
      "mod_code": [
        "cout << c << endl ;",
        "while ( v1 > 0 || v1 > 0 )",
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        18,
        21,
        3
      ],
      "mod_code": [
        "cout << c << endl ;",
        "if ( v2 >= 0 )",
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        18,
        3
      ],
      "mod_code": [
        "cout << c << endl ;",
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        16,
        21,
        3
      ],
      "mod_code": [
        "cout << d << endl ;",
        "while ( v1 > 0 || v1 > 0 )",
        "if ( v2 >= 0 )",
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        16,
        3
      ],
      "mod_code": [
        "cout << d << endl ;",
        "while ( v1 > 0 || v1 > 0 )",
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        21,
        3
      ],
      "mod_code": [
        "cout << d << endl ;",
        "if ( v2 >= 0 )",
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        3
      ],
      "mod_code": [
        "cout << d << endl ;",
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        16,
        21,
        3
      ],
      "mod_code": [
        "cout << d << \" \\n \" ;",
        "while ( v1 > 0 || v1 > 0 )",
        "if ( v2 >= 0 )",
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        16,
        3
      ],
      "mod_code": [
        "cout << d << \" \\n \" ;",
        "while ( v1 > 0 || v1 > 0 )",
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        21,
        3
      ],
      "mod_code": [
        "cout << d << \" \\n \" ;",
        "if ( v2 >= 0 )",
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        3
      ],
      "mod_code": [
        "cout << d << \" \\n \" ;",
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        16,
        21,
        3
      ],
      "mod_code": [
        "while ( v1 > 0 || v1 > 0 )",
        "if ( v2 >= 0 )",
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        16,
        3
      ],
      "mod_code": [
        "while ( v1 > 0 || v1 > 0 )",
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        21,
        3
      ],
      "mod_code": [
        "if ( v2 >= 0 )",
        "long long v1 = abs ( a [ 0 ] - b [ 0 ] ) = abs ( a [ 1 ] - b [ 1 ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    }
  ]
}