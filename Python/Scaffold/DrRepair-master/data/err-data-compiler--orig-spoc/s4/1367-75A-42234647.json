{
  "meta": {
    "index": 1367,
    "hitid": "3Y3N5A7N4G3ZBE26OHDJHHOZZWBMY7",
    "workerid": "A1APYLD4DUK33J",
    "probid": "75A",
    "subid": "42234647"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare inline add with strings a , b as arguments , returning string",
      "code": "inline string add ( string a , string b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer i",
      "code": "int i ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create string ans with ans = \" \"",
      "code": "string ans = \" \" ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer cry with cry = 0",
      "code": "int cry = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to maximum of ( size of a and size of b ) + 1 exclusive",
      "code": "for ( i = 0 ; i < max ( a . size ( ) , b . size ( ) ) + 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create integers ta , tb",
      "code": "int ta , tb ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if i is greater than or equal to size of a",
      "code": "if ( i >= a . size ( ) )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set ta to 0",
      "code": "ta = 0 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set ta to a [ i ] - ' 0 '",
      "code": "ta = a [ i ] - ' 0 ' ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if i is greater than or equal to size of b",
      "code": "if ( i >= b . size ( ) )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set tb to 0",
      "code": "tb = 0 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set tb to b [ i ] - ' 0 '",
      "code": "tb = b [ i ] - ' 0 ' ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "create integer p with p = ta + tb + cry",
      "code": "int p = ta + tb + cry ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "set cry to p / 10",
      "code": "cry = p / 10 ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set p to p % 10",
      "code": "p %= 10 ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "increment ans by ' 0 ' + p",
      "code": "ans += ' 0 ' + p ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if ans [ size of ans - 1 ] is 0 , set ans to substring of ans from 0 to size of ans - 1 is true",
      "code": "if ( ans [ ans . size ( ) - 1 ] == ' 0 ' ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "return ans from function",
      "code": "return ans ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 22,
      "text": "declare inline era with string p as argument , returning string",
      "code": "inline string era ( string p )",
      "indent": 0
    },
    {
      "line": 23,
      "text": "for i = 0 to size of p exclusive",
      "code": "for ( int i = 0 ; i < p . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "if p [ i ] is ' 0 '",
      "code": "if ( p [ i ] == ' 0 ' )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "set p to ( substring of p from 0 to i ) + ( substring of p from i to 1 )",
      "code": "p = p . substr ( 0 , i ) + p . substr ( i + 1 ) ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "decrement i",
      "code": "i -- ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "return p from function",
      "code": "return p ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 32,
      "text": "create strings a , b , c",
      "code": "string a , b , c ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "read a read b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "reverse element order from beginning of a to end of a",
      "code": "reverse ( a . begin ( ) , a . end ( ) ) ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "reverse element order from beginning of b to end of b",
      "code": "reverse ( b . begin ( ) , b . end ( ) ) ;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "set c to result of run add with a , b as arguments",
      "code": "c = add ( a , b ) ;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "set a to result of run era with a as argument",
      "code": "a = era ( a ) ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "set b to result of run era with b as argument",
      "code": "b = era ( b ) ;",
      "indent": 1
    },
    {
      "line": 39,
      "text": "set c to result of run era with c as argument",
      "code": "c = era ( c ) ;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "if result of run add with ( a , b ) as arguments is c",
      "code": "if ( add ( a , b ) == c )",
      "indent": 1
    },
    {
      "line": 41,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 44,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 1
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;"
      ],
      "err_line": 25,
      "err_msg": "invalid cast from type ‘std::__cxx11::basic_string<char>’ to type ‘int’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cry = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "‘cry’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "int p += tb + cry ;"
      ],
      "err_line": 14,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . substr ( 0 ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "return ans ans ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘ans’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "inline string era ( string p ) ;"
      ],
      "err_line": 23,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "for ( i = 0 ; i < p . size ( ) ; i ++ )"
      ],
      "err_line": 23,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "p = ( int ) p . substr ( 0 , i ) + ( int ) p . substr ( i , 1 ) ;"
      ],
      "err_line": 25,
      "err_msg": "invalid cast from type ‘std::__cxx11::basic_string<char>’ to type ‘int’"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "string a , b , c , c ;"
      ],
      "err_line": 32,
      "err_msg": "redeclaration of ‘std::__cxx11::string c’"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "a >> a >> b ;"
      ],
      "err_line": 33,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "a = era ( ) ;"
      ],
      "err_line": 37,
      "err_msg": "too few arguments to function ‘std::__cxx11::string era(std::__cxx11::string)’"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "b = era ( ) ;"
      ],
      "err_line": 38,
      "err_msg": "too few arguments to function ‘std::__cxx11::string era(std::__cxx11::string)’"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "c = era ( ) ;"
      ],
      "err_line": 39,
      "err_msg": "too few arguments to function ‘std::__cxx11::string era(std::__cxx11::string)’"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "if ( ! add ( a , b ) )"
      ],
      "err_line": 40,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        19,
        25
      ],
      "mod_code": [
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;"
      ],
      "err_line": 25,
      "err_msg": "invalid cast from type ‘std::__cxx11::basic_string<char>’ to type ‘int’"
    },
    {
      "mod_line": [
        15,
        19,
        25,
        37
      ],
      "mod_code": [
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "a = era ( ) ;"
      ],
      "err_line": 25,
      "err_msg": "invalid cast from type ‘std::__cxx11::basic_string<char>’ to type ‘int’"
    },
    {
      "mod_line": [
        15,
        19,
        25,
        17
      ],
      "mod_code": [
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "ans += ' y ' + p ;"
      ],
      "err_line": 25,
      "err_msg": "invalid cast from type ‘std::__cxx11::basic_string<char>’ to type ‘int’"
    },
    {
      "mod_line": [
        15,
        19,
        25,
        0
      ],
      "mod_code": [
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        19,
        37
      ],
      "mod_code": [
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "a = era ( ) ;"
      ],
      "err_line": 37,
      "err_msg": "too few arguments to function ‘std::__cxx11::string era(std::__cxx11::string)’"
    },
    {
      "mod_line": [
        15,
        19,
        37,
        17
      ],
      "mod_code": [
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "a = era ( ) ;",
        "ans += ' y ' + p ;"
      ],
      "err_line": 37,
      "err_msg": "too few arguments to function ‘std::__cxx11::string era(std::__cxx11::string)’"
    },
    {
      "mod_line": [
        15,
        19,
        37,
        0
      ],
      "mod_code": [
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "a = era ( ) ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        19,
        17,
        0
      ],
      "mod_code": [
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "ans += ' y ' + p ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        19,
        0
      ],
      "mod_code": [
        "cry /= 10 ;",
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        25
      ],
      "mod_code": [
        "cry /= 10 ;",
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;"
      ],
      "err_line": 25,
      "err_msg": "invalid cast from type ‘std::__cxx11::basic_string<char>’ to type ‘int’"
    },
    {
      "mod_line": [
        15,
        25,
        37
      ],
      "mod_code": [
        "cry /= 10 ;",
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "a = era ( ) ;"
      ],
      "err_line": 25,
      "err_msg": "invalid cast from type ‘std::__cxx11::basic_string<char>’ to type ‘int’"
    },
    {
      "mod_line": [
        15,
        25,
        37,
        17
      ],
      "mod_code": [
        "cry /= 10 ;",
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "a = era ( ) ;",
        "ans += ' y ' + p ;"
      ],
      "err_line": 25,
      "err_msg": "invalid cast from type ‘std::__cxx11::basic_string<char>’ to type ‘int’"
    },
    {
      "mod_line": [
        15,
        25,
        37,
        0
      ],
      "mod_code": [
        "cry /= 10 ;",
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "a = era ( ) ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        25,
        17
      ],
      "mod_code": [
        "cry /= 10 ;",
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "ans += ' y ' + p ;"
      ],
      "err_line": 25,
      "err_msg": "invalid cast from type ‘std::__cxx11::basic_string<char>’ to type ‘int’"
    },
    {
      "mod_line": [
        15,
        25,
        17,
        0
      ],
      "mod_code": [
        "cry /= 10 ;",
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "ans += ' y ' + p ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        25,
        0
      ],
      "mod_code": [
        "cry /= 10 ;",
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        37
      ],
      "mod_code": [
        "cry /= 10 ;",
        "a = era ( ) ;"
      ],
      "err_line": 37,
      "err_msg": "too few arguments to function ‘std::__cxx11::string era(std::__cxx11::string)’"
    },
    {
      "mod_line": [
        15,
        37,
        17
      ],
      "mod_code": [
        "cry /= 10 ;",
        "a = era ( ) ;",
        "ans += ' y ' + p ;"
      ],
      "err_line": 37,
      "err_msg": "too few arguments to function ‘std::__cxx11::string era(std::__cxx11::string)’"
    },
    {
      "mod_line": [
        15,
        37,
        17,
        0
      ],
      "mod_code": [
        "cry /= 10 ;",
        "a = era ( ) ;",
        "ans += ' y ' + p ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        37,
        0
      ],
      "mod_code": [
        "cry /= 10 ;",
        "a = era ( ) ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        17,
        0
      ],
      "mod_code": [
        "cry /= 10 ;",
        "ans += ' y ' + p ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        0
      ],
      "mod_code": [
        "cry /= 10 ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        25
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;"
      ],
      "err_line": 25,
      "err_msg": "invalid cast from type ‘std::__cxx11::basic_string<char>’ to type ‘int’"
    },
    {
      "mod_line": [
        19,
        25,
        37
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "a = era ( ) ;"
      ],
      "err_line": 25,
      "err_msg": "invalid cast from type ‘std::__cxx11::basic_string<char>’ to type ‘int’"
    },
    {
      "mod_line": [
        19,
        25,
        37,
        17
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "a = era ( ) ;",
        "ans += ' y ' + p ;"
      ],
      "err_line": 25,
      "err_msg": "invalid cast from type ‘std::__cxx11::basic_string<char>’ to type ‘int’"
    },
    {
      "mod_line": [
        19,
        25,
        37,
        0
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "a = era ( ) ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        25,
        17
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "ans += ' y ' + p ;"
      ],
      "err_line": 25,
      "err_msg": "invalid cast from type ‘std::__cxx11::basic_string<char>’ to type ‘int’"
    },
    {
      "mod_line": [
        19,
        25,
        17,
        0
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "ans += ' y ' + p ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        25,
        0
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        37
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "a = era ( ) ;"
      ],
      "err_line": 37,
      "err_msg": "too few arguments to function ‘std::__cxx11::string era(std::__cxx11::string)’"
    },
    {
      "mod_line": [
        19,
        37,
        17
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "a = era ( ) ;",
        "ans += ' y ' + p ;"
      ],
      "err_line": 37,
      "err_msg": "too few arguments to function ‘std::__cxx11::string era(std::__cxx11::string)’"
    },
    {
      "mod_line": [
        19,
        37,
        17,
        0
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "a = era ( ) ;",
        "ans += ' y ' + p ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        37,
        0
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "a = era ( ) ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        17,
        0
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "ans += ' y ' + p ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        19,
        0
      ],
      "mod_code": [
        "if ( ans [ ans . size ( ) - 1 ] == 0 ) ans = ans . substr ( 0 , ans . size ( ) - 1 ) ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        37
      ],
      "mod_code": [
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "a = era ( ) ;"
      ],
      "err_line": 25,
      "err_msg": "invalid cast from type ‘std::__cxx11::basic_string<char>’ to type ‘int’"
    },
    {
      "mod_line": [
        25,
        37,
        17
      ],
      "mod_code": [
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "a = era ( ) ;",
        "ans += ' y ' + p ;"
      ],
      "err_line": 25,
      "err_msg": "invalid cast from type ‘std::__cxx11::basic_string<char>’ to type ‘int’"
    },
    {
      "mod_line": [
        25,
        37,
        17,
        0
      ],
      "mod_code": [
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "a = era ( ) ;",
        "ans += ' y ' + p ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        37,
        0
      ],
      "mod_code": [
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "a = era ( ) ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        17
      ],
      "mod_code": [
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "ans += ' y ' + p ;"
      ],
      "err_line": 25,
      "err_msg": "invalid cast from type ‘std::__cxx11::basic_string<char>’ to type ‘int’"
    },
    {
      "mod_line": [
        25,
        17,
        0
      ],
      "mod_code": [
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "ans += ' y ' + p ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        25,
        0
      ],
      "mod_code": [
        "p = ( int ) p . substr ( 0 , i ) + p . substr ( i , 1 ) ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        37,
        17
      ],
      "mod_code": [
        "a = era ( ) ;",
        "ans += ' y ' + p ;"
      ],
      "err_line": 37,
      "err_msg": "too few arguments to function ‘std::__cxx11::string era(std::__cxx11::string)’"
    },
    {
      "mod_line": [
        37,
        17,
        0
      ],
      "mod_code": [
        "a = era ( ) ;",
        "ans += ' y ' + p ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        37,
        0
      ],
      "mod_code": [
        "a = era ( ) ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        17,
        0
      ],
      "mod_code": [
        "ans += ' y ' + p ;",
        "inline string add ( string a , string b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}