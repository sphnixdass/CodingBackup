{
  "meta": {
    "index": 2505,
    "hitid": "3SNR5F7R92NF9QVO313XILP21YLIEI",
    "workerid": "AIWEXPJAU66D9",
    "probid": "94A",
    "subid": "41965840"
  },
  "lines": [
    {
      "line": 0,
      "text": "let M be a map from strings to integers",
      "code": "map < string , int > M ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "define new strings word and words",
      "code": "string word , words ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read variable word from the input",
      "code": "cin >> word ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 9 inclusive incrementing i",
      "code": "for ( int i = 0 ; i <= 9 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare new string a",
      "code": "string a ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "assign i to M [ a ]",
      "code": "M [ a ] = i ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i from 0 to exclusive adding 10 to i , while word [ i ] exists",
      "code": "for ( int i = 0 ; word [ i ] ; i += 10 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "assign the substring of word from position i , 10 charactes long , to words",
      "code": "words = word . substr ( i , 10 ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print M [ words ]",
      "code": "cout << M [ words ] ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "long long word = words . substr ( i , 10 ) ;"
      ],
      "err_line": 10,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘long long int’ in initialization"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "map < map < string , int > M ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char word , words ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i <= 9 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "char a ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘char’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "gets ( a ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "M [ ' a ' ] = i ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘char’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "long long 10 = words . substr ( i , 10 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }",
        "long long word = words . substr ( i , 10 ) ;"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        10,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }",
        "long long word = words . substr ( i , 10 ) ;",
        "cout << M [ words ] << endl ;"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        10,
        11,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }",
        "long long word = words . substr ( i , 10 ) ;",
        "cout << M [ words ] << endl ;",
        "char word , words ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        10,
        11,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }",
        "long long word = words . substr ( i , 10 ) ;",
        "cout << M [ words ] << endl ;",
        "map < map < string , int > M ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        9,
        10,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }",
        "long long word = words . substr ( i , 10 ) ;",
        "char word , words ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        10,
        2,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }",
        "long long word = words . substr ( i , 10 ) ;",
        "char word , words ;",
        "map < map < string , int > M ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        9,
        10,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }",
        "long long word = words . substr ( i , 10 ) ;",
        "map < map < string , int > M ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }",
        "cout << M [ words ] << endl ;"
      ],
      "err_line": 10,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        11,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }",
        "cout << M [ words ] << endl ;",
        "char word , words ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        11,
        2,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }",
        "cout << M [ words ] << endl ;",
        "char word , words ;",
        "map < map < string , int > M ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        9,
        11,
        2,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }",
        "cout << M [ words ] << endl ;",
        "char word , words ;",
        "long long 10 = words . substr ( i , 10 ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        11,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }",
        "cout << M [ words ] << endl ;",
        "map < map < string , int > M ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        9,
        11,
        0,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }",
        "cout << M [ words ] << endl ;",
        "map < map < string , int > M ;",
        "long long 10 = words . substr ( i , 10 ) ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        9,
        11,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }",
        "cout << M [ words ] << endl ;",
        "long long 10 = words . substr ( i , 10 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }",
        "char word , words ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        2,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }",
        "char word , words ;",
        "map < map < string , int > M ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        9,
        2,
        0,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }",
        "char word , words ;",
        "map < map < string , int > M ;",
        "long long 10 = words . substr ( i , 10 ) ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        9,
        2,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }",
        "char word , words ;",
        "long long 10 = words . substr ( i , 10 ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }",
        "map < map < string , int > M ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        9,
        0,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }",
        "map < map < string , int > M ;",
        "long long 10 = words . substr ( i , 10 ) ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "for ( int i = 0 ; i < i ; i += 10 ) { word [ i ] += 10 ; }",
        "long long 10 = words . substr ( i , 10 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "long long word = words . substr ( i , 10 ) ;",
        "cout << M [ words ] << endl ;"
      ],
      "err_line": 10,
      "err_msg": "cannot convert ‘std::__cxx11::basic_string<char>’ to ‘long long int’ in initialization"
    },
    {
      "mod_line": [
        10,
        11,
        2
      ],
      "mod_code": [
        "long long word = words . substr ( i , 10 ) ;",
        "cout << M [ words ] << endl ;",
        "char word , words ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        11,
        2,
        0
      ],
      "mod_code": [
        "long long word = words . substr ( i , 10 ) ;",
        "cout << M [ words ] << endl ;",
        "char word , words ;",
        "map < map < string , int > M ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        10,
        11,
        0
      ],
      "mod_code": [
        "long long word = words . substr ( i , 10 ) ;",
        "cout << M [ words ] << endl ;",
        "map < map < string , int > M ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "long long word = words . substr ( i , 10 ) ;",
        "char word , words ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        2,
        0
      ],
      "mod_code": [
        "long long word = words . substr ( i , 10 ) ;",
        "char word , words ;",
        "map < map < string , int > M ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "long long word = words . substr ( i , 10 ) ;",
        "map < map < string , int > M ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "cout << M [ words ] << endl ;",
        "char word , words ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        2,
        0
      ],
      "mod_code": [
        "cout << M [ words ] << endl ;",
        "char word , words ;",
        "map < map < string , int > M ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        11,
        2,
        0,
        10
      ],
      "mod_code": [
        "cout << M [ words ] << endl ;",
        "char word , words ;",
        "map < map < string , int > M ;",
        "long long 10 = words . substr ( i , 10 ) ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        11,
        2,
        10
      ],
      "mod_code": [
        "cout << M [ words ] << endl ;",
        "char word , words ;",
        "long long 10 = words . substr ( i , 10 ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        0
      ],
      "mod_code": [
        "cout << M [ words ] << endl ;",
        "map < map < string , int > M ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        11,
        0,
        10
      ],
      "mod_code": [
        "cout << M [ words ] << endl ;",
        "map < map < string , int > M ;",
        "long long 10 = words . substr ( i , 10 ) ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "cout << M [ words ] << endl ;",
        "long long 10 = words . substr ( i , 10 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "char word , words ;",
        "map < map < string , int > M ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        2,
        0,
        10
      ],
      "mod_code": [
        "char word , words ;",
        "map < map < string , int > M ;",
        "long long 10 = words . substr ( i , 10 ) ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "char word , words ;",
        "long long 10 = words . substr ( i , 10 ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "map < map < string , int > M ;",
        "long long 10 = words . substr ( i , 10 ) ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    }
  ]
}