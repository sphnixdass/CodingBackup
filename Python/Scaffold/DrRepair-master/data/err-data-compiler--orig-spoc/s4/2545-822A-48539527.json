{
  "meta": {
    "index": 2545,
    "hitid": "3WRAAIUSBJT99837MI1CPCMQ4WQAXE",
    "workerid": "A1APYLD4DUK33J",
    "probid": "822A",
    "subid": "48539527"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare facto with long long n as argument , returning long long",
      "code": "long long facto ( long long n )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if n is 0 or n is 1 , return 1 from function",
      "code": "if ( n == 0 or n == 1 ) return 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare long long array fact size 18 = { 0 }",
      "code": "long long fact [ 18 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let fact [ 0 ] be 1",
      "code": "fact [ 0 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 1 to n inclusive , let fact [ i ] be fact [ i - 1 ] * i",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) fact [ i ] = fact [ i - 1 ] * i ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "return fact [ n ] from function",
      "code": "return fact [ n ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 8,
      "text": "declare long longs a , b",
      "code": "long long a , b ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read a and b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print result of run facto with minimum of a and b as argument , \" \\ n \"",
      "code": "cout << facto ( min ( a , b ) ) << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long facto ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "fact [ 0 ] ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "return fact [ n ] = fact ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int*’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cout << facto ( a , b ) << \" \\n \" ;"
      ],
      "err_line": 10,
      "err_msg": "too many arguments to function ‘long long int facto(long long int)’"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "return fact [ n ] = fact ;",
        "cout << facto ( a , b ) << \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int*’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        0
      ],
      "mod_code": [
        "return fact [ n ] = fact ;",
        "cout << facto ( a , b ) << \" \\n \" ;",
        "long long facto ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        10,
        0,
        9
      ],
      "mod_code": [
        "return fact [ n ] = fact ;",
        "cout << facto ( a , b ) << \" \\n \" ;",
        "long long facto ( long long n ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        10,
        0,
        3
      ],
      "mod_code": [
        "return fact [ n ] = fact ;",
        "cout << facto ( a , b ) << \" \\n \" ;",
        "long long facto ( long long n ) ;",
        "fact [ 0 ] ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        10,
        9
      ],
      "mod_code": [
        "return fact [ n ] = fact ;",
        "cout << facto ( a , b ) << \" \\n \" ;",
        "a >> a >> b ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int*’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        10,
        9,
        3
      ],
      "mod_code": [
        "return fact [ n ] = fact ;",
        "cout << facto ( a , b ) << \" \\n \" ;",
        "a >> a >> b ;",
        "fact [ 0 ] ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        10,
        3
      ],
      "mod_code": [
        "return fact [ n ] = fact ;",
        "cout << facto ( a , b ) << \" \\n \" ;",
        "fact [ 0 ] ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        0
      ],
      "mod_code": [
        "return fact [ n ] = fact ;",
        "long long facto ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        0,
        9
      ],
      "mod_code": [
        "return fact [ n ] = fact ;",
        "long long facto ( long long n ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        0,
        9,
        3
      ],
      "mod_code": [
        "return fact [ n ] = fact ;",
        "long long facto ( long long n ) ;",
        "a >> a >> b ;",
        "fact [ 0 ] ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        0,
        3
      ],
      "mod_code": [
        "return fact [ n ] = fact ;",
        "long long facto ( long long n ) ;",
        "fact [ 0 ] ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "return fact [ n ] = fact ;",
        "a >> a >> b ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘long long int*’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        9,
        3
      ],
      "mod_code": [
        "return fact [ n ] = fact ;",
        "a >> a >> b ;",
        "fact [ 0 ] ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "return fact [ n ] = fact ;",
        "fact [ 0 ] ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "cout << facto ( a , b ) << \" \\n \" ;",
        "long long facto ( long long n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0,
        9
      ],
      "mod_code": [
        "cout << facto ( a , b ) << \" \\n \" ;",
        "long long facto ( long long n ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0,
        9,
        3
      ],
      "mod_code": [
        "cout << facto ( a , b ) << \" \\n \" ;",
        "long long facto ( long long n ) ;",
        "a >> a >> b ;",
        "fact [ 0 ] ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0,
        3
      ],
      "mod_code": [
        "cout << facto ( a , b ) << \" \\n \" ;",
        "long long facto ( long long n ) ;",
        "fact [ 0 ] ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "cout << facto ( a , b ) << \" \\n \" ;",
        "a >> a >> b ;"
      ],
      "err_line": 10,
      "err_msg": "too many arguments to function ‘long long int facto(long long int)’"
    },
    {
      "mod_line": [
        10,
        9,
        3
      ],
      "mod_code": [
        "cout << facto ( a , b ) << \" \\n \" ;",
        "a >> a >> b ;",
        "fact [ 0 ] ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "cout << facto ( a , b ) << \" \\n \" ;",
        "fact [ 0 ] ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "long long facto ( long long n ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        3
      ],
      "mod_code": [
        "long long facto ( long long n ) ;",
        "a >> a >> b ;",
        "fact [ 0 ] ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "long long facto ( long long n ) ;",
        "fact [ 0 ] ] = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "a >> a >> b ;",
        "fact [ 0 ] ] = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘]’ token"
    }
  ]
}