{
  "meta": {
    "index": 2334,
    "hitid": "3511RHPADV868V8ZAAKA98GDXRXRLA",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "464A",
    "subid": "48556722"
  },
  "lines": [
    {
      "line": 0,
      "text": "n , p = integers",
      "code": "int n , p ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = array of 1005 characters",
      "code": "char s [ 1005 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "in the function get_ans that takes integer pos and returns bool",
      "code": "bool get_ans ( int pos )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "if pos is n , return true",
      "code": "if ( pos == n ) return true ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "iterate until s [ pos ] - ' a ' < p and increment s [ pos ]",
      "code": "for ( ; s [ pos ] - ' a ' < p ; s [ pos ] ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if pos and s [ pos - 1 ] is s [ pos ] , continue next iteration",
      "code": "if ( pos && s [ pos - 1 ] == s [ pos ] ) continue ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if pos > 1 and s [ pos - 2 ] is s [ pos ] , continue next iteration",
      "code": "if ( pos > 1 && s [ pos - 2 ] == s [ pos ] ) continue ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if get_ans on pos + 1 , return 1",
      "code": "if ( get_ans ( pos + 1 ) ) return 1 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "s [ pos ] = a",
      "code": "s [ pos ] = ' a ' ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 13,
      "text": "read n and p",
      "code": "cin >> n >> p ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "increment s [ strlen ( s ) - 1 ]",
      "code": "++ s [ strlen ( s ) - 1 ] ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if get_ans ( 0 )",
      "code": "if ( get_ans ( 0 ) )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print s",
      "code": "cout << s << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print NO",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) { s [ pos ] ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘find’ in ‘get_ans’, which is of non-class type ‘bool(int)’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "s [ pos ] = a ;"
      ],
      "err_line": 9,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "bool get_ans ( int pos ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) s [ pos ] ++ ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 13,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘char [1005]’ and ‘char [1005]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( get_ans ( i ) )"
      ],
      "err_line": 16,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) { s [ pos ] ++ ; }",
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4,
        7,
        9
      ],
      "mod_code": [
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) { s [ pos ] ++ ; }",
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;",
        "s [ pos ] = a ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4,
        7,
        9,
        17
      ],
      "mod_code": [
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) { s [ pos ] ++ ; }",
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;",
        "s [ pos ] = a ;",
        "cout << s ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4,
        7,
        9,
        13
      ],
      "mod_code": [
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) { s [ pos ] ++ ; }",
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;",
        "s [ pos ] = a ;",
        "cin >> n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4,
        7,
        17
      ],
      "mod_code": [
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) { s [ pos ] ++ ; }",
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;",
        "cout << s ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4,
        7,
        17,
        13
      ],
      "mod_code": [
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) { s [ pos ] ++ ; }",
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;",
        "cout << s ;",
        "cin >> n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4,
        7,
        13
      ],
      "mod_code": [
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) { s [ pos ] ++ ; }",
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;",
        "cin >> n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) { s [ pos ] ++ ; }",
        "s [ pos ] = a ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4,
        9,
        17
      ],
      "mod_code": [
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) { s [ pos ] ++ ; }",
        "s [ pos ] = a ;",
        "cout << s ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4,
        9,
        17,
        13
      ],
      "mod_code": [
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) { s [ pos ] ++ ; }",
        "s [ pos ] = a ;",
        "cout << s ;",
        "cin >> n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4,
        9,
        13
      ],
      "mod_code": [
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) { s [ pos ] ++ ; }",
        "s [ pos ] = a ;",
        "cin >> n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4,
        17
      ],
      "mod_code": [
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) { s [ pos ] ++ ; }",
        "cout << s ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4,
        17,
        13
      ],
      "mod_code": [
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) { s [ pos ] ++ ; }",
        "cout << s ;",
        "cin >> n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) { s [ pos ] ++ ; }",
        "cin >> n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;",
        "s [ pos ] = a ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘find’ in ‘get_ans’, which is of non-class type ‘bool(int)’"
    },
    {
      "mod_line": [
        7,
        9,
        4
      ],
      "mod_code": [
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;",
        "s [ pos ] = a ;",
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) s [ pos ] ++ ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        7,
        9,
        4,
        17
      ],
      "mod_code": [
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;",
        "s [ pos ] = a ;",
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) s [ pos ] ++ ;",
        "cout << s ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        7,
        9,
        4,
        13
      ],
      "mod_code": [
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;",
        "s [ pos ] = a ;",
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) s [ pos ] ++ ;",
        "cin >> n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        7,
        9,
        17
      ],
      "mod_code": [
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;",
        "s [ pos ] = a ;",
        "cout << s ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘find’ in ‘get_ans’, which is of non-class type ‘bool(int)’"
    },
    {
      "mod_line": [
        7,
        9,
        17,
        13
      ],
      "mod_code": [
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;",
        "s [ pos ] = a ;",
        "cout << s ;",
        "cin >> n >> k ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘find’ in ‘get_ans’, which is of non-class type ‘bool(int)’"
    },
    {
      "mod_line": [
        7,
        9,
        13
      ],
      "mod_code": [
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;",
        "s [ pos ] = a ;",
        "cin >> n >> k ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘find’ in ‘get_ans’, which is of non-class type ‘bool(int)’"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;",
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) s [ pos ] ++ ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        7,
        4,
        17
      ],
      "mod_code": [
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;",
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) s [ pos ] ++ ;",
        "cout << s ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        7,
        4,
        17,
        13
      ],
      "mod_code": [
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;",
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) s [ pos ] ++ ;",
        "cout << s ;",
        "cin >> n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        7,
        4,
        13
      ],
      "mod_code": [
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;",
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) s [ pos ] ++ ;",
        "cin >> n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        7,
        17
      ],
      "mod_code": [
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;",
        "cout << s ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘find’ in ‘get_ans’, which is of non-class type ‘bool(int)’"
    },
    {
      "mod_line": [
        7,
        17,
        13
      ],
      "mod_code": [
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;",
        "cout << s ;",
        "cin >> n >> k ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘find’ in ‘get_ans’, which is of non-class type ‘bool(int)’"
    },
    {
      "mod_line": [
        7,
        13
      ],
      "mod_code": [
        "if ( get_ans . find ( pos + 1 ) ) return 1 ;",
        "cin >> n >> k ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘find’ in ‘get_ans’, which is of non-class type ‘bool(int)’"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "s [ pos ] = a ;",
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) s [ pos ] ++ ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        9,
        4,
        17
      ],
      "mod_code": [
        "s [ pos ] = a ;",
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) s [ pos ] ++ ;",
        "cout << s ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        9,
        4,
        17,
        13
      ],
      "mod_code": [
        "s [ pos ] = a ;",
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) s [ pos ] ++ ;",
        "cout << s ;",
        "cin >> n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        9,
        4,
        13
      ],
      "mod_code": [
        "s [ pos ] = a ;",
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) s [ pos ] ++ ;",
        "cin >> n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        9,
        17
      ],
      "mod_code": [
        "s [ pos ] = a ;",
        "cout << s ;"
      ],
      "err_line": 9,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        17,
        13
      ],
      "mod_code": [
        "s [ pos ] = a ;",
        "cout << s ;",
        "cin >> n >> k ;"
      ],
      "err_line": 9,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "s [ pos ] = a ;",
        "cin >> n >> k ;"
      ],
      "err_line": 9,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        17
      ],
      "mod_code": [
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) s [ pos ] ++ ;",
        "cout << s ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4,
        17,
        13
      ],
      "mod_code": [
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) s [ pos ] ++ ;",
        "cout << s ;",
        "cin >> n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "for ( ; s [ pos ] - ' a ' < p ; s ++ ) s [ pos ] ++ ;",
        "cin >> n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        17,
        13
      ],
      "mod_code": [
        "cout << s ;",
        "cin >> n >> k ;"
      ],
      "err_line": 13,
      "err_msg": "‘k’ was not declared in this scope"
    }
  ]
}