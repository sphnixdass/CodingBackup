{
  "meta": {
    "index": 2353,
    "hitid": "3TL87MO8CMJ9553QJFKGSJ2UU3MFL3",
    "workerid": "A1HKYY6XI2OHO1",
    "probid": "464A",
    "subid": "47184793"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare two integer variables , n and p",
      "code": "int n , p ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare a string s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create function relax that takes an integer pos and char st and returns a boolean value",
      "code": "bool relax ( int pos , char st )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "initialize i to the value of st and loop while it ' s less or equal to the values of p plus the value of letter a minus one",
      "code": "for ( char i = st ; i <= p + ' a ' - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if i equals the character in string s one from the end , go to next loop iteration",
      "code": "if ( i == s [ pos - 1 ] ) { continue ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if i equals the character in string s that ' s two from the end , go to next loop iteration",
      "code": "if ( i == s [ pos - 2 ] ) { continue ; }",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set s at current pos to i",
      "code": "s [ pos ] = i ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "exit loop returning a true value",
      "code": "return true ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "exit function relax returning false",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 12,
      "text": "read three values from input into n p and s",
      "code": "cin >> n >> p >> s ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for ed to length of n - 1 inclusive",
      "code": "for ( int ed = n - 1 ; ed >= 0 ; ed -- )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if the value of calling the relax function with pos set to ed and char st set to s [ ed ] plus one is true",
      "code": "if ( relax ( ed , s [ ed ] + 1 ) )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "create boolean variable succ and set it to true",
      "code": "bool succ = true ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "set ne equal to ed plus 1 and iterate while ne is less than n",
      "code": "for ( int ne = ed + 1 ; ne < n ; ne ++ )",
      "indent": 3
    },
    {
      "line": 17,
      "text": "if ne and ' a ' passed to relax results in false",
      "code": "if ( ! relax ( ne , ' a ' ) )",
      "indent": 4
    },
    {
      "line": 18,
      "text": "set succ to false",
      "code": "succ = false ;",
      "indent": 5
    },
    {
      "line": 19,
      "text": "exit loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 21,
      "text": "if succ is true",
      "code": "if ( succ )",
      "indent": 3
    },
    {
      "line": 22,
      "text": "print the value of s and a new line",
      "code": "cout << s << endl ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "print NO and a new line",
      "code": "cout << \" NO\\n \" ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n , n , p ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "s [ current ] = i ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 14,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 17,
      "err_msg": "assignment of function ‘bool relax(int, char)’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n , p , p ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int p’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "vector < string > s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>’)"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "bool relax ( int st , char st )"
      ],
      "err_line": 2,
      "err_msg": "conflicting declaration ‘char st’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( i == end ) continue ;"
      ],
      "err_line": 5,
      "err_msg": "‘end’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( ; a ; )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "relax = false ;"
      ],
      "err_line": 9,
      "err_msg": "assignment of function ‘bool relax(int, char)’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] >> s [ i ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( int ed = n . size ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘size’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "if ( relax ( pos ) == ed && char st == s [ ed ] )"
      ],
      "err_line": 14,
      "err_msg": "‘pos’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "bool succ set = true ;"
      ],
      "err_line": 15,
      "err_msg": "expected initializer before ‘set’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( ne && ' a ' ) freopen ( results , false ) ;"
      ],
      "err_line": 17,
      "err_msg": "‘results’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        4
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        5
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        6
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        7
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        9
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        5
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        6
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        7
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        9
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        5,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        6
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        6,
        7
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "exit ( true ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        6,
        9
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "bool relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        6,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        6,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        6,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        6,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        6,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        7
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        7,
        9
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "bool relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        7,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        7,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        7,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        7,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        7,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        9
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        9,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        9,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        9,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        9,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        9,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        12,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        12,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        12,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        12,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        13,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        13,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        13,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        14,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        14,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        16,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        3,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        5
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        5,
        6
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        5,
        7
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        5,
        9
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        5,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        5,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        5,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        5,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        5,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        6
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        6,
        7
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "exit ( true ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        6,
        9
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "bool relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        6,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        6,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        6,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        6,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        6,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        7
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        7,
        9
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "bool relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        7,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        7,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        7,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        7,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        7,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        9
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        9,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        9,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        9,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        9,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        9,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        12,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        12,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        12,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        12,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        13,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        13,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        13,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        14,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        14,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        16,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        4,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        6
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        6,
        7
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "exit ( true ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        6,
        9
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "bool relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        6,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        6,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        6,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        6,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        6,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        7
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        7,
        9
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "bool relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        7,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        7,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        7,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        7,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        7,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        9
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        9,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        9,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        9,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        9,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        9,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        12,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        12,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        12,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        12,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        13,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        13,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        13,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        14,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        14,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        16,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        5,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( i == s . end ( ) ) continue ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        7
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "exit ( true ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        7,
        9
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "bool relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        7,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        7,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        7,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        7,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        7,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        9
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "bool relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        9,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        9,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        9,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        9,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        9,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        12,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        12,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        12,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        12,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        13,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        13,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        13,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        14,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        14,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        16,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        6,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "s [ current ] = i ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7,
        9
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;",
        "bool relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7,
        9,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7,
        9,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7,
        9,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7,
        9,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7,
        9,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7,
        12,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7,
        12,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7,
        12,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7,
        12,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7,
        13,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7,
        13,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7,
        13,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7,
        14,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7,
        14,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7,
        16,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        7,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "exit ( true ) ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "int n , n , p ;",
        "bool relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        9,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        9,
        12,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        9,
        12,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        9,
        12,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        9,
        12,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        9,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        9,
        13,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        9,
        13,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        9,
        13,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        9,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        9,
        14,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        9,
        14,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        9,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        9,
        16,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        9,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "int n , n , p ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        12,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        12,
        13,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        12,
        13,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        12,
        13,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        12,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        12,
        14,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        12,
        14,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        12,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        12,
        16,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        12,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "int n , n , p ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        13,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        13,
        14,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        13,
        14,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        13,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        13,
        16,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        13,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        14,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        14,
        16,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        14,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        16
      ],
      "mod_code": [
        "int n , n , p ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        16,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        0,
        17
      ],
      "mod_code": [
        "int n , n , p ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int n’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        5
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        6
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        7
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        9
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        12
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        6
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        7
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "exit ( true ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        9
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "bool relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        12
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        7
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        9
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "bool relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        12
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        9
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        9,
        12
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        9,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        9,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        9,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        9,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        12
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        12,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        12,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        12,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        12,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        13,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        13,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        13,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        14,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        14,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        16,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ! s . end ( ) ) continue ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        6
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        7
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "exit ( true ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        9
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "bool relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        12
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        7
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        9
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "bool relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        12
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        9
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        9,
        12
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        9,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        9,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        9,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        9,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        12
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        12,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        12,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        12,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        12,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        13,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        13,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        13,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        14,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        14,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        16,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( i == s . end ( ) ) continue ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        7
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "exit ( true ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        9
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "bool relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        12
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        9
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "bool relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        9,
        12
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        9,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        9,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        9,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        9,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        12
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        12,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        12,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        12,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        12,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        13,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        13,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        13,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        14,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        14,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        16,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "s [ current ] = i ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        9
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "bool relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        12
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        12
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        12,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        12,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        12,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        12,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        13,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        13,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        13,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        14,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        14,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        16,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "exit ( true ) ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        12
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        12,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        12,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        12,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        12,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        13,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        13,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        13,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        14,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        14,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        16,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        13,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        13,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        13,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        14,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        14,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        16,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        12,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        13,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        13,
        14,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        13,
        14,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        13,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        13,
        16,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        13,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        14,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        14,
        16,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        14,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        16,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        17
      ],
      "mod_code": [
        "while ( st = getchar ( ) ) st += a [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        6
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        7
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "exit ( true ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        9
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "bool relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        12
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        13
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        7
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        9
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "bool relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        12
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        13
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        9
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        9,
        12
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        9,
        13
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        9,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        9,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        9,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        12
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        12,
        13
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        12,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        12,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        12,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        13
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        13,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        13,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        13,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        14,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        14,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        16,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        5,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( i == s . end ( ) ) continue ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        7
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "exit ( true ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        7,
        9
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "bool relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        7,
        12
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        7,
        13
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        7,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        7,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        7,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        9
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "bool relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        9,
        12
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        9,
        13
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        9,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        9,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        9,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        12
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        12,
        13
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        12,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        12,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        12,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        13
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        13,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        13,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        13,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        14,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        14,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        16,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        6,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7,
        9
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "bool relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7,
        9,
        12
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7,
        9,
        13
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7,
        9,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7,
        9,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7,
        9,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7,
        12
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7,
        12,
        13
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7,
        12,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7,
        12,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7,
        12,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7,
        13
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7,
        13,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7,
        13,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7,
        13,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7,
        14,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7,
        14,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7,
        16,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        7,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        9,
        12
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        9,
        12,
        13
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        9,
        12,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        9,
        12,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        9,
        12,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        9,
        13
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        9,
        13,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        9,
        13,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        9,
        13,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        9,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        9,
        14,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        9,
        14,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        9,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        9,
        16,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        9,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        12,
        13
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        12,
        13,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        12,
        13,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        12,
        13,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        12,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        12,
        14,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        12,
        14,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        12,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        12,
        16,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        12,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        13,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        13,
        14,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        13,
        14,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        13,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        13,
        16,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        13,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        14,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        14,
        16,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        14,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        16
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        16,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        17
      ],
      "mod_code": [
        "if ( ! s . end ( ) ) continue ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        7
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "exit ( true ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        7,
        9
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "bool relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        7,
        12
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        7,
        13
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        7,
        14
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        7,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        7,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        9
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "bool relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        9,
        12
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        9,
        13
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        9,
        14
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        9,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        9,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        12
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        12,
        13
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        12,
        14
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        12,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        12,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        13
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        13,
        14
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        13,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        13,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        14
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        14,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        14,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        16,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        6,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "s [ current ] = i ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7,
        9
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "bool relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        12
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        13
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        14
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7,
        12
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7,
        12,
        13
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7,
        12,
        14
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7,
        12,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7,
        12,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7,
        13
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7,
        13,
        14
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7,
        13,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7,
        13,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7,
        14
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7,
        14,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7,
        14,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7,
        16,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        7,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "exit ( true ) ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        9,
        12
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        9,
        12,
        13
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        9,
        12,
        14
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        9,
        12,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        9,
        12,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        9,
        13
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        9,
        13,
        14
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        9,
        13,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        9,
        13,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        9,
        14
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        9,
        14,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        9,
        14,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        9,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        9,
        16,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        9,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        12,
        13
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        12,
        13,
        14
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        12,
        13,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        12,
        13,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        12,
        14
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        12,
        14,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        12,
        14,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        12,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        12,
        16,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        12,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        13,
        14
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        13,
        14,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        13,
        14,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        13,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        13,
        16,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        13,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        14
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        14,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        14,
        16,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        14,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        16
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        16,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        5,
        17
      ],
      "mod_code": [
        "if ( i == s . end ( ) ) continue ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        9
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "bool relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        9,
        12
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        9,
        13
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        9,
        14
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        9,
        16
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        9,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        12
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        12,
        13
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        12,
        14
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        12,
        16
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        12,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        13
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        13,
        14
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        13,
        16
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        13,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        14
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        14,
        16
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        14,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        16
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        16,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "exit ( true ) ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "bool relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        12
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        12,
        13
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        12,
        14
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        12,
        16
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        12,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        13
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        13,
        14
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        13,
        16
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        13,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        14
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        14,
        16
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        14,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        16
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        16,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        13
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        13,
        14
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        13,
        16
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        13,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        14
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        14,
        16
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        14,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        16
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        16,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        14
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        14,
        16
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        14,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        16
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        16,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        16
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        16,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        16,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "s [ current ] = i ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 6,
      "err_msg": "‘current’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        12
      ],
      "mod_code": [
        "exit ( true ) ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        9,
        12,
        13
      ],
      "mod_code": [
        "exit ( true ) ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        9,
        12,
        14
      ],
      "mod_code": [
        "exit ( true ) ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        9,
        12,
        16
      ],
      "mod_code": [
        "exit ( true ) ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        9,
        12,
        17
      ],
      "mod_code": [
        "exit ( true ) ;",
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        9,
        13
      ],
      "mod_code": [
        "exit ( true ) ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        7,
        9,
        13,
        14
      ],
      "mod_code": [
        "exit ( true ) ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        7,
        9,
        13,
        16
      ],
      "mod_code": [
        "exit ( true ) ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        7,
        9,
        13,
        17
      ],
      "mod_code": [
        "exit ( true ) ;",
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        7,
        9,
        14
      ],
      "mod_code": [
        "exit ( true ) ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 14,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        14,
        16
      ],
      "mod_code": [
        "exit ( true ) ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 14,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        14,
        17
      ],
      "mod_code": [
        "exit ( true ) ;",
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 14,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        9,
        16,
        17
      ],
      "mod_code": [
        "exit ( true ) ;",
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 17,
      "err_msg": "assignment of function ‘bool relax(int, char)’"
    },
    {
      "mod_line": [
        7,
        9,
        17
      ],
      "mod_code": [
        "exit ( true ) ;",
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 17,
      "err_msg": "assignment of function ‘bool relax(int, char)’"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        12,
        13
      ],
      "mod_code": [
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        12,
        13,
        14
      ],
      "mod_code": [
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        12,
        13,
        16
      ],
      "mod_code": [
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        12,
        13,
        17
      ],
      "mod_code": [
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        12,
        14
      ],
      "mod_code": [
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        12,
        14,
        16
      ],
      "mod_code": [
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        12,
        14,
        17
      ],
      "mod_code": [
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        12,
        16
      ],
      "mod_code": [
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        12,
        16,
        17
      ],
      "mod_code": [
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        12,
        17
      ],
      "mod_code": [
        "exit ( true ) ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        13
      ],
      "mod_code": [
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        7,
        13,
        14
      ],
      "mod_code": [
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        7,
        13,
        14,
        16
      ],
      "mod_code": [
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        7,
        13,
        14,
        17
      ],
      "mod_code": [
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        7,
        13,
        16
      ],
      "mod_code": [
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        7,
        13,
        16,
        17
      ],
      "mod_code": [
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        7,
        13,
        17
      ],
      "mod_code": [
        "exit ( true ) ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        7,
        14
      ],
      "mod_code": [
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 14,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        14,
        16
      ],
      "mod_code": [
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 14,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        14,
        16,
        17
      ],
      "mod_code": [
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 14,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        14,
        17
      ],
      "mod_code": [
        "exit ( true ) ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 14,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        16,
        17
      ],
      "mod_code": [
        "exit ( true ) ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 17,
      "err_msg": "assignment of function ‘bool relax(int, char)’"
    },
    {
      "mod_line": [
        7,
        17
      ],
      "mod_code": [
        "exit ( true ) ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 17,
      "err_msg": "assignment of function ‘bool relax(int, char)’"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        12,
        13
      ],
      "mod_code": [
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        12,
        13,
        14
      ],
      "mod_code": [
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        12,
        13,
        16
      ],
      "mod_code": [
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        12,
        13,
        17
      ],
      "mod_code": [
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        12,
        14
      ],
      "mod_code": [
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        12,
        14,
        16
      ],
      "mod_code": [
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        12,
        14,
        17
      ],
      "mod_code": [
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        12,
        16
      ],
      "mod_code": [
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        12,
        16,
        17
      ],
      "mod_code": [
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        12,
        17
      ],
      "mod_code": [
        "bool relax = false ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        9,
        13,
        14
      ],
      "mod_code": [
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        9,
        13,
        14,
        16
      ],
      "mod_code": [
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        9,
        13,
        14,
        17
      ],
      "mod_code": [
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        9,
        13,
        16
      ],
      "mod_code": [
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        9,
        13,
        16,
        17
      ],
      "mod_code": [
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        9,
        13,
        17
      ],
      "mod_code": [
        "bool relax = false ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 14,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        16
      ],
      "mod_code": [
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 14,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        16,
        17
      ],
      "mod_code": [
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 14,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        17
      ],
      "mod_code": [
        "bool relax = false ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 14,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        16,
        17
      ],
      "mod_code": [
        "bool relax = false ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 17,
      "err_msg": "assignment of function ‘bool relax(int, char)’"
    },
    {
      "mod_line": [
        9,
        17
      ],
      "mod_code": [
        "bool relax = false ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 17,
      "err_msg": "assignment of function ‘bool relax(int, char)’"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        13,
        14
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        13,
        14,
        16
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        13,
        14,
        17
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        13,
        16
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        13,
        16,
        17
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        13,
        17
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        14,
        16
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        14,
        16,
        17
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        14,
        17
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        16
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        16,
        17
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        17
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> n [ i ] >> s [ i ] ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        14
      ],
      "mod_code": [
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        13,
        14,
        16
      ],
      "mod_code": [
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        13,
        14,
        16,
        17
      ],
      "mod_code": [
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        13,
        14,
        17
      ],
      "mod_code": [
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        13,
        16
      ],
      "mod_code": [
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        13,
        16,
        17
      ],
      "mod_code": [
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        13,
        17
      ],
      "mod_code": [
        "for ( int ed = n . length ( ) - 1 ; ed <= n ; ed ++ )",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘length’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        14,
        16
      ],
      "mod_code": [
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;"
      ],
      "err_line": 14,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        16,
        17
      ],
      "mod_code": [
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 14,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        17
      ],
      "mod_code": [
        "if ( ( char ) ed ) { st = s [ ed ] + one ; }",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 14,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        17
      ],
      "mod_code": [
        "const int ne = n + 1 , iterate = n ;",
        "if ( ne && ' a ' ) relax = false ;"
      ],
      "err_line": 17,
      "err_msg": "assignment of function ‘bool relax(int, char)’"
    }
  ]
}