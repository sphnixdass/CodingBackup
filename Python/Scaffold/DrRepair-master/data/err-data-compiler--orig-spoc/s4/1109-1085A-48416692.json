{
  "meta": {
    "index": 1109,
    "hitid": "3BCRDCM0ODO226SXXM5BJDC2BHLK6Y",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1085A",
    "subid": "48416692"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare string variables a and b",
      "code": "string a , b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer len = length of a",
      "code": "int len = a . size ( ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare integers left = 0 and right = len - 1",
      "code": "int left = 0 , right = len - 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = len - 1 to 0 inclusive counting down",
      "code": "for ( int i = len - 1 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if i is even",
      "code": "if ( i % 2 == 0 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set b = to a [ left ] + b and increment left",
      "code": "b = a [ left ++ ] + b ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set b = to a [ right ] + b and decrement right",
      "code": "b = a [ right -- ] + b ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print b and a new line",
      "code": "cout << b << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string a , b b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int right = 0 , right = len - 1 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int right’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = len - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        2,
        1
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "gets ( a ) ;",
        "string a , b b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        9,
        2,
        1,
        7
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "gets ( a ) ;",
        "string a , b b ;",
        "b += a [ left ] + b , left ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        9,
        2,
        1,
        5
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "gets ( a ) ;",
        "string a , b b ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        9,
        2,
        1,
        8
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "gets ( a ) ;",
        "string a , b b ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        9,
        2,
        7
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "gets ( a ) ;",
        "b += a [ left ] + b , left ++ ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        2,
        7,
        5
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "gets ( a ) ;",
        "b += a [ left ] + b , left ++ ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        2,
        7,
        8
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "gets ( a ) ;",
        "b += a [ left ] + b , left ++ ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        2,
        5
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "gets ( a ) ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        2,
        5,
        8
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "gets ( a ) ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        2,
        8
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "gets ( a ) ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "string a , b b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        9,
        1,
        7
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "string a , b b ;",
        "b += a [ left ] + b , left ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        9,
        1,
        7,
        5
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "string a , b b ;",
        "b += a [ left ] + b , left ++ ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        9,
        1,
        7,
        8
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "string a , b b ;",
        "b += a [ left ] + b , left ++ ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        9,
        1,
        5
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "string a , b b ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        9,
        1,
        5,
        8
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "string a , b b ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        9,
        1,
        8
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "string a , b b ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        9,
        7,
        5
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "b += a [ left ] + b , left ++ ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        7,
        5,
        8
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "b += a [ left ] + b , left ++ ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        7,
        8
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "b += a [ left ] + b , left ++ ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        5,
        8
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "b += a [ right ] + b , right -- ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "gets ( a ) ;",
        "string a , b b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        2,
        1,
        7
      ],
      "mod_code": [
        "gets ( a ) ;",
        "string a , b b ;",
        "b += a [ left ] + b , left ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        2,
        1,
        7,
        5
      ],
      "mod_code": [
        "gets ( a ) ;",
        "string a , b b ;",
        "b += a [ left ] + b , left ++ ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        2,
        1,
        7,
        8
      ],
      "mod_code": [
        "gets ( a ) ;",
        "string a , b b ;",
        "b += a [ left ] + b , left ++ ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        2,
        1,
        5
      ],
      "mod_code": [
        "gets ( a ) ;",
        "string a , b b ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        2,
        1,
        5,
        8
      ],
      "mod_code": [
        "gets ( a ) ;",
        "string a , b b ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        2,
        1,
        8
      ],
      "mod_code": [
        "gets ( a ) ;",
        "string a , b b ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "gets ( a ) ;",
        "b += a [ left ] + b , left ++ ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        7,
        5
      ],
      "mod_code": [
        "gets ( a ) ;",
        "b += a [ left ] + b , left ++ ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        7,
        5,
        8
      ],
      "mod_code": [
        "gets ( a ) ;",
        "b += a [ left ] + b , left ++ ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        7,
        8
      ],
      "mod_code": [
        "gets ( a ) ;",
        "b += a [ left ] + b , left ++ ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "gets ( a ) ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        5,
        8
      ],
      "mod_code": [
        "gets ( a ) ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "gets ( a ) ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "string a , b b ;",
        "b += a [ left ] + b , left ++ ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        1,
        7,
        5
      ],
      "mod_code": [
        "string a , b b ;",
        "b += a [ left ] + b , left ++ ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        1,
        7,
        5,
        8
      ],
      "mod_code": [
        "string a , b b ;",
        "b += a [ left ] + b , left ++ ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        1,
        7,
        8
      ],
      "mod_code": [
        "string a , b b ;",
        "b += a [ left ] + b , left ++ ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "string a , b b ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        1,
        5,
        8
      ],
      "mod_code": [
        "string a , b b ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "string a , b b ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "b += a [ left ] + b , left ++ ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        5,
        8
      ],
      "mod_code": [
        "b += a [ left ] + b , left ++ ;",
        "for ( i = len - 1 ; i >= 0 ; i -- )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "b += a [ left ] + b , left ++ ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "for ( i = len - 1 ; i >= 0 ; i -- )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    }
  ]
}