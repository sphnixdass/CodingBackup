{
  "meta": {
    "index": 1321,
    "hitid": "34YWR3PJ284D8V5PUG4J06ADU8YX0P",
    "workerid": "AIWEXPJAU66D9",
    "probid": "47A",
    "subid": "40818043"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let i , j , m , n and cnt be integers with cnt = 0",
      "code": "int i , j , m , n , cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "input m",
      "code": "cin >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "i = ( 8 * m ) + 1",
      "code": "i = ( 8 * m ) + 1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if square root of i * square root of i equal i",
      "code": "if ( int ( sqrt ( i ) ) * int ( sqrt ( i ) ) == i )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "{ m ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int i = ( 8 * m ) + 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "if ( sqrt ( i ) * sqrt ( i ) == i )",
        "{ m ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        4,
        2,
        3
      ],
      "mod_code": [
        "if ( sqrt ( i ) * sqrt ( i ) == i )",
        "{ m ;",
        "int i = ( 8 * m ) + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        4,
        2,
        3,
        6
      ],
      "mod_code": [
        "if ( sqrt ( i ) * sqrt ( i ) == i )",
        "{ m ;",
        "int i = ( 8 * m ) + 1 ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        2,
        6
      ],
      "mod_code": [
        "if ( sqrt ( i ) * sqrt ( i ) == i )",
        "{ m ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "if ( sqrt ( i ) * sqrt ( i ) == i )",
        "int i = ( 8 * m ) + 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        4,
        3,
        6
      ],
      "mod_code": [
        "if ( sqrt ( i ) * sqrt ( i ) == i )",
        "int i = ( 8 * m ) + 1 ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int i’"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "if ( sqrt ( i ) * sqrt ( i ) == i )",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "{ m ;",
        "int i = ( 8 * m ) + 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        3,
        6
      ],
      "mod_code": [
        "{ m ;",
        "int i = ( 8 * m ) + 1 ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "{ m ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "int i = ( 8 * m ) + 1 ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int i’"
    }
  ]
}