{
  "meta": {
    "index": 1134,
    "hitid": "3GL25Y6843OAB9CWJLRHY3HQYD8XME",
    "workerid": "A1APYLD4DUK33J",
    "probid": "86A",
    "subid": "33842744"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare power with long longs a , b as arguments , returning long long",
      "code": "long long power ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long long ans with ans = 1",
      "code": "long long ans = 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while b is true",
      "code": "while ( b )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set ans to ans * a",
      "code": "ans = ans * a ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "decrement b",
      "code": "b -- ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "return ans",
      "code": "return ans ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 9,
      "text": "create long longs l , r , l1 , r1 , ans , nol , nor , mid , x with nol = 0 , nor = 0",
      "code": "long long l , r , l1 , r1 , ans , nol = 0 , nor = 0 , mid , x ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read l read r",
      "code": "cin >> l >> r ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "set l1 to l",
      "code": "l1 = l ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "set r1 to r",
      "code": "r1 = r ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "while l is true",
      "code": "while ( l )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "increment nol",
      "code": "++ nol ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "set l to l / 10",
      "code": "l = l / 10 ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "while r is true",
      "code": "while ( r )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "increment nor",
      "code": "++ nor ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "set r to r / 10",
      "code": "r = r / 10 ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "decrement nor",
      "code": "-- nor ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "decrement nol",
      "code": "-- nol ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "if nor is greater than nol",
      "code": "if ( nor > nol )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "set mod to 4 * result of run power with 10 , nor as arguments",
      "code": "mid = 4 * power ( 10 , nor ) ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "set x to 9 * result of run power with 10 , nor as arguments",
      "code": "x = 9 * power ( 10 , nor ) ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "decrement nor",
      "code": "-- nor ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "while nor is greater than or equal to 0",
      "code": "while ( nor >= 0 )",
      "indent": 2
    },
    {
      "line": 28,
      "text": "increment mid by 9 * result of run power with 10 , nor as arguments",
      "code": "mid += 9 * power ( 10 , nor ) ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "increment x by 9 * result of run power with 10 , nor as arguments",
      "code": "x += 9 * power ( 10 , nor ) ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "decrement nor",
      "code": "-- nor ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 32,
      "text": "if r1 is greater than mid",
      "code": "if ( r1 > mid )",
      "indent": 2
    },
    {
      "line": 33,
      "text": "set ans to mid * ( x - mid )",
      "code": "ans = mid * ( x - mid ) ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 35,
      "text": "set ans to r1 * ( x - r1 )",
      "code": "ans = r1 * ( x - r1 ) ;",
      "indent": 3
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 37,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 38,
      "text": "set mid to 4 * result of run power with 10 , nor as arguments",
      "code": "mid = 4 * power ( 10 , nor ) ;",
      "indent": 2
    },
    {
      "line": 39,
      "text": "set x to 9 * result of run power with 10 , nor as arguments",
      "code": "x = 9 * power ( 10 , nor ) ;",
      "indent": 2
    },
    {
      "line": 40,
      "text": "decrement nor",
      "code": "-- nor ;",
      "indent": 2
    },
    {
      "line": 41,
      "text": "while nor is greater than or equal to 0",
      "code": "while ( nor >= 0 )",
      "indent": 2
    },
    {
      "line": 42,
      "text": "increment mid by 9 * result of run power with 10 , nor as arguments",
      "code": "mid += 9 * power ( 10 , nor ) ;",
      "indent": 3
    },
    {
      "line": 43,
      "text": "increment x by 9 * result of run power with 10 , nor as arguments",
      "code": "x += 9 * power ( 10 , nor ) ;",
      "indent": 3
    },
    {
      "line": 44,
      "text": "decrement nor",
      "code": "-- nor ;",
      "indent": 3
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 46,
      "text": "if r1 is less than or equal to mid",
      "code": "if ( r1 <= mid )",
      "indent": 2
    },
    {
      "line": 47,
      "text": "set ans to r1 * ( x - r1 )",
      "code": "ans = r1 * ( x - r1 ) ;",
      "indent": 3
    },
    {
      "line": 48,
      "text": "else if r1 is greater than mid and l1 is less than mid",
      "code": "else if ( r1 > mid && l1 < mid )",
      "indent": 2
    },
    {
      "line": 49,
      "text": "set ans to mid * ( x - mid )",
      "code": "ans = mid * ( x - mid ) ;",
      "indent": 3
    },
    {
      "line": 50,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 51,
      "text": "set ans to l1 * ( x - l1 )",
      "code": "ans = l1 * ( x - l1 ) ;",
      "indent": 3
    },
    {
      "line": 52,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 53,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 54,
      "text": "print ans print \" \\ n \"",
      "code": "cout << ans << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 55,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "mod = 4 * power ( 10 , nor ) ;"
      ],
      "err_line": 24,
      "err_msg": "‘mod’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long power ( long long a , long long b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans = 0 , nol , nol , nor , mid , x ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int l1 = l ;"
      ],
      "err_line": 11,
      "err_msg": "conflicting declaration ‘int l1’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "char r1 = r ;"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘char r1’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "if ( ch > nol )"
      ],
      "err_line": 23,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "mod = 4 * power ( power ( 10 , nor ) ) ;"
      ],
      "err_line": 24,
      "err_msg": "‘mod’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "x = 9 * power ( power ( 10 , nor ) ) ;"
      ],
      "err_line": 25,
      "err_msg": "too few arguments to function ‘long long int power(long long int, long long int)’"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "mid = 4 * power ( power ( 10 , nor ) ) ;"
      ],
      "err_line": 38,
      "err_msg": "too few arguments to function ‘long long int power(long long int, long long int)’"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "x = 9 * power ( power ( 10 , nor ) ) ;"
      ],
      "err_line": 39,
      "err_msg": "too few arguments to function ‘long long int power(long long int, long long int)’"
    },
    {
      "mod_line": [
        50
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 50,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        24
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "mod = 4 * power ( 10 , nor ) ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        24,
        12
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "mod = 4 * power ( 10 , nor ) ;",
        "char r1 = r ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        24,
        12,
        49
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "mod = 4 * power ( 10 , nor ) ;",
        "char r1 = r ;",
        "int ans = mid * ( x - mid ) ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        24,
        12,
        17
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "mod = 4 * power ( 10 , nor ) ;",
        "char r1 = r ;",
        "while ( r == true )"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        24,
        12,
        23
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "mod = 4 * power ( 10 , nor ) ;",
        "char r1 = r ;",
        "if ( ch > nol )"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        24,
        49
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "mod = 4 * power ( 10 , nor ) ;",
        "int ans = mid * ( x - mid ) ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        24,
        49,
        17
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "mod = 4 * power ( 10 , nor ) ;",
        "int ans = mid * ( x - mid ) ;",
        "while ( r == true )"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        24,
        49,
        23
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "mod = 4 * power ( 10 , nor ) ;",
        "int ans = mid * ( x - mid ) ;",
        "if ( ch > nol )"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        24,
        17
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "mod = 4 * power ( 10 , nor ) ;",
        "while ( r == true )"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        24,
        17,
        23
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "mod = 4 * power ( 10 , nor ) ;",
        "while ( r == true )",
        "if ( ch > nol )"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        24,
        23
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "mod = 4 * power ( 10 , nor ) ;",
        "if ( ch > nol )"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "char r1 = r ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        12,
        49
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "char r1 = r ;",
        "int ans = mid * ( x - mid ) ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        12,
        49,
        17
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "char r1 = r ;",
        "int ans = mid * ( x - mid ) ;",
        "while ( r == true )"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        12,
        49,
        23
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "char r1 = r ;",
        "int ans = mid * ( x - mid ) ;",
        "if ( ch > nol )"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        12,
        17
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "char r1 = r ;",
        "while ( r == true )"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        12,
        17,
        23
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "char r1 = r ;",
        "while ( r == true )",
        "if ( ch > nol )"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        12,
        23
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "char r1 = r ;",
        "if ( ch > nol )"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        49
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "int ans = mid * ( x - mid ) ;"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        49,
        17
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "int ans = mid * ( x - mid ) ;",
        "while ( r == true )"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        49,
        17,
        23
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "int ans = mid * ( x - mid ) ;",
        "while ( r == true )",
        "if ( ch > nol )"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        49,
        23
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "int ans = mid * ( x - mid ) ;",
        "if ( ch > nol )"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        17
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "while ( r == true )"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        17,
        23
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "while ( r == true )",
        "if ( ch > nol )"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        9,
        23
      ],
      "mod_code": [
        "long long l , r , l1 , r1 , ans , nol , nol , nor , mid , x = 0 ;",
        "if ( ch > nol )"
      ],
      "err_line": 9,
      "err_msg": "redeclaration of ‘long long int nol’"
    },
    {
      "mod_line": [
        24,
        12
      ],
      "mod_code": [
        "mod = 4 * power ( 10 , nor ) ;",
        "char r1 = r ;"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘char r1’"
    },
    {
      "mod_line": [
        24,
        12,
        49
      ],
      "mod_code": [
        "mod = 4 * power ( 10 , nor ) ;",
        "char r1 = r ;",
        "int ans = mid * ( x - mid ) ;"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘char r1’"
    },
    {
      "mod_line": [
        24,
        12,
        49,
        17
      ],
      "mod_code": [
        "mod = 4 * power ( 10 , nor ) ;",
        "char r1 = r ;",
        "int ans = mid * ( x - mid ) ;",
        "while ( r == true )"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘char r1’"
    },
    {
      "mod_line": [
        24,
        12,
        49,
        23
      ],
      "mod_code": [
        "mod = 4 * power ( 10 , nor ) ;",
        "char r1 = r ;",
        "int ans = mid * ( x - mid ) ;",
        "if ( ch > nol )"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘char r1’"
    },
    {
      "mod_line": [
        24,
        12,
        17
      ],
      "mod_code": [
        "mod = 4 * power ( 10 , nor ) ;",
        "char r1 = r ;",
        "while ( r == true )"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘char r1’"
    },
    {
      "mod_line": [
        24,
        12,
        17,
        23
      ],
      "mod_code": [
        "mod = 4 * power ( 10 , nor ) ;",
        "char r1 = r ;",
        "while ( r == true )",
        "if ( ch > nol )"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘char r1’"
    },
    {
      "mod_line": [
        24,
        12,
        23
      ],
      "mod_code": [
        "mod = 4 * power ( 10 , nor ) ;",
        "char r1 = r ;",
        "if ( ch > nol )"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘char r1’"
    },
    {
      "mod_line": [
        24,
        49
      ],
      "mod_code": [
        "mod = 4 * power ( 10 , nor ) ;",
        "int ans = mid * ( x - mid ) ;"
      ],
      "err_line": 24,
      "err_msg": "‘mod’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        49,
        17
      ],
      "mod_code": [
        "mod = 4 * power ( 10 , nor ) ;",
        "int ans = mid * ( x - mid ) ;",
        "while ( r == true )"
      ],
      "err_line": 24,
      "err_msg": "‘mod’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        49,
        17,
        23
      ],
      "mod_code": [
        "mod = 4 * power ( 10 , nor ) ;",
        "int ans = mid * ( x - mid ) ;",
        "while ( r == true )",
        "if ( ch > nol )"
      ],
      "err_line": 23,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        49,
        23
      ],
      "mod_code": [
        "mod = 4 * power ( 10 , nor ) ;",
        "int ans = mid * ( x - mid ) ;",
        "if ( ch > nol )"
      ],
      "err_line": 23,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        17
      ],
      "mod_code": [
        "mod = 4 * power ( 10 , nor ) ;",
        "while ( r == true )"
      ],
      "err_line": 24,
      "err_msg": "‘mod’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        17,
        23
      ],
      "mod_code": [
        "mod = 4 * power ( 10 , nor ) ;",
        "while ( r == true )",
        "if ( ch > nol )"
      ],
      "err_line": 23,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        23
      ],
      "mod_code": [
        "mod = 4 * power ( 10 , nor ) ;",
        "if ( ch > nol )"
      ],
      "err_line": 23,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        49
      ],
      "mod_code": [
        "char r1 = r ;",
        "int ans = mid * ( x - mid ) ;"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘char r1’"
    },
    {
      "mod_line": [
        12,
        49,
        17
      ],
      "mod_code": [
        "char r1 = r ;",
        "int ans = mid * ( x - mid ) ;",
        "while ( r == true )"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘char r1’"
    },
    {
      "mod_line": [
        12,
        49,
        17,
        23
      ],
      "mod_code": [
        "char r1 = r ;",
        "int ans = mid * ( x - mid ) ;",
        "while ( r == true )",
        "if ( ch > nol )"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘char r1’"
    },
    {
      "mod_line": [
        12,
        49,
        23
      ],
      "mod_code": [
        "char r1 = r ;",
        "int ans = mid * ( x - mid ) ;",
        "if ( ch > nol )"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘char r1’"
    },
    {
      "mod_line": [
        12,
        17
      ],
      "mod_code": [
        "char r1 = r ;",
        "while ( r == true )"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘char r1’"
    },
    {
      "mod_line": [
        12,
        17,
        23
      ],
      "mod_code": [
        "char r1 = r ;",
        "while ( r == true )",
        "if ( ch > nol )"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘char r1’"
    },
    {
      "mod_line": [
        12,
        23
      ],
      "mod_code": [
        "char r1 = r ;",
        "if ( ch > nol )"
      ],
      "err_line": 12,
      "err_msg": "conflicting declaration ‘char r1’"
    },
    {
      "mod_line": [
        49,
        17,
        23
      ],
      "mod_code": [
        "int ans = mid * ( x - mid ) ;",
        "while ( r == true )",
        "if ( ch > nol )"
      ],
      "err_line": 23,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        49,
        23
      ],
      "mod_code": [
        "int ans = mid * ( x - mid ) ;",
        "if ( ch > nol )"
      ],
      "err_line": 23,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        23
      ],
      "mod_code": [
        "while ( r == true )",
        "if ( ch > nol )"
      ],
      "err_line": 23,
      "err_msg": "‘ch’ was not declared in this scope"
    }
  ]
}