{
  "meta": {
    "index": 121,
    "hitid": "3KLL7H3EGDVWF66QS9AMIDC90ESVHM",
    "workerid": "AIWEXPJAU66D9",
    "probid": "3A",
    "subid": "48496579"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let x and xx be characters",
      "code": "char x , xx ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "y and yy = integers",
      "code": "int y , yy ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let c_x and c_y be characters",
      "code": "char c_x , c_y ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let d_y and d_x be integers",
      "code": "int d_y , d_x ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read x , y , xx and yy",
      "code": "cin >> x >> y >> xx >> yy ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if xx - x > = 0",
      "code": "if ( xx - x >= 0 )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "d_x = absolute value of xx - x",
      "code": "d_x = abs ( xx - x ) ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "c_x = ' R '",
      "code": "c_x = ' R ' ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 10,
      "text": "d_x = absolute value of xx - x",
      "code": "d_x = abs ( xx - x ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "c_x = ' L '",
      "code": "c_x = ' L ' ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if yy - y > = 0",
      "code": "if ( yy - y >= 0 )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "d_y = absolute value of yy - y",
      "code": "d_y = abs ( yy - y ) ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "c_y = ' U '",
      "code": "c_y = ' U ' ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 17,
      "text": "d_y = absolute value of yy - y",
      "code": "d_y = abs ( yy - y ) ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "c_y = ' D '",
      "code": "c_y = ' D ' ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "let get be integer",
      "code": "int get ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if d_x is greater than d_y",
      "code": "if ( d_x > d_y )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "get = d_x",
      "code": "get = d_x ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 24,
      "text": "set get to d_y",
      "code": "get = d_y ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print get and a new line",
      "code": "cout << get << endl ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "for integer i = 0 to get exclusive",
      "code": "for ( int i = 0 ; i < get ; ++ i )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "if i is less than d_x print c_x",
      "code": "if ( i < d_x ) { cout << c_x ; }",
      "indent": 2
    },
    {
      "line": 29,
      "text": "if i is less than d_y print c_y",
      "code": "if ( i < d_y ) { cout << c_y ; }",
      "indent": 2
    },
    {
      "line": 30,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char x , k ;"
      ],
      "err_line": 5,
      "err_msg": "‘xx’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char c_x , c_y c_y ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘c_y’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "string c_x = ' R ' ;"
      ],
      "err_line": 8,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "string c_x = ' L ' ;"
      ],
      "err_line": 11,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "string c_y = ' D ' ;"
      ],
      "err_line": 18,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "int t ;"
      ],
      "err_line": 22,
      "err_msg": "‘get’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        28,
        29,
        18
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "if ( i < d_y ) cout << c_y << endl ;",
        "string c_y = ' D ' ;"
      ],
      "err_line": 18,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        28,
        29,
        18,
        20
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "if ( i < d_y ) cout << c_y << endl ;",
        "string c_y = ' D ' ;",
        "int t ;"
      ],
      "err_line": 18,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        28,
        29,
        18,
        17
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "if ( i < d_y ) cout << c_y << endl ;",
        "string c_y = ' D ' ;",
        "int d_y = abs ( yy - y ) ;"
      ],
      "err_line": 18,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        28,
        29,
        18,
        15
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "if ( i < d_y ) cout << c_y << endl ;",
        "string c_y = ' D ' ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        28,
        29,
        20
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "if ( i < d_y ) cout << c_y << endl ;",
        "int t ;"
      ],
      "err_line": 22,
      "err_msg": "‘get’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        29,
        20,
        17
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "if ( i < d_y ) cout << c_y << endl ;",
        "int t ;",
        "int d_y = abs ( yy - y ) ;"
      ],
      "err_line": 22,
      "err_msg": "‘get’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        29,
        20,
        15
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "if ( i < d_y ) cout << c_y << endl ;",
        "int t ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        28,
        29,
        17,
        15
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "if ( i < d_y ) cout << c_y << endl ;",
        "int d_y = abs ( yy - y ) ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        28,
        29,
        15
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "if ( i < d_y ) cout << c_y << endl ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        28,
        18
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "string c_y = ' D ' ;"
      ],
      "err_line": 18,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        28,
        18,
        20
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "string c_y = ' D ' ;",
        "int t ;"
      ],
      "err_line": 18,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        28,
        18,
        20,
        17
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "string c_y = ' D ' ;",
        "int t ;",
        "int d_y = abs ( yy - y ) ;"
      ],
      "err_line": 18,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        28,
        18,
        20,
        15
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "string c_y = ' D ' ;",
        "int t ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        28,
        18,
        17
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "string c_y = ' D ' ;",
        "int d_y = abs ( yy - y ) ;"
      ],
      "err_line": 18,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        28,
        18,
        17,
        15
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "string c_y = ' D ' ;",
        "int d_y = abs ( yy - y ) ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        28,
        18,
        15
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "string c_y = ' D ' ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        28,
        20
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "int t ;"
      ],
      "err_line": 22,
      "err_msg": "‘get’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        20,
        17
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "int t ;",
        "int d_y = abs ( yy - y ) ;"
      ],
      "err_line": 22,
      "err_msg": "‘get’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        20,
        17,
        15
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "int t ;",
        "int d_y = abs ( yy - y ) ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        28,
        20,
        15
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "int t ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        28,
        17,
        15
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "int d_y = abs ( yy - y ) ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        28,
        15
      ],
      "mod_code": [
        "if ( i < d_x ) cout << c_x << endl ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        29,
        18
      ],
      "mod_code": [
        "if ( i < d_y ) cout << c_y << endl ;",
        "string c_y = ' D ' ;"
      ],
      "err_line": 18,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        29,
        18,
        20
      ],
      "mod_code": [
        "if ( i < d_y ) cout << c_y << endl ;",
        "string c_y = ' D ' ;",
        "int t ;"
      ],
      "err_line": 18,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        29,
        18,
        20,
        17
      ],
      "mod_code": [
        "if ( i < d_y ) cout << c_y << endl ;",
        "string c_y = ' D ' ;",
        "int t ;",
        "int d_y = abs ( yy - y ) ;"
      ],
      "err_line": 18,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        29,
        18,
        20,
        15
      ],
      "mod_code": [
        "if ( i < d_y ) cout << c_y << endl ;",
        "string c_y = ' D ' ;",
        "int t ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        29,
        18,
        17
      ],
      "mod_code": [
        "if ( i < d_y ) cout << c_y << endl ;",
        "string c_y = ' D ' ;",
        "int d_y = abs ( yy - y ) ;"
      ],
      "err_line": 18,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        29,
        18,
        17,
        15
      ],
      "mod_code": [
        "if ( i < d_y ) cout << c_y << endl ;",
        "string c_y = ' D ' ;",
        "int d_y = abs ( yy - y ) ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        29,
        18,
        15
      ],
      "mod_code": [
        "if ( i < d_y ) cout << c_y << endl ;",
        "string c_y = ' D ' ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        29,
        20
      ],
      "mod_code": [
        "if ( i < d_y ) cout << c_y << endl ;",
        "int t ;"
      ],
      "err_line": 22,
      "err_msg": "‘get’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        20,
        17
      ],
      "mod_code": [
        "if ( i < d_y ) cout << c_y << endl ;",
        "int t ;",
        "int d_y = abs ( yy - y ) ;"
      ],
      "err_line": 22,
      "err_msg": "‘get’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        20,
        17,
        15
      ],
      "mod_code": [
        "if ( i < d_y ) cout << c_y << endl ;",
        "int t ;",
        "int d_y = abs ( yy - y ) ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        29,
        20,
        15
      ],
      "mod_code": [
        "if ( i < d_y ) cout << c_y << endl ;",
        "int t ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        29,
        17,
        15
      ],
      "mod_code": [
        "if ( i < d_y ) cout << c_y << endl ;",
        "int d_y = abs ( yy - y ) ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        29,
        15
      ],
      "mod_code": [
        "if ( i < d_y ) cout << c_y << endl ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        18,
        20
      ],
      "mod_code": [
        "string c_y = ' D ' ;",
        "int t ;"
      ],
      "err_line": 18,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        18,
        20,
        17
      ],
      "mod_code": [
        "string c_y = ' D ' ;",
        "int t ;",
        "int d_y = abs ( yy - y ) ;"
      ],
      "err_line": 18,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        18,
        20,
        17,
        15
      ],
      "mod_code": [
        "string c_y = ' D ' ;",
        "int t ;",
        "int d_y = abs ( yy - y ) ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        18,
        20,
        15
      ],
      "mod_code": [
        "string c_y = ' D ' ;",
        "int t ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        18,
        17
      ],
      "mod_code": [
        "string c_y = ' D ' ;",
        "int d_y = abs ( yy - y ) ;"
      ],
      "err_line": 18,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        18,
        17,
        15
      ],
      "mod_code": [
        "string c_y = ' D ' ;",
        "int d_y = abs ( yy - y ) ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        18,
        15
      ],
      "mod_code": [
        "string c_y = ' D ' ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        20,
        17
      ],
      "mod_code": [
        "int t ;",
        "int d_y = abs ( yy - y ) ;"
      ],
      "err_line": 22,
      "err_msg": "‘get’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        17,
        15
      ],
      "mod_code": [
        "int t ;",
        "int d_y = abs ( yy - y ) ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        20,
        15
      ],
      "mod_code": [
        "int t ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        17,
        15
      ],
      "mod_code": [
        "int d_y = abs ( yy - y ) ;",
        "string c_y = ' U ' ;"
      ],
      "err_line": 15,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    }
  ]
}