{
  "meta": {
    "index": 2594,
    "hitid": "3D3B8GE892LQVGRB8LDVZ4P3WFVP9M",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "906A",
    "subid": "38319034"
  },
  "lines": [
    {
      "line": 0,
      "text": "create char array s of length 100005",
      "code": "char s [ 100005 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int",
      "code": "int safe [ 30 ] , nowsafe [ 30 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "let n , i , j , flag , co be int , set i , flag and co to 0",
      "code": "int n , i = 0 , j , flag = 0 , co = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create char c",
      "code": "char c ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "while decrement n",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read c and s",
      "code": "cin >> c >> s ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set m to length of s",
      "code": "int m = strlen ( s ) ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if c = !",
      "code": "if ( c == ' ! ' )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if flag equal to 1",
      "code": "if ( flag == 1 )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "increment co",
      "code": "co ++ ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 13,
      "text": "assign 1 to elements between nowsafe and nowsafe + 26",
      "code": "fill ( nowsafe , nowsafe + 26 , 1 ) ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "for j = 0 to m exclusive , set nowsafe [ s [ j ] - a ] = 0",
      "code": "for ( j = 0 ; j < m ; j ++ ) nowsafe [ s [ j ] - ' a ' ] = 0 ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "for i = 0 to 26 exclusive",
      "code": "for ( i = 0 ; i < 26 ; i ++ )",
      "indent": 4
    },
    {
      "line": 16,
      "text": "if nowsafe [ i ] = 1 ) , safe [ i ] = 1",
      "code": "if ( nowsafe [ i ] == 1 ) safe [ i ] = 1 ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else if c = .",
      "code": "else if ( c == ' . ' )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "for i = 0 to m exclusive , assign 1 to safe [ s [ i ] - a ]",
      "code": "for ( i = 0 ; i < m ; i ++ ) safe [ s [ i ] - ' a ' ] = 1 ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if flag equal to 1 and safe [ s [ 0 ] - a ] = 1 ) , increment co",
      "code": "if ( flag == 1 && safe [ s [ 0 ] - ' a ' ] == 1 ) co ++ ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "set safe [ s [ 0 ] - a ] = 1",
      "code": "safe [ s [ 0 ] - ' a ' ] = 1 ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "assign 0 to num",
      "code": "int num = 0 ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "for i = 0 to 26 exclusive",
      "code": "for ( i = 0 ; i < 26 ; i ++ )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "if safe [ i ] equal to 1 , add 1 to num",
      "code": "if ( safe [ i ] == 1 ) num ++ ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "if num = 25 , set flag to 1",
      "code": "if ( num == 25 ) flag = 1 ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "print co",
      "code": "cout << co << endl ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int ; ;"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "m = s . length ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "memset ( nowsafe , nowsafe + 26 ) ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }"
      ],
      "err_line": 19,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "num = 0 ;"
      ],
      "err_line": 24,
      "err_msg": "‘num’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a ;"
      ],
      "err_line": 13,
      "err_msg": "‘nowsafe’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int n , i , j , flag = 0 , co = 0 , co = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int co’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char n ;"
      ],
      "err_line": 4,
      "err_msg": "conflicting declaration ‘char n’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "c >> c >> s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int’ and ‘char [100005]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "m = s . size ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "int * nowsafe = 1 , nowsafe = 1 ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "else if ( c == \" . \" )"
      ],
      "err_line": 18,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( flag == 1 && safe [ s [ 0 ] - a ] == 1 ) co ++ ;"
      ],
      "err_line": 21,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "safe [ s [ 0 ] - a ] = 1 ;"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "if ( num == \" 25 \" ) flag = 1 ;"
      ],
      "err_line": 27,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int ; ;",
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        8
      ],
      "mod_code": [
        "int ; ;",
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "m = s . length ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        13
      ],
      "mod_code": [
        "int ; ;",
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "m = s . length ( ) ;",
        "memset ( nowsafe , nowsafe + 26 ) ;"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        19
      ],
      "mod_code": [
        "int ; ;",
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "m = s . length ( ) ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        24
      ],
      "mod_code": [
        "int ; ;",
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "m = s . length ( ) ;",
        "num = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        13
      ],
      "mod_code": [
        "int ; ;",
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "memset ( nowsafe , nowsafe + 26 ) ;"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        13,
        19
      ],
      "mod_code": [
        "int ; ;",
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "memset ( nowsafe , nowsafe + 26 ) ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        13,
        24
      ],
      "mod_code": [
        "int ; ;",
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "memset ( nowsafe , nowsafe + 26 ) ;",
        "num = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        19
      ],
      "mod_code": [
        "int ; ;",
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        19,
        24
      ],
      "mod_code": [
        "int ; ;",
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }",
        "num = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        24
      ],
      "mod_code": [
        "int ; ;",
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "num = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int ; ;",
        "m = s . length ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        13
      ],
      "mod_code": [
        "int ; ;",
        "m = s . length ( ) ;",
        "memset ( nowsafe , nowsafe + 26 ) ;"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        13,
        19
      ],
      "mod_code": [
        "int ; ;",
        "m = s . length ( ) ;",
        "memset ( nowsafe , nowsafe + 26 ) ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        13,
        24
      ],
      "mod_code": [
        "int ; ;",
        "m = s . length ( ) ;",
        "memset ( nowsafe , nowsafe + 26 ) ;",
        "num = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        19
      ],
      "mod_code": [
        "int ; ;",
        "m = s . length ( ) ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        19,
        24
      ],
      "mod_code": [
        "int ; ;",
        "m = s . length ( ) ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }",
        "num = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        24
      ],
      "mod_code": [
        "int ; ;",
        "m = s . length ( ) ;",
        "num = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "int ; ;",
        "memset ( nowsafe , nowsafe + 26 ) ;"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        13,
        19
      ],
      "mod_code": [
        "int ; ;",
        "memset ( nowsafe , nowsafe + 26 ) ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        13,
        19,
        24
      ],
      "mod_code": [
        "int ; ;",
        "memset ( nowsafe , nowsafe + 26 ) ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }",
        "num = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        13,
        24
      ],
      "mod_code": [
        "int ; ;",
        "memset ( nowsafe , nowsafe + 26 ) ;",
        "num = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        19
      ],
      "mod_code": [
        "int ; ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        19,
        24
      ],
      "mod_code": [
        "int ; ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }",
        "num = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        24
      ],
      "mod_code": [
        "int ; ;",
        "num = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "declaration does not declare anything [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "m = s . length ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        3,
        8,
        13
      ],
      "mod_code": [
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "m = s . length ( ) ;",
        "memset ( nowsafe , nowsafe + 26 ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        3,
        8,
        13,
        19
      ],
      "mod_code": [
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "m = s . length ( ) ;",
        "memset ( nowsafe , nowsafe + 26 ) ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        3,
        8,
        13,
        24
      ],
      "mod_code": [
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "m = s . length ( ) ;",
        "memset ( nowsafe , nowsafe + 26 ) ;",
        "num = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        3,
        8,
        19
      ],
      "mod_code": [
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "m = s . length ( ) ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        3,
        8,
        19,
        24
      ],
      "mod_code": [
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "m = s . length ( ) ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }",
        "num = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        3,
        8,
        24
      ],
      "mod_code": [
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "m = s . length ( ) ;",
        "num = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "memset ( nowsafe , nowsafe + 26 ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        3,
        13,
        19
      ],
      "mod_code": [
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "memset ( nowsafe , nowsafe + 26 ) ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        3,
        13,
        19,
        24
      ],
      "mod_code": [
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "memset ( nowsafe , nowsafe + 26 ) ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }",
        "num = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        3,
        13,
        24
      ],
      "mod_code": [
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "memset ( nowsafe , nowsafe + 26 ) ;",
        "num = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        3,
        19
      ],
      "mod_code": [
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        3,
        19,
        24
      ],
      "mod_code": [
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }",
        "num = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        3,
        24
      ],
      "mod_code": [
        "int n , i , j , flag = 0 , flag = 0 , co = 0 ;",
        "num = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "m = s . length ( ) ;",
        "memset ( nowsafe , nowsafe + 26 ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        13,
        19
      ],
      "mod_code": [
        "m = s . length ( ) ;",
        "memset ( nowsafe , nowsafe + 26 ) ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }"
      ],
      "err_line": 8,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        13,
        19,
        24
      ],
      "mod_code": [
        "m = s . length ( ) ;",
        "memset ( nowsafe , nowsafe + 26 ) ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }",
        "num = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        13,
        24
      ],
      "mod_code": [
        "m = s . length ( ) ;",
        "memset ( nowsafe , nowsafe + 26 ) ;",
        "num = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        19
      ],
      "mod_code": [
        "m = s . length ( ) ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }"
      ],
      "err_line": 8,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        19,
        24
      ],
      "mod_code": [
        "m = s . length ( ) ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }",
        "num = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        24
      ],
      "mod_code": [
        "m = s . length ( ) ;",
        "num = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        19
      ],
      "mod_code": [
        "memset ( nowsafe , nowsafe + 26 ) ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        19,
        24
      ],
      "mod_code": [
        "memset ( nowsafe , nowsafe + 26 ) ;",
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }",
        "num = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        24
      ],
      "mod_code": [
        "memset ( nowsafe , nowsafe + 26 ) ;",
        "num = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        24
      ],
      "mod_code": [
        "for ( int i = 0 ; i < m ; i ++ ) { safe [ s [ i ] - a ] = 1 ; }",
        "num = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "‘a’ was not declared in this scope"
    }
  ]
}