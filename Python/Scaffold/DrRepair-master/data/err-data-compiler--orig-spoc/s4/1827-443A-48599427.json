{
  "meta": {
    "index": 1827,
    "hitid": "382GHPVPHSLIRLGCTSKX5TBM44T34L",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "443A",
    "subid": "48599427"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s",
      "code": "getline ( cin , s ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while s is empty read s",
      "code": "while ( s . length ( ) == 0 ) { getline ( cin , s ) ; }",
      "indent": 1
    },
    {
      "line": 4,
      "text": "arr = array of 26 zeroes",
      "code": "int arr [ 26 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "i = int , count = 0",
      "code": "int i , count = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 1 to length of s - 1 exclusive , step by 3",
      "code": "for ( i = 1 ; i < s . length ( ) - 1 ; i = i + 3 )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if s [ i ] is not one of ' , ' , ' ' , ' { ' , ' } ' increment arr [ s [ i ] - ' a ' ]",
      "code": "if ( s [ i ] != ' , ' || s [ i ] != ' ' || s [ i ] != ' { ' || s [ i ] != ' } ' ) { arr [ s [ i ] - ' a ' ] ++ ; }",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to 26 exclusive",
      "code": "for ( i = 0 ; i < 26 ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if arr [ i ] > = 1 increment count",
      "code": "if ( arr [ i ] >= 1 ) { count ++ ; }",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print count",
      "code": "cout << count << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int i = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "no post-increment operator for type"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( s [ i ] != ' ' || s [ i ] != ' ' ) arr [ s [ i ] - ' a ' ] [ s [ i ] - ' a ' ] ++ ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "cin >> s ;",
        "else"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        7,
        5
      ],
      "mod_code": [
        "cin >> s ;",
        "else",
        "int i = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        7,
        5,
        4
      ],
      "mod_code": [
        "cin >> s ;",
        "else",
        "int i = 0 ;",
        "int arr [ 26 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        7,
        4
      ],
      "mod_code": [
        "cin >> s ;",
        "else",
        "int arr [ 26 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "cin >> s ;",
        "if ( s [ i ] != ' ' || s [ i ] != ' ' ) arr [ s [ i ] - ' a ' ] [ s [ i ] - ' a ' ] ++ ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        7,
        5
      ],
      "mod_code": [
        "cin >> s ;",
        "if ( s [ i ] != ' ' || s [ i ] != ' ' ) arr [ s [ i ] - ' a ' ] [ s [ i ] - ' a ' ] ++ ;",
        "int i = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        7,
        5,
        4
      ],
      "mod_code": [
        "cin >> s ;",
        "if ( s [ i ] != ' ' || s [ i ] != ' ' ) arr [ s [ i ] - ' a ' ] [ s [ i ] - ' a ' ] ++ ;",
        "int i = 0 ;",
        "int arr [ 26 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        7,
        4
      ],
      "mod_code": [
        "cin >> s ;",
        "if ( s [ i ] != ' ' || s [ i ] != ' ' ) arr [ s [ i ] - ' a ' ] [ s [ i ] - ' a ' ] ++ ;",
        "int arr [ 26 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "cin >> s ;",
        "int i = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "no post-increment operator for type"
    },
    {
      "mod_line": [
        2,
        5,
        4
      ],
      "mod_code": [
        "cin >> s ;",
        "int i = 0 ;",
        "int arr [ 26 ] ;"
      ],
      "err_line": 10,
      "err_msg": "no post-increment operator for type"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "else",
        "int i = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        5,
        4
      ],
      "mod_code": [
        "else",
        "int i = 0 ;",
        "int arr [ 26 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        5,
        4,
        2
      ],
      "mod_code": [
        "else",
        "int i = 0 ;",
        "int arr [ 26 ] ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        5,
        2
      ],
      "mod_code": [
        "else",
        "int i = 0 ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "else",
        "int arr [ 26 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        7,
        4,
        2
      ],
      "mod_code": [
        "else",
        "int arr [ 26 ] ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "else",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "if ( s [ i ] != ' ' || s [ i ] != ' ' ) arr [ s [ i ] - ' a ' ] [ s [ i ] - ' a ' ] ++ ;",
        "int i = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        5,
        4
      ],
      "mod_code": [
        "if ( s [ i ] != ' ' || s [ i ] != ' ' ) arr [ s [ i ] - ' a ' ] [ s [ i ] - ' a ' ] ++ ;",
        "int i = 0 ;",
        "int arr [ 26 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        5,
        4,
        2
      ],
      "mod_code": [
        "if ( s [ i ] != ' ' || s [ i ] != ' ' ) arr [ s [ i ] - ' a ' ] [ s [ i ] - ' a ' ] ++ ;",
        "int i = 0 ;",
        "int arr [ 26 ] ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        5,
        2
      ],
      "mod_code": [
        "if ( s [ i ] != ' ' || s [ i ] != ' ' ) arr [ s [ i ] - ' a ' ] [ s [ i ] - ' a ' ] ++ ;",
        "int i = 0 ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "if ( s [ i ] != ' ' || s [ i ] != ' ' ) arr [ s [ i ] - ' a ' ] [ s [ i ] - ' a ' ] ++ ;",
        "int arr [ 26 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        4,
        2
      ],
      "mod_code": [
        "if ( s [ i ] != ' ' || s [ i ] != ' ' ) arr [ s [ i ] - ' a ' ] [ s [ i ] - ' a ' ] ++ ;",
        "int arr [ 26 ] ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "if ( s [ i ] != ' ' || s [ i ] != ' ' ) arr [ s [ i ] - ' a ' ] [ s [ i ] - ' a ' ] ++ ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "int i = 0 ;",
        "int arr [ 26 ] ;"
      ],
      "err_line": 10,
      "err_msg": "no post-increment operator for type"
    },
    {
      "mod_line": [
        5,
        4,
        2
      ],
      "mod_code": [
        "int i = 0 ;",
        "int arr [ 26 ] ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "int i = 0 ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "int arr [ 26 ] ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}