{
  "meta": {
    "index": 196,
    "hitid": "334ZEL5JX69QFVB92R07RZP3DBROS7",
    "workerid": "AIWEXPJAU66D9",
    "probid": "793A",
    "subid": "48003488"
  },
  "lines": [
    {
      "line": 0,
      "text": "let table be integer array with size 100005",
      "code": "int table [ 100005 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare integer variables a , b and min",
      "code": "int a , b , min ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create long long integer secs",
      "code": "long long int secs ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read a and b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set min to INT_MAX",
      "code": "min = INT_MAX ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set value of secs to 0",
      "code": "secs = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "let arr be integer array with size a",
      "code": "int arr [ a ] ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for integer i = 0 to a exclusive",
      "code": "for ( int i = 0 ; i < a ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read arr [ i ]",
      "code": "cin >> arr [ i ] ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if arr [ i ] is less than min , set min to arr [ i ]",
      "code": "if ( arr [ i ] < min ) { min = arr [ i ] ; }",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for integer i = 0 to a exclusive",
      "code": "for ( int i = 0 ; i < a ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if ( arr [ i ] - min ) % b ! = 0",
      "code": "if ( ( arr [ i ] - min ) % b != 0 )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print \" - 1 \"",
      "code": "cout << \" -1 \" << endl ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "increment secs by ( arr [ i ] - min ) / b a times",
      "code": "for ( int i = 0 ; i < a ; i ++ ) { secs += ( arr [ i ] - min ) / b ; }",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print secs",
      "code": "cout << secs << endl ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - min ) ) ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int min = INT_MAX ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int min’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "arr >> arr [ i ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘int [a]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - b ) ) ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        4
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - min ) ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        4,
        9
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - min ) ) ;",
        "a >> a >> b ;",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘int [a]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        18,
        4,
        9,
        19
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - min ) ) ;",
        "a >> a >> b ;",
        "arr >> arr [ i ] ;",
        "cout << secs ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘int [a]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        18,
        4,
        9,
        6
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - min ) ) ;",
        "a >> a >> b ;",
        "arr >> arr [ i ] ;",
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        18,
        4,
        19
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - min ) ) ;",
        "a >> a >> b ;",
        "cout << secs ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        4,
        19,
        6
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - min ) ) ;",
        "a >> a >> b ;",
        "cout << secs ;",
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        18,
        4,
        6
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - min ) ) ;",
        "a >> a >> b ;",
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        18,
        9
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - min ) ) ;",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘int [a]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        18,
        9,
        19
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - min ) ) ;",
        "arr >> arr [ i ] ;",
        "cout << secs ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘int [a]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        18,
        9,
        19,
        6
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - min ) ) ;",
        "arr >> arr [ i ] ;",
        "cout << secs ;",
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        18,
        9,
        6
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - min ) ) ;",
        "arr >> arr [ i ] ;",
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        18,
        19
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - min ) ) ;",
        "cout << secs ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        19,
        6
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - min ) ) ;",
        "cout << secs ;",
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        18,
        6
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - min ) ) ;",
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        4,
        18
      ],
      "mod_code": [
        "a >> a >> b ;",
        "secs += ( arr [ i ] - min ( arr [ i ] - b ) ) ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        18,
        9
      ],
      "mod_code": [
        "a >> a >> b ;",
        "secs += ( arr [ i ] - min ( arr [ i ] - b ) ) ;",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘int [a]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        4,
        18,
        9,
        19
      ],
      "mod_code": [
        "a >> a >> b ;",
        "secs += ( arr [ i ] - min ( arr [ i ] - b ) ) ;",
        "arr >> arr [ i ] ;",
        "cout << secs ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘int [a]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        4,
        18,
        9,
        6
      ],
      "mod_code": [
        "a >> a >> b ;",
        "secs += ( arr [ i ] - min ( arr [ i ] - b ) ) ;",
        "arr >> arr [ i ] ;",
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        4,
        18,
        19
      ],
      "mod_code": [
        "a >> a >> b ;",
        "secs += ( arr [ i ] - min ( arr [ i ] - b ) ) ;",
        "cout << secs ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        18,
        19,
        6
      ],
      "mod_code": [
        "a >> a >> b ;",
        "secs += ( arr [ i ] - min ( arr [ i ] - b ) ) ;",
        "cout << secs ;",
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        4,
        18,
        6
      ],
      "mod_code": [
        "a >> a >> b ;",
        "secs += ( arr [ i ] - min ( arr [ i ] - b ) ) ;",
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "a >> a >> b ;",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘int [a]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        4,
        9,
        19
      ],
      "mod_code": [
        "a >> a >> b ;",
        "arr >> arr [ i ] ;",
        "cout << secs ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘int [a]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        4,
        9,
        19,
        6
      ],
      "mod_code": [
        "a >> a >> b ;",
        "arr >> arr [ i ] ;",
        "cout << secs ;",
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        4,
        9,
        6
      ],
      "mod_code": [
        "a >> a >> b ;",
        "arr >> arr [ i ] ;",
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        4,
        19,
        6
      ],
      "mod_code": [
        "a >> a >> b ;",
        "cout << secs ;",
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "a >> a >> b ;",
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        18,
        9
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - b ) ) ;",
        "arr >> arr [ i ] ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘int [a]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        18,
        9,
        19
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - b ) ) ;",
        "arr >> arr [ i ] ;",
        "cout << secs ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘int [a]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        18,
        9,
        19,
        6
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - b ) ) ;",
        "arr >> arr [ i ] ;",
        "cout << secs ;",
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        18,
        9,
        6
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - b ) ) ;",
        "arr >> arr [ i ] ;",
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        18,
        19
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - b ) ) ;",
        "cout << secs ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        19,
        6
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - b ) ) ;",
        "cout << secs ;",
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        18,
        6
      ],
      "mod_code": [
        "secs += ( arr [ i ] - min ( arr [ i ] - b ) ) ;",
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        9,
        19
      ],
      "mod_code": [
        "arr >> arr [ i ] ;",
        "cout << secs ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘int [a]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        9,
        19,
        6
      ],
      "mod_code": [
        "arr >> arr [ i ] ;",
        "cout << secs ;",
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "arr >> arr [ i ] ;",
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        19,
        6
      ],
      "mod_code": [
        "cout << secs ;",
        "* secs = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    }
  ]
}