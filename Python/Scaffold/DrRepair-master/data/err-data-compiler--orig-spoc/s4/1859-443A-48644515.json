{
  "meta": {
    "index": 1859,
    "hitid": "3W9XHF7WGKP84439TZD4UN4GVPVKT8",
    "workerid": "AIWEXPJAU66D9",
    "probid": "443A",
    "subid": "48644515"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read line from input into s",
      "code": "getline ( cin , s ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare integer count = 0 and an array of integers hash with size 26",
      "code": "int hash [ 26 ] , count = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "call memset with arguments hash , 0 and sizeof ( hash )",
      "code": "memset ( hash , 0 , sizeof ( hash ) ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for integer i = 0 to length of s exclusive",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if s [ i ] = ' { ' or s [ i ] = ' } ' or s [ i ] = ' ' or s [ i ] = ' , '",
      "code": "if ( s [ i ] == ' { ' || s [ i ] == ' } ' || s [ i ] == ' ' || s [ i ] == ' , ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "continue the loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "hash [ s [ i ] - ' a ' ] = 1",
      "code": "hash [ s [ i ] - ' a ' ] = 1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for integer i = 0 to 26 exclusive",
      "code": "for ( int i = 0 ; i < 26 ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if hash [ i ] = 1 , increment count",
      "code": "if ( hash [ i ] == 1 ) { count ++ ; }",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print count and a new line",
      "code": "cout << count << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } ' || s [ i ] == ' , ' )"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 2,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int hash , hash [ 26 ] , count = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int hash [26]’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } || s [ i ] == ' , ' )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "continue continue ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "hash [ ( s [ i ] - ' a ' ] = 1 ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } ' || s [ i ] == ' , ' )",
        "continue continue ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        7,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } ' || s [ i ] == ' , ' )",
        "continue continue ;",
        "memset ( 0 , 0 , sizeof ( hash ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        7,
        4,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } ' || s [ i ] == ' , ' )",
        "continue continue ;",
        "memset ( 0 , 0 , sizeof ( hash ) ) ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        7,
        4,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } ' || s [ i ] == ' , ' )",
        "continue continue ;",
        "memset ( 0 , 0 , sizeof ( hash ) ) ;",
        "int hash , hash [ 26 ] , count = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        7,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } ' || s [ i ] == ' , ' )",
        "continue continue ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        7,
        2,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } ' || s [ i ] == ' , ' )",
        "continue continue ;",
        "getline ( getline ( cin , s ) ;",
        "int hash , hash [ 26 ] , count = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        7,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } ' || s [ i ] == ' , ' )",
        "continue continue ;",
        "int hash , hash [ 26 ] , count = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } ' || s [ i ] == ' , ' )",
        "memset ( 0 , 0 , sizeof ( hash ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        4,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } ' || s [ i ] == ' , ' )",
        "memset ( 0 , 0 , sizeof ( hash ) ) ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        4,
        2,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } ' || s [ i ] == ' , ' )",
        "memset ( 0 , 0 , sizeof ( hash ) ) ;",
        "getline ( getline ( cin , s ) ;",
        "int hash , hash [ 26 ] , count = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        4,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } ' || s [ i ] == ' , ' )",
        "memset ( 0 , 0 , sizeof ( hash ) ) ;",
        "int hash , hash [ 26 ] , count = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } ' || s [ i ] == ' , ' )",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        2,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } ' || s [ i ] == ' , ' )",
        "getline ( getline ( cin , s ) ;",
        "int hash , hash [ 26 ] , count = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } ' || s [ i ] == ' , ' )",
        "int hash , hash [ 26 ] , count = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "continue continue ;",
        "memset ( 0 , 0 , sizeof ( hash ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        7,
        4,
        2
      ],
      "mod_code": [
        "continue continue ;",
        "memset ( 0 , 0 , sizeof ( hash ) ) ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        4,
        2,
        3
      ],
      "mod_code": [
        "continue continue ;",
        "memset ( 0 , 0 , sizeof ( hash ) ) ;",
        "getline ( getline ( cin , s ) ;",
        "int hash , hash [ 26 ] , count = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        4,
        2,
        6
      ],
      "mod_code": [
        "continue continue ;",
        "memset ( 0 , 0 , sizeof ( hash ) ) ;",
        "getline ( getline ( cin , s ) ;",
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } || s [ i ] == ' , ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        4,
        3
      ],
      "mod_code": [
        "continue continue ;",
        "memset ( 0 , 0 , sizeof ( hash ) ) ;",
        "int hash , hash [ 26 ] , count = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int hash [26]’"
    },
    {
      "mod_line": [
        7,
        4,
        3,
        6
      ],
      "mod_code": [
        "continue continue ;",
        "memset ( 0 , 0 , sizeof ( hash ) ) ;",
        "int hash , hash [ 26 ] , count = 0 ;",
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } || s [ i ] == ' , ' )"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int hash [26]’"
    },
    {
      "mod_line": [
        7,
        4,
        6
      ],
      "mod_code": [
        "continue continue ;",
        "memset ( 0 , 0 , sizeof ( hash ) ) ;",
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } || s [ i ] == ' , ' )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "continue continue ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        2,
        3
      ],
      "mod_code": [
        "continue continue ;",
        "getline ( getline ( cin , s ) ;",
        "int hash , hash [ 26 ] , count = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        2,
        3,
        6
      ],
      "mod_code": [
        "continue continue ;",
        "getline ( getline ( cin , s ) ;",
        "int hash , hash [ 26 ] , count = 0 ;",
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } || s [ i ] == ' , ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        2,
        6
      ],
      "mod_code": [
        "continue continue ;",
        "getline ( getline ( cin , s ) ;",
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } || s [ i ] == ' , ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "continue continue ;",
        "int hash , hash [ 26 ] , count = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int hash [26]’"
    },
    {
      "mod_line": [
        7,
        3,
        6
      ],
      "mod_code": [
        "continue continue ;",
        "int hash , hash [ 26 ] , count = 0 ;",
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } || s [ i ] == ' , ' )"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int hash [26]’"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "continue continue ;",
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } || s [ i ] == ' , ' )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "memset ( 0 , 0 , sizeof ( hash ) ) ;",
        "getline ( getline ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        2,
        3
      ],
      "mod_code": [
        "memset ( 0 , 0 , sizeof ( hash ) ) ;",
        "getline ( getline ( cin , s ) ;",
        "int hash , hash [ 26 ] , count = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        2,
        3,
        6
      ],
      "mod_code": [
        "memset ( 0 , 0 , sizeof ( hash ) ) ;",
        "getline ( getline ( cin , s ) ;",
        "int hash , hash [ 26 ] , count = 0 ;",
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } || s [ i ] == ' , ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        2,
        6
      ],
      "mod_code": [
        "memset ( 0 , 0 , sizeof ( hash ) ) ;",
        "getline ( getline ( cin , s ) ;",
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } || s [ i ] == ' , ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "memset ( 0 , 0 , sizeof ( hash ) ) ;",
        "int hash , hash [ 26 ] , count = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int hash [26]’"
    },
    {
      "mod_line": [
        4,
        3,
        6
      ],
      "mod_code": [
        "memset ( 0 , 0 , sizeof ( hash ) ) ;",
        "int hash , hash [ 26 ] , count = 0 ;",
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } || s [ i ] == ' , ' )"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int hash [26]’"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "memset ( 0 , 0 , sizeof ( hash ) ) ;",
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } || s [ i ] == ' , ' )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "getline ( getline ( cin , s ) ;",
        "int hash , hash [ 26 ] , count = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        3,
        6
      ],
      "mod_code": [
        "getline ( getline ( cin , s ) ;",
        "int hash , hash [ 26 ] , count = 0 ;",
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } || s [ i ] == ' , ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "getline ( getline ( cin , s ) ;",
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } || s [ i ] == ' , ' )"
      ],
      "err_line": 2,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "int hash , hash [ 26 ] , count = 0 ;",
        "if ( s [ i ] == ' ' || s [ i ] == ' } || s [ i ] == ' } || s [ i ] == ' , ' )"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int hash [26]’"
    }
  ]
}