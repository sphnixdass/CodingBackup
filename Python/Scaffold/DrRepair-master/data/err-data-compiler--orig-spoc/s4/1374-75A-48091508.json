{
  "meta": {
    "index": 1374,
    "hitid": "3X55NP42EOA4GE2VRCCL8RMHWNJ3PH",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "75A",
    "subid": "48091508"
  },
  "lines": [
    {
      "line": 0,
      "text": "A , B , C = string",
      "code": "string A , B , C ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a , b , c , a1 , b1 , c1 = int and aa , bb , cc = int array of size 3000 each",
      "code": "int a , b , c , a1 , b1 , c1 , aa [ 3000 ] , bb [ 3000 ] , cc [ 3000 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read A then B",
      "code": "cin >> A >> B ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to size of A set a to a * 10 + ( A [ i ] - ' 0 ' )",
      "code": "for ( int i = 0 ; i < A . size ( ) ; i ++ ) { a = a * 10 + ( A [ i ] - ' 0 ' ) ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 0 to size of B set b to b * 10 + ( B [ j ] - ' 0 ' )",
      "code": "for ( int j = 0 ; j < B . size ( ) ; j ++ ) { b = b * 10 + ( B [ j ] - ' 0 ' ) ; }",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set c to a + b",
      "code": "c = a + b ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "num = int with num = 1",
      "code": "int num = 1 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "loop while a is greater than 0",
      "code": "while ( a > 0 )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "s = int with s = a mod 10",
      "code": "int s = a % 10 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if s is 0",
      "code": "if ( s == 0 )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set a to a / 10",
      "code": "a /= 10 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "continue loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set aa [ num ] to s",
      "code": "aa [ num ] = s ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "increment num",
      "code": "num ++ ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set a to a / 10",
      "code": "a /= 10 ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for i = num - 1 to 0 decrementing i set a1 to a1 * 10 + aa [ i ]",
      "code": "for ( int i = num - 1 ; i >= 1 ; i -- ) a1 = a1 * 10 + aa [ i ] ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "set num to 1",
      "code": "num = 1 ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "loop while b is greater than 0",
      "code": "while ( b > 0 )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "s = int with s = b mod 10",
      "code": "int s = b % 10 ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if s is 0",
      "code": "if ( s == 0 )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "set b to b / 10",
      "code": "b /= 10 ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "continue loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "set bb [ num ] to s",
      "code": "bb [ num ] = s ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "increment num",
      "code": "num ++ ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "set b to b / 10",
      "code": "b /= 10 ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "for i = num - 1 to 0 decrementing i set b1 to b1 * 10 + bb [ i ]",
      "code": "for ( int i = num - 1 ; i >= 1 ; i -- ) b1 = b1 * 10 + bb [ i ] ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "set num to 1",
      "code": "num = 1 ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "loop while c is greater than 0",
      "code": "while ( c > 0 )",
      "indent": 1
    },
    {
      "line": 33,
      "text": "s = int with s = c mod 10",
      "code": "int s = c % 10 ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "if s is 0",
      "code": "if ( s == 0 )",
      "indent": 2
    },
    {
      "line": 35,
      "text": "set c to c / 10",
      "code": "c /= 10 ;",
      "indent": 3
    },
    {
      "line": 36,
      "text": "continue loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 38,
      "text": "set cc [ num ] to s",
      "code": "cc [ num ] = s ;",
      "indent": 2
    },
    {
      "line": 39,
      "text": "increment num",
      "code": "num ++ ;",
      "indent": 2
    },
    {
      "line": 40,
      "text": "set c to c / 10",
      "code": "c /= 10 ;",
      "indent": 2
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 42,
      "text": "for i = num - 1 to 0 decrementing i set c1 to c1 * 10 + cc [ i ]",
      "code": "for ( int i = num - 1 ; i >= 1 ; i -- ) c1 = c1 * 10 + cc [ i ] ;",
      "indent": 1
    },
    {
      "line": 43,
      "text": "if a1 + b1 is c1",
      "code": "if ( a1 + b1 == c1 )",
      "indent": 1
    },
    {
      "line": 44,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 45,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 46,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string A , B , C , C ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘std::__cxx11::string C’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , b [ 3000 ] , cc [ 3000 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "continue continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { a1 -= 10 + aa + aa [ i ] ; }"
      ],
      "err_line": 18,
      "err_msg": "invalid operands of types ‘int’ and ‘int*’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "int num = 1 ;"
      ],
      "err_line": 19,
      "err_msg": "redeclaration of ‘int num’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "continue continue ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { b1 += 10 + bb + bb [ i ] ; }"
      ],
      "err_line": 30,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "int num = 1 ;"
      ],
      "err_line": 31,
      "err_msg": "redeclaration of ‘int num’"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "continue continue ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        45
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 45,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "c += b ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        6,
        18
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "c += b ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { a1 = a1 * 10 + aa [ i ] ; }"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        6,
        18,
        30
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "c += b ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { a1 = a1 * 10 + aa [ i ] ; }",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { b1 = b1 * 10 + bb [ i ] ; }"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        6,
        18,
        42
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "c += b ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { a1 = a1 * 10 + aa [ i ] ; }",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { c1 = c1 * 10 + cc [ i ] ; }"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        6,
        18,
        12
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "c += b ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { a1 = a1 * 10 + aa [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        6,
        30
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "c += b ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { b1 = b1 * 10 + bb [ i ] ; }"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        6,
        30,
        42
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "c += b ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { b1 = b1 * 10 + bb [ i ] ; }",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { c1 = c1 * 10 + cc [ i ] ; }"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        6,
        30,
        12
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "c += b ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { b1 = b1 * 10 + bb [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        6,
        42
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "c += b ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { c1 = c1 * 10 + cc [ i ] ; }"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        6,
        42,
        12
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "c += b ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { c1 = c1 * 10 + cc [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        6,
        12
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "c += b ;",
        "continue continue ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { a1 = a1 * 10 + aa [ i ] ; }"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        18,
        30
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { a1 = a1 * 10 + aa [ i ] ; }",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { b1 = b1 * 10 + bb [ i ] ; }"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        18,
        30,
        42
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { a1 = a1 * 10 + aa [ i ] ; }",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { b1 = b1 * 10 + bb [ i ] ; }",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { c1 = c1 * 10 + cc [ i ] ; }"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        18,
        30,
        12
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { a1 = a1 * 10 + aa [ i ] ; }",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { b1 = b1 * 10 + bb [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        18,
        42
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { a1 = a1 * 10 + aa [ i ] ; }",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { c1 = c1 * 10 + cc [ i ] ; }"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        18,
        42,
        12
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { a1 = a1 * 10 + aa [ i ] ; }",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { c1 = c1 * 10 + cc [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        18,
        12
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { a1 = a1 * 10 + aa [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        30
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { b1 = b1 * 10 + bb [ i ] ; }"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        30,
        42
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { b1 = b1 * 10 + bb [ i ] ; }",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { c1 = c1 * 10 + cc [ i ] ; }"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        30,
        42,
        12
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { b1 = b1 * 10 + bb [ i ] ; }",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { c1 = c1 * 10 + cc [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        30,
        12
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { b1 = b1 * 10 + bb [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        42
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { c1 = c1 * 10 + cc [ i ] ; }"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        42,
        12
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { c1 = c1 * 10 + cc [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int a [ 3000 ] , b [ 3000 ] , b [ 3000 ] , c [ 3000 ] , cc [ 3000 ] ;",
        "continue continue ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int b [3000]’"
    },
    {
      "mod_line": [
        6,
        18,
        30,
        12
      ],
      "mod_code": [
        "c += b ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { a1 = a1 * 10 + aa [ i ] ; }",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { b1 = b1 * 10 + bb [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        6,
        18,
        42,
        12
      ],
      "mod_code": [
        "c += b ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { a1 = a1 * 10 + aa [ i ] ; }",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { c1 = c1 * 10 + cc [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        6,
        18,
        12
      ],
      "mod_code": [
        "c += b ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { a1 = a1 * 10 + aa [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        6,
        30,
        42,
        12
      ],
      "mod_code": [
        "c += b ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { b1 = b1 * 10 + bb [ i ] ; }",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { c1 = c1 * 10 + cc [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        6,
        30,
        12
      ],
      "mod_code": [
        "c += b ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { b1 = b1 * 10 + bb [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        6,
        42,
        12
      ],
      "mod_code": [
        "c += b ;",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { c1 = c1 * 10 + cc [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "c += b ;",
        "continue continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        18,
        30,
        42,
        12
      ],
      "mod_code": [
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { a1 = a1 * 10 + aa [ i ] ; }",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { b1 = b1 * 10 + bb [ i ] ; }",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { c1 = c1 * 10 + cc [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        18,
        30,
        12
      ],
      "mod_code": [
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { a1 = a1 * 10 + aa [ i ] ; }",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { b1 = b1 * 10 + bb [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        18,
        42,
        12
      ],
      "mod_code": [
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { a1 = a1 * 10 + aa [ i ] ; }",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { c1 = c1 * 10 + cc [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        18,
        12
      ],
      "mod_code": [
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { a1 = a1 * 10 + aa [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        30,
        42,
        12
      ],
      "mod_code": [
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { b1 = b1 * 10 + bb [ i ] ; }",
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { c1 = c1 * 10 + cc [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        30,
        12
      ],
      "mod_code": [
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { b1 = b1 * 10 + bb [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    },
    {
      "mod_line": [
        42,
        12
      ],
      "mod_code": [
        "for ( int i = num - 1 ; i >= 0 ; i -- ) { c1 = c1 * 10 + cc [ i ] ; }",
        "continue continue ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘continue’"
    }
  ]
}