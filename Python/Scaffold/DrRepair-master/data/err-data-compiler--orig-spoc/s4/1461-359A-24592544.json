{
  "meta": {
    "index": 1461,
    "hitid": "3TKXBROM5T4NK6HGH2EOF12U66DIJZ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "359A",
    "subid": "24592544"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer array x size 100 by 100",
      "code": "int x [ 100 ] [ 100 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare i , n , m , k as integers",
      "code": "int i , n , m , k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for k = 1 to m inclusive , read x [ i ] [ k ]",
      "code": "for ( k = 1 ; k <= m ; k ++ ) { cin >> x [ i ] [ k ] ; }",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "declare integers f1 = 0 , f2 = 0",
      "code": "int f1 = 0 , f2 = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "declare integers ct = 0 , f = 0",
      "code": "int ct = 0 , f = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for k = 1 to m inclusive",
      "code": "for ( k = 1 ; k <= m ; k ++ )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if x [ i ] [ k ] is 1",
      "code": "if ( x [ i ] [ k ] == 1 )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "if i is 1 or k is 1 or i is n or k is m",
      "code": "if ( ( i == 1 ) || ( k == 1 ) || ( i == n ) || ( k == m ) )",
      "indent": 4
    },
    {
      "line": 13,
      "text": "let f1 be 1",
      "code": "f1 = 1 ;",
      "indent": 5
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 15,
      "text": "let f2 be 1",
      "code": "f2 = 1 ;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if f1 is 1",
      "code": "if ( f1 == 1 )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print 2 , newline",
      "code": "cout << 2 << endl ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print 4 and newline",
      "code": "cout << 4 << endl ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "if ( x [ i ] [ k ] == ' 1 ' )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        11,
        13
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "if ( x [ i ] [ k ] == ' 1 ' )",
        "int f1 = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        11,
        13,
        14
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "if ( x [ i ] [ k ] == ' 1 ' )",
        "int f1 = 1 ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        11,
        13,
        22
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "if ( x [ i ] [ k ] == ' 1 ' )",
        "int f1 = 1 ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        11,
        13,
        3
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "if ( x [ i ] [ k ] == ' 1 ' )",
        "int f1 = 1 ;",
        "cin >> n >> k ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        11,
        14
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "if ( x [ i ] [ k ] == ' 1 ' )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        11,
        14,
        22
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "if ( x [ i ] [ k ] == ' 1 ' )",
        "else else",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        11,
        14,
        3
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "if ( x [ i ] [ k ] == ' 1 ' )",
        "else else",
        "cin >> n >> k ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        11,
        22
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "if ( x [ i ] [ k ] == ' 1 ' )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        11,
        22,
        3
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "if ( x [ i ] [ k ] == ' 1 ' )",
        "else else",
        "cin >> n >> k ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        11,
        3
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "if ( x [ i ] [ k ] == ' 1 ' )",
        "cin >> n >> k ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "int f1 = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        13,
        14
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "int f1 = 1 ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        13,
        14,
        22
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "int f1 = 1 ;",
        "else else",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        13,
        14,
        3
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "int f1 = 1 ;",
        "else else",
        "cin >> n >> k ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        13,
        22
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "int f1 = 1 ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        13,
        22,
        3
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "int f1 = 1 ;",
        "else else",
        "cin >> n >> k ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        13,
        3
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "int f1 = 1 ;",
        "cin >> n >> k ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        14,
        22
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "else else",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        14,
        22,
        3
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "else else",
        "else else",
        "cin >> n >> k ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        14,
        3
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "else else",
        "cin >> n >> k ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        22
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        22,
        3
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "else else",
        "cin >> n >> k ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int x [ 100 + 100 ] ;",
        "cin >> n >> k ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        13,
        14
      ],
      "mod_code": [
        "if ( x [ i ] [ k ] == ' 1 ' )",
        "int f1 = 1 ;",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        13,
        14,
        22
      ],
      "mod_code": [
        "if ( x [ i ] [ k ] == ' 1 ' )",
        "int f1 = 1 ;",
        "else else",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        13,
        14,
        3
      ],
      "mod_code": [
        "if ( x [ i ] [ k ] == ' 1 ' )",
        "int f1 = 1 ;",
        "else else",
        "cin >> n >> k ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        13,
        22
      ],
      "mod_code": [
        "if ( x [ i ] [ k ] == ' 1 ' )",
        "int f1 = 1 ;",
        "else else"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        13,
        22,
        3
      ],
      "mod_code": [
        "if ( x [ i ] [ k ] == ' 1 ' )",
        "int f1 = 1 ;",
        "else else",
        "cin >> n >> k ;"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "if ( x [ i ] [ k ] == ' 1 ' )",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        14,
        22
      ],
      "mod_code": [
        "if ( x [ i ] [ k ] == ' 1 ' )",
        "else else",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        14,
        22,
        3
      ],
      "mod_code": [
        "if ( x [ i ] [ k ] == ' 1 ' )",
        "else else",
        "else else",
        "cin >> n >> k ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        14,
        3
      ],
      "mod_code": [
        "if ( x [ i ] [ k ] == ' 1 ' )",
        "else else",
        "cin >> n >> k ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        22
      ],
      "mod_code": [
        "if ( x [ i ] [ k ] == ' 1 ' )",
        "else else"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        22,
        3
      ],
      "mod_code": [
        "if ( x [ i ] [ k ] == ' 1 ' )",
        "else else",
        "cin >> n >> k ;"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        14
      ],
      "mod_code": [
        "int f1 = 1 ;",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        14,
        22
      ],
      "mod_code": [
        "int f1 = 1 ;",
        "else else",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        14,
        22,
        3
      ],
      "mod_code": [
        "int f1 = 1 ;",
        "else else",
        "else else",
        "cin >> n >> k ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        14,
        3
      ],
      "mod_code": [
        "int f1 = 1 ;",
        "else else",
        "cin >> n >> k ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        22
      ],
      "mod_code": [
        "int f1 = 1 ;",
        "else else"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        22,
        3
      ],
      "mod_code": [
        "int f1 = 1 ;",
        "else else",
        "cin >> n >> k ;"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        22
      ],
      "mod_code": [
        "else else",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        22,
        3
      ],
      "mod_code": [
        "else else",
        "else else",
        "cin >> n >> k ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        3
      ],
      "mod_code": [
        "else else",
        "cin >> n >> k ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        22,
        3
      ],
      "mod_code": [
        "else else",
        "cin >> n >> k ;"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}