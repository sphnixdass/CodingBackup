{
  "meta": {
    "index": 612,
    "hitid": "34YWR3PJ284D8V5PUG4J06ADU8Z0XT",
    "workerid": "AIWEXPJAU66D9",
    "probid": "14A",
    "subid": "49047424"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , m , i , j , count are integers with count = 0",
      "code": "int n , m , i , j , count = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "arr is 2d array of chars with size n by m",
      "code": "char arr [ n ] [ m ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 0 to m exclusive read arr [ i ] [ j ]",
      "code": "for ( j = 0 ; j < m ; j ++ ) cin >> arr [ i ] [ j ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "declare integers called up , down , left and right",
      "code": "int up , down , left , right ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for j = 0 to m exclusive",
      "code": "for ( j = 0 ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if arr [ i ] [ j ] is ' * ' , increment count",
      "code": "if ( arr [ i ] [ j ] == ' * ' ) { count ++ ; }",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if count is greater than 0",
      "code": "if ( count > 0 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "up = i",
      "code": "up = i ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "set value of count to 0",
      "code": "count = 0 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = n to 0",
      "code": "for ( i = n - 1 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for j = 0 to m exclusive",
      "code": "for ( j = 0 ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if arr [ i ] [ j ] is ' * ' , increment count",
      "code": "if ( arr [ i ] [ j ] == ' * ' ) { count ++ ; }",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if count is greater than 0",
      "code": "if ( count > 0 )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "set value of down to i",
      "code": "down = i ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "set value of count to 0",
      "code": "count = 0 ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "for j = 0 to m exclusive",
      "code": "for ( j = 0 ; j < m ; j ++ )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "if arr [ i ] [ j ] is ' * ' , increment count",
      "code": "if ( arr [ i ] [ j ] == ' * ' ) { count ++ ; }",
      "indent": 3
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 31,
      "text": "if count is greater than 0",
      "code": "if ( count > 0 )",
      "indent": 2
    },
    {
      "line": 32,
      "text": "set left to j",
      "code": "left = j ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "count = 0",
      "code": "count = 0 ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 37,
      "text": "for j = m to 0",
      "code": "for ( j = m - 1 ; j >= 0 ; j -- )",
      "indent": 1
    },
    {
      "line": 38,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 39,
      "text": "if arr [ i ] [ j ] is ' * ' , increment count",
      "code": "if ( arr [ i ] [ j ] == ' * ' ) { count ++ ; }",
      "indent": 3
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 41,
      "text": "if count is greater than 0",
      "code": "if ( count > 0 )",
      "indent": 2
    },
    {
      "line": 42,
      "text": "set right to j",
      "code": "right = j ;",
      "indent": 3
    },
    {
      "line": 43,
      "text": "set count to 0",
      "code": "count = 0 ;",
      "indent": 3
    },
    {
      "line": 44,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 47,
      "text": "for i = up to down inclusive",
      "code": "for ( i = up ; i <= down ; i ++ )",
      "indent": 1
    },
    {
      "line": 48,
      "text": "for j = left to right inclusive , print arr [ i ] [ j ]",
      "code": "for ( j = left ; j <= right ; j ++ ) cout << arr [ i ] [ j ] ;",
      "indent": 2
    },
    {
      "line": 49,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 51,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 52,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , m , i , j , j , count = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 2,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string arr [ n ] [ m ] ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘char’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int up , down , left ;"
      ],
      "err_line": 42,
      "err_msg": "assignment of function ‘std::ios_base& std::right(std::ios_base&)’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "* count = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "* down = i ;"
      ],
      "err_line": 22,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "* count = 0 ;"
      ],
      "err_line": 23,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        44
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 44,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}