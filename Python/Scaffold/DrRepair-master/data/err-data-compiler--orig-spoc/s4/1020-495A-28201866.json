{
  "meta": {
    "index": 1020,
    "hitid": "3SCKNODZ0XAMECR5D92JHJT21A8N7E",
    "workerid": "A1APYLD4DUK33J",
    "probid": "495A",
    "subid": "28201866"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant double Pi = acosign of - 1 . 0",
      "code": "const double Pi = acos ( - 1.0 ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare getPossibilities with integer num as argument , returning integer",
      "code": "int getPossibilities ( int num )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "if num is 0 , return 2 from function",
      "code": "if ( num == 0 ) return 2 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if num is 1 , return 7 from function",
      "code": "if ( num == 1 ) return 7 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if num is 2 , return 2 from function",
      "code": "if ( num == 2 ) return 2 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if num is 3 , return 3 from function",
      "code": "if ( num == 3 ) return 3 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if num is 4 , return 3 from function",
      "code": "if ( num == 4 ) return 3 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if num is 5 , return 4 from function",
      "code": "if ( num == 5 ) return 4 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if num is 6 , return 2 from function",
      "code": "if ( num == 6 ) return 2 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if num is 7 , return 5 from function",
      "code": "if ( num == 7 ) return 5 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if num is 8 , return 1 from function",
      "code": "if ( num == 8 ) return 1 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "return 2",
      "code": "return 2 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 14,
      "text": "declare n as integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print result of run getPossibilities ( n / 10 ) * result of run getPossibilities ( n % 10 ) , \" \\ n \"",
      "code": "cout << getPossibilities ( n / 10 ) * getPossibilities ( n % 10 ) << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const double Pi = acos ( ) ;"
      ],
      "err_line": 0,
      "err_msg": "no matching function for call to ‘acos()’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int getPossibilities ( int num ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        16
      ],
      "mod_code": [
        "const double Pi = acos ( ) ;",
        "cout << getPossibilities ( n / 10 ) * getPossibilities ( n % 10 ) ;"
      ],
      "err_line": 0,
      "err_msg": "no matching function for call to ‘acos()’"
    },
    {
      "mod_line": [
        0,
        16,
        1
      ],
      "mod_code": [
        "const double Pi = acos ( ) ;",
        "cout << getPossibilities ( n / 10 ) * getPossibilities ( n % 10 ) ;",
        "int getPossibilities ( int num ) ;"
      ],
      "err_line": 0,
      "err_msg": "no matching function for call to ‘acos()’"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "const double Pi = acos ( ) ;",
        "int getPossibilities ( int num ) ;"
      ],
      "err_line": 0,
      "err_msg": "no matching function for call to ‘acos()’"
    },
    {
      "mod_line": [
        16,
        1
      ],
      "mod_code": [
        "cout << getPossibilities ( n / 10 ) * getPossibilities ( n % 10 ) ;",
        "int getPossibilities ( int num ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}