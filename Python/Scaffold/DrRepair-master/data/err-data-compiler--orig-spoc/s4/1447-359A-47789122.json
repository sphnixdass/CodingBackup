{
  "meta": {
    "index": 1447,
    "hitid": "38Z7YZ2SB3W46TLTCSYXC2EGK15IQQ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "359A",
    "subid": "47789122"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers n , m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n read m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare integer array a size n by m",
      "code": "int a [ n ] [ m ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 0 to m exclusive , read a [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < m ; j ++ ) { cin >> a [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if a [ i ] [ j ] is 1",
      "code": "if ( a [ i ] [ j ] == 1 )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if i is 0 or j is 0 or i is n - 1 or j is m - 1",
      "code": "if ( i == 0 || j == 0 || i == n - 1 || j == m - 1 )",
      "indent": 4
    },
    {
      "line": 11,
      "text": "print \" 2 \" , newline",
      "code": "cout << \" 2 \" << endl ;",
      "indent": 5
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 5
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print \" 4 \" , newline",
      "code": "cout << \" 4 \" << endl ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 2,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "if ( i == 0 || j == 0 || i == 0 || i == m - 1 )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        7,
        17
      ],
      "mod_code": [
        "if ( i == 0 || j == 0 || i == 0 || i == m - 1 )",
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        7,
        17,
        11
      ],
      "mod_code": [
        "if ( i == 0 || j == 0 || i == 0 || i == m - 1 )",
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << \" -1 \" << endl ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        7,
        17,
        9
      ],
      "mod_code": [
        "if ( i == 0 || j == 0 || i == 0 || i == m - 1 )",
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << \" -1 \" << endl ;",
        "if ( a [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        7,
        17,
        3
      ],
      "mod_code": [
        "if ( i == 0 || j == 0 || i == 0 || i == m - 1 )",
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << \" -1 \" << endl ;",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        7,
        11
      ],
      "mod_code": [
        "if ( i == 0 || j == 0 || i == 0 || i == m - 1 )",
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        7,
        11,
        9
      ],
      "mod_code": [
        "if ( i == 0 || j == 0 || i == 0 || i == m - 1 )",
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << \" -1 \" << endl ;",
        "if ( a [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        7,
        11,
        3
      ],
      "mod_code": [
        "if ( i == 0 || j == 0 || i == 0 || i == m - 1 )",
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << \" -1 \" << endl ;",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        7,
        9
      ],
      "mod_code": [
        "if ( i == 0 || j == 0 || i == 0 || i == m - 1 )",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( a [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        7,
        9,
        3
      ],
      "mod_code": [
        "if ( i == 0 || j == 0 || i == 0 || i == m - 1 )",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        7,
        3
      ],
      "mod_code": [
        "if ( i == 0 || j == 0 || i == 0 || i == m - 1 )",
        "for ( i = 0 ; i < n ; i ++ )",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        17,
        11,
        3
      ],
      "mod_code": [
        "if ( i == 0 || j == 0 || i == 0 || i == m - 1 )",
        "cout << \" -1 \" << endl ;",
        "cout << \" -1 \" << endl ;",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        17,
        9,
        3
      ],
      "mod_code": [
        "if ( i == 0 || j == 0 || i == 0 || i == m - 1 )",
        "cout << \" -1 \" << endl ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        17,
        3
      ],
      "mod_code": [
        "if ( i == 0 || j == 0 || i == 0 || i == m - 1 )",
        "cout << \" -1 \" << endl ;",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        11,
        9,
        3
      ],
      "mod_code": [
        "if ( i == 0 || j == 0 || i == 0 || i == m - 1 )",
        "cout << \" -1 \" << endl ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        11,
        3
      ],
      "mod_code": [
        "if ( i == 0 || j == 0 || i == 0 || i == m - 1 )",
        "cout << \" -1 \" << endl ;",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        9,
        3
      ],
      "mod_code": [
        "if ( i == 0 || j == 0 || i == 0 || i == m - 1 )",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "if ( i == 0 || j == 0 || i == 0 || i == m - 1 )",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        17,
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << \" -1 \" << endl ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        17,
        11,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << \" -1 \" << endl ;",
        "cout << \" -1 \" << endl ;",
        "if ( a [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        17,
        11,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << \" -1 \" << endl ;",
        "cout << \" -1 \" << endl ;",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << \" -1 \" << endl ;",
        "if ( a [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        17,
        9,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << \" -1 \" << endl ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << \" -1 \" << endl ;",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        11,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << \" -1 \" << endl ;",
        "if ( a [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        11,
        9,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << \" -1 \" << endl ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        11,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "cout << \" -1 \" << endl ;",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( a [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        17,
        11,
        9,
        3
      ],
      "mod_code": [
        "cout << \" -1 \" << endl ;",
        "cout << \" -1 \" << endl ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        17,
        11,
        3
      ],
      "mod_code": [
        "cout << \" -1 \" << endl ;",
        "cout << \" -1 \" << endl ;",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        17,
        9,
        3
      ],
      "mod_code": [
        "cout << \" -1 \" << endl ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        17,
        3
      ],
      "mod_code": [
        "cout << \" -1 \" << endl ;",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        9,
        3
      ],
      "mod_code": [
        "cout << \" -1 \" << endl ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "cout << \" -1 \" << endl ;",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "int a [ n + m ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}