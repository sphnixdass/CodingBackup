{
  "meta": {
    "index": 944,
    "hitid": "3D1TUISJWIUWYMSAT1I2M3B5NMAUI6",
    "workerid": "AIWEXPJAU66D9",
    "probid": "275A",
    "subid": "48195686"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare 2d array of integers f with size 3 by 3",
      "code": "int f [ 3 ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare 2d array of integers p with size 3 by 3",
      "code": "int p [ 3 ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i from 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for e from 0 to 3 exclusive , set f [ i ] [ e ] to 1",
      "code": "for ( int e = 0 ; e < 3 ; e ++ ) { f [ i ] [ e ] = 1 ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for e = 0 to 3 exclusive , read p [ i ] [ e ]",
      "code": "for ( int e = 0 ; e < 3 ; e ++ ) { cin >> p [ i ] [ e ] ; }",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i from 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for e from 0 to 3 exclusive",
      "code": "for ( int e = 0 ; e < 3 ; e ++ )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if p [ i ] [ e ] is greater than 0",
      "code": "if ( p [ i ] [ e ] > 0 )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "if f [ i ] [ e ] is equal to 1",
      "code": "if ( f [ i ] [ e ] == 1 )",
      "indent": 4
    },
    {
      "line": 13,
      "text": "change f [ i ] [ e ] to 0",
      "code": "f [ i ] [ e ] = 0 ;",
      "indent": 5
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 15,
      "text": "change f [ i ] [ e ] to 1",
      "code": "f [ i ] [ e ] = 1 ;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 17,
      "text": "if e + 1 > = 0 and e + 1 < 3",
      "code": "if ( e + 1 >= 0 && e + 1 < 3 )",
      "indent": 4
    },
    {
      "line": 18,
      "text": "if f [ i ] [ e + 1 ] = 1",
      "code": "if ( f [ i ] [ e + 1 ] == 1 )",
      "indent": 5
    },
    {
      "line": 19,
      "text": "set f [ i ] [ e + 1 ] to 0",
      "code": "f [ i ] [ e + 1 ] = 0 ;",
      "indent": 6
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 21,
      "text": "set f [ i ] [ e + 1 ] to 1",
      "code": "f [ i ] [ e + 1 ] = 1 ;",
      "indent": 6
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 24,
      "text": "if e - 1 > = 0 and e - 1 < 3",
      "code": "if ( e - 1 >= 0 && e - 1 < 3 )",
      "indent": 4
    },
    {
      "line": 25,
      "text": "if f [ i ] [ e - 1 ] = 1",
      "code": "if ( f [ i ] [ e - 1 ] == 1 )",
      "indent": 5
    },
    {
      "line": 26,
      "text": "assign 0 to f [ i ] [ e - 1 ]",
      "code": "f [ i ] [ e - 1 ] = 0 ;",
      "indent": 6
    },
    {
      "line": 27,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 28,
      "text": "assign 1 to f [ i ] [ e - 1 ]",
      "code": "f [ i ] [ e - 1 ] = 1 ;",
      "indent": 6
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 31,
      "text": "if i - 1 > = 0 and i - 1 < 3",
      "code": "if ( i - 1 >= 0 && i - 1 < 3 )",
      "indent": 4
    },
    {
      "line": 32,
      "text": "if f [ i - 1 ] [ e ] is equal to 1",
      "code": "if ( f [ i - 1 ] [ e ] == 1 )",
      "indent": 5
    },
    {
      "line": 33,
      "text": "assign 0 to f [ i - 1 ] [ e ]",
      "code": "f [ i - 1 ] [ e ] = 0 ;",
      "indent": 6
    },
    {
      "line": 34,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 35,
      "text": "assign 1 to f [ i - 1 ] [ e ]",
      "code": "f [ i - 1 ] [ e ] = 1 ;",
      "indent": 6
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 38,
      "text": "if i + 1 > = 0 and i + 1 < 3",
      "code": "if ( i + 1 >= 0 && i + 1 < 3 )",
      "indent": 4
    },
    {
      "line": 39,
      "text": "if f [ i + 1 ] [ e ] = 1",
      "code": "if ( f [ i + 1 ] [ e ] == 1 )",
      "indent": 5
    },
    {
      "line": 40,
      "text": "assign 0 to f [ i + 1 ] [ e ]",
      "code": "f [ i + 1 ] [ e ] = 0 ;",
      "indent": 6
    },
    {
      "line": 41,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 42,
      "text": "assign 1 to f [ i + 1 ] [ e ]",
      "code": "f [ i + 1 ] [ e ] = 1 ;",
      "indent": 6
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 45,
      "text": "decrement p [ i ] [ e ]",
      "code": "p [ i ] [ e ] -- ;",
      "indent": 4
    },
    {
      "line": 46,
      "text": "decrement e",
      "code": "e -- ;",
      "indent": 4
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 48,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 50,
      "text": "for integer i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 51,
      "text": "for integer e = 0 to 3 exclusive , print f [ i ] [ e ]",
      "code": "for ( int e = 0 ; e < 3 ; e ++ ) { cout << f [ i ] [ e ] ; }",
      "indent": 2
    },
    {
      "line": 52,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 53,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 54,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 55,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int f [ 3 ] [ 3 3 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int p [ 3 ] [ 3 3 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( e = 0 ; e < 3 ; e ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "int f [ i ] [ e - 1 ] = 0 ;"
      ],
      "err_line": 26,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "f [ i ] [ j - 1 ] = 1 ;"
      ],
      "err_line": 28,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 34,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "char f [ i + 1 ] [ e ] = 0 ;"
      ],
      "err_line": 40,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 41,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "char f [ i + 1 ] [ e ] = 1 ;"
      ],
      "err_line": 42,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        4,
        20
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        20,
        42
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "else else",
        "char f [ i + 1 ] [ e ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        20,
        42,
        19
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "else else",
        "char f [ i + 1 ] [ e ] = 1 ;",
        "f [ i ] [ e + 1 ] = ' 0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        20,
        42,
        21
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "else else",
        "char f [ i + 1 ] [ e ] = 1 ;",
        "f [ i ] [ ' e ' + 1 ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        20,
        42,
        41
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "else else",
        "char f [ i + 1 ] [ e ] = 1 ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        20,
        19
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "else else",
        "f [ i ] [ e + 1 ] = ' 0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        20,
        19,
        21
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "else else",
        "f [ i ] [ e + 1 ] = ' 0 ' ;",
        "f [ i ] [ ' e ' + 1 ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        20,
        19,
        41
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "else else",
        "f [ i ] [ e + 1 ] = ' 0 ' ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        20,
        21
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "else else",
        "f [ i ] [ ' e ' + 1 ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        20,
        21,
        41
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "else else",
        "f [ i ] [ ' e ' + 1 ] = 1 ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        20,
        41
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "else else",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        42
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "char f [ i + 1 ] [ e ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        42,
        19
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "char f [ i + 1 ] [ e ] = 1 ;",
        "f [ i ] [ e + 1 ] = ' 0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        42,
        19,
        21
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "char f [ i + 1 ] [ e ] = 1 ;",
        "f [ i ] [ e + 1 ] = ' 0 ' ;",
        "f [ i ] [ ' e ' + 1 ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        42,
        19,
        41
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "char f [ i + 1 ] [ e ] = 1 ;",
        "f [ i ] [ e + 1 ] = ' 0 ' ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        42,
        21
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "char f [ i + 1 ] [ e ] = 1 ;",
        "f [ i ] [ ' e ' + 1 ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        42,
        21,
        41
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "char f [ i + 1 ] [ e ] = 1 ;",
        "f [ i ] [ ' e ' + 1 ] = 1 ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        42,
        41
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "char f [ i + 1 ] [ e ] = 1 ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        19
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "f [ i ] [ e + 1 ] = ' 0 ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        19,
        21
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "f [ i ] [ e + 1 ] = ' 0 ' ;",
        "f [ i ] [ ' e ' + 1 ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        19,
        21,
        41
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "f [ i ] [ e + 1 ] = ' 0 ' ;",
        "f [ i ] [ ' e ' + 1 ] = 1 ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        19,
        41
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "f [ i ] [ e + 1 ] = ' 0 ' ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        21
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "f [ i ] [ ' e ' + 1 ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        21,
        41
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "f [ i ] [ ' e ' + 1 ] = 1 ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        41
      ],
      "mod_code": [
        "for ( int e = 0 ; e < 3 ; e ++ ) f [ i ] [ e ] [ e ] ] = 1 ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        20,
        42
      ],
      "mod_code": [
        "else else",
        "char f [ i + 1 ] [ e ] = 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        42,
        19
      ],
      "mod_code": [
        "else else",
        "char f [ i + 1 ] [ e ] = 1 ;",
        "f [ i ] [ e + 1 ] = ' 0 ' ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        42,
        19,
        21
      ],
      "mod_code": [
        "else else",
        "char f [ i + 1 ] [ e ] = 1 ;",
        "f [ i ] [ e + 1 ] = ' 0 ' ;",
        "f [ i ] [ ' e ' + 1 ] = 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        42,
        19,
        41
      ],
      "mod_code": [
        "else else",
        "char f [ i + 1 ] [ e ] = 1 ;",
        "f [ i ] [ e + 1 ] = ' 0 ' ;",
        "else else"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        42,
        21
      ],
      "mod_code": [
        "else else",
        "char f [ i + 1 ] [ e ] = 1 ;",
        "f [ i ] [ ' e ' + 1 ] = 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        42,
        21,
        41
      ],
      "mod_code": [
        "else else",
        "char f [ i + 1 ] [ e ] = 1 ;",
        "f [ i ] [ ' e ' + 1 ] = 1 ;",
        "else else"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        42,
        41
      ],
      "mod_code": [
        "else else",
        "char f [ i + 1 ] [ e ] = 1 ;",
        "else else"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        19
      ],
      "mod_code": [
        "else else",
        "f [ i ] [ e + 1 ] = ' 0 ' ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        19,
        21
      ],
      "mod_code": [
        "else else",
        "f [ i ] [ e + 1 ] = ' 0 ' ;",
        "f [ i ] [ ' e ' + 1 ] = 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        19,
        21,
        41
      ],
      "mod_code": [
        "else else",
        "f [ i ] [ e + 1 ] = ' 0 ' ;",
        "f [ i ] [ ' e ' + 1 ] = 1 ;",
        "else else"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        19,
        41
      ],
      "mod_code": [
        "else else",
        "f [ i ] [ e + 1 ] = ' 0 ' ;",
        "else else"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        21
      ],
      "mod_code": [
        "else else",
        "f [ i ] [ ' e ' + 1 ] = 1 ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        21,
        41
      ],
      "mod_code": [
        "else else",
        "f [ i ] [ ' e ' + 1 ] = 1 ;",
        "else else"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        41
      ],
      "mod_code": [
        "else else",
        "else else"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        42,
        19
      ],
      "mod_code": [
        "char f [ i + 1 ] [ e ] = 1 ;",
        "f [ i ] [ e + 1 ] = ' 0 ' ;"
      ],
      "err_line": 42,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        42,
        19,
        21
      ],
      "mod_code": [
        "char f [ i + 1 ] [ e ] = 1 ;",
        "f [ i ] [ e + 1 ] = ' 0 ' ;",
        "f [ i ] [ ' e ' + 1 ] = 1 ;"
      ],
      "err_line": 42,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        42,
        19,
        21,
        41
      ],
      "mod_code": [
        "char f [ i + 1 ] [ e ] = 1 ;",
        "f [ i ] [ e + 1 ] = ' 0 ' ;",
        "f [ i ] [ ' e ' + 1 ] = 1 ;",
        "else else"
      ],
      "err_line": 41,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        42,
        19,
        41
      ],
      "mod_code": [
        "char f [ i + 1 ] [ e ] = 1 ;",
        "f [ i ] [ e + 1 ] = ' 0 ' ;",
        "else else"
      ],
      "err_line": 41,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        42,
        21
      ],
      "mod_code": [
        "char f [ i + 1 ] [ e ] = 1 ;",
        "f [ i ] [ ' e ' + 1 ] = 1 ;"
      ],
      "err_line": 42,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        42,
        21,
        41
      ],
      "mod_code": [
        "char f [ i + 1 ] [ e ] = 1 ;",
        "f [ i ] [ ' e ' + 1 ] = 1 ;",
        "else else"
      ],
      "err_line": 41,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        42,
        41
      ],
      "mod_code": [
        "char f [ i + 1 ] [ e ] = 1 ;",
        "else else"
      ],
      "err_line": 41,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        19,
        21,
        41
      ],
      "mod_code": [
        "f [ i ] [ e + 1 ] = ' 0 ' ;",
        "f [ i ] [ ' e ' + 1 ] = 1 ;",
        "else else"
      ],
      "err_line": 41,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        19,
        41
      ],
      "mod_code": [
        "f [ i ] [ e + 1 ] = ' 0 ' ;",
        "else else"
      ],
      "err_line": 41,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        21,
        41
      ],
      "mod_code": [
        "f [ i ] [ ' e ' + 1 ] = 1 ;",
        "else else"
      ],
      "err_line": 41,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}