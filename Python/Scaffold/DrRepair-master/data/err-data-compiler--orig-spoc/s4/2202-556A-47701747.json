{
  "meta": {
    "index": 2202,
    "hitid": "3A9LA2FRWS8OJVBLSOB46Y9UHRBXH7",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "556A",
    "subid": "47701747"
  },
  "lines": [
    {
      "line": 0,
      "text": "tes = string",
      "code": "string tes ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "n0 = integer",
      "code": "int n0 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "n1 = integer",
      "code": "int n1 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "i = integer",
      "code": "int i ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "n0 = 0",
      "code": "n0 = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "n1 = 0",
      "code": "n1 = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read tes",
      "code": "cin >> tes ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if tes [ i ] is 0",
      "code": "if ( tes [ i ] == ' 0 ' )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "increment n0",
      "code": "n0 ++ ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 14,
      "text": "increment n1",
      "code": "n1 ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print abs ( n0 - n1 )",
      "code": "cout << abs ( n0 - n1 ) << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "gets ( tes ) ;"
      ],
      "err_line": 9,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "if ( tes [ i ] == 0 )",
        "gets ( tes ) ;"
      ],
      "err_line": 9,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        9,
        13
      ],
      "mod_code": [
        "if ( tes [ i ] == 0 )",
        "gets ( tes ) ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "if ( tes [ i ] == 0 )",
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "if ( ! tes [ i ] )",
        "gets ( tes ) ;"
      ],
      "err_line": 9,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        9,
        13
      ],
      "mod_code": [
        "if ( ! tes [ i ] )",
        "gets ( tes ) ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "if ( ! tes [ i ] )",
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "gets ( tes ) ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}