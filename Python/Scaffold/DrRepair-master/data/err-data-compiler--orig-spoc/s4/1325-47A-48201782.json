{
  "meta": {
    "index": 1325,
    "hitid": "3UEBBGULPFICOVQKSTCHJ6YD6S6UFY",
    "workerid": "AIWEXPJAU66D9",
    "probid": "47A",
    "subid": "48201782"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "asd = map from integer to integer",
      "code": "map < int , int > asd ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let temp be integer",
      "code": "int temp ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for integer q = 1 to 500 inclusive",
      "code": "for ( int q = 1 ; q <= 500 ; q ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "temp = q * ( q + 1 )",
      "code": "temp = q * ( q + 1 ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "temp = temp / 2",
      "code": "temp = temp / 2 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment asd [ temp ]",
      "code": "asd [ temp ] ++ ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "z = integer",
      "code": "int z ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read z",
      "code": "cin >> z ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if asd [ z ] is greater than 0",
      "code": "if ( asd [ z ] > 0 )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "map < int , asd ;"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘std::map<int, int>::mapped_type {aka int}[int]’ for array subscript"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "map < int , asd ;"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        12
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "map < int , asd ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        12,
        9
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "map < int , asd ;",
        "else else",
        "z = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        12,
        10
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "map < int , asd ;",
        "else else",
        "if ( asd [ z ] >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        12,
        4
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "map < int , asd ;",
        "else else",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        9
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "map < int , asd ;",
        "z = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        9,
        10
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "map < int , asd ;",
        "z = getchar ( ) ;",
        "if ( asd [ z ] >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        9,
        4
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "map < int , asd ;",
        "z = getchar ( ) ;",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        10
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "map < int , asd ;",
        "if ( asd [ z ] >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        10,
        4
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "map < int , asd ;",
        "if ( asd [ z ] >= 0 )",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        4
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "map < int , asd ;",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘std::map<int, int>::mapped_type {aka int}[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        9
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "else else",
        "z = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘std::map<int, int>::mapped_type {aka int}[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        9,
        10
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "else else",
        "z = getchar ( ) ;",
        "if ( asd [ z ] >= 0 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘std::map<int, int>::mapped_type {aka int}[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        9,
        4
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "else else",
        "z = getchar ( ) ;",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘std::map<int, int>::mapped_type {aka int}[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        10
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "else else",
        "if ( asd [ z ] >= 0 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘std::map<int, int>::mapped_type {aka int}[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        10,
        4
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "else else",
        "if ( asd [ z ] >= 0 )",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘std::map<int, int>::mapped_type {aka int}[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        4
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "else else",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘std::map<int, int>::mapped_type {aka int}[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "z = getchar ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘std::map<int, int>::mapped_type {aka int}[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        9,
        10
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "z = getchar ( ) ;",
        "if ( asd [ z ] >= 0 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘std::map<int, int>::mapped_type {aka int}[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        9,
        10,
        4
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "z = getchar ( ) ;",
        "if ( asd [ z ] >= 0 )",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘std::map<int, int>::mapped_type {aka int}[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        9,
        4
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "z = getchar ( ) ;",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘std::map<int, int>::mapped_type {aka int}[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "if ( asd [ z ] >= 0 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘std::map<int, int>::mapped_type {aka int}[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        10,
        4
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "if ( asd [ z ] >= 0 )",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘std::map<int, int>::mapped_type {aka int}[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "asd [ temp ] [ temp ] ++ ;",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘std::map<int, int>::mapped_type {aka int}[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "map < int , asd ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        12,
        9
      ],
      "mod_code": [
        "map < int , asd ;",
        "else else",
        "z = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        12,
        9,
        10
      ],
      "mod_code": [
        "map < int , asd ;",
        "else else",
        "z = getchar ( ) ;",
        "if ( asd [ z ] >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        12,
        9,
        4
      ],
      "mod_code": [
        "map < int , asd ;",
        "else else",
        "z = getchar ( ) ;",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        12,
        10
      ],
      "mod_code": [
        "map < int , asd ;",
        "else else",
        "if ( asd [ z ] >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        12,
        10,
        4
      ],
      "mod_code": [
        "map < int , asd ;",
        "else else",
        "if ( asd [ z ] >= 0 )",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        12,
        4
      ],
      "mod_code": [
        "map < int , asd ;",
        "else else",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "map < int , asd ;",
        "z = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        9,
        10
      ],
      "mod_code": [
        "map < int , asd ;",
        "z = getchar ( ) ;",
        "if ( asd [ z ] >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        9,
        10,
        4
      ],
      "mod_code": [
        "map < int , asd ;",
        "z = getchar ( ) ;",
        "if ( asd [ z ] >= 0 )",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        9,
        4
      ],
      "mod_code": [
        "map < int , asd ;",
        "z = getchar ( ) ;",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "map < int , asd ;",
        "if ( asd [ z ] >= 0 )"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10,
        4
      ],
      "mod_code": [
        "map < int , asd ;",
        "if ( asd [ z ] >= 0 )",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "map < int , asd ;",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘asd’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        9
      ],
      "mod_code": [
        "else else",
        "z = getchar ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        9,
        10
      ],
      "mod_code": [
        "else else",
        "z = getchar ( ) ;",
        "if ( asd [ z ] >= 0 )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        9,
        10,
        4
      ],
      "mod_code": [
        "else else",
        "z = getchar ( ) ;",
        "if ( asd [ z ] >= 0 )",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        9,
        4
      ],
      "mod_code": [
        "else else",
        "z = getchar ( ) ;",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        10
      ],
      "mod_code": [
        "else else",
        "if ( asd [ z ] >= 0 )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        10,
        4
      ],
      "mod_code": [
        "else else",
        "if ( asd [ z ] >= 0 )",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "else else",
        "temp += ( q + 1 ) ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}