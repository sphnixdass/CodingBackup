{
  "meta": {
    "index": 945,
    "hitid": "3D1UCPY6GG3JAM3E5VAAM5RR7DL834",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "275A",
    "subid": "48767660"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a = 2d integer array of size [ 3 ] [ 3 ]",
      "code": "int a [ 3 ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "b = 2d integer array of size [ 3 ] [ 3 ]",
      "code": "int b [ 3 ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to 2",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for j = 0 to 2 , b [ i ] [ j ] = 0",
      "code": "for ( int j = 0 ; j < 3 ; j ++ ) { b [ i ] [ j ] = 0 ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to 2",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for j = 0 to 2",
      "code": "for ( int j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "read a [ i ] [ j ]",
      "code": "cin >> a [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if a [ i ] [ j ] modulo 2 , a [ i ] [ j ] = 1",
      "code": "if ( a [ i ] [ j ] % 2 ) { a [ i ] [ j ] = 1 ; }",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if a [ i ] [ j ] modulo 2 is 0 , a [ i ] [ j ] = 0",
      "code": "if ( a [ i ] [ j ] % 2 == 0 ) { a [ i ] [ j ] = 0 ; }",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 0 to 2",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for j = 0 to 2",
      "code": "for ( int j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if a [ i ] [ j ]",
      "code": "if ( a [ i ] [ j ] )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "increment b [ i ] [ j ]",
      "code": "b [ i ] [ j ] ++ ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "if i + 1 < 3 , b [ i + 1 ] [ j ]",
      "code": "if ( i + 1 < 3 ) { b [ i + 1 ] [ j ] ++ ; }",
      "indent": 4
    },
    {
      "line": 18,
      "text": "if i - 1 > = 0 , b [ i - 1 ] [ j ]",
      "code": "if ( i - 1 >= 0 ) { b [ i - 1 ] [ j ] ++ ; }",
      "indent": 4
    },
    {
      "line": 19,
      "text": "if j + 1 < 3 , b [ i ] [ j + 1 ]",
      "code": "if ( j + 1 < 3 ) { b [ i ] [ j + 1 ] ++ ; }",
      "indent": 4
    },
    {
      "line": 20,
      "text": "if j - 1 > = 0 , b [ i ] [ j - 1 ]",
      "code": "if ( j - 1 >= 0 ) { b [ i ] [ j - 1 ] ++ ; }",
      "indent": 4
    },
    {
      "line": 21,
      "text": "if b [ i ] [ j ] modulo 2 is 0 , b [ i ] [ j ] = 0",
      "code": "if ( b [ i ] [ j ] % 2 == 0 ) { b [ i ] [ j ] = 0 ; }",
      "indent": 4
    },
    {
      "line": 22,
      "text": "if i + 1 < 3 and b [ i + 1 ] [ j ] modulo 2 is 0 , b [ i + 1 ] [ j ] = 0",
      "code": "if ( i + 1 < 3 && b [ i + 1 ] [ j ] % 2 == 0 ) { b [ i + 1 ] [ j ] = 0 ; }",
      "indent": 4
    },
    {
      "line": 23,
      "text": "if i - 1 > = 0 and b [ i - 1 ] [ j ] modulo 2 is 0 , b [ i - 1 ] [ j ] = 0",
      "code": "if ( i - 1 >= 0 && b [ i - 1 ] [ j ] % 2 == 0 ) { b [ i - 1 ] [ j ] = 0 ; }",
      "indent": 4
    },
    {
      "line": 24,
      "text": "if j + 1 < 3 and b [ i ] [ j + 1 ] modulo 2 is 0 , b [ i ] [ j + 1 ] = 0",
      "code": "if ( j + 1 < 3 && b [ i ] [ j + 1 ] % 2 == 0 ) { b [ i ] [ j + 1 ] = 0 ; }",
      "indent": 4
    },
    {
      "line": 25,
      "text": "if j - 1 > = 0 and b [ i ] [ j - 1 ] modulo 2 is 0 , b [ i ] [ j - 1 ] = 0",
      "code": "if ( j - 1 >= 0 && b [ i ] [ j - 1 ] % 2 == 0 ) { b [ i ] [ j - 1 ] = 0 ; }",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "for i = 0 to 2",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "for j = 0 to 2 , b [ i ] [ j ] = 1 - b [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < 3 ; j ++ ) { b [ i ] [ j ] = 1 - b [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "print b [ 0 ] [ 0 ] , b [ 0 ] [ 1 ] , b [ 0 ] [ 2 ]",
      "code": "cout << b [ 0 ] [ 0 ] << b [ 0 ] [ 1 ] << b [ 0 ] [ 2 ] << endl ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "print b [ 1 ] [ 0 ] , b [ 1 ] [ 1 ] , b [ 1 ] [ 2 ]",
      "code": "cout << b [ 1 ] [ 0 ] << b [ 1 ] [ 1 ] << b [ 1 ] [ 2 ] << endl ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "print b [ 2 ] [ 0 ] , b [ 2 ] [ 1 ] , b [ 2 ] [ 2 ]",
      "code": "cout << b [ 2 ] [ 0 ] << b [ 2 ] [ 1 ] << b [ 2 ] [ 2 ] << endl ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ 3 ] [ 3 ] [ 3 ] ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [3]’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( j = 0 ; j < 2 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( j = 0 ; j < 2 ; j ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "for ( i = 0 ; i < 2 ; i ++ )"
      ],
      "err_line": 29,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}