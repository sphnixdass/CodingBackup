{
  "meta": {
    "index": 1113,
    "hitid": "3GONHBMNHVSZG4CBK3F2VOX15QDMZW",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1085A",
    "subid": "49021765"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integer i",
      "code": "int i ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s and sd are strings",
      "code": "string s , sd ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "sd = s [ ( size of s - 1 ) / 2 ]",
      "code": "sd = s [ ( s . size ( ) - 1 ) / 2 ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 1 to length of s exclusive",
      "code": "for ( i = 1 ; i < s . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "stop the loop if length of sd = length of s",
      "code": "if ( sd . size ( ) == s . size ( ) ) break ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "sd = sd + s [ ( s . size ( ) - 1 ) / 2 + i ]",
      "code": "sd = sd + s [ ( s . size ( ) - 1 ) / 2 + i ] ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "stop the loop if length of sd = length of s",
      "code": "if ( sd . size ( ) == s . size ( ) ) break ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "sd = sd + s [ ( s . size ( ) - 1 ) / 2 - i ]",
      "code": "sd = sd + s [ ( s . size ( ) - 1 ) / 2 - i ] ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print sd and a new line",
      "code": "cout << sd << endl ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "sd = s [ s . size ( ) - 1 ) / 2 ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string s , sd sd ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int sd = s [ s . size ( ) - 1 ) / 2 ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        0
      ],
      "mod_code": [
        "sd = s [ s . size ( ) - 1 ) / 2 ] ;",
        "int n ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        0,
        11
      ],
      "mod_code": [
        "sd = s [ s . size ( ) - 1 ) / 2 ] ;",
        "int n ;",
        "cout << \" sd \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        0,
        11,
        1
      ],
      "mod_code": [
        "sd = s [ s . size ( ) - 1 ) / 2 ] ;",
        "int n ;",
        "cout << \" sd \" << endl ;",
        "string s , sd sd ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        4,
        0,
        11,
        3
      ],
      "mod_code": [
        "sd = s [ s . size ( ) - 1 ) / 2 ] ;",
        "int n ;",
        "cout << \" sd \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        0,
        1
      ],
      "mod_code": [
        "sd = s [ s . size ( ) - 1 ) / 2 ] ;",
        "int n ;",
        "string s , sd sd ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        4,
        0,
        1,
        3
      ],
      "mod_code": [
        "sd = s [ s . size ( ) - 1 ) / 2 ] ;",
        "int n ;",
        "string s , sd sd ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        4,
        0,
        3
      ],
      "mod_code": [
        "sd = s [ s . size ( ) - 1 ) / 2 ] ;",
        "int n ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "sd = s [ s . size ( ) - 1 ) / 2 ] ;",
        "cout << \" sd \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        11,
        1
      ],
      "mod_code": [
        "sd = s [ s . size ( ) - 1 ) / 2 ] ;",
        "cout << \" sd \" << endl ;",
        "string s , sd sd ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        4,
        11,
        1,
        3
      ],
      "mod_code": [
        "sd = s [ s . size ( ) - 1 ) / 2 ] ;",
        "cout << \" sd \" << endl ;",
        "string s , sd sd ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        4,
        11,
        3
      ],
      "mod_code": [
        "sd = s [ s . size ( ) - 1 ) / 2 ] ;",
        "cout << \" sd \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "sd = s [ s . size ( ) - 1 ) / 2 ] ;",
        "string s , sd sd ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        4,
        1,
        3
      ],
      "mod_code": [
        "sd = s [ s . size ( ) - 1 ) / 2 ] ;",
        "string s , sd sd ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "sd = s [ s . size ( ) - 1 ) / 2 ] ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "int n ;",
        "cout << \" sd \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        11,
        1
      ],
      "mod_code": [
        "int n ;",
        "cout << \" sd \" << endl ;",
        "string s , sd sd ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        0,
        11,
        1,
        4
      ],
      "mod_code": [
        "int n ;",
        "cout << \" sd \" << endl ;",
        "string s , sd sd ;",
        "int sd = s [ s . size ( ) - 1 ) / 2 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        0,
        11,
        1,
        3
      ],
      "mod_code": [
        "int n ;",
        "cout << \" sd \" << endl ;",
        "string s , sd sd ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        0,
        11,
        4
      ],
      "mod_code": [
        "int n ;",
        "cout << \" sd \" << endl ;",
        "int sd = s [ s . size ( ) - 1 ) / 2 ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        0,
        11,
        4,
        3
      ],
      "mod_code": [
        "int n ;",
        "cout << \" sd \" << endl ;",
        "int sd = s [ s . size ( ) - 1 ) / 2 ] ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        11,
        3
      ],
      "mod_code": [
        "int n ;",
        "cout << \" sd \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int n ;",
        "string s , sd sd ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        0,
        1,
        4
      ],
      "mod_code": [
        "int n ;",
        "string s , sd sd ;",
        "int sd = s [ s . size ( ) - 1 ) / 2 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        0,
        1,
        4,
        3
      ],
      "mod_code": [
        "int n ;",
        "string s , sd sd ;",
        "int sd = s [ s . size ( ) - 1 ) / 2 ] ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        0,
        1,
        3
      ],
      "mod_code": [
        "int n ;",
        "string s , sd sd ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "int n ;",
        "int sd = s [ s . size ( ) - 1 ) / 2 ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        0,
        4,
        3
      ],
      "mod_code": [
        "int n ;",
        "int sd = s [ s . size ( ) - 1 ) / 2 ] ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "int n ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "cout << \" sd \" << endl ;",
        "string s , sd sd ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        11,
        1,
        4
      ],
      "mod_code": [
        "cout << \" sd \" << endl ;",
        "string s , sd sd ;",
        "int sd = s [ s . size ( ) - 1 ) / 2 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        11,
        1,
        4,
        3
      ],
      "mod_code": [
        "cout << \" sd \" << endl ;",
        "string s , sd sd ;",
        "int sd = s [ s . size ( ) - 1 ) / 2 ] ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        11,
        1,
        3
      ],
      "mod_code": [
        "cout << \" sd \" << endl ;",
        "string s , sd sd ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        11,
        4
      ],
      "mod_code": [
        "cout << \" sd \" << endl ;",
        "int sd = s [ s . size ( ) - 1 ) / 2 ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        11,
        4,
        3
      ],
      "mod_code": [
        "cout << \" sd \" << endl ;",
        "int sd = s [ s . size ( ) - 1 ) / 2 ] ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "cout << \" sd \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "string s , sd sd ;",
        "int sd = s [ s . size ( ) - 1 ) / 2 ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        1,
        4,
        3
      ],
      "mod_code": [
        "string s , sd sd ;",
        "int sd = s [ s . size ( ) - 1 ) / 2 ] ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "string s , sd sd ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘sd’"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "int sd = s [ s . size ( ) - 1 ) / 2 ] ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}