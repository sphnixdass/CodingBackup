{
  "meta": {
    "index": 1814,
    "hitid": "3XBYQ44Z6PYZZ4XQIDW7IYYBJJ4TWO",
    "workerid": "AIWEXPJAU66D9",
    "probid": "761A",
    "subid": "48087845"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create new integers a and b",
      "code": "int a , b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read variables a and b from the input",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if absolute value of a - b = 1",
      "code": "if ( abs ( a - b ) == 1 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print \" YES \" to the standard output",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else if a = b and ( a and b ! = 0 )",
      "code": "else if ( a == b && ( a != 0 && b != 0 ) )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print \" NO \" to the output stream",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a , b b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "if ( abs ( a - b ) = 1 )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int a , b b ;",
        "cout << \" NO \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        1,
        8,
        3
      ],
      "mod_code": [
        "int a , b b ;",
        "cout << \" NO \" ;",
        "if ( abs ( a - b ) = 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        1,
        8,
        3,
        4
      ],
      "mod_code": [
        "int a , b b ;",
        "cout << \" NO \" ;",
        "if ( abs ( a - b ) = 1 )",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        1,
        8,
        3,
        7
      ],
      "mod_code": [
        "int a , b b ;",
        "cout << \" NO \" ;",
        "if ( abs ( a - b ) = 1 )",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        1,
        8,
        4
      ],
      "mod_code": [
        "int a , b b ;",
        "cout << \" NO \" ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        1,
        8,
        4,
        7
      ],
      "mod_code": [
        "int a , b b ;",
        "cout << \" NO \" ;",
        "cout << \" YES \" ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        1,
        8,
        7
      ],
      "mod_code": [
        "int a , b b ;",
        "cout << \" NO \" ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int a , b b ;",
        "if ( abs ( a - b ) = 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "int a , b b ;",
        "if ( abs ( a - b ) = 1 )",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        7
      ],
      "mod_code": [
        "int a , b b ;",
        "if ( abs ( a - b ) = 1 )",
        "cout << \" YES \" ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        1,
        3,
        7
      ],
      "mod_code": [
        "int a , b b ;",
        "if ( abs ( a - b ) = 1 )",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int a , b b ;",
        "cout << \" YES \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        1,
        4,
        7
      ],
      "mod_code": [
        "int a , b b ;",
        "cout << \" YES \" ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int a , b b ;",
        "else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "if ( abs ( a - b ) = 1 )"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        3,
        4
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "if ( abs ( a - b ) = 1 )",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        3,
        4,
        7
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "if ( abs ( a - b ) = 1 )",
        "cout << \" YES \" ;",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        3,
        7
      ],
      "mod_code": [
        "cout << \" NO \" ;",
        "if ( abs ( a - b ) = 1 )",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "if ( abs ( a - b ) = 1 )",
        "cout << \" YES \" ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        4,
        7
      ],
      "mod_code": [
        "if ( abs ( a - b ) = 1 )",
        "cout << \" YES \" ;",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "if ( abs ( a - b ) = 1 )",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "lvalue required as left operand of assignment"
    }
  ]
}