{
  "meta": {
    "index": 89,
    "hitid": "36AZSFEYZ4UMOT34SH0QW29B51NVB6",
    "workerid": "A1APYLD4DUK33J",
    "probid": "3A",
    "subid": "46040797"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string S",
      "code": "string S ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read S",
      "code": "cin >> S ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integers x1 to y1 with x1 = S [ 0 ] - 49 , y1 = S [ 1 ] - 97",
      "code": "int x1 = S [ 0 ] - 49 , y1 = S [ 1 ] - 97 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read S",
      "code": "cin >> S ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create integers x2 , y2 with x2 = S [ 0 ] - 49 , y2 = S [ 1 ] - 97",
      "code": "int x2 = S [ 0 ] - 49 , y2 = S [ 1 ] - 97 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "create string Way with Way = \" \"",
      "code": "string Way = \" \" ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "create integer counter with counter = 0",
      "code": "int counter = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "while true",
      "code": "while ( true )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "create integer sign_X with sign_X = ( x2 - x1 ) / absolute value of x2 - x1 if x2 - x1 is not 0 , else 0",
      "code": "int sign_X = x2 - x1 != 0 ? ( x2 - x1 ) / abs ( x2 - x1 ) : 0 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "create integer sigh_Y with sign_Y = ( y2 - y1 ) / absolute value of y2 - y1 if y2 - y1 is not 0 , else 0",
      "code": "int sign_Y = y2 - y1 != 0 ? ( y2 - y1 ) / abs ( y2 - y1 ) : 0 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if sign_X is 1",
      "code": "if ( sign_X == 1 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "increment Way by \" R \"",
      "code": "Way += \" R \" ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else if sign_X is - 1",
      "code": "else if ( sign_X == - 1 )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "increment Way by \" L \"",
      "code": "Way += \" L \" ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if sign_Y is 1",
      "code": "if ( sign_Y == 1 )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "increment Way by \" U \"",
      "code": "Way += \" U \" ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else if sign_Y is - 1",
      "code": "else if ( sign_Y == - 1 )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "increment Way by \" D \"",
      "code": "Way += \" D \" ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "increment x1 by sign_X",
      "code": "x1 += sign_X ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "increment y1 by sign_Y",
      "code": "y1 += sign_Y ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if not sign_X bitwise and not sign_Y , break loop",
      "code": "if ( ! sign_X & ! sign_Y ) break ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "increment Way by ' \\ n '",
      "code": "Way += ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "increment counter",
      "code": "counter ++ ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print counter print newline print Way",
      "code": "cout << counter << endl << Way ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 2,
      "err_msg": "‘S’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( S ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int x1 = y1 [ 0 ] - 49 , y1 = S [ 1 ] - 97 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘double (*)(double) throw ()’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "gets ( S ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "const string Way = \" \" ;"
      ],
      "err_line": 12,
      "err_msg": "passing ‘const string {aka const std::__cxx11::basic_string<char>}’ as ‘this’ argument discards qualifiers [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        10
      ],
      "mod_code": [
        "string Way = \" \" ;",
        "int sign_X = ( x2 - x1 ) / abs ( x2 - x1 ? x2 - x1 : 0 ) ;",
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        10,
        23
      ],
      "mod_code": [
        "string Way = \" \" ;",
        "int sign_X = ( x2 - x1 ) / abs ( x2 - x1 ? x2 - x1 : 0 ) ;",
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "if ( ! sign_X & sign_Y ) break ;"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        10,
        27
      ],
      "mod_code": [
        "string Way = \" \" ;",
        "int sign_X = ( x2 - x1 ) / abs ( x2 - x1 ? x2 - x1 : 0 ) ;",
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "cout << counter << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        10,
        13
      ],
      "mod_code": [
        "string Way = \" \" ;",
        "int sign_X = ( x2 - x1 ) / abs ( x2 - x1 ? x2 - x1 : 0 ) ;",
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "else if ( ! sign_X )"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "string Way = \" \" ;",
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        23
      ],
      "mod_code": [
        "string Way = \" \" ;",
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "if ( ! sign_X & sign_Y ) break ;"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        23,
        27
      ],
      "mod_code": [
        "string Way = \" \" ;",
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "if ( ! sign_X & sign_Y ) break ;",
        "cout << counter << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        23,
        13
      ],
      "mod_code": [
        "string Way = \" \" ;",
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "if ( ! sign_X & sign_Y ) break ;",
        "else if ( ! sign_X )"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        27
      ],
      "mod_code": [
        "string Way = \" \" ;",
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "cout << counter << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        27,
        13
      ],
      "mod_code": [
        "string Way = \" \" ;",
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "cout << counter << endl ;",
        "else if ( ! sign_X )"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        13
      ],
      "mod_code": [
        "string Way = \" \" ;",
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "else if ( ! sign_X )"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "int sign_X = ( x2 - x1 ) / abs ( x2 - x1 ? x2 - x1 : 0 ) ;",
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        23
      ],
      "mod_code": [
        "int sign_X = ( x2 - x1 ) / abs ( x2 - x1 ? x2 - x1 : 0 ) ;",
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "if ( ! sign_X & sign_Y ) break ;"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        23,
        27
      ],
      "mod_code": [
        "int sign_X = ( x2 - x1 ) / abs ( x2 - x1 ? x2 - x1 : 0 ) ;",
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "if ( ! sign_X & sign_Y ) break ;",
        "cout << counter << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        23,
        13
      ],
      "mod_code": [
        "int sign_X = ( x2 - x1 ) / abs ( x2 - x1 ? x2 - x1 : 0 ) ;",
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "if ( ! sign_X & sign_Y ) break ;",
        "else if ( ! sign_X )"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        27
      ],
      "mod_code": [
        "int sign_X = ( x2 - x1 ) / abs ( x2 - x1 ? x2 - x1 : 0 ) ;",
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "cout << counter << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        27,
        13
      ],
      "mod_code": [
        "int sign_X = ( x2 - x1 ) / abs ( x2 - x1 ? x2 - x1 : 0 ) ;",
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "cout << counter << endl ;",
        "else if ( ! sign_X )"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        10,
        13
      ],
      "mod_code": [
        "int sign_X = ( x2 - x1 ) / abs ( x2 - x1 ? x2 - x1 : 0 ) ;",
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "else if ( ! sign_X )"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        23
      ],
      "mod_code": [
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "if ( ! sign_X & sign_Y ) break ;"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        23,
        27
      ],
      "mod_code": [
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "if ( ! sign_X & sign_Y ) break ;",
        "cout << counter << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        23,
        27,
        13
      ],
      "mod_code": [
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "if ( ! sign_X & sign_Y ) break ;",
        "cout << counter << endl ;",
        "else if ( ! sign_X )"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        23,
        13
      ],
      "mod_code": [
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "if ( ! sign_X & sign_Y ) break ;",
        "else if ( ! sign_X )"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        27
      ],
      "mod_code": [
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "cout << counter << endl ;"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        27,
        13
      ],
      "mod_code": [
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "cout << counter << endl ;",
        "else if ( ! sign_X )"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "int sigh_Y = ( y2 - y1 ) / abs ( y2 - y1 ? y2 : 0 ) ;",
        "else if ( ! sign_X )"
      ],
      "err_line": 16,
      "err_msg": "‘sign_Y’ was not declared in this scope"
    }
  ]
}