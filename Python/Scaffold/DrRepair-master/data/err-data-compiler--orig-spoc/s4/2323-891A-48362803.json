{
  "meta": {
    "index": 2323,
    "hitid": "3R16PJFTS3LONJOJEYCWMFSOFQEK4C",
    "workerid": "A1APYLD4DUK33J",
    "probid": "891A",
    "subid": "48362803"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant long long Mod with Mod = 1e9 + 7",
      "code": "const long long Mod = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create constant double pi with 2 * acosign of 0 . 0",
      "code": "const double pi = 2 * acos ( 0.0 ) ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create constant integer N with N = 2005",
      "code": "const int N = 2005 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create integer array arr with size N , create integer n",
      "code": "int arr [ N ] , n ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare gcd with long longs a , b as arguments , returning long long",
      "code": "long long gcd ( long long a , long long b )",
      "indent": 0
    },
    {
      "line": 5,
      "text": "return a if b is 0 , else result of run gcd with b , a % b as arguments",
      "code": "return ( b == 0 ? a : gcd ( b , a % b ) ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 8,
      "text": "create integers x , val , ones with ones = 0",
      "code": "int x , val , ones = 0 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read arr [ 0 ]",
      "code": "cin >> arr [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "set x to arr [ 0 ]",
      "code": "x = arr [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "increment ones by x is 1",
      "code": "ones += x == 1 ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 1 ti n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read arr [ i ]",
      "code": "cin >> arr [ i ] ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if arr [ i ] is 1 , increment ones",
      "code": "if ( arr [ i ] == 1 ) ones ++ ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if x is not 1 , set x to result of run gcd with x , arr [ i ] as arguments",
      "code": "if ( x != 1 ) x = gcd ( x , arr [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if x is not 1",
      "code": "if ( x != 1 )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print - 1 print newline",
      "code": "cout << - 1 << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if ones is true",
      "code": "if ( ones )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print n - ones print newline",
      "code": "cout << n - ones << endl ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "set x to Mod",
      "code": "x = Mod ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "set val to arr [ i ]",
      "code": "val = arr [ i ] ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "for j = i + 1 to n exclusive",
      "code": "for ( int j = i + 1 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 30,
      "text": "set val to result of run gcd with val , arr [ j ] as arguments",
      "code": "val = gcd ( val , arr [ j ] ) ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "if val is 1",
      "code": "if ( val == 1 )",
      "indent": 3
    },
    {
      "line": 32,
      "text": "set x to minimum of x and j - i",
      "code": "x = min ( x , j - i ) ;",
      "indent": 4
    },
    {
      "line": 33,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 37,
      "text": "print x + n - 1 print newline",
      "code": "cout << x + n - 1 << endl ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "const double pi = 2 * acos ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "no matching function for call to ‘acos()’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "const int N = N ;"
      ],
      "err_line": 3,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cin >> arr [ i ] ;"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "char x = arr [ 0 ] ;"
      ],
      "err_line": 11,
      "err_msg": "conflicting declaration ‘char x’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "arr >> arr [ i ] ;"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘int [2005]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "x = Mod Mod ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘Mod’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 27,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 29,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "val ] = gcd ( val , arr [ j ] ) ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "if ( val == l )"
      ],
      "err_line": 31,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "ones += x ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        12,
        3
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "ones += x ;",
        "int arr [ 4 ] , n ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        12,
        3,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "ones += x ;",
        "int arr [ 4 ] , n ;",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        12,
        3,
        33
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "ones += x ;",
        "int arr [ 4 ] , n ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        12,
        3,
        31
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "ones += x ;",
        "int arr [ 4 ] , n ;",
        "if ( val == l )"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        12,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "ones += x ;",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        12,
        29,
        33
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "ones += x ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        12,
        29,
        31
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "ones += x ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "if ( val == l )"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        12,
        33
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "ones += x ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        12,
        33,
        31
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "ones += x ;",
        "break break ;",
        "if ( val == l )"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        12,
        31
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "ones += x ;",
        "if ( val == l )"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "int arr [ 4 ] , n ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        3,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "int arr [ 4 ] , n ;",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        3,
        29,
        33
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "int arr [ 4 ] , n ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        3,
        29,
        31
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "int arr [ 4 ] , n ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "if ( val == l )"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        3,
        33
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "int arr [ 4 ] , n ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        3,
        33,
        31
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "int arr [ 4 ] , n ;",
        "break break ;",
        "if ( val == l )"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        3,
        31
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "int arr [ 4 ] , n ;",
        "if ( val == l )"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        29
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        29,
        33
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        29,
        33,
        31
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "break break ;",
        "if ( val == l )"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        29,
        31
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "if ( val == l )"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        33
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        33,
        31
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "break break ;",
        "if ( val == l )"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4,
        31
      ],
      "mod_code": [
        "long long gcd ( long long a , long long b ) ;",
        "if ( val == l )"
      ],
      "err_line": 5,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12,
        3,
        29
      ],
      "mod_code": [
        "ones += x ;",
        "int arr [ 4 ] , n ;",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 29,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        3,
        29,
        33
      ],
      "mod_code": [
        "ones += x ;",
        "int arr [ 4 ] , n ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "break break ;"
      ],
      "err_line": 29,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        3,
        29,
        31
      ],
      "mod_code": [
        "ones += x ;",
        "int arr [ 4 ] , n ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "if ( val == l )"
      ],
      "err_line": 29,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        3,
        33
      ],
      "mod_code": [
        "ones += x ;",
        "int arr [ 4 ] , n ;",
        "break break ;"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        3,
        33,
        31
      ],
      "mod_code": [
        "ones += x ;",
        "int arr [ 4 ] , n ;",
        "break break ;",
        "if ( val == l )"
      ],
      "err_line": 31,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        3,
        31
      ],
      "mod_code": [
        "ones += x ;",
        "int arr [ 4 ] , n ;",
        "if ( val == l )"
      ],
      "err_line": 31,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        29
      ],
      "mod_code": [
        "ones += x ;",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 29,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        29,
        33
      ],
      "mod_code": [
        "ones += x ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "break break ;"
      ],
      "err_line": 29,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        29,
        33,
        31
      ],
      "mod_code": [
        "ones += x ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "break break ;",
        "if ( val == l )"
      ],
      "err_line": 29,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        29,
        31
      ],
      "mod_code": [
        "ones += x ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "if ( val == l )"
      ],
      "err_line": 29,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        33
      ],
      "mod_code": [
        "ones += x ;",
        "break break ;"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        33,
        31
      ],
      "mod_code": [
        "ones += x ;",
        "break break ;",
        "if ( val == l )"
      ],
      "err_line": 31,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        31
      ],
      "mod_code": [
        "ones += x ;",
        "if ( val == l )"
      ],
      "err_line": 31,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        29
      ],
      "mod_code": [
        "int arr [ 4 ] , n ;",
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 29,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        29,
        33
      ],
      "mod_code": [
        "int arr [ 4 ] , n ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "break break ;"
      ],
      "err_line": 29,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        29,
        33,
        31
      ],
      "mod_code": [
        "int arr [ 4 ] , n ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "break break ;",
        "if ( val == l )"
      ],
      "err_line": 29,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        29,
        31
      ],
      "mod_code": [
        "int arr [ 4 ] , n ;",
        "for ( j = i + 1 ; j < n ; j ++ )",
        "if ( val == l )"
      ],
      "err_line": 29,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        33
      ],
      "mod_code": [
        "int arr [ 4 ] , n ;",
        "break break ;"
      ],
      "err_line": 33,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        3,
        33,
        31
      ],
      "mod_code": [
        "int arr [ 4 ] , n ;",
        "break break ;",
        "if ( val == l )"
      ],
      "err_line": 31,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        31
      ],
      "mod_code": [
        "int arr [ 4 ] , n ;",
        "if ( val == l )"
      ],
      "err_line": 31,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        33
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "break break ;"
      ],
      "err_line": 29,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        33,
        31
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "break break ;",
        "if ( val == l )"
      ],
      "err_line": 29,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        29,
        31
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )",
        "if ( val == l )"
      ],
      "err_line": 29,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        33,
        31
      ],
      "mod_code": [
        "break break ;",
        "if ( val == l )"
      ],
      "err_line": 31,
      "err_msg": "‘l’ was not declared in this scope"
    }
  ]
}