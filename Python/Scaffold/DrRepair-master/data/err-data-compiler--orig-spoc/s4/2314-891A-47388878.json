{
  "meta": {
    "index": 2314,
    "hitid": "3A9LA2FRWS8OJVBLSOB46Y9UG4FXH0",
    "workerid": "A1APYLD4DUK33J",
    "probid": "891A",
    "subid": "47388878"
  },
  "lines": [
    {
      "line": 0,
      "text": "create long long n",
      "code": "long long n ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create maps upd , tmp from long long to long long",
      "code": "map < long long , long long > upd , tmp ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare inline read with long long address x as argument , returning void",
      "code": "inline void read ( long long & x )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "set x to 0",
      "code": "x = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create character c with c = read character",
      "code": "char c = getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while c is not digit , set c to read character",
      "code": "while ( ! isdigit ( c ) ) c = getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "while c is digit , set x to x * 10 + c - ' 0 ' , set c to read character",
      "code": "while ( isdigit ( c ) ) x = x * 10 + c - ' 0 ' , c = getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "declare inline gcd with long longs x , y as arguments , returning long long",
      "code": "inline long long gcd ( long long x , long long y )",
      "indent": 0
    },
    {
      "line": 9,
      "text": "return x if y is 0 , else result of run gcd with y , x % y as arguments , from function",
      "code": "return y == 0 ? x : gcd ( y , x % y ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 12,
      "text": "run read with n as argument",
      "code": "read ( n ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "create long longs now , k , res , cntone with res = INT_MAX bitshift right 2 , cntone = 0",
      "code": "long long now , k , res = INT_MAX >> 2 , cntone = 0 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; ++ i )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "run read with now as argument",
      "code": "read ( now ) ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if now is 1 , increment cntone",
      "code": "if ( now == 1 ) ++ cntone ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "remove all elements from upd",
      "code": "upd . clear ( ) ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "set upd [ now ] to i",
      "code": "upd [ now ] = i ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "for it = beginning of tmp to it is not end of tmp , incrementing it",
      "code": "for ( map < long long , long long > :: iterator it = tmp . begin ( ) ; it != tmp . end ( ) ; ++ it )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "set k to result of run gcd with first element of it , now as arguments",
      "code": "k = gcd ( it -> first , now ) ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "set upd [ k ] to maximum of upd [ k ] and second element of it",
      "code": "upd [ k ] = max ( upd [ k ] , it -> second ) ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "remove all elements from tmp",
      "code": "tmp . clear ( ) ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "for it = beginning of upd to it is not end of upd , increment it",
      "code": "for ( map < long long , long long > :: iterator it = upd . begin ( ) ; it != upd . end ( ) ; ++ it )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "set tmp [ first element of it ] to second element of it",
      "code": "tmp [ it -> first ] = it -> second ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "if first element of it is 1 , set res to minimum of res and i - second element of it",
      "code": "if ( it -> first == 1 ) { res = min ( res , i - it -> second ) ; }",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "if cntone is true",
      "code": "if ( cntone )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print n - cntone print newline",
      "code": "cout << n - cntone << endl ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "else if res is INT_MAX bitshift right 2",
      "code": "else if ( res == INT_MAX >> 2 )",
      "indent": 1
    },
    {
      "line": 32,
      "text": "print \" - 1 \" print newline",
      "code": "cout << \" -1 \" << endl ;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 34,
      "text": "print res + n - 1 print newline",
      "code": "cout << res + n - 1 << endl ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 24,
      "err_msg": "name lookup of ‘it’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 25,
      "err_msg": "‘std::map<long long int, long long int>::iterator {aka struct std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ has no member named ‘second’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 26,
      "err_msg": "no matching function for call to ‘min(std::map<long long int, long long int>::iterator&)’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long upd , tmp ;"
      ],
      "err_line": 17,
      "err_msg": "request for member ‘clear’ in ‘upd’, which is of non-class type ‘long long int’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "inline void read ( long long & x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int x = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "declaration of ‘int x’ shadows a parameter"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "character = getchar ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘character’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "while ( gets ( c ) ) { c = getchar ( ) ; }"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "read ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "too few arguments to function ‘void read(long long int&)’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "long long now = INT_MAX >> k , res = INT_MAX >> cntone , cntone ;"
      ],
      "err_line": 13,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "read ( ) ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘void read(long long int&)’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "q . clear ( ) ;"
      ],
      "err_line": 17,
      "err_msg": "‘q’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "upd [ now ] ] = i ;"
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; ++ it )"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "k = gcd ( * it , now ) ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::pair<const long long int, long long int>’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "upd [ k ] = max ( upd [ k ] , second . second ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "tmp . remove = 0 ;"
      ],
      "err_line": 23,
      "err_msg": "‘class std::map<long long int, long long int>’ has no member named ‘remove’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; ++ it )"
      ],
      "err_line": 24,
      "err_msg": "name lookup of ‘it’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "tmp [ it -> first = it . second ;"
      ],
      "err_line": 25,
      "err_msg": "‘std::map<long long int, long long int>::iterator {aka struct std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ has no member named ‘second’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "if ( min ( it ) == 1 ) res = min ( res , i - it ) ;"
      ],
      "err_line": 26,
      "err_msg": "no matching function for call to ‘min(std::map<long long int, long long int>::iterator&)’"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        6
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        8
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        13
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        19
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        20
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        8
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        13
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        19
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        20
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        13
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        13,
        19
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        13,
        20
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        13,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        13,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        13,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        13,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        19
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        19,
        20
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        19,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        19,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        19,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        19,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        20
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        20,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        20,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        20,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        20,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        21,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        21,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        21,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        24,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        24,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        25,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        5,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        13
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        19
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        20
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        13
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        13,
        19
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        13,
        20
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        13,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        13,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        13,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        13,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        19
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        19,
        20
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        19,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        19,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        19,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        19,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        20
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        20,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        20,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        20,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        20,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        21,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        21,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        21,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        24,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        24,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        25,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        6,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        13
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        13,
        19
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        13,
        20
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        13,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        13,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        13,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        13,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        19
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        19,
        20
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        19,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        19,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        19,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        19,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        20
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        20,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        20,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        20,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        20,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        21,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        21,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        21,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        24,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        24,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        25,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        8,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13,
        19
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13,
        19,
        20
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13,
        19,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13,
        19,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13,
        19,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13,
        19,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13,
        20
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13,
        20,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13,
        20,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13,
        20,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13,
        20,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13,
        21,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13,
        21,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13,
        21,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13,
        24,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13,
        24,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13,
        25,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        13,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        19
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        19,
        20
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        19,
        20,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        19,
        20,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        19,
        20,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        19,
        20,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        19,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        19,
        21,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        19,
        21,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        19,
        21,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        19,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        19,
        24,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        19,
        24,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        19,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        19,
        25,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        19,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        20
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        20,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        20,
        21,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        20,
        21,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        20,
        21,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        20,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        20,
        24,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        20,
        24,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        20,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        20,
        25,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        20,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        21
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        21,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        21,
        24,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        21,
        24,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        21,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        21,
        25,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        21,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        24
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        24,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        24,
        25,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        24,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        25
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        25,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        1,
        26
      ],
      "mod_code": [
        "long long upd , tmp , tmp ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int tmp’"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        8
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        13
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        19
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        20
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        21
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        13
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        13,
        19
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        13,
        20
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        13,
        21
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        13,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        13,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        13,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        19
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        19,
        20
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        19,
        21
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        19,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        19,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        19,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        20
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        20,
        21
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        20,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        20,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        20,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        21
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        21,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        21,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        21,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        24,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        24,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        25,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        13
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        13,
        19
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        13,
        20
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        13,
        21
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        13,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        13,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        13,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        19
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        19,
        20
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        19,
        21
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        19,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        19,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        19,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        20
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        20,
        21
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        20,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        20,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        20,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        21
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        21,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        21,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        21,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        24,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        24,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        25,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13,
        19
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13,
        19,
        20
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13,
        19,
        21
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13,
        19,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13,
        19,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13,
        19,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13,
        20
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13,
        20,
        21
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13,
        20,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13,
        20,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13,
        20,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13,
        21
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13,
        21,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13,
        21,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13,
        21,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13,
        24,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13,
        24,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13,
        25,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        13,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        19
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        19,
        20
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        19,
        20,
        21
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        19,
        20,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        19,
        20,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        19,
        20,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        19,
        21
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        19,
        21,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        19,
        21,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        19,
        21,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        19,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        19,
        24,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        19,
        24,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        19,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        19,
        25,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        19,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        20
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        20,
        21
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        20,
        21,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        20,
        21,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        20,
        21,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        20,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        20,
        24,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        20,
        24,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        20,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        20,
        25,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        20,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        21
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        21,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        21,
        24,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        21,
        24,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        21,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        21,
        25,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        21,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        24
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        24,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        24,
        25,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        24,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        25
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        25,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        26
      ],
      "mod_code": [
        "while ( gets ( c ) ) c = getchar ( ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        13
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        13,
        19
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        13,
        20
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        13,
        21
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        13,
        24
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        13,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        13,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        19
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        19,
        20
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        19,
        21
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        19,
        24
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        19,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        19,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        20
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        20,
        21
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        20,
        24
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        20,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        20,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        21
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        21,
        24
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        21,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        21,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        24
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        24,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        24,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        25,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        8,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "inline long long gcd ( long long x , long long y ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        19
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        19,
        20
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        19,
        21
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        19,
        24
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        19,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        19,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        20
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        20,
        21
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        20,
        24
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        20,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        20,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        21
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        21,
        24
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        21,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        21,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        24
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        24,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        24,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        25,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        13,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        20
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        20,
        21
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        20,
        24
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        20,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        20,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        21
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        21,
        24
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        21,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        21,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        24
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        24,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        24,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        25,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        20
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        6,
        20,
        21
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        6,
        20,
        21,
        24
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        6,
        20,
        21,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        6,
        20,
        21,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        6,
        20,
        24
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        6,
        20,
        24,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        6,
        20,
        24,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        6,
        20,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        6,
        20,
        25,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        6,
        20,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        6,
        21
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        21,
        24
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 21,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        21,
        24,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 21,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        21,
        24,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        21,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 21,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        21,
        25,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        21,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        24
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 24,
      "err_msg": "name lookup of ‘it’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        24,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 24,
      "err_msg": "name lookup of ‘it’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        24,
        25,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 24,
      "err_msg": "name lookup of ‘it’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        24,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 24,
      "err_msg": "name lookup of ‘it’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        25
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 25,
      "err_msg": "‘std::map<long long int, long long int>::iterator {aka struct std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ has no member named ‘second’"
    },
    {
      "mod_line": [
        6,
        25,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 25,
      "err_msg": "‘std::map<long long int, long long int>::iterator {aka struct std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ has no member named ‘second’"
    },
    {
      "mod_line": [
        6,
        26
      ],
      "mod_code": [
        "while ( c >= ' 0 ' ) x = x * 10 + c - ' 0 ' ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 26,
      "err_msg": "no matching function for call to ‘min(std::map<long long int, long long int>::iterator&)’"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        19
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        19,
        20
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        19,
        21
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        19,
        24
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        19,
        25
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        19,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        20
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        20,
        21
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        20,
        24
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        20,
        25
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        20,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        21
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        21,
        24
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        21,
        25
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        21,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        24
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        24,
        25
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        24,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        25
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        25,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        13,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        19
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        19,
        20
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        19,
        20,
        21
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        19,
        20,
        24
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        19,
        20,
        25
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        19,
        20,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        19,
        21
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        19,
        21,
        24
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        19,
        21,
        25
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        19,
        21,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        19,
        24
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        19,
        24,
        25
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        19,
        24,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        19,
        25
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        19,
        25,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        19,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        20
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        20,
        21
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        20,
        21,
        24
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        20,
        21,
        25
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        20,
        21,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        20,
        24
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        20,
        24,
        25
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        20,
        24,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        20,
        25
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        20,
        25,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        20,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        21
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        21,
        24
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        21,
        24,
        25
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        21,
        24,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        21,
        25
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        21,
        25,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        21,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        24
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        24,
        25
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        24,
        25,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        24,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        25
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        25,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        26
      ],
      "mod_code": [
        "inline long long gcd ( long long x , long long y ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        13,
        19
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        19,
        20
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        19,
        20,
        21
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        19,
        20,
        24
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        19,
        20,
        25
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        19,
        20,
        26
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        19,
        21
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        19,
        21,
        24
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        19,
        21,
        25
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        19,
        21,
        26
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        19,
        24
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        19,
        24,
        25
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        19,
        24,
        26
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        19,
        25
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        19,
        25,
        26
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        19,
        26
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        20
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        20,
        21
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        20,
        21,
        24
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        20,
        21,
        25
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        20,
        21,
        26
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        20,
        24
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        20,
        24,
        25
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        20,
        24,
        26
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        20,
        25
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        20,
        25,
        26
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        20,
        26
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        21
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        21,
        24
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        21,
        24,
        25
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        21,
        24,
        26
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        21,
        25
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        21,
        25,
        26
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        21,
        26
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        24
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        24,
        25
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        24,
        25,
        26
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        24,
        26
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        25
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        25,
        26
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        26
      ],
      "mod_code": [
        "long long now , k , res = INT_MAX >> cntone , cntone = 0 ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘cntone’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        20
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        20,
        21
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        20,
        21,
        24
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        20,
        21,
        25
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        20,
        21,
        26
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        20,
        24
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        20,
        24,
        25
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        20,
        24,
        26
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        20,
        25
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        20,
        25,
        26
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        20,
        26
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        21
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        21,
        24
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        21,
        24,
        25
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        21,
        24,
        26
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        21,
        25
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        21,
        25,
        26
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        21,
        26
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        24
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        24,
        25
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        24,
        25,
        26
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        24,
        26
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        25
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        25,
        26
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        26
      ],
      "mod_code": [
        "for ( it = tmp . begin ( ) ; it != tmp . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 19,
      "err_msg": "‘it’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        21
      ],
      "mod_code": [
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        20,
        21,
        24
      ],
      "mod_code": [
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        20,
        21,
        24,
        25
      ],
      "mod_code": [
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        20,
        21,
        24,
        26
      ],
      "mod_code": [
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        20,
        21,
        25
      ],
      "mod_code": [
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        20,
        21,
        25,
        26
      ],
      "mod_code": [
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        20,
        21,
        26
      ],
      "mod_code": [
        "k = gcd ( it , now ) ;",
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        20,
        24
      ],
      "mod_code": [
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        20,
        24,
        25
      ],
      "mod_code": [
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        20,
        24,
        25,
        26
      ],
      "mod_code": [
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        20,
        24,
        26
      ],
      "mod_code": [
        "k = gcd ( it , now ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        20,
        25
      ],
      "mod_code": [
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        20,
        25,
        26
      ],
      "mod_code": [
        "k = gcd ( it , now ) ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        20,
        26
      ],
      "mod_code": [
        "k = gcd ( it , now ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 20,
      "err_msg": "cannot convert ‘std::map<long long int, long long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ to ‘long long int’ for argument ‘1’ to ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        21,
        24
      ],
      "mod_code": [
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )"
      ],
      "err_line": 21,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        24,
        25
      ],
      "mod_code": [
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 21,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        24,
        25,
        26
      ],
      "mod_code": [
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        24,
        26
      ],
      "mod_code": [
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        25
      ],
      "mod_code": [
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 21,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        25,
        26
      ],
      "mod_code": [
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        26
      ],
      "mod_code": [
        "upd [ k ] = max ( upd [ k ] , second ) ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘second’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        25
      ],
      "mod_code": [
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;"
      ],
      "err_line": 24,
      "err_msg": "name lookup of ‘it’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        24,
        25,
        26
      ],
      "mod_code": [
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 24,
      "err_msg": "name lookup of ‘it’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        24,
        26
      ],
      "mod_code": [
        "for ( it = upd . begin ( ) ; it != upd . end ( ) ; it ++ )",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 24,
      "err_msg": "name lookup of ‘it’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        25,
        26
      ],
      "mod_code": [
        "tmp [ it . second = it . second ;",
        "if ( min ( it ) == 1 ) res = min ( res , i - i ) ;"
      ],
      "err_line": 25,
      "err_msg": "‘std::map<long long int, long long int>::iterator {aka struct std::_Rb_tree_iterator<std::pair<const long long int, long long int> >}’ has no member named ‘second’"
    }
  ]
}