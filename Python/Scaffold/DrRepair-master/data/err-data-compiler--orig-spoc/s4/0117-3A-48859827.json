{
  "meta": {
    "index": 117,
    "hitid": "3XU9MCX6VO6079MR0425UCH4QPY2RJ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "3A",
    "subid": "48859827"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare characters called a , b , c and d",
      "code": "char a , b , c , d ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a , b , c and d",
      "code": "cin >> a >> b >> c >> d ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "assign value max of abs ( a - c ) and abs ( b - d ) to the long long ans",
      "code": "long long ans = max ( abs ( a - c ) , abs ( b - d ) ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print ans and a new line",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "start an endless loop",
      "code": "while ( 1 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if ( a = c ) & & ( b = d ) , break the loop",
      "code": "if ( ( a == c ) && ( b == d ) ) break ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if a is less than c",
      "code": "if ( a < c )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "print \" R \"",
      "code": "cout << \" R \" ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "increase a by one",
      "code": "a ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if a is greater than c",
      "code": "else if ( a > c )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print \" L \"",
      "code": "cout << \" L \" ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "decrease a by one",
      "code": "a -- ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if b is greater than d",
      "code": "if ( b > d )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "print \" D \"",
      "code": "cout << \" D \" ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "decrease b by one",
      "code": "b -- ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else if b is less than d",
      "code": "else if ( b < d )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print \" U \"",
      "code": "cout << \" U \" ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "increment b",
      "code": "b ++ ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘&&’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char a , b , c , d , d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "long long ans = max ( a - c ) , abs ( b - d ) ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘max(int)’"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" R \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘&&’ token"
    },
    {
      "mod_line": [
        6,
        8,
        11
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘&&’ token"
    },
    {
      "mod_line": [
        6,
        8,
        11,
        18
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘&&’ token"
    },
    {
      "mod_line": [
        6,
        8,
        11,
        1
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "char a , b , c , d , d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        6,
        8,
        11,
        15
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘&&’ token"
    },
    {
      "mod_line": [
        6,
        8,
        18
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘&&’ token"
    },
    {
      "mod_line": [
        6,
        8,
        18,
        1
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;",
        "char a , b , c , d , d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        6,
        8,
        18,
        15
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘&&’ token"
    },
    {
      "mod_line": [
        6,
        8,
        1
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" R \" << endl ;",
        "char a , b , c , d , d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        6,
        8,
        1,
        15
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" R \" << endl ;",
        "char a , b , c , d , d ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        6,
        8,
        15
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" R \" << endl ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘&&’ token"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" L \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘&&’ token"
    },
    {
      "mod_line": [
        6,
        11,
        18
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘&&’ token"
    },
    {
      "mod_line": [
        6,
        11,
        18,
        1
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;",
        "char a , b , c , d , d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        6,
        11,
        18,
        15
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘&&’ token"
    },
    {
      "mod_line": [
        6,
        11,
        1
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" L \" << endl ;",
        "char a , b , c , d , d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        6,
        11,
        1,
        15
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" L \" << endl ;",
        "char a , b , c , d , d ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        6,
        11,
        15
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" L \" << endl ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘&&’ token"
    },
    {
      "mod_line": [
        6,
        18
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" U \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘&&’ token"
    },
    {
      "mod_line": [
        6,
        18,
        1
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" U \" << endl ;",
        "char a , b , c , d , d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        6,
        18,
        1,
        15
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" U \" << endl ;",
        "char a , b , c , d , d ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        6,
        18,
        15
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" U \" << endl ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘&&’ token"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "char a , b , c , d , d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        6,
        1,
        15
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "char a , b , c , d , d ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "if ( a == c ) break && ( b == d ) ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘&&’ token"
    },
    {
      "mod_line": [
        8,
        11,
        18,
        1
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;",
        "char a , b , c , d , d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        8,
        11,
        1
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "char a , b , c , d , d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        8,
        11,
        1,
        15
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "char a , b , c , d , d ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        8,
        18,
        1
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;",
        "char a , b , c , d , d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        8,
        18,
        1,
        15
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;",
        "char a , b , c , d , d ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "char a , b , c , d , d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        8,
        1,
        15
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "char a , b , c , d , d ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        11,
        18,
        1
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;",
        "char a , b , c , d , d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        11,
        18,
        1,
        15
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;",
        "char a , b , c , d , d ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "char a , b , c , d , d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        11,
        1,
        15
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "char a , b , c , d , d ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        18,
        1
      ],
      "mod_code": [
        "cout << \" U \" << endl ;",
        "char a , b , c , d , d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        18,
        1,
        15
      ],
      "mod_code": [
        "cout << \" U \" << endl ;",
        "char a , b , c , d , d ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "char a , b , c , d , d ;",
        "cout << \" -1 \" << endl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char d’"
    }
  ]
}