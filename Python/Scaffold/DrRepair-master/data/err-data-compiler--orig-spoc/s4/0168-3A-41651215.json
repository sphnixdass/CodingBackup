{
  "meta": {
    "index": 168,
    "hitid": "322ZSN9Z5GENQ2E687QON6FKYOQT4I",
    "workerid": "AIWEXPJAU66D9",
    "probid": "3A",
    "subid": "41651215"
  },
  "lines": [
    {
      "line": 0,
      "text": "in the function read",
      "code": "inline int read ( )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let ch be a whitespace character",
      "code": "char ch = ' ' ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let f and x be integers = 0",
      "code": "int f = 1 , x = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while ch is not a digit",
      "code": "while ( ! isdigit ( ch ) )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "assign value of getchar ( ) to the ch",
      "code": "ch = getchar ( ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if ch is equal to ' - '",
      "code": "if ( ch == ' - ' ) f *= - 1 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "while ch is a digit",
      "code": "while ( isdigit ( ch ) )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set value of x to ( x < < 3 ) + ( x < < 1 ) + ch - ' 0 '",
      "code": "x = ( x << 3 ) + ( x << 1 ) + ch - ' 0 ' ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set value of ch to getchar ( )",
      "code": "ch = getchar ( ) ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "return f * x",
      "code": "return f * x ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 13,
      "text": "let c be an array of characters of size 2",
      "code": "char c [ 2 ] ;",
      "indent": 0
    },
    {
      "line": 14,
      "text": "let x , y , fx , fy and ans be integers",
      "code": "int x , y , fx , fy , ans ;",
      "indent": 0
    },
    {
      "line": 15,
      "text": "an = array of strings of size 1000",
      "code": "string an [ 1000 ] ;",
      "indent": 0
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 17,
      "text": "read c",
      "code": "cin >> c ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "x = c [ 0 ] - ' a '",
      "code": "x = c [ 0 ] - ' a ' ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "y = c [ 1 ] - ' 0 '",
      "code": "y = c [ 1 ] - ' 0 ' ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "read c",
      "code": "cin >> c ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "fx = c [ 0 ] - ' a '",
      "code": "fx = c [ 0 ] - ' a ' ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "fy = c [ 1 ] - ' 0 '",
      "code": "fy = c [ 1 ] - ' 0 ' ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "while x < fx and y < fy , increment x , y and ans , set an [ ans ] to \" RU \"",
      "code": "while ( x < fx && y < fy ) x ++ , y ++ , an [ ++ ans ] = \" RU \" ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "while x < fx and y > fy , increment x and ans , decrement y , set an [ ans ] to \" RD \"",
      "code": "while ( x < fx && y > fy ) x ++ , y -- , an [ ++ ans ] = \" RD \" ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "while x > fx & & y > fy , decrement x and y , increment ans , set an [ ans ] to \" LD \"",
      "code": "while ( x > fx && y > fy ) x -- , y -- , an [ ++ ans ] = \" LD \" ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "while x > fx & & y < fy , decrement x , increment ans and y , set an [ ans ] to \" LU \"",
      "code": "while ( x > fx && y < fy ) x -- , y ++ , an [ ++ ans ] = \" LU \" ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "while x > fx & & y = fy , decrement x , increment ans , set an [ ans ] to \" L \"",
      "code": "while ( x > fx && y == fy ) x -- , an [ ++ ans ] = \" L \" ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "while x < fx & & y = fy , inccrement x , increment ans , set an [ ans ] to \" R \"",
      "code": "while ( x < fx && y == fy ) x ++ , an [ ++ ans ] = \" R \" ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "while x = fx & & y < fy , increment y , increment ans , set an [ ans ] to \" U \"",
      "code": "while ( x == fx && y < fy ) y ++ , an [ ++ ans ] = \" U \" ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "while x = fx & & y > fy , decrement y , increment ans , set an [ ans ] to \" D \"",
      "code": "while ( x == fx && y > fy ) y -- , an [ ++ ans ] = \" D \" ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "print ans and a new line",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "for integer i = 1 to ans inclusive , print an [ i ] and a new line",
      "code": "for ( int i = 1 ; i <= ans ; i ++ ) cout << an [ i ] << endl ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void read ( )"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( ch == ' - ' )"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 25,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 26,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 27,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 29,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "whitespace = ' 0 ' ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "ch ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘ch’ cannot be used as a function"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "else if ( ch == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "* ch = getchar ( ) ;"
      ],
      "err_line": 9,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘char’)"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "char c [ 2 ] [ 2 ] ;"
      ],
      "err_line": 17,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [2][2]’)"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "string a [ 1000 ] ;"
      ],
      "err_line": 23,
      "err_msg": "‘an’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "c = getchar ( ) ;"
      ],
      "err_line": 17,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘char [2]’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "c = getchar ( ) ;"
      ],
      "err_line": 20,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘char [2]’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) an [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "while ( x > fx && y > fy ) { an [ ans ] = \" LD \" , y [ ans ] = \" LD \" ; }"
      ],
      "err_line": 25,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y , y ;"
      ],
      "err_line": 26,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "while ( x == fx && y > fy ) an [ ans ] = \" D \" , an ++ ;"
      ],
      "err_line": 30,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        5
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        5,
        23
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        5,
        24
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        5,
        25
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        5,
        26
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        5,
        27
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        5,
        28
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        5,
        29
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        23
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        23,
        24
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        23,
        25
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        23,
        26
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        23,
        27
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        23,
        28
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        23,
        29
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        24
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        24,
        25
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        24,
        26
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        24,
        27
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        24,
        28
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        24,
        29
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        25
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        25,
        26
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        25,
        27
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        25,
        28
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        25,
        29
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        26
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        26,
        27
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        26,
        28
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        26,
        29
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        27
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        27,
        28
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        27,
        29
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        28
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        28,
        29
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        1,
        29
      ],
      "mod_code": [
        "void read ( )",
        "whitespace = getchar ( ) ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        23
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        23,
        24
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        23,
        25
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        23,
        26
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        23,
        27
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        23,
        28
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        23,
        29
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        24
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        24,
        25
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        24,
        26
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        24,
        27
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        24,
        28
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        24,
        29
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        25
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        25,
        26
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        25,
        27
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        25,
        28
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        25,
        29
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        26
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        26,
        27
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        26,
        28
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        26,
        29
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        27
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        27,
        28
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        27,
        29
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        28
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        28,
        29
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        5,
        29
      ],
      "mod_code": [
        "void read ( )",
        "if ( ch == ' - ' )",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        23
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        24
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        24,
        25
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        24,
        26
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        24,
        27
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        24,
        28
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        24,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        25
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        25,
        26
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        25,
        27
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        25,
        28
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        25,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        26
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        26,
        27
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        26,
        28
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        26,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        27
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        27,
        28
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        27,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        28
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        28,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        23,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        24
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        24,
        25
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        24,
        25,
        26
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        24,
        25,
        27
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        24,
        25,
        28
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        24,
        25,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        24,
        26
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        24,
        26,
        27
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        24,
        26,
        28
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        24,
        26,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        24,
        27
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        24,
        27,
        28
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        24,
        27,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        24,
        28
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        24,
        28,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        24,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        25
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        25,
        26
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        25,
        26,
        27
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        25,
        26,
        28
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        25,
        26,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        25,
        27
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        25,
        27,
        28
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        25,
        27,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        25,
        28
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        25,
        28,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        25,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        26
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        26,
        27
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        26,
        27,
        28
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        26,
        27,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        26,
        28
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        26,
        28,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        26,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27,
        28
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27,
        28,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        28
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        28,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        29
      ],
      "mod_code": [
        "void read ( )",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 11,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        23
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        23,
        24
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        23,
        25
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        23,
        26
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        23,
        27
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        23,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        23,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        24
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        24,
        25
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        24,
        26
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        24,
        27
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        24,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        24,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        25
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        25,
        26
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        25,
        27
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        25,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        25,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        26
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        26,
        27
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        26,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        26,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        27
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        27,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        27,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        28,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "if ( ch == ' - ' )",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        24
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        24,
        25
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        24,
        26
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        24,
        27
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        24,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        24,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        25
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        25,
        26
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        25,
        27
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        25,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        25,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        26
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        26,
        27
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        26,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        26,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        27
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        27,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        27,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        28,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        24
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        24,
        25
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        24,
        25,
        26
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        24,
        25,
        27
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        24,
        25,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        24,
        25,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        24,
        26
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        24,
        26,
        27
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        24,
        26,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        24,
        26,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        24,
        27
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        24,
        27,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        24,
        27,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        24,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        24,
        28,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        24,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        25
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        25,
        26
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        25,
        26,
        27
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        25,
        26,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        25,
        26,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        25,
        27
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        25,
        27,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        25,
        27,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        25,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        25,
        28,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        25,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        26
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        26,
        27
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        26,
        27,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        26,
        27,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        26,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        26,
        28,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        26,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        27
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        27,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        27,
        28,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        27,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        28
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        28,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        29
      ],
      "mod_code": [
        "whitespace = getchar ( ) ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 1,
      "err_msg": "‘whitespace’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        23
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        23,
        24
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        23,
        24,
        25
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        23,
        24,
        26
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        23,
        24,
        27
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        23,
        24,
        28
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        23,
        24,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        23,
        25
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        23,
        25,
        26
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        23,
        25,
        27
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        23,
        25,
        28
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        23,
        25,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        23,
        26
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        23,
        26,
        27
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        23,
        26,
        28
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        23,
        26,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        23,
        27
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        23,
        27,
        28
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        23,
        27,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        23,
        28
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        23,
        28,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        23,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        24
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        24,
        25
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        24,
        25,
        26
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        24,
        25,
        27
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        24,
        25,
        28
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        24,
        25,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        24,
        26
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        24,
        26,
        27
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        24,
        26,
        28
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        24,
        26,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        24,
        27
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        24,
        27,
        28
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        24,
        27,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        24,
        28
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        24,
        28,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        24,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        25
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        25,
        26
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        25,
        26,
        27
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        25,
        26,
        28
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        25,
        26,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        25,
        27
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        25,
        27,
        28
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        25,
        27,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        25,
        28
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        25,
        28,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        25,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        26
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        26,
        27
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        26,
        27,
        28
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        26,
        27,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        26,
        28
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        26,
        28,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        26,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        27
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        27,
        28
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        27,
        28,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        27,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        28
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        28,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        29
      ],
      "mod_code": [
        "if ( ch == ' - ' )",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        23,
        24
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        24,
        25
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        24,
        25,
        26
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        24,
        25,
        27
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        24,
        25,
        28
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        24,
        25,
        29
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        24,
        26
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        24,
        26,
        27
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        24,
        26,
        28
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        24,
        26,
        29
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        24,
        27
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        24,
        27,
        28
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        24,
        27,
        29
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        24,
        28
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        24,
        28,
        29
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        24,
        29
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        25
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        25,
        26
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        25,
        26,
        27
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        25,
        26,
        28
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        25,
        26,
        29
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        25,
        27
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        25,
        27,
        28
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        25,
        27,
        29
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        25,
        28
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        25,
        28,
        29
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        25,
        29
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        26
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        26,
        27
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        26,
        27,
        28
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        26,
        27,
        29
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        26,
        28
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        26,
        28,
        29
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        26,
        29
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        27
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        27,
        28
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        27,
        28,
        29
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        27,
        29
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        28
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        28,
        29
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        29
      ],
      "mod_code": [
        "while ( x < fx && y < fy ) x [ ans ] = \" RU \" , ans [ ans ] = \" RU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        25
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        25,
        26
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        25,
        26,
        27
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        25,
        26,
        28
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        25,
        26,
        29
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        25,
        27
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        25,
        27,
        28
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        25,
        27,
        29
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        25,
        28
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        25,
        28,
        29
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        25,
        29
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        26
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        26,
        27
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        26,
        27,
        28
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        26,
        27,
        29
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        26,
        28
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        26,
        28,
        29
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        26,
        29
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        27
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        27,
        28
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        27,
        28,
        29
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        27,
        29
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        28
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        28,
        29
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        29
      ],
      "mod_code": [
        "while ( x < fx && y > fy ) an [ ans ] = \" RD \" , y [ ans ] = \" RD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 24,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        25,
        26
      ],
      "mod_code": [
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;"
      ],
      "err_line": 25,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        25,
        26,
        27
      ],
      "mod_code": [
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 25,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        25,
        26,
        27,
        28
      ],
      "mod_code": [
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 25,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        25,
        26,
        27,
        29
      ],
      "mod_code": [
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 25,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        25,
        26,
        28
      ],
      "mod_code": [
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 25,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        25,
        26,
        28,
        29
      ],
      "mod_code": [
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 25,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        25,
        26,
        29
      ],
      "mod_code": [
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 25,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        25,
        27
      ],
      "mod_code": [
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 25,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        25,
        27,
        28
      ],
      "mod_code": [
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 25,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        25,
        27,
        28,
        29
      ],
      "mod_code": [
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 25,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        25,
        27,
        29
      ],
      "mod_code": [
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 25,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        25,
        28
      ],
      "mod_code": [
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 25,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        25,
        28,
        29
      ],
      "mod_code": [
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 25,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        25,
        29
      ],
      "mod_code": [
        "while ( x > fx && y > fy ) x [ ans ] = \" LD \" , y [ ans ] = \" LD \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 25,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        26,
        27
      ],
      "mod_code": [
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;"
      ],
      "err_line": 26,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        26,
        27,
        28
      ],
      "mod_code": [
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 26,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        26,
        27,
        28,
        29
      ],
      "mod_code": [
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 26,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        26,
        27,
        29
      ],
      "mod_code": [
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 26,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        26,
        28
      ],
      "mod_code": [
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 26,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        26,
        28,
        29
      ],
      "mod_code": [
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 26,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        26,
        29
      ],
      "mod_code": [
        "while ( x > fx && y < fy ) x [ ans ] = \" LU \" , y [ ans ] = \" LU \" ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 26,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        27,
        28
      ],
      "mod_code": [
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }"
      ],
      "err_line": 27,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        27,
        28,
        29
      ],
      "mod_code": [
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 27,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        27,
        29
      ],
      "mod_code": [
        "while ( x > fx && y == fy ) an [ ans ] = \" L \" , an ++ ;",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 27,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        28,
        29
      ],
      "mod_code": [
        "while ( x < fx && y == fy ) { an [ ans ] = \" R \" , an [ ans ] = \" R \" ; }",
        "while ( x == fx && y < fy ) an [ ans ] = \" U \" , an ++ ;"
      ],
      "err_line": 29,
      "err_msg": "lvalue required as increment operand"
    }
  ]
}