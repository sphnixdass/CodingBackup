{
  "meta": {
    "index": 2694,
    "hitid": "36U4VBVNQO79RLVTJOCB0VCW9GHRUQ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "12A",
    "subid": "23256881"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create character pointer pointer c",
      "code": "char * * c ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create booleans flag , flag2 with flag = true , flag2 = false",
      "code": "bool flag = true , flag2 = false ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set c to new character pointer to character array of size 3",
      "code": "c = new char * [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 3 exclusive , set c [ i ] to new character array of size 3",
      "code": "for ( int i = 0 ; i < 3 ; i ++ ) c [ i ] = new char [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for j = 0 to 3 exclusive , read c [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < 3 ; j ++ ) cin >> c [ i ] [ j ] ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for i = 0 , j = 2 to 3 exclusive , incrementing i",
      "code": "for ( int i = 0 , j = 2 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if c [ 0 ] [ i ] is not c [ 2 ] [ j ] , set flag to flase",
      "code": "if ( c [ 0 ] [ i ] != c [ 2 ] [ j ] ) flag = false ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "decrement j",
      "code": "j -- ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if c [ 1 ] [ 0 ] is c [ 1 ] [ 2 ] , set flag2 to true",
      "code": "if ( c [ 1 ] [ 0 ] == c [ 1 ] [ 2 ] ) flag2 = true ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if flag and flag2",
      "code": "if ( flag && flag2 )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char * c ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in assignment"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "c = new char [ 3 ] ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char*’ to ‘char**’ in assignment"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char * c = * 0 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "c = new char [ 0 ] ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char*’ to ‘char**’ in assignment"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "char * c ;",
        "c = new char [ 3 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        14
      ],
      "mod_code": [
        "char * c ;",
        "c = new char [ 3 ] ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        14,
        7
      ],
      "mod_code": [
        "char * c ;",
        "c = new char [ 3 ] ;",
        "else else",
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        14,
        5
      ],
      "mod_code": [
        "char * c ;",
        "c = new char [ 3 ] ;",
        "else else",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        7
      ],
      "mod_code": [
        "char * c ;",
        "c = new char [ 3 ] ;",
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        7,
        5
      ],
      "mod_code": [
        "char * c ;",
        "c = new char [ 3 ] ;",
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        5
      ],
      "mod_code": [
        "char * c ;",
        "c = new char [ 3 ] ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "char * c ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in assignment"
    },
    {
      "mod_line": [
        1,
        14,
        7
      ],
      "mod_code": [
        "char * c ;",
        "else else",
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in assignment"
    },
    {
      "mod_line": [
        1,
        14,
        7,
        5
      ],
      "mod_code": [
        "char * c ;",
        "else else",
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in assignment"
    },
    {
      "mod_line": [
        1,
        14,
        5
      ],
      "mod_code": [
        "char * c ;",
        "else else",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in assignment"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "char * c ;",
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in assignment"
    },
    {
      "mod_line": [
        1,
        7,
        5
      ],
      "mod_code": [
        "char * c ;",
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in assignment"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "char * c ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in assignment"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "c = new char [ 3 ] ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char*’ to ‘char**’ in assignment"
    },
    {
      "mod_line": [
        3,
        14,
        7
      ],
      "mod_code": [
        "c = new char [ 3 ] ;",
        "else else",
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char*’ to ‘char**’ in assignment"
    },
    {
      "mod_line": [
        3,
        14,
        7,
        1
      ],
      "mod_code": [
        "c = new char [ 3 ] ;",
        "else else",
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )",
        "char * c = * 0 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        14,
        7,
        5
      ],
      "mod_code": [
        "c = new char [ 3 ] ;",
        "else else",
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char*’ to ‘char**’ in assignment"
    },
    {
      "mod_line": [
        3,
        14,
        1
      ],
      "mod_code": [
        "c = new char [ 3 ] ;",
        "else else",
        "char * c = * 0 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        14,
        1,
        5
      ],
      "mod_code": [
        "c = new char [ 3 ] ;",
        "else else",
        "char * c = * 0 ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        14,
        5
      ],
      "mod_code": [
        "c = new char [ 3 ] ;",
        "else else",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char*’ to ‘char**’ in assignment"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "c = new char [ 3 ] ;",
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char*’ to ‘char**’ in assignment"
    },
    {
      "mod_line": [
        3,
        7,
        1
      ],
      "mod_code": [
        "c = new char [ 3 ] ;",
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )",
        "char * c = * 0 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        7,
        1,
        5
      ],
      "mod_code": [
        "c = new char [ 3 ] ;",
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )",
        "char * c = * 0 ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        7,
        5
      ],
      "mod_code": [
        "c = new char [ 3 ] ;",
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char*’ to ‘char**’ in assignment"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "c = new char [ 3 ] ;",
        "char * c = * 0 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        1,
        5
      ],
      "mod_code": [
        "c = new char [ 3 ] ;",
        "char * c = * 0 ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "c = new char [ 3 ] ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘char*’ to ‘char**’ in assignment"
    },
    {
      "mod_line": [
        14,
        7
      ],
      "mod_code": [
        "else else",
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        7,
        1
      ],
      "mod_code": [
        "else else",
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )",
        "char * c = * 0 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        14,
        7,
        1,
        5
      ],
      "mod_code": [
        "else else",
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )",
        "char * c = * 0 ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        14,
        7,
        5
      ],
      "mod_code": [
        "else else",
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        1
      ],
      "mod_code": [
        "else else",
        "char * c = * 0 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        14,
        1,
        5
      ],
      "mod_code": [
        "else else",
        "char * c = * 0 ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        14,
        5
      ],
      "mod_code": [
        "else else",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )",
        "char * c = * 0 ;"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7,
        1,
        5
      ],
      "mod_code": [
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )",
        "char * c = * 0 ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "for ( i = 0 , j = 2 ; i < 3 ; i ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "char * c = * 0 ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    }
  ]
}