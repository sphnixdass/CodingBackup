{
  "meta": {
    "index": 2350,
    "hitid": "3RQVKZ7ZRKDQPQ2CRQ4ZPVQ4QFC27X",
    "workerid": "A1APYLD4DUK33J",
    "probid": "464A",
    "subid": "46648872"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare makeChanges with character pointer s , integers whichPosn , size , p , characters adj , nadj as arguments , returning boolean",
      "code": "bool makeChanges ( char * s , int whichPosn , int size , int p , char adj , char nadj )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if whichPosn is - 1 , return false from function",
      "code": "if ( whichPosn == - 1 ) { return false ; }",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create character thisChar with thisChar = s [ whichPosn ]",
      "code": "char thisChar = s [ whichPosn ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for x = thisChar + 1 to ' a ' + p exclusive",
      "code": "for ( char x = thisChar + 1 ; x < ' a ' + p ; x ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if x is adj or x is nadj , break current loop iteration",
      "code": "if ( x == adj || x == nadj ) { continue ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "set s [ whichPosn ] to x",
      "code": "s [ whichPosn ] = x ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if whichPosn is size - 1 , return true from function",
      "code": "if ( whichPosn == size - 1 ) { return true ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "create character xx with xx = s [ whichPosn + 1 ]",
      "code": "char xx = s [ whichPosn + 1 ] ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set s [ whichPosn + 1 ] to ' a ' - 1",
      "code": "s [ whichPosn + 1 ] = ' a ' - 1 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if result of run makeChanges with s , whichPosn + 1 , size , p , x , adj as arguments is true",
      "code": "if ( makeChanges ( s , whichPosn + 1 , size , p , x , adj ) )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "return true from function",
      "code": "return true ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set s [ whichPosn + 1 ] to xx",
      "code": "s [ whichPosn + 1 ] = xx ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "break current loop iteration",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "set s [ whichPosn ] to thisChar",
      "code": "s [ whichPosn ] = thisChar ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "set nadj to s [ whichPosn - 3 ] if whichPosn is greater than or equal to 3 , else 0",
      "code": "nadj = whichPosn >= 3 ? s [ whichPosn - 3 ] : 0 ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "set adj to s [ whichPosn - 2 ] if whichPosn is greater than or equal to 2 , else 0",
      "code": "adj = whichPosn >= 2 ? s [ whichPosn - 2 ] : 0 ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "return result of run makeChanges with s , whichPosn - 1 , size , p , adj , nadj as arguments",
      "code": "return ( makeChanges ( s , whichPosn - 1 , size , p , adj , nadj ) ) ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 22,
      "text": "create integers n , p",
      "code": "int n , p ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "read n read p",
      "code": "cin >> n >> p ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "create character array s with size 1005",
      "code": "char s [ 1005 ] ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "create integer whichPosn with whichPosn = n - 1",
      "code": "int whichPosn = n - 1 ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "create character nadj with nadj = s [ whichPosn - 2 ] if whichPosn is greater than or equal to 2 , else 0",
      "code": "char nadj = whichPosn >= 2 ? s [ whichPosn - 2 ] : 0 ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "create character adj with adj = s [ whichPosn - 1 ] if whichPosn is greater than or equal to 1 , else 0",
      "code": "char adj = whichPosn >= 1 ? s [ whichPosn - 1 ] : 0 ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "if result of run makeChanges with s , whichPosn , n , p , adj , nadj as arguments is true",
      "code": "if ( makeChanges ( s , whichPosn , n , p , adj , nadj ) )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print s print ' \\ n '",
      "code": "cout << s << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 32,
      "text": "print \" NO \\ n \"",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )"
      ],
      "err_line": 9,
      "err_msg": "‘size’ cannot be used as a function"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;"
      ],
      "err_line": 27,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char nadj )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "thisChar = s [ whichPosn ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘thisChar’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( x = thisChar + 1 ; x < ' a ' + p ; x ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘,’ or ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , x , x ) ) != true )"
      ],
      "err_line": 9,
      "err_msg": "‘size’ cannot be used as a function"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "adj [ whichPosn - 2 ] = s [ whichPosn - 2 ] : 0 ;"
      ],
      "err_line": 18,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 23,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "char a [ 1005 ] ;"
      ],
      "err_line": 25,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 25,
      "err_msg": "invalid operands of types ‘char [1005]’ and ‘char [1005]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "cout << ( char ) s [ whichPosn - 2 ] : 0 ;"
      ],
      "err_line": 27,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "char adj = s [ whichPosn - 1 ] ? s [ whichPosn - 1 ] ;"
      ],
      "err_line": 28,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "if ( makeChanges ( s , whichPosn ) , n , p , adj , nadj ) == true )"
      ],
      "err_line": 29,
      "err_msg": "too few arguments to function ‘bool makeChanges(char*, int, int, int, char, char)’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "s << s << ' \\n ' ;"
      ],
      "err_line": 30,
      "err_msg": "invalid operands of types ‘char [1005]’ and ‘char [1005]’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 31,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        9,
        27
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        9,
        27,
        5
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "s [ ' whichPosn ' ] = x ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        9,
        27,
        24
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "char a [ 1005 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        9,
        27,
        7
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        9,
        5
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "s [ ' whichPosn ' ] = x ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        9,
        5,
        24
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "s [ ' whichPosn ' ] = x ;",
        "char a [ 1005 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        9,
        5,
        7
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "s [ ' whichPosn ' ] = x ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        9,
        24
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "char a [ 1005 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        9,
        24,
        7
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "char a [ 1005 ] ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        9,
        7
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        27
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        27,
        5
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "s [ ' whichPosn ' ] = x ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        27,
        5,
        24
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "s [ ' whichPosn ' ] = x ;",
        "char a [ 1005 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        27,
        5,
        7
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "s [ ' whichPosn ' ] = x ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        27,
        24
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "char a [ 1005 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        27,
        24,
        7
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "char a [ 1005 ] ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        27,
        7
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "s [ ' whichPosn ' ] = x ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        5,
        24
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "s [ ' whichPosn ' ] = x ;",
        "char a [ 1005 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        5,
        24,
        7
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "s [ ' whichPosn ' ] = x ;",
        "char a [ 1005 ] ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        5,
        7
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "s [ ' whichPosn ' ] = x ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        24
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "char a [ 1005 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        24,
        7
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "char a [ 1005 ] ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "bool makeChanges ( char * s , char whichPosn , char p , char p , char p )",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘char p’"
    },
    {
      "mod_line": [
        9,
        27
      ],
      "mod_code": [
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;"
      ],
      "err_line": 9,
      "err_msg": "‘size’ cannot be used as a function"
    },
    {
      "mod_line": [
        9,
        27,
        5
      ],
      "mod_code": [
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "s [ ' whichPosn ' ] = x ;"
      ],
      "err_line": 9,
      "err_msg": "‘size’ cannot be used as a function"
    },
    {
      "mod_line": [
        9,
        27,
        5,
        24
      ],
      "mod_code": [
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "s [ ' whichPosn ' ] = x ;",
        "char a [ 1005 ] ;"
      ],
      "err_line": 9,
      "err_msg": "‘size’ cannot be used as a function"
    },
    {
      "mod_line": [
        9,
        27,
        5,
        7
      ],
      "mod_code": [
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "s [ ' whichPosn ' ] = x ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘,’ or ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        9,
        27,
        24
      ],
      "mod_code": [
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "char a [ 1005 ] ;"
      ],
      "err_line": 9,
      "err_msg": "‘size’ cannot be used as a function"
    },
    {
      "mod_line": [
        9,
        27,
        24,
        7
      ],
      "mod_code": [
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "char a [ 1005 ] ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘,’ or ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        9,
        27,
        7
      ],
      "mod_code": [
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘,’ or ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "s [ ' whichPosn ' ] = x ;"
      ],
      "err_line": 9,
      "err_msg": "‘size’ cannot be used as a function"
    },
    {
      "mod_line": [
        9,
        5,
        24
      ],
      "mod_code": [
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "s [ ' whichPosn ' ] = x ;",
        "char a [ 1005 ] ;"
      ],
      "err_line": 9,
      "err_msg": "‘size’ cannot be used as a function"
    },
    {
      "mod_line": [
        9,
        5,
        24,
        7
      ],
      "mod_code": [
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "s [ ' whichPosn ' ] = x ;",
        "char a [ 1005 ] ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘,’ or ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        9,
        5,
        7
      ],
      "mod_code": [
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "s [ ' whichPosn ' ] = x ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘,’ or ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        9,
        24
      ],
      "mod_code": [
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "char a [ 1005 ] ;"
      ],
      "err_line": 9,
      "err_msg": "‘size’ cannot be used as a function"
    },
    {
      "mod_line": [
        9,
        24,
        7
      ],
      "mod_code": [
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "char a [ 1005 ] ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘,’ or ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "if ( makeChanges ( s , whichPosn + 1 , size ( p , p , x ) ) != true )",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘,’ or ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        27,
        5
      ],
      "mod_code": [
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "s [ ' whichPosn ' ] = x ;"
      ],
      "err_line": 27,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        27,
        5,
        24
      ],
      "mod_code": [
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "s [ ' whichPosn ' ] = x ;",
        "char a [ 1005 ] ;"
      ],
      "err_line": 25,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        5,
        24,
        7
      ],
      "mod_code": [
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "s [ ' whichPosn ' ] = x ;",
        "char a [ 1005 ] ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘,’ or ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        27,
        5,
        7
      ],
      "mod_code": [
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "s [ ' whichPosn ' ] = x ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘,’ or ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        27,
        24
      ],
      "mod_code": [
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "char a [ 1005 ] ;"
      ],
      "err_line": 25,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        27,
        24,
        7
      ],
      "mod_code": [
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "char a [ 1005 ] ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘,’ or ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        27,
        7
      ],
      "mod_code": [
        "char nadj = s [ whichPosn - 2 ] ? s [ whichPosn - 2 ] ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘,’ or ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        24
      ],
      "mod_code": [
        "s [ ' whichPosn ' ] = x ;",
        "char a [ 1005 ] ;"
      ],
      "err_line": 25,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        24,
        7
      ],
      "mod_code": [
        "s [ ' whichPosn ' ] = x ;",
        "char a [ 1005 ] ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘,’ or ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "s [ ' whichPosn ' ] = x ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘,’ or ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        24,
        7
      ],
      "mod_code": [
        "char a [ 1005 ] ;",
        "char xx = s [ whichPosn + 1 ] ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘,’ or ‘;’ before ‘]’ token"
    }
  ]
}