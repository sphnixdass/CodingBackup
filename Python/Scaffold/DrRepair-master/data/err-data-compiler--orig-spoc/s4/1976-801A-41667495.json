{
  "meta": {
    "index": 1976,
    "hitid": "3P4C70TRMRBFJ5ZLUZQYA426VIPGL6",
    "workerid": "A1APYLD4DUK33J",
    "probid": "801A",
    "subid": "41667495"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer maxn with maxn = 10000",
      "code": "const int maxn = 10000 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create integers ans , res with ans = 0 , res = 0",
      "code": "int ans = 0 , res = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create string str",
      "code": "string str ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create boolean array flag with size maxn with flag = { 0 }",
      "code": "bool flag [ maxn ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 1 to integer casted size of str exclusive",
      "code": "for ( int i = 1 ; i < ( int ) str . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if flag [ i - 1 ] is true and str [ i - 1 ] is ' V ' and str [ i ] is ' K '",
      "code": "if ( flag [ i - 1 ] == true && str [ i - 1 ] == ' V ' && str [ i ] == ' K ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "decrement res , increment ans , increment i",
      "code": "res -- , ans ++ , i ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else if flag [ i ] is false and str [ i - 1 ] is ' V ' and str [ i ] is ' K '",
      "code": "else if ( flag [ i ] == false && str [ i - 1 ] == ' V ' && str [ i ] == ' K ' )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "increment ans , increment i",
      "code": "ans ++ , i ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if str [ i - 1 ] is ' V ' and str [ i ] is ' V '",
      "code": "else if ( str [ i - 1 ] == ' V ' && str [ i ] == ' V ' )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set flag [ i ] to true , increment res",
      "code": "flag [ i ] = true , res ++ ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else if str [ i - 1 ] is ' K ' and str [ i ] is ' K '",
      "code": "else if ( str [ i - 1 ] == ' K ' && str [ i ] == ' K ' )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "increment res , increment i",
      "code": "res ++ , i ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if res is true",
      "code": "if ( res )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print ans + 1 print newline",
      "code": "cout << ans + 1 << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print ans print newline",
      "code": "cout << ans << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int ans , res = 0 , res = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char str ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "bool flag = { 0 } ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        19,
        5
      ],
      "mod_code": [
        "cout << ans ;",
        "gets ( str ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        19,
        5,
        18
      ],
      "mod_code": [
        "cout << ans ;",
        "gets ( str ) ;",
        "else ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        19,
        5,
        18,
        2
      ],
      "mod_code": [
        "cout << ans ;",
        "gets ( str ) ;",
        "else ;",
        "int ans , res = 0 , res = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        19,
        5,
        18,
        3
      ],
      "mod_code": [
        "cout << ans ;",
        "gets ( str ) ;",
        "else ;",
        "char str ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        5,
        18,
        12
      ],
      "mod_code": [
        "cout << ans ;",
        "gets ( str ) ;",
        "else ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        19,
        5,
        2
      ],
      "mod_code": [
        "cout << ans ;",
        "gets ( str ) ;",
        "int ans , res = 0 , res = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        19,
        5,
        2,
        3
      ],
      "mod_code": [
        "cout << ans ;",
        "gets ( str ) ;",
        "int ans , res = 0 , res = 0 ;",
        "char str ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        19,
        5,
        2,
        12
      ],
      "mod_code": [
        "cout << ans ;",
        "gets ( str ) ;",
        "int ans , res = 0 , res = 0 ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        19,
        5,
        3
      ],
      "mod_code": [
        "cout << ans ;",
        "gets ( str ) ;",
        "char str ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        5,
        3,
        12
      ],
      "mod_code": [
        "cout << ans ;",
        "gets ( str ) ;",
        "char str ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        5,
        12
      ],
      "mod_code": [
        "cout << ans ;",
        "gets ( str ) ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        19,
        18,
        2
      ],
      "mod_code": [
        "cout << ans ;",
        "else ;",
        "int ans , res = 0 , res = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        19,
        18,
        2,
        3
      ],
      "mod_code": [
        "cout << ans ;",
        "else ;",
        "int ans , res = 0 , res = 0 ;",
        "char str ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        19,
        18,
        2,
        12
      ],
      "mod_code": [
        "cout << ans ;",
        "else ;",
        "int ans , res = 0 , res = 0 ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        19,
        18,
        3
      ],
      "mod_code": [
        "cout << ans ;",
        "else ;",
        "char str ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        19,
        18,
        3,
        12
      ],
      "mod_code": [
        "cout << ans ;",
        "else ;",
        "char str ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        19,
        2
      ],
      "mod_code": [
        "cout << ans ;",
        "int ans , res = 0 , res = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        19,
        2,
        3
      ],
      "mod_code": [
        "cout << ans ;",
        "int ans , res = 0 , res = 0 ;",
        "char str ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        19,
        2,
        3,
        12
      ],
      "mod_code": [
        "cout << ans ;",
        "int ans , res = 0 , res = 0 ;",
        "char str ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        19,
        2,
        12
      ],
      "mod_code": [
        "cout << ans ;",
        "int ans , res = 0 , res = 0 ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        19,
        3
      ],
      "mod_code": [
        "cout << ans ;",
        "char str ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        19,
        3,
        12
      ],
      "mod_code": [
        "cout << ans ;",
        "char str ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        5,
        18
      ],
      "mod_code": [
        "gets ( str ) ;",
        "else ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        18,
        2
      ],
      "mod_code": [
        "gets ( str ) ;",
        "else ;",
        "int ans , res = 0 , res = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        5,
        18,
        2,
        3
      ],
      "mod_code": [
        "gets ( str ) ;",
        "else ;",
        "int ans , res = 0 , res = 0 ;",
        "char str ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        5,
        18,
        2,
        12
      ],
      "mod_code": [
        "gets ( str ) ;",
        "else ;",
        "int ans , res = 0 , res = 0 ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        5,
        18,
        3
      ],
      "mod_code": [
        "gets ( str ) ;",
        "else ;",
        "char str ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        18,
        3,
        12
      ],
      "mod_code": [
        "gets ( str ) ;",
        "else ;",
        "char str ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        18,
        12
      ],
      "mod_code": [
        "gets ( str ) ;",
        "else ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "gets ( str ) ;",
        "int ans , res = 0 , res = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        5,
        2,
        3
      ],
      "mod_code": [
        "gets ( str ) ;",
        "int ans , res = 0 , res = 0 ;",
        "char str ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        5,
        2,
        3,
        12
      ],
      "mod_code": [
        "gets ( str ) ;",
        "int ans , res = 0 , res = 0 ;",
        "char str ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        5,
        2,
        12
      ],
      "mod_code": [
        "gets ( str ) ;",
        "int ans , res = 0 , res = 0 ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "gets ( str ) ;",
        "char str ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        3,
        12
      ],
      "mod_code": [
        "gets ( str ) ;",
        "char str ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "gets ( str ) ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        18,
        2
      ],
      "mod_code": [
        "else ;",
        "int ans , res = 0 , res = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        18,
        2,
        3
      ],
      "mod_code": [
        "else ;",
        "int ans , res = 0 , res = 0 ;",
        "char str ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        18,
        2,
        3,
        12
      ],
      "mod_code": [
        "else ;",
        "int ans , res = 0 , res = 0 ;",
        "char str ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        18,
        2,
        12
      ],
      "mod_code": [
        "else ;",
        "int ans , res = 0 , res = 0 ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        18,
        3
      ],
      "mod_code": [
        "else ;",
        "char str ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        18,
        3,
        12
      ],
      "mod_code": [
        "else ;",
        "char str ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "int ans , res = 0 , res = 0 ;",
        "char str ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        2,
        3,
        12
      ],
      "mod_code": [
        "int ans , res = 0 , res = 0 ;",
        "char str ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "int ans , res = 0 , res = 0 ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "char str ;",
        "flag [ i ] = true ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘str’, which is of non-class type ‘char’"
    }
  ]
}