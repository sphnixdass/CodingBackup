{
  "meta": {
    "index": 1717,
    "hitid": "3VDVA3ILID92TYVH1P8FQPTSXCHG1X",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "110A",
    "subid": "48942228"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , l , count = integers with count = 0",
      "code": "int n , l , count = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "l = s . length ( )",
      "code": "l = s . length ( ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "n = convert the string argument s . c_str ( ) to integer",
      "code": "n = atoi ( s . c_str ( ) ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to l exclusive",
      "code": "for ( int i = 0 ; i < l ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if s [ i ] is 4 or s [ i ] is 7 , increment count",
      "code": "if ( s [ i ] == ' 4 ' || s [ i ] == ' 7 ' ) count ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if count is 4 or count is 7",
      "code": "if ( count == 4 || count == 7 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int n = convert . c_str ( ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int l = s . length ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int n = s . c_str ( ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < l ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "int n = convert . c_str ( ) ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        3,
        12
      ],
      "mod_code": [
        "int n = convert . c_str ( ) ;",
        "s >> s ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        3,
        12,
        9
      ],
      "mod_code": [
        "int n = convert . c_str ( ) ;",
        "s >> s ;",
        "else else",
        "if ( count == ' 4 ' || count == ' 7 ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        3,
        12,
        4
      ],
      "mod_code": [
        "int n = convert . c_str ( ) ;",
        "s >> s ;",
        "else else",
        "int l = s . length ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        3,
        9
      ],
      "mod_code": [
        "int n = convert . c_str ( ) ;",
        "s >> s ;",
        "if ( count == ' 4 ' || count == ' 7 ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        3,
        9,
        4
      ],
      "mod_code": [
        "int n = convert . c_str ( ) ;",
        "s >> s ;",
        "if ( count == ' 4 ' || count == ' 7 ' )",
        "int l = s . length ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        3,
        4
      ],
      "mod_code": [
        "int n = convert . c_str ( ) ;",
        "s >> s ;",
        "int l = s . length ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "int n = convert . c_str ( ) ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        12,
        9
      ],
      "mod_code": [
        "int n = convert . c_str ( ) ;",
        "else else",
        "if ( count == ' 4 ' || count == ' 7 ' )"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        12,
        9,
        4
      ],
      "mod_code": [
        "int n = convert . c_str ( ) ;",
        "else else",
        "if ( count == ' 4 ' || count == ' 7 ' )",
        "int l = s . length ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        5,
        12,
        4
      ],
      "mod_code": [
        "int n = convert . c_str ( ) ;",
        "else else",
        "int l = s . length ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "int n = convert . c_str ( ) ;",
        "if ( count == ' 4 ' || count == ' 7 ' )"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        9,
        4
      ],
      "mod_code": [
        "int n = convert . c_str ( ) ;",
        "if ( count == ' 4 ' || count == ' 7 ' )",
        "int l = s . length ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "int n = convert . c_str ( ) ;",
        "int l = s . length ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "int n = s . c_str ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        5,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "int n = s . c_str ( ) ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        5,
        12,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "int n = s . c_str ( ) ;",
        "else else",
        "if ( count == ' 4 ' || count == ' 7 ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        5,
        12,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "int n = s . c_str ( ) ;",
        "else else",
        "int l = s . length ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        5,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "int n = s . c_str ( ) ;",
        "if ( count == ' 4 ' || count == ' 7 ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        5,
        9,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "int n = s . c_str ( ) ;",
        "if ( count == ' 4 ' || count == ' 7 ' )",
        "int l = s . length ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        5,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "int n = s . c_str ( ) ;",
        "int l = s . length ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        12,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "else else",
        "if ( count == ' 4 ' || count == ' 7 ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        12,
        9,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "else else",
        "if ( count == ' 4 ' || count == ' 7 ' )",
        "int l = s . length ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        12,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "else else",
        "int l = s . length ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "if ( count == ' 4 ' || count == ' 7 ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        9,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "if ( count == ' 4 ' || count == ' 7 ' )",
        "int l = s . length ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "int l = s . length ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "int n = s . c_str ( ) ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        12,
        9
      ],
      "mod_code": [
        "int n = s . c_str ( ) ;",
        "else else",
        "if ( count == ' 4 ' || count == ' 7 ' )"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        12,
        9,
        4
      ],
      "mod_code": [
        "int n = s . c_str ( ) ;",
        "else else",
        "if ( count == ' 4 ' || count == ' 7 ' )",
        "int l = s . length ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        5,
        12,
        4
      ],
      "mod_code": [
        "int n = s . c_str ( ) ;",
        "else else",
        "int l = s . length ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "int n = s . c_str ( ) ;",
        "if ( count == ' 4 ' || count == ' 7 ' )"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5,
        9,
        4
      ],
      "mod_code": [
        "int n = s . c_str ( ) ;",
        "if ( count == ' 4 ' || count == ' 7 ' )",
        "int l = s . length ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "int n = s . c_str ( ) ;",
        "int l = s . length ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        12,
        9
      ],
      "mod_code": [
        "else else",
        "if ( count == ' 4 ' || count == ' 7 ' )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        9,
        4
      ],
      "mod_code": [
        "else else",
        "if ( count == ' 4 ' || count == ' 7 ' )",
        "int l = s . length ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "else else",
        "int l = s . length ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "if ( count == ' 4 ' || count == ' 7 ' )",
        "int l = s . length ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int l’"
    }
  ]
}