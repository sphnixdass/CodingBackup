{
  "meta": {
    "index": 671,
    "hitid": "3Z8UJEJOCZ7JORMOANGOM1M2QHS93E",
    "workerid": "AIWEXPJAU66D9",
    "probid": "14A",
    "subid": "37431544"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers row and col",
      "code": "int row , col ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "graph = 2d array of characters with size 1000 by 50",
      "code": "char graph [ 1000 ] [ 50 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read row and col",
      "code": "cin >> row >> col ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let start_x be an integer = row",
      "code": "int start_x = row ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let start_y be an integer = col",
      "code": "int start_y = col ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "let end_x be an integer = 0",
      "code": "int end_x = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "let end_y be an integer = 0",
      "code": "int end_y = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to row exclusive",
      "code": "for ( int i = 0 ; i < row ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for j = 0 to col exclusive",
      "code": "for ( int j = 0 ; j < col ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "input = character",
      "code": "char input ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "read graph [ i ] [ j ]",
      "code": "cin >> graph [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "if graph [ i ] [ j ] = ' * '",
      "code": "if ( graph [ i ] [ j ] == ' * ' )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "if start_x is greater than i set start_x to i",
      "code": "if ( start_x > i ) start_x = i ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "if start_y is greater than j i set start_y to j",
      "code": "if ( start_y > j ) start_y = j ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "if end_x is less than i i set end_x to i",
      "code": "if ( end_x < i ) end_x = i ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "if end_y is less than j i set end_y to j",
      "code": "if ( end_y < j ) end_y = j ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "for integer i = start_x to end_x inclusive",
      "code": "for ( int i = start_x ; i <= end_x ; i ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "for integer j = start_y to end_y inclusive print graph [ i ] [ j ]",
      "code": "for ( int j = start_y ; j <= end_y ; j ++ ) cout << graph [ i ] [ j ] ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "print \" \\ n \"",
      "code": "cout << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "<< \" \\n \" ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int row , col col ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘col’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char graph [ 1000 [ 50 ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "start_x = row ;"
      ],
      "err_line": 4,
      "err_msg": "‘start_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "start_y = col ;"
      ],
      "err_line": 5,
      "err_msg": "‘start_y’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "end_x = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘end_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "end_y = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘end_y’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < row ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( j = 0 ; j < col ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        21,
        2
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "<< \" \\n \" ;",
        "char graph [ 1000 [ 50 ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        21,
        2,
        4
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "<< \" \\n \" ;",
        "char graph [ 1000 [ 50 ] ;",
        "start_x = row ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        21,
        2,
        9
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "<< \" \\n \" ;",
        "char graph [ 1000 [ 50 ] ;",
        "for ( j = 0 ; j < col ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        21,
        2,
        6
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "<< \" \\n \" ;",
        "char graph [ 1000 [ 50 ] ;",
        "end_x = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        21,
        4
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "<< \" \\n \" ;",
        "start_x = row ;"
      ],
      "err_line": 4,
      "err_msg": "‘start_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        4,
        9
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "<< \" \\n \" ;",
        "start_x = row ;",
        "for ( j = 0 ; j < col ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘start_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        4,
        6
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "<< \" \\n \" ;",
        "start_x = row ;",
        "end_x = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘start_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        9
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "<< \" \\n \" ;",
        "for ( j = 0 ; j < col ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        9,
        6
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "<< \" \\n \" ;",
        "for ( j = 0 ; j < col ; j ++ )",
        "end_x = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘end_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        21,
        6
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "<< \" \\n \" ;",
        "end_x = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘end_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        2
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "char graph [ 1000 [ 50 ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        2,
        4
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "char graph [ 1000 [ 50 ] ;",
        "start_x = row ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        2,
        4,
        9
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "char graph [ 1000 [ 50 ] ;",
        "start_x = row ;",
        "for ( j = 0 ; j < col ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        2,
        4,
        6
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "char graph [ 1000 [ 50 ] ;",
        "start_x = row ;",
        "end_x = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        2,
        9
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "char graph [ 1000 [ 50 ] ;",
        "for ( j = 0 ; j < col ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        2,
        9,
        6
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "char graph [ 1000 [ 50 ] ;",
        "for ( j = 0 ; j < col ; j ++ )",
        "end_x = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        2,
        6
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "char graph [ 1000 [ 50 ] ;",
        "end_x = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        4
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "start_x = row ;"
      ],
      "err_line": 4,
      "err_msg": "‘start_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        4,
        9
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "start_x = row ;",
        "for ( j = 0 ; j < col ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘start_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        4,
        9,
        6
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "start_x = row ;",
        "for ( j = 0 ; j < col ; j ++ )",
        "end_x = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘start_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        4,
        6
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "start_x = row ;",
        "end_x = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘start_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        9
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "for ( j = 0 ; j < col ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        9,
        6
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "for ( j = 0 ; j < col ; j ++ )",
        "end_x = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘end_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        6
      ],
      "mod_code": [
        "if ( start_y > i ) start_y = j ;",
        "end_x = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘end_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        2
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "char graph [ 1000 [ 50 ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        21,
        2,
        4
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "char graph [ 1000 [ 50 ] ;",
        "start_x = row ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        21,
        2,
        4,
        9
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "char graph [ 1000 [ 50 ] ;",
        "start_x = row ;",
        "for ( j = 0 ; j < col ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        21,
        2,
        4,
        6
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "char graph [ 1000 [ 50 ] ;",
        "start_x = row ;",
        "end_x = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        21,
        2,
        9
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "char graph [ 1000 [ 50 ] ;",
        "for ( j = 0 ; j < col ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        21,
        2,
        9,
        6
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "char graph [ 1000 [ 50 ] ;",
        "for ( j = 0 ; j < col ; j ++ )",
        "end_x = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        21,
        2,
        6
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "char graph [ 1000 [ 50 ] ;",
        "end_x = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        21,
        4
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "start_x = row ;"
      ],
      "err_line": 4,
      "err_msg": "‘start_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        4,
        9
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "start_x = row ;",
        "for ( j = 0 ; j < col ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘start_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        4,
        9,
        6
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "start_x = row ;",
        "for ( j = 0 ; j < col ; j ++ )",
        "end_x = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘start_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        4,
        6
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "start_x = row ;",
        "end_x = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘start_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        9
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "for ( j = 0 ; j < col ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        9,
        6
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "for ( j = 0 ; j < col ; j ++ )",
        "end_x = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘end_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        6
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "end_x = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘end_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "char graph [ 1000 [ 50 ] ;",
        "start_x = row ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        4,
        9
      ],
      "mod_code": [
        "char graph [ 1000 [ 50 ] ;",
        "start_x = row ;",
        "for ( j = 0 ; j < col ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        4,
        9,
        6
      ],
      "mod_code": [
        "char graph [ 1000 [ 50 ] ;",
        "start_x = row ;",
        "for ( j = 0 ; j < col ; j ++ )",
        "end_x = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        4,
        6
      ],
      "mod_code": [
        "char graph [ 1000 [ 50 ] ;",
        "start_x = row ;",
        "end_x = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "char graph [ 1000 [ 50 ] ;",
        "for ( j = 0 ; j < col ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        9,
        6
      ],
      "mod_code": [
        "char graph [ 1000 [ 50 ] ;",
        "for ( j = 0 ; j < col ; j ++ )",
        "end_x = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "char graph [ 1000 [ 50 ] ;",
        "end_x = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "start_x = row ;",
        "for ( j = 0 ; j < col ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘start_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        6
      ],
      "mod_code": [
        "start_x = row ;",
        "for ( j = 0 ; j < col ; j ++ )",
        "end_x = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘start_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "start_x = row ;",
        "end_x = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘start_x’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "for ( j = 0 ; j < col ; j ++ )",
        "end_x = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘end_x’ was not declared in this scope"
    }
  ]
}