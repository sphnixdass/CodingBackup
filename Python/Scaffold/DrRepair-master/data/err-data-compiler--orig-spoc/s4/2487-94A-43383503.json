{
  "meta": {
    "index": 2487,
    "hitid": "3B0MCRZMBROBN37IPA9SLUPI1JIPPM",
    "workerid": "A24WRPQYGMQLGF",
    "probid": "94A",
    "subid": "43383503"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "S1 , S2 = string , A = string array of size 10",
      "code": "string S1 , S2 , A [ 10 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read S1",
      "code": "getline ( cin , S1 ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to 10 exclusive , then read A [ i ]",
      "code": "for ( int i = 0 ; i < 10 ; i ++ ) getline ( cin , A [ i ] ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 8 exclusive",
      "code": "for ( int i = 0 ; i < 8 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "S2 = S1 [ 10 ] - S [ 0 ]",
      "code": "S2 = S1 . substr ( 0 , 10 ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "for j = 0 to 10 exclusive",
      "code": "for ( int j = 0 ; j < 10 ; j ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if S2 is A [ j ] , then print j",
      "code": "if ( S2 == A [ j ] ) cout << j ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "erase the contents of S1 from S1 [ 0 ] to S1 [ 10",
      "code": "S1 . erase ( 0 , 10 ) ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print endline",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string S1 [ 10 ] , S2 [ 10 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘getline(std::istream&, std::__cxx11::string [10])’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "S2 = S1 [ 10 ] - S [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘S’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "S1 >> S1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "S2 += S1 [ 10 ] - S [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘S’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "S1 . erase ( S1 . begin ( ) , S1 [ 10 ] ) ;"
      ],
      "err_line": 8,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::erase(std::__cxx11::basic_string<char>::iterator, char&)’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "string S1 [ 10 ] , S2 [ 10 ] ;",
        "cin >> S1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’)"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "string S1 [ 10 ] , S2 [ 10 ] ;",
        "cin >> S1 ;",
        "S2 = S1 [ 10 ] - S [ 0 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’)"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        8
      ],
      "mod_code": [
        "string S1 [ 10 ] , S2 [ 10 ] ;",
        "cin >> S1 ;",
        "S2 = S1 [ 10 ] - S [ 0 ] ;",
        "S1 . erase ( S1 [ 0 ] , S1 [ 10 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’)"
    },
    {
      "mod_line": [
        1,
        2,
        8
      ],
      "mod_code": [
        "string S1 [ 10 ] , S2 [ 10 ] ;",
        "cin >> S1 ;",
        "S1 . erase ( S1 [ 0 ] , S1 [ 10 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’)"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        5
      ],
      "mod_code": [
        "string S1 [ 10 ] , S2 [ 10 ] ;",
        "cin >> S1 ;",
        "S1 . erase ( S1 [ 0 ] , S1 [ 10 ] ) ;",
        "S2 += S1 [ 10 ] - S [ 0 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’)"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "string S1 [ 10 ] , S2 [ 10 ] ;",
        "cin >> S1 ;",
        "S2 += S1 [ 10 ] - S [ 0 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’)"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "string S1 [ 10 ] , S2 [ 10 ] ;",
        "S2 = S1 [ 10 ] - S [ 0 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘getline(std::istream&, std::__cxx11::string [10])’"
    },
    {
      "mod_line": [
        1,
        5,
        8
      ],
      "mod_code": [
        "string S1 [ 10 ] , S2 [ 10 ] ;",
        "S2 = S1 [ 10 ] - S [ 0 ] ;",
        "S1 . erase ( S1 [ 0 ] , S1 [ 10 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘getline(std::istream&, std::__cxx11::string [10])’"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        2
      ],
      "mod_code": [
        "string S1 [ 10 ] , S2 [ 10 ] ;",
        "S2 = S1 [ 10 ] - S [ 0 ] ;",
        "S1 . erase ( S1 [ 0 ] , S1 [ 10 ] ) ;",
        "S1 >> S1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’ and ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        1,
        5,
        2
      ],
      "mod_code": [
        "string S1 [ 10 ] , S2 [ 10 ] ;",
        "S2 = S1 [ 10 ] - S [ 0 ] ;",
        "S1 >> S1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’ and ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "string S1 [ 10 ] , S2 [ 10 ] ;",
        "S1 . erase ( S1 [ 0 ] , S1 [ 10 ] ) ;"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘getline(std::istream&, std::__cxx11::string [10])’"
    },
    {
      "mod_line": [
        1,
        8,
        5
      ],
      "mod_code": [
        "string S1 [ 10 ] , S2 [ 10 ] ;",
        "S1 . erase ( S1 [ 0 ] , S1 [ 10 ] ) ;",
        "S2 += S1 [ 10 ] - S [ 0 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘getline(std::istream&, std::__cxx11::string [10])’"
    },
    {
      "mod_line": [
        1,
        8,
        5,
        2
      ],
      "mod_code": [
        "string S1 [ 10 ] , S2 [ 10 ] ;",
        "S1 . erase ( S1 [ 0 ] , S1 [ 10 ] ) ;",
        "S2 += S1 [ 10 ] - S [ 0 ] ;",
        "S1 >> S1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’ and ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        1,
        8,
        2
      ],
      "mod_code": [
        "string S1 [ 10 ] , S2 [ 10 ] ;",
        "S1 . erase ( S1 [ 0 ] , S1 [ 10 ] ) ;",
        "S1 >> S1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’ and ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "string S1 [ 10 ] , S2 [ 10 ] ;",
        "S2 += S1 [ 10 ] - S [ 0 ] ;"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘getline(std::istream&, std::__cxx11::string [10])’"
    },
    {
      "mod_line": [
        1,
        5,
        2
      ],
      "mod_code": [
        "string S1 [ 10 ] , S2 [ 10 ] ;",
        "S2 += S1 [ 10 ] - S [ 0 ] ;",
        "S1 >> S1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’ and ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "string S1 [ 10 ] , S2 [ 10 ] ;",
        "S1 >> S1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’ and ‘std::__cxx11::string [10] {aka std::__cxx11::basic_string<char> [10]}’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "cin >> S1 ;",
        "S2 = S1 [ 10 ] - S [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘S’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        8
      ],
      "mod_code": [
        "cin >> S1 ;",
        "S2 = S1 [ 10 ] - S [ 0 ] ;",
        "S1 . erase ( S1 [ 0 ] , S1 [ 10 ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘S’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8,
        5
      ],
      "mod_code": [
        "cin >> S1 ;",
        "S1 . erase ( S1 [ 0 ] , S1 [ 10 ] ) ;",
        "S2 += S1 [ 10 ] - S [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘S’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "cin >> S1 ;",
        "S2 += S1 [ 10 ] - S [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘S’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "S2 = S1 [ 10 ] - S [ 0 ] ;",
        "S1 . erase ( S1 [ 0 ] , S1 [ 10 ] ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘S’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        2
      ],
      "mod_code": [
        "S2 = S1 [ 10 ] - S [ 0 ] ;",
        "S1 . erase ( S1 [ 0 ] , S1 [ 10 ] ) ;",
        "S1 >> S1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "S2 = S1 [ 10 ] - S [ 0 ] ;",
        "S1 >> S1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "S1 . erase ( S1 [ 0 ] , S1 [ 10 ] ) ;",
        "S2 += S1 [ 10 ] - S [ 0 ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘S’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        5,
        2
      ],
      "mod_code": [
        "S1 . erase ( S1 [ 0 ] , S1 [ 10 ] ) ;",
        "S2 += S1 [ 10 ] - S [ 0 ] ;",
        "S1 >> S1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "S1 . erase ( S1 [ 0 ] , S1 [ 10 ] ) ;",
        "S1 >> S1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "S2 += S1 [ 10 ] - S [ 0 ] ;",
        "S1 >> S1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}