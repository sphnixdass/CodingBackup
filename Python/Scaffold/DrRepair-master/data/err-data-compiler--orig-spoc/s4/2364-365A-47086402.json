{
  "meta": {
    "index": 2364,
    "hitid": "34D9ZRXCYRO1DRH8S8VPQ45YPHKSAK",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "365A",
    "subid": "47086402"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integers n , k , ai , and cnt = 0",
      "code": "int n , k , ai , cnt = 0 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let bool array ada of size 10",
      "code": "bool ada [ 10 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare valid taking in int x and returning bool",
      "code": "bool valid ( int x )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "for i = 0 to k , set ada [ i ] to 0",
      "code": "for ( int i = 0 ; i <= k ; i ++ ) { ada [ i ] = 0 ; }",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while x is truthy",
      "code": "while ( x )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set ada [ x % 10 ] to 1",
      "code": "ada [ x % 10 ] = 1 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set x to x / 10",
      "code": "x = x / 10 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to k",
      "code": "for ( int i = 0 ; i <= k ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if ada [ i ] is falsy , return 0",
      "code": "if ( ! ada [ i ] ) { return 0 ; }",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "return 1",
      "code": "return 1 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 14,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "while n - - is truthy",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "read ai",
      "code": "cin >> ai ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if valid ( ai ) returns true , increment cnt",
      "code": "if ( valid ( ai ) ) { cnt ++ ; }",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print cnt",
      "code": "cout << cnt << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n , k , ai , cnt , cnt = 0 ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int cnt’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool * ada [ 10 ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘bool*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "bool valid ( int x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "ada [ x % 10 ] ] = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 0 ; i < k ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}