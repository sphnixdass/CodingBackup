{
  "meta": {
    "index": 2643,
    "hitid": "3I01FDIL6M266Z3MI37LPN00BO6D2N",
    "workerid": "AIWEXPJAU66D9",
    "probid": "12A",
    "subid": "46539709"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a = array of characters of length 10",
      "code": "char a [ 10 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a [ 1 ] , a [ 2 ] and a [ 3 ]",
      "code": "cin >> a [ 1 ] >> a [ 2 ] >> a [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read a [ 4 ] , a [ 5 ] and a [ 6 ]",
      "code": "cin >> a [ 4 ] >> a [ 5 ] >> a [ 6 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read a [ 7 ] , a [ 8 ] and a [ 9 ]",
      "code": "cin >> a [ 7 ] >> a [ 8 ] >> a [ 9 ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if a [ 1 ] = a [ 9 ] and a [ 2 ] = a [ 8 ] and a [ 3 ] = a [ 7 ] and a [ 4 ] = a [ 6 ]",
      "code": "if ( ( a [ 1 ] == a [ 9 ] ) && ( a [ 2 ] == a [ 8 ] ) && ( a [ 3 ] == a [ 7 ] ) && ( a [ 4 ] == a [ 6 ] ) )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3,
        2,
        4,
        1
      ],
      "mod_code": [
        "cin >> a [ 4 ] , a [ 5 ] >> a [ 6 ] ;",
        "cin >> a [ 1 ] , a [ 2 ] >> a [ 3 ] ;",
        "cin >> a [ 7 ] , a [ 8 ] >> a [ 9 ] ;",
        "char a [ 10 ] [ 10 ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘char [10]’ and ‘char [10]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        2,
        1
      ],
      "mod_code": [
        "cin >> a [ 4 ] , a [ 5 ] >> a [ 6 ] ;",
        "cin >> a [ 1 ] , a [ 2 ] >> a [ 3 ] ;",
        "char a [ 10 ] [ 10 ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘char [10]’ and ‘char [10]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        4,
        1
      ],
      "mod_code": [
        "cin >> a [ 4 ] , a [ 5 ] >> a [ 6 ] ;",
        "cin >> a [ 7 ] , a [ 8 ] >> a [ 9 ] ;",
        "char a [ 10 ] [ 10 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid operands of types ‘char [10]’ and ‘char [10]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "cin >> a [ 4 ] , a [ 5 ] >> a [ 6 ] ;",
        "char a [ 10 ] [ 10 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid operands of types ‘char [10]’ and ‘char [10]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        4,
        1
      ],
      "mod_code": [
        "cin >> a [ 1 ] , a [ 2 ] >> a [ 3 ] ;",
        "cin >> a [ 7 ] , a [ 8 ] >> a [ 9 ] ;",
        "char a [ 10 ] [ 10 ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘char [10]’ and ‘char [10]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "cin >> a [ 1 ] , a [ 2 ] >> a [ 3 ] ;",
        "char a [ 10 ] [ 10 ] ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘char [10]’ and ‘char [10]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "cin >> a [ 7 ] , a [ 8 ] >> a [ 9 ] ;",
        "char a [ 10 ] [ 10 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘char [10]’ and ‘char [10]’ to binary ‘operator>>’"
    }
  ]
}