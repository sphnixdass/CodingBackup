{
  "meta": {
    "index": 180,
    "hitid": "3L55D8AUFARM2SQFBSJ5ELJN53PYCP",
    "workerid": "A1APYLD4DUK33J",
    "probid": "3A",
    "subid": "47617442"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create characters s1 , s2 , t1 , t2",
      "code": "char s1 , s2 , t1 , t2 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integers f , i , m , n",
      "code": "int f , i , m , n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read s1 read s2",
      "code": "cin >> s1 >> s2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read t1 read t2",
      "code": "cin >> t1 >> t2 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set m to t1 - s1",
      "code": "m = t1 - s1 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set n to t2 - s2",
      "code": "n = t2 - s2 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if absolute value of m is greater than absolute value of n",
      "code": "if ( abs ( m ) > abs ( n ) )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print absolute value of m print newline",
      "code": "cout << abs ( m ) << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set f to 1",
      "code": "f = 1 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print absolute value of n print newline",
      "code": "cout << abs ( n ) << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if absolute value of m is absolute value of n",
      "code": "if ( abs ( m ) == abs ( n ) )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set f to 0",
      "code": "f = 0 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 15,
      "text": "set f to 2",
      "code": "f = 2 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if m is less than 0",
      "code": "if ( m < 0 )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if n is less than 0",
      "code": "if ( n < 0 )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if m is less than n",
      "code": "if ( m < n )",
      "indent": 3
    },
    {
      "line": 21,
      "text": "for i = - n to 0 exclusive , decrementing i",
      "code": "for ( i = - n ; i > 0 ; i -- )",
      "indent": 4
    },
    {
      "line": 22,
      "text": "print \" LD \" print newline",
      "code": "cout << \" LD \" << endl ;",
      "indent": 5
    },
    {
      "line": 23,
      "text": "increment m",
      "code": "m ++ ;",
      "indent": 5
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 25,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 26,
      "text": "for i = - m to 0 exclusive , decrementing i",
      "code": "for ( i = - m ; i > 0 ; i -- )",
      "indent": 4
    },
    {
      "line": 27,
      "text": "print \" LD \" print newline",
      "code": "cout << \" LD \" << endl ;",
      "indent": 5
    },
    {
      "line": 28,
      "text": "increment n",
      "code": "n ++ ;",
      "indent": 5
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 31,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 32,
      "text": "if - m is less than n",
      "code": "if ( - m < n )",
      "indent": 3
    },
    {
      "line": 33,
      "text": "for i = - m to 0 exclusive , decrementing i",
      "code": "for ( i = - m ; i > 0 ; i -- )",
      "indent": 4
    },
    {
      "line": 34,
      "text": "print \" LU \" print newline",
      "code": "cout << \" LU \" << endl ;",
      "indent": 5
    },
    {
      "line": 35,
      "text": "decrement n",
      "code": "n -- ;",
      "indent": 5
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 37,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 38,
      "text": "for i = n to 0 exclusive , decrementing i",
      "code": "for ( i = n ; i > 0 ; i -- )",
      "indent": 4
    },
    {
      "line": 39,
      "text": "print \" LU \" print newline",
      "code": "cout << \" LU \" << endl ;",
      "indent": 5
    },
    {
      "line": 40,
      "text": "increment m",
      "code": "m ++ ;",
      "indent": 5
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 44,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 45,
      "text": "if n is less than 0",
      "code": "if ( n < 0 )",
      "indent": 2
    },
    {
      "line": 46,
      "text": "if m is less than - n",
      "code": "if ( m < - n )",
      "indent": 3
    },
    {
      "line": 47,
      "text": "for i = m to 0 decrementing i",
      "code": "for ( i = m ; i > 0 ; i -- )",
      "indent": 4
    },
    {
      "line": 48,
      "text": "print \" RD \" print newline",
      "code": "cout << \" RD \" << endl ;",
      "indent": 5
    },
    {
      "line": 49,
      "text": "increment n",
      "code": "n ++ ;",
      "indent": 5
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 51,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 52,
      "text": "for i = - n to 0 exclusive , decrementing i",
      "code": "for ( i = - n ; i > 0 ; i -- )",
      "indent": 4
    },
    {
      "line": 53,
      "text": "print \" RD \" print newline",
      "code": "cout << \" RD \" << endl ;",
      "indent": 5
    },
    {
      "line": 54,
      "text": "decrement m",
      "code": "m -- ;",
      "indent": 5
    },
    {
      "line": 55,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 57,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 58,
      "text": "if m is less than n",
      "code": "if ( m < n )",
      "indent": 3
    },
    {
      "line": 59,
      "text": "for i = m to 0 exclusive , decrementing i",
      "code": "for ( i = m ; i > 0 ; i -- )",
      "indent": 4
    },
    {
      "line": 60,
      "text": "print \" RU \" print newline",
      "code": "cout << \" RU \" << endl ;",
      "indent": 5
    },
    {
      "line": 61,
      "text": "decrement n",
      "code": "n -- ;",
      "indent": 5
    },
    {
      "line": 62,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 63,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 64,
      "text": "for i = n to 0 exclusive , decrementing i",
      "code": "for ( i = n ; i > 0 ; i -- )",
      "indent": 4
    },
    {
      "line": 65,
      "text": "print \" RU \" print newline",
      "code": "cout << \" RU \" << endl ;",
      "indent": 5
    },
    {
      "line": 66,
      "text": "decrement m",
      "code": "m -- ;",
      "indent": 5
    },
    {
      "line": 67,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 68,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 69,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 70,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 71,
      "text": "if f is 1",
      "code": "if ( f == 1 )",
      "indent": 1
    },
    {
      "line": 72,
      "text": "if m is less than 0",
      "code": "if ( m < 0 )",
      "indent": 2
    },
    {
      "line": 73,
      "text": "for i = - m to 0 exclusive , decrementing i , print \" L \" print newline",
      "code": "for ( i = - m ; i > 0 ; i -- ) { cout << \" L \" << endl ; }",
      "indent": 3
    },
    {
      "line": 74,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 75,
      "text": "for i = m to 0 exclusive , decrementing i , print \" R \" print newline",
      "code": "for ( i = m ; i > 0 ; i -- ) { cout << \" R \" << endl ; }",
      "indent": 3
    },
    {
      "line": 76,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 77,
      "text": "else if f is 2",
      "code": "else if ( f == 2 )",
      "indent": 1
    },
    {
      "line": 78,
      "text": "if n is less than 0",
      "code": "if ( n < 0 )",
      "indent": 2
    },
    {
      "line": 79,
      "text": "for i = - n to 0 exclusive , decrementing i , print \" D \" print newline",
      "code": "for ( i = - n ; i > 0 ; i -- ) { cout << \" D \" << endl ; }",
      "indent": 3
    },
    {
      "line": 80,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 81,
      "text": "for i = n to 0 exclusive , decrementing i , print \" U \" print newline",
      "code": "for ( i = n ; i > 0 ; i -- ) { cout << \" U \" << endl ; }",
      "indent": 3
    },
    {
      "line": 82,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 83,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 84,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 85,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s1 , s2 , t1 , t2 , t2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int f , i , m , n , n ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( abs ( m ) > abs ( ) )"
      ],
      "err_line": 7,
      "err_msg": "no matching function for call to ‘abs()’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( max ( m ) == abs ( n ) )"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 31,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 37,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        44
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 44,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        51
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 51,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        57
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 57,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        63
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 63,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        74
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 74,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        77
      ],
      "mod_code": [
        "else if ( f == 2 2"
      ],
      "err_line": 77,
      "err_msg": "expected ‘)’ before numeric constant"
    },
    {
      "mod_line": [
        80
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 80,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        6,
        1
      ],
      "mod_code": [
        "m -= s1 ;",
        "n -= s2 ;",
        "char s1 , s2 , t1 , t2 , t2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        5,
        6,
        1,
        12
      ],
      "mod_code": [
        "m -= s1 ;",
        "n -= s2 ;",
        "char s1 , s2 , t1 , t2 , t2 ;",
        "if ( max ( m ) == abs ( n ) )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        5,
        6,
        1,
        14
      ],
      "mod_code": [
        "m -= s1 ;",
        "n -= s2 ;",
        "char s1 , s2 , t1 , t2 , t2 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        5,
        6,
        1,
        31
      ],
      "mod_code": [
        "m -= s1 ;",
        "n -= s2 ;",
        "char s1 , s2 , t1 , t2 , t2 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        5,
        6,
        12
      ],
      "mod_code": [
        "m -= s1 ;",
        "n -= s2 ;",
        "if ( max ( m ) == abs ( n ) )"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        5,
        6,
        12,
        14
      ],
      "mod_code": [
        "m -= s1 ;",
        "n -= s2 ;",
        "if ( max ( m ) == abs ( n ) )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        5,
        6,
        12,
        31
      ],
      "mod_code": [
        "m -= s1 ;",
        "n -= s2 ;",
        "if ( max ( m ) == abs ( n ) )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        5,
        6,
        14
      ],
      "mod_code": [
        "m -= s1 ;",
        "n -= s2 ;",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        6,
        14,
        31
      ],
      "mod_code": [
        "m -= s1 ;",
        "n -= s2 ;",
        "else else",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        6,
        31
      ],
      "mod_code": [
        "m -= s1 ;",
        "n -= s2 ;",
        "else else"
      ],
      "err_line": 31,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "m -= s1 ;",
        "char s1 , s2 , t1 , t2 , t2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        5,
        1,
        12
      ],
      "mod_code": [
        "m -= s1 ;",
        "char s1 , s2 , t1 , t2 , t2 ;",
        "if ( max ( m ) == abs ( n ) )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        5,
        1,
        12,
        14
      ],
      "mod_code": [
        "m -= s1 ;",
        "char s1 , s2 , t1 , t2 , t2 ;",
        "if ( max ( m ) == abs ( n ) )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        5,
        1,
        12,
        31
      ],
      "mod_code": [
        "m -= s1 ;",
        "char s1 , s2 , t1 , t2 , t2 ;",
        "if ( max ( m ) == abs ( n ) )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        5,
        1,
        14
      ],
      "mod_code": [
        "m -= s1 ;",
        "char s1 , s2 , t1 , t2 , t2 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        5,
        1,
        14,
        31
      ],
      "mod_code": [
        "m -= s1 ;",
        "char s1 , s2 , t1 , t2 , t2 ;",
        "else else",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        5,
        1,
        31
      ],
      "mod_code": [
        "m -= s1 ;",
        "char s1 , s2 , t1 , t2 , t2 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "m -= s1 ;",
        "if ( max ( m ) == abs ( n ) )"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        5,
        12,
        14
      ],
      "mod_code": [
        "m -= s1 ;",
        "if ( max ( m ) == abs ( n ) )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        5,
        12,
        14,
        31
      ],
      "mod_code": [
        "m -= s1 ;",
        "if ( max ( m ) == abs ( n ) )",
        "else else",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        5,
        12,
        31
      ],
      "mod_code": [
        "m -= s1 ;",
        "if ( max ( m ) == abs ( n ) )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        5,
        14
      ],
      "mod_code": [
        "m -= s1 ;",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        14,
        31
      ],
      "mod_code": [
        "m -= s1 ;",
        "else else",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        31
      ],
      "mod_code": [
        "m -= s1 ;",
        "else else"
      ],
      "err_line": 31,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "n -= s2 ;",
        "char s1 , s2 , t1 , t2 , t2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        6,
        1,
        12
      ],
      "mod_code": [
        "n -= s2 ;",
        "char s1 , s2 , t1 , t2 , t2 ;",
        "if ( max ( m ) == abs ( n ) )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        6,
        1,
        12,
        14
      ],
      "mod_code": [
        "n -= s2 ;",
        "char s1 , s2 , t1 , t2 , t2 ;",
        "if ( max ( m ) == abs ( n ) )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        6,
        1,
        12,
        31
      ],
      "mod_code": [
        "n -= s2 ;",
        "char s1 , s2 , t1 , t2 , t2 ;",
        "if ( max ( m ) == abs ( n ) )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        6,
        1,
        14
      ],
      "mod_code": [
        "n -= s2 ;",
        "char s1 , s2 , t1 , t2 , t2 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        6,
        1,
        14,
        31
      ],
      "mod_code": [
        "n -= s2 ;",
        "char s1 , s2 , t1 , t2 , t2 ;",
        "else else",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        6,
        1,
        31
      ],
      "mod_code": [
        "n -= s2 ;",
        "char s1 , s2 , t1 , t2 , t2 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "n -= s2 ;",
        "if ( max ( m ) == abs ( n ) )"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        6,
        12,
        14
      ],
      "mod_code": [
        "n -= s2 ;",
        "if ( max ( m ) == abs ( n ) )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        6,
        12,
        14,
        31
      ],
      "mod_code": [
        "n -= s2 ;",
        "if ( max ( m ) == abs ( n ) )",
        "else else",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        6,
        12,
        31
      ],
      "mod_code": [
        "n -= s2 ;",
        "if ( max ( m ) == abs ( n ) )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "n -= s2 ;",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        14,
        31
      ],
      "mod_code": [
        "n -= s2 ;",
        "else else",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        31
      ],
      "mod_code": [
        "n -= s2 ;",
        "else else"
      ],
      "err_line": 31,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "char s1 , s2 , t1 , t2 , t2 ;",
        "if ( max ( m ) == abs ( n ) )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        1,
        12,
        14
      ],
      "mod_code": [
        "char s1 , s2 , t1 , t2 , t2 ;",
        "if ( max ( m ) == abs ( n ) )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        1,
        12,
        14,
        31
      ],
      "mod_code": [
        "char s1 , s2 , t1 , t2 , t2 ;",
        "if ( max ( m ) == abs ( n ) )",
        "else else",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        1,
        12,
        31
      ],
      "mod_code": [
        "char s1 , s2 , t1 , t2 , t2 ;",
        "if ( max ( m ) == abs ( n ) )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "char s1 , s2 , t1 , t2 , t2 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        1,
        14,
        31
      ],
      "mod_code": [
        "char s1 , s2 , t1 , t2 , t2 ;",
        "else else",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        1,
        31
      ],
      "mod_code": [
        "char s1 , s2 , t1 , t2 , t2 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘char t2’"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "if ( max ( m ) == abs ( n ) )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        12,
        14,
        31
      ],
      "mod_code": [
        "if ( max ( m ) == abs ( n ) )",
        "else else",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        12,
        31
      ],
      "mod_code": [
        "if ( max ( m ) == abs ( n ) )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        14,
        31
      ],
      "mod_code": [
        "else else",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}