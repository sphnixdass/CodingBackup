{
  "meta": {
    "index": 1255,
    "hitid": "3OKP4QVBP2RYNM8HX8181QMV16RAGJ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "496A",
    "subid": "47340703"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare difficulty with integer vector level as argument , returning integer",
      "code": "int difficulty ( vector < int > level )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare maxi = level [ 1 ] - level [ 0 ] as integer",
      "code": "int maxi = level [ 1 ] - level [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 0 to i + 1 is less than size of level , incrementing i",
      "code": "for ( int i = 0 ; i + 1 < level . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if maxi is less than ( level [ i + 1 ] - level [ i ] ) let maxi = levevl [ i + 1 ] - level [ i ]",
      "code": "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) { maxi = level [ i + 1 ] - level [ i ] ; }",
      "indent": 2
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 5,
      "text": "return maxi from function",
      "code": "return maxi ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 8,
      "text": "declare integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "declare integer pointer a = new integer array size n - 2",
      "code": "int * a = new int [ n - 2 ] ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "declare integer j = 0",
      "code": "int j = 0 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "declare integer x",
      "code": "int x ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "declare integer vector level",
      "code": "vector < int > level ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "add x to end of level",
      "code": "level . push_back ( x ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "declare integer siz = size of level",
      "code": "int siz = level . size ( ) ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i = 1 to i + 1 is less than siz , incrementing i",
      "code": "for ( int i = 1 ; i + 1 < siz ; i ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "let x be level [ i ]",
      "code": "x = level [ i ] ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "remove ( beginning of level + i ) from level",
      "code": "level . erase ( level . begin ( ) + i ) ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "let a [ j ] be result of run difficulty with level as argument",
      "code": "a [ j ] = difficulty ( level ) ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "increment j",
      "code": "j ++ ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "add x to end of level",
      "code": "level . push_back ( x ) ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "sort from beginning of level to end of level",
      "code": "sort ( level . begin ( ) , level . end ( ) ) ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "sort from a to a + n - 2",
      "code": "sort ( a , a + n - 2 ) ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print a [ 0 ] and newline",
      "code": "cout << a [ 0 ] << endl ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi = levevl [ i + 1 ] - level [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘levevl’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int difficulty ( int level )"
      ],
      "err_line": 1,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i + 1 < level . size ( ) ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi += levevl [ i + 1 ] - level [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘levevl’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "return ;"
      ],
      "err_line": 5,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 22,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "vector < vector < int > level ;"
      ],
      "err_line": 13,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "level . push ( x ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘class std::vector<int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "int siz = level . length ( ) ;"
      ],
      "err_line": 18,
      "err_msg": "‘class std::vector<int>’ has no member named ‘length’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "level = level ( level . begin ( ) + i ) ;"
      ],
      "err_line": 21,
      "err_msg": "no match for call to ‘(std::vector<int>) (__gnu_cxx::__normal_iterator<int*, std::vector<int> >)’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "a [ j ] = difficulty ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘int (*)(std::vector<int>)’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "level . push ( x ) ;"
      ],
      "err_line": 24,
      "err_msg": "‘class std::vector<int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "sort ( v . begin ( ) , level . end ( ) ) ;"
      ],
      "err_line": 25,
      "err_msg": "‘v’ was not declared in this scope"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;",
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi = levevl [ i + 1 ] - level [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        22
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;",
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi = levevl [ i + 1 ] - level [ i ] ;",
        "a [ j ] = difficulty ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        22,
        14
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;",
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi = levevl [ i + 1 ] - level [ i ] ;",
        "a [ j ] = difficulty ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        22,
        5
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;",
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi = levevl [ i + 1 ] - level [ i ] ;",
        "a [ j ] = difficulty ;",
        "return ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        14
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;",
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi = levevl [ i + 1 ] - level [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        14,
        5
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;",
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi = levevl [ i + 1 ] - level [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "return ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        5
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;",
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi = levevl [ i + 1 ] - level [ i ] ;",
        "return ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        22
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;",
        "a [ j ] = difficulty ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        22,
        14
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;",
        "a [ j ] = difficulty ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        22,
        14,
        5
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;",
        "a [ j ] = difficulty ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "return ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        22,
        14,
        3
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;",
        "a [ j ] = difficulty ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi += levevl [ i + 1 ] - level [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        22,
        5
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;",
        "a [ j ] = difficulty ;",
        "return ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        22,
        5,
        3
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;",
        "a [ j ] = difficulty ;",
        "return ;",
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi += levevl [ i + 1 ] - level [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        22,
        3
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;",
        "a [ j ] = difficulty ;",
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi += levevl [ i + 1 ] - level [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        14,
        5
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "return ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        14,
        5,
        3
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "return ;",
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi += levevl [ i + 1 ] - level [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        14,
        3
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi += levevl [ i + 1 ] - level [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;",
        "return ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        5,
        3
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;",
        "return ;",
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi += levevl [ i + 1 ] - level [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "vector < int > difficulty ( int level ) ;",
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi += levevl [ i + 1 ] - level [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        22
      ],
      "mod_code": [
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi = levevl [ i + 1 ] - level [ i ] ;",
        "a [ j ] = difficulty ;"
      ],
      "err_line": 3,
      "err_msg": "‘levevl’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        22,
        14
      ],
      "mod_code": [
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi = levevl [ i + 1 ] - level [ i ] ;",
        "a [ j ] = difficulty ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘levevl’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        22,
        14,
        5
      ],
      "mod_code": [
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi = levevl [ i + 1 ] - level [ i ] ;",
        "a [ j ] = difficulty ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "return ;"
      ],
      "err_line": 3,
      "err_msg": "‘levevl’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        22,
        5
      ],
      "mod_code": [
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi = levevl [ i + 1 ] - level [ i ] ;",
        "a [ j ] = difficulty ;",
        "return ;"
      ],
      "err_line": 3,
      "err_msg": "‘levevl’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi = levevl [ i + 1 ] - level [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘levevl’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        14,
        5
      ],
      "mod_code": [
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi = levevl [ i + 1 ] - level [ i ] ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "return ;"
      ],
      "err_line": 3,
      "err_msg": "‘levevl’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi = levevl [ i + 1 ] - level [ i ] ;",
        "return ;"
      ],
      "err_line": 3,
      "err_msg": "‘levevl’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        14
      ],
      "mod_code": [
        "a [ j ] = difficulty ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        14,
        5
      ],
      "mod_code": [
        "a [ j ] = difficulty ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "return ;"
      ],
      "err_line": 5,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        22,
        14,
        5,
        3
      ],
      "mod_code": [
        "a [ j ] = difficulty ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "return ;",
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi += levevl [ i + 1 ] - level [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘levevl’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        14,
        3
      ],
      "mod_code": [
        "a [ j ] = difficulty ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi += levevl [ i + 1 ] - level [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘levevl’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        5
      ],
      "mod_code": [
        "a [ j ] = difficulty ;",
        "return ;"
      ],
      "err_line": 5,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        22,
        5,
        3
      ],
      "mod_code": [
        "a [ j ] = difficulty ;",
        "return ;",
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi += levevl [ i + 1 ] - level [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘levevl’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        3
      ],
      "mod_code": [
        "a [ j ] = difficulty ;",
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi += levevl [ i + 1 ] - level [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘levevl’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "return ;"
      ],
      "err_line": 5,
      "err_msg": "return-statement with no value, in function returning ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        5,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "return ;",
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi += levevl [ i + 1 ] - level [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘levevl’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi += levevl [ i + 1 ] - level [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘levevl’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "return ;",
        "if ( maxi < ( level [ i + 1 ] - level [ i ] ) ) maxi += levevl [ i + 1 ] - level [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘levevl’ was not declared in this scope"
    }
  ]
}