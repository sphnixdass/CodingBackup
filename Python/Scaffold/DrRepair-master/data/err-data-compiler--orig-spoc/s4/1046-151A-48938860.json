{
  "meta": {
    "index": 1046,
    "hitid": "3BDORL6HKK7D5RETXXRB6PQQ3ILRCW",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "151A",
    "subid": "48938860"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , k , l , c , d , p , nl , np , kl , cd , NP = int",
      "code": "int n , k , l , c , d , p , nl , np , kl , cd , NP ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n then k then l then c then d then p then nl then np",
      "code": "cin >> n >> k >> l >> c >> d >> p >> nl >> np ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set kl to ( k * l ) / nl",
      "code": "kl = ( k * l ) / nl ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set cd to c * d",
      "code": "cd = c * d ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set NP to p / np",
      "code": "NP = p / np ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "r = int with r = 0",
      "code": "int r = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "loop while kl - n is greater or equal to 0 and cd - n is greater or equal to 0 and NP - n is greater or equal to 0",
      "code": "while ( kl - n >= 0 && cd - n >= 0 && NP - n >= 0 )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set kl to kl - n",
      "code": "kl = kl - n ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set NP to NP - n",
      "code": "NP = NP - n ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set cd to cd - n",
      "code": "cd = cd - n ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increment r",
      "code": "r ++ ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print r",
      "code": "cout << r << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int kl = ( k * l ) / nl ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        2,
        4
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "cd *= d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        5
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "cd *= d ;",
        "NP /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        3
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "cd *= d ;",
        "int kl = ( k * l ) / nl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "cd *= d ;",
        "int r = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "NP /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        3
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "NP /= np ;",
        "int kl = ( k * l ) / nl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "NP /= np ;",
        "int r = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int kl = ( k * l ) / nl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int kl = ( k * l ) / nl ;",
        "int r = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        2,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int r = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "cd *= d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        4,
        5
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "cd *= d ;",
        "NP /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        3
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "cd *= d ;",
        "NP /= np ;",
        "int kl = ( k * l ) / nl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "cd *= d ;",
        "NP /= np ;",
        "int r = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        4,
        3
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "cd *= d ;",
        "int kl = ( k * l ) / nl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        4,
        3,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "cd *= d ;",
        "int kl = ( k * l ) / nl ;",
        "int r = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        4,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "cd *= d ;",
        "int r = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "NP /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        5,
        3
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "NP /= np ;",
        "int kl = ( k * l ) / nl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        5,
        3,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "NP /= np ;",
        "int kl = ( k * l ) / nl ;",
        "int r = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        5,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "NP /= np ;",
        "int r = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "int kl = ( k * l ) / nl ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        3,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "int kl = ( k * l ) / nl ;",
        "int r = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , nl , np , kl , kl , NP ;",
        "int r = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        3
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "cd *= d ;",
        "NP /= np ;",
        "int kl = ( k * l ) / nl ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        2,
        4,
        3
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "cd *= d ;",
        "int kl = ( k * l ) / nl ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        2,
        4,
        3,
        6
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "cd *= d ;",
        "int kl = ( k * l ) / nl ;",
        "int r = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        2,
        5,
        3
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "NP /= np ;",
        "int kl = ( k * l ) / nl ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        2,
        5,
        3,
        6
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "NP /= np ;",
        "int kl = ( k * l ) / nl ;",
        "int r = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int kl = ( k * l ) / nl ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        2,
        3,
        6
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int kl = ( k * l ) / nl ;",
        "int r = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        4,
        5,
        3
      ],
      "mod_code": [
        "cd *= d ;",
        "NP /= np ;",
        "int kl = ( k * l ) / nl ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        4,
        5,
        3,
        6
      ],
      "mod_code": [
        "cd *= d ;",
        "NP /= np ;",
        "int kl = ( k * l ) / nl ;",
        "int r = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "cd *= d ;",
        "int kl = ( k * l ) / nl ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        4,
        3,
        6
      ],
      "mod_code": [
        "cd *= d ;",
        "int kl = ( k * l ) / nl ;",
        "int r = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "NP /= np ;",
        "int kl = ( k * l ) / nl ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        5,
        3,
        6
      ],
      "mod_code": [
        "NP /= np ;",
        "int kl = ( k * l ) / nl ;",
        "int r = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int kl’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "int kl = ( k * l ) / nl ;",
        "int r = 1 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int kl’"
    }
  ]
}