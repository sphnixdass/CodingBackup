{
  "meta": {
    "index": 640,
    "hitid": "3PUV2Q8SV4Y0UC3I1W0WQG345UKBDO",
    "workerid": "AIWEXPJAU66D9",
    "probid": "14A",
    "subid": "46976438"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integers u , d , l , r , n and m",
      "code": "int u , d , l , r , n , m ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let a be a 2d array of booleans with size 51 by 51",
      "code": "bool a [ 51 ] [ 51 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set u to n",
      "code": "u = n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set d to 0",
      "code": "d = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set l to m",
      "code": "l = m ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set r to 0",
      "code": "r = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for integer i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for j = 1 to m inclusive",
      "code": "for ( int j = 1 ; j <= m ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "c = character",
      "code": "char c ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "read c",
      "code": "cin >> c ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "a [ i ] [ j ] = true if c is ' * ' , or false otherwise",
      "code": "a [ i ] [ j ] = ( c == ' * ' ) ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "if a [ i ] [ j ] is true",
      "code": "if ( a [ i ] [ j ] )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "u = min of u and i",
      "code": "u = min ( u , i ) ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "d = max of d and i",
      "code": "d = max ( d , i ) ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "l = min of l and j",
      "code": "l = min ( l , j ) ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "r = max of r and j",
      "code": "r = max ( r , j ) ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "for integer i = u to d inclusive",
      "code": "for ( int i = u ; i <= d ; i ++ )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "for integer j = l to r inclusive",
      "code": "for ( int j = l ; j <= r ; j ++ )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if a [ i ] [ j ] is true",
      "code": "if ( a [ i ] [ j ] )",
      "indent": 3
    },
    {
      "line": 23,
      "text": "print \" * \"",
      "code": "cout << \" * \" ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 25,
      "text": "print \" . \"",
      "code": "cout << \" . \" ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "print \" \\ n \"",
      "code": "cout << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "<< \" \\n \" ;"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long int u , d , l , r , n , m ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘min(long int&, int&)’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool a [ 51 + 51 ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( j = 1 ; j <= m ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "set < char > c ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        26
      ],
      "mod_code": [
        "a [ i ] [ j ] = true ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        26,
        11
      ],
      "mod_code": [
        "a [ i ] [ j ] = true ;",
        "<< \" \\n \" ;",
        "c = getchar ( ) ;"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        26,
        11,
        24
      ],
      "mod_code": [
        "a [ i ] [ j ] = true ;",
        "<< \" \\n \" ;",
        "c = getchar ( ) ;",
        "else else"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        26,
        11,
        25
      ],
      "mod_code": [
        "a [ i ] [ j ] = true ;",
        "<< \" \\n \" ;",
        "c = getchar ( ) ;",
        "cout << \" .. \" ;"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        26,
        24
      ],
      "mod_code": [
        "a [ i ] [ j ] = true ;",
        "<< \" \\n \" ;",
        "else else"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        26,
        24,
        25
      ],
      "mod_code": [
        "a [ i ] [ j ] = true ;",
        "<< \" \\n \" ;",
        "else else",
        "cout << \" .. \" ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        26,
        25
      ],
      "mod_code": [
        "a [ i ] [ j ] = true ;",
        "<< \" \\n \" ;",
        "cout << \" .. \" ;"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        11,
        24
      ],
      "mod_code": [
        "a [ i ] [ j ] = true ;",
        "c = getchar ( ) ;",
        "else else"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        11,
        24,
        25
      ],
      "mod_code": [
        "a [ i ] [ j ] = true ;",
        "c = getchar ( ) ;",
        "else else",
        "cout << \" .. \" ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        24
      ],
      "mod_code": [
        "a [ i ] [ j ] = true ;",
        "else else"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        24,
        25
      ],
      "mod_code": [
        "a [ i ] [ j ] = true ;",
        "else else",
        "cout << \" .. \" ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26,
        11
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "c = getchar ( ) ;"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        26,
        11,
        24
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "c = getchar ( ) ;",
        "else else"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26,
        11,
        24,
        25
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "c = getchar ( ) ;",
        "else else",
        "cout << \" .. \" ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26,
        11,
        24,
        12
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "c = getchar ( ) ;",
        "else else",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26,
        11,
        25
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "c = getchar ( ) ;",
        "cout << \" .. \" ;"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        26,
        11,
        25,
        12
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "c = getchar ( ) ;",
        "cout << \" .. \" ;",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        26,
        11,
        12
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "c = getchar ( ) ;",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        26,
        24
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "else else"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26,
        24,
        25
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "else else",
        "cout << \" .. \" ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26,
        24,
        25,
        12
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "else else",
        "cout << \" .. \" ;",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26,
        24,
        12
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "else else",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26,
        25
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "cout << \" .. \" ;"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        26,
        25,
        12
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "cout << \" .. \" ;",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        26,
        12
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        11,
        24
      ],
      "mod_code": [
        "c = getchar ( ) ;",
        "else else"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        24,
        25
      ],
      "mod_code": [
        "c = getchar ( ) ;",
        "else else",
        "cout << \" .. \" ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        24,
        25,
        12
      ],
      "mod_code": [
        "c = getchar ( ) ;",
        "else else",
        "cout << \" .. \" ;",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        24,
        12
      ],
      "mod_code": [
        "c = getchar ( ) ;",
        "else else",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        24,
        25
      ],
      "mod_code": [
        "else else",
        "cout << \" .. \" ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        24,
        25,
        12
      ],
      "mod_code": [
        "else else",
        "cout << \" .. \" ;",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        24,
        12
      ],
      "mod_code": [
        "else else",
        "a [ i ] [ j ] = a [ i ] [ j ] ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}