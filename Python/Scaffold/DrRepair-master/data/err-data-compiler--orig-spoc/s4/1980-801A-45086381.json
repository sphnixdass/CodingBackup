{
  "meta": {
    "index": 1980,
    "hitid": "3SBNLSTU6UZWCA6Y7AGZCYA7XZHDZC",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "801A",
    "subid": "45086381"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "ans = int with ans = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to length of s",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 0 to 52",
      "code": "for ( int j = 0 ; j < 52 ; j ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "ch = char with ch = s [ i ]",
      "code": "char ch = s [ i ] ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "if j is less than 26",
      "code": "if ( j < 26 )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "set s [ i ] ti j + ' a '",
      "code": "s [ i ] = j + ' a ' ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 10,
      "text": "set s [ i ] to j - 26 + ' A '",
      "code": "s [ i ] = j - 26 + ' A ' ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "cnt = int with cnt = 0",
      "code": "int cnt = 0 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "for k = 0 to length of s - 1",
      "code": "for ( int k = 0 ; k < s . length ( ) - 1 ; k ++ )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "if s [ k ] is ' V ' and s [ k + 1 ] is ' K ' increment both cnt and k",
      "code": "if ( s [ k ] == ' V ' && s [ k + 1 ] == ' K ' ) { cnt ++ , k ++ ; }",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "set ans to max of ans and cnt",
      "code": "ans = max ( ans , cnt ) ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "set s [ i ] to ch",
      "code": "s [ i ] = ch ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "return ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( j = 0 ; j < 52 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "char ch = new char [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( k = 0 ; k < s . length ( ) - 1 ; k ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        3,
        16,
        6
      ],
      "mod_code": [
        "return ans ;",
        "int ans = 1 ;",
        "s [ i ] = ' ch ' ;",
        "char ch = new char [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        3,
        16,
        2
      ],
      "mod_code": [
        "return ans ;",
        "int ans = 1 ;",
        "s [ i ] = ' ch ' ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        19,
        3,
        6
      ],
      "mod_code": [
        "return ans ;",
        "int ans = 1 ;",
        "char ch = new char [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        3,
        6,
        2
      ],
      "mod_code": [
        "return ans ;",
        "int ans = 1 ;",
        "char ch = new char [ i ] ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        19,
        3,
        2
      ],
      "mod_code": [
        "return ans ;",
        "int ans = 1 ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        19,
        16,
        6
      ],
      "mod_code": [
        "return ans ;",
        "s [ i ] = ' ch ' ;",
        "char ch = new char [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        16,
        6,
        2
      ],
      "mod_code": [
        "return ans ;",
        "s [ i ] = ' ch ' ;",
        "char ch = new char [ i ] ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        19,
        16,
        2
      ],
      "mod_code": [
        "return ans ;",
        "s [ i ] = ' ch ' ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        19,
        6
      ],
      "mod_code": [
        "return ans ;",
        "char ch = new char [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        6,
        2
      ],
      "mod_code": [
        "return ans ;",
        "char ch = new char [ i ] ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        19,
        2
      ],
      "mod_code": [
        "return ans ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        16,
        6
      ],
      "mod_code": [
        "int ans = 1 ;",
        "s [ i ] = ' ch ' ;",
        "char ch = new char [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        16,
        6,
        2
      ],
      "mod_code": [
        "int ans = 1 ;",
        "s [ i ] = ' ch ' ;",
        "char ch = new char [ i ] ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        16,
        6,
        19
      ],
      "mod_code": [
        "int ans = 1 ;",
        "s [ i ] = ' ch ' ;",
        "char ch = new char [ i ] ;",
        "return ( ans ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        16,
        2
      ],
      "mod_code": [
        "int ans = 1 ;",
        "s [ i ] = ' ch ' ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        16,
        2,
        19
      ],
      "mod_code": [
        "int ans = 1 ;",
        "s [ i ] = ' ch ' ;",
        "gets ( s ) ;",
        "return ( ans ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "int ans = 1 ;",
        "char ch = new char [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        6,
        2
      ],
      "mod_code": [
        "int ans = 1 ;",
        "char ch = new char [ i ] ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        6,
        2,
        19
      ],
      "mod_code": [
        "int ans = 1 ;",
        "char ch = new char [ i ] ;",
        "gets ( s ) ;",
        "return ( ans ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        6,
        19
      ],
      "mod_code": [
        "int ans = 1 ;",
        "char ch = new char [ i ] ;",
        "return ( ans ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int ans = 1 ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        2,
        19
      ],
      "mod_code": [
        "int ans = 1 ;",
        "gets ( s ) ;",
        "return ( ans ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        16,
        6
      ],
      "mod_code": [
        "s [ i ] = ' ch ' ;",
        "char ch = new char [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        6,
        2
      ],
      "mod_code": [
        "s [ i ] = ' ch ' ;",
        "char ch = new char [ i ] ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        16,
        6,
        2,
        19
      ],
      "mod_code": [
        "s [ i ] = ' ch ' ;",
        "char ch = new char [ i ] ;",
        "gets ( s ) ;",
        "return ( ans ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        16,
        6,
        19
      ],
      "mod_code": [
        "s [ i ] = ' ch ' ;",
        "char ch = new char [ i ] ;",
        "return ( ans ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        2
      ],
      "mod_code": [
        "s [ i ] = ' ch ' ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        16,
        2,
        19
      ],
      "mod_code": [
        "s [ i ] = ' ch ' ;",
        "gets ( s ) ;",
        "return ( ans ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "char ch = new char [ i ] ;",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        2,
        19
      ],
      "mod_code": [
        "char ch = new char [ i ] ;",
        "gets ( s ) ;",
        "return ( ans ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        19
      ],
      "mod_code": [
        "char ch = new char [ i ] ;",
        "return ( ans ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        19
      ],
      "mod_code": [
        "gets ( s ) ;",
        "return ( ans ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}