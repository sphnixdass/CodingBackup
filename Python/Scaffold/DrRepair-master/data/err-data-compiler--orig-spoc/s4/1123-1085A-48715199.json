{
  "meta": {
    "index": 1123,
    "hitid": "3UL5XDRDNCDMO1QIJEY312PBKMG85N",
    "workerid": "A1AYVATMT88U1W",
    "probid": "1085A",
    "subid": "48715199"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let str be a string",
      "code": "string str ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let ans be a string",
      "code": "string ans ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let k be a integer",
      "code": "int k ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let len be a integer with value str . length",
      "code": "int len = str . length ( ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if ( len % 2 is equal to 0 )",
      "code": "if ( len % 2 == 0 )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "let the k value be initialized with len / 2 - 1",
      "code": "k = len / 2 - 1 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 9,
      "text": "let the k value be initialized with len / 2",
      "code": "k = len / 2 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "do ans . push_back ( str [ k ] )",
      "code": "ans . push_back ( str [ k ] ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for ( integer i = 1 to len exclusive )",
      "code": "for ( int i = 1 ; i < len ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if ( k + i is less than len ) , then ans . push_back ( str [ k + i ] )",
      "code": "if ( k + i < len ) ans . push_back ( str [ k + i ] ) ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if ( k - i is greater than or equal to 0 ) , then ans . push_back ( str [ k - i ] )",
      "code": "if ( k - i >= 0 ) ans . push_back ( str [ k - i ] ) ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print ans and newline",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char str ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string let ;"
      ],
      "err_line": 10,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "char ans . push_back ( str [ k ] ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "k *= 2 ;",
        "char ans . push_back ( str [ k ] ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        9,
        10,
        8
      ],
      "mod_code": [
        "k *= 2 ;",
        "char ans . push_back ( str [ k ] ) ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        10,
        8,
        1
      ],
      "mod_code": [
        "k *= 2 ;",
        "char ans . push_back ( str [ k ] ) ;",
        "else else",
        "char str ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        9,
        10,
        8,
        3
      ],
      "mod_code": [
        "k *= 2 ;",
        "char ans . push_back ( str [ k ] ) ;",
        "else else",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        10,
        1
      ],
      "mod_code": [
        "k *= 2 ;",
        "char ans . push_back ( str [ k ] ) ;",
        "char str ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        9,
        10,
        1,
        3
      ],
      "mod_code": [
        "k *= 2 ;",
        "char ans . push_back ( str [ k ] ) ;",
        "char str ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        10,
        3
      ],
      "mod_code": [
        "k *= 2 ;",
        "char ans . push_back ( str [ k ] ) ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "k *= 2 ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        8,
        1
      ],
      "mod_code": [
        "k *= 2 ;",
        "else else",
        "char str ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        9,
        8,
        1,
        3
      ],
      "mod_code": [
        "k *= 2 ;",
        "else else",
        "char str ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        8,
        3
      ],
      "mod_code": [
        "k *= 2 ;",
        "else else",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "k *= 2 ;",
        "char str ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        9,
        1,
        3
      ],
      "mod_code": [
        "k *= 2 ;",
        "char str ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "k *= 2 ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "char ans . push_back ( str [ k ] ) ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        8,
        1
      ],
      "mod_code": [
        "char ans . push_back ( str [ k ] ) ;",
        "else else",
        "char str ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        10,
        8,
        1,
        3
      ],
      "mod_code": [
        "char ans . push_back ( str [ k ] ) ;",
        "else else",
        "char str ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        8,
        1,
        9
      ],
      "mod_code": [
        "char ans . push_back ( str [ k ] ) ;",
        "else else",
        "char str ;",
        "k = len * 2 ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        10,
        8,
        3
      ],
      "mod_code": [
        "char ans . push_back ( str [ k ] ) ;",
        "else else",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        8,
        3,
        9
      ],
      "mod_code": [
        "char ans . push_back ( str [ k ] ) ;",
        "else else",
        "gets ( str ) ;",
        "k = len * 2 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        8,
        9
      ],
      "mod_code": [
        "char ans . push_back ( str [ k ] ) ;",
        "else else",
        "k = len * 2 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "char ans . push_back ( str [ k ] ) ;",
        "char str ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        10,
        1,
        3
      ],
      "mod_code": [
        "char ans . push_back ( str [ k ] ) ;",
        "char str ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        1,
        3,
        9
      ],
      "mod_code": [
        "char ans . push_back ( str [ k ] ) ;",
        "char str ;",
        "gets ( str ) ;",
        "k = len * 2 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        1,
        9
      ],
      "mod_code": [
        "char ans . push_back ( str [ k ] ) ;",
        "char str ;",
        "k = len * 2 ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "char ans . push_back ( str [ k ] ) ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        3,
        9
      ],
      "mod_code": [
        "char ans . push_back ( str [ k ] ) ;",
        "gets ( str ) ;",
        "k = len * 2 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "char ans . push_back ( str [ k ] ) ;",
        "k = len * 2 ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "else else",
        "char str ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        8,
        1,
        3
      ],
      "mod_code": [
        "else else",
        "char str ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        1,
        3,
        9
      ],
      "mod_code": [
        "else else",
        "char str ;",
        "gets ( str ) ;",
        "k = len * 2 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        1,
        9
      ],
      "mod_code": [
        "else else",
        "char str ;",
        "k = len * 2 ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "else else",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8,
        3,
        9
      ],
      "mod_code": [
        "else else",
        "gets ( str ) ;",
        "k = len * 2 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "else else",
        "k = len * 2 ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "char str ;",
        "gets ( str ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        9
      ],
      "mod_code": [
        "char str ;",
        "gets ( str ) ;",
        "k = len * 2 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "char str ;",
        "k = len * 2 ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "gets ( str ) ;",
        "k = len * 2 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}