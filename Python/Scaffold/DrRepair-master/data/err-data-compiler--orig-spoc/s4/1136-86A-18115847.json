{
  "meta": {
    "index": 1136,
    "hitid": "3JUDR1D0D6L0V87RNPD5PM7ZV552QW",
    "workerid": "A1APYLD4DUK33J",
    "probid": "86A",
    "subid": "18115847"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare length with integer n as argument , returning integer",
      "code": "int length ( int n )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer cnt with cnt = 0",
      "code": "int cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while n is not 0 , increment cnt , set n to n / 10",
      "code": "while ( n != 0 ) cnt ++ , n = n / 10 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return cnt from function",
      "code": "return cnt ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "create long longs l , r",
      "code": "long long l , r ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read l read r",
      "code": "cin >> l >> r ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create integer length_r with length_r = result of run length with r as argument",
      "code": "int length_r = length ( r ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "create integer length_l with length_l = result of run length with l as argument",
      "code": "int length_l = length ( l ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "create long long st with st = 1",
      "code": "long long st = 1 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 1 to length_r exclusive , set st to st * 10",
      "code": "for ( int i = 1 ; i < length_r ; i ++ ) st = st * 10 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if result of run length with l as argument is less than result of run length with r as argument",
      "code": "if ( length ( l ) < length ( r ) )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if r is greater than or equal to ( 5 * ( 10 to the power of length_r - 1 ) )",
      "code": "if ( r >= 5 * pow ( 10 , length_r - 1 ) )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print 5 * st * ( st * 10 - 1 - 5 * st ) print newline",
      "code": "cout << 5 * st * ( st * 10 - 1 - 5 * st ) << endl ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print r * ( st * 10 - 1 - r ) print newline",
      "code": "cout << r * ( st * 10 - 1 - r ) << endl ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if r is less than or equal to 5 * st",
      "code": "if ( r <= 5 * st )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print r * ( st * 10 - 1 - r ) print newline",
      "code": "cout << r * ( st * 10 - 1 - r ) << endl ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "else if l is greater than or equal to 5 * st",
      "code": "else if ( l >= 5 * st )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "print l * ( st * 10 - 1 - l ) print newline",
      "code": "cout << l * ( st * 10 - 1 - l ) << endl ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 23,
      "text": "print 5 * st * ( st * 10 - 1 - 5 * st ) print newline",
      "code": "cout << 5 * st * ( st * 10 - 1 - 5 * st ) << endl ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int length ( int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( length ( l ) < r ( r ) )"
      ],
      "err_line": 12,
      "err_msg": "‘r’ cannot be used as a function"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "return cnt cnt ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘cnt’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int length_r = result ( r ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘result’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int length_l = length ( l , l ) ;"
      ],
      "err_line": 9,
      "err_msg": "too many arguments to function ‘int length(int)’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( length ( l ) < result ( r ) )"
      ],
      "err_line": 12,
      "err_msg": "‘result’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "int length ( int n ) ;",
        "while ( n != 0 ) cnt = n / 10 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        12
      ],
      "mod_code": [
        "int length ( int n ) ;",
        "while ( n != 0 ) cnt = n / 10 ;",
        "if ( length ( l ) < r ( r ) )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        12,
        13
      ],
      "mod_code": [
        "int length ( int n ) ;",
        "while ( n != 0 ) cnt = n / 10 ;",
        "if ( length ( l ) < r ( r ) )",
        "if ( r >= ( 5 * ( 10 + 1 ) ) )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        12,
        22
      ],
      "mod_code": [
        "int length ( int n ) ;",
        "while ( n != 0 ) cnt = n / 10 ;",
        "if ( length ( l ) < r ( r ) )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        13
      ],
      "mod_code": [
        "int length ( int n ) ;",
        "while ( n != 0 ) cnt = n / 10 ;",
        "if ( r >= ( 5 * ( 10 + 1 ) ) )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        13,
        22
      ],
      "mod_code": [
        "int length ( int n ) ;",
        "while ( n != 0 ) cnt = n / 10 ;",
        "if ( r >= ( 5 * ( 10 + 1 ) ) )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        22
      ],
      "mod_code": [
        "int length ( int n ) ;",
        "while ( n != 0 ) cnt = n / 10 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "int length ( int n ) ;",
        "if ( length ( l ) < r ( r ) )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12,
        13
      ],
      "mod_code": [
        "int length ( int n ) ;",
        "if ( length ( l ) < r ( r ) )",
        "if ( r >= ( 5 * ( 10 + 1 ) ) )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12,
        13,
        22
      ],
      "mod_code": [
        "int length ( int n ) ;",
        "if ( length ( l ) < r ( r ) )",
        "if ( r >= ( 5 * ( 10 + 1 ) ) )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12,
        13,
        2
      ],
      "mod_code": [
        "int length ( int n ) ;",
        "if ( length ( l ) < r ( r ) )",
        "if ( r >= ( 5 * ( 10 + 1 ) ) )",
        "while ( n != 0 ) n = n / 10 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12,
        22
      ],
      "mod_code": [
        "int length ( int n ) ;",
        "if ( length ( l ) < r ( r ) )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12,
        22,
        2
      ],
      "mod_code": [
        "int length ( int n ) ;",
        "if ( length ( l ) < r ( r ) )",
        "else else",
        "while ( n != 0 ) n = n / 10 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12,
        2
      ],
      "mod_code": [
        "int length ( int n ) ;",
        "if ( length ( l ) < r ( r ) )",
        "while ( n != 0 ) n = n / 10 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "int length ( int n ) ;",
        "if ( r >= ( 5 * ( 10 + 1 ) ) )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        22
      ],
      "mod_code": [
        "int length ( int n ) ;",
        "if ( r >= ( 5 * ( 10 + 1 ) ) )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        22,
        2
      ],
      "mod_code": [
        "int length ( int n ) ;",
        "if ( r >= ( 5 * ( 10 + 1 ) ) )",
        "else else",
        "while ( n != 0 ) n = n / 10 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        2
      ],
      "mod_code": [
        "int length ( int n ) ;",
        "if ( r >= ( 5 * ( 10 + 1 ) ) )",
        "while ( n != 0 ) n = n / 10 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        22
      ],
      "mod_code": [
        "int length ( int n ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        22,
        2
      ],
      "mod_code": [
        "int length ( int n ) ;",
        "else else",
        "while ( n != 0 ) n = n / 10 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "int length ( int n ) ;",
        "while ( n != 0 ) n = n / 10 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "while ( n != 0 ) cnt = n / 10 ;",
        "if ( length ( l ) < r ( r ) )"
      ],
      "err_line": 12,
      "err_msg": "‘r’ cannot be used as a function"
    },
    {
      "mod_line": [
        2,
        12,
        13
      ],
      "mod_code": [
        "while ( n != 0 ) cnt = n / 10 ;",
        "if ( length ( l ) < r ( r ) )",
        "if ( r >= ( 5 * ( 10 + 1 ) ) )"
      ],
      "err_line": 12,
      "err_msg": "‘r’ cannot be used as a function"
    },
    {
      "mod_line": [
        2,
        12,
        13,
        22
      ],
      "mod_code": [
        "while ( n != 0 ) cnt = n / 10 ;",
        "if ( length ( l ) < r ( r ) )",
        "if ( r >= ( 5 * ( 10 + 1 ) ) )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "‘r’ cannot be used as a function"
    },
    {
      "mod_line": [
        2,
        12,
        22
      ],
      "mod_code": [
        "while ( n != 0 ) cnt = n / 10 ;",
        "if ( length ( l ) < r ( r ) )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "‘r’ cannot be used as a function"
    },
    {
      "mod_line": [
        2,
        13,
        22
      ],
      "mod_code": [
        "while ( n != 0 ) cnt = n / 10 ;",
        "if ( r >= ( 5 * ( 10 + 1 ) ) )",
        "else else"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        22
      ],
      "mod_code": [
        "while ( n != 0 ) cnt = n / 10 ;",
        "else else"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "if ( length ( l ) < r ( r ) )",
        "if ( r >= ( 5 * ( 10 + 1 ) ) )"
      ],
      "err_line": 12,
      "err_msg": "‘r’ cannot be used as a function"
    },
    {
      "mod_line": [
        12,
        13,
        22
      ],
      "mod_code": [
        "if ( length ( l ) < r ( r ) )",
        "if ( r >= ( 5 * ( 10 + 1 ) ) )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "‘r’ cannot be used as a function"
    },
    {
      "mod_line": [
        12,
        13,
        22,
        2
      ],
      "mod_code": [
        "if ( length ( l ) < r ( r ) )",
        "if ( r >= ( 5 * ( 10 + 1 ) ) )",
        "else else",
        "while ( n != 0 ) n = n / 10 ;"
      ],
      "err_line": 12,
      "err_msg": "‘r’ cannot be used as a function"
    },
    {
      "mod_line": [
        12,
        13,
        2
      ],
      "mod_code": [
        "if ( length ( l ) < r ( r ) )",
        "if ( r >= ( 5 * ( 10 + 1 ) ) )",
        "while ( n != 0 ) n = n / 10 ;"
      ],
      "err_line": 12,
      "err_msg": "‘r’ cannot be used as a function"
    },
    {
      "mod_line": [
        12,
        22
      ],
      "mod_code": [
        "if ( length ( l ) < r ( r ) )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "‘r’ cannot be used as a function"
    },
    {
      "mod_line": [
        12,
        22,
        2
      ],
      "mod_code": [
        "if ( length ( l ) < r ( r ) )",
        "else else",
        "while ( n != 0 ) n = n / 10 ;"
      ],
      "err_line": 12,
      "err_msg": "‘r’ cannot be used as a function"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "if ( length ( l ) < r ( r ) )",
        "while ( n != 0 ) n = n / 10 ;"
      ],
      "err_line": 12,
      "err_msg": "‘r’ cannot be used as a function"
    },
    {
      "mod_line": [
        13,
        22
      ],
      "mod_code": [
        "if ( r >= ( 5 * ( 10 + 1 ) ) )",
        "else else"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        22,
        2
      ],
      "mod_code": [
        "if ( r >= ( 5 * ( 10 + 1 ) ) )",
        "else else",
        "while ( n != 0 ) n = n / 10 ;"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        22,
        2
      ],
      "mod_code": [
        "else else",
        "while ( n != 0 ) n = n / 10 ;"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}