{
  "meta": {
    "index": 2256,
    "hitid": "3R16PJFTS3LONJOJEYCWMFSOGD9K4I",
    "workerid": "A1MJVTR0PCKBWW",
    "probid": "336A",
    "subid": "48766246"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "integers = x , y",
      "code": "int x , y ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read x , y",
      "code": "cin >> x >> y ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "integers = x1 , y1 , x2 , y2",
      "code": "int x1 , y1 , x2 , y2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if x and y > 0 then do the following",
      "code": "if ( x > 0 && y > 0 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set x1 to 0",
      "code": "x1 = 0 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set y1 to x + y",
      "code": "y1 = x + y ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set x2 to y1",
      "code": "x2 = y1 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set y2 to 0",
      "code": "y2 = 0 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else if x is less than 0 and y > 0 then do the following",
      "code": "else if ( x < 0 && y > 0 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "set x1 to - 1 * ( abs ( x ) + y )",
      "code": "x1 = - 1 * ( abs ( x ) + y ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set y1 to 0",
      "code": "y1 = 0 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set x2 to 0",
      "code": "x2 = 0 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set y2 to abs ( x1 )",
      "code": "y2 = abs ( x1 ) ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else if x and y less than 0 then do the following",
      "code": "else if ( x < 0 && y < 0 )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "set x1 to - 1 * absolute value of x + absolute value of y",
      "code": "x1 = - 1 * ( abs ( x ) + abs ( y ) ) ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set y1 to 0",
      "code": "y1 = 0 ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "set x2 to 0",
      "code": "x2 = 0 ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "set y2 to x1",
      "code": "y2 = x1 ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 20,
      "text": "set x2 to absolute value of x + absolute value of y",
      "code": "x2 = abs ( x ) + abs ( y ) ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "set y2 to 0",
      "code": "y2 = 0 ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "set x1 to 0",
      "code": "x1 = 0 ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "set y1 to - 1 * x2",
      "code": "y1 = - 1 * x2 ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "output x1 , , y1 , , x2 , , y2",
      "code": "cout << x1 << \" \" << y1 << \" \" << x2 << \" \" << y2 << endl ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( x > 0 && y > 0 )"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "x1 = - 1 * abs ( x + abs ( y ) ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        15,
        25,
        4
      ],
      "mod_code": [
        "y1 += y ;",
        "x1 = - 1 * abs ( x + abs ( y ) ) ;",
        "cout << x1 << \" \" << y1 << \" \" << y2 << endl ;",
        "while ( x > 0 && y > 0 )"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        15,
        10,
        4
      ],
      "mod_code": [
        "y1 += y ;",
        "x1 = - 1 * abs ( x + abs ( y ) ) ;",
        "int x1 = - 1 * ( abs ( x ) + y ) ;",
        "while ( x > 0 && y > 0 )"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        15,
        4
      ],
      "mod_code": [
        "y1 += y ;",
        "x1 = - 1 * abs ( x + abs ( y ) ) ;",
        "while ( x > 0 && y > 0 )"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        15,
        4,
        25
      ],
      "mod_code": [
        "y1 += y ;",
        "x1 = - 1 * abs ( x + abs ( y ) ) ;",
        "while ( x > 0 && y > 0 )",
        "cout << x1 << \" \" << y1 << \" \" << y2 << \" \\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        25,
        10,
        4
      ],
      "mod_code": [
        "y1 += y ;",
        "cout << x1 << \" \" << y1 << \" \" << y2 << endl ;",
        "int x1 = - 1 * ( abs ( x ) + y ) ;",
        "while ( x > 0 && y > 0 )"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        25,
        4
      ],
      "mod_code": [
        "y1 += y ;",
        "cout << x1 << \" \" << y1 << \" \" << y2 << endl ;",
        "while ( x > 0 && y > 0 )"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        10,
        4
      ],
      "mod_code": [
        "y1 += y ;",
        "int x1 = - 1 * ( abs ( x ) + y ) ;",
        "while ( x > 0 && y > 0 )"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        10,
        4,
        25
      ],
      "mod_code": [
        "y1 += y ;",
        "int x1 = - 1 * ( abs ( x ) + y ) ;",
        "while ( x > 0 && y > 0 )",
        "cout << x1 << \" \" << y1 << \" \" << y2 << \" \\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "y1 += y ;",
        "while ( x > 0 && y > 0 )"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        6,
        4,
        25
      ],
      "mod_code": [
        "y1 += y ;",
        "while ( x > 0 && y > 0 )",
        "cout << x1 << \" \" << y1 << \" \" << y2 << \" \\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        25,
        10,
        4
      ],
      "mod_code": [
        "x1 = - 1 * abs ( x + abs ( y ) ) ;",
        "cout << x1 << \" \" << y1 << \" \" << y2 << endl ;",
        "int x1 = - 1 * ( abs ( x ) + y ) ;",
        "while ( x > 0 && y > 0 )"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        25,
        4
      ],
      "mod_code": [
        "x1 = - 1 * abs ( x + abs ( y ) ) ;",
        "cout << x1 << \" \" << y1 << \" \" << y2 << endl ;",
        "while ( x > 0 && y > 0 )"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        10,
        4
      ],
      "mod_code": [
        "x1 = - 1 * abs ( x + abs ( y ) ) ;",
        "int x1 = - 1 * ( abs ( x ) + y ) ;",
        "while ( x > 0 && y > 0 )"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        10,
        4,
        25
      ],
      "mod_code": [
        "x1 = - 1 * abs ( x + abs ( y ) ) ;",
        "int x1 = - 1 * ( abs ( x ) + y ) ;",
        "while ( x > 0 && y > 0 )",
        "cout << x1 << \" \" << y1 << \" \" << y2 << \" \\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        4
      ],
      "mod_code": [
        "x1 = - 1 * abs ( x + abs ( y ) ) ;",
        "while ( x > 0 && y > 0 )"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        15,
        4,
        25
      ],
      "mod_code": [
        "x1 = - 1 * abs ( x + abs ( y ) ) ;",
        "while ( x > 0 && y > 0 )",
        "cout << x1 << \" \" << y1 << \" \" << y2 << \" \\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        25,
        10,
        4
      ],
      "mod_code": [
        "cout << x1 << \" \" << y1 << \" \" << y2 << endl ;",
        "int x1 = - 1 * ( abs ( x ) + y ) ;",
        "while ( x > 0 && y > 0 )"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        25,
        4
      ],
      "mod_code": [
        "cout << x1 << \" \" << y1 << \" \" << y2 << endl ;",
        "while ( x > 0 && y > 0 )"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "int x1 = - 1 * ( abs ( x ) + y ) ;",
        "while ( x > 0 && y > 0 )"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        4,
        25
      ],
      "mod_code": [
        "int x1 = - 1 * ( abs ( x ) + y ) ;",
        "while ( x > 0 && y > 0 )",
        "cout << x1 << \" \" << y1 << \" \" << y2 << \" \\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        4,
        25
      ],
      "mod_code": [
        "while ( x > 0 && y > 0 )",
        "cout << x1 << \" \" << y1 << \" \" << y2 << \" \\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    }
  ]
}