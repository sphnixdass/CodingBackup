{
  "meta": {
    "index": 959,
    "hitid": "3L1EFR8WWTZE432HUIHQNABZU98F99",
    "workerid": "AIWEXPJAU66D9",
    "probid": "275A",
    "subid": "48683552"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integer m = 1e9 + 7",
      "code": "int m = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "define function toggle with int pointer * a as an argument",
      "code": "void toggle ( int * a )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "if * a = 1",
      "code": "if ( * a == 1 )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "* a = 0",
      "code": "* a = 0 ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "else if * a = 0",
      "code": "else if ( * a == 0 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "* a = 1",
      "code": "* a = 1 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 8,
      "text": "create arrays of integers v and b with size 3 by 3",
      "code": "int v [ 3 ] [ 3 ] , b [ 3 ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i from 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; ++ i )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for j from 0 to 3 exclusive",
      "code": "for ( int j = 0 ; j < 3 ; ++ j )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "assign 1 to b [ i ] [ j ]",
      "code": "b [ i ] [ j ] = 1 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "read input to v [ i ] [ j ]",
      "code": "cin >> v [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for i from 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; ++ i )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for integer j = 0 to 3 exclusive",
      "code": "for ( int j = 0 ; j < 3 ; ++ j )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if v [ i ] [ j ] is odd",
      "code": "if ( v [ i ] [ j ] % 2 != 0 )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "toggle ( & b [ i ] [ j ] )",
      "code": "toggle ( & b [ i ] [ j ] ) ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "if j ! = 2 , toggle ( & b [ i ] [ j + 1 ] )",
      "code": "if ( j != 2 ) toggle ( & b [ i ] [ j + 1 ] ) ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "if j ! = 0 , toggle ( & b [ i ] [ j - 1 ] )",
      "code": "if ( j != 0 ) toggle ( & b [ i ] [ j - 1 ] ) ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "if i ! = 2 , toggle ( & b [ i + 1 ] [ j ] )",
      "code": "if ( i != 2 ) toggle ( & b [ i + 1 ] [ j ] ) ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "if i ! = 0 , toggle ( & b [ i - 1 ] [ j ] )",
      "code": "if ( i != 0 ) toggle ( & b [ i - 1 ] [ j ] ) ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "for i from 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; ++ i )",
      "indent": 1
    },
    {
      "line": 27,
      "text": "for j from 0 to 3 exclusive , print b [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < 3 ; ++ j ) { cout << b [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 28,
      "text": "print ' \\ n '",
      "code": "cout << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "if ( a == 1 )"
      ],
      "err_line": 2,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int v [ 3 ] , b [ 3 ] ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int v [ 3 ] , v [ 3 ] ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int v [3]’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "char b [ i ] [ j ] = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "{ v [ i ] [ j ] ;"
      ],
      "err_line": 31,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "if ( toggle ( & b [ i ] [ j ] ) )"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘toggle((& b[i][j]))’ from ‘void’ to ‘bool’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "if ( j != 0 && toggle ( & b [ i ] [ j - 1 ] ) )"
      ],
      "err_line": 20,
      "err_msg": "could not convert ‘toggle((& b[i][(j + -1)]))’ from ‘void’ to ‘bool’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "if ( a == 1 )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "if ( a == 1 )",
        "int a = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        4
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "if ( a == 1 )",
        "int a = 0 ;",
        "else if ( a == 0 )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        8
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "if ( a == 1 )",
        "int a = 0 ;",
        "int v [ 3 ] , b [ 3 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        22
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "if ( a == 1 )",
        "int a = 0 ;",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        4
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "if ( a == 1 )",
        "else if ( a == 0 )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        8
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "if ( a == 1 )",
        "else if ( a == 0 )",
        "int v [ 3 ] , b [ 3 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        22
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "if ( a == 1 )",
        "else if ( a == 0 )",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        8
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "if ( a == 1 )",
        "int v [ 3 ] , b [ 3 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        22
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "if ( a == 1 )",
        "int v [ 3 ] , b [ 3 ] ;",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        22
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "if ( a == 1 )",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "int a = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "int a = 0 ;",
        "else if ( a == 0 )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        8
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "int a = 0 ;",
        "else if ( a == 0 )",
        "int v [ 3 ] , b [ 3 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        22
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "int a = 0 ;",
        "else if ( a == 0 )",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        3,
        8
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "int a = 0 ;",
        "int v [ 3 ] , b [ 3 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        22
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "int a = 0 ;",
        "int v [ 3 ] , b [ 3 ] ;",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        3,
        22
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "int a = 0 ;",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "else if ( a == 0 )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        4,
        8
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "else if ( a == 0 )",
        "int v [ 3 ] , b [ 3 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        4,
        8,
        22
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "else if ( a == 0 )",
        "int v [ 3 ] , b [ 3 ] ;",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        4,
        22
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "else if ( a == 0 )",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "int v [ 3 ] , b [ 3 ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        8,
        22
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "int v [ 3 ] , b [ 3 ] ;",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        22
      ],
      "mod_code": [
        "bool toggle ( int * a ) ;",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "if ( a == 1 )",
        "int a = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        4
      ],
      "mod_code": [
        "if ( a == 1 )",
        "int a = 0 ;",
        "else if ( a == 0 )"
      ],
      "err_line": 2,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        8
      ],
      "mod_code": [
        "if ( a == 1 )",
        "int a = 0 ;",
        "else if ( a == 0 )",
        "int v [ 3 ] , b [ 3 ] ;"
      ],
      "err_line": 2,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        22
      ],
      "mod_code": [
        "if ( a == 1 )",
        "int a = 0 ;",
        "else if ( a == 0 )",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 2,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        8
      ],
      "mod_code": [
        "if ( a == 1 )",
        "int a = 0 ;",
        "int v [ 3 ] , b [ 3 ] ;"
      ],
      "err_line": 2,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        22
      ],
      "mod_code": [
        "if ( a == 1 )",
        "int a = 0 ;",
        "int v [ 3 ] , b [ 3 ] ;",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 2,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        22
      ],
      "mod_code": [
        "if ( a == 1 )",
        "int a = 0 ;",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 2,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "if ( a == 1 )",
        "else if ( a == 0 )"
      ],
      "err_line": 2,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4,
        8
      ],
      "mod_code": [
        "if ( a == 1 )",
        "else if ( a == 0 )",
        "int v [ 3 ] , b [ 3 ] ;"
      ],
      "err_line": 2,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4,
        8,
        22
      ],
      "mod_code": [
        "if ( a == 1 )",
        "else if ( a == 0 )",
        "int v [ 3 ] , b [ 3 ] ;",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 2,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4,
        22
      ],
      "mod_code": [
        "if ( a == 1 )",
        "else if ( a == 0 )",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 2,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "if ( a == 1 )",
        "int v [ 3 ] , b [ 3 ] ;"
      ],
      "err_line": 2,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        8,
        22
      ],
      "mod_code": [
        "if ( a == 1 )",
        "int v [ 3 ] , b [ 3 ] ;",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 2,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        22
      ],
      "mod_code": [
        "if ( a == 1 )",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 2,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        8
      ],
      "mod_code": [
        "int a = 0 ;",
        "else if ( a == 0 )",
        "int v [ 3 ] , b [ 3 ] ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        4,
        8,
        22
      ],
      "mod_code": [
        "int a = 0 ;",
        "else if ( a == 0 )",
        "int v [ 3 ] , b [ 3 ] ;",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        4,
        22
      ],
      "mod_code": [
        "int a = 0 ;",
        "else if ( a == 0 )",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "int a = 0 ;",
        "int v [ 3 ] , b [ 3 ] ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        8,
        22
      ],
      "mod_code": [
        "int a = 0 ;",
        "int v [ 3 ] , b [ 3 ] ;",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        22
      ],
      "mod_code": [
        "int a = 0 ;",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "else if ( a == 0 )",
        "int v [ 3 ] , b [ 3 ] ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        8,
        22
      ],
      "mod_code": [
        "else if ( a == 0 )",
        "int v [ 3 ] , b [ 3 ] ;",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        22
      ],
      "mod_code": [
        "else if ( a == 0 )",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        8,
        22
      ],
      "mod_code": [
        "int v [ 3 ] , b [ 3 ] ;",
        "if ( i != 0 && toggle ( & b - 1 ] [ j ] ) )"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}