{
  "meta": {
    "index": 1857,
    "hitid": "3VCK0Q0PO588W1RLSAHA24JFS940NI",
    "workerid": "A1AYVATMT88U1W",
    "probid": "443A",
    "subid": "48914792"
  },
  "lines": [
    {
      "line": 0,
      "text": "mark = array of boolean of length 30",
      "code": "bool mark [ 30 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let cnt be a integer with value is equal to 0",
      "code": "int cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let op be a character",
      "code": "char op ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let memset ( mark , false , sizeof ( mark ) ) be a function",
      "code": "memset ( mark , false , sizeof ( mark ) ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while ( reading op )",
      "code": "while ( cin >> op )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if ( op is equal to ' { ' or op is equal to ' } ' or op is equal to ' , ' ) , proceed ( do the following )",
      "code": "if ( op == ' { ' || op == ' } ' || op == ' , ' ) continue ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if ( notmark [ op minus ' a ' ] )",
      "code": "if ( ! mark [ op - ' a ' ] )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "mark [ op - ' a ' ] is equal to true",
      "code": "mark [ op - ' a ' ] = true ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "increase the value of cnt by 1",
      "code": "cnt ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print cnt and newline",
      "code": "cout << cnt << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( op == ' ' || op == ' } || op == ' } || op == ' , ' ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( notmark [ op minus ' a ' ] )"
      ],
      "err_line": 7,
      "err_msg": "‘notmark’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "memset ( mark , false , sizeof ( mark ) ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( op == ' ' || op == ' } or op == ' } || op == ' , ' ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( notmark [ op - ' a ' ] )"
      ],
      "err_line": 7,
      "err_msg": "‘notmark’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "mark [ op - ' a ' ] ] = true ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "if ( op == ' ' || op == ' } || op == ' } || op == ' , ' ) ;",
        "if ( notmark [ op minus ' a ' ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        7,
        5
      ],
      "mod_code": [
        "if ( op == ' ' || op == ' } || op == ' } || op == ' , ' ) ;",
        "if ( notmark [ op minus ' a ' ] )",
        "while ( op )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        7,
        5,
        4
      ],
      "mod_code": [
        "if ( op == ' ' || op == ' } || op == ' } || op == ' , ' ) ;",
        "if ( notmark [ op minus ' a ' ] )",
        "while ( op )",
        "memset ( mark , false , sizeof ( mark ) ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        7,
        4
      ],
      "mod_code": [
        "if ( op == ' ' || op == ' } || op == ' } || op == ' , ' ) ;",
        "if ( notmark [ op minus ' a ' ] )",
        "memset ( mark , false , sizeof ( mark ) ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "if ( op == ' ' || op == ' } || op == ' } || op == ' , ' ) ;",
        "while ( op )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        5,
        4
      ],
      "mod_code": [
        "if ( op == ' ' || op == ' } || op == ' } || op == ' , ' ) ;",
        "while ( op )",
        "memset ( mark , false , sizeof ( mark ) ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        5,
        4,
        7
      ],
      "mod_code": [
        "if ( op == ' ' || op == ' } || op == ' } || op == ' , ' ) ;",
        "while ( op )",
        "memset ( mark , false , sizeof ( mark ) ) ) ;",
        "if ( notmark [ op - ' a ' ] )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        5,
        7
      ],
      "mod_code": [
        "if ( op == ' ' || op == ' } || op == ' } || op == ' , ' ) ;",
        "while ( op )",
        "if ( notmark [ op - ' a ' ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "if ( op == ' ' || op == ' } || op == ' } || op == ' , ' ) ;",
        "memset ( mark , false , sizeof ( mark ) ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        4,
        7
      ],
      "mod_code": [
        "if ( op == ' ' || op == ' } || op == ' } || op == ' , ' ) ;",
        "memset ( mark , false , sizeof ( mark ) ) ) ;",
        "if ( notmark [ op - ' a ' ] )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "if ( op == ' ' || op == ' } || op == ' } || op == ' , ' ) ;",
        "if ( notmark [ op - ' a ' ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "if ( notmark [ op minus ' a ' ] )",
        "if ( op == ' ' || op == ' } or op == ' } || op == ' , ' ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        6,
        5
      ],
      "mod_code": [
        "if ( notmark [ op minus ' a ' ] )",
        "if ( op == ' ' || op == ' } or op == ' } || op == ' , ' ) ;",
        "while ( op )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        6,
        5,
        4
      ],
      "mod_code": [
        "if ( notmark [ op minus ' a ' ] )",
        "if ( op == ' ' || op == ' } or op == ' } || op == ' , ' ) ;",
        "while ( op )",
        "memset ( mark , false , sizeof ( mark ) ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        6,
        4
      ],
      "mod_code": [
        "if ( notmark [ op minus ' a ' ] )",
        "if ( op == ' ' || op == ' } or op == ' } || op == ' , ' ) ;",
        "memset ( mark , false , sizeof ( mark ) ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "if ( notmark [ op minus ' a ' ] )",
        "while ( op )"
      ],
      "err_line": 7,
      "err_msg": "‘notmark’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        5,
        4
      ],
      "mod_code": [
        "if ( notmark [ op minus ' a ' ] )",
        "while ( op )",
        "memset ( mark , false , sizeof ( mark ) ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "if ( notmark [ op minus ' a ' ] )",
        "memset ( mark , false , sizeof ( mark ) ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "if ( op == ' ' || op == ' } or op == ' } || op == ' , ' ) ;",
        "while ( op )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        5,
        4
      ],
      "mod_code": [
        "if ( op == ' ' || op == ' } or op == ' } || op == ' , ' ) ;",
        "while ( op )",
        "memset ( mark , false , sizeof ( mark ) ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        5,
        4,
        7
      ],
      "mod_code": [
        "if ( op == ' ' || op == ' } or op == ' } || op == ' , ' ) ;",
        "while ( op )",
        "memset ( mark , false , sizeof ( mark ) ) ) ;",
        "if ( notmark [ op - ' a ' ] )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        5,
        7
      ],
      "mod_code": [
        "if ( op == ' ' || op == ' } or op == ' } || op == ' , ' ) ;",
        "while ( op )",
        "if ( notmark [ op - ' a ' ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "if ( op == ' ' || op == ' } or op == ' } || op == ' , ' ) ;",
        "memset ( mark , false , sizeof ( mark ) ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        4,
        7
      ],
      "mod_code": [
        "if ( op == ' ' || op == ' } or op == ' } || op == ' , ' ) ;",
        "memset ( mark , false , sizeof ( mark ) ) ) ;",
        "if ( notmark [ op - ' a ' ] )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "if ( op == ' ' || op == ' } or op == ' } || op == ' , ' ) ;",
        "if ( notmark [ op - ' a ' ] )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "while ( op )",
        "memset ( mark , false , sizeof ( mark ) ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        4,
        7
      ],
      "mod_code": [
        "while ( op )",
        "memset ( mark , false , sizeof ( mark ) ) ) ;",
        "if ( notmark [ op - ' a ' ] )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "while ( op )",
        "if ( notmark [ op - ' a ' ] )"
      ],
      "err_line": 7,
      "err_msg": "‘notmark’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "memset ( mark , false , sizeof ( mark ) ) ) ;",
        "if ( notmark [ op - ' a ' ] )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    }
  ]
}