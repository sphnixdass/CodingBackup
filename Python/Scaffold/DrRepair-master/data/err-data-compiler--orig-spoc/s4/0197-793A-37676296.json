{
  "meta": {
    "index": 197,
    "hitid": "335VBRURDJUMYP2LZ7XK5SQZHLXE9J",
    "workerid": "A1APYLD4DUK33J",
    "probid": "793A",
    "subid": "37676296"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long longs n , k , c , i , with c = 0",
      "code": "long long n , k , c = 0 , i ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n read k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create long long array a with size n",
      "code": "long long a [ n ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive , read a [ i ]",
      "code": "for ( i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "sort elements from a to a + n",
      "code": "sort ( a , a + n ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 1 to n exclusive",
      "code": "for ( i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if ( a [ i ] - a [ 0 ] ) % k",
      "code": "if ( ( a [ i ] - a [ 0 ] ) % k )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "print - 1 print newline",
      "code": "cout << - 1 << endl ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increment c by a [ i ] - a [ 0 ]",
      "code": "c += a [ i ] - a [ 0 ] ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print c / k print newline",
      "code": "cout << c / k << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( a [ i ] - a [ 0 ] ) % k ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "long long n , k , c , i = 0 ;",
        "if ( a [ i ] - a [ 0 ] ) % k ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        1,
        7,
        10
      ],
      "mod_code": [
        "long long n , k , c , i = 0 ;",
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        1,
        7,
        10,
        5
      ],
      "mod_code": [
        "long long n , k , c , i = 0 ;",
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "else else",
        "sort ( a , a + n + n ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        1,
        7,
        10,
        2
      ],
      "mod_code": [
        "long long n , k , c , i = 0 ;",
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "else else",
        "n >> n >> k ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        1,
        7,
        10,
        6
      ],
      "mod_code": [
        "long long n , k , c , i = 0 ;",
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "else else",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        1,
        7,
        5
      ],
      "mod_code": [
        "long long n , k , c , i = 0 ;",
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "sort ( a , a + n + n ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        1,
        7,
        5,
        2
      ],
      "mod_code": [
        "long long n , k , c , i = 0 ;",
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "sort ( a , a + n + n ) ;",
        "n >> n >> k ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        1,
        7,
        5,
        6
      ],
      "mod_code": [
        "long long n , k , c , i = 0 ;",
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "sort ( a , a + n + n ) ;",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        1,
        7,
        2
      ],
      "mod_code": [
        "long long n , k , c , i = 0 ;",
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "n >> n >> k ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        1,
        7,
        2,
        6
      ],
      "mod_code": [
        "long long n , k , c , i = 0 ;",
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "n >> n >> k ;",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        1,
        7,
        6
      ],
      "mod_code": [
        "long long n , k , c , i = 0 ;",
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "long long n , k , c , i = 0 ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        10,
        5
      ],
      "mod_code": [
        "long long n , k , c , i = 0 ;",
        "else else",
        "sort ( a , a + n + n ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        10,
        5,
        2
      ],
      "mod_code": [
        "long long n , k , c , i = 0 ;",
        "else else",
        "sort ( a , a + n + n ) ;",
        "n >> n >> k ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        10,
        5,
        6
      ],
      "mod_code": [
        "long long n , k , c , i = 0 ;",
        "else else",
        "sort ( a , a + n + n ) ;",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        10,
        2
      ],
      "mod_code": [
        "long long n , k , c , i = 0 ;",
        "else else",
        "n >> n >> k ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        10,
        2,
        6
      ],
      "mod_code": [
        "long long n , k , c , i = 0 ;",
        "else else",
        "n >> n >> k ;",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        10,
        6
      ],
      "mod_code": [
        "long long n , k , c , i = 0 ;",
        "else else",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        7,
        10,
        5
      ],
      "mod_code": [
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "else else",
        "sort ( a , a + n + n ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        7,
        10,
        5,
        2
      ],
      "mod_code": [
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "else else",
        "sort ( a , a + n + n ) ;",
        "n >> n >> k ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        7,
        10,
        5,
        6
      ],
      "mod_code": [
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "else else",
        "sort ( a , a + n + n ) ;",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        7,
        10,
        2
      ],
      "mod_code": [
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "else else",
        "n >> n >> k ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        7,
        10,
        2,
        6
      ],
      "mod_code": [
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "else else",
        "n >> n >> k ;",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        7,
        10,
        6
      ],
      "mod_code": [
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "else else",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "sort ( a , a + n + n ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        7,
        5,
        2
      ],
      "mod_code": [
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "sort ( a , a + n + n ) ;",
        "n >> n >> k ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        7,
        5,
        2,
        6
      ],
      "mod_code": [
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "sort ( a , a + n + n ) ;",
        "n >> n >> k ;",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        7,
        5,
        6
      ],
      "mod_code": [
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "sort ( a , a + n + n ) ;",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "n >> n >> k ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        7,
        2,
        6
      ],
      "mod_code": [
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "n >> n >> k ;",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "if ( a [ i ] - a [ 0 ] ) % k ;",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘%’ token"
    },
    {
      "mod_line": [
        10,
        5
      ],
      "mod_code": [
        "else else",
        "sort ( a , a + n + n ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        5,
        2
      ],
      "mod_code": [
        "else else",
        "sort ( a , a + n + n ) ;",
        "n >> n >> k ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        5,
        2,
        6
      ],
      "mod_code": [
        "else else",
        "sort ( a , a + n + n ) ;",
        "n >> n >> k ;",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        5,
        6
      ],
      "mod_code": [
        "else else",
        "sort ( a , a + n + n ) ;",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "else else",
        "n >> n >> k ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        2,
        6
      ],
      "mod_code": [
        "else else",
        "n >> n >> k ;",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "else else",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}