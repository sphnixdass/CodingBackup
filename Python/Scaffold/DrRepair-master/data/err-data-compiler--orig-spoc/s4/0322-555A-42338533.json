{
  "meta": {
    "index": 322,
    "hitid": "3T2HW4QDUV171RI73GRPF4QWW9LC9P",
    "workerid": "AIWEXPJAU66D9",
    "probid": "555A",
    "subid": "42338533"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare long long variables n , m and k",
      "code": "long long n , m , k ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare long longs cut = 0 and total = n",
      "code": "long long total = n , cut = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "decrement k in a loop while it is > 0",
      "code": "while ( k -- )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "x , cnt , prev , one and tmp are long longs with one = 0 , cnt = 1 and prev = - 1",
      "code": "long long x , cnt = 1 , prev = - 1 , one = 0 , tmp ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read m",
      "code": "cin >> m ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set tmp to m",
      "code": "tmp = m ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "decrement tmp in a loop while it is > 0",
      "code": "while ( tmp -- )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if x = 1",
      "code": "if ( x == 1 )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "set prev to x and cnt to 1",
      "code": "prev = x , cnt = 1 ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 13,
      "text": "if prev + 1 = x",
      "code": "if ( prev + 1 == x )",
      "indent": 4
    },
    {
      "line": 14,
      "text": "increase cnt , prev = x by one",
      "code": "cnt ++ , prev = x ;",
      "indent": 5
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 16,
      "text": "if cnt is greater than 1 , set one to cnt",
      "code": "if ( cnt > 1 ) one = cnt ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "decrease total by cnt - 1",
      "code": "total -= ( cnt - 1 ) ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "prev = - 1",
      "code": "prev = - 1 ;",
      "indent": 5
    },
    {
      "line": 19,
      "text": "cnt = 1",
      "code": "cnt = 1 ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if cnt is greater than 1 , set one to cnt",
      "code": "if ( cnt > 1 ) one = cnt ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "decrease total by cnt - 1",
      "code": "total -= ( cnt - 1 ) ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if one",
      "code": "if ( one )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "increase cut by ( m - one ) and set one to 0",
      "code": "cut += ( m - one ) , one = 0 ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 28,
      "text": "increase cut by ( m - 1 )",
      "code": "cut += ( m - 1 ) ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print ( total + cut - 1 )",
      "code": "cout << ( total + cut - 1 ) << endl ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "cut += ( m - one ) = 0 ;"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "long long total = 0 , total = n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int total’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int tmp = m ;"
      ],
      "err_line": 7,
      "err_msg": "conflicting declaration ‘int tmp’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "cut += ( m - one ) ) ;"
      ],
      "err_line": 26,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "print ( total + cut - 1 ) ;"
      ],
      "err_line": 30,
      "err_msg": "‘print’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        23,
        26
      ],
      "mod_code": [
        "long long x , cnt = 0 , prev = 1 , one = - 1 , tmp = - 1 ;",
        "if ( cnt > 1 ) cnt = cnt ;",
        "cut += ( m - one ) = 0 ;"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        5,
        23,
        26,
        2
      ],
      "mod_code": [
        "long long x , cnt = 0 , prev = 1 , one = - 1 , tmp = - 1 ;",
        "if ( cnt > 1 ) cnt = cnt ;",
        "cut += ( m - one ) = 0 ;",
        "n >> n >> k ;"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        5,
        23,
        26,
        27
      ],
      "mod_code": [
        "long long x , cnt = 0 , prev = 1 , one = - 1 , tmp = - 1 ;",
        "if ( cnt > 1 ) cnt = cnt ;",
        "cut += ( m - one ) = 0 ;",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        5,
        23,
        2,
        27
      ],
      "mod_code": [
        "long long x , cnt = 0 , prev = 1 , one = - 1 , tmp = - 1 ;",
        "if ( cnt > 1 ) cnt = cnt ;",
        "n >> n >> k ;",
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        23,
        27
      ],
      "mod_code": [
        "long long x , cnt = 0 , prev = 1 , one = - 1 , tmp = - 1 ;",
        "if ( cnt > 1 ) cnt = cnt ;",
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        26
      ],
      "mod_code": [
        "long long x , cnt = 0 , prev = 1 , one = - 1 , tmp = - 1 ;",
        "cut += ( m - one ) = 0 ;"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        5,
        26,
        23
      ],
      "mod_code": [
        "long long x , cnt = 0 , prev = 1 , one = - 1 , tmp = - 1 ;",
        "cut += ( m - one ) = 0 ;",
        "if ( cnt > 1 ) { cnt = cnt ; }"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        5,
        26,
        23,
        2
      ],
      "mod_code": [
        "long long x , cnt = 0 , prev = 1 , one = - 1 , tmp = - 1 ;",
        "cut += ( m - one ) = 0 ;",
        "if ( cnt > 1 ) { cnt = cnt ; }",
        "n >> n >> k ;"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        5,
        26,
        23,
        27
      ],
      "mod_code": [
        "long long x , cnt = 0 , prev = 1 , one = - 1 , tmp = - 1 ;",
        "cut += ( m - one ) = 0 ;",
        "if ( cnt > 1 ) { cnt = cnt ; }",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        5,
        26,
        2
      ],
      "mod_code": [
        "long long x , cnt = 0 , prev = 1 , one = - 1 , tmp = - 1 ;",
        "cut += ( m - one ) = 0 ;",
        "n >> n >> k ;"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        5,
        26,
        2,
        27
      ],
      "mod_code": [
        "long long x , cnt = 0 , prev = 1 , one = - 1 , tmp = - 1 ;",
        "cut += ( m - one ) = 0 ;",
        "n >> n >> k ;",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        5,
        26,
        27
      ],
      "mod_code": [
        "long long x , cnt = 0 , prev = 1 , one = - 1 , tmp = - 1 ;",
        "cut += ( m - one ) = 0 ;",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        5,
        23,
        2,
        27
      ],
      "mod_code": [
        "long long x , cnt = 0 , prev = 1 , one = - 1 , tmp = - 1 ;",
        "if ( cnt > 1 ) { cnt = cnt ; }",
        "n >> n >> k ;",
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        23,
        27
      ],
      "mod_code": [
        "long long x , cnt = 0 , prev = 1 , one = - 1 , tmp = - 1 ;",
        "if ( cnt > 1 ) { cnt = cnt ; }",
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        2,
        27
      ],
      "mod_code": [
        "long long x , cnt = 0 , prev = 1 , one = - 1 , tmp = - 1 ;",
        "n >> n >> k ;",
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        27
      ],
      "mod_code": [
        "long long x , cnt = 0 , prev = 1 , one = - 1 , tmp = - 1 ;",
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        26
      ],
      "mod_code": [
        "if ( cnt > 1 ) cnt = cnt ;",
        "cut += ( m - one ) = 0 ;"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        23,
        26,
        2
      ],
      "mod_code": [
        "if ( cnt > 1 ) cnt = cnt ;",
        "cut += ( m - one ) = 0 ;",
        "n >> n >> k ;"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        23,
        26,
        2,
        27
      ],
      "mod_code": [
        "if ( cnt > 1 ) cnt = cnt ;",
        "cut += ( m - one ) = 0 ;",
        "n >> n >> k ;",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        23,
        26,
        27
      ],
      "mod_code": [
        "if ( cnt > 1 ) cnt = cnt ;",
        "cut += ( m - one ) = 0 ;",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        23,
        2,
        27
      ],
      "mod_code": [
        "if ( cnt > 1 ) cnt = cnt ;",
        "n >> n >> k ;",
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        27
      ],
      "mod_code": [
        "if ( cnt > 1 ) cnt = cnt ;",
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26,
        23
      ],
      "mod_code": [
        "cut += ( m - one ) = 0 ;",
        "if ( cnt > 1 ) { cnt = cnt ; }"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        26,
        23,
        2
      ],
      "mod_code": [
        "cut += ( m - one ) = 0 ;",
        "if ( cnt > 1 ) { cnt = cnt ; }",
        "n >> n >> k ;"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        26,
        23,
        2,
        27
      ],
      "mod_code": [
        "cut += ( m - one ) = 0 ;",
        "if ( cnt > 1 ) { cnt = cnt ; }",
        "n >> n >> k ;",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        26,
        23,
        27
      ],
      "mod_code": [
        "cut += ( m - one ) = 0 ;",
        "if ( cnt > 1 ) { cnt = cnt ; }",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        26,
        2
      ],
      "mod_code": [
        "cut += ( m - one ) = 0 ;",
        "n >> n >> k ;"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        26,
        2,
        27
      ],
      "mod_code": [
        "cut += ( m - one ) = 0 ;",
        "n >> n >> k ;",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        26,
        27
      ],
      "mod_code": [
        "cut += ( m - one ) = 0 ;",
        "else else"
      ],
      "err_line": 26,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        23,
        2,
        27
      ],
      "mod_code": [
        "if ( cnt > 1 ) { cnt = cnt ; }",
        "n >> n >> k ;",
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        27
      ],
      "mod_code": [
        "if ( cnt > 1 ) { cnt = cnt ; }",
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        27
      ],
      "mod_code": [
        "n >> n >> k ;",
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}