{
  "meta": {
    "index": 2136,
    "hitid": "3K3G488TR22SU5QE58F3NTABFFY5Q2",
    "workerid": "AIWEXPJAU66D9",
    "probid": "705A",
    "subid": "41839676"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers i and n",
      "code": "int i , n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "loop i from 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if i is odd",
      "code": "if ( i % 2 != 0 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "print \" I hate \"",
      "code": "cout << \" I hate \" ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print \" I love \"",
      "code": "cout << \" I love \" ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "if i ! = n",
      "code": "if ( i != n )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print \" that \"",
      "code": "cout << \" that \" ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print \" it \"",
      "code": "cout << \" it \" ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int i i , n ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘i’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin read n ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘;’ before ‘read’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        10
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" I \" << endl ;",
        "cout << \" \\n \" ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        6
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" I \" << endl ;",
        "cout << \" \\n \" ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        7,
        11,
        10
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" I \" << endl ;",
        "cout << \" it \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        7,
        11,
        6
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" I \" << endl ;",
        "cout << \" it \" << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        7,
        10
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" I \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        7,
        10,
        6
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" I \" << endl ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        7,
        6
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" I \" << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        9,
        11,
        10
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \\n \" ;",
        "cout << \" it \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        9,
        11,
        6
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \\n \" ;",
        "cout << \" it \" << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        9,
        10
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \\n \" ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        9,
        10,
        6
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \\n \" ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        9,
        6
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \\n \" ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        11,
        10
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" it \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        11,
        10,
        6
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" it \" << endl ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        11,
        6
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" it \" << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        10,
        6
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        9,
        11,
        10
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \\n \" ;",
        "cout << \" it \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        9,
        11,
        6
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \\n \" ;",
        "cout << \" it \" << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        9,
        10
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \\n \" ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        9,
        10,
        6
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \\n \" ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        9,
        6
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \\n \" ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        11,
        10
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" it \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        11,
        10,
        6
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" it \" << endl ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        11,
        6
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" it \" << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        10,
        6
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        11,
        10
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "cout << \" it \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        11,
        10,
        6
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "cout << \" it \" << endl ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        11,
        6
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "cout << \" it \" << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        10,
        6
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "cout << \" \\n \" ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "cout << \" it \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        10,
        6
      ],
      "mod_code": [
        "cout << \" it \" << endl ;",
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "cout << \" it \" << endl ;",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "else else",
        "else else"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}