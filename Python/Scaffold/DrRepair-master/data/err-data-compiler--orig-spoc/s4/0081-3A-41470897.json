{
  "meta": {
    "index": 81,
    "hitid": "36D1BWBEHNV9AT9ZVW6O8DNUK2Z2MV",
    "workerid": "A1APYLD4DUK33J",
    "probid": "3A",
    "subid": "41470897"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integers x1 , y1 , x2 , y2",
      "code": "int x1 , y1 , x2 , y2 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set x1 to s [ 0 ] - 96",
      "code": "x1 = s [ 0 ] - 96 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set y1 to s [ 1 ] - ' 0 '",
      "code": "y1 = s [ 1 ] - ' 0 ' ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set x2 to s [ 0 ] - 96",
      "code": "x2 = s [ 0 ] - 96 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set y2 to s [ 1 ] - ' 0 '",
      "code": "y2 = s [ 1 ] - ' 0 ' ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print maximum of absolute value of x1 - x2 and absolute value of y1 - y2 , print newline",
      "code": "cout << max ( abs ( x1 - x2 ) , abs ( y1 - y2 ) ) << endl ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "while x1 is not x2 or y1 is not y2",
      "code": "while ( x1 != x2 || y1 != y2 )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if x2 is greater than x1",
      "code": "if ( x2 > x1 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print \" R \"",
      "code": "cout << \" R \" ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment x1",
      "code": "x1 ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if x2 is less than x1",
      "code": "if ( x2 < x1 )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print \" L \"",
      "code": "cout << \" L \" ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "decrement x1",
      "code": "x1 -- ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if y1 is greater than y2",
      "code": "if ( y1 > y2 )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "print \" D \"",
      "code": "cout << \" D \" ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "decrement y1",
      "code": "y1 -- ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if y1 is less than y2",
      "code": "if ( y1 < y2 )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "print \" U \"",
      "code": "cout << \" U \" ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "increment y1",
      "code": "y1 ++ ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "print \" \\ n \"",
      "code": "cout << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "<< \" \\n \" ;"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int x1 , y1 , x2 [ y2 ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘y2’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int y2 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 8,
      "err_msg": "redeclaration of ‘int y2’"
    },
    {
      "mod_line": [
        12,
        16,
        24,
        27
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        16,
        24,
        3
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        16,
        24,
        5
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        12,
        16,
        27
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        16,
        27,
        3
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "<< \" \\n \" ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        16,
        27,
        5
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "<< \" \\n \" ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        12,
        16,
        3
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        16,
        3,
        5
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "gets ( s ) ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        16,
        5
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" L \" << endl ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        12,
        24,
        27
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        24,
        27,
        3
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;",
        "<< \" \\n \" ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        24,
        27,
        5
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;",
        "<< \" \\n \" ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        12,
        24,
        3
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        24,
        3,
        5
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;",
        "gets ( s ) ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        24,
        5
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "cout << \" U \" << endl ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        12,
        27
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        12,
        27,
        3
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "<< \" \\n \" ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        27,
        3,
        5
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "<< \" \\n \" ;",
        "gets ( s ) ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        27,
        5
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "<< \" \\n \" ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        3,
        5
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "gets ( s ) ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "cout << \" R \" << endl ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        16,
        24,
        27
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        24,
        27,
        3
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;",
        "<< \" \\n \" ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        16,
        24,
        27,
        5
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;",
        "<< \" \\n \" ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        16,
        24,
        3
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        16,
        24,
        3,
        5
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;",
        "gets ( s ) ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        16,
        24,
        5
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "cout << \" U \" << endl ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        16,
        27
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        27,
        3
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "<< \" \\n \" ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        16,
        27,
        3,
        5
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "<< \" \\n \" ;",
        "gets ( s ) ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        16,
        27,
        5
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "<< \" \\n \" ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        16,
        3
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        16,
        3,
        5
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "gets ( s ) ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        16,
        5
      ],
      "mod_code": [
        "cout << \" L \" << endl ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        24,
        27
      ],
      "mod_code": [
        "cout << \" U \" << endl ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        24,
        27,
        3
      ],
      "mod_code": [
        "cout << \" U \" << endl ;",
        "<< \" \\n \" ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        24,
        27,
        3,
        5
      ],
      "mod_code": [
        "cout << \" U \" << endl ;",
        "<< \" \\n \" ;",
        "gets ( s ) ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        24,
        27,
        5
      ],
      "mod_code": [
        "cout << \" U \" << endl ;",
        "<< \" \\n \" ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        24,
        3
      ],
      "mod_code": [
        "cout << \" U \" << endl ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        24,
        3,
        5
      ],
      "mod_code": [
        "cout << \" U \" << endl ;",
        "gets ( s ) ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        24,
        5
      ],
      "mod_code": [
        "cout << \" U \" << endl ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        27,
        3
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "gets ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        27,
        3,
        5
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "gets ( s ) ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        27,
        5
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int y1’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "gets ( s ) ;",
        "int y1 = s [ 1 ] - ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}