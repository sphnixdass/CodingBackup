{
  "meta": {
    "index": 924,
    "hitid": "30OITAWPBQXYIZTNP85QQVNCAOLH99",
    "workerid": "A1APYLD4DUK33J",
    "probid": "275A",
    "subid": "48479117"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create 2d integer array arr with size 3 by 3",
      "code": "int arr [ 3 ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create 2d integer array arr2 with size 3 by 3 with arr2 = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 } }",
      "code": "int arr2 [ 3 ] [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 } } ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for row = 0 to 3 exclusive",
      "code": "for ( int row = 0 ; row < 3 ; row ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for colom = 0 to 3 exclusive , read arr [ row ] [ colom ]",
      "code": "for ( int colom = 0 ; colom < 3 ; colom ++ ) { cin >> arr [ row ] [ colom ] ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for row = 0 to 3 exclusive",
      "code": "for ( int row = 0 ; row < 3 ; row ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for colom = 0 to 3 exclusive",
      "code": "for ( int colom = 0 ; colom < 3 ; colom ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if arr [ row ] [ colom ] % 2 is not 0",
      "code": "if ( arr [ row ] [ colom ] % 2 != 0 )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "set arr2 [ row ] [ colom ] to not arr2 [ row ] [ colom ]",
      "code": "arr2 [ row ] [ colom ] = ! arr2 [ row ] [ colom ] ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "if colom + 1 is less than 3 , set arr2 [ row ] [ colom + 1 ] to not arr2 [ row ] [ colom + 1 ]",
      "code": "if ( colom + 1 < 3 ) arr2 [ row ] [ colom + 1 ] = ! arr2 [ row ] [ colom + 1 ] ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "if colom - 1 is greater than or equal to 0 , set arr2 [ row ] [ colom - 1 ] to not arr2 [ row ] [ colom - 1 ]",
      "code": "if ( colom - 1 >= 0 ) arr2 [ row ] [ colom - 1 ] = ! arr2 [ row ] [ colom - 1 ] ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "if row - 1 is greater than or equal to 0 , set arr2 [ row - 1 ] [ colom ] to not arr2 [ row - 1 ] [ colom ]",
      "code": "if ( row - 1 >= 0 ) arr2 [ row - 1 ] [ colom ] = ! arr2 [ row - 1 ] [ colom ] ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "if row + 1 is less than 3 , set arr2 [ row + 1 ] [ colom ] to not arr2 [ row + 1 ] [ colom ]",
      "code": "if ( row + 1 < 3 ) arr2 [ row + 1 ] [ colom ] = ! arr2 [ row + 1 ] [ colom ] ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for row = 0 to 3 exclusive",
      "code": "for ( int row = 0 ; row < 3 ; row ++ )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for colom = 0 to 3 exclusive , print arr2 [ row ] [ colom ]",
      "code": "for ( int colom = 0 ; colom < 3 ; colom ++ ) { cout << arr2 [ row ] [ colom ] ; }",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , 1 , 1 , 1 , 1 } , { 1 , 1 , 1 } } ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( row = 0 ; row < 3 ; row ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘row’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( row = 0 ; row < 3 ; row ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘row’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( colom = 0 ; colom < 3 ; colom ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘colom’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "for ( row = 0 ; row < 3 ; row ++ )"
      ],
      "err_line": 17,
      "err_msg": "name lookup of ‘row’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "arr2 [ row ] [ colom ] = arr2 [ row ] [ colom ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        9,
        10
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "arr2 [ row ] [ colom ] = arr2 [ row ] [ colom ] ;",
        "if ( colom + 1 < 3 ) arr2 [ row ] [ colom + 1 ] = arr2 [ row ] [ colom + 1 ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        9,
        10,
        11
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "arr2 [ row ] [ colom ] = arr2 [ row ] [ colom ] ;",
        "if ( colom + 1 < 3 ) arr2 [ row ] [ colom + 1 ] = arr2 [ row ] [ colom + 1 ] ;",
        "if ( colom - 1 >= 0 ) arr2 [ row ] [ colom - 1 ] = arr2 [ row ] [ colom - 1 ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        9,
        10,
        12
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "arr2 [ row ] [ colom ] = arr2 [ row ] [ colom ] ;",
        "if ( colom + 1 < 3 ) arr2 [ row ] [ colom + 1 ] = arr2 [ row ] [ colom + 1 ] ;",
        "if ( row - 1 >= 0 ) arr2 [ row - 1 ] [ colom ] = arr2 [ row - 1 ] [ colom ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        9,
        10,
        13
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "arr2 [ row ] [ colom ] = arr2 [ row ] [ colom ] ;",
        "if ( colom + 1 < 3 ) arr2 [ row ] [ colom + 1 ] = arr2 [ row ] [ colom + 1 ] ;",
        "if ( row + 1 < 3 ) arr2 [ row + 1 ] [ colom ] = arr2 [ row + 1 ] [ colom ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        9,
        11
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "arr2 [ row ] [ colom ] = arr2 [ row ] [ colom ] ;",
        "if ( colom - 1 >= 0 ) arr2 [ row ] [ colom - 1 ] = arr2 [ row ] [ colom - 1 ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        9,
        11,
        12
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "arr2 [ row ] [ colom ] = arr2 [ row ] [ colom ] ;",
        "if ( colom - 1 >= 0 ) arr2 [ row ] [ colom - 1 ] = arr2 [ row ] [ colom - 1 ] ;",
        "if ( row - 1 >= 0 ) arr2 [ row - 1 ] [ colom ] = arr2 [ row - 1 ] [ colom ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        9,
        11,
        13
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "arr2 [ row ] [ colom ] = arr2 [ row ] [ colom ] ;",
        "if ( colom - 1 >= 0 ) arr2 [ row ] [ colom - 1 ] = arr2 [ row ] [ colom - 1 ] ;",
        "if ( row + 1 < 3 ) arr2 [ row + 1 ] [ colom ] = arr2 [ row + 1 ] [ colom ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        9,
        12
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "arr2 [ row ] [ colom ] = arr2 [ row ] [ colom ] ;",
        "if ( row - 1 >= 0 ) arr2 [ row - 1 ] [ colom ] = arr2 [ row - 1 ] [ colom ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        9,
        12,
        13
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "arr2 [ row ] [ colom ] = arr2 [ row ] [ colom ] ;",
        "if ( row - 1 >= 0 ) arr2 [ row - 1 ] [ colom ] = arr2 [ row - 1 ] [ colom ] ;",
        "if ( row + 1 < 3 ) arr2 [ row + 1 ] [ colom ] = arr2 [ row + 1 ] [ colom ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        9,
        13
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "arr2 [ row ] [ colom ] = arr2 [ row ] [ colom ] ;",
        "if ( row + 1 < 3 ) arr2 [ row + 1 ] [ colom ] = arr2 [ row + 1 ] [ colom ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( colom + 1 < 3 ) arr2 [ row ] [ colom + 1 ] = arr2 [ row ] [ colom + 1 ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        10,
        11
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( colom + 1 < 3 ) arr2 [ row ] [ colom + 1 ] = arr2 [ row ] [ colom + 1 ] ;",
        "if ( colom - 1 >= 0 ) arr2 [ row ] [ colom - 1 ] = arr2 [ row ] [ colom - 1 ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        10,
        11,
        12
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( colom + 1 < 3 ) arr2 [ row ] [ colom + 1 ] = arr2 [ row ] [ colom + 1 ] ;",
        "if ( colom - 1 >= 0 ) arr2 [ row ] [ colom - 1 ] = arr2 [ row ] [ colom - 1 ] ;",
        "if ( row - 1 >= 0 ) arr2 [ row - 1 ] [ colom ] = arr2 [ row - 1 ] [ colom ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        10,
        11,
        13
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( colom + 1 < 3 ) arr2 [ row ] [ colom + 1 ] = arr2 [ row ] [ colom + 1 ] ;",
        "if ( colom - 1 >= 0 ) arr2 [ row ] [ colom - 1 ] = arr2 [ row ] [ colom - 1 ] ;",
        "if ( row + 1 < 3 ) arr2 [ row + 1 ] [ colom ] = arr2 [ row + 1 ] [ colom ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        10,
        12
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( colom + 1 < 3 ) arr2 [ row ] [ colom + 1 ] = arr2 [ row ] [ colom + 1 ] ;",
        "if ( row - 1 >= 0 ) arr2 [ row - 1 ] [ colom ] = arr2 [ row - 1 ] [ colom ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        10,
        12,
        13
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( colom + 1 < 3 ) arr2 [ row ] [ colom + 1 ] = arr2 [ row ] [ colom + 1 ] ;",
        "if ( row - 1 >= 0 ) arr2 [ row - 1 ] [ colom ] = arr2 [ row - 1 ] [ colom ] ;",
        "if ( row + 1 < 3 ) arr2 [ row + 1 ] [ colom ] = arr2 [ row + 1 ] [ colom ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        10,
        13
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( colom + 1 < 3 ) arr2 [ row ] [ colom + 1 ] = arr2 [ row ] [ colom + 1 ] ;",
        "if ( row + 1 < 3 ) arr2 [ row + 1 ] [ colom ] = arr2 [ row + 1 ] [ colom ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( colom - 1 >= 0 ) arr2 [ row ] [ colom - 1 ] = arr2 [ row ] [ colom - 1 ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        11,
        12
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( colom - 1 >= 0 ) arr2 [ row ] [ colom - 1 ] = arr2 [ row ] [ colom - 1 ] ;",
        "if ( row - 1 >= 0 ) arr2 [ row - 1 ] [ colom ] = arr2 [ row - 1 ] [ colom ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        11,
        12,
        13
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( colom - 1 >= 0 ) arr2 [ row ] [ colom - 1 ] = arr2 [ row ] [ colom - 1 ] ;",
        "if ( row - 1 >= 0 ) arr2 [ row - 1 ] [ colom ] = arr2 [ row - 1 ] [ colom ] ;",
        "if ( row + 1 < 3 ) arr2 [ row + 1 ] [ colom ] = arr2 [ row + 1 ] [ colom ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        11,
        13
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( colom - 1 >= 0 ) arr2 [ row ] [ colom - 1 ] = arr2 [ row ] [ colom - 1 ] ;",
        "if ( row + 1 < 3 ) arr2 [ row + 1 ] [ colom ] = arr2 [ row + 1 ] [ colom ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( row - 1 >= 0 ) arr2 [ row - 1 ] [ colom ] = arr2 [ row - 1 ] [ colom ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        12,
        13
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( row - 1 >= 0 ) arr2 [ row - 1 ] [ colom ] = arr2 [ row - 1 ] [ colom ] ;",
        "if ( row + 1 < 3 ) arr2 [ row + 1 ] [ colom ] = arr2 [ row + 1 ] [ colom ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "int arr2 [ 3 ] = { { 1 , 1 , 1 } , { 1 , 1 , 1 } , { 1 , 1 , 1 , 1 } } ;",
        "if ( row + 1 < 3 ) arr2 [ row + 1 ] [ colom ] = arr2 [ row + 1 ] [ colom ] ;"
      ],
      "err_line": 2,
      "err_msg": "braces around scalar initializer for type ‘int’"
    }
  ]
}