{
  "meta": {
    "index": 1972,
    "hitid": "3HO4MYYR12IG52X9R09DP0L0EVEU6B",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "801A",
    "subid": "48923924"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "len = int with len = length of s",
      "code": "int len = s . length ( ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "sum = int with sum = 0",
      "code": "int sum = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "flag = bool with flag = 0",
      "code": "bool flag = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "i = int with i = 0",
      "code": "int i = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "loop while i is less than len",
      "code": "while ( i < len )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if s [ i ] is ' V ' and i + 1 is less than len",
      "code": "if ( s [ i ] == ' V ' && i + 1 < len )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if s [ i + 1 ] is ' K '",
      "code": "if ( s [ i + 1 ] == ' K ' )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "increment sum",
      "code": "sum ++ ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "increment i by 2",
      "code": "i += 2 ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "continue",
      "code": "continue ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 14,
      "text": "if i + 2 is less than len and s [ i + 2 ] is ' K '",
      "code": "if ( i + 2 < len && s [ i + 2 ] == ' K ' )",
      "indent": 4
    },
    {
      "line": 15,
      "text": "increment sum",
      "code": "sum ++ ;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "increment i by 3",
      "code": "i += 3 ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "continue",
      "code": "continue ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 19,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "increment i by 2",
      "code": "i += 2 ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 23,
      "text": "else if s [ i ] is ' K ' and i + 1 is less than len",
      "code": "else if ( s [ i ] == ' K ' && i + 1 < len )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "if s [ i + 1 ] is ' K '",
      "code": "if ( s [ i + 1 ] == ' K ' )",
      "indent": 3
    },
    {
      "line": 25,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "increment i by 2",
      "code": "i += 2 ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 28,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 4
    },
    {
      "line": 29,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 30,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "if flag is true increment sum",
      "code": "if ( flag ) sum ++ ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "print sum",
      "code": "cout << sum << endl ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "while ( i < len ) ;"
      ],
      "err_line": 12,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        4,
        2
      ],
      "mod_code": [
        "if ( s [ i + 1 ] == ' ) ' )",
        "int sum = 1 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        4,
        2,
        33
      ],
      "mod_code": [
        "if ( s [ i + 1 ] == ' ) ' )",
        "int sum = 1 ;",
        "s >> s ;",
        "cout << sum ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        4,
        2,
        8
      ],
      "mod_code": [
        "if ( s [ i + 1 ] == ' ) ' )",
        "int sum = 1 ;",
        "s >> s ;",
        "if ( s [ i ] == ' V ' && i + 1 <= len )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        4,
        2,
        6
      ],
      "mod_code": [
        "if ( s [ i + 1 ] == ' ) ' )",
        "int sum = 1 ;",
        "s >> s ;",
        "int i = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "if ( s [ i + 1 ] == ' ) ' )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        2,
        33
      ],
      "mod_code": [
        "if ( s [ i + 1 ] == ' ) ' )",
        "s >> s ;",
        "cout << sum ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        2,
        33,
        8
      ],
      "mod_code": [
        "if ( s [ i + 1 ] == ' ) ' )",
        "s >> s ;",
        "cout << sum ;",
        "if ( s [ i ] == ' V ' && i + 1 <= len )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        2,
        33,
        6
      ],
      "mod_code": [
        "if ( s [ i + 1 ] == ' ) ' )",
        "s >> s ;",
        "cout << sum ;",
        "int i = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        2,
        8
      ],
      "mod_code": [
        "if ( s [ i + 1 ] == ' ) ' )",
        "s >> s ;",
        "if ( s [ i ] == ' V ' && i + 1 <= len )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        2,
        8,
        6
      ],
      "mod_code": [
        "if ( s [ i + 1 ] == ' ) ' )",
        "s >> s ;",
        "if ( s [ i ] == ' V ' && i + 1 <= len )",
        "int i = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        2,
        6
      ],
      "mod_code": [
        "if ( s [ i + 1 ] == ' ) ' )",
        "s >> s ;",
        "int i = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "int sum = 1 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        2,
        33
      ],
      "mod_code": [
        "int sum = 1 ;",
        "s >> s ;",
        "cout << sum ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        2,
        33,
        8
      ],
      "mod_code": [
        "int sum = 1 ;",
        "s >> s ;",
        "cout << sum ;",
        "if ( s [ i ] == ' V ' && i + 1 <= len )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        2,
        33,
        6
      ],
      "mod_code": [
        "int sum = 1 ;",
        "s >> s ;",
        "cout << sum ;",
        "int i = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        2,
        8
      ],
      "mod_code": [
        "int sum = 1 ;",
        "s >> s ;",
        "if ( s [ i ] == ' V ' && i + 1 <= len )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        2,
        8,
        6
      ],
      "mod_code": [
        "int sum = 1 ;",
        "s >> s ;",
        "if ( s [ i ] == ' V ' && i + 1 <= len )",
        "int i = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        2,
        6
      ],
      "mod_code": [
        "int sum = 1 ;",
        "s >> s ;",
        "int i = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        33
      ],
      "mod_code": [
        "s >> s ;",
        "cout << sum ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        33,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "cout << sum ;",
        "if ( s [ i ] == ' V ' && i + 1 <= len )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        33,
        8,
        6
      ],
      "mod_code": [
        "s >> s ;",
        "cout << sum ;",
        "if ( s [ i ] == ' V ' && i + 1 <= len )",
        "int i = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        33,
        6
      ],
      "mod_code": [
        "s >> s ;",
        "cout << sum ;",
        "int i = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ i ] == ' V ' && i + 1 <= len )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8,
        6
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ i ] == ' V ' && i + 1 <= len )",
        "int i = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "s >> s ;",
        "int i = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}