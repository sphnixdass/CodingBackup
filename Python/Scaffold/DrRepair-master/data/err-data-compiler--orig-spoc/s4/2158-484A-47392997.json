{
  "meta": {
    "index": 2158,
    "hitid": "3FVBZG9CLJ8GM55APCMXXKMJ7KRH0X",
    "workerid": "AIWEXPJAU66D9",
    "probid": "484A",
    "subid": "47392997"
  },
  "lines": [
    {
      "line": 0,
      "text": "long long int function getB with long long int argument num",
      "code": "long long int getB ( long long int num )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long long int t = 1",
      "code": "long long int t = 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i from 0 to 64 exclusive",
      "code": "for ( int i = 0 ; i < 64 ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if t is greater than num",
      "code": "if ( t > num )",
      "indent": 2
    },
    {
      "line": 4,
      "text": "return i - 1",
      "code": "return i - 1 ;",
      "indent": 3
    },
    {
      "line": 5,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 6,
      "text": "multiply t by 2",
      "code": "t *= 2 ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "long long int function solve with long long int arguments l and r",
      "code": "long long int solve ( long long int l , long long int r )",
      "indent": 0
    },
    {
      "line": 10,
      "text": "if l = r",
      "code": "if ( l == r )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "return l",
      "code": "return l ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "create long long int b = getB ( r )",
      "code": "long long int b = getB ( r ) ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "create long long int x = 2 raised to the power of b",
      "code": "long long int x = pow ( 2 , b ) ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if x < = l",
      "code": "if ( x <= l )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "return solve ( l - x , r - x ) + x",
      "code": "return solve ( l - x , r - x ) + x ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else if x * 2 - 1 < = r",
      "code": "else if ( x * 2 - 1 <= r )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "return x * 2 - 1",
      "code": "return x * 2 - 1 ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 20,
      "text": "return x - 1",
      "code": "return x - 1 ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 24,
      "text": "create integer q",
      "code": "int q ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "read q",
      "code": "cin >> q ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "loop , decrementing q , while it is not 0",
      "code": "while ( q -- )",
      "indent": 1
    },
    {
      "line": 27,
      "text": "declare long long int variables l and r",
      "code": "long long int l , r ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "read l and r",
      "code": "cin >> l >> r ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "print solve ( l , r )",
      "code": "cout << solve ( l , r ) << endl ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long int getB ( long long int num ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "for ( i = 0 ; i < 64 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "long long int solve ( long long int l , long long int r ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "int n ;"
      ],
      "err_line": 25,
      "err_msg": "‘q’ was not declared in this scope"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "long long int l , r r ;"
      ],
      "err_line": 27,
      "err_msg": "expected initializer before ‘r’"
    },
    {
      "mod_line": [
        25,
        26,
        15,
        12
      ],
      "mod_code": [
        "{ q ; }",
        "while ( -- q )",
        "if ( x < l )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        25,
        26,
        12
      ],
      "mod_code": [
        "{ q ; }",
        "while ( -- q )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        25,
        26,
        12,
        28
      ],
      "mod_code": [
        "{ q ; }",
        "while ( -- q )",
        "else else",
        "l >> l >> r ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        25,
        26,
        12,
        3
      ],
      "mod_code": [
        "{ q ; }",
        "while ( -- q )",
        "else else",
        "if ( t >= num )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        25,
        15,
        12
      ],
      "mod_code": [
        "{ q ; }",
        "if ( x < l )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        25,
        15,
        12,
        28
      ],
      "mod_code": [
        "{ q ; }",
        "if ( x < l )",
        "else else",
        "l >> l >> r ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        25,
        15,
        12,
        3
      ],
      "mod_code": [
        "{ q ; }",
        "if ( x < l )",
        "else else",
        "if ( t >= num )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        25,
        12
      ],
      "mod_code": [
        "{ q ; }",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        25,
        12,
        28
      ],
      "mod_code": [
        "{ q ; }",
        "else else",
        "l >> l >> r ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        25,
        12,
        28,
        3
      ],
      "mod_code": [
        "{ q ; }",
        "else else",
        "l >> l >> r ;",
        "if ( t >= num )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        25,
        12,
        3
      ],
      "mod_code": [
        "{ q ; }",
        "else else",
        "if ( t >= num )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26,
        15,
        12
      ],
      "mod_code": [
        "while ( -- q )",
        "if ( x < l )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26,
        15,
        12,
        28
      ],
      "mod_code": [
        "while ( -- q )",
        "if ( x < l )",
        "else else",
        "l >> l >> r ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26,
        15,
        12,
        3
      ],
      "mod_code": [
        "while ( -- q )",
        "if ( x < l )",
        "else else",
        "if ( t >= num )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26,
        12
      ],
      "mod_code": [
        "while ( -- q )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26,
        12,
        28
      ],
      "mod_code": [
        "while ( -- q )",
        "else else",
        "l >> l >> r ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26,
        12,
        28,
        3
      ],
      "mod_code": [
        "while ( -- q )",
        "else else",
        "l >> l >> r ;",
        "if ( t >= num )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26,
        12,
        3
      ],
      "mod_code": [
        "while ( -- q )",
        "else else",
        "if ( t >= num )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        12
      ],
      "mod_code": [
        "if ( x < l )",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        12,
        28
      ],
      "mod_code": [
        "if ( x < l )",
        "else else",
        "l >> l >> r ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        12,
        28,
        3
      ],
      "mod_code": [
        "if ( x < l )",
        "else else",
        "l >> l >> r ;",
        "if ( t >= num )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15,
        12,
        3
      ],
      "mod_code": [
        "if ( x < l )",
        "else else",
        "if ( t >= num )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        28
      ],
      "mod_code": [
        "else else",
        "l >> l >> r ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        28,
        3
      ],
      "mod_code": [
        "else else",
        "l >> l >> r ;",
        "if ( t >= num )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "else else",
        "if ( t >= num )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}