{
  "meta": {
    "index": 15,
    "hitid": "388CL5C1RJHTJ1UWE58GV4E7AI1HL5",
    "workerid": "AIWEXPJAU66D9",
    "probid": "265A",
    "subid": "48936693"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare const int N = 1e5 + 100",
      "code": "const int N = 1e5 + 100 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare const double PI = 3 . 14159",
      "code": "const double PI = 3.14159 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare vector of booleans v",
      "code": "vector < bool > v ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare integer variables n , h , now and ans , and an array of integers a with 10 elements",
      "code": "int n , h , a [ 10 ] , now , ans ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "create new set of integers st",
      "code": "set < int > st ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "declare strings s and t",
      "code": "string s , t ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "read input to s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read input to t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "loop i from 0 to length of t exclusive",
      "code": "for ( int i = 0 ; i < t . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if s [ now ] = t [ i ] , increment now by one",
      "code": "if ( s [ now ] == t [ i ] ) { now ++ ; }",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print now + 1",
      "code": "cout << now + 1 << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "const double PI ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘PI’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "string s , t t ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘t’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "const double PI ;",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘PI’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        7,
        8
      ],
      "mod_code": [
        "const double PI ;",
        "s >> s ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘PI’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        7,
        8,
        5
      ],
      "mod_code": [
        "const double PI ;",
        "s >> s ;",
        "cin >> n ;",
        "string s , t t ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘PI’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        7,
        5
      ],
      "mod_code": [
        "const double PI ;",
        "s >> s ;",
        "string s , t t ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘PI’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "const double PI ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘PI’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        5
      ],
      "mod_code": [
        "const double PI ;",
        "cin >> n ;",
        "string s , t t ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘PI’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "const double PI ;",
        "string s , t t ;"
      ],
      "err_line": 1,
      "err_msg": "uninitialized const ‘PI’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "cin >> n ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        8,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "cin >> n ;",
        "string s , t t ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘t’"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "string s , t t ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘t’"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "cin >> n ;",
        "string s , t t ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘t’"
    }
  ]
}