{
  "meta": {
    "index": 2609,
    "hitid": "38DCH97KHHW0145ZUAJXO3TGXG0JQ9",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "1055A",
    "subid": "48521861"
  },
  "lines": [
    {
      "line": 0,
      "text": "n , s = int",
      "code": "int n , s ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a , b = bool array of size 1111 ach",
      "code": "bool a [ 1111 ] , b [ 1111 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read n then s",
      "code": "cin >> n >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 1 to n inclusive read a [ i ]",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 1 to n inclusive read b [ i ]",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) { cin >> b [ i ] ; }",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if not a [ 1 ]",
      "code": "if ( ! a [ 1 ] )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "else if a [ 1 ] and a [ s ]",
      "code": "else if ( a [ 1 ] && a [ s ] )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 11,
      "text": "flag = int with flag = =",
      "code": "int flag = 0 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "for i = s + 1 to n inclusive",
      "code": "for ( int i = s + 1 ; i <= n ; i ++ )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if a [ i ]",
      "code": "if ( a [ i ] )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "if b [ i ] and b [ s ]",
      "code": "if ( b [ i ] && b [ s ] )",
      "indent": 4
    },
    {
      "line": 15,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "break",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if flag",
      "code": "if ( flag )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 23,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int flag = = int ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘=’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n , s , s ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int s’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool a [ 1111 ] , a [ 1111 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( i = s + 1 ; i <= n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 16,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "int flag = = int ;",
        "for ( i = s + 1 ; i <= n ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘=’ token"
    },
    {
      "mod_line": [
        11,
        12,
        1
      ],
      "mod_code": [
        "int flag = = int ;",
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "bool a [ 1111 ] , a [ 1111 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        11,
        12,
        1,
        15
      ],
      "mod_code": [
        "int flag = = int ;",
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "int flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        11,
        12,
        1,
        20
      ],
      "mod_code": [
        "int flag = = int ;",
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "if ( ! flag )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        11,
        12,
        1,
        13
      ],
      "mod_code": [
        "int flag = = int ;",
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        11,
        12,
        15
      ],
      "mod_code": [
        "int flag = = int ;",
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘=’ token"
    },
    {
      "mod_line": [
        11,
        12,
        15,
        20
      ],
      "mod_code": [
        "int flag = = int ;",
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "int flag = 1 ;",
        "if ( ! flag )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘=’ token"
    },
    {
      "mod_line": [
        11,
        12,
        15,
        13
      ],
      "mod_code": [
        "int flag = = int ;",
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "int flag = 1 ;",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘=’ token"
    },
    {
      "mod_line": [
        11,
        12,
        20
      ],
      "mod_code": [
        "int flag = = int ;",
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "if ( ! flag )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘=’ token"
    },
    {
      "mod_line": [
        11,
        12,
        20,
        13
      ],
      "mod_code": [
        "int flag = = int ;",
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "if ( ! flag )",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘=’ token"
    },
    {
      "mod_line": [
        11,
        12,
        13
      ],
      "mod_code": [
        "int flag = = int ;",
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘=’ token"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "int flag = = int ;",
        "bool a [ 1111 ] , a [ 1111 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        11,
        1,
        15
      ],
      "mod_code": [
        "int flag = = int ;",
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "int flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        11,
        1,
        15,
        20
      ],
      "mod_code": [
        "int flag = = int ;",
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "int flag = 1 ;",
        "if ( ! flag )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        11,
        1,
        15,
        13
      ],
      "mod_code": [
        "int flag = = int ;",
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "int flag = 1 ;",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        11,
        1,
        20
      ],
      "mod_code": [
        "int flag = = int ;",
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "if ( ! flag )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        11,
        1,
        20,
        13
      ],
      "mod_code": [
        "int flag = = int ;",
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "if ( ! flag )",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        11,
        1,
        13
      ],
      "mod_code": [
        "int flag = = int ;",
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        11,
        15
      ],
      "mod_code": [
        "int flag = = int ;",
        "int flag = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘=’ token"
    },
    {
      "mod_line": [
        11,
        15,
        20
      ],
      "mod_code": [
        "int flag = = int ;",
        "int flag = 1 ;",
        "if ( ! flag )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘=’ token"
    },
    {
      "mod_line": [
        11,
        15,
        20,
        13
      ],
      "mod_code": [
        "int flag = = int ;",
        "int flag = 1 ;",
        "if ( ! flag )",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘=’ token"
    },
    {
      "mod_line": [
        11,
        15,
        13
      ],
      "mod_code": [
        "int flag = = int ;",
        "int flag = 1 ;",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘=’ token"
    },
    {
      "mod_line": [
        11,
        20
      ],
      "mod_code": [
        "int flag = = int ;",
        "if ( ! flag )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘=’ token"
    },
    {
      "mod_line": [
        11,
        20,
        13
      ],
      "mod_code": [
        "int flag = = int ;",
        "if ( ! flag )",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘=’ token"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "int flag = = int ;",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘=’ token"
    },
    {
      "mod_line": [
        12,
        1
      ],
      "mod_code": [
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "bool a [ 1111 ] , a [ 1111 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        12,
        1,
        15
      ],
      "mod_code": [
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "int flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        12,
        1,
        15,
        20
      ],
      "mod_code": [
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "int flag = 1 ;",
        "if ( ! flag )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        12,
        1,
        15,
        13
      ],
      "mod_code": [
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "int flag = 1 ;",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        12,
        1,
        20
      ],
      "mod_code": [
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "if ( ! flag )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        12,
        1,
        20,
        13
      ],
      "mod_code": [
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "if ( ! flag )",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        12,
        1,
        13
      ],
      "mod_code": [
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        12,
        15
      ],
      "mod_code": [
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        15,
        20
      ],
      "mod_code": [
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "int flag = 1 ;",
        "if ( ! flag )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        15,
        20,
        13
      ],
      "mod_code": [
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "int flag = 1 ;",
        "if ( ! flag )",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        15,
        13
      ],
      "mod_code": [
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "int flag = 1 ;",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        20
      ],
      "mod_code": [
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "if ( ! flag )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        20,
        13
      ],
      "mod_code": [
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "if ( ! flag )",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "for ( i = s + 1 ; i <= n ; i ++ )",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "int flag = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        1,
        15,
        20
      ],
      "mod_code": [
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "int flag = 1 ;",
        "if ( ! flag )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        1,
        15,
        20,
        13
      ],
      "mod_code": [
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "int flag = 1 ;",
        "if ( ! flag )",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        1,
        15,
        13
      ],
      "mod_code": [
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "int flag = 1 ;",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        1,
        20
      ],
      "mod_code": [
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "if ( ! flag )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        1,
        20,
        13
      ],
      "mod_code": [
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "if ( ! flag )",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "bool a [ 1111 ] , a [ 1111 ] ;",
        "if ( a [ i ] == 0 )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘bool a [1111]’"
    }
  ]
}