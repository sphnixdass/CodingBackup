{
  "meta": {
    "index": 2453,
    "hitid": "3ZVPAMTJWNXQM3UYZJNUWGB51ADGRV",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "553A",
    "subid": "47679696"
  },
  "lines": [
    {
      "line": 0,
      "text": "let mod be a const long long = 1000000007",
      "code": "const long long mod = 1000000007 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "k = long long",
      "code": "long long k ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let c be a long long array of size 1010",
      "code": "long long c [ 1010 ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "tol = long long",
      "code": "long long tol ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "let cal be a long long matrix of sizes 1010 and 1010",
      "code": "long long cal [ 1010 ] [ 1010 ] ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "in void function get",
      "code": "void get ( )",
      "indent": 0
    },
    {
      "line": 6,
      "text": "set cal [ 1 ] [ 1 ] = 1",
      "code": "cal [ 1 ] [ 1 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 2 to tol + 1 inclusive",
      "code": "for ( int i = 2 ; i <= tol + 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for j = 1 to i inclusive",
      "code": "for ( int j = 1 ; j <= i ; j ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if j is 1",
      "code": "if ( j == 1 )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "set cal [ i ] [ j ] to 1",
      "code": "cal [ i ] [ j ] = 1 ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "else if j is i",
      "code": "else if ( j == i )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "set cal [ i ] [ j ] to 1",
      "code": "cal [ i ] [ j ] = 1 ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 14,
      "text": "set cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j ]",
      "code": "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j ] ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "set call [ i ] [ j ] to call [ i ] [ j ] modulo mod",
      "code": "cal [ i ] [ j ] %= mod ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 21,
      "text": "read k",
      "code": "cin >> k ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "set tol to 0",
      "code": "tol = 0 ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "for i = 1 to k inclusive",
      "code": "for ( int i = 1 ; i <= k ; i ++ )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "read c [ i ]",
      "code": "cin >> c [ i ] ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "increase tol by c [ i ]",
      "code": "tol += c [ i ] ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "call get",
      "code": "get ( ) ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "let ans be long long and = 1",
      "code": "long long ans = 1 ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "for i = k to 1 inclusive , decrement i",
      "code": "for ( int i = k ; i >= 1 ; i -- )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "set ans to ( ans * cal [ tol ] [ c [ i ] ] ) modulo mod",
      "code": "ans = ( ans * cal [ tol ] [ c [ i ] ] ) % mod ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "decrease tol by c [ i ]",
      "code": "tol -= c [ i ] ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 33,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "call [ i ] [ j ] = i [ i ] [ j ] % mod ;"
      ],
      "err_line": 15,
      "err_msg": "‘call’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "long long n ;"
      ],
      "err_line": 7,
      "err_msg": "‘tol’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "long long cal [ 1010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "void get ( ) { }"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 2 ; i <= tol + 1 ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( j = 1 ; j <= i ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( j == l )"
      ],
      "err_line": 9,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "i [ i ] [ j ] = i [ i ] [ j ] % mod ;"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 21,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "for ( i = 1 ; i <= k ; i ++ )"
      ],
      "err_line": 23,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "c >> c [ i ] ;"
      ],
      "err_line": 24,
      "err_msg": "invalid operands of types ‘long long int [1010]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "get get ;"
      ],
      "err_line": 27,
      "err_msg": "expected ‘;’ before ‘get’"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "for ( i = k ; i >= 1 ; i -- )"
      ],
      "err_line": 29,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "ans = ( ans * cal [ tol ] [ c [ i ] ) % mod ;"
      ],
      "err_line": 30,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        15,
        14
      ],
      "mod_code": [
        "call [ i ] [ j ] = i [ i ] [ j ] % mod ;",
        "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j - 1 ] ;"
      ],
      "err_line": 15,
      "err_msg": "‘call’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        14,
        7
      ],
      "mod_code": [
        "call [ i ] [ j ] = i [ i ] [ j ] % mod ;",
        "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j - 1 ] ;",
        "for ( i = 2 ; i <= tol + 1 ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        14,
        7,
        24
      ],
      "mod_code": [
        "call [ i ] [ j ] = i [ i ] [ j ] % mod ;",
        "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j - 1 ] ;",
        "for ( i = 2 ; i <= tol + 1 ; i ++ )",
        "c >> c [ i ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        14,
        7,
        12
      ],
      "mod_code": [
        "call [ i ] [ j ] = i [ i ] [ j ] % mod ;",
        "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j - 1 ] ;",
        "for ( i = 2 ; i <= tol + 1 ; i ++ )",
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        14,
        24
      ],
      "mod_code": [
        "call [ i ] [ j ] = i [ i ] [ j ] % mod ;",
        "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j - 1 ] ;",
        "c >> c [ i ] ;"
      ],
      "err_line": 15,
      "err_msg": "‘call’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        14,
        24,
        12
      ],
      "mod_code": [
        "call [ i ] [ j ] = i [ i ] [ j ] % mod ;",
        "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j - 1 ] ;",
        "c >> c [ i ] ;",
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        15,
        14,
        12
      ],
      "mod_code": [
        "call [ i ] [ j ] = i [ i ] [ j ] % mod ;",
        "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j - 1 ] ;",
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        15,
        7
      ],
      "mod_code": [
        "call [ i ] [ j ] = i [ i ] [ j ] % mod ;",
        "for ( i = 2 ; i <= tol + 1 ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        7,
        24
      ],
      "mod_code": [
        "call [ i ] [ j ] = i [ i ] [ j ] % mod ;",
        "for ( i = 2 ; i <= tol + 1 ; i ++ )",
        "c >> c [ i ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        7,
        24,
        12
      ],
      "mod_code": [
        "call [ i ] [ j ] = i [ i ] [ j ] % mod ;",
        "for ( i = 2 ; i <= tol + 1 ; i ++ )",
        "c >> c [ i ] ;",
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        7,
        12
      ],
      "mod_code": [
        "call [ i ] [ j ] = i [ i ] [ j ] % mod ;",
        "for ( i = 2 ; i <= tol + 1 ; i ++ )",
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        24
      ],
      "mod_code": [
        "call [ i ] [ j ] = i [ i ] [ j ] % mod ;",
        "c >> c [ i ] ;"
      ],
      "err_line": 15,
      "err_msg": "‘call’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        24,
        12
      ],
      "mod_code": [
        "call [ i ] [ j ] = i [ i ] [ j ] % mod ;",
        "c >> c [ i ] ;",
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        15,
        12
      ],
      "mod_code": [
        "call [ i ] [ j ] = i [ i ] [ j ] % mod ;",
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        7
      ],
      "mod_code": [
        "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j - 1 ] ;",
        "for ( i = 2 ; i <= tol + 1 ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        7,
        24
      ],
      "mod_code": [
        "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j - 1 ] ;",
        "for ( i = 2 ; i <= tol + 1 ; i ++ )",
        "c >> c [ i ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        7,
        24,
        15
      ],
      "mod_code": [
        "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j - 1 ] ;",
        "for ( i = 2 ; i <= tol + 1 ; i ++ )",
        "c >> c [ i ] ;",
        "i [ i ] [ j ] = i [ i ] [ j ] % mod ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        7,
        24,
        12
      ],
      "mod_code": [
        "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j - 1 ] ;",
        "for ( i = 2 ; i <= tol + 1 ; i ++ )",
        "c >> c [ i ] ;",
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        7,
        15
      ],
      "mod_code": [
        "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j - 1 ] ;",
        "for ( i = 2 ; i <= tol + 1 ; i ++ )",
        "i [ i ] [ j ] = i [ i ] [ j ] % mod ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        7,
        15,
        12
      ],
      "mod_code": [
        "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j - 1 ] ;",
        "for ( i = 2 ; i <= tol + 1 ; i ++ )",
        "i [ i ] [ j ] = i [ i ] [ j ] % mod ;",
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        7,
        12
      ],
      "mod_code": [
        "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j - 1 ] ;",
        "for ( i = 2 ; i <= tol + 1 ; i ++ )",
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        24
      ],
      "mod_code": [
        "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j - 1 ] ;",
        "c >> c [ i ] ;"
      ],
      "err_line": 24,
      "err_msg": "invalid operands of types ‘long long int [1010]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        14,
        24,
        15
      ],
      "mod_code": [
        "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j - 1 ] ;",
        "c >> c [ i ] ;",
        "i [ i ] [ j ] = i [ i ] [ j ] % mod ;"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        24,
        15,
        12
      ],
      "mod_code": [
        "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j - 1 ] ;",
        "c >> c [ i ] ;",
        "i [ i ] [ j ] = i [ i ] [ j ] % mod ;",
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        24,
        12
      ],
      "mod_code": [
        "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j - 1 ] ;",
        "c >> c [ i ] ;",
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        15
      ],
      "mod_code": [
        "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j - 1 ] ;",
        "i [ i ] [ j ] = i [ i ] [ j ] % mod ;"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        15,
        12
      ],
      "mod_code": [
        "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j - 1 ] ;",
        "i [ i ] [ j ] = i [ i ] [ j ] % mod ;",
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "cal [ i ] [ j ] = cal [ i - 1 ] [ j - 1 ] + cal [ i - 1 ] [ j - 1 ] ;",
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        7,
        24
      ],
      "mod_code": [
        "for ( i = 2 ; i <= tol + 1 ; i ++ )",
        "c >> c [ i ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        24,
        15
      ],
      "mod_code": [
        "for ( i = 2 ; i <= tol + 1 ; i ++ )",
        "c >> c [ i ] ;",
        "i [ i ] [ j ] = i [ i ] [ j ] % mod ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        24,
        15,
        12
      ],
      "mod_code": [
        "for ( i = 2 ; i <= tol + 1 ; i ++ )",
        "c >> c [ i ] ;",
        "i [ i ] [ j ] = i [ i ] [ j ] % mod ;",
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        24,
        12
      ],
      "mod_code": [
        "for ( i = 2 ; i <= tol + 1 ; i ++ )",
        "c >> c [ i ] ;",
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        15
      ],
      "mod_code": [
        "for ( i = 2 ; i <= tol + 1 ; i ++ )",
        "i [ i ] [ j ] = i [ i ] [ j ] % mod ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        15,
        12
      ],
      "mod_code": [
        "for ( i = 2 ; i <= tol + 1 ; i ++ )",
        "i [ i ] [ j ] = i [ i ] [ j ] % mod ;",
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "for ( i = 2 ; i <= tol + 1 ; i ++ )",
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        15
      ],
      "mod_code": [
        "c >> c [ i ] ;",
        "i [ i ] [ j ] = i [ i ] [ j ] % mod ;"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        24,
        15,
        12
      ],
      "mod_code": [
        "c >> c [ i ] ;",
        "i [ i ] [ j ] = i [ i ] [ j ] % mod ;",
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        24,
        12
      ],
      "mod_code": [
        "c >> c [ i ] ;",
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        15,
        12
      ],
      "mod_code": [
        "i [ i ] [ j ] = i [ i ] [ j ] % mod ;",
        "cal [ i ] [ j ] ] = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘]’ token"
    }
  ]
}