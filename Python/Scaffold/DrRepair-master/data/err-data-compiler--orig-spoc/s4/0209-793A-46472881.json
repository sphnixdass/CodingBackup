{
  "meta": {
    "index": 209,
    "hitid": "3JU8CV4BRL6T23VHAAWDWUKSQRKOPR",
    "workerid": "A1APYLD4DUK33J",
    "probid": "793A",
    "subid": "46472881"
  },
  "lines": [
    {
      "line": 0,
      "text": "create long long integers n , k create long long integer array numbers with size 100005",
      "code": "long long int n , k , numbers [ 100005 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create long long integers t , min with t = 0 , min = 1e9",
      "code": "long long int t = 0 , min = 1e9 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n read k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read numbers [ i ]",
      "code": "cin >> numbers [ i ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if min is greater than numbers [ i ] , set min to numbers [ i ]",
      "code": "if ( min > numbers [ i ] ) { min = numbers [ i ] ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if ( numbers [ i ] - min ) % k is 0",
      "code": "if ( ( numbers [ i ] - min ) % k == 0 )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "increment t by ( numbers [ i ] - min ) / k",
      "code": "t += ( numbers [ i ] - min ) / k ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set t to - 1",
      "code": "t = - 1 ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print t print newline",
      "code": "cout << t << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "numbers >> numbers [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘long long int [100005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        13,
        3
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;",
        "n >> n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        13,
        3,
        5
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;",
        "n >> n >> k ;",
        "numbers >> numbers [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        13,
        3,
        9
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;",
        "n >> n >> k ;",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        13,
        3,
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;",
        "n >> n >> k ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        13,
        5
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;",
        "numbers >> numbers [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        13,
        5,
        9
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;",
        "numbers >> numbers [ i ] ;",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        13,
        5,
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;",
        "numbers >> numbers [ i ] ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        13,
        9
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        13,
        9,
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        13,
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "break break ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "n >> n >> k ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3,
        5
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "n >> n >> k ;",
        "numbers >> numbers [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3,
        5,
        9
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "n >> n >> k ;",
        "numbers >> numbers [ i ] ;",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3,
        5,
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "n >> n >> k ;",
        "numbers >> numbers [ i ] ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3,
        9
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "n >> n >> k ;",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3,
        9,
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "n >> n >> k ;",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3,
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "n >> n >> k ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "numbers >> numbers [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        9
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "numbers >> numbers [ i ] ;",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        9,
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "numbers >> numbers [ i ] ;",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "numbers >> numbers [ i ] ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        3
      ],
      "mod_code": [
        "break break ;",
        "n >> n >> k ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        3,
        5
      ],
      "mod_code": [
        "break break ;",
        "n >> n >> k ;",
        "numbers >> numbers [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘long long int [100005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        13,
        3,
        5,
        9
      ],
      "mod_code": [
        "break break ;",
        "n >> n >> k ;",
        "numbers >> numbers [ i ] ;",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘long long int [100005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        13,
        3,
        5,
        11
      ],
      "mod_code": [
        "break break ;",
        "n >> n >> k ;",
        "numbers >> numbers [ i ] ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘long long int [100005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        13,
        3,
        9
      ],
      "mod_code": [
        "break break ;",
        "n >> n >> k ;",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        3,
        9,
        11
      ],
      "mod_code": [
        "break break ;",
        "n >> n >> k ;",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        3,
        11
      ],
      "mod_code": [
        "break break ;",
        "n >> n >> k ;",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        5
      ],
      "mod_code": [
        "break break ;",
        "numbers >> numbers [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘long long int [100005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        13,
        5,
        9
      ],
      "mod_code": [
        "break break ;",
        "numbers >> numbers [ i ] ;",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘long long int [100005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        13,
        5,
        9,
        11
      ],
      "mod_code": [
        "break break ;",
        "numbers >> numbers [ i ] ;",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘long long int [100005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        13,
        5,
        11
      ],
      "mod_code": [
        "break break ;",
        "numbers >> numbers [ i ] ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘long long int [100005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        13,
        9
      ],
      "mod_code": [
        "break break ;",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        13,
        9,
        11
      ],
      "mod_code": [
        "break break ;",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        11
      ],
      "mod_code": [
        "break break ;",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "n >> n >> k ;",
        "numbers >> numbers [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘long long int [100005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        5,
        9
      ],
      "mod_code": [
        "n >> n >> k ;",
        "numbers >> numbers [ i ] ;",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘long long int [100005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        5,
        9,
        11
      ],
      "mod_code": [
        "n >> n >> k ;",
        "numbers >> numbers [ i ] ;",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘long long int [100005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        5,
        11
      ],
      "mod_code": [
        "n >> n >> k ;",
        "numbers >> numbers [ i ] ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘long long int [100005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        9,
        11
      ],
      "mod_code": [
        "n >> n >> k ;",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "n >> n >> k ;",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "numbers >> numbers [ i ] ;",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘long long int [100005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        9,
        11
      ],
      "mod_code": [
        "numbers >> numbers [ i ] ;",
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘long long int [100005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "numbers >> numbers [ i ] ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘long long int [100005]’ and ‘long long int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "if ( ( numbers [ i ] - ' min ' ) % k == 0 )",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}