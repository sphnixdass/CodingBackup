{
  "meta": {
    "index": 129,
    "hitid": "3K3G488TR22SU5QE58F3NTABEDN5QM",
    "workerid": "A1APYLD4DUK33J",
    "probid": "3A",
    "subid": "47610425"
  },
  "lines": [
    {
      "line": 0,
      "text": "create strings q , t",
      "code": "string q , t ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long long integers v , z , b , n , c , w , u , R , D , L , U",
      "code": "long long int v , z , b , n , c , w , u , R , D , L , U ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read t read q",
      "code": "cin >> t >> q ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set c to absolute value of q [ 0 ] - t [ 0 ]",
      "code": "c = abs ( q [ 0 ] - t [ 0 ] ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set n to absolute value of q [ 1 ] - t [ 1 ]",
      "code": "n = abs ( q [ 1 ] - t [ 1 ] ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set b to minimum of c and n",
      "code": "b = min ( c , n ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "decrement c by b",
      "code": "c -= b ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "decrement n by b",
      "code": "n -= b ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set w to b",
      "code": "w = b ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if q [ 0 ] is less than t [ 0 ]",
      "code": "if ( q [ 0 ] < t [ 0 ] )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "set L to 1",
      "code": "L = 1 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "set R to 1",
      "code": "R = 1 ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if q [ 1 ] is less than t [ 1 ]",
      "code": "if ( q [ 1 ] < t [ 1 ] )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "set D to 1",
      "code": "D = 1 ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 17,
      "text": "set U to 1",
      "code": "U = 1 ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "increment b by n + c",
      "code": "b += n + c ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print b print \" \\ n \"",
      "code": "cout << b << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "create string G",
      "code": "string G ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if L and D",
      "code": "if ( L && D )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "set G to \" LD \"",
      "code": "G = \" LD \" ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "else if L and U",
      "code": "else if ( L && U )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "set G to \" LU \"",
      "code": "G = \" LU \" ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "else if R and D",
      "code": "else if ( R && D )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "set G to \" RD \"",
      "code": "G = \" RD \" ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "else if R and U",
      "code": "else if ( R && U )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "set G to \" RU \"",
      "code": "G = \" RU \" ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "for i = 1 to w inclusive , print \" G \" print \" \\ n \"",
      "code": "for ( int i = 1 ; i <= w ; i ++ ) cout << G << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "if n is true",
      "code": "if ( n )",
      "indent": 1
    },
    {
      "line": 31,
      "text": "if U is true",
      "code": "if ( U )",
      "indent": 2
    },
    {
      "line": 32,
      "text": "set G to \" U \"",
      "code": "G = \" U \" ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 34,
      "text": "set G to \" D \"",
      "code": "G = \" D \" ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "else if b is true",
      "code": "else if ( b )",
      "indent": 1
    },
    {
      "line": 36,
      "text": "if R is true",
      "code": "if ( R )",
      "indent": 2
    },
    {
      "line": 37,
      "text": "set G to \" R \"",
      "code": "G = \" R \" ;",
      "indent": 3
    },
    {
      "line": 38,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 39,
      "text": "set G to \" L \"",
      "code": "G = \" L \" ;",
      "indent": 3
    },
    {
      "line": 40,
      "text": "for i = 1 to b - 2 inclusive , print G print \" \\ n \"",
      "code": "for ( int i = 1 ; i <= b - w ; i ++ ) cout << G << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string q ;"
      ],
      "err_line": 3,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long int v , z , b , n , c , w , R , R , D , L , U ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘long long int R’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "t >> t >> q ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "D = l ;"
      ],
      "err_line": 15,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        38
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        29,
        40,
        30,
        33
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= w ; i ++ ) { cout << \" G \" << \" \\n \" ; }",
        "for ( int i = 1 ; i <= b - 2 ; i ++ ) cout << G [ i ] << \" \\n \" ;",
        "if ( n == true )",
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        29,
        40,
        30,
        20
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= w ; i ++ ) { cout << \" G \" << \" \\n \" ; }",
        "for ( int i = 1 ; i <= b - 2 ; i ++ ) cout << G [ i ] << \" \\n \" ;",
        "if ( n == true )",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        29,
        40,
        39,
        33
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= w ; i ++ ) { cout << \" G \" << \" \\n \" ; }",
        "for ( int i = 1 ; i <= b - 2 ; i ++ ) cout << G [ i ] << \" \\n \" ;",
        "G == \" L \" ;",
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        29,
        40,
        39,
        20
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= w ; i ++ ) { cout << \" G \" << \" \\n \" ; }",
        "for ( int i = 1 ; i <= b - 2 ; i ++ ) cout << G [ i ] << \" \\n \" ;",
        "G == \" L \" ;",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        29,
        40,
        33
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= w ; i ++ ) { cout << \" G \" << \" \\n \" ; }",
        "for ( int i = 1 ; i <= b - 2 ; i ++ ) cout << G [ i ] << \" \\n \" ;",
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        29,
        40,
        33,
        20
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= w ; i ++ ) { cout << \" G \" << \" \\n \" ; }",
        "for ( int i = 1 ; i <= b - 2 ; i ++ ) cout << G [ i ] << \" \\n \" ;",
        "else else",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        29,
        40,
        20
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= w ; i ++ ) { cout << \" G \" << \" \\n \" ; }",
        "for ( int i = 1 ; i <= b - 2 ; i ++ ) cout << G [ i ] << \" \\n \" ;",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        29,
        30,
        39,
        33
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= w ; i ++ ) { cout << \" G \" << \" \\n \" ; }",
        "if ( n == true )",
        "G == \" L \" ;",
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        29,
        30,
        39,
        20
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= w ; i ++ ) { cout << \" G \" << \" \\n \" ; }",
        "if ( n == true )",
        "G == \" L \" ;",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        29,
        30,
        33
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= w ; i ++ ) { cout << \" G \" << \" \\n \" ; }",
        "if ( n == true )",
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        29,
        30,
        33,
        20
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= w ; i ++ ) { cout << \" G \" << \" \\n \" ; }",
        "if ( n == true )",
        "else else",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        29,
        30,
        20
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= w ; i ++ ) { cout << \" G \" << \" \\n \" ; }",
        "if ( n == true )",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        29,
        39,
        33
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= w ; i ++ ) { cout << \" G \" << \" \\n \" ; }",
        "G == \" L \" ;",
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        29,
        39,
        33,
        20
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= w ; i ++ ) { cout << \" G \" << \" \\n \" ; }",
        "G == \" L \" ;",
        "else else",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        29,
        39,
        20
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= w ; i ++ ) { cout << \" G \" << \" \\n \" ; }",
        "G == \" L \" ;",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        29,
        33
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= w ; i ++ ) { cout << \" G \" << \" \\n \" ; }",
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        29,
        33,
        20
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= w ; i ++ ) { cout << \" G \" << \" \\n \" ; }",
        "else else",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        29,
        20
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= w ; i ++ ) { cout << \" G \" << \" \\n \" ; }",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        40,
        30,
        39,
        33
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= b - 2 ; i ++ ) cout << G [ i ] << \" \\n \" ;",
        "if ( n == true )",
        "G == \" L \" ;",
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        40,
        30,
        39,
        20
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= b - 2 ; i ++ ) cout << G [ i ] << \" \\n \" ;",
        "if ( n == true )",
        "G == \" L \" ;",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        40,
        30,
        33
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= b - 2 ; i ++ ) cout << G [ i ] << \" \\n \" ;",
        "if ( n == true )",
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        40,
        30,
        33,
        20
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= b - 2 ; i ++ ) cout << G [ i ] << \" \\n \" ;",
        "if ( n == true )",
        "else else",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        40,
        30,
        20
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= b - 2 ; i ++ ) cout << G [ i ] << \" \\n \" ;",
        "if ( n == true )",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        40,
        39,
        33
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= b - 2 ; i ++ ) cout << G [ i ] << \" \\n \" ;",
        "G == \" L \" ;",
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        40,
        39,
        33,
        20
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= b - 2 ; i ++ ) cout << G [ i ] << \" \\n \" ;",
        "G == \" L \" ;",
        "else else",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        40,
        39,
        20
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= b - 2 ; i ++ ) cout << G [ i ] << \" \\n \" ;",
        "G == \" L \" ;",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        40,
        33
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= b - 2 ; i ++ ) cout << G [ i ] << \" \\n \" ;",
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        40,
        33,
        20
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= b - 2 ; i ++ ) cout << G [ i ] << \" \\n \" ;",
        "else else",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        40,
        20
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= b - 2 ; i ++ ) cout << G [ i ] << \" \\n \" ;",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        39,
        33
      ],
      "mod_code": [
        "if ( n == true )",
        "G == \" L \" ;",
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        30,
        39,
        33,
        20
      ],
      "mod_code": [
        "if ( n == true )",
        "G == \" L \" ;",
        "else else",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        39,
        20
      ],
      "mod_code": [
        "if ( n == true )",
        "G == \" L \" ;",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        33
      ],
      "mod_code": [
        "if ( n == true )",
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        30,
        33,
        20
      ],
      "mod_code": [
        "if ( n == true )",
        "else else",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        20
      ],
      "mod_code": [
        "if ( n == true )",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        39,
        33
      ],
      "mod_code": [
        "G == \" L \" ;",
        "else else"
      ],
      "err_line": 33,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        39,
        33,
        20
      ],
      "mod_code": [
        "G == \" L \" ;",
        "else else",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        39,
        20
      ],
      "mod_code": [
        "G == \" L \" ;",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        33,
        20
      ],
      "mod_code": [
        "else else",
        "char G ;"
      ],
      "err_line": 22,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    }
  ]
}