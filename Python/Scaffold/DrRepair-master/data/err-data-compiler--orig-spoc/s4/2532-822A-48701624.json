{
  "meta": {
    "index": 2532,
    "hitid": "3LXX8KJXPW38AGFATL0GA4KDMA39OT",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "822A",
    "subid": "48701624"
  },
  "lines": [
    {
      "line": 0,
      "text": "create long long int fact ( long int x )",
      "code": "long long int fact ( long int x )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if x = 0 or 1 , return 1",
      "code": "if ( x == 0 || x == 1 ) return 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return x * fact ( x - 1 )",
      "code": "return x * fact ( x - 1 ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "create long int a , b",
      "code": "long int a , b ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read b",
      "code": "cin >> b ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if a > b",
      "code": "if ( a > b )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print fact ( b ) and a newline",
      "code": "cout << fact ( b ) << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print fact ( a ) and a newline",
      "code": "cout << fact ( a ) << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long int fact ( long int ) x ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long int fact ( long long int x ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "gets ( a ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘long int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        0,
        10
      ],
      "mod_code": [
        "long long int fact ( long int ) x ;",
        "else else"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        0,
        10,
        6
      ],
      "mod_code": [
        "long long int fact ( long int ) x ;",
        "else else",
        "gets ( a ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        0,
        10,
        6,
        7
      ],
      "mod_code": [
        "long long int fact ( long int ) x ;",
        "else else",
        "gets ( a ) ;",
        "cin >> n ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        0,
        10,
        7
      ],
      "mod_code": [
        "long long int fact ( long int ) x ;",
        "else else",
        "cin >> n ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "long long int fact ( long int ) x ;",
        "gets ( a ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        0,
        6,
        7
      ],
      "mod_code": [
        "long long int fact ( long int ) x ;",
        "gets ( a ) ;",
        "cin >> n ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "long long int fact ( long int ) x ;",
        "cin >> n ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘x’"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "else else",
        "gets ( a ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘long int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        6,
        7
      ],
      "mod_code": [
        "else else",
        "gets ( a ) ;",
        "cin >> n ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘long int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        6,
        7,
        0
      ],
      "mod_code": [
        "else else",
        "gets ( a ) ;",
        "cin >> n ;",
        "long long int fact ( long long int x ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        10,
        6,
        0
      ],
      "mod_code": [
        "else else",
        "gets ( a ) ;",
        "long long int fact ( long long int x ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "else else",
        "cin >> n ;"
      ],
      "err_line": 7,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        7,
        0
      ],
      "mod_code": [
        "else else",
        "cin >> n ;",
        "long long int fact ( long long int x ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "else else",
        "long long int fact ( long long int x ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "gets ( a ) ;",
        "cin >> n ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘long int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        0
      ],
      "mod_code": [
        "gets ( a ) ;",
        "cin >> n ;",
        "long long int fact ( long long int x ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        0
      ],
      "mod_code": [
        "gets ( a ) ;",
        "long long int fact ( long long int x ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "cin >> n ;",
        "long long int fact ( long long int x ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘)’ before ‘;’ token"
    }
  ]
}