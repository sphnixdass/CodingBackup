{
  "meta": {
    "index": 1852,
    "hitid": "3Q7TKIAPOT4C7LPUS9PQ4JZ9H3CLDT",
    "workerid": "A1APYLD4DUK33J",
    "probid": "443A",
    "subid": "48878930"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create character ch",
      "code": "char ch ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integer array a with size 27 , with a = { 0 } , create integer n with n = 0",
      "code": "int a [ 27 ] = { 0 } , n = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read into ch",
      "code": "cin . get ( ch ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while set ch to read character is not ' \\ n '",
      "code": "while ( ( ch = cin . get ( ) ) != ' \\n ' )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if ch is ' { '",
      "code": "if ( ch == ' { ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "break current loop iteration",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else if ch is ' } '",
      "code": "else if ( ch == ' } ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if ch is greater than or equal to ' a ' and ch is less than or equal to ' z '",
      "code": "if ( ch >= ' a ' && ch <= ' z ' )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if a [ ch - ' a ' ] is 0",
      "code": "if ( a [ ch - ' a ' ] == 0 )",
      "indent": 4
    },
    {
      "line": 12,
      "text": "set a [ ch - ' a ' ] is 1",
      "code": "a [ ch - ' a ' ] = 1 ;",
      "indent": 5
    },
    {
      "line": 13,
      "text": "increment n",
      "code": "n ++ ;",
      "indent": 5
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "set ch to ' '",
      "code": "ch = ' ' ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print n print newline",
      "code": "cout << n << endl ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else if ( ch == ' } }"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "ch = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘ch’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gets ( ch ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( ch = getchar ( ) ) { cin >> ch ; }"
      ],
      "err_line": 6,
      "err_msg": "continue statement not within a loop"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else if ( ch == ' } )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "else if ( ch == ' } }",
        "a [ ' - ' ] = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        12,
        3
      ],
      "mod_code": [
        "else if ( ch == ' } }",
        "a [ ' - ' ] = 1 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        12,
        3,
        8
      ],
      "mod_code": [
        "else if ( ch == ' } }",
        "a [ ' - ' ] = 1 ;",
        "gets ( ch ) ;",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        12,
        3,
        9
      ],
      "mod_code": [
        "else if ( ch == ' } }",
        "a [ ' - ' ] = 1 ;",
        "gets ( ch ) ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        12,
        8
      ],
      "mod_code": [
        "else if ( ch == ' } }",
        "a [ ' - ' ] = 1 ;",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        12,
        8,
        9
      ],
      "mod_code": [
        "else if ( ch == ' } }",
        "a [ ' - ' ] = 1 ;",
        "break break ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        12,
        9
      ],
      "mod_code": [
        "else if ( ch == ' } }",
        "a [ ' - ' ] = 1 ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "else if ( ch == ' } }",
        "gets ( ch ) ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        3,
        8
      ],
      "mod_code": [
        "else if ( ch == ' } }",
        "gets ( ch ) ;",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        3,
        8,
        9
      ],
      "mod_code": [
        "else if ( ch == ' } }",
        "gets ( ch ) ;",
        "break break ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        3,
        9
      ],
      "mod_code": [
        "else if ( ch == ' } }",
        "gets ( ch ) ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "else if ( ch == ' } }",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        8,
        9
      ],
      "mod_code": [
        "else if ( ch == ' } }",
        "break break ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "else if ( ch == ' } }",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "a [ ' - ' ] = 1 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        3,
        8
      ],
      "mod_code": [
        "a [ ' - ' ] = 1 ;",
        "gets ( ch ) ;",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        3,
        8,
        9
      ],
      "mod_code": [
        "a [ ' - ' ] = 1 ;",
        "gets ( ch ) ;",
        "break break ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        3,
        8,
        7
      ],
      "mod_code": [
        "a [ ' - ' ] = 1 ;",
        "gets ( ch ) ;",
        "break break ;",
        "else if ( ch == ' } )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        3,
        9
      ],
      "mod_code": [
        "a [ ' - ' ] = 1 ;",
        "gets ( ch ) ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        3,
        9,
        7
      ],
      "mod_code": [
        "a [ ' - ' ] = 1 ;",
        "gets ( ch ) ;",
        "else else",
        "else if ( ch == ' } )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        3,
        7
      ],
      "mod_code": [
        "a [ ' - ' ] = 1 ;",
        "gets ( ch ) ;",
        "else if ( ch == ' } )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        8
      ],
      "mod_code": [
        "a [ ' - ' ] = 1 ;",
        "break break ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        8,
        9
      ],
      "mod_code": [
        "a [ ' - ' ] = 1 ;",
        "break break ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        8,
        9,
        7
      ],
      "mod_code": [
        "a [ ' - ' ] = 1 ;",
        "break break ;",
        "else else",
        "else if ( ch == ' } )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        8,
        7
      ],
      "mod_code": [
        "a [ ' - ' ] = 1 ;",
        "break break ;",
        "else if ( ch == ' } )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        9
      ],
      "mod_code": [
        "a [ ' - ' ] = 1 ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12,
        9,
        7
      ],
      "mod_code": [
        "a [ ' - ' ] = 1 ;",
        "else else",
        "else if ( ch == ' } )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        12,
        7
      ],
      "mod_code": [
        "a [ ' - ' ] = 1 ;",
        "else if ( ch == ' } )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "break break ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        9
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "break break ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        9,
        7
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "break break ;",
        "else else",
        "else if ( ch == ' } )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        8,
        7
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "break break ;",
        "else if ( ch == ' } )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        9,
        7
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "else else",
        "else if ( ch == ' } )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "gets ( ch ) ;",
        "else if ( ch == ' } )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "break break ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        8,
        9,
        7
      ],
      "mod_code": [
        "break break ;",
        "else else",
        "else if ( ch == ' } )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "break break ;",
        "else if ( ch == ' } )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "else else",
        "else if ( ch == ' } )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating ' character"
    }
  ]
}