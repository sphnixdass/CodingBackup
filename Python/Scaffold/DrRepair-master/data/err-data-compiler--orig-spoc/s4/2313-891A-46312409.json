{
  "meta": {
    "index": 2313,
    "hitid": "391JB9X4ZY24R9DPK2CS899O1HZMK9",
    "workerid": "A1AYVATMT88U1W",
    "probid": "891A",
    "subid": "46312409"
  },
  "lines": [
    {
      "line": 0,
      "text": "consider integer gcd ( integer m , integer n )",
      "code": "int gcd ( int m , int n )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let temp be a integer",
      "code": "int temp ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if ( m is less than n )",
      "code": "if ( m < n )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "temp is equal to n",
      "code": "temp = n ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "n is equal to m",
      "code": "n = m ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "m is equal to temp",
      "code": "m = temp ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "the value of temp is equal to m % n",
      "code": "temp = m % n ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "while ( temp is not equal to 0 )",
      "code": "while ( temp != 0 )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "m is equal to n",
      "code": "m = n ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "n is equal to temp",
      "code": "n = temp ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "temp is equal to m % n",
      "code": "temp = m % n ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "return n value",
      "code": "return n ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 16,
      "text": "let n be a integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "let a = array of integers of length 2000",
      "code": "int a [ 2000 ] ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for integer i = 0 to n exclusive , read ith element of array a",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "let num be a integer with value 0",
      "code": "int num = 0 ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "for ( integer i = 0 to n exclusive ) , increase i value by 1",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if ( ith term of array a is equal to 1 ) , increase num value by 1",
      "code": "if ( a [ i ] == 1 ) num ++ ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "if ( num is not equal to 0 )",
      "code": "if ( num != 0 )",
      "indent": 1
    },
    {
      "line": 25,
      "text": "print n - num and newline",
      "code": "cout << n - num << endl ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "let mint be a integer with value 999999",
      "code": "int mint = 999999 ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "for ( integer i = 0 to n exclusive )",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "the value of num is equal to 0",
      "code": "num = 0 ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "let x be a integer with value as ith element of array a",
      "code": "int x = a [ i ] ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "for ( j = i + 1 to n exclusive )",
      "code": "for ( int j = i + 1 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 33,
      "text": "increase num value by 1",
      "code": "num ++ ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "let the value of x is equal to gcd ( x , a [ j ] )",
      "code": "x = gcd ( x , a [ j ] ) ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "if ( x is equal to 1 ) , stop",
      "code": "if ( x == 1 ) break ;",
      "indent": 3
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 37,
      "text": "if ( x is equal to 1 ) , the value of mint is ( if mint is greater than num answer is num else answer is mint )",
      "code": "if ( x == 1 ) mint = mint > num ? num : mint ;",
      "indent": 2
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 39,
      "text": "if ( mint is equal to 999999 )",
      "code": "if ( mint == 999999 )",
      "indent": 1
    },
    {
      "line": 40,
      "text": "print - 1 and newline",
      "code": "cout << \" -1 \" << endl ;",
      "indent": 2
    },
    {
      "line": 41,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 42,
      "text": "print mint + n - 1 and newline",
      "code": "cout << mint + n - 1 << endl ;",
      "indent": 2
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "int x = new a [ i ] ;"
      ],
      "err_line": 31,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;"
      ],
      "err_line": 37,
      "err_msg": "‘answer’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "n to ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "m to ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "m to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "n to ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "mint = 999999 ;"
      ],
      "err_line": 28,
      "err_msg": "‘mint’ was not declared in this scope"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "num [ i ] = 0 ;"
      ],
      "err_line": 30,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < n ; j ++ )"
      ],
      "err_line": 32,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ;"
      ],
      "err_line": 37,
      "err_msg": "‘answer’ was not declared in this scope"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 41,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        0,
        31
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "int x = new a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        31,
        37
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "int x = new a [ i ] ;",
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        31,
        37,
        28
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "int x = new a [ i ] ;",
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "mint = 999999 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        31,
        37,
        30
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "int x = new a [ i ] ;",
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "num [ i ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        31,
        37,
        9
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "int x = new a [ i ] ;",
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "m to ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        31,
        28
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "int x = new a [ i ] ;",
        "mint = 999999 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        31,
        28,
        30
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "int x = new a [ i ] ;",
        "mint = 999999 ;",
        "num [ i ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        31,
        28,
        9
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "int x = new a [ i ] ;",
        "mint = 999999 ;",
        "m to ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        31,
        30
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "int x = new a [ i ] ;",
        "num [ i ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        31,
        30,
        9
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "int x = new a [ i ] ;",
        "num [ i ] = 0 ;",
        "m to ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        31,
        9
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "int x = new a [ i ] ;",
        "m to ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        37
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        37,
        28
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "mint = 999999 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        37,
        28,
        30
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "mint = 999999 ;",
        "num [ i ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        37,
        28,
        9
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "mint = 999999 ;",
        "m to ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        37,
        30
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "num [ i ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        37,
        30,
        9
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "num [ i ] = 0 ;",
        "m to ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        37,
        9
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "m to ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        28
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "mint = 999999 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        28,
        30
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "mint = 999999 ;",
        "num [ i ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        28,
        30,
        9
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "mint = 999999 ;",
        "num [ i ] = 0 ;",
        "m to ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        28,
        9
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "mint = 999999 ;",
        "m to ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        30
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "num [ i ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        30,
        9
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "num [ i ] = 0 ;",
        "m to ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "int gcd ( int m , int n ) ;",
        "m to ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        31,
        37
      ],
      "mod_code": [
        "int x = new a [ i ] ;",
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;"
      ],
      "err_line": 31,
      "err_msg": "‘a’ does not name a type"
    },
    {
      "mod_line": [
        31,
        37,
        28
      ],
      "mod_code": [
        "int x = new a [ i ] ;",
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "mint = 999999 ;"
      ],
      "err_line": 28,
      "err_msg": "‘mint’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        37,
        28,
        30
      ],
      "mod_code": [
        "int x = new a [ i ] ;",
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "mint = 999999 ;",
        "num [ i ] = 0 ;"
      ],
      "err_line": 28,
      "err_msg": "‘mint’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        37,
        28,
        9
      ],
      "mod_code": [
        "int x = new a [ i ] ;",
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "mint = 999999 ;",
        "m to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        31,
        37,
        30
      ],
      "mod_code": [
        "int x = new a [ i ] ;",
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "num [ i ] = 0 ;"
      ],
      "err_line": 30,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        31,
        37,
        30,
        9
      ],
      "mod_code": [
        "int x = new a [ i ] ;",
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "num [ i ] = 0 ;",
        "m to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        31,
        37,
        9
      ],
      "mod_code": [
        "int x = new a [ i ] ;",
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "m to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        31,
        28
      ],
      "mod_code": [
        "int x = new a [ i ] ;",
        "mint = 999999 ;"
      ],
      "err_line": 28,
      "err_msg": "‘mint’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        28,
        30
      ],
      "mod_code": [
        "int x = new a [ i ] ;",
        "mint = 999999 ;",
        "num [ i ] = 0 ;"
      ],
      "err_line": 28,
      "err_msg": "‘mint’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        28,
        30,
        9
      ],
      "mod_code": [
        "int x = new a [ i ] ;",
        "mint = 999999 ;",
        "num [ i ] = 0 ;",
        "m to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        31,
        28,
        9
      ],
      "mod_code": [
        "int x = new a [ i ] ;",
        "mint = 999999 ;",
        "m to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        31,
        30
      ],
      "mod_code": [
        "int x = new a [ i ] ;",
        "num [ i ] = 0 ;"
      ],
      "err_line": 30,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        31,
        30,
        9
      ],
      "mod_code": [
        "int x = new a [ i ] ;",
        "num [ i ] = 0 ;",
        "m to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        31,
        9
      ],
      "mod_code": [
        "int x = new a [ i ] ;",
        "m to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        37,
        28
      ],
      "mod_code": [
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "mint = 999999 ;"
      ],
      "err_line": 28,
      "err_msg": "‘mint’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        28,
        30
      ],
      "mod_code": [
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "mint = 999999 ;",
        "num [ i ] = 0 ;"
      ],
      "err_line": 28,
      "err_msg": "‘mint’ was not declared in this scope"
    },
    {
      "mod_line": [
        37,
        28,
        30,
        9
      ],
      "mod_code": [
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "mint = 999999 ;",
        "num [ i ] = 0 ;",
        "m to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        37,
        28,
        9
      ],
      "mod_code": [
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "mint = 999999 ;",
        "m to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        37,
        30
      ],
      "mod_code": [
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "num [ i ] = 0 ;"
      ],
      "err_line": 30,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        37,
        30,
        9
      ],
      "mod_code": [
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "num [ i ] = 0 ;",
        "m to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        37,
        9
      ],
      "mod_code": [
        "if ( x == 1 ) mint = ( mint > num ? mint : answer ) ;",
        "m to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        28,
        30
      ],
      "mod_code": [
        "mint = 999999 ;",
        "num [ i ] = 0 ;"
      ],
      "err_line": 28,
      "err_msg": "‘mint’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        30,
        9
      ],
      "mod_code": [
        "mint = 999999 ;",
        "num [ i ] = 0 ;",
        "m to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        28,
        9
      ],
      "mod_code": [
        "mint = 999999 ;",
        "m to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        30,
        9
      ],
      "mod_code": [
        "num [ i ] = 0 ;",
        "m to ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘to’"
    }
  ]
}