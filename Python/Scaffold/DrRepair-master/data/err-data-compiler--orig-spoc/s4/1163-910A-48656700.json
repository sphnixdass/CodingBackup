{
  "meta": {
    "index": 1163,
    "hitid": "3EQVJH0T40FH2E21NEA7HVOO38SHT2",
    "workerid": "AIWEXPJAU66D9",
    "probid": "910A",
    "subid": "48656700"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , d , s and i where s and i = 0",
      "code": "int n , d , s = 0 , i = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create character array a with 105 elements",
      "code": "char a [ 105 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n and d",
      "code": "cin >> n >> d ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while i is less than n - 1",
      "code": "while ( i < n - 1 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if a [ i + d ] = ' 1 '",
      "code": "if ( a [ i + d ] == ' 1 ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment s",
      "code": "s ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "i = i + d",
      "code": "i = i + d ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "declare integer variable j = i + d - 1",
      "code": "int j = i + d - 1 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "declare boolean variable f = true",
      "code": "bool f = true ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "while j is greater than i",
      "code": "while ( j > i )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "if a [ j ] = ' 1 '",
      "code": "if ( a [ j ] == ' 1 ' )",
      "indent": 4
    },
    {
      "line": 14,
      "text": "assign value of j to i",
      "code": "i = j ;",
      "indent": 5
    },
    {
      "line": 15,
      "text": "increase s by one",
      "code": "s ++ ;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "f = false",
      "code": "f = false ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 19,
      "text": "decrement j",
      "code": "j -- ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 21,
      "text": "if f = true",
      "code": "if ( f == true )",
      "indent": 3
    },
    {
      "line": 22,
      "text": "s = - 1",
      "code": "s = - 1 ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print s",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char a [ 105 ] [ 105 ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [105][105]’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 3,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "f = true ;"
      ],
      "err_line": 11,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "* i = j ;"
      ],
      "err_line": 14,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "if ( a [ i + d ] = ' 1 ' )",
        "char a [ 105 ] [ 105 ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [105][105]’)"
    },
    {
      "mod_line": [
        6,
        2,
        4
      ],
      "mod_code": [
        "if ( a [ i + d ] = ' 1 ' )",
        "char a [ 105 ] [ 105 ] ;",
        "gets ( a ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char (*)[105]’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        2,
        4,
        23
      ],
      "mod_code": [
        "if ( a [ i + d ] = ' 1 ' )",
        "char a [ 105 ] [ 105 ] ;",
        "gets ( a ) ;",
        "{ }"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char (*)[105]’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        2,
        4,
        16
      ],
      "mod_code": [
        "if ( a [ i + d ] = ' 1 ' )",
        "char a [ 105 ] [ 105 ] ;",
        "gets ( a ) ;",
        "bool f = false ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char (*)[105]’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        2,
        4,
        18
      ],
      "mod_code": [
        "if ( a [ i + d ] = ' 1 ' )",
        "char a [ 105 ] [ 105 ] ;",
        "gets ( a ) ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char (*)[105]’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        2,
        23
      ],
      "mod_code": [
        "if ( a [ i + d ] = ' 1 ' )",
        "char a [ 105 ] [ 105 ] ;",
        "{ }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [105][105]’)"
    },
    {
      "mod_line": [
        6,
        2,
        23,
        16
      ],
      "mod_code": [
        "if ( a [ i + d ] = ' 1 ' )",
        "char a [ 105 ] [ 105 ] ;",
        "{ }",
        "bool f = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [105][105]’)"
    },
    {
      "mod_line": [
        6,
        2,
        23,
        18
      ],
      "mod_code": [
        "if ( a [ i + d ] = ' 1 ' )",
        "char a [ 105 ] [ 105 ] ;",
        "{ }",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [105][105]’)"
    },
    {
      "mod_line": [
        6,
        2,
        16
      ],
      "mod_code": [
        "if ( a [ i + d ] = ' 1 ' )",
        "char a [ 105 ] [ 105 ] ;",
        "bool f = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [105][105]’)"
    },
    {
      "mod_line": [
        6,
        2,
        16,
        18
      ],
      "mod_code": [
        "if ( a [ i + d ] = ' 1 ' )",
        "char a [ 105 ] [ 105 ] ;",
        "bool f = false ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [105][105]’)"
    },
    {
      "mod_line": [
        6,
        2,
        18
      ],
      "mod_code": [
        "if ( a [ i + d ] = ' 1 ' )",
        "char a [ 105 ] [ 105 ] ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [105][105]’)"
    },
    {
      "mod_line": [
        6,
        4,
        23,
        18
      ],
      "mod_code": [
        "if ( a [ i + d ] = ' 1 ' )",
        "gets ( a ) ;",
        "{ }",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        4,
        16,
        18
      ],
      "mod_code": [
        "if ( a [ i + d ] = ' 1 ' )",
        "gets ( a ) ;",
        "bool f = false ;",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        4,
        18
      ],
      "mod_code": [
        "if ( a [ i + d ] = ' 1 ' )",
        "gets ( a ) ;",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        23,
        16,
        18
      ],
      "mod_code": [
        "if ( a [ i + d ] = ' 1 ' )",
        "{ }",
        "bool f = false ;",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        23,
        18
      ],
      "mod_code": [
        "if ( a [ i + d ] = ' 1 ' )",
        "{ }",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        16,
        18
      ],
      "mod_code": [
        "if ( a [ i + d ] = ' 1 ' )",
        "bool f = false ;",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        18
      ],
      "mod_code": [
        "if ( a [ i + d ] = ' 1 ' )",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "char a [ 105 ] [ 105 ] ;",
        "gets ( a ) ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char (*)[105]’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        4,
        23
      ],
      "mod_code": [
        "char a [ 105 ] [ 105 ] ;",
        "gets ( a ) ;",
        "{ }"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char (*)[105]’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        4,
        23,
        16
      ],
      "mod_code": [
        "char a [ 105 ] [ 105 ] ;",
        "gets ( a ) ;",
        "{ }",
        "bool f = false ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char (*)[105]’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        4,
        23,
        18
      ],
      "mod_code": [
        "char a [ 105 ] [ 105 ] ;",
        "gets ( a ) ;",
        "{ }",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char (*)[105]’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        4,
        16
      ],
      "mod_code": [
        "char a [ 105 ] [ 105 ] ;",
        "gets ( a ) ;",
        "bool f = false ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char (*)[105]’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        4,
        16,
        18
      ],
      "mod_code": [
        "char a [ 105 ] [ 105 ] ;",
        "gets ( a ) ;",
        "bool f = false ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char (*)[105]’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        4,
        18
      ],
      "mod_code": [
        "char a [ 105 ] [ 105 ] ;",
        "gets ( a ) ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char (*)[105]’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        23
      ],
      "mod_code": [
        "char a [ 105 ] [ 105 ] ;",
        "{ }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [105][105]’)"
    },
    {
      "mod_line": [
        2,
        23,
        16
      ],
      "mod_code": [
        "char a [ 105 ] [ 105 ] ;",
        "{ }",
        "bool f = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [105][105]’)"
    },
    {
      "mod_line": [
        2,
        23,
        16,
        18
      ],
      "mod_code": [
        "char a [ 105 ] [ 105 ] ;",
        "{ }",
        "bool f = false ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [105][105]’)"
    },
    {
      "mod_line": [
        2,
        23,
        18
      ],
      "mod_code": [
        "char a [ 105 ] [ 105 ] ;",
        "{ }",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [105][105]’)"
    },
    {
      "mod_line": [
        2,
        16
      ],
      "mod_code": [
        "char a [ 105 ] [ 105 ] ;",
        "bool f = false ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [105][105]’)"
    },
    {
      "mod_line": [
        2,
        16,
        18
      ],
      "mod_code": [
        "char a [ 105 ] [ 105 ] ;",
        "bool f = false ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [105][105]’)"
    },
    {
      "mod_line": [
        2,
        18
      ],
      "mod_code": [
        "char a [ 105 ] [ 105 ] ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘char [105][105]’)"
    },
    {
      "mod_line": [
        4,
        23,
        16,
        18
      ],
      "mod_code": [
        "gets ( a ) ;",
        "{ }",
        "bool f = false ;",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        23,
        18
      ],
      "mod_code": [
        "gets ( a ) ;",
        "{ }",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        16,
        18
      ],
      "mod_code": [
        "gets ( a ) ;",
        "bool f = false ;",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        18
      ],
      "mod_code": [
        "gets ( a ) ;",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        16,
        18
      ],
      "mod_code": [
        "{ }",
        "bool f = false ;",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        18
      ],
      "mod_code": [
        "{ }",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        16,
        18
      ],
      "mod_code": [
        "bool f = false ;",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}