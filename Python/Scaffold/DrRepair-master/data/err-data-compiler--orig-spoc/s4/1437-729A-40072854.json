{
  "meta": {
    "index": 1437,
    "hitid": "3BJKPTD2QC6UR8G4JJM1VZQUR4JTRF",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "729A",
    "subid": "40072854"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , i , j , k , x = int",
      "code": "int n , i , j , k , x ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "s = char array of 200",
      "code": "char s [ 200 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "loop while reading n",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "set k to strlen of s",
      "code": "k = strlen ( s ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "for i = 0 to k",
      "code": "for ( i = 0 ; i < k ; i ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if s [ i ] is ' o '",
      "code": "if ( s [ i ] == ' o ' )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "for j = i + 1 to k incrementing j by 2 each time",
      "code": "for ( j = i + 1 ; j < k ; j += 2 )",
      "indent": 4
    },
    {
      "line": 9,
      "text": "if s [ j ] is ' g ' and s [ j + 1 ] is ' o '",
      "code": "if ( s [ j ] == ' g ' && s [ j + 1 ] == ' o ' )",
      "indent": 5
    },
    {
      "line": 10,
      "text": "if j - i is less than 3",
      "code": "if ( ( j - i ) <= 2 )",
      "indent": 6
    },
    {
      "line": 11,
      "text": "set s [ i ] to ' * '",
      "code": "s [ i ] = ' * ' ;",
      "indent": 7
    },
    {
      "line": 12,
      "text": "set s [ j ] to ' * '",
      "code": "s [ j ] = ' * ' ;",
      "indent": 7
    },
    {
      "line": 13,
      "text": "set s [ j + 1 ] to ' * '",
      "code": "s [ j + 1 ] = ' * ' ;",
      "indent": 7
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 6
    },
    {
      "line": 15,
      "text": "set s [ j ] to ' 0 '",
      "code": "s [ j ] = ' 0 ' ;",
      "indent": 7
    },
    {
      "line": 16,
      "text": "set s [ j + 1 ] to ' 0 '",
      "code": "s [ j + 1 ] = ' 0 ' ;",
      "indent": 7
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 6
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 19,
      "text": "set i to j - 1",
      "code": "i = j - 1 ;",
      "indent": 6
    },
    {
      "line": 20,
      "text": "break loop",
      "code": "break ;",
      "indent": 6
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "for i = 0 to k",
      "code": "for ( i = 0 ; i < k ; i ++ )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "if s [ i ] is not ' 0 ' then print s [ i ]",
      "code": "if ( s [ i ] != ' 0 ' ) cout << s [ i ] ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "k = strlen ( k ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        26,
        12,
        14,
        5
      ],
      "mod_code": [
        "if ( s [ i ] != ' 0 ' ) cout << s [ i ] << endl ;",
        "s [ j ] = ' -1 ' ;",
        "else ;",
        "k = strlen ( k ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        12,
        14,
        20
      ],
      "mod_code": [
        "if ( s [ i ] != ' 0 ' ) cout << s [ i ] << endl ;",
        "s [ j ] = ' -1 ' ;",
        "else ;",
        "break break ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        26,
        12,
        5
      ],
      "mod_code": [
        "if ( s [ i ] != ' 0 ' ) cout << s [ i ] << endl ;",
        "s [ j ] = ' -1 ' ;",
        "k = strlen ( k ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        12,
        5,
        16
      ],
      "mod_code": [
        "if ( s [ i ] != ' 0 ' ) cout << s [ i ] << endl ;",
        "s [ j ] = ' -1 ' ;",
        "k = strlen ( k ) ;",
        "s [ j + 1 ] = ' \\0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        12,
        5,
        20
      ],
      "mod_code": [
        "if ( s [ i ] != ' 0 ' ) cout << s [ i ] << endl ;",
        "s [ j ] = ' -1 ' ;",
        "k = strlen ( k ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        12,
        16,
        20
      ],
      "mod_code": [
        "if ( s [ i ] != ' 0 ' ) cout << s [ i ] << endl ;",
        "s [ j ] = ' -1 ' ;",
        "s [ j + 1 ] = ' \\0 ' ;",
        "break break ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        26,
        12,
        20
      ],
      "mod_code": [
        "if ( s [ i ] != ' 0 ' ) cout << s [ i ] << endl ;",
        "s [ j ] = ' -1 ' ;",
        "break break ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        26,
        14,
        5
      ],
      "mod_code": [
        "if ( s [ i ] != ' 0 ' ) cout << s [ i ] << endl ;",
        "else ;",
        "k = strlen ( k ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        14,
        5,
        16
      ],
      "mod_code": [
        "if ( s [ i ] != ' 0 ' ) cout << s [ i ] << endl ;",
        "else ;",
        "k = strlen ( k ) ;",
        "s [ j + 1 ] = ' \\0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        14,
        5,
        20
      ],
      "mod_code": [
        "if ( s [ i ] != ' 0 ' ) cout << s [ i ] << endl ;",
        "else ;",
        "k = strlen ( k ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        14,
        16,
        20
      ],
      "mod_code": [
        "if ( s [ i ] != ' 0 ' ) cout << s [ i ] << endl ;",
        "else ;",
        "s [ j + 1 ] = ' \\0 ' ;",
        "break break ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        26,
        14,
        20
      ],
      "mod_code": [
        "if ( s [ i ] != ' 0 ' ) cout << s [ i ] << endl ;",
        "else ;",
        "break break ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        26,
        5
      ],
      "mod_code": [
        "if ( s [ i ] != ' 0 ' ) cout << s [ i ] << endl ;",
        "k = strlen ( k ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        5,
        16
      ],
      "mod_code": [
        "if ( s [ i ] != ' 0 ' ) cout << s [ i ] << endl ;",
        "k = strlen ( k ) ;",
        "s [ j + 1 ] = ' \\0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        5,
        16,
        20
      ],
      "mod_code": [
        "if ( s [ i ] != ' 0 ' ) cout << s [ i ] << endl ;",
        "k = strlen ( k ) ;",
        "s [ j + 1 ] = ' \\0 ' ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        5,
        20
      ],
      "mod_code": [
        "if ( s [ i ] != ' 0 ' ) cout << s [ i ] << endl ;",
        "k = strlen ( k ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        16,
        20
      ],
      "mod_code": [
        "if ( s [ i ] != ' 0 ' ) cout << s [ i ] << endl ;",
        "s [ j + 1 ] = ' \\0 ' ;",
        "break break ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        26,
        20
      ],
      "mod_code": [
        "if ( s [ i ] != ' 0 ' ) cout << s [ i ] << endl ;",
        "break break ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        14,
        5
      ],
      "mod_code": [
        "s [ j ] = ' -1 ' ;",
        "else ;",
        "k = strlen ( k ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        14,
        5,
        16
      ],
      "mod_code": [
        "s [ j ] = ' -1 ' ;",
        "else ;",
        "k = strlen ( k ) ;",
        "s [ j + 1 ] = ' \\0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        14,
        5,
        20
      ],
      "mod_code": [
        "s [ j ] = ' -1 ' ;",
        "else ;",
        "k = strlen ( k ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        14,
        16,
        20
      ],
      "mod_code": [
        "s [ j ] = ' -1 ' ;",
        "else ;",
        "s [ j + 1 ] = ' \\0 ' ;",
        "break break ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        14,
        20
      ],
      "mod_code": [
        "s [ j ] = ' -1 ' ;",
        "else ;",
        "break break ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "s [ j ] = ' -1 ' ;",
        "k = strlen ( k ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        5,
        16
      ],
      "mod_code": [
        "s [ j ] = ' -1 ' ;",
        "k = strlen ( k ) ;",
        "s [ j + 1 ] = ' \\0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        5,
        16,
        20
      ],
      "mod_code": [
        "s [ j ] = ' -1 ' ;",
        "k = strlen ( k ) ;",
        "s [ j + 1 ] = ' \\0 ' ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        5,
        20
      ],
      "mod_code": [
        "s [ j ] = ' -1 ' ;",
        "k = strlen ( k ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        16,
        20
      ],
      "mod_code": [
        "s [ j ] = ' -1 ' ;",
        "s [ j + 1 ] = ' \\0 ' ;",
        "break break ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        12,
        20
      ],
      "mod_code": [
        "s [ j ] = ' -1 ' ;",
        "break break ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        5
      ],
      "mod_code": [
        "else ;",
        "k = strlen ( k ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        5,
        16
      ],
      "mod_code": [
        "else ;",
        "k = strlen ( k ) ;",
        "s [ j + 1 ] = ' \\0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        5,
        16,
        20
      ],
      "mod_code": [
        "else ;",
        "k = strlen ( k ) ;",
        "s [ j + 1 ] = ' \\0 ' ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        5,
        20
      ],
      "mod_code": [
        "else ;",
        "k = strlen ( k ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        16,
        20
      ],
      "mod_code": [
        "else ;",
        "s [ j + 1 ] = ' \\0 ' ;",
        "break break ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        20
      ],
      "mod_code": [
        "else ;",
        "break break ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        16
      ],
      "mod_code": [
        "k = strlen ( k ) ;",
        "s [ j + 1 ] = ' \\0 ' ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        16,
        20
      ],
      "mod_code": [
        "k = strlen ( k ) ;",
        "s [ j + 1 ] = ' \\0 ' ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        20
      ],
      "mod_code": [
        "k = strlen ( k ) ;",
        "break break ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘const char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        20
      ],
      "mod_code": [
        "s [ j + 1 ] = ' \\0 ' ;",
        "break break ;"
      ],
      "err_line": 20,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}