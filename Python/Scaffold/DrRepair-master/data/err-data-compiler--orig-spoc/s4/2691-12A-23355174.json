{
  "meta": {
    "index": 2691,
    "hitid": "3RHLQY6EDTYG9DI9MHQ9I2XYV22D4J",
    "workerid": "AIWEXPJAU66D9",
    "probid": "12A",
    "subid": "23355174"
  },
  "lines": [
    {
      "line": 0,
      "text": "set constant long long oo to 2 * 1000 * 1000 * 1000",
      "code": "const long long oo = 2 * 1000 * 1000 * 1000 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "set constant integer _cnt to 1000 * 1000",
      "code": "const int _cnt = 1000 * 1000 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "set constant integer _p to 1000 * 1000 * 1000 + 7",
      "code": "const int _p = 1000 * 1000 * 1000 + 7 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "define method o with long long argument x",
      "code": "long long o ( long long x )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "return x % _p",
      "code": "return x % _p ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "in the function gcd with integer arguments a and b that returns integer",
      "code": "int gcd ( int a , int b )",
      "indent": 0
    },
    {
      "line": 7,
      "text": "return gcd ( b , a % b ) if b = 1 , otherwise return a",
      "code": "return b ? gcd ( b , a % b ) : a ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "in the function lcm with integer arguments a and b that returns integer",
      "code": "int lcm ( int a , int b )",
      "indent": 0
    },
    {
      "line": 10,
      "text": "return a * b / gcd of a and b",
      "code": "return a * b / gcd ( a , b ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 12,
      "text": "function file_put",
      "code": "void file_put ( )",
      "indent": 0
    },
    {
      "line": 13,
      "text": "open file \" filename . in \" for reading",
      "code": "freopen ( \" filename.in \" , \" r \" , stdin ) ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "open \" filename . out \" for writing",
      "code": "freopen ( \" filename.out \" , \" w \" , stdout ) ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 16,
      "text": "let st be an array of strings of size 3",
      "code": "string st [ 3 ] ;",
      "indent": 0
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 18,
      "text": "for i = 0 to 3 exclusive read line into st [ i ]",
      "code": "for ( int i = 0 ; i < 3 ; i ++ ) getline ( cin , st [ i ] ) ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for integer i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "for j = 0 to 3 exclusive",
      "code": "for ( int j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if st [ i ] [ j ] ! = st [ 2 - i ] [ 2 - j ]",
      "code": "if ( st [ i ] [ j ] != st [ 2 - i ] [ 2 - j ] )",
      "indent": 3
    },
    {
      "line": 22,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 25,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "return b == 1 ? gcd ( b , a % b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "const _p = 1000 * 1000 * 1000 + 7 ;"
      ],
      "err_line": 2,
      "err_msg": "‘_p’ does not name a type"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "return b == 1 ) return gcd ( b , a % b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 10,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "string a [ 3 ] ;"
      ],
      "err_line": 18,
      "err_msg": "‘st’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 20,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "return b == 1 ? gcd ( b , a % b ) ;",
        "int gcd ( int a , int b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        6,
        9
      ],
      "mod_code": [
        "return b == 1 ? gcd ( b , a % b ) ;",
        "int gcd ( int a , int b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        6,
        9,
        20
      ],
      "mod_code": [
        "return b == 1 ? gcd ( b , a % b ) ;",
        "int gcd ( int a , int b ) ;",
        "int lcm ( int a , int b ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        6,
        9,
        10
      ],
      "mod_code": [
        "return b == 1 ? gcd ( b , a % b ) ;",
        "int gcd ( int a , int b ) ;",
        "int lcm ( int a , int b ) ;",
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        6,
        20
      ],
      "mod_code": [
        "return b == 1 ? gcd ( b , a % b ) ;",
        "int gcd ( int a , int b ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        6,
        20,
        10
      ],
      "mod_code": [
        "return b == 1 ? gcd ( b , a % b ) ;",
        "int gcd ( int a , int b ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        6,
        10
      ],
      "mod_code": [
        "return b == 1 ? gcd ( b , a % b ) ;",
        "int gcd ( int a , int b ) ;",
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "return b == 1 ? gcd ( b , a % b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        9,
        20
      ],
      "mod_code": [
        "return b == 1 ? gcd ( b , a % b ) ;",
        "int lcm ( int a , int b ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        9,
        20,
        10
      ],
      "mod_code": [
        "return b == 1 ? gcd ( b , a % b ) ;",
        "int lcm ( int a , int b ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        9,
        10
      ],
      "mod_code": [
        "return b == 1 ? gcd ( b , a % b ) ;",
        "int lcm ( int a , int b ) ;",
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        20
      ],
      "mod_code": [
        "return b == 1 ? gcd ( b , a % b ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        20,
        10
      ],
      "mod_code": [
        "return b == 1 ? gcd ( b , a % b ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "return b == 1 ? gcd ( b , a % b ) ;",
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int lcm ( int a , int b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        9,
        20
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int lcm ( int a , int b ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        9,
        20,
        7
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int lcm ( int a , int b ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "return b == 1 ) return gcd ( b , a % b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        9,
        20,
        10
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int lcm ( int a , int b ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        9,
        7
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int lcm ( int a , int b ) ;",
        "return b == 1 ) return gcd ( b , a % b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        9,
        7,
        10
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int lcm ( int a , int b ) ;",
        "return b == 1 ) return gcd ( b , a % b ) ;",
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        9,
        10
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "int lcm ( int a , int b ) ;",
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        20
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        20,
        7
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "return b == 1 ) return gcd ( b , a % b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        20,
        7,
        10
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "return b == 1 ) return gcd ( b , a % b ) ;",
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        20,
        10
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return b == 1 ) return gcd ( b , a % b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        7,
        10
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return b == 1 ) return gcd ( b , a % b ) ;",
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "int gcd ( int a , int b ) ;",
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        20
      ],
      "mod_code": [
        "int lcm ( int a , int b ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        20,
        7
      ],
      "mod_code": [
        "int lcm ( int a , int b ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "return b == 1 ) return gcd ( b , a % b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        20,
        7,
        10
      ],
      "mod_code": [
        "int lcm ( int a , int b ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "return b == 1 ) return gcd ( b , a % b ) ;",
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        20,
        10
      ],
      "mod_code": [
        "int lcm ( int a , int b ) ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "int lcm ( int a , int b ) ;",
        "return b == 1 ) return gcd ( b , a % b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        7,
        10
      ],
      "mod_code": [
        "int lcm ( int a , int b ) ;",
        "return b == 1 ) return gcd ( b , a % b ) ;",
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "int lcm ( int a , int b ) ;",
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        20,
        7
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )",
        "return b == 1 ) return gcd ( b , a % b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        7,
        10
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )",
        "return b == 1 ) return gcd ( b , a % b ) ;",
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        20,
        10
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )",
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 10,
      "err_msg": "too few arguments to function ‘int gcd(int, int)’"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "return b == 1 ) return gcd ( b , a % b ) ;",
        "return a * b / gcd ( a * b ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘)’ token"
    }
  ]
}