{
  "meta": {
    "index": 2535,
    "hitid": "3O2Y2UIUCQOYLZL8YF8FDJPF53OKFC",
    "workerid": "ACI8PUCF5OPDC",
    "probid": "822A",
    "subid": "42129903"
  },
  "lines": [
    {
      "line": 0,
      "text": "define function fact with long long as argument and returns a long long",
      "code": "long long fact ( long long x )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if x less than or equal to 1 then",
      "code": "if ( x <= 1 )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return 1 to the calling statement",
      "code": "return 1 ;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return x * return value of fact ( x - 1 ) to the calling statement",
      "code": "return x * fact ( x - 1 ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "create long long a , b",
      "code": "long long a , b ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read a , b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if a greater than b then",
      "code": "if ( a > b )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "call fact ( b ) and print the return value",
      "code": "cout << fact ( b ) << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 12,
      "text": "call fact ( a ) and print the return value",
      "code": "cout << fact ( a ) << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "long long fact ( long long ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "while ( x <= 1 )"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "return fact * fact ( x - 1 ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int(long long int)’ and ‘long long int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "cout << 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        11
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "cout << 1 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        11,
        3
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "cout << 1 ;",
        "else else",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        11,
        12
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "cout << 1 ;",
        "else else",
        "cout << fact ( a ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        11,
        1
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "cout << 1 ;",
        "else else",
        "while ( x <= 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        3
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "cout << 1 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        12
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "cout << 1 ;",
        "else else",
        "cout << fact ( a ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        3,
        1
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "cout << 1 ;",
        "else else",
        "while ( x <= 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        12
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "cout << 1 ;",
        "cout << fact ( a ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        12,
        1
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "cout << 1 ;",
        "cout << fact ( a ) ;",
        "while ( x <= 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        2,
        1
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "cout << 1 ;",
        "while ( x <= 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11,
        3
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "else else",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11,
        3,
        12
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "else else",
        "else else",
        "cout << fact ( a ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11,
        3,
        1
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "else else",
        "else else",
        "while ( x <= 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11,
        12
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "else else",
        "cout << fact ( a ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11,
        12,
        1
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "else else",
        "cout << fact ( a ) ;",
        "while ( x <= 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        11,
        1
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "else else",
        "while ( x <= 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        12
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "else else",
        "cout << fact ( a ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        12,
        1
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "else else",
        "cout << fact ( a ) ;",
        "while ( x <= 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        3,
        1
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "else else",
        "while ( x <= 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "cout << fact ( a ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        12,
        1
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "cout << fact ( a ) ;",
        "while ( x <= 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "long long fact ( long long ) ;",
        "while ( x <= 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "cout << 1 ;",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        11,
        3
      ],
      "mod_code": [
        "cout << 1 ;",
        "else else",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        11,
        3,
        12
      ],
      "mod_code": [
        "cout << 1 ;",
        "else else",
        "else else",
        "cout << fact ( a ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        11,
        3,
        1
      ],
      "mod_code": [
        "cout << 1 ;",
        "else else",
        "else else",
        "while ( x <= 1 )"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        11,
        12
      ],
      "mod_code": [
        "cout << 1 ;",
        "else else",
        "cout << fact ( a ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        11,
        12,
        1
      ],
      "mod_code": [
        "cout << 1 ;",
        "else else",
        "cout << fact ( a ) ;",
        "while ( x <= 1 )"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        11,
        1
      ],
      "mod_code": [
        "cout << 1 ;",
        "else else",
        "while ( x <= 1 )"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "cout << 1 ;",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        3,
        12
      ],
      "mod_code": [
        "cout << 1 ;",
        "else else",
        "cout << fact ( a ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        3,
        12,
        1
      ],
      "mod_code": [
        "cout << 1 ;",
        "else else",
        "cout << fact ( a ) ;",
        "while ( x <= 1 )"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        3,
        1
      ],
      "mod_code": [
        "cout << 1 ;",
        "else else",
        "while ( x <= 1 )"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        12,
        1
      ],
      "mod_code": [
        "cout << 1 ;",
        "cout << fact ( a ) ;",
        "while ( x <= 1 )"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "cout << 1 ;",
        "while ( x <= 1 )"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "else else",
        "else else"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        3,
        12
      ],
      "mod_code": [
        "else else",
        "else else",
        "cout << fact ( a ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        3,
        12,
        1
      ],
      "mod_code": [
        "else else",
        "else else",
        "cout << fact ( a ) ;",
        "while ( x <= 1 )"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11,
        3,
        1
      ],
      "mod_code": [
        "else else",
        "else else",
        "while ( x <= 1 )"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "else else",
        "cout << fact ( a ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        12,
        1
      ],
      "mod_code": [
        "else else",
        "cout << fact ( a ) ;",
        "while ( x <= 1 )"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "else else",
        "while ( x <= 1 )"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "else else",
        "cout << fact ( a ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        12,
        1
      ],
      "mod_code": [
        "else else",
        "cout << fact ( a ) ;",
        "while ( x <= 1 )"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "else else",
        "while ( x <= 1 )"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        12,
        1
      ],
      "mod_code": [
        "cout << fact ( a ) ;",
        "while ( x <= 1 )"
      ],
      "err_line": 3,
      "err_msg": "‘else’ without a previous ‘if’"
    }
  ]
}