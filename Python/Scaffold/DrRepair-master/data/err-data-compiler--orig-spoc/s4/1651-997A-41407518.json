{
  "meta": {
    "index": 1651,
    "hitid": "3OQQD2WO8I0CZSFREHM1ZUL5A9TI3P",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "997A",
    "subid": "41407518"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , x , y = long long",
      "code": "long long n , x , y ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , x , y",
      "code": "cin >> n >> x >> y ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let len = length of s be an int",
      "code": "int len = s . length ( ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "sum = int = 0",
      "code": "int sum = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to len exclusive",
      "code": "for ( int i = 0 ; i < len - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if s at i = ' 0 ' and s at i + 1 is ' 1 '",
      "code": "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' ) sum ++ ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if s [ len - 1 ] = ' 0 '",
      "code": "if ( s [ len - 1 ] == ' 0 ' ) sum ++ ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "res = 0 = long long",
      "code": "long long res = 0 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if sum isn ' t 0",
      "code": "if ( sum != 0 )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if x < y",
      "code": "if ( x < y )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set res = ( sum - 1 ) * x + y",
      "code": "res = ( sum - 1 ) * x + y ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set res to sum * y",
      "code": "res = sum * y ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print res",
      "code": "cout << res << endl ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( s [ len - 1 ] == ' 0 ' )"
      ],
      "err_line": 14,
      "err_msg": "‘res’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < len ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 == ' 1 ' )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( s [ len - 1 ] = ' 0 ' )"
      ],
      "err_line": 14,
      "err_msg": "‘res’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )",
        "if ( s [ len - 1 ] == ' 0 ' )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        10,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )",
        "if ( s [ len - 1 ] == ' 0 ' )",
        "cin >> n >> x , y ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        10,
        2,
        16
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )",
        "if ( s [ len - 1 ] == ' 0 ' )",
        "cin >> n >> x , y ;",
        "res *= y ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        10,
        2,
        19
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )",
        "if ( s [ len - 1 ] == ' 0 ' )",
        "cin >> n >> x , y ;",
        "cout << res ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        10,
        16
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )",
        "if ( s [ len - 1 ] == ' 0 ' )",
        "res *= y ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        10,
        16,
        19
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )",
        "if ( s [ len - 1 ] == ' 0 ' )",
        "res *= y ;",
        "cout << res ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        10,
        19
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )",
        "if ( s [ len - 1 ] == ' 0 ' )",
        "cout << res ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )",
        "if ( s [ len - 1 ] = ' 0 ' )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        10,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )",
        "if ( s [ len - 1 ] = ' 0 ' )",
        "cin >> n >> x , y ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        10,
        2,
        16
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )",
        "if ( s [ len - 1 ] = ' 0 ' )",
        "cin >> n >> x , y ;",
        "res *= y ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        10,
        2,
        19
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )",
        "if ( s [ len - 1 ] = ' 0 ' )",
        "cin >> n >> x , y ;",
        "cout << res ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        10,
        16
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )",
        "if ( s [ len - 1 ] = ' 0 ' )",
        "res *= y ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        10,
        16,
        19
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )",
        "if ( s [ len - 1 ] = ' 0 ' )",
        "res *= y ;",
        "cout << res ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        10,
        19
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )",
        "if ( s [ len - 1 ] = ' 0 ' )",
        "cout << res ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )",
        "cin >> n >> x , y ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        2,
        16
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )",
        "cin >> n >> x , y ;",
        "res *= y ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        2,
        16,
        19
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )",
        "cin >> n >> x , y ;",
        "res *= y ;",
        "cout << res ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        2,
        19
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )",
        "cin >> n >> x , y ;",
        "cout << res ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        16
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )",
        "res *= y ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        16,
        19
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )",
        "res *= y ;",
        "cout << res ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        19
      ],
      "mod_code": [
        "if ( s [ i ] == ' 0 ' && s [ i + 1 ] == ' 1 ' )",
        "cout << res ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "if ( s [ len - 1 ] == ' 0 ' )",
        "cin >> n >> x , y ;"
      ],
      "err_line": 14,
      "err_msg": "‘res’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        2,
        16
      ],
      "mod_code": [
        "if ( s [ len - 1 ] == ' 0 ' )",
        "cin >> n >> x , y ;",
        "res *= y ;"
      ],
      "err_line": 14,
      "err_msg": "‘res’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        2,
        16,
        19
      ],
      "mod_code": [
        "if ( s [ len - 1 ] == ' 0 ' )",
        "cin >> n >> x , y ;",
        "res *= y ;",
        "cout << res ;"
      ],
      "err_line": 14,
      "err_msg": "‘res’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        2,
        19
      ],
      "mod_code": [
        "if ( s [ len - 1 ] == ' 0 ' )",
        "cin >> n >> x , y ;",
        "cout << res ;"
      ],
      "err_line": 14,
      "err_msg": "‘res’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        16
      ],
      "mod_code": [
        "if ( s [ len - 1 ] == ' 0 ' )",
        "res *= y ;"
      ],
      "err_line": 14,
      "err_msg": "‘res’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        16,
        19
      ],
      "mod_code": [
        "if ( s [ len - 1 ] == ' 0 ' )",
        "res *= y ;",
        "cout << res ;"
      ],
      "err_line": 14,
      "err_msg": "‘res’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        19
      ],
      "mod_code": [
        "if ( s [ len - 1 ] == ' 0 ' )",
        "cout << res ;"
      ],
      "err_line": 14,
      "err_msg": "‘res’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "if ( s [ len - 1 ] = ' 0 ' )",
        "cin >> n >> x , y ;"
      ],
      "err_line": 14,
      "err_msg": "‘res’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        2,
        16
      ],
      "mod_code": [
        "if ( s [ len - 1 ] = ' 0 ' )",
        "cin >> n >> x , y ;",
        "res *= y ;"
      ],
      "err_line": 14,
      "err_msg": "‘res’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        2,
        16,
        19
      ],
      "mod_code": [
        "if ( s [ len - 1 ] = ' 0 ' )",
        "cin >> n >> x , y ;",
        "res *= y ;",
        "cout << res ;"
      ],
      "err_line": 14,
      "err_msg": "‘res’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        2,
        19
      ],
      "mod_code": [
        "if ( s [ len - 1 ] = ' 0 ' )",
        "cin >> n >> x , y ;",
        "cout << res ;"
      ],
      "err_line": 14,
      "err_msg": "‘res’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        16
      ],
      "mod_code": [
        "if ( s [ len - 1 ] = ' 0 ' )",
        "res *= y ;"
      ],
      "err_line": 14,
      "err_msg": "‘res’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        16,
        19
      ],
      "mod_code": [
        "if ( s [ len - 1 ] = ' 0 ' )",
        "res *= y ;",
        "cout << res ;"
      ],
      "err_line": 14,
      "err_msg": "‘res’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        19
      ],
      "mod_code": [
        "if ( s [ len - 1 ] = ' 0 ' )",
        "cout << res ;"
      ],
      "err_line": 14,
      "err_msg": "‘res’ was not declared in this scope"
    }
  ]
}