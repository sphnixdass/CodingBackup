{
  "meta": {
    "index": 1393,
    "hitid": "3E9ZFLPWOYMOFQM5Y6TP6AA9H4VXI5",
    "workerid": "A1AYVATMT88U1W",
    "probid": "876A",
    "subid": "47022616"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , a , b , c be integers , t = array of integers of length 4",
      "code": "int n , a , b , c , t [ 4 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , a , b , c",
      "code": "cin >> n >> a >> b >> c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "t [ 1 ] = 3 if a is greater than b else t [ 1 ] = 2",
      "code": "t [ 1 ] = a > b ? 3 : 2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "t [ 3 ] = 2 if b is greater than c else t [ 3 ] = 1",
      "code": "t [ 3 ] = b > c ? 2 : 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "t [ 2 ] = 3 if a is greater than c else t [ 2 ] = 1",
      "code": "t [ 2 ] = a > c ? 3 : 1 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "let time , sum , z be integers with time = 1 , sum = 0 , z = 1",
      "code": "int time = 1 , sum = 0 , z = 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for time is less than n , increment time by 1",
      "code": "for ( ; time < n ; time ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if z is equal to 1",
      "code": "if ( z == 1 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if t [ z ] is equal to 2",
      "code": "if ( t [ z ] == 2 )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "increment sum by a",
      "code": "sum += a ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "z is equal to 2",
      "code": "z = 2 ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "else if t [ z ] is equal to 3",
      "code": "else if ( t [ z ] == 3 )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment sum by b",
      "code": "sum += b ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "z is equal to 3",
      "code": "z = 3 ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 16,
      "text": "else if z is equal to 2",
      "code": "else if ( z == 2 )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if t [ z ] is equal to 1",
      "code": "if ( t [ z ] == 1 )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "{",
      "indent": 4
    },
    {
      "line": 19,
      "text": "increment sum by a",
      "code": "sum += a ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "z is equal to 1",
      "code": "z = 1 ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 22,
      "text": "else do the following",
      "code": "else",
      "indent": 3
    },
    {
      "line": 23,
      "text": "increment sum by c",
      "code": "sum += c ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "z is equal to 3",
      "code": "z = 3 ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 26,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 27,
      "text": "if t [ z ] is equal to 1",
      "code": "if ( t [ z ] == 1 )",
      "indent": 3
    },
    {
      "line": 28,
      "text": "increment sum by b",
      "code": "sum += b ;",
      "indent": 4
    },
    {
      "line": 29,
      "text": "z is equal to 1",
      "code": "z = 1 ;",
      "indent": 4
    },
    {
      "line": 30,
      "text": "else do the following",
      "code": "else",
      "indent": 3
    },
    {
      "line": 31,
      "text": "increment sum by c",
      "code": "sum += c ;",
      "indent": 4
    },
    {
      "line": 32,
      "text": "z is equal to 2",
      "code": "z = 2 ;",
      "indent": 4
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 36,
      "text": "print sum and newline",
      "code": "cout << sum << endl ;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , a , b , c , t , t ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int t’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int time = 1 , sum = 0 , z = 1 , z ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( z == l )"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "z to ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 22,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "z to ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 1 ] = 3 ? 3 : t [ 1 ] = 2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 1 ] = 3 ? 3 : t [ 1 ] = 2 ;",
        "t [ 3 ] = 2 ? 2 : t [ 3 ] = 2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        5
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 1 ] = 3 ? 3 : t [ 1 ] = 2 ;",
        "t [ 3 ] = 2 ? 2 : t [ 3 ] = 2 ;",
        "t [ 2 ] = 3 ? 3 : t [ 2 ] == 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        7
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 1 ] = 3 ? 3 : t [ 1 ] = 2 ;",
        "t [ 3 ] = 2 ? 2 : t [ 3 ] = 2 ;",
        "for ( ; time < n ; time ++ ) { time += 1 ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        3,
        4,
        30
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 1 ] = 3 ? 3 : t [ 1 ] = 2 ;",
        "t [ 3 ] = 2 ? 2 : t [ 3 ] = 2 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        3,
        5
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 1 ] = 3 ? 3 : t [ 1 ] = 2 ;",
        "t [ 2 ] = 3 ? 3 : t [ 2 ] == 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        7
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 1 ] = 3 ? 3 : t [ 1 ] = 2 ;",
        "t [ 2 ] = 3 ? 3 : t [ 2 ] == 1 ;",
        "for ( ; time < n ; time ++ ) { time += 1 ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        30
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 1 ] = 3 ? 3 : t [ 1 ] = 2 ;",
        "t [ 2 ] = 3 ? 3 : t [ 2 ] == 1 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        3,
        7
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 1 ] = 3 ? 3 : t [ 1 ] = 2 ;",
        "for ( ; time < n ; time ++ ) { time += 1 ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        3,
        7,
        30
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 1 ] = 3 ? 3 : t [ 1 ] = 2 ;",
        "for ( ; time < n ; time ++ ) { time += 1 ; }",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        3,
        30
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 1 ] = 3 ? 3 : t [ 1 ] = 2 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 3 ] = 2 ? 2 : t [ 3 ] = 2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        4,
        5
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 3 ] = 2 ? 2 : t [ 3 ] = 2 ;",
        "t [ 2 ] = 3 ? 3 : t [ 2 ] == 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        7
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 3 ] = 2 ? 2 : t [ 3 ] = 2 ;",
        "t [ 2 ] = 3 ? 3 : t [ 2 ] == 1 ;",
        "for ( ; time < n ; time ++ ) { time += 1 ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        30
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 3 ] = 2 ? 2 : t [ 3 ] = 2 ;",
        "t [ 2 ] = 3 ? 3 : t [ 2 ] == 1 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        4,
        7
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 3 ] = 2 ? 2 : t [ 3 ] = 2 ;",
        "for ( ; time < n ; time ++ ) { time += 1 ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        4,
        7,
        30
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 3 ] = 2 ? 2 : t [ 3 ] = 2 ;",
        "for ( ; time < n ; time ++ ) { time += 1 ; }",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        4,
        30
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 3 ] = 2 ? 2 : t [ 3 ] = 2 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 2 ] = 3 ? 3 : t [ 2 ] == 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        5,
        7
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 2 ] = 3 ? 3 : t [ 2 ] == 1 ;",
        "for ( ; time < n ; time ++ ) { time += 1 ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        5,
        7,
        30
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 2 ] = 3 ? 3 : t [ 2 ] == 1 ;",
        "for ( ; time < n ; time ++ ) { time += 1 ; }",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        5,
        30
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "t [ 2 ] = 3 ? 3 : t [ 2 ] == 1 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "for ( ; time < n ; time ++ ) { time += 1 ; }"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        7,
        30
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "for ( ; time < n ; time ++ ) { time += 1 ; }",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        1,
        30
      ],
      "mod_code": [
        "int n , a [ 4 ] , a [ 4 ] , c [ 4 ] ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int a [4]’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        30
      ],
      "mod_code": [
        "t [ 1 ] = 3 ? 3 : t [ 1 ] = 2 ;",
        "t [ 3 ] = 2 ? 2 : t [ 3 ] = 2 ;",
        "t [ 2 ] = 3 ? 3 : t [ 2 ] == 1 ;",
        "else else"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        30
      ],
      "mod_code": [
        "t [ 1 ] = 3 ? 3 : t [ 1 ] = 2 ;",
        "t [ 3 ] = 2 ? 2 : t [ 3 ] = 2 ;",
        "for ( ; time < n ; time ++ ) { time += 1 ; }",
        "else else"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        4,
        30
      ],
      "mod_code": [
        "t [ 1 ] = 3 ? 3 : t [ 1 ] = 2 ;",
        "t [ 3 ] = 2 ? 2 : t [ 3 ] = 2 ;",
        "else else"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        30
      ],
      "mod_code": [
        "t [ 1 ] = 3 ? 3 : t [ 1 ] = 2 ;",
        "t [ 2 ] = 3 ? 3 : t [ 2 ] == 1 ;",
        "for ( ; time < n ; time ++ ) { time += 1 ; }",
        "else else"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        5,
        30
      ],
      "mod_code": [
        "t [ 1 ] = 3 ? 3 : t [ 1 ] = 2 ;",
        "t [ 2 ] = 3 ? 3 : t [ 2 ] == 1 ;",
        "else else"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        7,
        30
      ],
      "mod_code": [
        "t [ 1 ] = 3 ? 3 : t [ 1 ] = 2 ;",
        "for ( ; time < n ; time ++ ) { time += 1 ; }",
        "else else"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        30
      ],
      "mod_code": [
        "t [ 1 ] = 3 ? 3 : t [ 1 ] = 2 ;",
        "else else"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        30
      ],
      "mod_code": [
        "t [ 3 ] = 2 ? 2 : t [ 3 ] = 2 ;",
        "t [ 2 ] = 3 ? 3 : t [ 2 ] == 1 ;",
        "for ( ; time < n ; time ++ ) { time += 1 ; }",
        "else else"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        5,
        30
      ],
      "mod_code": [
        "t [ 3 ] = 2 ? 2 : t [ 3 ] = 2 ;",
        "t [ 2 ] = 3 ? 3 : t [ 2 ] == 1 ;",
        "else else"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        7,
        30
      ],
      "mod_code": [
        "t [ 3 ] = 2 ? 2 : t [ 3 ] = 2 ;",
        "for ( ; time < n ; time ++ ) { time += 1 ; }",
        "else else"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        30
      ],
      "mod_code": [
        "t [ 3 ] = 2 ? 2 : t [ 3 ] = 2 ;",
        "else else"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        7,
        30
      ],
      "mod_code": [
        "t [ 2 ] = 3 ? 3 : t [ 2 ] == 1 ;",
        "for ( ; time < n ; time ++ ) { time += 1 ; }",
        "else else"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        30
      ],
      "mod_code": [
        "t [ 2 ] = 3 ? 3 : t [ 2 ] == 1 ;",
        "else else"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        30
      ],
      "mod_code": [
        "for ( ; time < n ; time ++ ) { time += 1 ; }",
        "else else"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}