{
  "meta": {
    "index": 964,
    "hitid": "3N5YJ55YXGX4XEP3KCE3RAVS2ICANQ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "275A",
    "subid": "48292790"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare 2d arrays of integers a and b with size 5 by 5",
      "code": "int a [ 5 ] [ 5 ] , b [ 5 ] [ 5 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "for integer i = 1 to 3 inclusive",
      "code": "for ( int i = 1 ; i <= 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for integer j from 1 to 3 inclusive",
      "code": "for ( int j = 1 ; j <= 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 4,
      "text": "read a [ i ] [ j ]",
      "code": "cin >> a [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 5,
      "text": "change b [ i ] [ j ] to 1",
      "code": "b [ i ] [ j ] = 1 ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for i from 1 to 3 inclusive",
      "code": "for ( int i = 1 ; i <= 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for j = 1 to 3 inclusive",
      "code": "for ( int j = 1 ; j <= 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if a [ i ] [ j ] modulo 2 = 1",
      "code": "if ( a [ i ] [ j ] % 2 == 1 )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if b [ i ] [ j ] = 1",
      "code": "if ( b [ i ] [ j ] == 1 )",
      "indent": 4
    },
    {
      "line": 11,
      "text": "set b [ i ] [ j ] to 0",
      "code": "b [ i ] [ j ] = 0 ;",
      "indent": 5
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 13,
      "text": "assign 1 to b [ i ] [ j ]",
      "code": "b [ i ] [ j ] = 1 ;",
      "indent": 5
    },
    {
      "line": 14,
      "text": "if j is less than 3",
      "code": "if ( j < 3 )",
      "indent": 4
    },
    {
      "line": 15,
      "text": "if b [ i ] [ j + 1 ] is equal to 1",
      "code": "if ( b [ i ] [ j + 1 ] == 1 )",
      "indent": 5
    },
    {
      "line": 16,
      "text": "assign 0 to b [ i ] [ j + 1 ]",
      "code": "b [ i ] [ j + 1 ] = 0 ;",
      "indent": 6
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 18,
      "text": "assign 1 to b [ i ] [ j + 1 ]",
      "code": "b [ i ] [ j + 1 ] = 1 ;",
      "indent": 6
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 20,
      "text": "if i is less than 3",
      "code": "if ( i < 3 )",
      "indent": 4
    },
    {
      "line": 21,
      "text": "if b [ i + 1 ] [ j ] is equal to 1",
      "code": "if ( b [ i + 1 ] [ j ] == 1 )",
      "indent": 5
    },
    {
      "line": 22,
      "text": "assign 0 to b [ i + 1 ] [ j ]",
      "code": "b [ i + 1 ] [ j ] = 0 ;",
      "indent": 6
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 24,
      "text": "assign 1 to b [ i + 1 ] [ j ]",
      "code": "b [ i + 1 ] [ j ] = 1 ;",
      "indent": 6
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 26,
      "text": "if j is greater than 1",
      "code": "if ( j > 1 )",
      "indent": 4
    },
    {
      "line": 27,
      "text": "if b [ i ] [ j - 1 ] = 1",
      "code": "if ( b [ i ] [ j - 1 ] == 1 )",
      "indent": 5
    },
    {
      "line": 28,
      "text": "assign 0 to b [ i ] [ j - 1 ]",
      "code": "b [ i ] [ j - 1 ] = 0 ;",
      "indent": 6
    },
    {
      "line": 29,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 30,
      "text": "assign 1 to b [ i ] [ j - 1 ]",
      "code": "b [ i ] [ j - 1 ] = 1 ;",
      "indent": 6
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 32,
      "text": "if i is greater than 1",
      "code": "if ( i > 1 )",
      "indent": 4
    },
    {
      "line": 33,
      "text": "if b [ i - 1 ] [ j ] = 1",
      "code": "if ( b [ i - 1 ] [ j ] == 1 )",
      "indent": 5
    },
    {
      "line": 34,
      "text": "assign 0 to b [ i - 1 ] [ j ]",
      "code": "b [ i - 1 ] [ j ] = 0 ;",
      "indent": 6
    },
    {
      "line": 35,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 36,
      "text": "assign 1 to b [ i - 1 ] [ j ]",
      "code": "b [ i - 1 ] [ j ] = 1 ;",
      "indent": 6
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 39,
      "text": "for i = 1 to 3 inclusive",
      "code": "for ( int i = 1 ; i <= 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 40,
      "text": "for j = 1 to 3 inclusive , print b [ i ] [ j ]",
      "code": "for ( int j = 1 ; j <= 3 ; j ++ ) cout << b [ i ] [ j ] ;",
      "indent": 2
    },
    {
      "line": 41,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int a [ 5 ] , a [ 5 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int a [5]’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 3 ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( j = 1 ; j <= 3 ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "char b [ i ] [ j ] = 1 ;"
      ],
      "err_line": 13,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "char b [ i ] [ j + 1 ] = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "char b [ i ] [ j + 1 ] = 1 ;"
      ],
      "err_line": 18,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "char b [ i + 1 ] [ j ] = 0 ;"
      ],
      "err_line": 22,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 23,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 24,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "int b [ i ] [ j - 1 ] = 0 ;"
      ],
      "err_line": 28,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "char b [ i ] [ j - 1 ] = 1 ;"
      ],
      "err_line": 30,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "char b [ i - 1 ] [ j ] = 0 ;"
      ],
      "err_line": 34,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 35,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "char b [ i - 1 ] [ j ] = 1 ;"
      ],
      "err_line": 36,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 3 ; i ++ )"
      ],
      "err_line": 39,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        28
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "int b [ i ] [ j - 1 ] = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        28,
        36
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "int b [ i ] [ j - 1 ] = 0 ;",
        "char b [ i - 1 ] [ j ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        28,
        36,
        5
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "int b [ i ] [ j - 1 ] = 0 ;",
        "char b [ i - 1 ] [ j ] = 1 ;",
        "b [ i ] [ j ] = ' 1 ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        28,
        36,
        29
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "int b [ i ] [ j - 1 ] = 0 ;",
        "char b [ i - 1 ] [ j ] = 1 ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        28,
        36,
        24
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "int b [ i ] [ j - 1 ] = 0 ;",
        "char b [ i - 1 ] [ j ] = 1 ;",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        28,
        5
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "int b [ i ] [ j - 1 ] = 0 ;",
        "b [ i ] [ j ] = ' 1 ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        28,
        5,
        29
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "int b [ i ] [ j - 1 ] = 0 ;",
        "b [ i ] [ j ] = ' 1 ' ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        28,
        5,
        24
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "int b [ i ] [ j - 1 ] = 0 ;",
        "b [ i ] [ j ] = ' 1 ' ;",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        28,
        29
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "int b [ i ] [ j - 1 ] = 0 ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        28,
        29,
        24
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "int b [ i ] [ j - 1 ] = 0 ;",
        "else else",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        28,
        24
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "int b [ i ] [ j - 1 ] = 0 ;",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        36
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "char b [ i - 1 ] [ j ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        36,
        5
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "char b [ i - 1 ] [ j ] = 1 ;",
        "b [ i ] [ j ] = ' 1 ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        36,
        5,
        29
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "char b [ i - 1 ] [ j ] = 1 ;",
        "b [ i ] [ j ] = ' 1 ' ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        36,
        5,
        24
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "char b [ i - 1 ] [ j ] = 1 ;",
        "b [ i ] [ j ] = ' 1 ' ;",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        36,
        29
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "char b [ i - 1 ] [ j ] = 1 ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        36,
        29,
        24
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "char b [ i - 1 ] [ j ] = 1 ;",
        "else else",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        36,
        24
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "char b [ i - 1 ] [ j ] = 1 ;",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "b [ i ] [ j ] = ' 1 ' ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        5,
        29
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "b [ i ] [ j ] = ' 1 ' ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        5,
        29,
        24
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "b [ i ] [ j ] = ' 1 ' ;",
        "else else",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        5,
        24
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "b [ i ] [ j ] = ' 1 ' ;",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        29
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        29,
        24
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "else else",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        24
      ],
      "mod_code": [
        "int a [ 5 ] , b [ 5 ] ;",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        28,
        36
      ],
      "mod_code": [
        "int b [ i ] [ j - 1 ] = 0 ;",
        "char b [ i - 1 ] [ j ] = 1 ;"
      ],
      "err_line": 28,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        28,
        36,
        5
      ],
      "mod_code": [
        "int b [ i ] [ j - 1 ] = 0 ;",
        "char b [ i - 1 ] [ j ] = 1 ;",
        "b [ i ] [ j ] = ' 1 ' ;"
      ],
      "err_line": 28,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        28,
        36,
        5,
        29
      ],
      "mod_code": [
        "int b [ i ] [ j - 1 ] = 0 ;",
        "char b [ i - 1 ] [ j ] = 1 ;",
        "b [ i ] [ j ] = ' 1 ' ;",
        "else else"
      ],
      "err_line": 28,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        28,
        36,
        5,
        24
      ],
      "mod_code": [
        "int b [ i ] [ j - 1 ] = 0 ;",
        "char b [ i - 1 ] [ j ] = 1 ;",
        "b [ i ] [ j ] = ' 1 ' ;",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 24,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        28,
        36,
        29
      ],
      "mod_code": [
        "int b [ i ] [ j - 1 ] = 0 ;",
        "char b [ i - 1 ] [ j ] = 1 ;",
        "else else"
      ],
      "err_line": 28,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        28,
        36,
        29,
        24
      ],
      "mod_code": [
        "int b [ i ] [ j - 1 ] = 0 ;",
        "char b [ i - 1 ] [ j ] = 1 ;",
        "else else",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 24,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        28,
        36,
        24
      ],
      "mod_code": [
        "int b [ i ] [ j - 1 ] = 0 ;",
        "char b [ i - 1 ] [ j ] = 1 ;",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 24,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        28,
        5
      ],
      "mod_code": [
        "int b [ i ] [ j - 1 ] = 0 ;",
        "b [ i ] [ j ] = ' 1 ' ;"
      ],
      "err_line": 28,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        28,
        5,
        29
      ],
      "mod_code": [
        "int b [ i ] [ j - 1 ] = 0 ;",
        "b [ i ] [ j ] = ' 1 ' ;",
        "else else"
      ],
      "err_line": 28,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        28,
        5,
        29,
        24
      ],
      "mod_code": [
        "int b [ i ] [ j - 1 ] = 0 ;",
        "b [ i ] [ j ] = ' 1 ' ;",
        "else else",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 24,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        28,
        5,
        24
      ],
      "mod_code": [
        "int b [ i ] [ j - 1 ] = 0 ;",
        "b [ i ] [ j ] = ' 1 ' ;",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 24,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        28,
        29
      ],
      "mod_code": [
        "int b [ i ] [ j - 1 ] = 0 ;",
        "else else"
      ],
      "err_line": 28,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        28,
        29,
        24
      ],
      "mod_code": [
        "int b [ i ] [ j - 1 ] = 0 ;",
        "else else",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 24,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        28,
        24
      ],
      "mod_code": [
        "int b [ i ] [ j - 1 ] = 0 ;",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 24,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        36,
        5
      ],
      "mod_code": [
        "char b [ i - 1 ] [ j ] = 1 ;",
        "b [ i ] [ j ] = ' 1 ' ;"
      ],
      "err_line": 36,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        36,
        5,
        29
      ],
      "mod_code": [
        "char b [ i - 1 ] [ j ] = 1 ;",
        "b [ i ] [ j ] = ' 1 ' ;",
        "else else"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        36,
        5,
        29,
        24
      ],
      "mod_code": [
        "char b [ i - 1 ] [ j ] = 1 ;",
        "b [ i ] [ j ] = ' 1 ' ;",
        "else else",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 24,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        36,
        5,
        24
      ],
      "mod_code": [
        "char b [ i - 1 ] [ j ] = 1 ;",
        "b [ i ] [ j ] = ' 1 ' ;",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 24,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        36,
        29
      ],
      "mod_code": [
        "char b [ i - 1 ] [ j ] = 1 ;",
        "else else"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        36,
        29,
        24
      ],
      "mod_code": [
        "char b [ i - 1 ] [ j ] = 1 ;",
        "else else",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 24,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        36,
        24
      ],
      "mod_code": [
        "char b [ i - 1 ] [ j ] = 1 ;",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 24,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        29
      ],
      "mod_code": [
        "b [ i ] [ j ] = ' 1 ' ;",
        "else else"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        29,
        24
      ],
      "mod_code": [
        "b [ i ] [ j ] = ' 1 ' ;",
        "else else",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 24,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        5,
        24
      ],
      "mod_code": [
        "b [ i ] [ j ] = ' 1 ' ;",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 24,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        29,
        24
      ],
      "mod_code": [
        "else else",
        "char b [ i + 1 ] [ j ] = 1 ;"
      ],
      "err_line": 24,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    }
  ]
}