{
  "meta": {
    "index": 683,
    "hitid": "367O8HRHKG2MB21RJ7LYD1JYX7U4SR",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "327A",
    "subid": "49101560"
  },
  "lines": [
    {
      "line": 0,
      "text": "create n",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "ans = - 1",
      "code": "int ans = - 1 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "res = 0",
      "code": "int res = 0 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create int a [ n ]",
      "code": "int a [ n ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read a [ i ]",
      "code": "cin >> a [ i ] ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if a [ i ] = 1 , increment res",
      "code": "if ( a [ i ] == 1 ) res ++ ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if res = n",
      "code": "if ( res == n )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print n - 1",
      "code": "cout << n - 1 << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if n = 1 and a [ 0 ] = 1",
      "code": "if ( n == 1 && a [ 0 ] == 1 )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print 0",
      "code": "cout << \" 0 \" << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for k = 0 to n inclusive",
      "code": "for ( int k = 0 ; k <= n ; k ++ )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "cnt = 0",
      "code": "int cnt = 0 ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "for l = 0 to n exclusive",
      "code": "for ( int l = 0 ; l < n ; l ++ )",
      "indent": 3
    },
    {
      "line": 22,
      "text": "if l > = k and l < = j",
      "code": "if ( l >= k && l <= j )",
      "indent": 4
    },
    {
      "line": 23,
      "text": "cnt = cnt + ! a [ l ]",
      "code": "cnt = cnt + ! a [ l ] ;",
      "indent": 5
    },
    {
      "line": 24,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 25,
      "text": "set cnt = cnt + a [ l ]",
      "code": "cnt = cnt + a [ l ] ;",
      "indent": 5
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "set ans to max of ans and cnt",
      "code": "ans = max ( ans , cnt ) ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "ans = - 1 ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "res = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "‘res’ does not name a type"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int a [ n ] [ n ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [n]’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "a >> a [ i ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "if ( n == 1 && a [ 0 ] = 1 )"
      ],
      "err_line": 14,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 18,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( k = 0 ; k <= n ; k ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "cnt = 0 ;"
      ],
      "err_line": 20,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "for ( l = 0 ; l < n ; l ++ )"
      ],
      "err_line": 21,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "ans = - 1 ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        7,
        5
      ],
      "mod_code": [
        "ans = - 1 ;",
        "a >> a [ i ] ;",
        "int a [ n ] [ n ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        7,
        5,
        24
      ],
      "mod_code": [
        "ans = - 1 ;",
        "a >> a [ i ] ;",
        "int a [ n ] [ n ] ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        7,
        5,
        20
      ],
      "mod_code": [
        "ans = - 1 ;",
        "a >> a [ i ] ;",
        "int a [ n ] [ n ] ;",
        "cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        7,
        5,
        27
      ],
      "mod_code": [
        "ans = - 1 ;",
        "a >> a [ i ] ;",
        "int a [ n ] [ n ] ;",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        7,
        24
      ],
      "mod_code": [
        "ans = - 1 ;",
        "a >> a [ i ] ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        7,
        24,
        20
      ],
      "mod_code": [
        "ans = - 1 ;",
        "a >> a [ i ] ;",
        "else else",
        "cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        7,
        24,
        27
      ],
      "mod_code": [
        "ans = - 1 ;",
        "a >> a [ i ] ;",
        "else else",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        7,
        20
      ],
      "mod_code": [
        "ans = - 1 ;",
        "a >> a [ i ] ;",
        "cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        7,
        20,
        27
      ],
      "mod_code": [
        "ans = - 1 ;",
        "a >> a [ i ] ;",
        "cnt = 0 ;",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        7,
        27
      ],
      "mod_code": [
        "ans = - 1 ;",
        "a >> a [ i ] ;",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "ans = - 1 ;",
        "int a [ n ] [ n ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        5,
        24
      ],
      "mod_code": [
        "ans = - 1 ;",
        "int a [ n ] [ n ] ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        5,
        24,
        20
      ],
      "mod_code": [
        "ans = - 1 ;",
        "int a [ n ] [ n ] ;",
        "else else",
        "cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        5,
        24,
        27
      ],
      "mod_code": [
        "ans = - 1 ;",
        "int a [ n ] [ n ] ;",
        "else else",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        5,
        20
      ],
      "mod_code": [
        "ans = - 1 ;",
        "int a [ n ] [ n ] ;",
        "cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        5,
        20,
        27
      ],
      "mod_code": [
        "ans = - 1 ;",
        "int a [ n ] [ n ] ;",
        "cnt = 0 ;",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        5,
        27
      ],
      "mod_code": [
        "ans = - 1 ;",
        "int a [ n ] [ n ] ;",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        24
      ],
      "mod_code": [
        "ans = - 1 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        24,
        20
      ],
      "mod_code": [
        "ans = - 1 ;",
        "else else",
        "cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        24,
        20,
        27
      ],
      "mod_code": [
        "ans = - 1 ;",
        "else else",
        "cnt = 0 ;",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        24,
        27
      ],
      "mod_code": [
        "ans = - 1 ;",
        "else else",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        20
      ],
      "mod_code": [
        "ans = - 1 ;",
        "cnt = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        20,
        27
      ],
      "mod_code": [
        "ans = - 1 ;",
        "cnt = 0 ;",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        1,
        27
      ],
      "mod_code": [
        "ans = - 1 ;",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘ans’ does not name a type"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "a >> a [ i ] ;",
        "int a [ n ] [ n ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int [n][n]’ and ‘int [n]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        5,
        24
      ],
      "mod_code": [
        "a >> a [ i ] ;",
        "int a [ n ] [ n ] ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int [n][n]’ and ‘int [n]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        5,
        24,
        20
      ],
      "mod_code": [
        "a >> a [ i ] ;",
        "int a [ n ] [ n ] ;",
        "else else",
        "cnt = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int [n][n]’ and ‘int [n]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        5,
        24,
        27
      ],
      "mod_code": [
        "a >> a [ i ] ;",
        "int a [ n ] [ n ] ;",
        "else else",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int [n][n]’ and ‘int [n]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        5,
        20
      ],
      "mod_code": [
        "a >> a [ i ] ;",
        "int a [ n ] [ n ] ;",
        "cnt = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int [n][n]’ and ‘int [n]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        5,
        20,
        27
      ],
      "mod_code": [
        "a >> a [ i ] ;",
        "int a [ n ] [ n ] ;",
        "cnt = 0 ;",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int [n][n]’ and ‘int [n]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        5,
        27
      ],
      "mod_code": [
        "a >> a [ i ] ;",
        "int a [ n ] [ n ] ;",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int [n][n]’ and ‘int [n]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        24
      ],
      "mod_code": [
        "a >> a [ i ] ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        24,
        20
      ],
      "mod_code": [
        "a >> a [ i ] ;",
        "else else",
        "cnt = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        24,
        20,
        27
      ],
      "mod_code": [
        "a >> a [ i ] ;",
        "else else",
        "cnt = 0 ;",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        24,
        27
      ],
      "mod_code": [
        "a >> a [ i ] ;",
        "else else",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        20
      ],
      "mod_code": [
        "a >> a [ i ] ;",
        "cnt = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        20,
        27
      ],
      "mod_code": [
        "a >> a [ i ] ;",
        "cnt = 0 ;",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        27
      ],
      "mod_code": [
        "a >> a [ i ] ;",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid operands of types ‘int [n]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        24
      ],
      "mod_code": [
        "int a [ n ] [ n ] ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [n]’)"
    },
    {
      "mod_line": [
        5,
        24,
        20
      ],
      "mod_code": [
        "int a [ n ] [ n ] ;",
        "else else",
        "cnt = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [n]’)"
    },
    {
      "mod_line": [
        5,
        24,
        20,
        27
      ],
      "mod_code": [
        "int a [ n ] [ n ] ;",
        "else else",
        "cnt = 0 ;",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [n]’)"
    },
    {
      "mod_line": [
        5,
        24,
        27
      ],
      "mod_code": [
        "int a [ n ] [ n ] ;",
        "else else",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [n]’)"
    },
    {
      "mod_line": [
        5,
        20
      ],
      "mod_code": [
        "int a [ n ] [ n ] ;",
        "cnt = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [n]’)"
    },
    {
      "mod_line": [
        5,
        20,
        27
      ],
      "mod_code": [
        "int a [ n ] [ n ] ;",
        "cnt = 0 ;",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [n]’)"
    },
    {
      "mod_line": [
        5,
        27
      ],
      "mod_code": [
        "int a [ n ] [ n ] ;",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [n]’)"
    },
    {
      "mod_line": [
        24,
        20
      ],
      "mod_code": [
        "else else",
        "cnt = 0 ;"
      ],
      "err_line": 20,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        20,
        27
      ],
      "mod_code": [
        "else else",
        "cnt = 0 ;",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 20,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        27
      ],
      "mod_code": [
        "else else",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        27
      ],
      "mod_code": [
        "cnt = 0 ;",
        "ans = __gcd ( ans , cnt ) ;"
      ],
      "err_line": 20,
      "err_msg": "‘cnt’ was not declared in this scope"
    }
  ]
}