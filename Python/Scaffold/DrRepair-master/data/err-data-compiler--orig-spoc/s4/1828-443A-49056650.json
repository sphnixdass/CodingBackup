{
  "meta": {
    "index": 1828,
    "hitid": "38F60IALAGB6REW5P63MB3P7HRQ0TJ",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "443A",
    "subid": "49056650"
  },
  "lines": [
    {
      "line": 0,
      "text": "N = 100100",
      "code": "const int N = 1e5 + 100 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "PI = 3 . 14159",
      "code": "const double PI = 3.14159 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let v = vector of bool",
      "code": "vector < bool > v ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "n , t , k , d , times = int",
      "code": "int n , t , k , d , times ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "st = set of int",
      "code": "set < int > st ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "s = string",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "read line s",
      "code": "getline ( cin , s ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 1 to size of s exclusive step 3",
      "code": "for ( int i = 1 ; i < s . size ( ) ; i += 3 )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if s [ i ] if ' } ' or ' , ' or ' ' continue",
      "code": "if ( s [ i ] == ' } ' || s [ i ] == ' , ' || s [ i ] == ' ' ) continue ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "insert s [ i ] in st",
      "code": "st . insert ( s [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print size of st",
      "code": "cout << st . size ( ) << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "N = 100100 ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( s [ i ] == ' } || s [ i ] == ' , ' ) continue ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "const string PI = 3.14159 ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘const string {aka const std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int n , t , k , k , times ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = 1 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( s [ i ] == ' } || s [ i ] . ' , ' ) continue ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "st . insert ( st [ i ] ) ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::set<int>’ and ‘int’)"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "N = 100100 ;",
        "if ( s [ i ] == ' } || s [ i ] == ' , ' ) continue ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        9,
        8
      ],
      "mod_code": [
        "N = 100100 ;",
        "if ( s [ i ] == ' } || s [ i ] == ' , ' ) continue ;",
        "for ( i = 1 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        9,
        8,
        1
      ],
      "mod_code": [
        "N = 100100 ;",
        "if ( s [ i ] == ' } || s [ i ] == ' , ' ) continue ;",
        "for ( i = 1 ; i < s . size ( ) ; i ++ )",
        "const string PI = 3.14159 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        9,
        8,
        3
      ],
      "mod_code": [
        "N = 100100 ;",
        "if ( s [ i ] == ' } || s [ i ] == ' , ' ) continue ;",
        "for ( i = 1 ; i < s . size ( ) ; i ++ )",
        "int n , t , k , k , times ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        9,
        1
      ],
      "mod_code": [
        "N = 100100 ;",
        "if ( s [ i ] == ' } || s [ i ] == ' , ' ) continue ;",
        "const string PI = 3.14159 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        9,
        1,
        3
      ],
      "mod_code": [
        "N = 100100 ;",
        "if ( s [ i ] == ' } || s [ i ] == ' , ' ) continue ;",
        "const string PI = 3.14159 ;",
        "int n , t , k , k , times ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        9,
        3
      ],
      "mod_code": [
        "N = 100100 ;",
        "if ( s [ i ] == ' } || s [ i ] == ' , ' ) continue ;",
        "int n , t , k , k , times ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "N = 100100 ;",
        "if ( s [ i ] == ' } || s [ i ] . ' , ' ) continue ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        9,
        8
      ],
      "mod_code": [
        "N = 100100 ;",
        "if ( s [ i ] == ' } || s [ i ] . ' , ' ) continue ;",
        "for ( i = 1 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        9,
        8,
        1
      ],
      "mod_code": [
        "N = 100100 ;",
        "if ( s [ i ] == ' } || s [ i ] . ' , ' ) continue ;",
        "for ( i = 1 ; i < s . size ( ) ; i ++ )",
        "const string PI = 3.14159 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        9,
        8,
        3
      ],
      "mod_code": [
        "N = 100100 ;",
        "if ( s [ i ] == ' } || s [ i ] . ' , ' ) continue ;",
        "for ( i = 1 ; i < s . size ( ) ; i ++ )",
        "int n , t , k , k , times ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        9,
        1
      ],
      "mod_code": [
        "N = 100100 ;",
        "if ( s [ i ] == ' } || s [ i ] . ' , ' ) continue ;",
        "const string PI = 3.14159 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        9,
        1,
        3
      ],
      "mod_code": [
        "N = 100100 ;",
        "if ( s [ i ] == ' } || s [ i ] . ' , ' ) continue ;",
        "const string PI = 3.14159 ;",
        "int n , t , k , k , times ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        9,
        3
      ],
      "mod_code": [
        "N = 100100 ;",
        "if ( s [ i ] == ' } || s [ i ] . ' , ' ) continue ;",
        "int n , t , k , k , times ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "N = 100100 ;",
        "for ( i = 1 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        8,
        1
      ],
      "mod_code": [
        "N = 100100 ;",
        "for ( i = 1 ; i < s . size ( ) ; i ++ )",
        "const string PI = 3.14159 ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        8,
        1,
        3
      ],
      "mod_code": [
        "N = 100100 ;",
        "for ( i = 1 ; i < s . size ( ) ; i ++ )",
        "const string PI = 3.14159 ;",
        "int n , t , k , k , times ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        8,
        3
      ],
      "mod_code": [
        "N = 100100 ;",
        "for ( i = 1 ; i < s . size ( ) ; i ++ )",
        "int n , t , k , k , times ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "N = 100100 ;",
        "const string PI = 3.14159 ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        1,
        3
      ],
      "mod_code": [
        "N = 100100 ;",
        "const string PI = 3.14159 ;",
        "int n , t , k , k , times ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "N = 100100 ;",
        "int n , t , k , k , times ;"
      ],
      "err_line": 0,
      "err_msg": "‘N’ does not name a type"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "if ( s [ i ] == ' } || s [ i ] == ' , ' ) continue ;",
        "for ( i = 1 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        8,
        1
      ],
      "mod_code": [
        "if ( s [ i ] == ' } || s [ i ] == ' , ' ) continue ;",
        "for ( i = 1 ; i < s . size ( ) ; i ++ )",
        "const string PI = 3.14159 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        8,
        1,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' } || s [ i ] == ' , ' ) continue ;",
        "for ( i = 1 ; i < s . size ( ) ; i ++ )",
        "const string PI = 3.14159 ;",
        "int n , t , k , k , times ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        8,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' } || s [ i ] == ' , ' ) continue ;",
        "for ( i = 1 ; i < s . size ( ) ; i ++ )",
        "int n , t , k , k , times ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "if ( s [ i ] == ' } || s [ i ] == ' , ' ) continue ;",
        "const string PI = 3.14159 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        1,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' } || s [ i ] == ' , ' ) continue ;",
        "const string PI = 3.14159 ;",
        "int n , t , k , k , times ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' } || s [ i ] == ' , ' ) continue ;",
        "int n , t , k , k , times ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "if ( s [ i ] == ' } || s [ i ] . ' , ' ) continue ;",
        "for ( i = 1 ; i < s . size ( ) ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        8,
        1
      ],
      "mod_code": [
        "if ( s [ i ] == ' } || s [ i ] . ' , ' ) continue ;",
        "for ( i = 1 ; i < s . size ( ) ; i ++ )",
        "const string PI = 3.14159 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        8,
        1,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' } || s [ i ] . ' , ' ) continue ;",
        "for ( i = 1 ; i < s . size ( ) ; i ++ )",
        "const string PI = 3.14159 ;",
        "int n , t , k , k , times ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        8,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' } || s [ i ] . ' , ' ) continue ;",
        "for ( i = 1 ; i < s . size ( ) ; i ++ )",
        "int n , t , k , k , times ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "if ( s [ i ] == ' } || s [ i ] . ' , ' ) continue ;",
        "const string PI = 3.14159 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        1,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' } || s [ i ] . ' , ' ) continue ;",
        "const string PI = 3.14159 ;",
        "int n , t , k , k , times ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "if ( s [ i ] == ' } || s [ i ] . ' , ' ) continue ;",
        "int n , t , k , k , times ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "for ( i = 1 ; i < s . size ( ) ; i ++ )",
        "const string PI = 3.14159 ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘const string {aka const std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        8,
        1,
        3
      ],
      "mod_code": [
        "for ( i = 1 ; i < s . size ( ) ; i ++ )",
        "const string PI = 3.14159 ;",
        "int n , t , k , k , times ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘const string {aka const std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "for ( i = 1 ; i < s . size ( ) ; i ++ )",
        "int n , t , k , k , times ;"
      ],
      "err_line": 3,
      "err_msg": "redefinition of ‘int k’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "const string PI = 3.14159 ;",
        "int n , t , k , k , times ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘const string {aka const std::__cxx11::basic_string<char>}’ requested"
    }
  ]
}