{
  "meta": {
    "index": 2495,
    "hitid": "3HRWUH63QUW7R8DMPGNMJZF6A4GN52",
    "workerid": "A1AYVATMT88U1W",
    "probid": "94A",
    "subid": "43698156"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let a be a string",
      "code": "string a ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "A = array of strings of length 10",
      "code": "string A [ 10 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 10 exclusive , read A [ i ]",
      "code": "for ( int i = 0 ; i < 10 ; i ++ ) cin >> A [ i ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to 8 exclusive",
      "code": "for ( int i = 0 ; i < 8 ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for j = 0 to 10 exclusive",
      "code": "for ( int j = 0 ; j < 10 ; j ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if a . substr ( i * 10 , 10 ) is equal to A [ j ] , print j",
      "code": "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char a ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘substr’ in ‘a’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char A [ 10 ] ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::basic_string<char>’ and ‘char’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "gets ( a ) ;",
        "char A [ 10 ] ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        1
      ],
      "mod_code": [
        "gets ( a ) ;",
        "char A [ 10 ] ;",
        "char a ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        1,
        5
      ],
      "mod_code": [
        "gets ( a ) ;",
        "char A [ 10 ] ;",
        "char a ;",
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        1,
        7
      ],
      "mod_code": [
        "gets ( a ) ;",
        "char A [ 10 ] ;",
        "char a ;",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        1,
        6
      ],
      "mod_code": [
        "gets ( a ) ;",
        "char A [ 10 ] ;",
        "char a ;",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        5
      ],
      "mod_code": [
        "gets ( a ) ;",
        "char A [ 10 ] ;",
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        7
      ],
      "mod_code": [
        "gets ( a ) ;",
        "char A [ 10 ] ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        6
      ],
      "mod_code": [
        "gets ( a ) ;",
        "char A [ 10 ] ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        7
      ],
      "mod_code": [
        "gets ( a ) ;",
        "char A [ 10 ] ;",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        6
      ],
      "mod_code": [
        "gets ( a ) ;",
        "char A [ 10 ] ;",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        3,
        6
      ],
      "mod_code": [
        "gets ( a ) ;",
        "char A [ 10 ] ;",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "gets ( a ) ;",
        "char a ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        5
      ],
      "mod_code": [
        "gets ( a ) ;",
        "char a ;",
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        5,
        7
      ],
      "mod_code": [
        "gets ( a ) ;",
        "char a ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        5,
        6
      ],
      "mod_code": [
        "gets ( a ) ;",
        "char a ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        7
      ],
      "mod_code": [
        "gets ( a ) ;",
        "char a ;",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        7,
        6
      ],
      "mod_code": [
        "gets ( a ) ;",
        "char a ;",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        6
      ],
      "mod_code": [
        "gets ( a ) ;",
        "char a ;",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "gets ( a ) ;",
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        5,
        7
      ],
      "mod_code": [
        "gets ( a ) ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        5,
        7,
        6
      ],
      "mod_code": [
        "gets ( a ) ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        5,
        6
      ],
      "mod_code": [
        "gets ( a ) ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "gets ( a ) ;",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        7,
        6
      ],
      "mod_code": [
        "gets ( a ) ;",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "gets ( a ) ;",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "char A [ 10 ] ;",
        "char a ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘substr’ in ‘a’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3,
        1,
        5
      ],
      "mod_code": [
        "char A [ 10 ] ;",
        "char a ;",
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        1,
        5,
        7
      ],
      "mod_code": [
        "char A [ 10 ] ;",
        "char a ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        1,
        5,
        6
      ],
      "mod_code": [
        "char A [ 10 ] ;",
        "char a ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        1,
        7
      ],
      "mod_code": [
        "char A [ 10 ] ;",
        "char a ;",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘substr’ in ‘a’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3,
        1,
        7,
        6
      ],
      "mod_code": [
        "char A [ 10 ] ;",
        "char a ;",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        1,
        6
      ],
      "mod_code": [
        "char A [ 10 ] ;",
        "char a ;",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "char A [ 10 ] ;",
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        7
      ],
      "mod_code": [
        "char A [ 10 ] ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        6
      ],
      "mod_code": [
        "char A [ 10 ] ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        6
      ],
      "mod_code": [
        "char A [ 10 ] ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "char A [ 10 ] ;",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::basic_string<char>’ and ‘char’)"
    },
    {
      "mod_line": [
        3,
        7,
        6
      ],
      "mod_code": [
        "char A [ 10 ] ;",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "char A [ 10 ] ;",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "char a ;",
        "for ( i = 0 ; i < 8 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5,
        7
      ],
      "mod_code": [
        "char a ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5,
        7,
        6
      ],
      "mod_code": [
        "char a ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5,
        6
      ],
      "mod_code": [
        "char a ;",
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "char a ;",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘substr’ in ‘a’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        1,
        7,
        6
      ],
      "mod_code": [
        "char a ;",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "char a ;",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )",
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < 8 ; i ++ )",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "if ( a . substr ( i * 10 , 10 ) == A [ j ] ) cout << j << endl ;",
        "for ( j = 0 ; j < 10 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    }
  ]
}