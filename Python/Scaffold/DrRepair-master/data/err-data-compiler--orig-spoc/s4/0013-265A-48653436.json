{
  "meta": {
    "index": 13,
    "hitid": "37VUR2VJ6AJPCMFCZ3CW0Y8DZKRC1L",
    "workerid": "A24WRPQYGMQLGF",
    "probid": "265A",
    "subid": "48653436"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "count = integer = 1 , i = integer = 0 , j = integer = 0",
      "code": "int count = 1 , i = 0 , j = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "s , t = strings",
      "code": "string s , t ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read s , t",
      "code": "cin >> s >> t ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while t [ i ] is not null and s [ j ] is not null",
      "code": "while ( t [ i ] != NULL && s [ j ] != NULL )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if t [ i ] is s [ j ]",
      "code": "if ( t [ i ] == s [ j ] )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increase i by 1",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "increase j by 1",
      "code": "j ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "increase count by 1",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "increase i by 1",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print count",
      "code": "cout << count << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( t [ i ] == s )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        3,
        13,
        5
      ],
      "mod_code": [
        "int count = 0 , i = 0 , j = 0 ;",
        "cin >> s , t ;",
        "cout << count ;",
        "if ( t [ i ] == s )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        3,
        13,
        9
      ],
      "mod_code": [
        "int count = 0 , i = 0 , j = 0 ;",
        "cin >> s , t ;",
        "cout << count ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        3,
        5
      ],
      "mod_code": [
        "int count = 0 , i = 0 , j = 0 ;",
        "cin >> s , t ;",
        "if ( t [ i ] == s )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        9
      ],
      "mod_code": [
        "int count = 0 , i = 0 , j = 0 ;",
        "cin >> s , t ;",
        "if ( t [ i ] == s )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        3,
        9
      ],
      "mod_code": [
        "int count = 0 , i = 0 , j = 0 ;",
        "cin >> s , t ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        13,
        5
      ],
      "mod_code": [
        "int count = 0 , i = 0 , j = 0 ;",
        "cout << count ;",
        "if ( t [ i ] == s )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        13,
        5,
        9
      ],
      "mod_code": [
        "int count = 0 , i = 0 , j = 0 ;",
        "cout << count ;",
        "if ( t [ i ] == s )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        13,
        9
      ],
      "mod_code": [
        "int count = 0 , i = 0 , j = 0 ;",
        "cout << count ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int count = 0 , i = 0 , j = 0 ;",
        "if ( t [ i ] == s )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        5,
        9
      ],
      "mod_code": [
        "int count = 0 , i = 0 , j = 0 ;",
        "if ( t [ i ] == s )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "int count = 0 , i = 0 , j = 0 ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        13,
        5
      ],
      "mod_code": [
        "cin >> s , t ;",
        "cout << count ;",
        "if ( t [ i ] == s )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        13,
        5,
        9
      ],
      "mod_code": [
        "cin >> s , t ;",
        "cout << count ;",
        "if ( t [ i ] == s )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        13,
        9
      ],
      "mod_code": [
        "cin >> s , t ;",
        "cout << count ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "cin >> s , t ;",
        "if ( t [ i ] == s )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        5,
        9
      ],
      "mod_code": [
        "cin >> s , t ;",
        "if ( t [ i ] == s )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "cin >> s , t ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13,
        5
      ],
      "mod_code": [
        "cout << count ;",
        "if ( t [ i ] == s )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        5,
        9
      ],
      "mod_code": [
        "cout << count ;",
        "if ( t [ i ] == s )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        9
      ],
      "mod_code": [
        "cout << count ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "if ( t [ i ] == s )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}