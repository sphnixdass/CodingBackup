{
  "meta": {
    "index": 2118,
    "hitid": "3D06DR5225DYFW438BZ3EV6SXS0MA0",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "114A",
    "subid": "31853683"
  },
  "lines": [
    {
      "line": 0,
      "text": "create long long n , m , k , res",
      "code": "long long n , m , k , res ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "k = n",
      "code": "k = n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while k less than m",
      "code": "while ( k < m )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "k = k * n",
      "code": "k *= n ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment res",
      "code": "res ++ ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if k equal to m",
      "code": "if ( k == m )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print Yes , a newline , res",
      "code": "cout << \" YES\\n \" << res << endl ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print No and a newline",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;",
        "cout << \" No\\n \" ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        11,
        2
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;",
        "cout << \" No\\n \" ;",
        "cin >> n >> k ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        11,
        2,
        8
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;",
        "cout << \" No\\n \" ;",
        "cin >> n >> k ;",
        "if ( k == ' m ' )"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        11,
        2,
        10
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;",
        "cout << \" No\\n \" ;",
        "cin >> n >> k ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        11,
        8
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;",
        "cout << \" No\\n \" ;",
        "if ( k == ' m ' )"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        11,
        8,
        10
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;",
        "cout << \" No\\n \" ;",
        "if ( k == ' m ' )",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        11,
        10
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;",
        "cout << \" No\\n \" ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;",
        "cin >> n >> k ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        2,
        8
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;",
        "cin >> n >> k ;",
        "if ( k == ' m ' )"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        2,
        8,
        11
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;",
        "cin >> n >> k ;",
        "if ( k == ' m ' )",
        "cout << \" No \" << endl ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        2,
        8,
        10
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;",
        "cin >> n >> k ;",
        "if ( k == ' m ' )",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        2,
        11
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;",
        "cin >> n >> k ;",
        "cout << \" No \" << endl ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        2,
        11,
        10
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;",
        "cin >> n >> k ;",
        "cout << \" No \" << endl ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        2,
        10
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;",
        "cin >> n >> k ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;",
        "if ( k == ' m ' )"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        8,
        11
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;",
        "if ( k == ' m ' )",
        "cout << \" No \" << endl ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        8,
        11,
        10
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;",
        "if ( k == ' m ' )",
        "cout << \" No \" << endl ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        8,
        10
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;",
        "if ( k == ' m ' )",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;",
        "cout << \" No \" << endl ;"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        11,
        10
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;",
        "cout << \" No \" << endl ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "cout << \" Yes\\n \" , res << endl ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "invalid operands of types ‘long long int’ and ‘<unresolved overloaded function type>’ to binary ‘operator<<’"
    },
    {
      "mod_line": [
        11,
        2,
        8,
        10
      ],
      "mod_code": [
        "cout << \" No\\n \" ;",
        "cin >> n >> k ;",
        "if ( k == ' m ' )",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        2,
        10
      ],
      "mod_code": [
        "cout << \" No\\n \" ;",
        "cin >> n >> k ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        8,
        10
      ],
      "mod_code": [
        "cout << \" No\\n \" ;",
        "if ( k == ' m ' )",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "cout << \" No\\n \" ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        8,
        11,
        10
      ],
      "mod_code": [
        "cin >> n >> k ;",
        "if ( k == ' m ' )",
        "cout << \" No \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        8,
        10
      ],
      "mod_code": [
        "cin >> n >> k ;",
        "if ( k == ' m ' )",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        11,
        10
      ],
      "mod_code": [
        "cin >> n >> k ;",
        "cout << \" No \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "cin >> n >> k ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        11,
        10
      ],
      "mod_code": [
        "if ( k == ' m ' )",
        "cout << \" No \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "if ( k == ' m ' )",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "cout << \" No \" << endl ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}