{
  "meta": {
    "index": 2336,
    "hitid": "38O9DZ0A62H7LQO78GZ7JHQ8V4S26Y",
    "workerid": "A1APYLD4DUK33J",
    "probid": "464A",
    "subid": "45778824"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , p",
      "code": "int n , p ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n read p",
      "code": "cin >> n >> p ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create character set st",
      "code": "set < char > st ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "create character set iterator it",
      "code": "set < char > :: iterator it ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "create integer x with x = - 1",
      "code": "int x = - 1 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = n - 1 to 0 inclusive , decrementing i",
      "code": "for ( int i = n - 1 ; i >= 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "remove all elements from st",
      "code": "st . clear ( ) ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "for j = s [ i ] + 1 to ' a ' + p exclusive , insert j into st",
      "code": "for ( char j = s [ i ] + 1 ; j < ' a ' + p ; j ++ ) { st . insert ( j ) ; }",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if i - 1 is greater than or equal to 0",
      "code": "if ( i - 1 >= 0 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set it to first index of s [ i - 1 ] in st",
      "code": "it = st . find ( s [ i - 1 ] ) ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "if it is not end of st , remove it from st",
      "code": "if ( it != st . end ( ) ) st . erase ( it ) ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if i - 2 is greater than or equal to 0",
      "code": "if ( i - 2 >= 0 )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set it to first index of s [ i - 2 ] in st",
      "code": "it = st . find ( s [ i - 2 ] ) ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "if it is not end of st , remove it from st",
      "code": "if ( it != st . end ( ) ) st . erase ( it ) ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if size of st is true",
      "code": "if ( st . size ( ) )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "set s [ i ] to value of beginning of st",
      "code": "s [ i ] = * st . begin ( ) ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "set x to i",
      "code": "x = i ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "if x is - 1",
      "code": "if ( x == - 1 )",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print \" NO \\ n \"",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 28,
      "text": "for i = x + 1 to n exclusive",
      "code": "for ( int i = x + 1 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "remove all elements from st",
      "code": "st . clear ( ) ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "for j = ' a ' to ' a ' + p exclusive , insert j into st",
      "code": "for ( char j = ' a ' ; j < ' a ' + p ; j ++ ) { st . insert ( j ) ; }",
      "indent": 3
    },
    {
      "line": 31,
      "text": "if i - 1 is greater than or equal to 0",
      "code": "if ( i - 1 >= 0 )",
      "indent": 3
    },
    {
      "line": 32,
      "text": "set it to first index of s [ i - 1 ] in st",
      "code": "it = st . find ( s [ i - 1 ] ) ;",
      "indent": 4
    },
    {
      "line": 33,
      "text": "if it is not end of st , remove it from st",
      "code": "if ( it != st . end ( ) ) st . erase ( it ) ;",
      "indent": 4
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 35,
      "text": "if i - 2 is greater than or equal to 0",
      "code": "if ( i - 2 >= 0 )",
      "indent": 3
    },
    {
      "line": 36,
      "text": "set it to first index of s [ i - 2 ] in st",
      "code": "it = st . find ( s [ i - 2 ] ) ;",
      "indent": 4
    },
    {
      "line": 37,
      "text": "if it is not end of st , remove it from st",
      "code": "if ( it != st . end ( ) ) st . erase ( it ) ;",
      "indent": 4
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 39,
      "text": "set s [ i ] to value of beginning of st",
      "code": "s [ i ] = * st . begin ( ) ;",
      "indent": 3
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 41,
      "text": "print s print newline",
      "code": "cout << s << endl ;",
      "indent": 2
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 20,
      "err_msg": "no matching function for call to ‘tolower(std::set<char>&)’"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 34,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 39,
      "err_msg": "no matching function for call to ‘tolower(std::set<char>&)’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 2,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘std::__cxx11::string n’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "set < set < char > st ;"
      ],
      "err_line": 5,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "set < char > iterator it ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘it’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( i = n - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 8,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "st . remove = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "‘class std::set<char>’ has no member named ‘remove’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "it = st . first = st [ i - 1 ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘class std::set<char>’ has no member named ‘first’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( st . end ( ) != st . end ( ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "it = st . first = st [ i - 2 ] ;"
      ],
      "err_line": 16,
      "err_msg": "‘class std::set<char>’ has no member named ‘first’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( st . end ( ) != st . end ( ) )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "s [ i ] = * st ;"
      ],
      "err_line": 20,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::set<char>’)"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 27,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "for ( i = x + 1 ; i < n ; i ++ )"
      ],
      "err_line": 28,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "st . remove = 0 ;"
      ],
      "err_line": 29,
      "err_msg": "‘class std::set<char>’ has no member named ‘remove’"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "it = st . first = st [ i - 1 ] ;"
      ],
      "err_line": 32,
      "err_msg": "‘class std::set<char>’ has no member named ‘first’"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "if ( st . end ( ) != st . end ( ) )"
      ],
      "err_line": 34,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "it = st . first = st [ i - 2 ] ;"
      ],
      "err_line": 36,
      "err_msg": "‘class std::set<char>’ has no member named ‘first’"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "if ( st . end ( ) != st . end ( ) )"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "s [ i ] = * st ;"
      ],
      "err_line": 39,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::set<char>’)"
    },
    {
      "mod_line": [
        13,
        17
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        17,
        20
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        17,
        20,
        33
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        17,
        20,
        37
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        17,
        20,
        39
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        17,
        33
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        17,
        33,
        37
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        17,
        33,
        39
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        17,
        37
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        17,
        37,
        39
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        17,
        39
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        20
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        20,
        33
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        20,
        33,
        37
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;",
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        20,
        33,
        39
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;",
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        20,
        37
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        20,
        37,
        39
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;",
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        20,
        39
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        33
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        33,
        37
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        33,
        37,
        39
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        33,
        39
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        37
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        37,
        39
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        39
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        20
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        20,
        33
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        20,
        33,
        37
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;",
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        20,
        33,
        39
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;",
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        20,
        37
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        20,
        37,
        39
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;",
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        20,
        39
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        33
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        33,
        37
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        33,
        37,
        39
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        33,
        39
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        37
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        37,
        39
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        39
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        33
      ],
      "mod_code": [
        "s [ i ] = tolower ( st ) ;",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 20,
      "err_msg": "no matching function for call to ‘tolower(std::set<char>&)’"
    },
    {
      "mod_line": [
        20,
        33,
        37
      ],
      "mod_code": [
        "s [ i ] = tolower ( st ) ;",
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 20,
      "err_msg": "no matching function for call to ‘tolower(std::set<char>&)’"
    },
    {
      "mod_line": [
        20,
        33,
        37,
        39
      ],
      "mod_code": [
        "s [ i ] = tolower ( st ) ;",
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 20,
      "err_msg": "no matching function for call to ‘tolower(std::set<char>&)’"
    },
    {
      "mod_line": [
        20,
        33,
        39
      ],
      "mod_code": [
        "s [ i ] = tolower ( st ) ;",
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 20,
      "err_msg": "no matching function for call to ‘tolower(std::set<char>&)’"
    },
    {
      "mod_line": [
        20,
        37
      ],
      "mod_code": [
        "s [ i ] = tolower ( st ) ;",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 20,
      "err_msg": "no matching function for call to ‘tolower(std::set<char>&)’"
    },
    {
      "mod_line": [
        20,
        37,
        39
      ],
      "mod_code": [
        "s [ i ] = tolower ( st ) ;",
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 20,
      "err_msg": "no matching function for call to ‘tolower(std::set<char>&)’"
    },
    {
      "mod_line": [
        20,
        39
      ],
      "mod_code": [
        "s [ i ] = tolower ( st ) ;",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 20,
      "err_msg": "no matching function for call to ‘tolower(std::set<char>&)’"
    },
    {
      "mod_line": [
        33,
        37
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )"
      ],
      "err_line": 34,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        33,
        37,
        39
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 34,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        33,
        39
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 34,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        39
      ],
      "mod_code": [
        "if ( st . end ( ) == st . end ( ) )",
        "s [ i ] = tolower ( st ) ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}