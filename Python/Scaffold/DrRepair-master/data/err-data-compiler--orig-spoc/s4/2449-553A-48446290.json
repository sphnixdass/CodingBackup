{
  "meta": {
    "index": 2449,
    "hitid": "3VMV5CHJZ8932I7Q38SPWVCNPVAGT8",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "553A",
    "subid": "48446290"
  },
  "lines": [
    {
      "line": 0,
      "text": "INF = const int with INF = 1e9",
      "code": "const int INF = ( int ) 1e9 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "mod = const int with mod = 1e9 + 7",
      "code": "const int mod = ( int ) 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "MAXN = const int with MAXN = 1e3 + 5",
      "code": "const int MAXN = ( int ) 1e3 + 5 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "arr = int array of size MAXN",
      "code": "int arr [ MAXN ] ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "fact , inv = long long arary of size MAXN each",
      "code": "long long fact [ MAXN ] , inv [ MAXN ] ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "in function binPow taking a long long a and an int n and returning a long long",
      "code": "long long binPow ( long long a , int n )",
      "indent": 0
    },
    {
      "line": 6,
      "text": "res = long long with res = 1",
      "code": "long long res = 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "loop while n is not 0",
      "code": "while ( n )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if n is uneven then set res to ( res * a ) modulo mod",
      "code": "if ( n % 2 == 1 ) res = ( res * a ) % mod ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set a to a * a",
      "code": "a = a * a ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set a to a modulo mod",
      "code": "a = a % mod ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set n to n / 2",
      "code": "n = n / 2 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "return res",
      "code": "return res ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 16,
      "text": "k = int",
      "code": "int k ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "read k",
      "code": "cin >> k ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for i = 1 to k inclusive read arr [ i ]",
      "code": "for ( int i = 1 ; i <= k ; i ++ ) cin >> arr [ i ] ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "mul = long long with mul = 1",
      "code": "long long mul = 1 ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "for i = 1 to 1000 inclusive",
      "code": "for ( int i = 1 ; i <= 1000 ; i ++ )",
      "indent": 1
    },
    {
      "line": 21,
      "text": "set mul to ( mul * i ) modulo mod",
      "code": "mul = ( mul * i ) % mod ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "set fact [ i ] to mul",
      "code": "fact [ i ] = mul ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "set inv [ i ] to binPow of fact [ i ] and mod - 2",
      "code": "inv [ i ] = binPow ( fact [ i ] , mod - 2 ) ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "set inv [ 0 ] to 1",
      "code": "inv [ 0 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "ans = long long with ans = 1",
      "code": "long long ans = 1 ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "sum = long long with sum = 0",
      "code": "long long sum = 0 ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "for i = 1 to k inclusive",
      "code": "for ( int i = 1 ; i <= k ; i ++ )",
      "indent": 1
    },
    {
      "line": 29,
      "text": "a = int with a = arr [ i ]",
      "code": "int a = arr [ i ] ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "decrement a",
      "code": "a -- ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "for j = 0 to a",
      "code": "for ( int j = 0 ; j < a ; j ++ )",
      "indent": 2
    },
    {
      "line": 32,
      "text": "set ans to ( ans * ( sum + 1 ) ) modulo mod",
      "code": "ans = ( ans * ( sum + 1 ) ) % mod ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "increment sum",
      "code": "sum ++ ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 35,
      "text": "set ans to ans * inv [ a ]",
      "code": "ans = ans * inv [ a ] ;",
      "indent": 2
    },
    {
      "line": 36,
      "text": "set ans to ans modulo mod",
      "code": "ans = ans % mod ;",
      "indent": 2
    },
    {
      "line": 37,
      "text": "increment sum",
      "code": "sum = sum + 1 ;",
      "indent": 2
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 39,
      "text": "print ans",
      "code": "cout << ans << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;"
      ],
      "err_line": 23,
      "err_msg": "invalid operands of types ‘long long int(long long int, int)’ and ‘long long int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "long long fact [ MAXN ] , inv ( MAXN ) ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 17,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "long long mul = 1 = 1 ;"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "fact [ i ] = mul [ i ] ;"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "inv [ i ] = binPow [ i ] , mod - 2 ;"
      ],
      "err_line": 23,
      "err_msg": "invalid conversion from ‘long long int (*)(long long int, int)’ to ‘long long int’ [-fpermissive]"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "inv [ 0 ] ] = 1 ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "for ( i = 1 ; i <= k ; i ++ )"
      ],
      "err_line": 28,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "int a = new int [ i ] ;"
      ],
      "err_line": 29,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "ans = ( ans * ( sum + 1 ) ) ) % mod ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        23,
        28
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "for ( i = 1 ; i <= k ; i ++ )"
      ],
      "err_line": 23,
      "err_msg": "invalid operands of types ‘long long int(long long int, int)’ and ‘long long int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        23,
        28,
        4
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "for ( i = 1 ; i <= k ; i ++ )",
        "long long fact [ MAXN ] , inv ( MAXN ) ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        28,
        4,
        25
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "for ( i = 1 ; i <= k ; i ++ )",
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "inv [ 0 ] ] = 1 ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        28,
        4,
        39
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "for ( i = 1 ; i <= k ; i ++ )",
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "cout << ans ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        28,
        4,
        7
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "for ( i = 1 ; i <= k ; i ++ )",
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "while ( n -- )"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        28,
        25
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "for ( i = 1 ; i <= k ; i ++ )",
        "inv [ 0 ] ] = 1 ;"
      ],
      "err_line": 23,
      "err_msg": "invalid operands of types ‘long long int(long long int, int)’ and ‘long long int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        23,
        28,
        25,
        39
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "for ( i = 1 ; i <= k ; i ++ )",
        "inv [ 0 ] ] = 1 ;",
        "cout << ans ;"
      ],
      "err_line": 23,
      "err_msg": "invalid operands of types ‘long long int(long long int, int)’ and ‘long long int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        23,
        28,
        25,
        7
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "for ( i = 1 ; i <= k ; i ++ )",
        "inv [ 0 ] ] = 1 ;",
        "while ( n -- )"
      ],
      "err_line": 23,
      "err_msg": "invalid operands of types ‘long long int(long long int, int)’ and ‘long long int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        23,
        28,
        39
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "for ( i = 1 ; i <= k ; i ++ )",
        "cout << ans ;"
      ],
      "err_line": 23,
      "err_msg": "invalid operands of types ‘long long int(long long int, int)’ and ‘long long int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        23,
        28,
        39,
        7
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "for ( i = 1 ; i <= k ; i ++ )",
        "cout << ans ;",
        "while ( n -- )"
      ],
      "err_line": 23,
      "err_msg": "invalid operands of types ‘long long int(long long int, int)’ and ‘long long int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        23,
        28,
        7
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "for ( i = 1 ; i <= k ; i ++ )",
        "while ( n -- )"
      ],
      "err_line": 23,
      "err_msg": "invalid operands of types ‘long long int(long long int, int)’ and ‘long long int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        23,
        4
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "long long fact [ MAXN ] , inv ( MAXN ) ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        4,
        25
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "inv [ 0 ] ] = 1 ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        4,
        25,
        39
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "inv [ 0 ] ] = 1 ;",
        "cout << ans ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        4,
        25,
        7
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "inv [ 0 ] ] = 1 ;",
        "while ( n -- )"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        4,
        39
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "cout << ans ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        4,
        39,
        7
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "cout << ans ;",
        "while ( n -- )"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        4,
        7
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "while ( n -- )"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        25
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "inv [ 0 ] ] = 1 ;"
      ],
      "err_line": 23,
      "err_msg": "invalid operands of types ‘long long int(long long int, int)’ and ‘long long int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        23,
        25,
        39
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "inv [ 0 ] ] = 1 ;",
        "cout << ans ;"
      ],
      "err_line": 23,
      "err_msg": "invalid operands of types ‘long long int(long long int, int)’ and ‘long long int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        23,
        25,
        39,
        7
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "inv [ 0 ] ] = 1 ;",
        "cout << ans ;",
        "while ( n -- )"
      ],
      "err_line": 23,
      "err_msg": "invalid operands of types ‘long long int(long long int, int)’ and ‘long long int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        23,
        25,
        7
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "inv [ 0 ] ] = 1 ;",
        "while ( n -- )"
      ],
      "err_line": 23,
      "err_msg": "invalid operands of types ‘long long int(long long int, int)’ and ‘long long int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        23,
        39
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "cout << ans ;"
      ],
      "err_line": 23,
      "err_msg": "invalid operands of types ‘long long int(long long int, int)’ and ‘long long int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        23,
        39,
        7
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "cout << ans ;",
        "while ( n -- )"
      ],
      "err_line": 23,
      "err_msg": "invalid operands of types ‘long long int(long long int, int)’ and ‘long long int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        23,
        7
      ],
      "mod_code": [
        "inv [ i ] = binPow * fact [ i ] , mod - 2 ;",
        "while ( n -- )"
      ],
      "err_line": 23,
      "err_msg": "invalid operands of types ‘long long int(long long int, int)’ and ‘long long int’ to binary ‘operator*’"
    },
    {
      "mod_line": [
        28,
        4
      ],
      "mod_code": [
        "for ( i = 1 ; i <= k ; i ++ )",
        "long long fact [ MAXN ] , inv ( MAXN ) ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        28,
        4,
        25
      ],
      "mod_code": [
        "for ( i = 1 ; i <= k ; i ++ )",
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "inv [ 0 ] ] = 1 ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        28,
        4,
        25,
        39
      ],
      "mod_code": [
        "for ( i = 1 ; i <= k ; i ++ )",
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "inv [ 0 ] ] = 1 ;",
        "cout << ans ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        28,
        4,
        25,
        7
      ],
      "mod_code": [
        "for ( i = 1 ; i <= k ; i ++ )",
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "inv [ 0 ] ] = 1 ;",
        "while ( n -- )"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        28,
        4,
        39
      ],
      "mod_code": [
        "for ( i = 1 ; i <= k ; i ++ )",
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "cout << ans ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        28,
        4,
        39,
        7
      ],
      "mod_code": [
        "for ( i = 1 ; i <= k ; i ++ )",
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "cout << ans ;",
        "while ( n -- )"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        28,
        4,
        7
      ],
      "mod_code": [
        "for ( i = 1 ; i <= k ; i ++ )",
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "while ( n -- )"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        28,
        25
      ],
      "mod_code": [
        "for ( i = 1 ; i <= k ; i ++ )",
        "inv [ 0 ] ] = 1 ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        28,
        25,
        39
      ],
      "mod_code": [
        "for ( i = 1 ; i <= k ; i ++ )",
        "inv [ 0 ] ] = 1 ;",
        "cout << ans ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        28,
        25,
        39,
        7
      ],
      "mod_code": [
        "for ( i = 1 ; i <= k ; i ++ )",
        "inv [ 0 ] ] = 1 ;",
        "cout << ans ;",
        "while ( n -- )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        28,
        25,
        7
      ],
      "mod_code": [
        "for ( i = 1 ; i <= k ; i ++ )",
        "inv [ 0 ] ] = 1 ;",
        "while ( n -- )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        28,
        39
      ],
      "mod_code": [
        "for ( i = 1 ; i <= k ; i ++ )",
        "cout << ans ;"
      ],
      "err_line": 28,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        28,
        39,
        7
      ],
      "mod_code": [
        "for ( i = 1 ; i <= k ; i ++ )",
        "cout << ans ;",
        "while ( n -- )"
      ],
      "err_line": 28,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        28,
        7
      ],
      "mod_code": [
        "for ( i = 1 ; i <= k ; i ++ )",
        "while ( n -- )"
      ],
      "err_line": 28,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        25
      ],
      "mod_code": [
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "inv [ 0 ] ] = 1 ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        25,
        39
      ],
      "mod_code": [
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "inv [ 0 ] ] = 1 ;",
        "cout << ans ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        25,
        39,
        7
      ],
      "mod_code": [
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "inv [ 0 ] ] = 1 ;",
        "cout << ans ;",
        "while ( n -- )"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        25,
        7
      ],
      "mod_code": [
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "inv [ 0 ] ] = 1 ;",
        "while ( n -- )"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        39
      ],
      "mod_code": [
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "cout << ans ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        39,
        7
      ],
      "mod_code": [
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "cout << ans ;",
        "while ( n -- )"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "long long fact [ MAXN ] , inv ( MAXN ) ;",
        "while ( n -- )"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        25,
        39
      ],
      "mod_code": [
        "inv [ 0 ] ] = 1 ;",
        "cout << ans ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        25,
        39,
        7
      ],
      "mod_code": [
        "inv [ 0 ] ] = 1 ;",
        "cout << ans ;",
        "while ( n -- )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        25,
        7
      ],
      "mod_code": [
        "inv [ 0 ] ] = 1 ;",
        "while ( n -- )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘]’ token"
    }
  ]
}