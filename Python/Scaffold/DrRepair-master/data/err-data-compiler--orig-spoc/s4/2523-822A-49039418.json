{
  "meta": {
    "index": 2523,
    "hitid": "3BS6ERDL931UO0MN55JOF0HCSVOD6P",
    "workerid": "A2M1CVZZJAN4T4",
    "probid": "822A",
    "subid": "49039418"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare function factorial which takes integer a",
      "code": "int factorial ( int a )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if a is equal to 1 then return 1",
      "code": "if ( a == 1 ) return 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return a * factorial ( a - 1 )",
      "code": "return a * factorial ( a - 1 ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "create integers a and b",
      "code": "int a , b ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read a and b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if a is greater than b",
      "code": "if ( a > b )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print factorial of b",
      "code": "cout << factorial ( b ) << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print factorial of a",
      "code": "cout << factorial ( a ) << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool factorial ( int a ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        0,
        10,
        8,
        9
      ],
      "mod_code": [
        "bool factorial ( int a )",
        "cout << factorial ( a ) ;",
        "cout << factorial ( b ) ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        0,
        10,
        9
      ],
      "mod_code": [
        "bool factorial ( int a )",
        "cout << factorial ( a ) ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        0,
        10,
        9,
        6
      ],
      "mod_code": [
        "bool factorial ( int a )",
        "cout << factorial ( a ) ;",
        "else else",
        "a >> a >> b ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        0,
        8,
        9
      ],
      "mod_code": [
        "bool factorial ( int a )",
        "cout << factorial ( b ) ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        0,
        8,
        9,
        6
      ],
      "mod_code": [
        "bool factorial ( int a )",
        "cout << factorial ( b ) ;",
        "else else",
        "a >> a >> b ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "bool factorial ( int a )",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        0,
        9,
        6
      ],
      "mod_code": [
        "bool factorial ( int a )",
        "else else",
        "a >> a >> b ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "cout << factorial ( a ) ;",
        "bool factorial ( int a ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0,
        8
      ],
      "mod_code": [
        "cout << factorial ( a ) ;",
        "bool factorial ( int a ) ;",
        "cout << factorial ( b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0,
        8,
        9
      ],
      "mod_code": [
        "cout << factorial ( a ) ;",
        "bool factorial ( int a ) ;",
        "cout << factorial ( b ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0,
        8,
        6
      ],
      "mod_code": [
        "cout << factorial ( a ) ;",
        "bool factorial ( int a ) ;",
        "cout << factorial ( b ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0,
        9
      ],
      "mod_code": [
        "cout << factorial ( a ) ;",
        "bool factorial ( int a ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0,
        9,
        6
      ],
      "mod_code": [
        "cout << factorial ( a ) ;",
        "bool factorial ( int a ) ;",
        "else else",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        0,
        6
      ],
      "mod_code": [
        "cout << factorial ( a ) ;",
        "bool factorial ( int a ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        8,
        9
      ],
      "mod_code": [
        "cout << factorial ( a ) ;",
        "cout << factorial ( b ) ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        8,
        9,
        6
      ],
      "mod_code": [
        "cout << factorial ( a ) ;",
        "cout << factorial ( b ) ;",
        "else else",
        "a >> a >> b ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "cout << factorial ( a ) ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        9,
        6
      ],
      "mod_code": [
        "cout << factorial ( a ) ;",
        "else else",
        "a >> a >> b ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "bool factorial ( int a ) ;",
        "cout << factorial ( b ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        9
      ],
      "mod_code": [
        "bool factorial ( int a ) ;",
        "cout << factorial ( b ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        9,
        6
      ],
      "mod_code": [
        "bool factorial ( int a ) ;",
        "cout << factorial ( b ) ;",
        "else else",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8,
        6
      ],
      "mod_code": [
        "bool factorial ( int a ) ;",
        "cout << factorial ( b ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "bool factorial ( int a ) ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        9,
        6
      ],
      "mod_code": [
        "bool factorial ( int a ) ;",
        "else else",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "bool factorial ( int a ) ;",
        "a >> a >> b ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "cout << factorial ( b ) ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        9,
        6
      ],
      "mod_code": [
        "cout << factorial ( b ) ;",
        "else else",
        "a >> a >> b ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "else else",
        "a >> a >> b ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}