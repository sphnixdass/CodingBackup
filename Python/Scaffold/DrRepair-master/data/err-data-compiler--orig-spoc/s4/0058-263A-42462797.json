{
  "meta": {
    "index": 58,
    "hitid": "3DA79LNS59P286V28TL5D1NELQ73TP",
    "workerid": "AIWEXPJAU66D9",
    "probid": "263A",
    "subid": "42462797"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare new 2d array of integers a with size 6 by 6",
      "code": "int a [ 6 ] [ 6 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create integer variables x and y = 0",
      "code": "int x = 0 , y = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "in a for loop , change i from 1 to 5 inclusive",
      "code": "for ( int i = 1 ; i <= 5 ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "start for loop from j = 1 to 5 inclusive , read standard input to a [ i ] [ j ] on each iteration",
      "code": "for ( int j = 1 ; j <= 5 ; j ++ ) { cin >> a [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "start for loop from i = 1 to 5 inclusive incrementing i",
      "code": "for ( int i = 1 ; i <= 5 ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for integer j = 1 to 5 inclusive incrementing j",
      "code": "for ( int j = 1 ; j <= 5 ; j ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if a [ i ] [ j ] is equal to 1",
      "code": "if ( a [ i ] [ j ] == 1 )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "assign i to x",
      "code": "x = i ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "set y to j",
      "code": "y = j ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "create integer variable ans = abs ( 3 - x ) + abs ( 3 - y )",
      "code": "int ans = abs ( 3 - x ) + abs ( 3 - y ) ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "int x = i ;",
        "for ( i = 1 ; i <= 5 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        6,
        15
      ],
      "mod_code": [
        "int x = i ;",
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "cout << ans ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        6,
        15,
        8
      ],
      "mod_code": [
        "int x = i ;",
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "cout << ans ;",
        "if ( a [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        6,
        15,
        14
      ],
      "mod_code": [
        "int x = i ;",
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "cout << ans ;",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        6,
        15,
        0
      ],
      "mod_code": [
        "int x = i ;",
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "cout << ans ;",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        6,
        8
      ],
      "mod_code": [
        "int x = i ;",
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "if ( a [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        6,
        8,
        14
      ],
      "mod_code": [
        "int x = i ;",
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        6,
        8,
        0
      ],
      "mod_code": [
        "int x = i ;",
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        6,
        14
      ],
      "mod_code": [
        "int x = i ;",
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        6,
        14,
        0
      ],
      "mod_code": [
        "int x = i ;",
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        6,
        0
      ],
      "mod_code": [
        "int x = i ;",
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        15,
        8,
        14
      ],
      "mod_code": [
        "int x = i ;",
        "cout << ans ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15,
        8,
        0
      ],
      "mod_code": [
        "int x = i ;",
        "cout << ans ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        15,
        14
      ],
      "mod_code": [
        "int x = i ;",
        "cout << ans ;",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        15,
        14,
        0
      ],
      "mod_code": [
        "int x = i ;",
        "cout << ans ;",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        15,
        0
      ],
      "mod_code": [
        "int x = i ;",
        "cout << ans ;",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        8,
        14
      ],
      "mod_code": [
        "int x = i ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        8,
        14,
        0
      ],
      "mod_code": [
        "int x = i ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        8,
        0
      ],
      "mod_code": [
        "int x = i ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "int x = i ;",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        0
      ],
      "mod_code": [
        "int x = i ;",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "int x = i ;",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "cout << ans ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        15,
        8
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "cout << ans ;",
        "if ( a [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        15,
        8,
        14
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "cout << ans ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        15,
        8,
        0
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "cout << ans ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        15,
        14
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "cout << ans ;",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        15,
        14,
        0
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "cout << ans ;",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        15,
        0
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "cout << ans ;",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "if ( a [ i ] [ j ] == ' 1 ' )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        14
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        14,
        0
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        8,
        0
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        14,
        0
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        0
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 5 ; i ++ )",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        8,
        14
      ],
      "mod_code": [
        "cout << ans ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        8,
        14,
        0
      ],
      "mod_code": [
        "cout << ans ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        8,
        0
      ],
      "mod_code": [
        "cout << ans ;",
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        14
      ],
      "mod_code": [
        "cout << ans ;",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        14,
        0
      ],
      "mod_code": [
        "cout << ans ;",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        0
      ],
      "mod_code": [
        "cout << ans ;",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        14,
        0
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 1 ' )",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    },
    {
      "mod_line": [
        14,
        0
      ],
      "mod_code": [
        "ans = abs ( 3 - x ) + abs ( 3 - y ) ;",
        "int a [ 6 ] [ 6 6 ] ;"
      ],
      "err_line": 0,
      "err_msg": "expected ‘]’ before numeric constant"
    }
  ]
}