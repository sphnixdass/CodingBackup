{
  "meta": {
    "index": 939,
    "hitid": "391FPZIE4CGW2RHQNJ0HMRAQN9VUHD",
    "workerid": "AIWEXPJAU66D9",
    "probid": "275A",
    "subid": "48454309"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "curr is a 2d array of integers 3 by 3 with elements 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1",
      "code": "int curr [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "actions is a 2d array of integers 3 by 3",
      "code": "int actions [ 3 ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for j = 0 to 3 exclusive , read actions [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < 3 ; j ++ ) { cin >> actions [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for j = 0 to 3 exclusive",
      "code": "for ( int j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if actions [ i ] [ j ] is odd",
      "code": "if ( actions [ i ] [ j ] % 2 == 1 )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if curr [ i ] [ j ] = 1",
      "code": "if ( curr [ i ] [ j ] == 1 )",
      "indent": 4
    },
    {
      "line": 10,
      "text": "set curr [ i ] [ j ] to 0",
      "code": "curr [ i ] [ j ] = 0 ;",
      "indent": 5
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 12,
      "text": "assign 1 to curr [ i ] [ j ]",
      "code": "curr [ i ] [ j ] = 1 ;",
      "indent": 5
    },
    {
      "line": 13,
      "text": "if j is greater than 0",
      "code": "if ( j > 0 )",
      "indent": 4
    },
    {
      "line": 14,
      "text": "if curr [ i ] [ j - 1 ] = 1",
      "code": "if ( curr [ i ] [ j - 1 ] == 1 )",
      "indent": 5
    },
    {
      "line": 15,
      "text": "assign 0 to curr [ i ] [ j - 1 ]",
      "code": "curr [ i ] [ j - 1 ] = 0 ;",
      "indent": 6
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 17,
      "text": "assign 1 to curr [ i ] [ j - 1 ]",
      "code": "curr [ i ] [ j - 1 ] = 1 ;",
      "indent": 6
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 19,
      "text": "if i is greater than 0",
      "code": "if ( i > 0 )",
      "indent": 4
    },
    {
      "line": 20,
      "text": "if curr [ i - 1 ] [ j ] = 1",
      "code": "if ( curr [ i - 1 ] [ j ] == 1 )",
      "indent": 5
    },
    {
      "line": 21,
      "text": "assign 0 to curr [ i - 1 ] [ j ]",
      "code": "curr [ i - 1 ] [ j ] = 0 ;",
      "indent": 6
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 23,
      "text": "assign 1 to curr [ i - 1 ] [ j ]",
      "code": "curr [ i - 1 ] [ j ] = 1 ;",
      "indent": 6
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 25,
      "text": "if j is less than 2",
      "code": "if ( j < 2 )",
      "indent": 4
    },
    {
      "line": 26,
      "text": "if curr [ i ] [ j + 1 ] = 1",
      "code": "if ( curr [ i ] [ j + 1 ] == 1 )",
      "indent": 5
    },
    {
      "line": 27,
      "text": "change curr [ i ] [ j + 1 ] to 0",
      "code": "curr [ i ] [ j + 1 ] = 0 ;",
      "indent": 6
    },
    {
      "line": 28,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 29,
      "text": "change curr [ i ] [ j + 1 ] to 1",
      "code": "curr [ i ] [ j + 1 ] = 1 ;",
      "indent": 6
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 31,
      "text": "if i is less than 2",
      "code": "if ( i < 2 )",
      "indent": 4
    },
    {
      "line": 32,
      "text": "if curr [ i + 1 ] [ j ] is equal to 1",
      "code": "if ( curr [ i + 1 ] [ j ] == 1 )",
      "indent": 5
    },
    {
      "line": 33,
      "text": "assign 0 to curr [ i + 1 ] [ j ]",
      "code": "curr [ i + 1 ] [ j ] = 0 ;",
      "indent": 6
    },
    {
      "line": 34,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 35,
      "text": "assign 1 to curr [ i + 1 ] [ j ]",
      "code": "curr [ i + 1 ] [ j ] = 1 ;",
      "indent": 6
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 40,
      "text": "for i from 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 41,
      "text": "for j = 0 to 3 exclusive , print curr [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < 3 ; j ++ ) { cout << curr [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 42,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int curr [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;"
      ],
      "err_line": 1,
      "err_msg": "too many initializers for ‘int [3]’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int actions [ 3 ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "if ( curr [ i ] [ j - 1 ] ] == 1 )"
      ],
      "err_line": 14,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "curr [ ( i ] [ j + 1 ] = 1 ) ;"
      ],
      "err_line": 29,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 40,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        21
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "char curr = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        21,
        34
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "char curr = 0 ;",
        "else ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        21,
        34,
        16
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "char curr = 0 ;",
        "else ;",
        "else ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        21,
        34,
        10
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "char curr = 0 ;",
        "else ;",
        "curr [ i ] [ j ] = ' 0 ' ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        21,
        34,
        40
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "char curr = 0 ;",
        "else ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        21,
        16
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "char curr = 0 ;",
        "else ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        21,
        16,
        10
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "char curr = 0 ;",
        "else ;",
        "curr [ i ] [ j ] = ' 0 ' ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        21,
        16,
        40
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "char curr = 0 ;",
        "else ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        21,
        10
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "char curr = 0 ;",
        "curr [ i ] [ j ] = ' 0 ' ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        21,
        10,
        40
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "char curr = 0 ;",
        "curr [ i ] [ j ] = ' 0 ' ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        21,
        40
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "char curr = 0 ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        34
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "else ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        34,
        16
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "else ;",
        "else ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        34,
        16,
        10
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "else ;",
        "else ;",
        "curr [ i ] [ j ] = ' 0 ' ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        34,
        16,
        40
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "else ;",
        "else ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        34,
        10
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "else ;",
        "curr [ i ] [ j ] = ' 0 ' ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        34,
        10,
        40
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "else ;",
        "curr [ i ] [ j ] = ' 0 ' ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        34,
        40
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "else ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "else ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        16,
        10
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "else ;",
        "curr [ i ] [ j ] = ' 0 ' ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        16,
        10,
        40
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "else ;",
        "curr [ i ] [ j ] = ' 0 ' ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        16,
        40
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "else ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "curr [ i ] [ j ] = ' 0 ' ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        40
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "curr [ i ] [ j ] = ' 0 ' ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        40
      ],
      "mod_code": [
        "int curr [ ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        21,
        34,
        16,
        40
      ],
      "mod_code": [
        "char curr = 0 ;",
        "else ;",
        "else ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 40,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        21,
        34,
        10,
        40
      ],
      "mod_code": [
        "char curr = 0 ;",
        "else ;",
        "curr [ i ] [ j ] = ' 0 ' ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 40,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        21,
        34,
        40
      ],
      "mod_code": [
        "char curr = 0 ;",
        "else ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 40,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        21,
        16,
        10,
        40
      ],
      "mod_code": [
        "char curr = 0 ;",
        "else ;",
        "curr [ i ] [ j ] = ' 0 ' ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 40,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        21,
        16,
        40
      ],
      "mod_code": [
        "char curr = 0 ;",
        "else ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 40,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        21,
        10,
        40
      ],
      "mod_code": [
        "char curr = 0 ;",
        "curr [ i ] [ j ] = ' 0 ' ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 40,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        21,
        40
      ],
      "mod_code": [
        "char curr = 0 ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 40,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        34,
        16,
        10,
        40
      ],
      "mod_code": [
        "else ;",
        "else ;",
        "curr [ i ] [ j ] = ' 0 ' ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 40,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        34,
        16,
        40
      ],
      "mod_code": [
        "else ;",
        "else ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 40,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        34,
        10,
        40
      ],
      "mod_code": [
        "else ;",
        "curr [ i ] [ j ] = ' 0 ' ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 40,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        34,
        40
      ],
      "mod_code": [
        "else ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 40,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        10,
        40
      ],
      "mod_code": [
        "else ;",
        "curr [ i ] [ j ] = ' 0 ' ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 40,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        40
      ],
      "mod_code": [
        "else ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 40,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        40
      ],
      "mod_code": [
        "curr [ i ] [ j ] = ' 0 ' ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 40,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}