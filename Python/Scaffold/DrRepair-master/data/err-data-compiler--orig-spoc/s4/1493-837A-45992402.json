{
  "meta": {
    "index": 1493,
    "hitid": "3BA7SXOG1JKBTOOGGLB643U7DR8R8Y",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "837A",
    "subid": "45992402"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "make ints n , i , m = 0 , and c = 0",
      "code": "int n , i , m = 0 , c = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create string str",
      "code": "string str ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "call getchar ( )",
      "code": "getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read str",
      "code": "getline ( cin , str ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if isupper ( str [ i ] ) is truthy , increment c",
      "code": "if ( isupper ( str [ i ] ) ) c ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set m to max of c and m",
      "code": "m = max ( c , m ) ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if str [ i ] is equal to ' ' , set c to 0",
      "code": "if ( str [ i ] == ' ' ) c = 0 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print m",
      "code": "cout << m << endl ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char str ;"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "getchar ( ) ; )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "char str ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        2,
        4
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "char str ;",
        "getchar ( ) ; )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        5
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "char str ;",
        "getchar ( ) ; )",
        "gets ( str ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        3
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "char str ;",
        "getchar ( ) ; )",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        8
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "char str ;",
        "getchar ( ) ; )",
        "m = max ( m , m ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "char str ;",
        "gets ( str ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        3
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "char str ;",
        "gets ( str ) ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        8
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "char str ;",
        "gets ( str ) ;",
        "m = max ( m , m ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "char str ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        8
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "char str ;",
        "while ( cin >> n )",
        "m = max ( m , m ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        2,
        8
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "char str ;",
        "m = max ( m , m ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "getchar ( ) ; )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        4,
        5
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "getchar ( ) ; )",
        "gets ( str ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        3
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "getchar ( ) ; )",
        "gets ( str ) ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        4,
        5,
        8
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "getchar ( ) ; )",
        "gets ( str ) ;",
        "m = max ( m , m ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        4,
        3
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "getchar ( ) ; )",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        4,
        3,
        8
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "getchar ( ) ; )",
        "while ( cin >> n )",
        "m = max ( m , m ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        4,
        8
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "getchar ( ) ; )",
        "m = max ( m , m ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "gets ( str ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        5,
        3
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "gets ( str ) ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        5,
        3,
        8
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "gets ( str ) ;",
        "while ( cin >> n )",
        "m = max ( m , m ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        5,
        8
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "gets ( str ) ;",
        "m = max ( m , m ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        3,
        8
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "while ( cin >> n )",
        "m = max ( m , m ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int n , i , m , c = 0 , c = 0 ;",
        "m = max ( m , m ) ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "char str ;",
        "getchar ( ) ; )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        5
      ],
      "mod_code": [
        "char str ;",
        "getchar ( ) ; )",
        "gets ( str ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        3
      ],
      "mod_code": [
        "char str ;",
        "getchar ( ) ; )",
        "gets ( str ) ;",
        "while ( cin >> n )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        8
      ],
      "mod_code": [
        "char str ;",
        "getchar ( ) ; )",
        "gets ( str ) ;",
        "m = max ( m , m ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        3
      ],
      "mod_code": [
        "char str ;",
        "getchar ( ) ; )",
        "while ( cin >> n )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        3,
        8
      ],
      "mod_code": [
        "char str ;",
        "getchar ( ) ; )",
        "while ( cin >> n )",
        "m = max ( m , m ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        8
      ],
      "mod_code": [
        "char str ;",
        "getchar ( ) ; )",
        "m = max ( m , m ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "char str ;",
        "gets ( str ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5,
        3
      ],
      "mod_code": [
        "char str ;",
        "gets ( str ) ;",
        "while ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5,
        3,
        8
      ],
      "mod_code": [
        "char str ;",
        "gets ( str ) ;",
        "while ( cin >> n )",
        "m = max ( m , m ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5,
        8
      ],
      "mod_code": [
        "char str ;",
        "gets ( str ) ;",
        "m = max ( m , m ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "char str ;",
        "while ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        2,
        3,
        8
      ],
      "mod_code": [
        "char str ;",
        "while ( cin >> n )",
        "m = max ( m , m ) ;"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "char str ;",
        "m = max ( m , m ) ;"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘getline(std::istream&, char&)’"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "getchar ( ) ; )",
        "gets ( str ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        5,
        3
      ],
      "mod_code": [
        "getchar ( ) ; )",
        "gets ( str ) ;",
        "while ( cin >> n )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        5,
        3,
        8
      ],
      "mod_code": [
        "getchar ( ) ; )",
        "gets ( str ) ;",
        "while ( cin >> n )",
        "m = max ( m , m ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        5,
        8
      ],
      "mod_code": [
        "getchar ( ) ; )",
        "gets ( str ) ;",
        "m = max ( m , m ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "getchar ( ) ; )",
        "while ( cin >> n )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        3,
        8
      ],
      "mod_code": [
        "getchar ( ) ; )",
        "while ( cin >> n )",
        "m = max ( m , m ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "getchar ( ) ; )",
        "m = max ( m , m ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "gets ( str ) ;",
        "while ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        3,
        8
      ],
      "mod_code": [
        "gets ( str ) ;",
        "while ( cin >> n )",
        "m = max ( m , m ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "gets ( str ) ;",
        "m = max ( m , m ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}