{
  "meta": {
    "index": 934,
    "hitid": "36JW4WBR06E7J9K0SU5I0R9NDMGHF1",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "275A",
    "subid": "31373135"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "arr = two dimensional int array of sizes 3 and 3 with all values set to 0",
      "code": "int arr [ 3 ] [ 3 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "light = two dimensional int array of sizes 3 and 3 with all values set to 0",
      "code": "int light [ 3 ] [ 3 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to 3",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for j = 0 to 3",
      "code": "for ( int j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "read arr [ i ] [ j ]",
      "code": "cin >> arr [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "set light [ i ] [ j ] to 1",
      "code": "light [ i ] [ j ] = 1 ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "R = int array with the values 0 , 0 , 0 , - 1 , 1",
      "code": "int R [ ] = { 0 , 0 , 0 , - 1 , 1 } ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "C = int array with the values 0 , - 1 , 1 , 0 , 0",
      "code": "int C [ ] = { 0 , - 1 , 1 , 0 , 0 } ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 0 to 3",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for j = 0 to 3",
      "code": "for ( int j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if arr [ i ] [ j ] is uneven",
      "code": "if ( arr [ i ] [ j ] % 2 != 0 )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "for k = 0 to 5",
      "code": "for ( int k = 0 ; k < 5 ; k ++ )",
      "indent": 4
    },
    {
      "line": 15,
      "text": "n_i = int with n_i = i + R [ k ]",
      "code": "int n_i = i + R [ k ] ;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "n_j = int with n_j = j + C [ k ]",
      "code": "int n_j = j + C [ k ] ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "if n_i is greater or equal to 0 and less than 3 and n_j is greater or equal to 0 and less than 3",
      "code": "if ( n_i >= 0 && n_i < 3 && n_j >= 0 && n_j < 3 )",
      "indent": 5
    },
    {
      "line": 18,
      "text": "if light [ n_i ] [ n_j ] is 1",
      "code": "if ( light [ n_i ] [ n_j ] )",
      "indent": 6
    },
    {
      "line": 19,
      "text": "set light [ n_i ] [ n_j ] to 0",
      "code": "light [ n_i ] [ n_j ] = 0 ;",
      "indent": 7
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 6
    },
    {
      "line": 21,
      "text": "set light [ n_i ] [ n_j ] to 1",
      "code": "light [ n_i ] [ n_j ] = 1 ;",
      "indent": 7
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "for i = 0 to 3",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 28,
      "text": "for j = 0 to 3 print light [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < 3 ; j ++ ) { cout << light [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 29,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int light [ 3 ] = { 0 } ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int R [ 4 ] = { 0 , 0 , 0 , - 1 , 1 } ;"
      ],
      "err_line": 9,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( k = 0 ; k < 5 ; k ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "int n_i = i + R + R ;"
      ],
      "err_line": 15,
      "err_msg": "invalid operands of types ‘int*’ and ‘int [5]’ to binary ‘operator+’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "int n_j += C [ k ] ;"
      ],
      "err_line": 16,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [3]’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "light [ ' n_i ' ] = 1 ;"
      ],
      "err_line": 21,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [3]’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 27,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "int light [ 3 ] = { 0 } ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        17
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "int light [ 3 ] = { 0 } ;",
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        17,
        12
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "int light [ 3 ] = { 0 } ;",
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        17,
        11
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "int light [ 3 ] = { 0 } ;",
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        17,
        19
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "int light [ 3 ] = { 0 } ;",
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        12
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "int light [ 3 ] = { 0 } ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        12,
        11
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "int light [ 3 ] = { 0 } ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        12,
        19
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "int light [ 3 ] = { 0 } ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        11
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "int light [ 3 ] = { 0 } ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        11,
        19
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "int light [ 3 ] = { 0 } ;",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        19
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "int light [ 3 ] = { 0 } ;",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        17
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        17,
        12
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        17,
        12,
        11
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        17,
        12,
        19
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        17,
        11
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        17,
        11,
        19
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        17,
        19
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        11
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        11,
        19
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        19
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        11,
        19
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        19
      ],
      "mod_code": [
        "int arr [ 3 ] = { 0 } ;",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        17
      ],
      "mod_code": [
        "int light [ 3 ] = { 0 } ;",
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        17,
        12
      ],
      "mod_code": [
        "int light [ 3 ] = { 0 } ;",
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        17,
        12,
        11
      ],
      "mod_code": [
        "int light [ 3 ] = { 0 } ;",
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        17,
        12,
        19
      ],
      "mod_code": [
        "int light [ 3 ] = { 0 } ;",
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        17,
        11
      ],
      "mod_code": [
        "int light [ 3 ] = { 0 } ;",
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        17,
        11,
        19
      ],
      "mod_code": [
        "int light [ 3 ] = { 0 } ;",
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        17,
        19
      ],
      "mod_code": [
        "int light [ 3 ] = { 0 } ;",
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "int light [ 3 ] = { 0 } ;",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        12,
        11
      ],
      "mod_code": [
        "int light [ 3 ] = { 0 } ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        12,
        11,
        19
      ],
      "mod_code": [
        "int light [ 3 ] = { 0 } ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        12,
        19
      ],
      "mod_code": [
        "int light [ 3 ] = { 0 } ;",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "int light [ 3 ] = { 0 } ;",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        11,
        19
      ],
      "mod_code": [
        "int light [ 3 ] = { 0 } ;",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        19
      ],
      "mod_code": [
        "int light [ 3 ] = { 0 } ;",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        17,
        12
      ],
      "mod_code": [
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "for ( j = 0 ; j < 3 ; j ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        12,
        11
      ],
      "mod_code": [
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        12,
        11,
        19
      ],
      "mod_code": [
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        12,
        19
      ],
      "mod_code": [
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "for ( j = 0 ; j < 3 ; j ++ )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        11
      ],
      "mod_code": [
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        11,
        19
      ],
      "mod_code": [
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        19
      ],
      "mod_code": [
        "if ( n_i >= 0 && n_j >= 0 && n_j < 3 )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 19,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [3]’"
    },
    {
      "mod_line": [
        12,
        11
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        11,
        19
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )",
        "for ( i = 0 ; i < 3 ; i ++ )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        19
      ],
      "mod_code": [
        "for ( j = 0 ; j < 3 ; j ++ )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        19
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )",
        "light [ ' n_i ' ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}