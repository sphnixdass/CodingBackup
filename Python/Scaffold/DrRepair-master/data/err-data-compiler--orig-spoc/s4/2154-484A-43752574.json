{
  "meta": {
    "index": 2154,
    "hitid": "3A520CCNWNU038CQRDBK1N1JOQBAE1",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "484A",
    "subid": "43752574"
  },
  "lines": [
    {
      "line": 0,
      "text": "create int arrays a [ 100010 ] , b [ 10010 ] , d [ 10010 ]",
      "code": "int a [ 100010 ] , b [ 10010 ] , d [ 10010 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let n , i , x1 , x2 , t , j be integers",
      "code": "int n , i , x1 , x2 , t , j ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create long long l , r , s and k",
      "code": "long long l , r , s , k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while decrement n",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "x1 = 0",
      "code": "x1 = 0 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "assign 0 to t",
      "code": "t = 0 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set x2 to 0",
      "code": "x2 = 0 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set s = 0",
      "code": "s = 0 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "read l and r",
      "code": "cin >> l >> r ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set a to all 0",
      "code": "memset ( a , 0 , sizeof ( a ) ) ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set b to all 0",
      "code": "memset ( b , 0 , sizeof ( b ) ) ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "assign 0 to all elements of d",
      "code": "memset ( d , 0 , sizeof ( d ) ) ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "while l is different from 0",
      "code": "while ( l )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "a [ + + x1 ] = l %",
      "code": "a [ ++ x1 ] = l % 2 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "set l to itself shifted by one bit to the right",
      "code": "l >>= 1 ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "while r different from 0",
      "code": "while ( r )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "b [ + + x2 ] = r mod 2",
      "code": "b [ ++ x2 ] = r % 2 ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "set r to itself shifted by one bit to the right",
      "code": "r >>= 1 ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "for i = max of x1 and x2 to 1 inclusive",
      "code": "for ( i = max ( x1 , x2 ) ; i >= 1 ; i -- )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if a [ i ] equalt o b [ i ]",
      "code": "if ( a [ i ] == b [ i ] )",
      "indent": 3
    },
    {
      "line": 24,
      "text": "set d [ i ] to a [ i ]",
      "code": "d [ i ] = a [ i ] ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 26,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "for j = i to 1 inclusive",
      "code": "for ( j = i ; j >= 1 ; j -- )",
      "indent": 2
    },
    {
      "line": 29,
      "text": "set d [ j ] to 1",
      "code": "d [ j ] = 1 ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "if b [ j ] equal to 0 , assign 1 to t",
      "code": "if ( b [ j ] == 0 ) t = 1 ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 32,
      "text": "if t = 1 , assign 0 to d [ i ]",
      "code": "if ( t == 1 ) d [ i ] = 0 ;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "for i = 1 max ( x1 , x2 ) and for k = 1 with increment of k = k * 2 , set s to s + d [ i ] * k",
      "code": "for ( i = 1 , k = 1 ; i <= max ( x1 , x2 ) ; i ++ , k = k * 2 ) s = s + d [ i ] * k ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "print s",
      "code": "cout << s << endl ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int a [ 100010 ] , b [ 10010 ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "memset ( b , 0 , b ) ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int*’ to ‘size_t {aka long unsigned int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "d . clear ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘clear’ in ‘d’, which is of non-class type ‘int [10010]’"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "char d [ i ] = a [ i ] ;"
      ],
      "err_line": 24,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        15,
        16,
        19
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15,
        16,
        19,
        20
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15,
        16,
        19,
        22
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15,
        16,
        19,
        23
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "if ( a [ i ] % b [ i ] )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15,
        16,
        19,
        28
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int j = i ; j <= 1 ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15,
        16,
        19,
        33
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15,
        19
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "b [ ++ + x2 ] = r % 2 ;"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15,
        19,
        20
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15,
        19,
        20,
        22
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15,
        19,
        20,
        23
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;",
        "if ( a [ i ] % b [ i ] )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15,
        19,
        20,
        28
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;",
        "for ( int j = i ; j <= 1 ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15,
        19,
        20,
        33
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15,
        19,
        22
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15,
        19,
        22,
        23
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )",
        "if ( a [ i ] % b [ i ] )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15,
        19,
        22,
        28
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )",
        "for ( int j = i ; j <= 1 ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15,
        19,
        22,
        33
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15,
        19,
        23
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "if ( a [ i ] % b [ i ] )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15,
        19,
        23,
        28
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "if ( a [ i ] % b [ i ] )",
        "for ( int j = i ; j <= 1 ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15,
        19,
        23,
        33
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "if ( a [ i ] % b [ i ] )",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15,
        19,
        28
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int j = i ; j <= 1 ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15,
        19,
        28,
        33
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int j = i ; j <= 1 ; j ++ )",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15,
        19,
        33
      ],
      "mod_code": [
        "a [ ++ x1 ] = l % l ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        16,
        19
      ],
      "mod_code": [
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        16,
        19,
        20
      ],
      "mod_code": [
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        16,
        19,
        20,
        22
      ],
      "mod_code": [
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        16,
        19,
        20,
        23
      ],
      "mod_code": [
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;",
        "if ( a [ i ] % b [ i ] )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        16,
        19,
        20,
        28
      ],
      "mod_code": [
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;",
        "for ( int j = i ; j <= 1 ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        16,
        19,
        20,
        33
      ],
      "mod_code": [
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        16,
        19,
        22
      ],
      "mod_code": [
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        16,
        19,
        22,
        23
      ],
      "mod_code": [
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )",
        "if ( a [ i ] % b [ i ] )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        16,
        19,
        22,
        28
      ],
      "mod_code": [
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )",
        "for ( int j = i ; j <= 1 ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        16,
        19,
        22,
        33
      ],
      "mod_code": [
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        16,
        19,
        23
      ],
      "mod_code": [
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "if ( a [ i ] % b [ i ] )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        16,
        19,
        23,
        28
      ],
      "mod_code": [
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "if ( a [ i ] % b [ i ] )",
        "for ( int j = i ; j <= 1 ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        16,
        19,
        23,
        33
      ],
      "mod_code": [
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "if ( a [ i ] % b [ i ] )",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        16,
        19,
        28
      ],
      "mod_code": [
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int j = i ; j <= 1 ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        16,
        19,
        28,
        33
      ],
      "mod_code": [
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int j = i ; j <= 1 ; j ++ )",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        16,
        19,
        33
      ],
      "mod_code": [
        "l += 1 ;",
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        20
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        20,
        22
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        20,
        22,
        23
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )",
        "if ( a [ i ] % b [ i ] )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        20,
        22,
        28
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )",
        "for ( int j = i ; j <= 1 ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        20,
        22,
        33
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        20,
        23
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;",
        "if ( a [ i ] % b [ i ] )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        20,
        23,
        28
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;",
        "if ( a [ i ] % b [ i ] )",
        "for ( int j = i ; j <= 1 ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        20,
        23,
        33
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;",
        "if ( a [ i ] % b [ i ] )",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        20,
        28
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;",
        "for ( int j = i ; j <= 1 ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        20,
        28,
        33
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;",
        "for ( int j = i ; j <= 1 ; j ++ )",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        20,
        33
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "r += 1 ;",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        22
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        22,
        23
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )",
        "if ( a [ i ] % b [ i ] )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        22,
        23,
        28
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )",
        "if ( a [ i ] % b [ i ] )",
        "for ( int j = i ; j <= 1 ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        22,
        23,
        33
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )",
        "if ( a [ i ] % b [ i ] )",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        22,
        28
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )",
        "for ( int j = i ; j <= 1 ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        22,
        28,
        33
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )",
        "for ( int j = i ; j <= 1 ; j ++ )",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        22,
        33
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int i = max ( x1 , x2 ) ; i <= 1 ; i ++ )",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        23
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "if ( a [ i ] % b [ i ] )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        23,
        28
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "if ( a [ i ] % b [ i ] )",
        "for ( int j = i ; j <= 1 ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        23,
        28,
        33
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "if ( a [ i ] % b [ i ] )",
        "for ( int j = i ; j <= 1 ; j ++ )",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        23,
        33
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "if ( a [ i ] % b [ i ] )",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        28
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int j = i ; j <= 1 ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        28,
        33
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int j = i ; j <= 1 ; j ++ )",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        19,
        33
      ],
      "mod_code": [
        "b [ ++ + x2 ] = r % 2 ;",
        "for ( int i = 1 ; i <= max ( x1 , x2 ) ; i ++ ) { s += d [ i ] * k ; }"
      ],
      "err_line": 19,
      "err_msg": "lvalue required as increment operand"
    }
  ]
}