{
  "meta": {
    "index": 1869,
    "hitid": "32204AGAAB6DX9GV3EB0IC9ZE1MGH5",
    "workerid": "AIWEXPJAU66D9",
    "probid": "514A",
    "subid": "48619517"
  },
  "lines": [
    {
      "line": 0,
      "text": "function check with int arguments x and y that returns int",
      "code": "int check ( int x , int y )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if x < = y , return x",
      "code": "if ( x <= y ) return x ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return y",
      "code": "return y ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "define strings s and p with p = \" \"",
      "code": "string s , p = \" \" ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "declare int variables i and j",
      "code": "int i , j ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read variable s from the input",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "assign the new value = s to p",
      "code": "p = s ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = length of s - 1 to 0 counting down",
      "code": "for ( i = s . size ( ) - 1 ; i > 0 ; i -- )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "change j to the result of check ( s [ i ] - ' 0 ' , 9 - ( s [ i ] - ' 0 ' ) )",
      "code": "j = check ( s [ i ] - ' 0 ' , 9 - ( s [ i ] - ' 0 ' ) ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "assign the new value = ( j + ' 0 ' ) casted to char , to p [ i ]",
      "code": "p [ i ] = ( char ) ( j + ' 0 ' ) ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "change j to 9 - ( s [ 0 ] - ' 0 ' )",
      "code": "j = 9 - ( s [ 0 ] - ' 0 ' ) ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if j is not 0",
      "code": "if ( j )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "assign the returned value of check ( s [ 0 ] - ' 0 ' , 9 - ( s [ 0 ] - ' 0 ' ) ) to j",
      "code": "j = check ( s [ 0 ] - ' 0 ' , 9 - ( s [ 0 ] - ' 0 ' ) ) ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "change p [ 0 ] to ( j + ' 0 ' ) casted to char",
      "code": "p [ 0 ] = ( char ) ( j + ' 0 ' ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print p",
      "code": "cout << p << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int check ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int i , j j ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘j’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "j = check ( s [ i ] - ' 0 ' ) ;"
      ],
      "err_line": 10,
      "err_msg": "too few arguments to function ‘int check(int, int)’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "p [ i ] = ( char ) p + ( j + ' 0 ' ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid cast from type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to type ‘char’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "j = check ( s [ 0 ] - ' 0 ' ) ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int check(int, int)’"
    },
    {
      "mod_line": [
        9,
        15
      ],
      "mod_code": [
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- )",
        "j = check ( s [ 0 ] - ' 0 ' ) ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int check(int, int)’"
    },
    {
      "mod_line": [
        9,
        15,
        0
      ],
      "mod_code": [
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- )",
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "int check ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        15,
        0,
        13
      ],
      "mod_code": [
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- )",
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "int check ( int x , int y ) ;",
        "j -= ( s [ 0 ] - ' 0 ' ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        15,
        0,
        7
      ],
      "mod_code": [
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- )",
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "int check ( int x , int y ) ;",
        "cin . get ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        15,
        0,
        8
      ],
      "mod_code": [
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- )",
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "int check ( int x , int y ) ;",
        "p = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        15,
        13
      ],
      "mod_code": [
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- )",
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "j -= ( s [ 0 ] - ' 0 ' ) ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int check(int, int)’"
    },
    {
      "mod_line": [
        9,
        15,
        13,
        7
      ],
      "mod_code": [
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- )",
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "j -= ( s [ 0 ] - ' 0 ' ) ;",
        "cin . get ( ) ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int check(int, int)’"
    },
    {
      "mod_line": [
        9,
        15,
        13,
        8
      ],
      "mod_code": [
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- )",
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "j -= ( s [ 0 ] - ' 0 ' ) ;",
        "p = 1 ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int check(int, int)’"
    },
    {
      "mod_line": [
        9,
        15,
        7
      ],
      "mod_code": [
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- )",
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "cin . get ( ) ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int check(int, int)’"
    },
    {
      "mod_line": [
        9,
        15,
        7,
        8
      ],
      "mod_code": [
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- )",
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "cin . get ( ) ;",
        "p = 1 ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int check(int, int)’"
    },
    {
      "mod_line": [
        9,
        15,
        8
      ],
      "mod_code": [
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- )",
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "p = 1 ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int check(int, int)’"
    },
    {
      "mod_line": [
        9,
        0
      ],
      "mod_code": [
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- )",
        "int check ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0,
        13
      ],
      "mod_code": [
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- )",
        "int check ( int x , int y ) ;",
        "j -= ( s [ 0 ] - ' 0 ' ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0,
        13,
        7
      ],
      "mod_code": [
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- )",
        "int check ( int x , int y ) ;",
        "j -= ( s [ 0 ] - ' 0 ' ) ;",
        "cin . get ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0,
        13,
        8
      ],
      "mod_code": [
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- )",
        "int check ( int x , int y ) ;",
        "j -= ( s [ 0 ] - ' 0 ' ) ;",
        "p = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0,
        7
      ],
      "mod_code": [
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- )",
        "int check ( int x , int y ) ;",
        "cin . get ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0,
        7,
        8
      ],
      "mod_code": [
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- )",
        "int check ( int x , int y ) ;",
        "cin . get ( ) ;",
        "p = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        0,
        8
      ],
      "mod_code": [
        "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- )",
        "int check ( int x , int y ) ;",
        "p = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        0
      ],
      "mod_code": [
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "int check ( int x , int y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        0,
        13
      ],
      "mod_code": [
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "int check ( int x , int y ) ;",
        "j -= ( s [ 0 ] - ' 0 ' ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        0,
        13,
        7
      ],
      "mod_code": [
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "int check ( int x , int y ) ;",
        "j -= ( s [ 0 ] - ' 0 ' ) ;",
        "cin . get ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        0,
        13,
        8
      ],
      "mod_code": [
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "int check ( int x , int y ) ;",
        "j -= ( s [ 0 ] - ' 0 ' ) ;",
        "p = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        0,
        7
      ],
      "mod_code": [
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "int check ( int x , int y ) ;",
        "cin . get ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        0,
        7,
        8
      ],
      "mod_code": [
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "int check ( int x , int y ) ;",
        "cin . get ( ) ;",
        "p = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        0,
        8
      ],
      "mod_code": [
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "int check ( int x , int y ) ;",
        "p = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        15,
        13
      ],
      "mod_code": [
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "j -= ( s [ 0 ] - ' 0 ' ) ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int check(int, int)’"
    },
    {
      "mod_line": [
        15,
        13,
        7
      ],
      "mod_code": [
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "j -= ( s [ 0 ] - ' 0 ' ) ;",
        "cin . get ( ) ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int check(int, int)’"
    },
    {
      "mod_line": [
        15,
        13,
        7,
        8
      ],
      "mod_code": [
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "j -= ( s [ 0 ] - ' 0 ' ) ;",
        "cin . get ( ) ;",
        "p = 1 ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int check(int, int)’"
    },
    {
      "mod_line": [
        15,
        13,
        8
      ],
      "mod_code": [
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "j -= ( s [ 0 ] - ' 0 ' ) ;",
        "p = 1 ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int check(int, int)’"
    },
    {
      "mod_line": [
        15,
        7
      ],
      "mod_code": [
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "cin . get ( ) ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int check(int, int)’"
    },
    {
      "mod_line": [
        15,
        7,
        8
      ],
      "mod_code": [
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "cin . get ( ) ;",
        "p = 1 ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int check(int, int)’"
    },
    {
      "mod_line": [
        15,
        8
      ],
      "mod_code": [
        "j = check ( s [ 0 ] - ' 0 ' ) ;",
        "p = 1 ;"
      ],
      "err_line": 15,
      "err_msg": "too few arguments to function ‘int check(int, int)’"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "int check ( int x , int y ) ;",
        "j -= ( s [ 0 ] - ' 0 ' ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        7
      ],
      "mod_code": [
        "int check ( int x , int y ) ;",
        "j -= ( s [ 0 ] - ' 0 ' ) ;",
        "cin . get ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        7,
        8
      ],
      "mod_code": [
        "int check ( int x , int y ) ;",
        "j -= ( s [ 0 ] - ' 0 ' ) ;",
        "cin . get ( ) ;",
        "p = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        13,
        8
      ],
      "mod_code": [
        "int check ( int x , int y ) ;",
        "j -= ( s [ 0 ] - ' 0 ' ) ;",
        "p = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "int check ( int x , int y ) ;",
        "cin . get ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        7,
        8
      ],
      "mod_code": [
        "int check ( int x , int y ) ;",
        "cin . get ( ) ;",
        "p = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "int check ( int x , int y ) ;",
        "p = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    }
  ]
}