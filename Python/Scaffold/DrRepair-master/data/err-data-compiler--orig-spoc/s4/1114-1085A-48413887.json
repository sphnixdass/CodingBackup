{
  "meta": {
    "index": 1114,
    "hitid": "3JHB4BPSFK3BVSSQ8YSKZ9FD0OL9QQ",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "1085A",
    "subid": "48413887"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "str = array of 60 chars filled with 0",
      "code": "char str [ 60 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read str",
      "code": "gets ( str ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "shu = array of 60 chars filled with 0",
      "code": "char shu [ 60 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "i , j , mid = int , k = 0 , len = length of str",
      "code": "int i , j , k = 0 , mid , len = strlen ( str ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if len is even",
      "code": "if ( len % 2 == 0 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "mid = len / 2 - 1",
      "code": "mid = ( len ) / 2 - 1 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "shu [ k ] = str [ mid ]",
      "code": "shu [ k ] = str [ mid ] ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment k",
      "code": "k ++ ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "for i = 1 to len / 2 inclusive",
      "code": "for ( i = 1 ; i <= len / 2 ; i ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "shu [ k ] = str [ mid + i ]",
      "code": "shu [ k ] = str [ mid + i ] ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "increment k",
      "code": "k ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "if i not equal len / 2",
      "code": "if ( i != len / 2 )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "shu [ k ] = srt [ mid - i ]",
      "code": "shu [ k ] = str [ mid - i ] ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "increment k",
      "code": "k ++ ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 18,
      "text": "mid = len / 2",
      "code": "mid = len / 2 ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "shu [ k ] = str [ mid ]",
      "code": "shu [ k ] = str [ mid ] ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "increment k",
      "code": "k ++ ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "for i = 1 to len / 2 inclusive",
      "code": "for ( i = 1 ; i <= len / 2 ; i ++ )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "shu [ k ] = str [ mid + i ]",
      "code": "shu [ k ] = str [ mid + i ] ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "increment k",
      "code": "k ++ ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "shu [ k ] = srt [ mid - i ]",
      "code": "shu [ k ] = str [ mid - i ] ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "increment k",
      "code": "k ++ ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print shu",
      "code": "puts ( shu ) ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "shu [ k ] = srt [ mid - i ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘srt’ was not declared in this scope"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "shu [ k ] = srt [ mid - i ] ;"
      ],
      "err_line": 24,
      "err_msg": "‘srt’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int str [ 60 ] = { 0 } ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘int*’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int shu [ 60 ] = { 0 } ;"
      ],
      "err_line": 28,
      "err_msg": "cannot convert ‘int*’ to ‘const char*’ for argument ‘1’ to ‘int puts(const char*)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "char shu [ k ] = str [ mid ] ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::basic_istream<char>’ and ‘char’)"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "int shu [ k ] = srt [ mid - i ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘srt’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "char shu [ k ] = str [ mid ] ;"
      ],
      "err_line": 19,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::basic_istream<char>’ and ‘char’)"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "int shu [ k ] = srt [ mid - i ] ;"
      ],
      "err_line": 24,
      "err_msg": "‘srt’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;",
        "shu [ k ] = srt [ mid - i ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        13,
        24
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;",
        "shu [ k ] = srt [ mid - i ] ;",
        "shu [ k ] = srt [ mid - i ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        13,
        24,
        7
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;",
        "shu [ k ] = srt [ mid - i ] ;",
        "shu [ k ] = srt [ mid - i ] ;",
        "char shu [ k ] = str [ mid ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        13,
        24,
        22
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;",
        "shu [ k ] = srt [ mid - i ] ;",
        "shu [ k ] = srt [ mid - i ] ;",
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        13,
        7
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;",
        "shu [ k ] = srt [ mid - i ] ;",
        "char shu [ k ] = str [ mid ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        13,
        7,
        24
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;",
        "shu [ k ] = srt [ mid - i ] ;",
        "char shu [ k ] = str [ mid ] ;",
        "int shu [ k ] = srt [ mid - i ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        13,
        7,
        22
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;",
        "shu [ k ] = srt [ mid - i ] ;",
        "char shu [ k ] = str [ mid ] ;",
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        13,
        24
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;",
        "shu [ k ] = srt [ mid - i ] ;",
        "int shu [ k ] = srt [ mid - i ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        13,
        24,
        22
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;",
        "shu [ k ] = srt [ mid - i ] ;",
        "int shu [ k ] = srt [ mid - i ] ;",
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        13,
        22
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;",
        "shu [ k ] = srt [ mid - i ] ;",
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        24
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;",
        "shu [ k ] = srt [ mid - i ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        24,
        7
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;",
        "shu [ k ] = srt [ mid - i ] ;",
        "char shu [ k ] = str [ mid ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        24,
        7,
        22
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;",
        "shu [ k ] = srt [ mid - i ] ;",
        "char shu [ k ] = str [ mid ] ;",
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        24,
        22
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;",
        "shu [ k ] = srt [ mid - i ] ;",
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;",
        "char shu [ k ] = str [ mid ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        7,
        24
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;",
        "char shu [ k ] = str [ mid ] ;",
        "int shu [ k ] = srt [ mid - i ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        7,
        24,
        22
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;",
        "char shu [ k ] = str [ mid ] ;",
        "int shu [ k ] = srt [ mid - i ] ;",
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        7,
        22
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;",
        "char shu [ k ] = str [ mid ] ;",
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        24
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;",
        "int shu [ k ] = srt [ mid - i ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        24,
        22
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;",
        "int shu [ k ] = srt [ mid - i ] ;",
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        4,
        22
      ],
      "mod_code": [
        "int i , j , k , k = 0 , len = str . length ( ) ;",
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        13,
        24
      ],
      "mod_code": [
        "shu [ k ] = srt [ mid - i ] ;",
        "shu [ k ] = srt [ mid - i ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘srt’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        24,
        7
      ],
      "mod_code": [
        "shu [ k ] = srt [ mid - i ] ;",
        "shu [ k ] = srt [ mid - i ] ;",
        "char shu [ k ] = str [ mid ] ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        13,
        24,
        7,
        22
      ],
      "mod_code": [
        "shu [ k ] = srt [ mid - i ] ;",
        "shu [ k ] = srt [ mid - i ] ;",
        "char shu [ k ] = str [ mid ] ;",
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        13,
        24,
        22
      ],
      "mod_code": [
        "shu [ k ] = srt [ mid - i ] ;",
        "shu [ k ] = srt [ mid - i ] ;",
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘srt’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "shu [ k ] = srt [ mid - i ] ;",
        "char shu [ k ] = str [ mid ] ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        13,
        7,
        24
      ],
      "mod_code": [
        "shu [ k ] = srt [ mid - i ] ;",
        "char shu [ k ] = str [ mid ] ;",
        "int shu [ k ] = srt [ mid - i ] ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        13,
        7,
        24,
        22
      ],
      "mod_code": [
        "shu [ k ] = srt [ mid - i ] ;",
        "char shu [ k ] = str [ mid ] ;",
        "int shu [ k ] = srt [ mid - i ] ;",
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        13,
        7,
        22
      ],
      "mod_code": [
        "shu [ k ] = srt [ mid - i ] ;",
        "char shu [ k ] = str [ mid ] ;",
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        13,
        24
      ],
      "mod_code": [
        "shu [ k ] = srt [ mid - i ] ;",
        "int shu [ k ] = srt [ mid - i ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘srt’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        24,
        22
      ],
      "mod_code": [
        "shu [ k ] = srt [ mid - i ] ;",
        "int shu [ k ] = srt [ mid - i ] ;",
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘srt’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        22
      ],
      "mod_code": [
        "shu [ k ] = srt [ mid - i ] ;",
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘srt’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        7
      ],
      "mod_code": [
        "shu [ k ] = srt [ mid - i ] ;",
        "char shu [ k ] = str [ mid ] ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        24,
        7,
        22
      ],
      "mod_code": [
        "shu [ k ] = srt [ mid - i ] ;",
        "char shu [ k ] = str [ mid ] ;",
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        24,
        22
      ],
      "mod_code": [
        "shu [ k ] = srt [ mid - i ] ;",
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::basic_istream<char>’ and ‘char’)"
    },
    {
      "mod_line": [
        7,
        24
      ],
      "mod_code": [
        "char shu [ k ] = str [ mid ] ;",
        "int shu [ k ] = srt [ mid - i ] ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        7,
        24,
        22
      ],
      "mod_code": [
        "char shu [ k ] = str [ mid ] ;",
        "int shu [ k ] = srt [ mid - i ] ;",
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        7,
        22
      ],
      "mod_code": [
        "char shu [ k ] = str [ mid ] ;",
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 7,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        24,
        22
      ],
      "mod_code": [
        "int shu [ k ] = srt [ mid - i ] ;",
        "cin >> shu [ k ] = str [ mid + i ] ;"
      ],
      "err_line": 22,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::basic_istream<char>’ and ‘char’)"
    }
  ]
}