{
  "meta": {
    "index": 2233,
    "hitid": "3ZG552ORAMYS0G389O7FV967CXM2VS",
    "workerid": "A1AYVATMT88U1W",
    "probid": "556A",
    "subid": "48513797"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let s be a string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let n be a integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let cnt , flag be integers with cnt = 0 , flag = 0",
      "code": "int cnt = 0 , flag = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to s . size ( ) - 1 exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if s [ i ] is not equal to s [ i + 1 ]",
      "code": "if ( s [ i ] != s [ i + 1 ] )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment cnt by 2",
      "code": "cnt += 2 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "s . erase ( s . begin ( ) + i )",
      "code": "s . erase ( s . begin ( ) + i ) ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "s . erase ( s . begin ( ) + i )",
      "code": "s . erase ( s . begin ( ) + i ) ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "the value of i is equal to maximum of i - 2 and - 1",
      "code": "i = max ( i - 2 , - 1 ) ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if s . empty ( ) , stop",
      "code": "if ( s . empty ( ) ) break ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print n - cnt and newline",
      "code": "cout << n - cnt << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "i = max ( i - 2 - 1 ) ;"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘max(int)’"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "char s . erase ( s . begin ( ) + i ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        5,
        10,
        9
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "char s . erase ( s . begin ( ) + i ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        5,
        10,
        9,
        7
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "if ( s [ i ] == s [ i + 1 ] )"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        5,
        10,
        9,
        11
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "i = max ( i - 2 - 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        5,
        10,
        9,
        4
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        10,
        7
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "if ( s [ i ] == s [ i + 1 ] )"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        5,
        10,
        7,
        11
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "if ( s [ i ] == s [ i + 1 ] )",
        "i = max ( i - 2 - 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        5,
        10,
        7,
        4
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "if ( s [ i ] == s [ i + 1 ] )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        10,
        11
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "i = max ( i - 2 - 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        5,
        10,
        11,
        4
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "i = max ( i - 2 - 1 ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        10,
        4
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "char s . erase ( s . begin ( ) + i ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        5,
        9,
        7
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "if ( s [ i ] == s [ i + 1 ] )"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        5,
        9,
        7,
        11
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "if ( s [ i ] == s [ i + 1 ] )",
        "i = max ( i - 2 - 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        5,
        9,
        7,
        4
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "if ( s [ i ] == s [ i + 1 ] )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        9,
        11
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "i = max ( i - 2 - 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        5,
        9,
        11,
        4
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "i = max ( i - 2 - 1 ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        9,
        4
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "if ( s [ i ] == s [ i + 1 ] )"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        5,
        7,
        11
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "if ( s [ i ] == s [ i + 1 ] )",
        "i = max ( i - 2 - 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        5,
        7,
        11,
        4
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "if ( s [ i ] == s [ i + 1 ] )",
        "i = max ( i - 2 - 1 ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        7,
        4
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "if ( s [ i ] == s [ i + 1 ] )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "i = max ( i - 2 - 1 ) ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int flag’"
    },
    {
      "mod_line": [
        5,
        11,
        4
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "i = max ( i - 2 - 1 ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "int cnt , flag = 0 , flag = 0 ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;",
        "char s . erase ( s . begin ( ) + i ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        9,
        7
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "if ( s [ i ] == s [ i + 1 ] )"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        9,
        7,
        11
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "if ( s [ i ] == s [ i + 1 ] )",
        "i = max ( i - 2 - 1 ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        9,
        7,
        4
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "if ( s [ i ] == s [ i + 1 ] )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        9,
        11
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "i = max ( i - 2 - 1 ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        9,
        11,
        4
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "i = max ( i - 2 - 1 ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        9,
        4
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;",
        "char s . erase ( s . begin ( ) + i ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;",
        "if ( s [ i ] == s [ i + 1 ] )"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        7,
        11
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;",
        "if ( s [ i ] == s [ i + 1 ] )",
        "i = max ( i - 2 - 1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        7,
        11,
        4
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;",
        "if ( s [ i ] == s [ i + 1 ] )",
        "i = max ( i - 2 - 1 ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        7,
        4
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;",
        "if ( s [ i ] == s [ i + 1 ] )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;",
        "i = max ( i - 2 - 1 ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        10,
        11,
        4
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;",
        "i = max ( i - 2 - 1 ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;",
        "if ( s [ i ] == s [ i + 1 ] )"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        9,
        7,
        11
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;",
        "if ( s [ i ] == s [ i + 1 ] )",
        "i = max ( i - 2 - 1 ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        9,
        7,
        11,
        4
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;",
        "if ( s [ i ] == s [ i + 1 ] )",
        "i = max ( i - 2 - 1 ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        7,
        4
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;",
        "if ( s [ i ] == s [ i + 1 ] )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;",
        "i = max ( i - 2 - 1 ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        9,
        11,
        4
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;",
        "i = max ( i - 2 - 1 ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "char s . erase ( s . begin ( ) + i ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "if ( s [ i ] == s [ i + 1 ] )",
        "i = max ( i - 2 - 1 ) ;"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘max(int)’"
    },
    {
      "mod_line": [
        7,
        11,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == s [ i + 1 ] )",
        "i = max ( i - 2 - 1 ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "if ( s [ i ] == s [ i + 1 ] )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        4
      ],
      "mod_code": [
        "i = max ( i - 2 - 1 ) ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}