{
  "meta": {
    "index": 1419,
    "hitid": "335VBRURDJUMYP2LZ7XK5SQZHL09EH",
    "workerid": "AIWEXPJAU66D9",
    "probid": "729A",
    "subid": "44348109"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer INF = 0 x3f3f3f3f",
      "code": "const int INF = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create constant integer len = 2e3 + 4",
      "code": "const int len = 2e3 + 4 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create constant long long mod = 1e9 + 7",
      "code": "const long long mod = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create constants ulong and seed where seed = 131",
      "code": "const ulong long seed = 131 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "create strings ans and str",
      "code": "string ans , str ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "function dfs with integer argument i that returns integer",
      "code": "int dfs ( int i )",
      "indent": 0
    },
    {
      "line": 7,
      "text": "if i + 2 < n and str [ i + 1 ] = ' g ' and str [ i + 2 ] = ' o '",
      "code": "if ( i + 2 < n && str [ i + 1 ] == ' g ' && str [ i + 2 ] == ' o ' )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return dfs of i + 2",
      "code": "return dfs ( i + 2 ) ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 10,
      "text": "return i",
      "code": "return i ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 13,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "declare integer t = i",
      "code": "int t = i ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if str [ i ] = ' o ' t = dfs of i",
      "code": "if ( str [ i ] == ' o ' ) t = dfs ( i ) ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if t ! = i",
      "code": "if ( t != i )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "append \" * * * \" to ans and set i = t",
      "code": "ans += \" *** \" , i = t ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 21,
      "text": "append str [ i ] to ans",
      "code": "ans += str [ i ] ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "const int seed , seed , seed ;"
      ],
      "err_line": 3,
      "err_msg": "uninitialized const ‘seed’ [-fpermissive]"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "ans += \" * \" * \" = t ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "const len = 2e3 + 4 ;"
      ],
      "err_line": 1,
      "err_msg": "‘len’ does not name a type"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "const int ulong , seed , seed ;"
      ],
      "err_line": 3,
      "err_msg": "‘const int ulong’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "string ans = str ;"
      ],
      "err_line": 4,
      "err_msg": "‘str’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int dfs ( int i ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 14,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "t = i ;"
      ],
      "err_line": 16,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "ans += \" * * * \" = t ;"
      ],
      "err_line": 19,
      "err_msg": "assignment of read-only location ‘\"* * *\"’"
    },
    {
      "mod_line": [
        3,
        19
      ],
      "mod_code": [
        "const int seed , seed , seed ;",
        "ans += \" * \" * \" = t ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        19,
        17
      ],
      "mod_code": [
        "const int seed , seed , seed ;",
        "ans += \" * \" * \" = t ;",
        "if ( str [ i ] == ' o ' ) dfs ( i ) ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        19,
        17,
        1
      ],
      "mod_code": [
        "const int seed , seed , seed ;",
        "ans += \" * \" * \" = t ;",
        "if ( str [ i ] == ' o ' ) dfs ( i ) ;",
        "const len = 2e3 + 4 ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        19,
        17,
        16
      ],
      "mod_code": [
        "const int seed , seed , seed ;",
        "ans += \" * \" * \" = t ;",
        "if ( str [ i ] == ' o ' ) dfs ( i ) ;",
        "t = i ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        19,
        1
      ],
      "mod_code": [
        "const int seed , seed , seed ;",
        "ans += \" * \" * \" = t ;",
        "const len = 2e3 + 4 ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        19,
        1,
        16
      ],
      "mod_code": [
        "const int seed , seed , seed ;",
        "ans += \" * \" * \" = t ;",
        "const len = 2e3 + 4 ;",
        "t = i ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        19,
        16
      ],
      "mod_code": [
        "const int seed , seed , seed ;",
        "ans += \" * \" * \" = t ;",
        "t = i ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        17
      ],
      "mod_code": [
        "const int seed , seed , seed ;",
        "if ( str [ i ] == ' o ' ) dfs ( i ) ;"
      ],
      "err_line": 3,
      "err_msg": "uninitialized const ‘seed’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        17,
        1
      ],
      "mod_code": [
        "const int seed , seed , seed ;",
        "if ( str [ i ] == ' o ' ) dfs ( i ) ;",
        "const len = 2e3 + 4 ;"
      ],
      "err_line": 1,
      "err_msg": "‘len’ does not name a type"
    },
    {
      "mod_line": [
        3,
        17,
        1,
        16
      ],
      "mod_code": [
        "const int seed , seed , seed ;",
        "if ( str [ i ] == ' o ' ) dfs ( i ) ;",
        "const len = 2e3 + 4 ;",
        "t = i ;"
      ],
      "err_line": 1,
      "err_msg": "‘len’ does not name a type"
    },
    {
      "mod_line": [
        3,
        17,
        16
      ],
      "mod_code": [
        "const int seed , seed , seed ;",
        "if ( str [ i ] == ' o ' ) dfs ( i ) ;",
        "t = i ;"
      ],
      "err_line": 3,
      "err_msg": "uninitialized const ‘seed’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "const int seed , seed , seed ;",
        "const len = 2e3 + 4 ;"
      ],
      "err_line": 1,
      "err_msg": "‘len’ does not name a type"
    },
    {
      "mod_line": [
        3,
        1,
        16
      ],
      "mod_code": [
        "const int seed , seed , seed ;",
        "const len = 2e3 + 4 ;",
        "t = i ;"
      ],
      "err_line": 1,
      "err_msg": "‘len’ does not name a type"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "const int seed , seed , seed ;",
        "t = i ;"
      ],
      "err_line": 3,
      "err_msg": "uninitialized const ‘seed’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        17
      ],
      "mod_code": [
        "ans += \" * \" * \" = t ;",
        "if ( str [ i ] == ' o ' ) dfs ( i ) ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        19,
        17,
        3
      ],
      "mod_code": [
        "ans += \" * \" * \" = t ;",
        "if ( str [ i ] == ' o ' ) dfs ( i ) ;",
        "const int ulong , seed , seed ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        19,
        17,
        3,
        1
      ],
      "mod_code": [
        "ans += \" * \" * \" = t ;",
        "if ( str [ i ] == ' o ' ) dfs ( i ) ;",
        "const int ulong , seed , seed ;",
        "const len = 2e3 + 4 ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        19,
        17,
        3,
        16
      ],
      "mod_code": [
        "ans += \" * \" * \" = t ;",
        "if ( str [ i ] == ' o ' ) dfs ( i ) ;",
        "const int ulong , seed , seed ;",
        "t = i ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        19,
        17,
        1
      ],
      "mod_code": [
        "ans += \" * \" * \" = t ;",
        "if ( str [ i ] == ' o ' ) dfs ( i ) ;",
        "const len = 2e3 + 4 ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        19,
        17,
        1,
        16
      ],
      "mod_code": [
        "ans += \" * \" * \" = t ;",
        "if ( str [ i ] == ' o ' ) dfs ( i ) ;",
        "const len = 2e3 + 4 ;",
        "t = i ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        19,
        17,
        16
      ],
      "mod_code": [
        "ans += \" * \" * \" = t ;",
        "if ( str [ i ] == ' o ' ) dfs ( i ) ;",
        "t = i ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        19,
        3
      ],
      "mod_code": [
        "ans += \" * \" * \" = t ;",
        "const int ulong , seed , seed ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        19,
        3,
        1
      ],
      "mod_code": [
        "ans += \" * \" * \" = t ;",
        "const int ulong , seed , seed ;",
        "const len = 2e3 + 4 ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        19,
        3,
        1,
        16
      ],
      "mod_code": [
        "ans += \" * \" * \" = t ;",
        "const int ulong , seed , seed ;",
        "const len = 2e3 + 4 ;",
        "t = i ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        19,
        3,
        16
      ],
      "mod_code": [
        "ans += \" * \" * \" = t ;",
        "const int ulong , seed , seed ;",
        "t = i ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        19,
        1
      ],
      "mod_code": [
        "ans += \" * \" * \" = t ;",
        "const len = 2e3 + 4 ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        19,
        1,
        16
      ],
      "mod_code": [
        "ans += \" * \" * \" = t ;",
        "const len = 2e3 + 4 ;",
        "t = i ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        19,
        16
      ],
      "mod_code": [
        "ans += \" * \" * \" = t ;",
        "t = i ;"
      ],
      "err_line": 19,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        17,
        3
      ],
      "mod_code": [
        "if ( str [ i ] == ' o ' ) dfs ( i ) ;",
        "const int ulong , seed , seed ;"
      ],
      "err_line": 3,
      "err_msg": "‘const int ulong’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        17,
        3,
        1
      ],
      "mod_code": [
        "if ( str [ i ] == ' o ' ) dfs ( i ) ;",
        "const int ulong , seed , seed ;",
        "const len = 2e3 + 4 ;"
      ],
      "err_line": 1,
      "err_msg": "‘len’ does not name a type"
    },
    {
      "mod_line": [
        17,
        3,
        1,
        16
      ],
      "mod_code": [
        "if ( str [ i ] == ' o ' ) dfs ( i ) ;",
        "const int ulong , seed , seed ;",
        "const len = 2e3 + 4 ;",
        "t = i ;"
      ],
      "err_line": 1,
      "err_msg": "‘len’ does not name a type"
    },
    {
      "mod_line": [
        17,
        3,
        16
      ],
      "mod_code": [
        "if ( str [ i ] == ' o ' ) dfs ( i ) ;",
        "const int ulong , seed , seed ;",
        "t = i ;"
      ],
      "err_line": 3,
      "err_msg": "‘const int ulong’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        17,
        1
      ],
      "mod_code": [
        "if ( str [ i ] == ' o ' ) dfs ( i ) ;",
        "const len = 2e3 + 4 ;"
      ],
      "err_line": 1,
      "err_msg": "‘len’ does not name a type"
    },
    {
      "mod_line": [
        17,
        1,
        16
      ],
      "mod_code": [
        "if ( str [ i ] == ' o ' ) dfs ( i ) ;",
        "const len = 2e3 + 4 ;",
        "t = i ;"
      ],
      "err_line": 1,
      "err_msg": "‘len’ does not name a type"
    },
    {
      "mod_line": [
        17,
        16
      ],
      "mod_code": [
        "if ( str [ i ] == ' o ' ) dfs ( i ) ;",
        "t = i ;"
      ],
      "err_line": 16,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "const int ulong , seed , seed ;",
        "const len = 2e3 + 4 ;"
      ],
      "err_line": 1,
      "err_msg": "‘len’ does not name a type"
    },
    {
      "mod_line": [
        3,
        1,
        16
      ],
      "mod_code": [
        "const int ulong , seed , seed ;",
        "const len = 2e3 + 4 ;",
        "t = i ;"
      ],
      "err_line": 1,
      "err_msg": "‘len’ does not name a type"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "const int ulong , seed , seed ;",
        "t = i ;"
      ],
      "err_line": 3,
      "err_msg": "‘const int ulong’ redeclared as different kind of symbol"
    },
    {
      "mod_line": [
        1,
        16
      ],
      "mod_code": [
        "const len = 2e3 + 4 ;",
        "t = i ;"
      ],
      "err_line": 1,
      "err_msg": "‘len’ does not name a type"
    }
  ]
}