{
  "meta": {
    "index": 2142,
    "hitid": "3SD15I2WD2OW68KQCGDC2RV01IV36D",
    "workerid": "AIWEXPJAU66D9",
    "probid": "705A",
    "subid": "49072105"
  },
  "lines": [
    {
      "line": 0,
      "text": "function solve",
      "code": "void solve ( )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer variable with name n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read variable n from the input",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "in a for loop , change i from 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if i & 1 ! = 0",
      "code": "if ( i & 1 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "print \" I hate \"",
      "code": "cout << \" I hate \"",
      "indent": 3
    },
    {
      "line": 6,
      "text": "print \" \"",
      "code": "<< \" \" ;",
      "indent": 4
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "print \" I love \"",
      "code": "cout << \" I love \"",
      "indent": 3
    },
    {
      "line": 9,
      "text": "print \" \"",
      "code": "<< \" \" ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if i ! = n",
      "code": "if ( i != n )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print \" that \" to the standard output",
      "code": "cout << \" that \"",
      "indent": 3
    },
    {
      "line": 13,
      "text": "print \" \"",
      "code": "<< \" \" ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" it \" and ' \\ n ' to the standard output",
      "code": "cout << \" it \" << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 18,
      "text": "call solve ( )",
      "code": "solve ( ) ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cout << \" I \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "cout << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cout << \" I \" << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "cout << \" \" ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cout << \" that \" << endl ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cout << \" \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cout << \" I \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "cout << \" \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cout << \" I \" ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "cout << \" \" << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cout << \" that \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "cout << \" \" << endl ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "cout << \" it ' << ' \\n ' ;"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "solve ( ) ( ) ;"
      ],
      "err_line": 18,
      "err_msg": "void value not ignored as it ought to be"
    },
    {
      "mod_line": [
        5,
        6,
        8
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \" ;",
        "cout << \" I \" << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        12
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \" ;",
        "cout << \" I \" << endl ;",
        "cout << \" that \" << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        13
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \" ;",
        "cout << \" I \" << endl ;",
        "cout << \" \" ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        6,
        9
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \" ;",
        "cout << \" \" ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        6,
        9,
        12
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \" ;",
        "cout << \" \" ;",
        "cout << \" that \" << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        6,
        9,
        13
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \" ;",
        "cout << \" \" ;",
        "cout << \" \" ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        6,
        12
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \" ;",
        "cout << \" that \" << endl ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        6,
        13
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \" ;",
        "cout << \" \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" I \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        8,
        9
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" I \" << endl ;",
        "cout << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        8,
        9,
        12
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" I \" << endl ;",
        "cout << \" \" ;",
        "cout << \" that \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        8,
        9,
        13
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" I \" << endl ;",
        "cout << \" \" ;",
        "cout << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        8,
        12
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" I \" << endl ;",
        "cout << \" that \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        8,
        12,
        13
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" I \" << endl ;",
        "cout << \" that \" << endl ;",
        "cout << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        8,
        13
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" I \" << endl ;",
        "cout << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        9,
        12
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \" ;",
        "cout << \" that \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        9,
        12,
        13
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \" ;",
        "cout << \" that \" << endl ;",
        "cout << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        9,
        13
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \" ;",
        "cout << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" that \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        12,
        13
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" that \" << endl ;",
        "cout << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "cout << \" \" ;",
        "cout << \" I \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        6,
        8,
        9
      ],
      "mod_code": [
        "cout << \" \" ;",
        "cout << \" I \" << endl ;",
        "cout << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        6,
        8,
        9,
        12
      ],
      "mod_code": [
        "cout << \" \" ;",
        "cout << \" I \" << endl ;",
        "cout << \" \" ;",
        "cout << \" that \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        6,
        8,
        9,
        13
      ],
      "mod_code": [
        "cout << \" \" ;",
        "cout << \" I \" << endl ;",
        "cout << \" \" ;",
        "cout << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        6,
        8,
        12
      ],
      "mod_code": [
        "cout << \" \" ;",
        "cout << \" I \" << endl ;",
        "cout << \" that \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        6,
        8,
        12,
        13
      ],
      "mod_code": [
        "cout << \" \" ;",
        "cout << \" I \" << endl ;",
        "cout << \" that \" << endl ;",
        "cout << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        6,
        8,
        13
      ],
      "mod_code": [
        "cout << \" \" ;",
        "cout << \" I \" << endl ;",
        "cout << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "cout << \" \" ;",
        "cout << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        6,
        9,
        12
      ],
      "mod_code": [
        "cout << \" \" ;",
        "cout << \" \" ;",
        "cout << \" that \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        6,
        9,
        12,
        13
      ],
      "mod_code": [
        "cout << \" \" ;",
        "cout << \" \" ;",
        "cout << \" that \" << endl ;",
        "cout << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        6,
        9,
        13
      ],
      "mod_code": [
        "cout << \" \" ;",
        "cout << \" \" ;",
        "cout << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "cout << \" \" ;",
        "cout << \" that \" << endl ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        6,
        12,
        13
      ],
      "mod_code": [
        "cout << \" \" ;",
        "cout << \" that \" << endl ;",
        "cout << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "cout << \" \" ;",
        "cout << \" \" ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        9,
        12
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \" ;",
        "cout << \" that \" << endl ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        8,
        9,
        13
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \" ;",
        "cout << \" \" ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" that \" << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        8,
        12,
        13
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" that \" << endl ;",
        "cout << \" \" ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "cout << \" I \" << endl ;",
        "cout << \" \" ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        9,
        12
      ],
      "mod_code": [
        "cout << \" \" ;",
        "cout << \" that \" << endl ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        9,
        12,
        13
      ],
      "mod_code": [
        "cout << \" \" ;",
        "cout << \" that \" << endl ;",
        "cout << \" \" ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "cout << \" \" ;",
        "cout << \" \" ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘cout’"
    }
  ]
}