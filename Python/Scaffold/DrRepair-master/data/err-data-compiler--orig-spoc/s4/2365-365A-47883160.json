{
  "meta": {
    "index": 2365,
    "hitid": "37Y5RYYI0PZD94P13IN3ACGWQ2TXST",
    "workerid": "AIWEXPJAU66D9",
    "probid": "365A",
    "subid": "47883160"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer variables n , m , a , i and cnt with cnt = 0",
      "code": "int n , m , a , i , cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i from 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; ++ i )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare an array of ints fr with size 10",
      "code": "int fr [ 10 ] = { 0 } ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "while a is not 0",
      "code": "while ( a )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment fr [ a % 10 ] by one",
      "code": "fr [ a % 10 ] ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "divide a by 10",
      "code": "a /= 10 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "declare boolean ok = true",
      "code": "bool ok = true ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "for k from 0 to m inclusive",
      "code": "for ( int k = 0 ; k <= m ; ++ k )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if fr [ k ] is equal to 0",
      "code": "if ( fr [ k ] == 0 )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "set ok to false",
      "code": "ok = false ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 16,
      "text": "if ok is true , increment cnt",
      "code": "if ( ok == true ) cnt ++ ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print cnt",
      "code": "cout << cnt << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 2,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "for ( k = 0 ; k <= m ; k ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        12,
        11
      ],
      "mod_code": [
        "int fr [ 10 ] ;",
        "if ( fr [ k ] == ' 0 ' )",
        "for ( k = 0 ; k <= m ; k ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        12,
        11,
        18
      ],
      "mod_code": [
        "int fr [ 10 ] ;",
        "if ( fr [ k ] == ' 0 ' )",
        "for ( k = 0 ; k <= m ; k ++ )",
        "cout << cnt ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        12,
        11,
        5
      ],
      "mod_code": [
        "int fr [ 10 ] ;",
        "if ( fr [ k ] == ' 0 ' )",
        "for ( k = 0 ; k <= m ; k ++ )",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        12,
        18,
        5
      ],
      "mod_code": [
        "int fr [ 10 ] ;",
        "if ( fr [ k ] == ' 0 ' )",
        "cout << cnt ;",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        12,
        5
      ],
      "mod_code": [
        "int fr [ 10 ] ;",
        "if ( fr [ k ] == ' 0 ' )",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "int fr [ 10 ] ;",
        "for ( k = 0 ; k <= m ; k ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        11,
        18
      ],
      "mod_code": [
        "int fr [ 10 ] ;",
        "for ( k = 0 ; k <= m ; k ++ )",
        "cout << cnt ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        11,
        18,
        5
      ],
      "mod_code": [
        "int fr [ 10 ] ;",
        "for ( k = 0 ; k <= m ; k ++ )",
        "cout << cnt ;",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        11,
        5
      ],
      "mod_code": [
        "int fr [ 10 ] ;",
        "for ( k = 0 ; k <= m ; k ++ )",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        18,
        5
      ],
      "mod_code": [
        "int fr [ 10 ] ;",
        "cout << cnt ;",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "int fr [ 10 ] ;",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        11
      ],
      "mod_code": [
        "if ( fr [ k ] == ' 0 ' )",
        "for ( k = 0 ; k <= m ; k ++ )"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        11,
        18
      ],
      "mod_code": [
        "if ( fr [ k ] == ' 0 ' )",
        "for ( k = 0 ; k <= m ; k ++ )",
        "cout << cnt ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        11,
        18,
        4
      ],
      "mod_code": [
        "if ( fr [ k ] == ' 0 ' )",
        "for ( k = 0 ; k <= m ; k ++ )",
        "cout << cnt ;",
        "long int fr [ 10 ] ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        11,
        18,
        5
      ],
      "mod_code": [
        "if ( fr [ k ] == ' 0 ' )",
        "for ( k = 0 ; k <= m ; k ++ )",
        "cout << cnt ;",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        11,
        4
      ],
      "mod_code": [
        "if ( fr [ k ] == ' 0 ' )",
        "for ( k = 0 ; k <= m ; k ++ )",
        "long int fr [ 10 ] ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        11,
        4,
        5
      ],
      "mod_code": [
        "if ( fr [ k ] == ' 0 ' )",
        "for ( k = 0 ; k <= m ; k ++ )",
        "long int fr [ 10 ] ;",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        11,
        5
      ],
      "mod_code": [
        "if ( fr [ k ] == ' 0 ' )",
        "for ( k = 0 ; k <= m ; k ++ )",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        18,
        4,
        5
      ],
      "mod_code": [
        "if ( fr [ k ] == ' 0 ' )",
        "cout << cnt ;",
        "long int fr [ 10 ] ;",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        18,
        5
      ],
      "mod_code": [
        "if ( fr [ k ] == ' 0 ' )",
        "cout << cnt ;",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        4,
        5
      ],
      "mod_code": [
        "if ( fr [ k ] == ' 0 ' )",
        "long int fr [ 10 ] ;",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "if ( fr [ k ] == ' 0 ' )",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        18
      ],
      "mod_code": [
        "for ( k = 0 ; k <= m ; k ++ )",
        "cout << cnt ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        18,
        4
      ],
      "mod_code": [
        "for ( k = 0 ; k <= m ; k ++ )",
        "cout << cnt ;",
        "long int fr [ 10 ] ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        18,
        4,
        5
      ],
      "mod_code": [
        "for ( k = 0 ; k <= m ; k ++ )",
        "cout << cnt ;",
        "long int fr [ 10 ] ;",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        18,
        5
      ],
      "mod_code": [
        "for ( k = 0 ; k <= m ; k ++ )",
        "cout << cnt ;",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        4
      ],
      "mod_code": [
        "for ( k = 0 ; k <= m ; k ++ )",
        "long int fr [ 10 ] ;"
      ],
      "err_line": 11,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        4,
        5
      ],
      "mod_code": [
        "for ( k = 0 ; k <= m ; k ++ )",
        "long int fr [ 10 ] ;",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        5
      ],
      "mod_code": [
        "for ( k = 0 ; k <= m ; k ++ )",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        4,
        5
      ],
      "mod_code": [
        "cout << cnt ;",
        "long int fr [ 10 ] ;",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        5
      ],
      "mod_code": [
        "cout << cnt ;",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "long int fr [ 10 ] ;",
        "gets ( a ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    }
  ]
}