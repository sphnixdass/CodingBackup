{
  "meta": {
    "index": 179,
    "hitid": "3JVP4ZJHDPMGI0GUVU4IXWNY6VV0IT",
    "workerid": "AIWEXPJAU66D9",
    "probid": "3A",
    "subid": "41520303"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let a and b be strings",
      "code": "string a , b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a and b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "integer sx = a [ 0 ] - ' a ' + 1",
      "code": "int sx = a [ 0 ] - ' a ' + 1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "integer sy = a [ 1 ] - ' 0 '",
      "code": "int sy = a [ 1 ] - ' 0 ' ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "integer ex = b [ 0 ] - ' a ' + 1",
      "code": "int ex = b [ 0 ] - ' a ' + 1 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "integer ey = b [ 1 ] - ' 0 '",
      "code": "int ey = b [ 1 ] - ' 0 ' ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "declare chars called flag1 and flag2",
      "code": "char flag1 , flag2 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if ex is greater than sx",
      "code": "if ( ex > sx )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set flag1 to ' R '",
      "code": "flag1 = ' R ' ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 11,
      "text": "set flag1 to ' L '",
      "code": "flag1 = ' L ' ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if ey is greater than sy",
      "code": "if ( ey > sy )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "set flag2 to ' U '",
      "code": "flag2 = ' U ' ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 15,
      "text": "set flag2 to ' D '",
      "code": "flag2 = ' D ' ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "assign value fabs ( ex - sx ) to the integer dx",
      "code": "int dx = fabs ( ex - sx ) ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "assign value fabs ( ey - sy ) to the integer dy",
      "code": "int dy = fabs ( ey - sy ) ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print max of dx and dy and a new line",
      "code": "cout << max ( dx , dy ) << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "while dx > 0 or dy > 0",
      "code": "while ( dx > 0 || dy > 0 )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if dx is greater than 0",
      "code": "if ( dx > 0 )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "print flag1",
      "code": "cout << flag1 ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "decrement dx",
      "code": "dx -- ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 24,
      "text": "if dy is greater than 0",
      "code": "if ( dy > 0 )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "print flag2",
      "code": "cout << flag2 ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "decrement dy",
      "code": "dy -- ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string a , b b ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘b’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "a >> a >> b ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "dx = fabs ( ex - sx ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘dx’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "int * dy = fabs ( ey - sy ) ;"
      ],
      "err_line": 17,
      "err_msg": "cannot convert ‘__gnu_cxx::__enable_if<true, double>::__type {aka double}’ to ‘int*’ in initialization"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "cout << * max ( dx , dy ) << endl ;"
      ],
      "err_line": 18,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "while ( dx > 0 || dy [ dy ] )"
      ],
      "err_line": 19,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "goto dy ;"
      ],
      "err_line": 26,
      "err_msg": "label ‘dy’ used but not defined"
    },
    {
      "mod_line": [
        21,
        25,
        24,
        2
      ],
      "mod_code": [
        "cout << flag1 << endl ;",
        "cout << flag2 << endl ;",
        "if ( dy >= 0 )",
        "a >> a >> b ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        25,
        24,
        14
      ],
      "mod_code": [
        "cout << flag1 << endl ;",
        "cout << flag2 << endl ;",
        "if ( dy >= 0 )",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        21,
        25,
        2
      ],
      "mod_code": [
        "cout << flag1 << endl ;",
        "cout << flag2 << endl ;",
        "a >> a >> b ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        25,
        2,
        11
      ],
      "mod_code": [
        "cout << flag1 << endl ;",
        "cout << flag2 << endl ;",
        "a >> a >> b ;",
        "char flag1 = ' L ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        25,
        2,
        14
      ],
      "mod_code": [
        "cout << flag1 << endl ;",
        "cout << flag2 << endl ;",
        "a >> a >> b ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        25,
        11,
        14
      ],
      "mod_code": [
        "cout << flag1 << endl ;",
        "cout << flag2 << endl ;",
        "char flag1 = ' L ' ;",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        21,
        25,
        14
      ],
      "mod_code": [
        "cout << flag1 << endl ;",
        "cout << flag2 << endl ;",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        21,
        24,
        2
      ],
      "mod_code": [
        "cout << flag1 << endl ;",
        "if ( dy >= 0 )",
        "a >> a >> b ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        24,
        2,
        11
      ],
      "mod_code": [
        "cout << flag1 << endl ;",
        "if ( dy >= 0 )",
        "a >> a >> b ;",
        "char flag1 = ' L ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        24,
        2,
        14
      ],
      "mod_code": [
        "cout << flag1 << endl ;",
        "if ( dy >= 0 )",
        "a >> a >> b ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        24,
        11,
        14
      ],
      "mod_code": [
        "cout << flag1 << endl ;",
        "if ( dy >= 0 )",
        "char flag1 = ' L ' ;",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        21,
        24,
        14
      ],
      "mod_code": [
        "cout << flag1 << endl ;",
        "if ( dy >= 0 )",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        21,
        2
      ],
      "mod_code": [
        "cout << flag1 << endl ;",
        "a >> a >> b ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        2,
        11
      ],
      "mod_code": [
        "cout << flag1 << endl ;",
        "a >> a >> b ;",
        "char flag1 = ' L ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        2,
        11,
        14
      ],
      "mod_code": [
        "cout << flag1 << endl ;",
        "a >> a >> b ;",
        "char flag1 = ' L ' ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        2,
        14
      ],
      "mod_code": [
        "cout << flag1 << endl ;",
        "a >> a >> b ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        11,
        14
      ],
      "mod_code": [
        "cout << flag1 << endl ;",
        "char flag1 = ' L ' ;",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        21,
        14
      ],
      "mod_code": [
        "cout << flag1 << endl ;",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        25,
        24,
        2
      ],
      "mod_code": [
        "cout << flag2 << endl ;",
        "if ( dy >= 0 )",
        "a >> a >> b ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        25,
        24,
        2,
        11
      ],
      "mod_code": [
        "cout << flag2 << endl ;",
        "if ( dy >= 0 )",
        "a >> a >> b ;",
        "char flag1 = ' L ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        25,
        24,
        2,
        14
      ],
      "mod_code": [
        "cout << flag2 << endl ;",
        "if ( dy >= 0 )",
        "a >> a >> b ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        25,
        24,
        11,
        14
      ],
      "mod_code": [
        "cout << flag2 << endl ;",
        "if ( dy >= 0 )",
        "char flag1 = ' L ' ;",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        25,
        24,
        14
      ],
      "mod_code": [
        "cout << flag2 << endl ;",
        "if ( dy >= 0 )",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        25,
        2
      ],
      "mod_code": [
        "cout << flag2 << endl ;",
        "a >> a >> b ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        25,
        2,
        11
      ],
      "mod_code": [
        "cout << flag2 << endl ;",
        "a >> a >> b ;",
        "char flag1 = ' L ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        25,
        2,
        11,
        14
      ],
      "mod_code": [
        "cout << flag2 << endl ;",
        "a >> a >> b ;",
        "char flag1 = ' L ' ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        25,
        2,
        14
      ],
      "mod_code": [
        "cout << flag2 << endl ;",
        "a >> a >> b ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        25,
        11,
        14
      ],
      "mod_code": [
        "cout << flag2 << endl ;",
        "char flag1 = ' L ' ;",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        25,
        14
      ],
      "mod_code": [
        "cout << flag2 << endl ;",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        24,
        2
      ],
      "mod_code": [
        "if ( dy >= 0 )",
        "a >> a >> b ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        24,
        2,
        11
      ],
      "mod_code": [
        "if ( dy >= 0 )",
        "a >> a >> b ;",
        "char flag1 = ' L ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        24,
        2,
        11,
        14
      ],
      "mod_code": [
        "if ( dy >= 0 )",
        "a >> a >> b ;",
        "char flag1 = ' L ' ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        24,
        2,
        14
      ],
      "mod_code": [
        "if ( dy >= 0 )",
        "a >> a >> b ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        24,
        11,
        14
      ],
      "mod_code": [
        "if ( dy >= 0 )",
        "char flag1 = ' L ' ;",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        24,
        14
      ],
      "mod_code": [
        "if ( dy >= 0 )",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "a >> a >> b ;",
        "char flag1 = ' L ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        11,
        14
      ],
      "mod_code": [
        "a >> a >> b ;",
        "char flag1 = ' L ' ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "a >> a >> b ;",
        "else else"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "char flag1 = ' L ' ;",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}