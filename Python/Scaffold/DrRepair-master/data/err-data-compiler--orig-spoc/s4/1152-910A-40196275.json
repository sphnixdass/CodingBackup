{
  "meta": {
    "index": 1152,
    "hitid": "35XW21VSVG8I9A8CPZKFZIL9I6NSLV",
    "workerid": "AIWEXPJAU66D9",
    "probid": "910A",
    "subid": "40196275"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n and d are integers",
      "code": "int n , d ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and d",
      "code": "cin >> n >> d ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare integer called ans = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "declare integer variable called i = 0",
      "code": "int i = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "while i is less than n - 1",
      "code": "while ( i < n - 1 )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if s [ i + d ] = ' 1 '",
      "code": "if ( s [ i + d ] == ' 1 ' )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increase ans",
      "code": "ans ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "i = i + d",
      "code": "i = i + d ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "declare integer variable called j = i + d - 1",
      "code": "int j = i + d - 1 ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "flag is integer = 1",
      "code": "int flag = 1 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "while j is greater than i",
      "code": "while ( j > i )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if s [ j ] = ' 1 '",
      "code": "if ( s [ j ] == ' 1 ' )",
      "indent": 4
    },
    {
      "line": 16,
      "text": "set i to j",
      "code": "i = j ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "increase ans by one",
      "code": "ans ++ ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "flag = 0",
      "code": "flag = 0 ;",
      "indent": 5
    },
    {
      "line": 19,
      "text": "break the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 21,
      "text": "decrease j by one",
      "code": "j -- ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 23,
      "text": "if flag is not 0",
      "code": "if ( flag )",
      "indent": 3
    },
    {
      "line": 24,
      "text": "ans = - 1",
      "code": "ans = - 1 ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "print ans and a new line",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 2,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string n ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘std::__cxx11::string n’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        4,
        18
      ],
      "mod_code": [
        "s >> s ;",
        "int flag = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        18,
        6
      ],
      "mod_code": [
        "s >> s ;",
        "int flag = 0 ;",
        "int i = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        18,
        6,
        14
      ],
      "mod_code": [
        "s >> s ;",
        "int flag = 0 ;",
        "int i = 1 ;",
        "while ( j >= i )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        18,
        6,
        19
      ],
      "mod_code": [
        "s >> s ;",
        "int flag = 0 ;",
        "int i = 1 ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        18,
        6,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "int flag = 0 ;",
        "int i = 1 ;",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        18,
        14
      ],
      "mod_code": [
        "s >> s ;",
        "int flag = 0 ;",
        "while ( j >= i )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        18,
        14,
        19
      ],
      "mod_code": [
        "s >> s ;",
        "int flag = 0 ;",
        "while ( j >= i )",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        18,
        14,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "int flag = 0 ;",
        "while ( j >= i )",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        18,
        19
      ],
      "mod_code": [
        "s >> s ;",
        "int flag = 0 ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        18,
        19,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "int flag = 0 ;",
        "break break ;",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        18,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "int flag = 0 ;",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "s >> s ;",
        "int i = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        6,
        14
      ],
      "mod_code": [
        "s >> s ;",
        "int i = 1 ;",
        "while ( j >= i )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        6,
        14,
        19
      ],
      "mod_code": [
        "s >> s ;",
        "int i = 1 ;",
        "while ( j >= i )",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        6,
        14,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "int i = 1 ;",
        "while ( j >= i )",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        6,
        19
      ],
      "mod_code": [
        "s >> s ;",
        "int i = 1 ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        6,
        19,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "int i = 1 ;",
        "break break ;",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        6,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "int i = 1 ;",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "s >> s ;",
        "while ( j >= i )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        14,
        19
      ],
      "mod_code": [
        "s >> s ;",
        "while ( j >= i )",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        14,
        19,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "while ( j >= i )",
        "break break ;",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        14,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "while ( j >= i )",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        19
      ],
      "mod_code": [
        "s >> s ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        19,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "break break ;",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18,
        6,
        14,
        19
      ],
      "mod_code": [
        "int flag = 0 ;",
        "int i = 1 ;",
        "while ( j >= i )",
        "break break ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        18,
        6,
        19
      ],
      "mod_code": [
        "int flag = 0 ;",
        "int i = 1 ;",
        "break break ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        18,
        6,
        19,
        15
      ],
      "mod_code": [
        "int flag = 0 ;",
        "int i = 1 ;",
        "break break ;",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        18,
        14,
        19
      ],
      "mod_code": [
        "int flag = 0 ;",
        "while ( j >= i )",
        "break break ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        18,
        14,
        19,
        15
      ],
      "mod_code": [
        "int flag = 0 ;",
        "while ( j >= i )",
        "break break ;",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        18,
        19
      ],
      "mod_code": [
        "int flag = 0 ;",
        "break break ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        18,
        19,
        15
      ],
      "mod_code": [
        "int flag = 0 ;",
        "break break ;",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        14,
        19
      ],
      "mod_code": [
        "int i = 1 ;",
        "while ( j >= i )",
        "break break ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        14,
        19,
        15
      ],
      "mod_code": [
        "int i = 1 ;",
        "while ( j >= i )",
        "break break ;",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        19
      ],
      "mod_code": [
        "int i = 1 ;",
        "break break ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        6,
        19,
        15
      ],
      "mod_code": [
        "int i = 1 ;",
        "break break ;",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        19
      ],
      "mod_code": [
        "while ( j >= i )",
        "break break ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        19,
        15
      ],
      "mod_code": [
        "while ( j >= i )",
        "break break ;",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        19,
        15
      ],
      "mod_code": [
        "break break ;",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}