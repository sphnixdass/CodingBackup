{
  "meta": {
    "index": 1641,
    "hitid": "3D3B8GE892LQVGRB8LDVZ4P3WFYP9P",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "997A",
    "subid": "48707004"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , x , y = long long",
      "code": "long long n , x , y ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , x , y",
      "code": "cin >> n >> x >> y ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "p = 0 = long long",
      "code": "long long p = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "flag = flase = bool",
      "code": "bool flag = false ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if s at i is ' 0 '",
      "code": "if ( s [ i ] == ' 0 ' )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if not flag then set flag to true",
      "code": "if ( ! flag ) flag = true ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if s at i is ' 1 '",
      "code": "if ( s [ i ] == ' 1 ' )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if flag",
      "code": "if ( flag )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment p",
      "code": "p ++ ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "flag = false",
      "code": "flag = false ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if flag = true then increment [",
      "code": "if ( flag ) p ++ ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if p = 0",
      "code": "if ( ! p )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print 0",
      "code": "cout << 0 << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print ( p - 1 ) * 1LL * min ( x , y ) + y",
      "code": "cout << ( p - 1 ) * 1LL * min ( x , y ) + y << endl ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( flag == true ) [ flag ] ++ ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘{’ before ‘++’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "bool flag = flase ;"
      ],
      "err_line": 6,
      "err_msg": "‘flase’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( s at at ( i ) == ' 0 ' )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘)’ before ‘at’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( s at at ( i ) == ' 1 ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘)’ before ‘at’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( flag == true ) { [ flag ++ ; }"
      ],
      "err_line": 17,
      "err_msg": "expected ‘,’ before ‘++’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "bool flag = ' flase ' ;",
        "if ( flag == true ) [ flag ] ++ ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘{’ before ‘++’ token"
    },
    {
      "mod_line": [
        6,
        17,
        19
      ],
      "mod_code": [
        "bool flag = ' flase ' ;",
        "if ( flag == true ) [ flag ] ++ ;",
        "cout << 0 ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘{’ before ‘++’ token"
    },
    {
      "mod_line": [
        6,
        17,
        19,
        7
      ],
      "mod_code": [
        "bool flag = ' flase ' ;",
        "if ( flag == true ) [ flag ] ++ ;",
        "cout << 0 ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        19,
        5
      ],
      "mod_code": [
        "bool flag = ' flase ' ;",
        "if ( flag == true ) [ flag ] ++ ;",
        "cout << 0 ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        17,
        7
      ],
      "mod_code": [
        "bool flag = ' flase ' ;",
        "if ( flag == true ) [ flag ] ++ ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        17,
        7,
        5
      ],
      "mod_code": [
        "bool flag = ' flase ' ;",
        "if ( flag == true ) [ flag ] ++ ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        17,
        5
      ],
      "mod_code": [
        "bool flag = ' flase ' ;",
        "if ( flag == true ) [ flag ] ++ ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        19,
        7
      ],
      "mod_code": [
        "bool flag = ' flase ' ;",
        "cout << 0 ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        7,
        5
      ],
      "mod_code": [
        "bool flag = ' flase ' ;",
        "cout << 0 ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        19,
        7,
        17
      ],
      "mod_code": [
        "bool flag = ' flase ' ;",
        "cout << 0 ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( flag == true ) { [ flag ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        19,
        5
      ],
      "mod_code": [
        "bool flag = ' flase ' ;",
        "cout << 0 ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        19,
        5,
        17
      ],
      "mod_code": [
        "bool flag = ' flase ' ;",
        "cout << 0 ;",
        "s >> s ;",
        "if ( flag == true ) { [ flag ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        19,
        17
      ],
      "mod_code": [
        "bool flag = ' flase ' ;",
        "cout << 0 ;",
        "if ( flag == true ) { [ flag ++ ; }"
      ],
      "err_line": 17,
      "err_msg": "expected ‘,’ before ‘++’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "bool flag = ' flase ' ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        5
      ],
      "mod_code": [
        "bool flag = ' flase ' ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        7,
        5,
        17
      ],
      "mod_code": [
        "bool flag = ' flase ' ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "s >> s ;",
        "if ( flag == true ) { [ flag ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        7,
        17
      ],
      "mod_code": [
        "bool flag = ' flase ' ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( flag == true ) { [ flag ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "bool flag = ' flase ' ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        5,
        17
      ],
      "mod_code": [
        "bool flag = ' flase ' ;",
        "s >> s ;",
        "if ( flag == true ) { [ flag ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "bool flag = ' flase ' ;",
        "if ( flag == true ) { [ flag ++ ; }"
      ],
      "err_line": 17,
      "err_msg": "expected ‘,’ before ‘++’ token"
    },
    {
      "mod_line": [
        17,
        19
      ],
      "mod_code": [
        "if ( flag == true ) [ flag ] ++ ;",
        "cout << 0 ;"
      ],
      "err_line": 17,
      "err_msg": "expected ‘{’ before ‘++’ token"
    },
    {
      "mod_line": [
        17,
        19,
        7
      ],
      "mod_code": [
        "if ( flag == true ) [ flag ] ++ ;",
        "cout << 0 ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        19,
        7,
        5
      ],
      "mod_code": [
        "if ( flag == true ) [ flag ] ++ ;",
        "cout << 0 ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        19,
        5
      ],
      "mod_code": [
        "if ( flag == true ) [ flag ] ++ ;",
        "cout << 0 ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        7
      ],
      "mod_code": [
        "if ( flag == true ) [ flag ] ++ ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        7,
        5
      ],
      "mod_code": [
        "if ( flag == true ) [ flag ] ++ ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        5
      ],
      "mod_code": [
        "if ( flag == true ) [ flag ] ++ ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        7
      ],
      "mod_code": [
        "cout << 0 ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        7,
        5
      ],
      "mod_code": [
        "cout << 0 ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        7,
        5,
        17
      ],
      "mod_code": [
        "cout << 0 ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "s >> s ;",
        "if ( flag == true ) { [ flag ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        7,
        17
      ],
      "mod_code": [
        "cout << 0 ;",
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( flag == true ) { [ flag ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        19,
        5
      ],
      "mod_code": [
        "cout << 0 ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        5,
        17
      ],
      "mod_code": [
        "cout << 0 ;",
        "s >> s ;",
        "if ( flag == true ) { [ flag ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        17
      ],
      "mod_code": [
        "cout << 0 ;",
        "if ( flag == true ) { [ flag ++ ; }"
      ],
      "err_line": 17,
      "err_msg": "expected ‘,’ before ‘++’ token"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        5,
        17
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "s >> s ;",
        "if ( flag == true ) { [ flag ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        17
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )",
        "if ( flag == true ) { [ flag ++ ; }"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        17
      ],
      "mod_code": [
        "s >> s ;",
        "if ( flag == true ) { [ flag ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}