{
  "meta": {
    "index": 1775,
    "hitid": "3FJ2RVH25Z0U39Q56N2J3RHAL5529E",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "313A",
    "subid": "41828499"
  },
  "lines": [
    {
      "line": 0,
      "text": "n = long long",
      "code": "long long n ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if n > = 0",
      "code": "if ( n >= 0 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print n",
      "code": "cout << n << endl ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 6,
      "text": "a , b = long long",
      "code": "long long a , b ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "n = abs ( n )",
      "code": "n = abs ( n ) ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "a = ( n / 10 ) modulo 10",
      "code": "a = ( n / 10 ) % 10 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "b = n modulo 10",
      "code": "b = n % 10 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if a > b",
      "code": "if ( a > b )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "n = ( ( n - 10 * a ) / 10 ) + b",
      "code": "n = ( ( n - 10 * a ) / 10 ) + b ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 13,
      "text": "subtract b from n",
      "code": "n -= b ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "divide n by 10",
      "code": "n /= 10 ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "change sign of n",
      "code": "n *= - 1 ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "print n",
      "code": "cout << n << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;"
      ],
      "err_line": 8,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "n = * n ;"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "int n = abs ( n ) ;"
      ],
      "err_line": 8,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        8,
        7,
        5
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "int n = abs ( n ) ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        7,
        5,
        16
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "int n = abs ( n ) ;",
        "else else",
        "n = * n ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        7,
        5,
        12
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "int n = abs ( n ) ;",
        "else else",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        7,
        5,
        3
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "int n = abs ( n ) ;",
        "else else",
        "if ( ! n )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        7,
        16
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "int n = abs ( n ) ;",
        "n = * n ;"
      ],
      "err_line": 8,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        8,
        7,
        16,
        12
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "int n = abs ( n ) ;",
        "n = * n ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        8,
        7,
        16,
        3
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "int n = abs ( n ) ;",
        "n = * n ;",
        "if ( ! n )"
      ],
      "err_line": 8,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        8,
        7,
        12
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "int n = abs ( n ) ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        8,
        7,
        12,
        3
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "int n = abs ( n ) ;",
        "else else",
        "if ( ! n )"
      ],
      "err_line": 8,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        8,
        7,
        3
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "int n = abs ( n ) ;",
        "if ( ! n )"
      ],
      "err_line": 8,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        5,
        16
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "else else",
        "n = * n ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        5,
        16,
        12
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "else else",
        "n = * n ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        5,
        16,
        3
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "else else",
        "n = * n ;",
        "if ( ! n )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        5,
        12
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "else else",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        5,
        12,
        3
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "else else",
        "else else",
        "if ( ! n )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        5,
        3
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "else else",
        "if ( ! n )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        8,
        16
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "n = * n ;"
      ],
      "err_line": 8,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        8,
        16,
        12
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "n = * n ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        8,
        16,
        12,
        3
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "n = * n ;",
        "else else",
        "if ( ! n )"
      ],
      "err_line": 8,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        8,
        16,
        3
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "n = * n ;",
        "if ( ! n )"
      ],
      "err_line": 8,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "else else"
      ],
      "err_line": 8,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        8,
        12,
        3
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "else else",
        "if ( ! n )"
      ],
      "err_line": 8,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "int a = ( n / 10 ) % 10 ;",
        "if ( ! n )"
      ],
      "err_line": 8,
      "err_msg": "conflicting declaration ‘int a’"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "int n = abs ( n ) ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        5,
        16
      ],
      "mod_code": [
        "int n = abs ( n ) ;",
        "else else",
        "n = * n ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        5,
        16,
        12
      ],
      "mod_code": [
        "int n = abs ( n ) ;",
        "else else",
        "n = * n ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        5,
        16,
        3
      ],
      "mod_code": [
        "int n = abs ( n ) ;",
        "else else",
        "n = * n ;",
        "if ( ! n )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        5,
        12
      ],
      "mod_code": [
        "int n = abs ( n ) ;",
        "else else",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        5,
        12,
        3
      ],
      "mod_code": [
        "int n = abs ( n ) ;",
        "else else",
        "else else",
        "if ( ! n )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        5,
        3
      ],
      "mod_code": [
        "int n = abs ( n ) ;",
        "else else",
        "if ( ! n )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        16
      ],
      "mod_code": [
        "int n = abs ( n ) ;",
        "n = * n ;"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7,
        16,
        12
      ],
      "mod_code": [
        "int n = abs ( n ) ;",
        "n = * n ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        16,
        12,
        3
      ],
      "mod_code": [
        "int n = abs ( n ) ;",
        "n = * n ;",
        "else else",
        "if ( ! n )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        16,
        3
      ],
      "mod_code": [
        "int n = abs ( n ) ;",
        "n = * n ;",
        "if ( ! n )"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "int n = abs ( n ) ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        12,
        3
      ],
      "mod_code": [
        "int n = abs ( n ) ;",
        "else else",
        "if ( ! n )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        16
      ],
      "mod_code": [
        "else else",
        "n = * n ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        16,
        12
      ],
      "mod_code": [
        "else else",
        "n = * n ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        16,
        12,
        3
      ],
      "mod_code": [
        "else else",
        "n = * n ;",
        "else else",
        "if ( ! n )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        16,
        3
      ],
      "mod_code": [
        "else else",
        "n = * n ;",
        "if ( ! n )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "else else",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        12,
        3
      ],
      "mod_code": [
        "else else",
        "else else",
        "if ( ! n )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "else else",
        "if ( ! n )"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        16,
        12
      ],
      "mod_code": [
        "n = * n ;",
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        16,
        12,
        3
      ],
      "mod_code": [
        "n = * n ;",
        "else else",
        "if ( ! n )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        16,
        3
      ],
      "mod_code": [
        "n = * n ;",
        "if ( ! n )"
      ],
      "err_line": 16,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘long long int’)"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "else else",
        "if ( ! n )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}