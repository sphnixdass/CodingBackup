{
  "meta": {
    "index": 1188,
    "hitid": "3XDSWAMB22MDTQZTKI2B1ZGL69OQCO",
    "workerid": "AIWEXPJAU66D9",
    "probid": "910A",
    "subid": "48497167"
  },
  "lines": [
    {
      "line": 0,
      "text": "in the function MJ with string argument nums and integer arguments n and d that returns integer",
      "code": "int MJ ( string nums , int n , int d )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer array jumps with n elements",
      "code": "int jumps [ n ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for integer i = 0 to n exclusive jumps [ i ] = INT_MAX",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { jumps [ i ] = INT_MAX ; }",
      "indent": 1
    },
    {
      "line": 3,
      "text": "jumps [ 0 ] = 0",
      "code": "jumps [ 0 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integer array result with n elements",
      "code": "int result [ n ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive set result [ i ] = - 1",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { result [ i ] = - 1 ; }",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set value of result [ 0 ] to 1",
      "code": "result [ 0 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print result [ 2 ] to error stream",
      "code": "cerr << result [ 2 ] ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for integer i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if nums [ i ] = ' 1 '",
      "code": "if ( nums [ i ] == ' 1 ' )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "for integer j = 0 to i exclusive",
      "code": "for ( int j = 0 ; j < i ; j ++ )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if nums [ j ] = ' 1 '",
      "code": "if ( nums [ j ] == ' 1 ' )",
      "indent": 4
    },
    {
      "line": 12,
      "text": "if j + d > = i",
      "code": "if ( j + d >= i )",
      "indent": 5
    },
    {
      "line": 13,
      "text": "if jumps [ j ] + 1 is less than jumps [ i ]",
      "code": "if ( jumps [ j ] + 1 < jumps [ i ] )",
      "indent": 6
    },
    {
      "line": 14,
      "text": "set value of jumps [ i ] to jumps [ j ] + 1",
      "code": "jumps [ i ] = jumps [ j ] + 1 ;",
      "indent": 7
    },
    {
      "line": 15,
      "text": "set result [ i ] to 1",
      "code": "result [ i ] = 1 ;",
      "indent": 7
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 6
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 20,
      "text": "if result [ i ] ! = 1 , return - 1",
      "code": "if ( result [ i ] != 1 ) return - 1 ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "return jumps [ n - 1 ]",
      "code": "return jumps [ n - 1 ] ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 26,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "create integer d",
      "code": "int d ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "read d",
      "code": "cin >> d ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "create string nums",
      "code": "string nums ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "read nums",
      "code": "cin >> nums ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "set integer minjumps to MJ of nums , n and , d",
      "code": "int minjumps = MJ ( nums , n , d ) ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "print minjumps",
      "code": "cout << minjumps << endl ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a [ n ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘jumps’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "bool jumps [ 0 ] = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘bool jumps [0]’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "while ( cin >> n )"
      ],
      "err_line": 29,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "int t ;"
      ],
      "err_line": 29,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "string nums nums ;"
      ],
      "err_line": 30,
      "err_msg": "expected initializer before ‘nums’"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "int minjumps = MJ ( nums , n ) , d ;"
      ],
      "err_line": 32,
      "err_msg": "too few arguments to function ‘int MJ(std::__cxx11::string, int, int)’"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "cout << result [ 2 ] << endl ;"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        7,
        11
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "cout << result [ 2 ] << endl ;",
        "if ( nums [ j ] == ' l ' )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        7,
        11,
        3
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "cout << result [ 2 ] << endl ;",
        "if ( nums [ j ] == ' l ' )",
        "bool jumps [ 0 ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        7,
        11,
        15
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "cout << result [ 2 ] << endl ;",
        "if ( nums [ j ] == ' l ' )",
        "result [ i ] = ' 1 ' ;"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        7,
        11,
        27
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "cout << result [ 2 ] << endl ;",
        "if ( nums [ j ] == ' l ' )",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        7,
        3
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "cout << result [ 2 ] << endl ;",
        "bool jumps [ 0 ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        7,
        3,
        15
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "cout << result [ 2 ] << endl ;",
        "bool jumps [ 0 ] = 0 ;",
        "result [ i ] = ' 1 ' ;"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        7,
        3,
        27
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "cout << result [ 2 ] << endl ;",
        "bool jumps [ 0 ] = 0 ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        7,
        15
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "cout << result [ 2 ] << endl ;",
        "result [ i ] = ' 1 ' ;"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        7,
        15,
        27
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "cout << result [ 2 ] << endl ;",
        "result [ i ] = ' 1 ' ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        7,
        27
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "cout << result [ 2 ] << endl ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "if ( nums [ j ] == ' l ' )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        11,
        3
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "if ( nums [ j ] == ' l ' )",
        "bool jumps [ 0 ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        11,
        3,
        15
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "if ( nums [ j ] == ' l ' )",
        "bool jumps [ 0 ] = 0 ;",
        "result [ i ] = ' 1 ' ;"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        11,
        3,
        27
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "if ( nums [ j ] == ' l ' )",
        "bool jumps [ 0 ] = 0 ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        11,
        15
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "if ( nums [ j ] == ' l ' )",
        "result [ i ] = ' 1 ' ;"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        11,
        15,
        27
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "if ( nums [ j ] == ' l ' )",
        "result [ i ] = ' 1 ' ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        11,
        27
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "if ( nums [ j ] == ' l ' )",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "bool jumps [ 0 ] = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        3,
        15
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "bool jumps [ 0 ] = 0 ;",
        "result [ i ] = ' 1 ' ;"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        3,
        15,
        27
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "bool jumps [ 0 ] = 0 ;",
        "result [ i ] = ' 1 ' ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        3,
        27
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "bool jumps [ 0 ] = 0 ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "result [ i ] = ' 1 ' ;"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        15,
        27
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "result [ i ] = ' 1 ' ;",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        27
      ],
      "mod_code": [
        "int MJ ( string nums , string n , int d )",
        "while ( cin >> n )"
      ],
      "err_line": 1,
      "err_msg": "size of array ‘jumps’ has non-integral type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        7,
        11,
        3
      ],
      "mod_code": [
        "cout << result [ 2 ] << endl ;",
        "if ( nums [ j ] == ' l ' )",
        "bool jumps [ 0 ] = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘bool jumps [0]’"
    },
    {
      "mod_line": [
        7,
        11,
        3,
        15
      ],
      "mod_code": [
        "cout << result [ 2 ] << endl ;",
        "if ( nums [ j ] == ' l ' )",
        "bool jumps [ 0 ] = 0 ;",
        "result [ i ] = ' 1 ' ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘bool jumps [0]’"
    },
    {
      "mod_line": [
        7,
        11,
        3,
        27
      ],
      "mod_code": [
        "cout << result [ 2 ] << endl ;",
        "if ( nums [ j ] == ' l ' )",
        "bool jumps [ 0 ] = 0 ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘bool jumps [0]’"
    },
    {
      "mod_line": [
        7,
        11,
        15,
        27
      ],
      "mod_code": [
        "cout << result [ 2 ] << endl ;",
        "if ( nums [ j ] == ' l ' )",
        "result [ i ] = ' 1 ' ;",
        "while ( cin >> n )"
      ],
      "err_line": 29,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        11,
        27
      ],
      "mod_code": [
        "cout << result [ 2 ] << endl ;",
        "if ( nums [ j ] == ' l ' )",
        "while ( cin >> n )"
      ],
      "err_line": 29,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "cout << result [ 2 ] << endl ;",
        "bool jumps [ 0 ] = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘bool jumps [0]’"
    },
    {
      "mod_line": [
        7,
        3,
        15
      ],
      "mod_code": [
        "cout << result [ 2 ] << endl ;",
        "bool jumps [ 0 ] = 0 ;",
        "result [ i ] = ' 1 ' ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘bool jumps [0]’"
    },
    {
      "mod_line": [
        7,
        3,
        15,
        27
      ],
      "mod_code": [
        "cout << result [ 2 ] << endl ;",
        "bool jumps [ 0 ] = 0 ;",
        "result [ i ] = ' 1 ' ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘bool jumps [0]’"
    },
    {
      "mod_line": [
        7,
        3,
        27
      ],
      "mod_code": [
        "cout << result [ 2 ] << endl ;",
        "bool jumps [ 0 ] = 0 ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘bool jumps [0]’"
    },
    {
      "mod_line": [
        7,
        15,
        27
      ],
      "mod_code": [
        "cout << result [ 2 ] << endl ;",
        "result [ i ] = ' 1 ' ;",
        "while ( cin >> n )"
      ],
      "err_line": 29,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        27
      ],
      "mod_code": [
        "cout << result [ 2 ] << endl ;",
        "while ( cin >> n )"
      ],
      "err_line": 29,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "if ( nums [ j ] == ' l ' )",
        "bool jumps [ 0 ] = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘bool jumps [0]’"
    },
    {
      "mod_line": [
        11,
        3,
        15
      ],
      "mod_code": [
        "if ( nums [ j ] == ' l ' )",
        "bool jumps [ 0 ] = 0 ;",
        "result [ i ] = ' 1 ' ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘bool jumps [0]’"
    },
    {
      "mod_line": [
        11,
        3,
        15,
        27
      ],
      "mod_code": [
        "if ( nums [ j ] == ' l ' )",
        "bool jumps [ 0 ] = 0 ;",
        "result [ i ] = ' 1 ' ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘bool jumps [0]’"
    },
    {
      "mod_line": [
        11,
        3,
        27
      ],
      "mod_code": [
        "if ( nums [ j ] == ' l ' )",
        "bool jumps [ 0 ] = 0 ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘bool jumps [0]’"
    },
    {
      "mod_line": [
        11,
        15,
        27
      ],
      "mod_code": [
        "if ( nums [ j ] == ' l ' )",
        "result [ i ] = ' 1 ' ;",
        "while ( cin >> n )"
      ],
      "err_line": 29,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        27
      ],
      "mod_code": [
        "if ( nums [ j ] == ' l ' )",
        "while ( cin >> n )"
      ],
      "err_line": 29,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "bool jumps [ 0 ] = 0 ;",
        "result [ i ] = ' 1 ' ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘bool jumps [0]’"
    },
    {
      "mod_line": [
        3,
        15,
        27
      ],
      "mod_code": [
        "bool jumps [ 0 ] = 0 ;",
        "result [ i ] = ' 1 ' ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘bool jumps [0]’"
    },
    {
      "mod_line": [
        3,
        27
      ],
      "mod_code": [
        "bool jumps [ 0 ] = 0 ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘bool jumps [0]’"
    },
    {
      "mod_line": [
        15,
        27
      ],
      "mod_code": [
        "result [ i ] = ' 1 ' ;",
        "while ( cin >> n )"
      ],
      "err_line": 29,
      "err_msg": "‘d’ was not declared in this scope"
    }
  ]
}