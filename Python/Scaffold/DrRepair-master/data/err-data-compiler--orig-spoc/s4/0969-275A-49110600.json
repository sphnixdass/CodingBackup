{
  "meta": {
    "index": 969,
    "hitid": "3PKJ68EHDNQNOB6WBKW3FP1F6TXHJ4",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "275A",
    "subid": "49110600"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "arr = array of 3 by 3 int filled with 1",
      "code": "int arr [ 3 ] [ 3 ] = { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "c = 0",
      "code": "int c = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "x = int",
      "code": "int x ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 1 to 9 inclusive",
      "code": "for ( int i = 1 ; i <= 9 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if x is odd",
      "code": "if ( x % 2 != 0 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if i is 1",
      "code": "if ( i == 1 )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "arr [ 0 ] [ 0 ] = fabs ( arr [ 0 ] [ 0 ] - 1 )",
      "code": "arr [ 0 ] [ 0 ] = fabs ( arr [ 0 ] [ 0 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "arr [ 0 ] [ 1 ] = fabs ( arr [ 0 ] [ 1 ] - 1 )",
      "code": "arr [ 0 ] [ 1 ] = fabs ( arr [ 0 ] [ 1 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "arr [ 1 ] [ 0 ] = fabs ( arr [ 1 ] [ 0 ] - 1 )",
      "code": "arr [ 1 ] [ 0 ] = fabs ( arr [ 1 ] [ 0 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "else if i is 3",
      "code": "else if ( i == 3 )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - 1 )",
      "code": "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "arr [ 0 ] [ 1 ] = fabs ( arr [ 0 ] [ 1 ] - 1 )",
      "code": "arr [ 0 ] [ 1 ] = fabs ( arr [ 0 ] [ 1 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "arr [ 1 ] [ 2 ] = fabs ( arr [ 1 ] [ 2 ] - 1 )",
      "code": "arr [ 1 ] [ 2 ] = fabs ( arr [ 1 ] [ 2 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "else if i is 4",
      "code": "else if ( i == 4 )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "arr [ 1 ] [ 0 ] = fabs ( arr [ 1 ] [ 0 ] - 1 )",
      "code": "arr [ 1 ] [ 0 ] = fabs ( arr [ 1 ] [ 0 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "arr [ 0 ] [ 0 ] = fabs ( arr [ 0 ] [ 0 ] - 1 )",
      "code": "arr [ 0 ] [ 0 ] = fabs ( arr [ 0 ] [ 0 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - 1 )",
      "code": "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "arr [ 2 ] [ 0 ] = fabs ( arr [ 2 ] [ 0 ] - 1 )",
      "code": "arr [ 2 ] [ 0 ] = fabs ( arr [ 2 ] [ 0 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "else if i is 6",
      "code": "else if ( i == 6 )",
      "indent": 3
    },
    {
      "line": 21,
      "text": "arr [ 1 ] [ 2 ] = fabs ( arr [ 1 ] [ 2 ] - 1 )",
      "code": "arr [ 1 ] [ 2 ] = fabs ( arr [ 1 ] [ 2 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - 1 )",
      "code": "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "arr [ 2 ] [ 2 ] = fabs ( arr [ 2 ] [ 2 ] - 1 )",
      "code": "arr [ 2 ] [ 2 ] = fabs ( arr [ 2 ] [ 2 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - 1 )",
      "code": "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "else if i is 7",
      "code": "else if ( i == 7 )",
      "indent": 3
    },
    {
      "line": 26,
      "text": "arr [ 1 ] [ 0 ] = fabs ( arr [ 1 ] [ 0 ] - 1 )",
      "code": "arr [ 1 ] [ 0 ] = fabs ( arr [ 1 ] [ 0 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "arr [ 2 ] [ 0 ] = fabs ( arr [ 2 ] [ 0 ] - 1 )",
      "code": "arr [ 2 ] [ 0 ] = fabs ( arr [ 2 ] [ 0 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 28,
      "text": "arr [ 2 ] [ 1 ] = fabs ( arr [ 2 ] [ 1 ] - 1 )",
      "code": "arr [ 2 ] [ 1 ] = fabs ( arr [ 2 ] [ 1 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 29,
      "text": "else if i is 9",
      "code": "else if ( i == 9 )",
      "indent": 3
    },
    {
      "line": 30,
      "text": "arr [ 2 ] [ 2 ] = fabs ( arr [ 2 ] [ 2 ] - 1 )",
      "code": "arr [ 2 ] [ 2 ] = fabs ( arr [ 2 ] [ 2 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 31,
      "text": "arr [ 1 ] [ 2 ] = fabs ( arr [ 1 ] [ 2 ] - 1 )",
      "code": "arr [ 1 ] [ 2 ] = fabs ( arr [ 1 ] [ 2 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 32,
      "text": "arr [ 2 ] [ 1 ] = fabs ( arr [ 2 ] [ 1 ] - 1 )",
      "code": "arr [ 2 ] [ 1 ] = fabs ( arr [ 2 ] [ 1 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 33,
      "text": "else if i is 2",
      "code": "else if ( i == 2 )",
      "indent": 3
    },
    {
      "line": 34,
      "text": "arr [ 0 ] [ 1 ] = fabs ( arr [ 0 ] [ 1 ] - 1 )",
      "code": "arr [ 0 ] [ 1 ] = fabs ( arr [ 0 ] [ 1 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 35,
      "text": "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - 1 )",
      "code": "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 36,
      "text": "arr [ 0 ] [ 0 ] = fabs ( arr [ 0 ] [ 0 ] - 1 )",
      "code": "arr [ 0 ] [ 0 ] = fabs ( arr [ 0 ] [ 0 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 37,
      "text": "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - 1 )",
      "code": "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 38,
      "text": "else if i is 5",
      "code": "else if ( i == 5 )",
      "indent": 3
    },
    {
      "line": 39,
      "text": "arr [ 0 ] [ 1 ] = fabs ( arr [ 0 ] [ 1 ] - 1 )",
      "code": "arr [ 0 ] [ 1 ] = fabs ( arr [ 0 ] [ 1 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 40,
      "text": "arr [ 1 ] [ 2 ] = fabs ( arr [ 1 ] [ 2 ] - 1 )",
      "code": "arr [ 1 ] [ 2 ] = fabs ( arr [ 1 ] [ 2 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 41,
      "text": "arr [ 1 ] [ 0 ] = fabs ( arr [ 1 ] [ 0 ] - 1 )",
      "code": "arr [ 1 ] [ 0 ] = fabs ( arr [ 1 ] [ 0 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 42,
      "text": "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - 1 )",
      "code": "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 43,
      "text": "arr [ 2 ] [ 1 ] = fabs ( arr [ 2 ] [ 1 ] - 1 )",
      "code": "arr [ 2 ] [ 1 ] = fabs ( arr [ 2 ] [ 1 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 44,
      "text": "else if i is 8",
      "code": "else if ( i == 8 )",
      "indent": 3
    },
    {
      "line": 45,
      "text": "arr [ 2 ] [ 1 ] = fabs ( arr [ 2 ] [ 1 ] - 1 )",
      "code": "arr [ 2 ] [ 1 ] = fabs ( arr [ 2 ] [ 1 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 46,
      "text": "arr [ 2 ] [ 2 ] = fabs ( arr [ 2 ] [ 2 ] - 1 )",
      "code": "arr [ 2 ] [ 2 ] = fabs ( arr [ 2 ] [ 2 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 47,
      "text": "arr [ 2 ] [ 0 ] = fabs ( arr [ 2 ] [ 0 ] - 1 )",
      "code": "arr [ 2 ] [ 0 ] = fabs ( arr [ 2 ] [ 0 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 48,
      "text": "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - 1 )",
      "code": "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - 1 ) ;",
      "indent": 4
    },
    {
      "line": 49,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 51,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 52,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 53,
      "text": "for j = 0 to 3 exclusive read arr [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < 3 ; j ++ ) cout << arr [ i ] [ j ] ;",
      "indent": 2
    },
    {
      "line": 54,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 55,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 57,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "c = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 1 ; i <= 9 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 5,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        52
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 52,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "c = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        53
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "c = 0 ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) cin >> arr [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        53,
        42
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "c = 0 ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - ' 1 ' ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        53,
        12
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "c = 0 ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - ' 1 ' ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        53,
        7
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "c = 0 ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "if ( ! i )"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        42
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "c = 0 ;",
        "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - ' 1 ' ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        42,
        12
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "c = 0 ;",
        "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - ' 1 ' ) ;",
        "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - ' 1 ' ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        42,
        7
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "c = 0 ;",
        "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - ' 1 ' ) ;",
        "if ( ! i )"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        12
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "c = 0 ;",
        "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - ' 1 ' ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        12,
        7
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "c = 0 ;",
        "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - ' 1 ' ) ;",
        "if ( ! i )"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        2,
        7
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "c = 0 ;",
        "if ( ! i )"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        53
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) cin >> arr [ i ] [ j ] ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        53,
        42
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - ' 1 ' ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        53,
        42,
        12
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - ' 1 ' ) ;",
        "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - ' 1 ' ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        53,
        42,
        7
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - ' 1 ' ) ;",
        "if ( ! i )"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        53,
        12
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - ' 1 ' ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        53,
        12,
        7
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - ' 1 ' ) ;",
        "if ( ! i )"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        53,
        7
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "if ( ! i )"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        42
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - ' 1 ' ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        42,
        12
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - ' 1 ' ) ;",
        "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - ' 1 ' ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        42,
        12,
        7
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - ' 1 ' ) ;",
        "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - ' 1 ' ) ;",
        "if ( ! i )"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        42,
        7
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - ' 1 ' ) ;",
        "if ( ! i )"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - ' 1 ' ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        12,
        7
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - ' 1 ' ) ;",
        "if ( ! i )"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int arr [ 3 ] = { 1 } ;",
        "if ( ! i )"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        53
      ],
      "mod_code": [
        "c = 0 ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) cin >> arr [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        53,
        42
      ],
      "mod_code": [
        "c = 0 ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - ' 1 ' ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        53,
        42,
        12
      ],
      "mod_code": [
        "c = 0 ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - ' 1 ' ) ;",
        "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - ' 1 ' ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        53,
        42,
        7
      ],
      "mod_code": [
        "c = 0 ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - ' 1 ' ) ;",
        "if ( ! i )"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        53,
        12
      ],
      "mod_code": [
        "c = 0 ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - ' 1 ' ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        53,
        12,
        7
      ],
      "mod_code": [
        "c = 0 ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - ' 1 ' ) ;",
        "if ( ! i )"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        53,
        7
      ],
      "mod_code": [
        "c = 0 ;",
        "for ( int j = 0 ; j < 3 ; j ++ ) cin >> arr [ i ] [ j ] ;",
        "if ( ! i )"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        42
      ],
      "mod_code": [
        "c = 0 ;",
        "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - ' 1 ' ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        42,
        12
      ],
      "mod_code": [
        "c = 0 ;",
        "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - ' 1 ' ) ;",
        "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - ' 1 ' ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        42,
        12,
        7
      ],
      "mod_code": [
        "c = 0 ;",
        "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - ' 1 ' ) ;",
        "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - ' 1 ' ) ;",
        "if ( ! i )"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        42,
        7
      ],
      "mod_code": [
        "c = 0 ;",
        "arr [ 1 ] [ 1 ] = fabs ( arr [ 1 ] [ 1 ] - ' 1 ' ) ;",
        "if ( ! i )"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "c = 0 ;",
        "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - ' 1 ' ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        12,
        7
      ],
      "mod_code": [
        "c = 0 ;",
        "arr [ 0 ] [ 2 ] = fabs ( arr [ 0 ] [ 2 ] - ' 1 ' ) ;",
        "if ( ! i )"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "c = 0 ;",
        "if ( ! i )"
      ],
      "err_line": 2,
      "err_msg": "‘c’ was not declared in this scope"
    }
  ]
}