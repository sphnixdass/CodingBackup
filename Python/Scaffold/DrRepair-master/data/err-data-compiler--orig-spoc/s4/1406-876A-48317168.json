{
  "meta": {
    "index": 1406,
    "hitid": "3MQY1YVHS3EDR25247GFUXC095B2BR",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "876A",
    "subid": "48317168"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant long long mod = 1e9 + 7",
      "code": "const long long mod = 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let const int maxn = 1e5 + 5",
      "code": "const int maxn = 1e5 + 5 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "let ints n , a , b , and c",
      "code": "int n , a , b , c ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n , a , b , and c",
      "code": "cin >> n >> a >> b >> c ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if a is equal to min of a and min ( b , c )",
      "code": "if ( a == min ( a , min ( b , c ) ) )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print ( n - 1 ) * a",
      "code": "cout << ( n - 1 ) * a << endl ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else if b is equal to min of a and min ( b , c )",
      "code": "else if ( b == min ( a , min ( b , c ) ) )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "display ( n - 1 ) * b",
      "code": "cout << ( n - 1 ) * b << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else do",
      "code": "else",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if n is greater than 2",
      "code": "if ( n > 2 )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "display min ( a , b ) + ( n - 2 ) * c",
      "code": "cout << min ( a , b ) + ( n - 2 ) * c << endl ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "otherwise",
      "code": "else",
      "indent": 2
    },
    {
      "line": 13,
      "text": "print ( n - 1 ) * min ( a , b )",
      "code": "cout << ( n - 1 ) * min ( a , b ) << endl ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int n , a , b , c , c ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "if ( a == min ( b , min ( b , c ) ) )",
        "int n , a , b , c , c ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        3,
        7
      ],
      "mod_code": [
        "if ( a == min ( b , min ( b , c ) ) )",
        "int n , a , b , c , c ;",
        "else if ( b == min ( a , c ) )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        3,
        7,
        12
      ],
      "mod_code": [
        "if ( a == min ( b , min ( b , c ) ) )",
        "int n , a , b , c , c ;",
        "else if ( b == min ( a , c ) )",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        3,
        7,
        4
      ],
      "mod_code": [
        "if ( a == min ( b , min ( b , c ) ) )",
        "int n , a , b , c , c ;",
        "else if ( b == min ( a , c ) )",
        "cin >> n >> a >> b >> n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        3,
        7,
        1
      ],
      "mod_code": [
        "if ( a == min ( b , min ( b , c ) ) )",
        "int n , a , b , c , c ;",
        "else if ( b == min ( a , c ) )",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        3,
        12
      ],
      "mod_code": [
        "if ( a == min ( b , min ( b , c ) ) )",
        "int n , a , b , c , c ;",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        3,
        12,
        4
      ],
      "mod_code": [
        "if ( a == min ( b , min ( b , c ) ) )",
        "int n , a , b , c , c ;",
        "else ;",
        "cin >> n >> a >> b >> n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        3,
        12,
        1
      ],
      "mod_code": [
        "if ( a == min ( b , min ( b , c ) ) )",
        "int n , a , b , c , c ;",
        "else ;",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        3,
        4
      ],
      "mod_code": [
        "if ( a == min ( b , min ( b , c ) ) )",
        "int n , a , b , c , c ;",
        "cin >> n >> a >> b >> n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        5,
        3,
        4,
        1
      ],
      "mod_code": [
        "if ( a == min ( b , min ( b , c ) ) )",
        "int n , a , b , c , c ;",
        "cin >> n >> a >> b >> n ;",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        3,
        1
      ],
      "mod_code": [
        "if ( a == min ( b , min ( b , c ) ) )",
        "int n , a , b , c , c ;",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        7,
        12,
        1
      ],
      "mod_code": [
        "if ( a == min ( b , min ( b , c ) ) )",
        "else if ( b == min ( a , c ) )",
        "else ;",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        7,
        4,
        1
      ],
      "mod_code": [
        "if ( a == min ( b , min ( b , c ) ) )",
        "else if ( b == min ( a , c ) )",
        "cin >> n >> a >> b >> n ;",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        7,
        1
      ],
      "mod_code": [
        "if ( a == min ( b , min ( b , c ) ) )",
        "else if ( b == min ( a , c ) )",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        12,
        4,
        1
      ],
      "mod_code": [
        "if ( a == min ( b , min ( b , c ) ) )",
        "else ;",
        "cin >> n >> a >> b >> n ;",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        12,
        1
      ],
      "mod_code": [
        "if ( a == min ( b , min ( b , c ) ) )",
        "else ;",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        4,
        1
      ],
      "mod_code": [
        "if ( a == min ( b , min ( b , c ) ) )",
        "cin >> n >> a >> b >> n ;",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "if ( a == min ( b , min ( b , c ) ) )",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "int n , a , b , c , c ;",
        "else if ( b == min ( a , c ) )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        3,
        7,
        12
      ],
      "mod_code": [
        "int n , a , b , c , c ;",
        "else if ( b == min ( a , c ) )",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        3,
        7,
        12,
        4
      ],
      "mod_code": [
        "int n , a , b , c , c ;",
        "else if ( b == min ( a , c ) )",
        "else ;",
        "cin >> n >> a >> b >> n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        3,
        7,
        12,
        1
      ],
      "mod_code": [
        "int n , a , b , c , c ;",
        "else if ( b == min ( a , c ) )",
        "else ;",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3,
        7,
        4
      ],
      "mod_code": [
        "int n , a , b , c , c ;",
        "else if ( b == min ( a , c ) )",
        "cin >> n >> a >> b >> n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        3,
        7,
        4,
        1
      ],
      "mod_code": [
        "int n , a , b , c , c ;",
        "else if ( b == min ( a , c ) )",
        "cin >> n >> a >> b >> n ;",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3,
        7,
        1
      ],
      "mod_code": [
        "int n , a , b , c , c ;",
        "else if ( b == min ( a , c ) )",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "int n , a , b , c , c ;",
        "else ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        3,
        12,
        4
      ],
      "mod_code": [
        "int n , a , b , c , c ;",
        "else ;",
        "cin >> n >> a >> b >> n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        3,
        12,
        4,
        1
      ],
      "mod_code": [
        "int n , a , b , c , c ;",
        "else ;",
        "cin >> n >> a >> b >> n ;",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3,
        12,
        1
      ],
      "mod_code": [
        "int n , a , b , c , c ;",
        "else ;",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "int n , a , b , c , c ;",
        "cin >> n >> a >> b >> n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int c’"
    },
    {
      "mod_line": [
        3,
        4,
        1
      ],
      "mod_code": [
        "int n , a , b , c , c ;",
        "cin >> n >> a >> b >> n ;",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "int n , a , b , c , c ;",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        7,
        12,
        4,
        1
      ],
      "mod_code": [
        "else if ( b == min ( a , c ) )",
        "else ;",
        "cin >> n >> a >> b >> n ;",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        7,
        12,
        1
      ],
      "mod_code": [
        "else if ( b == min ( a , c ) )",
        "else ;",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        7,
        4,
        1
      ],
      "mod_code": [
        "else if ( b == min ( a , c ) )",
        "cin >> n >> a >> b >> n ;",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "else if ( b == min ( a , c ) )",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        12,
        4,
        1
      ],
      "mod_code": [
        "else ;",
        "cin >> n >> a >> b >> n ;",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        12,
        1
      ],
      "mod_code": [
        "else ;",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "cin >> n >> a >> b >> n ;",
        "const int const maxn = 1e5 + 5 ;"
      ],
      "err_line": 1,
      "err_msg": "duplicate ‘const’"
    }
  ]
}