{
  "meta": {
    "index": 2046,
    "hitid": "3MWOYZD5WVITZIJ4UVJLS5FXRZEON1",
    "workerid": "AIWEXPJAU66D9",
    "probid": "220A",
    "subid": "40538754"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare const int maxn = 101000",
      "code": "const int maxn = 101000 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare const int INF = 0x3f3f3f3f",
      "code": "const int INF = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare int array a with size maxn",
      "code": "int a [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare int array b with size maxn",
      "code": "int b [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "declare integer variable n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "declare int variable c = 0",
      "code": "int c = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read input to n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set sizeof ( a ) bytes at the pointer a to 0",
      "code": "memset ( a , 0 , sizeof ( a ) ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set sizeof ( b ) bytes at the pointer b to 0",
      "code": "memset ( b , 0 , sizeof ( b ) ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; ++ i ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "copy sizeof ( a ) bytes from a to b",
      "code": "memcpy ( b , a , sizeof ( a ) ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "sort array b",
      "code": "sort ( b , b + n ) ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if a [ i ] ! = b [ i ] , increment c",
      "code": "if ( a [ i ] != b [ i ] ) c ++ ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if c is greater than 2",
      "code": "if ( c > 2 )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "memset ( a , b , sizeof ( a ) ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "memset ( a , 0 ) ;"
      ],
      "err_line": 8,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "memset ( b , 0 ) ;"
      ],
      "err_line": 9,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "strcpy ( a , b , sizeof ( a ) ) ;"
      ],
      "err_line": 11,
      "err_msg": "cannot convert ‘int*’ to ‘char*’ for argument ‘1’ to ‘char* strcpy(char*, const char*)’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "memset ( a , b , sizeof ( a ) ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        11,
        16
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "memset ( a , b , sizeof ( a ) ) ;",
        "if ( c >= 2 )"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        11,
        16,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "memset ( a , b , sizeof ( a ) ) ;",
        "if ( c >= 2 )",
        "n = n ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        11,
        16,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "memset ( a , b , sizeof ( a ) ) ;",
        "if ( c >= 2 )",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        11,
        16,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "memset ( a , b , sizeof ( a ) ) ;",
        "if ( c >= 2 )",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        10,
        11,
        7
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "memset ( a , b , sizeof ( a ) ) ;",
        "n = n ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        11,
        7,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "memset ( a , b , sizeof ( a ) ) ;",
        "n = n ;",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        11,
        7,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "memset ( a , b , sizeof ( a ) ) ;",
        "n = n ;",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        10,
        11,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "memset ( a , b , sizeof ( a ) ) ;",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        11,
        18,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "memset ( a , b , sizeof ( a ) ) ;",
        "else else",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        10,
        11,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "memset ( a , b , sizeof ( a ) ) ;",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        10,
        16,
        7,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( c >= 2 )",
        "n = n ;",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        16,
        7,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( c >= 2 )",
        "n = n ;",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        10,
        16,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( c >= 2 )",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        16,
        18,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( c >= 2 )",
        "else else",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        10,
        16,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "if ( c >= 2 )",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        10,
        7,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "n = n ;",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        7,
        18,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "n = n ;",
        "else else",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        10,
        7,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "n = n ;",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        10,
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        10,
        18,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "else else",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ )",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        11,
        16
      ],
      "mod_code": [
        "memset ( a , b , sizeof ( a ) ) ;",
        "if ( c >= 2 )"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        16,
        7
      ],
      "mod_code": [
        "memset ( a , b , sizeof ( a ) ) ;",
        "if ( c >= 2 )",
        "n = n ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        16,
        7,
        18
      ],
      "mod_code": [
        "memset ( a , b , sizeof ( a ) ) ;",
        "if ( c >= 2 )",
        "n = n ;",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        16,
        7,
        0
      ],
      "mod_code": [
        "memset ( a , b , sizeof ( a ) ) ;",
        "if ( c >= 2 )",
        "n = n ;",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        11,
        16,
        18
      ],
      "mod_code": [
        "memset ( a , b , sizeof ( a ) ) ;",
        "if ( c >= 2 )",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        16,
        18,
        0
      ],
      "mod_code": [
        "memset ( a , b , sizeof ( a ) ) ;",
        "if ( c >= 2 )",
        "else else",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        11,
        16,
        0
      ],
      "mod_code": [
        "memset ( a , b , sizeof ( a ) ) ;",
        "if ( c >= 2 )",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "memset ( a , b , sizeof ( a ) ) ;",
        "n = n ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        7,
        18
      ],
      "mod_code": [
        "memset ( a , b , sizeof ( a ) ) ;",
        "n = n ;",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        7,
        18,
        0
      ],
      "mod_code": [
        "memset ( a , b , sizeof ( a ) ) ;",
        "n = n ;",
        "else else",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        11,
        7,
        0
      ],
      "mod_code": [
        "memset ( a , b , sizeof ( a ) ) ;",
        "n = n ;",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        11,
        18
      ],
      "mod_code": [
        "memset ( a , b , sizeof ( a ) ) ;",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        18,
        0
      ],
      "mod_code": [
        "memset ( a , b , sizeof ( a ) ) ;",
        "else else",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        11,
        0
      ],
      "mod_code": [
        "memset ( a , b , sizeof ( a ) ) ;",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        16,
        7,
        18
      ],
      "mod_code": [
        "if ( c >= 2 )",
        "n = n ;",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        16,
        7,
        18,
        0
      ],
      "mod_code": [
        "if ( c >= 2 )",
        "n = n ;",
        "else else",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        16,
        7,
        0
      ],
      "mod_code": [
        "if ( c >= 2 )",
        "n = n ;",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        16,
        18
      ],
      "mod_code": [
        "if ( c >= 2 )",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        16,
        18,
        0
      ],
      "mod_code": [
        "if ( c >= 2 )",
        "else else",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        16,
        0
      ],
      "mod_code": [
        "if ( c >= 2 )",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        7,
        18
      ],
      "mod_code": [
        "n = n ;",
        "else else"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        18,
        0
      ],
      "mod_code": [
        "n = n ;",
        "else else",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "n = n ;",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    },
    {
      "mod_line": [
        18,
        0
      ],
      "mod_code": [
        "else else",
        "const int const maxn = 101000 ;"
      ],
      "err_line": 0,
      "err_msg": "duplicate ‘const’"
    }
  ]
}