{
  "meta": {
    "index": 1156,
    "hitid": "38F60IALAGB6REW5P63MB3P7HRQT0C",
    "workerid": "A1APYLD4DUK33J",
    "probid": "910A",
    "subid": "40196476"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , d",
      "code": "int n , d ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n read d",
      "code": "cin >> n >> d ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create character array s with size 105",
      "code": "char s [ 105 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create integer ans with ans = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "create integer i with i = 0",
      "code": "int i = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "while i is less than n - 1",
      "code": "while ( i < n - 1 )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if s [ i + d ] to ' 1 '",
      "code": "if ( s [ i + d ] == ' 1 ' )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment ans",
      "code": "ans ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "set i to i + d",
      "code": "i = i + d ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "create integer j with j = i + d - 1",
      "code": "int j = i + d - 1 ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "create integer flag with flag = 1",
      "code": "int flag = 1 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "while j is greater than i",
      "code": "while ( j > i )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if s [ j ] is ' 1 '",
      "code": "if ( s [ j ] == ' 1 ' )",
      "indent": 4
    },
    {
      "line": 16,
      "text": "set i to j",
      "code": "i = j ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "increment ans",
      "code": "ans ++ ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 5
    },
    {
      "line": 19,
      "text": "break loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 21,
      "text": "decrement j",
      "code": "j -- ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 23,
      "text": "if flag is true",
      "code": "if ( flag )",
      "indent": 3
    },
    {
      "line": 24,
      "text": "set ans to - 1",
      "code": "ans = - 1 ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "print ans print newline",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 2,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char a [ 105 ] ;"
      ],
      "err_line": 4,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "i = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        25
      ],
      "mod_code": [
        "cout << ans ;",
        "break break ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        25,
        8
      ],
      "mod_code": [
        "cout << ans ;",
        "break break ;",
        "if ( s [ i + d ] == ' l ' )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        25,
        8,
        15
      ],
      "mod_code": [
        "cout << ans ;",
        "break break ;",
        "if ( s [ i + d ] == ' l ' )",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        25,
        8,
        14
      ],
      "mod_code": [
        "cout << ans ;",
        "break break ;",
        "if ( s [ i + d ] == ' l ' )",
        "while ( j >= i )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        25,
        8,
        11
      ],
      "mod_code": [
        "cout << ans ;",
        "break break ;",
        "if ( s [ i + d ] == ' l ' )",
        "else ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        25,
        15
      ],
      "mod_code": [
        "cout << ans ;",
        "break break ;",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        25,
        15,
        14
      ],
      "mod_code": [
        "cout << ans ;",
        "break break ;",
        "if ( s [ j ] == ' l ' )",
        "while ( j >= i )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        25,
        15,
        11
      ],
      "mod_code": [
        "cout << ans ;",
        "break break ;",
        "if ( s [ j ] == ' l ' )",
        "else ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        25,
        14
      ],
      "mod_code": [
        "cout << ans ;",
        "break break ;",
        "while ( j >= i )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        25,
        14,
        11
      ],
      "mod_code": [
        "cout << ans ;",
        "break break ;",
        "while ( j >= i )",
        "else ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        29,
        25,
        11
      ],
      "mod_code": [
        "cout << ans ;",
        "break break ;",
        "else ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        25,
        8
      ],
      "mod_code": [
        "break break ;",
        "if ( s [ i + d ] == ' l ' )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        25,
        8,
        15
      ],
      "mod_code": [
        "break break ;",
        "if ( s [ i + d ] == ' l ' )",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        25,
        8,
        15,
        14
      ],
      "mod_code": [
        "break break ;",
        "if ( s [ i + d ] == ' l ' )",
        "if ( s [ j ] == ' l ' )",
        "while ( j >= i )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        25,
        8,
        15,
        11
      ],
      "mod_code": [
        "break break ;",
        "if ( s [ i + d ] == ' l ' )",
        "if ( s [ j ] == ' l ' )",
        "else ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        25,
        8,
        14
      ],
      "mod_code": [
        "break break ;",
        "if ( s [ i + d ] == ' l ' )",
        "while ( j >= i )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        25,
        8,
        14,
        11
      ],
      "mod_code": [
        "break break ;",
        "if ( s [ i + d ] == ' l ' )",
        "while ( j >= i )",
        "else ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        25,
        8,
        11
      ],
      "mod_code": [
        "break break ;",
        "if ( s [ i + d ] == ' l ' )",
        "else ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        25,
        15
      ],
      "mod_code": [
        "break break ;",
        "if ( s [ j ] == ' l ' )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        25,
        15,
        14
      ],
      "mod_code": [
        "break break ;",
        "if ( s [ j ] == ' l ' )",
        "while ( j >= i )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        25,
        15,
        14,
        11
      ],
      "mod_code": [
        "break break ;",
        "if ( s [ j ] == ' l ' )",
        "while ( j >= i )",
        "else ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        25,
        15,
        11
      ],
      "mod_code": [
        "break break ;",
        "if ( s [ j ] == ' l ' )",
        "else ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        25,
        14
      ],
      "mod_code": [
        "break break ;",
        "while ( j >= i )"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        25,
        14,
        11
      ],
      "mod_code": [
        "break break ;",
        "while ( j >= i )",
        "else ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        25,
        11
      ],
      "mod_code": [
        "break break ;",
        "else ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘break’"
    }
  ]
}