{
  "meta": {
    "index": 1872,
    "hitid": "34R0BODSP1T3X209WHK3TCLXWCGE55",
    "workerid": "AIWEXPJAU66D9",
    "probid": "514A",
    "subid": "48652859"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "define string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read from the input to s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i from 0 to length of s exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if i = 0 and s [ i ] is equal to ' 9 ' , go to the start of the loop",
      "code": "if ( i == 0 && s [ i ] == ' 9 ' ) continue ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if s [ i ] > = ' 5 ' , change s [ i ] to ' 9 ' - s [ i ] + ' 0 '",
      "code": "if ( s [ i ] >= ' 5 ' ) { s [ i ] = ' 9 ' - s [ i ] + ' 0 ' ; }",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print s",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "vector < string > s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "if ( s [ i ] >= ' 5 ' ) s [ i ] = ' 5 ' - s [ i ] + ' 0 ' ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        2,
        1
      ],
      "mod_code": [
        "if ( s [ i ] >= ' 5 ' ) s [ i ] = ' 5 ' - s [ i ] + ' 0 ' ;",
        "s >> s ;",
        "vector < string > s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        5,
        2,
        1,
        7
      ],
      "mod_code": [
        "if ( s [ i ] >= ' 5 ' ) s [ i ] = ' 5 ' - s [ i ] + ' 0 ' ;",
        "s >> s ;",
        "vector < string > s ;",
        "cout << s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        5,
        2,
        7
      ],
      "mod_code": [
        "if ( s [ i ] >= ' 5 ' ) s [ i ] = ' 5 ' - s [ i ] + ' 0 ' ;",
        "s >> s ;",
        "cout << s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "if ( s [ i ] >= ' 5 ' ) s [ i ] = ' 5 ' - s [ i ] + ' 0 ' ;",
        "vector < string > s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        5,
        1,
        7
      ],
      "mod_code": [
        "if ( s [ i ] >= ' 5 ' ) s [ i ] = ' 5 ' - s [ i ] + ' 0 ' ;",
        "vector < string > s ;",
        "cout << s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "vector < string > s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        2,
        1,
        7
      ],
      "mod_code": [
        "s >> s ;",
        "vector < string > s ;",
        "cout << s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "s >> s ;",
        "cout << s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "vector < string > s ;",
        "cout << s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::vector<std::__cxx11::basic_string<char> >’)"
    }
  ]
}