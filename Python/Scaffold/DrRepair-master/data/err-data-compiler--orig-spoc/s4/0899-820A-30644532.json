{
  "meta": {
    "index": 899,
    "hitid": "3PN6H8C9R4KVB2YQVI00V5JYNRDDA3",
    "workerid": "AIWEXPJAU66D9",
    "probid": "820A",
    "subid": "30644532"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let c , v0 , v1 , a and l be integers",
      "code": "int c , v0 , v1 , a , l ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read c , v0 , v1 , a and l",
      "code": "cin >> c >> v0 >> v1 >> a >> l ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare integer variable called count = v0",
      "code": "int count = v0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare integer variable called sum = 1",
      "code": "int sum = 1 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "while count is less than c",
      "code": "while ( count < c )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "increase sum by one",
      "code": "sum ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if ( ( sum - 1 ) * ( a ) + ( v0 ) ) < = v1",
      "code": "if ( ( ( sum - 1 ) * ( a ) + ( v0 ) ) <= v1 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "count = count + ( sum - 1 ) * a + v0 - l",
      "code": "count = count + ( sum - 1 ) * a + v0 - l ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "count = count + v1 - l",
      "code": "count = count + v1 - l ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print sum and a new line",
      "code": "cout << sum << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        2,
        6,
        10
      ],
      "mod_code": [
        "int count = 1 ;",
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "while ( count <= c )",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        2,
        10
      ],
      "mod_code": [
        "int count = 1 ;",
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        6,
        10
      ],
      "mod_code": [
        "int count = 1 ;",
        "while ( count <= c )",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "int count = 1 ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        6,
        10
      ],
      "mod_code": [
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "while ( count <= c )",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "cin >> c >> v0 >> v1 >> l >> l ;",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "while ( count <= c )",
        "else else"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}