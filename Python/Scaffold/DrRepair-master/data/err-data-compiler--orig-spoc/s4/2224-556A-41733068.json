{
  "meta": {
    "index": 2224,
    "hitid": "3TLFH2L6Y9IDNOZJ4T70URIMFC5T22",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "556A",
    "subid": "41733068"
  },
  "lines": [
    {
      "line": 0,
      "text": "a = character array of size 200005",
      "code": "char a [ 200005 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "n , tot , sum = integers with tot = 0 , sum = 0",
      "code": "int n , tot = 0 , sum = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read a [ i ]",
      "code": "cin >> a [ i ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if a [ i ] is 1 , increment tot",
      "code": "if ( a [ i ] == ' 1 ' ) { tot ++ ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if a [ i ] is 0 , increment sum",
      "code": "if ( a [ i ] == ' 0 ' ) { sum ++ ; }",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if sum > tot",
      "code": "if ( sum > tot )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "n = n - tot * 2",
      "code": "n = n - tot * 2 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 12,
      "text": "n = n - sum * 2",
      "code": "n = n - sum * 2 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "print n",
      "code": "cout << n << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "a >> a [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [200005]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        7,
        5
      ],
      "mod_code": [
        "if ( a [ i ] == 1 ) tot ++ ;",
        "if ( a [ i ] == 0 ) sum ++ ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [200005]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        7,
        5,
        11
      ],
      "mod_code": [
        "if ( a [ i ] == 1 ) tot ++ ;",
        "if ( a [ i ] == 0 ) sum ++ ;",
        "a >> a [ i ] ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [200005]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        7,
        11
      ],
      "mod_code": [
        "if ( a [ i ] == 1 ) tot ++ ;",
        "if ( a [ i ] == 0 ) sum ++ ;",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "if ( a [ i ] == 1 ) tot ++ ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [200005]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        5,
        7
      ],
      "mod_code": [
        "if ( a [ i ] == 1 ) tot ++ ;",
        "a >> a [ i ] ;",
        "if ( a [ i ] == 0 ) { sum ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [200005]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        5,
        7,
        11
      ],
      "mod_code": [
        "if ( a [ i ] == 1 ) tot ++ ;",
        "a >> a [ i ] ;",
        "if ( a [ i ] == 0 ) { sum ++ ; }",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [200005]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        5,
        11
      ],
      "mod_code": [
        "if ( a [ i ] == 1 ) tot ++ ;",
        "a >> a [ i ] ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [200005]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        7,
        11
      ],
      "mod_code": [
        "if ( a [ i ] == 1 ) tot ++ ;",
        "if ( a [ i ] == 0 ) { sum ++ ; }",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "if ( a [ i ] == 1 ) tot ++ ;",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "if ( a [ i ] == 0 ) sum ++ ;",
        "a >> a [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [200005]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        5,
        6
      ],
      "mod_code": [
        "if ( a [ i ] == 0 ) sum ++ ;",
        "a >> a [ i ] ;",
        "if ( a [ i ] == 1 ) { tot ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [200005]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        5,
        6,
        11
      ],
      "mod_code": [
        "if ( a [ i ] == 0 ) sum ++ ;",
        "a >> a [ i ] ;",
        "if ( a [ i ] == 1 ) { tot ++ ; }",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [200005]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        5,
        11
      ],
      "mod_code": [
        "if ( a [ i ] == 0 ) sum ++ ;",
        "a >> a [ i ] ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [200005]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        6,
        11
      ],
      "mod_code": [
        "if ( a [ i ] == 0 ) sum ++ ;",
        "if ( a [ i ] == 1 ) { tot ++ ; }",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "if ( a [ i ] == 0 ) sum ++ ;",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "a >> a [ i ] ;",
        "if ( a [ i ] == 0 ) { sum ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [200005]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        7,
        6
      ],
      "mod_code": [
        "a >> a [ i ] ;",
        "if ( a [ i ] == 0 ) { sum ++ ; }",
        "if ( a [ i ] == 1 ) { tot ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [200005]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        7,
        6,
        11
      ],
      "mod_code": [
        "a >> a [ i ] ;",
        "if ( a [ i ] == 0 ) { sum ++ ; }",
        "if ( a [ i ] == 1 ) { tot ++ ; }",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [200005]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        7,
        11
      ],
      "mod_code": [
        "a >> a [ i ] ;",
        "if ( a [ i ] == 0 ) { sum ++ ; }",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [200005]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "a >> a [ i ] ;",
        "if ( a [ i ] == 1 ) { tot ++ ; }"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [200005]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        6,
        11
      ],
      "mod_code": [
        "a >> a [ i ] ;",
        "if ( a [ i ] == 1 ) { tot ++ ; }",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [200005]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "a >> a [ i ] ;",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘char [200005]’ and ‘char’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        7,
        6,
        11
      ],
      "mod_code": [
        "if ( a [ i ] == 0 ) { sum ++ ; }",
        "if ( a [ i ] == 1 ) { tot ++ ; }",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "if ( a [ i ] == 0 ) { sum ++ ; }",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "if ( a [ i ] == 1 ) { tot ++ ; }",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}