{
  "meta": {
    "index": 281,
    "hitid": "3JTPR5MTZS66J2SJS3V6R7Y2G94K5N",
    "workerid": "A1APYLD4DUK33J",
    "probid": "777A",
    "subid": "42557460"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , x",
      "code": "int n , x ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n read x",
      "code": "cin >> n >> x ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer arrays a1 , a2 , a3 , a4 , a5 , a6 with a1 size 3 , a2 size 3 , a3 size 3 , a4 size 3 , a5 size 3 , a6 size 3",
      "code": "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a5 [ 3 ] , a6 [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set a1 [ 0 ] to 0 , set a1 [ 1 ] to 1 , set a1 [ 2 ] to 2",
      "code": "a1 [ 0 ] = 0 , a1 [ 1 ] = 1 , a1 [ 2 ] = 2 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set a2 [ 0 ] to 1 , set a2 [ 1 ] to 0 , set a2 [ 2 ] to 2",
      "code": "a2 [ 0 ] = 1 , a2 [ 1 ] = 0 , a2 [ 2 ] = 2 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set a3 [ 0 ] to 1 , set a3 [ 1 ] to 2 , set a3 [ 2 ] to 0",
      "code": "a3 [ 0 ] = 1 , a3 [ 1 ] = 2 , a3 [ 2 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set a4 [ 0 ] to 2 , set a4 [ 1 ] to 1 , set a4 [ 2 ] to 0",
      "code": "a4 [ 0 ] = 2 , a4 [ 1 ] = 1 , a4 [ 2 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set a5 [ 0 ] to 2 , set a5 [ 1 ] to 0 , set a5 [ 2 ] to 1",
      "code": "a5 [ 0 ] = 2 , a5 [ 1 ] = 0 , a5 [ 2 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set a6 [ 0 ] to 0 , set a6 [ 1 ] to 2 , set a6 [ 2 ] to 1",
      "code": "a6 [ 0 ] = 0 , a6 [ 1 ] = 2 , a6 [ 2 ] = 1 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "set n to n % 6",
      "code": "n = n % 6 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if n is 1",
      "code": "if ( n == 1 )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print a2 [ x ] print newline",
      "code": "cout << a2 [ x ] << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else if n is 2",
      "code": "else if ( n == 2 )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print a3 [ x ] print newline",
      "code": "cout << a3 [ x ] << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else if n is 3",
      "code": "else if ( n == 3 )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print a4 [ x ] print newline",
      "code": "cout << a4 [ x ] << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else if n is 4",
      "code": "else if ( n == 4 )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print a5 [ x ] print newline",
      "code": "cout << a5 [ x ] << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "else if n is 5",
      "code": "else if ( n == 5 )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print a6 [ x ] print newline",
      "code": "cout << a6 [ x ] << endl ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "else if n is 0",
      "code": "else if ( n == 0 )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print a1 [ x ] print newline",
      "code": "cout << a1 [ x ] << endl ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a3 [3]’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> n >> k ;"
      ],
      "err_line": 2,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a4 [3]’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "else if ( n == 3 3 )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before numeric constant"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "else if ( n == \" 4 \" )"
      ],
      "err_line": 17,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "a5 [ 0 ] = 2 , a5 [ 1 ] = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a3 [3]’"
    },
    {
      "mod_line": [
        3,
        8,
        11
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "a5 [ 0 ] = 2 , a5 [ 1 ] = 0 ;",
        "if ( ! n )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a3 [3]’"
    },
    {
      "mod_line": [
        3,
        8,
        11,
        15
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "a5 [ 0 ] = 2 , a5 [ 1 ] = 0 ;",
        "if ( ! n )",
        "else if ( n == 3 3 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a3 [3]’"
    },
    {
      "mod_line": [
        3,
        8,
        11,
        13
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "a5 [ 0 ] = 2 , a5 [ 1 ] = 0 ;",
        "if ( ! n )",
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a3 [3]’"
    },
    {
      "mod_line": [
        3,
        8,
        15
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "a5 [ 0 ] = 2 , a5 [ 1 ] = 0 ;",
        "else if ( n == 3 3 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a3 [3]’"
    },
    {
      "mod_line": [
        3,
        8,
        15,
        13
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "a5 [ 0 ] = 2 , a5 [ 1 ] = 0 ;",
        "else if ( n == 3 3 )",
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a3 [3]’"
    },
    {
      "mod_line": [
        3,
        8,
        13
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "a5 [ 0 ] = 2 , a5 [ 1 ] = 0 ;",
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a3 [3]’"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "if ( ! n )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a3 [3]’"
    },
    {
      "mod_line": [
        3,
        11,
        15
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "if ( ! n )",
        "else if ( n == 3 3 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a3 [3]’"
    },
    {
      "mod_line": [
        3,
        11,
        15,
        13
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "if ( ! n )",
        "else if ( n == 3 3 )",
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a3 [3]’"
    },
    {
      "mod_line": [
        3,
        11,
        13
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "if ( ! n )",
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a3 [3]’"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "else if ( n == 3 3 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a3 [3]’"
    },
    {
      "mod_line": [
        3,
        15,
        13
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "else if ( n == 3 3 )",
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a3 [3]’"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a3 [3]’"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "a5 [ 0 ] = 2 , a5 [ 1 ] = 0 ;",
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a4 [3]’"
    },
    {
      "mod_line": [
        8,
        3,
        11
      ],
      "mod_code": [
        "a5 [ 0 ] = 2 , a5 [ 1 ] = 0 ;",
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "if ( ! n )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a4 [3]’"
    },
    {
      "mod_line": [
        8,
        3,
        11,
        15
      ],
      "mod_code": [
        "a5 [ 0 ] = 2 , a5 [ 1 ] = 0 ;",
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "if ( ! n )",
        "else if ( n == 3 3 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a4 [3]’"
    },
    {
      "mod_line": [
        8,
        3,
        11,
        13
      ],
      "mod_code": [
        "a5 [ 0 ] = 2 , a5 [ 1 ] = 0 ;",
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "if ( ! n )",
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a4 [3]’"
    },
    {
      "mod_line": [
        8,
        3,
        15
      ],
      "mod_code": [
        "a5 [ 0 ] = 2 , a5 [ 1 ] = 0 ;",
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "else if ( n == 3 3 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a4 [3]’"
    },
    {
      "mod_line": [
        8,
        3,
        15,
        13
      ],
      "mod_code": [
        "a5 [ 0 ] = 2 , a5 [ 1 ] = 0 ;",
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "else if ( n == 3 3 )",
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a4 [3]’"
    },
    {
      "mod_line": [
        8,
        3,
        13
      ],
      "mod_code": [
        "a5 [ 0 ] = 2 , a5 [ 1 ] = 0 ;",
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a4 [3]’"
    },
    {
      "mod_line": [
        8,
        11,
        15
      ],
      "mod_code": [
        "a5 [ 0 ] = 2 , a5 [ 1 ] = 0 ;",
        "if ( ! n )",
        "else if ( n == 3 3 )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before numeric constant"
    },
    {
      "mod_line": [
        8,
        11,
        15,
        13
      ],
      "mod_code": [
        "a5 [ 0 ] = 2 , a5 [ 1 ] = 0 ;",
        "if ( ! n )",
        "else if ( n == 3 3 )",
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        8,
        11,
        13
      ],
      "mod_code": [
        "a5 [ 0 ] = 2 , a5 [ 1 ] = 0 ;",
        "if ( ! n )",
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        8,
        15
      ],
      "mod_code": [
        "a5 [ 0 ] = 2 , a5 [ 1 ] = 0 ;",
        "else if ( n == 3 3 )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before numeric constant"
    },
    {
      "mod_line": [
        8,
        15,
        13
      ],
      "mod_code": [
        "a5 [ 0 ] = 2 , a5 [ 1 ] = 0 ;",
        "else if ( n == 3 3 )",
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "a5 [ 0 ] = 2 , a5 [ 1 ] = 0 ;",
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "if ( ! n )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a4 [3]’"
    },
    {
      "mod_line": [
        3,
        11,
        15
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "if ( ! n )",
        "else if ( n == 3 3 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a4 [3]’"
    },
    {
      "mod_line": [
        3,
        11,
        15,
        13
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "if ( ! n )",
        "else if ( n == 3 3 )",
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a4 [3]’"
    },
    {
      "mod_line": [
        3,
        11,
        13
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "if ( ! n )",
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a4 [3]’"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "else if ( n == 3 3 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a4 [3]’"
    },
    {
      "mod_line": [
        3,
        15,
        13
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "else if ( n == 3 3 )",
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a4 [3]’"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "int a1 [ 3 ] , a2 [ 3 ] , a3 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a4 [ 3 ] , a6 [ 3 ] ;",
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int a4 [3]’"
    },
    {
      "mod_line": [
        11,
        15
      ],
      "mod_code": [
        "if ( ! n )",
        "else if ( n == 3 3 )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before numeric constant"
    },
    {
      "mod_line": [
        11,
        15,
        13
      ],
      "mod_code": [
        "if ( ! n )",
        "else if ( n == 3 3 )",
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "if ( ! n )",
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘is’"
    },
    {
      "mod_line": [
        15,
        13
      ],
      "mod_code": [
        "else if ( n == 3 3 )",
        "else if ( n is 2 == 2 )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘)’ before ‘is’"
    }
  ]
}