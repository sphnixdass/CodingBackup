{
  "meta": {
    "index": 1073,
    "hitid": "3Z8UJEJOCZ7JORMOANGOM1M2RJ393U",
    "workerid": "A1APYLD4DUK33J",
    "probid": "151A",
    "subid": "42062984"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare n , k , l , c , d , p , nl , np as integers",
      "code": "int n , k , l , c , d , p , nl , np ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare integers drink , lime , salt , toast , quant",
      "code": "int drink , lime , salt , toast , quant ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n read k read l read c read d read p read nl read np",
      "code": "cin >> n >> k >> l >> c >> d >> p >> nl >> np ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let drink be k * l / nl",
      "code": "drink = k * l / nl ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let lime = c * d",
      "code": "lime = c * d ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "let salt be p / np",
      "code": "salt = p / np ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "let toast be minimum of ( minimum of ( drink and lime ) and salt )",
      "code": "toast = min ( min ( drink , lime ) , salt ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "let quant be toast / n",
      "code": "quant = toast / n ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print quant print newline",
      "code": "cout << quant << endl ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int drink = k * l / nl ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "toast = min ( min ( drink , lime ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "no matching function for call to ‘min(const int&)’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "toast = min ( min ( drink , lime ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "no matching function for call to ‘min(const int&)’"
    },
    {
      "mod_line": [
        3,
        7,
        4
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "toast = min ( min ( drink , lime ) ) ;",
        "int drink = k * l / nl ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        3,
        7,
        4,
        5
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "toast = min ( min ( drink , lime ) ) ;",
        "int drink = k * l / nl ;",
        "lime *= d ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        3,
        7,
        4,
        1
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "toast = min ( min ( drink , lime ) ) ;",
        "int drink = k * l / nl ;",
        "int n , k , l , c , d , p , p , np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        3,
        7,
        4,
        6
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "toast = min ( min ( drink , lime ) ) ;",
        "int drink = k * l / nl ;",
        "salt /= np ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        3,
        7,
        5
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "toast = min ( min ( drink , lime ) ) ;",
        "lime *= d ;"
      ],
      "err_line": 7,
      "err_msg": "no matching function for call to ‘min(const int&)’"
    },
    {
      "mod_line": [
        3,
        7,
        5,
        1
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "toast = min ( min ( drink , lime ) ) ;",
        "lime *= d ;",
        "int n , k , l , c , d , p , p , np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        3,
        7,
        5,
        6
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "toast = min ( min ( drink , lime ) ) ;",
        "lime *= d ;",
        "salt /= np ;"
      ],
      "err_line": 7,
      "err_msg": "no matching function for call to ‘min(const int&)’"
    },
    {
      "mod_line": [
        3,
        7,
        1
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "toast = min ( min ( drink , lime ) ) ;",
        "int n , k , l , c , d , p , p , np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        3,
        7,
        1,
        6
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "toast = min ( min ( drink , lime ) ) ;",
        "int n , k , l , c , d , p , p , np ;",
        "salt /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        3,
        7,
        6
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "toast = min ( min ( drink , lime ) ) ;",
        "salt /= np ;"
      ],
      "err_line": 7,
      "err_msg": "no matching function for call to ‘min(const int&)’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int drink = k * l / nl ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        3,
        4,
        5
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int drink = k * l / nl ;",
        "lime *= d ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        1
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int drink = k * l / nl ;",
        "lime *= d ;",
        "int n , k , l , c , d , p , p , np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        6
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int drink = k * l / nl ;",
        "lime *= d ;",
        "salt /= np ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        3,
        4,
        1
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int drink = k * l / nl ;",
        "int n , k , l , c , d , p , p , np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        3,
        4,
        1,
        6
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int drink = k * l / nl ;",
        "int n , k , l , c , d , p , p , np ;",
        "salt /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        3,
        4,
        6
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int drink = k * l / nl ;",
        "salt /= np ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        3,
        5,
        1
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "lime *= d ;",
        "int n , k , l , c , d , p , p , np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        3,
        5,
        1,
        6
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "lime *= d ;",
        "int n , k , l , c , d , p , p , np ;",
        "salt /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int n , k , l , c , d , p , p , np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        3,
        1,
        6
      ],
      "mod_code": [
        "cin >> n >> k >> l >> c >> d >> p >> p >> np ;",
        "int n , k , l , c , d , p , p , np ;",
        "salt /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "toast = min ( min ( drink , lime ) ) ;",
        "int drink = k * l / nl ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        7,
        4,
        5
      ],
      "mod_code": [
        "toast = min ( min ( drink , lime ) ) ;",
        "int drink = k * l / nl ;",
        "lime *= d ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        7,
        4,
        5,
        1
      ],
      "mod_code": [
        "toast = min ( min ( drink , lime ) ) ;",
        "int drink = k * l / nl ;",
        "lime *= d ;",
        "int n , k , l , c , d , p , p , np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        7,
        4,
        5,
        6
      ],
      "mod_code": [
        "toast = min ( min ( drink , lime ) ) ;",
        "int drink = k * l / nl ;",
        "lime *= d ;",
        "salt /= np ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        7,
        4,
        1
      ],
      "mod_code": [
        "toast = min ( min ( drink , lime ) ) ;",
        "int drink = k * l / nl ;",
        "int n , k , l , c , d , p , p , np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        7,
        4,
        1,
        6
      ],
      "mod_code": [
        "toast = min ( min ( drink , lime ) ) ;",
        "int drink = k * l / nl ;",
        "int n , k , l , c , d , p , p , np ;",
        "salt /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        7,
        4,
        6
      ],
      "mod_code": [
        "toast = min ( min ( drink , lime ) ) ;",
        "int drink = k * l / nl ;",
        "salt /= np ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "toast = min ( min ( drink , lime ) ) ;",
        "lime *= d ;"
      ],
      "err_line": 7,
      "err_msg": "no matching function for call to ‘min(const int&)’"
    },
    {
      "mod_line": [
        7,
        5,
        1
      ],
      "mod_code": [
        "toast = min ( min ( drink , lime ) ) ;",
        "lime *= d ;",
        "int n , k , l , c , d , p , p , np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        7,
        5,
        1,
        6
      ],
      "mod_code": [
        "toast = min ( min ( drink , lime ) ) ;",
        "lime *= d ;",
        "int n , k , l , c , d , p , p , np ;",
        "salt /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        7,
        5,
        6
      ],
      "mod_code": [
        "toast = min ( min ( drink , lime ) ) ;",
        "lime *= d ;",
        "salt /= np ;"
      ],
      "err_line": 7,
      "err_msg": "no matching function for call to ‘min(const int&)’"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "toast = min ( min ( drink , lime ) ) ;",
        "int n , k , l , c , d , p , p , np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        7,
        1,
        6
      ],
      "mod_code": [
        "toast = min ( min ( drink , lime ) ) ;",
        "int n , k , l , c , d , p , p , np ;",
        "salt /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "toast = min ( min ( drink , lime ) ) ;",
        "salt /= np ;"
      ],
      "err_line": 7,
      "err_msg": "no matching function for call to ‘min(const int&)’"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "int drink = k * l / nl ;",
        "lime *= d ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        4,
        5,
        1
      ],
      "mod_code": [
        "int drink = k * l / nl ;",
        "lime *= d ;",
        "int n , k , l , c , d , p , p , np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        4,
        5,
        1,
        6
      ],
      "mod_code": [
        "int drink = k * l / nl ;",
        "lime *= d ;",
        "int n , k , l , c , d , p , p , np ;",
        "salt /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        4,
        5,
        6
      ],
      "mod_code": [
        "int drink = k * l / nl ;",
        "lime *= d ;",
        "salt /= np ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "int drink = k * l / nl ;",
        "int n , k , l , c , d , p , p , np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        4,
        1,
        6
      ],
      "mod_code": [
        "int drink = k * l / nl ;",
        "int n , k , l , c , d , p , p , np ;",
        "salt /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "int drink = k * l / nl ;",
        "salt /= np ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int drink’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "lime *= d ;",
        "int n , k , l , c , d , p , p , np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        5,
        1,
        6
      ],
      "mod_code": [
        "lime *= d ;",
        "int n , k , l , c , d , p , p , np ;",
        "salt /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int n , k , l , c , d , p , p , np ;",
        "salt /= np ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    }
  ]
}