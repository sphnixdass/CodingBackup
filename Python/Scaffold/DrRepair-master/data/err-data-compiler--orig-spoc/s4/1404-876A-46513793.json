{
  "meta": {
    "index": 1404,
    "hitid": "3M7OI89LVYIKJ8G959ODVUZU7VDC6P",
    "workerid": "A1MJVTR0PCKBWW",
    "probid": "876A",
    "subid": "46513793"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "integer as a , b , c , d , e = 1 , f = 1 , l = 0",
      "code": "int a , b , c , d , e = 1 , f = 1 , l = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a , b , c , d",
      "code": "cin >> a >> b >> c >> d ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if e is not equal to a then do the following",
      "code": "while ( e != a )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if f is 1 then do the following",
      "code": "if ( f == 1 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if min is b then do the following",
      "code": "if ( min ( b , c ) == b )",
      "indent": 3
    },
    {
      "line": 6,
      "text": "set f to 2",
      "code": "f = 2 ;",
      "indent": 4
    },
    {
      "line": 7,
      "text": "l equals l plus b",
      "code": "l += b ;",
      "indent": 4
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 9,
      "text": "set f to 3",
      "code": "f = 3 ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "l equals l plus c",
      "code": "l += c ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if f is 2 then do the following",
      "code": "if ( f == 2 )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "if min is d then do the following",
      "code": "if ( min ( d , b ) == d )",
      "indent": 4
    },
    {
      "line": 15,
      "text": "set f to 3",
      "code": "f = 3 ;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "l equals l plus d",
      "code": "l += d ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 18,
      "text": "set f to 1",
      "code": "f = 1 ;",
      "indent": 5
    },
    {
      "line": 19,
      "text": "l equals l plus b",
      "code": "l += b ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 21,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 22,
      "text": "if f is 3 then do the following",
      "code": "if ( f == 3 )",
      "indent": 4
    },
    {
      "line": 23,
      "text": "if min is d then do the following",
      "code": "if ( min ( c , d ) == d )",
      "indent": 5
    },
    {
      "line": 24,
      "text": "set f to 2",
      "code": "f = 2 ;",
      "indent": 6
    },
    {
      "line": 25,
      "text": "l equals l plus d",
      "code": "l += d ;",
      "indent": 6
    },
    {
      "line": 26,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 27,
      "text": "set f to 1",
      "code": "f = 1 ;",
      "indent": 6
    },
    {
      "line": 28,
      "text": "l equals l plus c",
      "code": "l += c ;",
      "indent": 6
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 33,
      "text": "add one to e",
      "code": "e ++ ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 35,
      "text": "output l",
      "code": "cout << l << endl ;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( min == b )"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "if ( min == d )"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "if ( min == d )"
      ],
      "err_line": 23,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( f == 1 )"
      ],
      "err_line": 12,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "while ( min == b )"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "while ( f == 2 )"
      ],
      "err_line": 21,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "while ( min == d )"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "while ( min == d )"
      ],
      "err_line": 23,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( e != a )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        3,
        5
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( e != a )",
        "if ( min == b )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        14
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( e != a )",
        "if ( min == b )",
        "if ( min == d )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        23
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( e != a )",
        "if ( min == b )",
        "if ( min == d )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        17
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( e != a )",
        "if ( min == b )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        3,
        14
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( e != a )",
        "if ( min == d )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        3,
        14,
        23
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( e != a )",
        "if ( min == d )",
        "if ( min == d )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        3,
        14,
        17
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( e != a )",
        "if ( min == d )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        3,
        23
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( e != a )",
        "if ( min == d )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        3,
        23,
        17
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( e != a )",
        "if ( min == d )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        3,
        17
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( e != a )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( min == b )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        5,
        14
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( min == b )",
        "if ( min == d )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        5,
        14,
        23
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( min == b )",
        "if ( min == d )",
        "if ( min == d )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        5,
        14,
        17
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( min == b )",
        "if ( min == d )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        5,
        23
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( min == b )",
        "if ( min == d )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        5,
        23,
        17
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( min == b )",
        "if ( min == d )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        5,
        17
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( min == b )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( min == d )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        14,
        23
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( min == d )",
        "if ( min == d )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        14,
        23,
        17
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( min == d )",
        "if ( min == d )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        14,
        17
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( min == d )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        23
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( min == d )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        23,
        17
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "if ( min == d )",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        1,
        17
      ],
      "mod_code": [
        "int a , b , c , d , e = 1 , f = 1 , f = 0 ;",
        "else else"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "if ( e != a )",
        "if ( min == b )"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        3,
        5,
        14
      ],
      "mod_code": [
        "if ( e != a )",
        "if ( min == b )",
        "if ( min == d )"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        3,
        5,
        14,
        23
      ],
      "mod_code": [
        "if ( e != a )",
        "if ( min == b )",
        "if ( min == d )",
        "if ( min == d )"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        3,
        5,
        14,
        17
      ],
      "mod_code": [
        "if ( e != a )",
        "if ( min == b )",
        "if ( min == d )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        3,
        5,
        23
      ],
      "mod_code": [
        "if ( e != a )",
        "if ( min == b )",
        "if ( min == d )"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        3,
        5,
        23,
        17
      ],
      "mod_code": [
        "if ( e != a )",
        "if ( min == b )",
        "if ( min == d )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        3,
        5,
        17
      ],
      "mod_code": [
        "if ( e != a )",
        "if ( min == b )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "if ( e != a )",
        "if ( min == d )"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        3,
        14,
        23
      ],
      "mod_code": [
        "if ( e != a )",
        "if ( min == d )",
        "if ( min == d )"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        3,
        14,
        23,
        17
      ],
      "mod_code": [
        "if ( e != a )",
        "if ( min == d )",
        "if ( min == d )",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        3,
        14,
        17
      ],
      "mod_code": [
        "if ( e != a )",
        "if ( min == d )",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        3,
        23
      ],
      "mod_code": [
        "if ( e != a )",
        "if ( min == d )"
      ],
      "err_line": 23,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        3,
        23,
        17
      ],
      "mod_code": [
        "if ( e != a )",
        "if ( min == d )",
        "else else"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        17
      ],
      "mod_code": [
        "if ( e != a )",
        "else else"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        14
      ],
      "mod_code": [
        "if ( min == b )",
        "if ( min == d )"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        5,
        14,
        23
      ],
      "mod_code": [
        "if ( min == b )",
        "if ( min == d )",
        "if ( min == d )"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        5,
        14,
        23,
        17
      ],
      "mod_code": [
        "if ( min == b )",
        "if ( min == d )",
        "if ( min == d )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        5,
        14,
        17
      ],
      "mod_code": [
        "if ( min == b )",
        "if ( min == d )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        5,
        23
      ],
      "mod_code": [
        "if ( min == b )",
        "if ( min == d )"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        5,
        23,
        17
      ],
      "mod_code": [
        "if ( min == b )",
        "if ( min == d )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        5,
        17
      ],
      "mod_code": [
        "if ( min == b )",
        "else else"
      ],
      "err_line": 5,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        14,
        23
      ],
      "mod_code": [
        "if ( min == d )",
        "if ( min == d )"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        14,
        23,
        17
      ],
      "mod_code": [
        "if ( min == d )",
        "if ( min == d )",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        14,
        17
      ],
      "mod_code": [
        "if ( min == d )",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "invalid operands of types ‘<unresolved overloaded function type>’ and ‘int’ to binary ‘operator==’"
    },
    {
      "mod_line": [
        23,
        17
      ],
      "mod_code": [
        "if ( min == d )",
        "else else"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}