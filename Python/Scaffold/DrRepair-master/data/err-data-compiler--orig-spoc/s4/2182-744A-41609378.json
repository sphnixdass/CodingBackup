{
  "meta": {
    "index": 2182,
    "hitid": "3PIOQ99R7YGOCN31QHVURB7M9L5UNN",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "744A",
    "subid": "41609378"
  },
  "lines": [
    {
      "line": 0,
      "text": "f = array of 1005 int",
      "code": "int f [ 1005 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "g = array of 1005 int",
      "code": "int g [ 1005 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "function find ( get int x , return int )",
      "code": "int find ( int x )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "if f [ x ] is x return x else ( f [ x ] = find ( f [ x ] ) , return f [ x ] )",
      "code": "return f [ x ] == x ? x : f [ x ] = find ( f [ x ] ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "function clear ( no args , no return value )",
      "code": "void clear ( )",
      "indent": 0
    },
    {
      "line": 6,
      "text": "for i = 0 to 1005 exclusive f [ i ] = i",
      "code": "for ( int i = 0 ; i < 1005 ; i ++ ) f [ i ] = i ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 9,
      "text": "fill g with 0",
      "code": "memset ( g , 0 , sizeof ( g ) ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "clear ( )",
      "code": "clear ( ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "n , m , k = int",
      "code": "int n , m , k ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read n , m , k",
      "code": "cin >> n >> m >> k ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "i , j = int",
      "code": "int i , j ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 0 to k exclusive",
      "code": "for ( i = 0 ; i < k ; i ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "gov = int",
      "code": "int gov ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "read gov",
      "code": "cin >> gov ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "g [ gov ] = 1",
      "code": "g [ gov ] = 1 ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i = 0 to m exclusive",
      "code": "for ( i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "x , y = int",
      "code": "int x , y ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "read x , y",
      "code": "cin >> x >> y ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if g [ x ] is 1",
      "code": "if ( g [ x ] == 1 )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "f [ find ( y ) ] = x",
      "code": "f [ find ( y ) ] = x ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "else if g [ y ] is 1",
      "code": "else if ( g [ y ] == 1 )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "f [ find ( x ) ] = y",
      "code": "f [ find ( x ) ] = y ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 27,
      "text": "if g [ find ( x ) ] is 1",
      "code": "if ( g [ find ( x ) ] == 1 )",
      "indent": 3
    },
    {
      "line": 28,
      "text": "f [ find ( y ) ] = f [ find ( x ) ]",
      "code": "f [ find ( y ) ] = f [ find ( x ) ] ;",
      "indent": 4
    },
    {
      "line": 29,
      "text": "else if g [ find ( y ) ] is 1",
      "code": "else if ( g [ find ( y ) ] == 1 )",
      "indent": 3
    },
    {
      "line": 30,
      "text": "f [ find ( x ) ] = f [ find ( y ) ]",
      "code": "f [ find ( x ) ] = f [ find ( y ) ] ;",
      "indent": 4
    },
    {
      "line": 31,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 32,
      "text": "f [ find ( y ) ] = f [ find ( x ) ]",
      "code": "f [ find ( y ) ] = f [ find ( x ) ] ;",
      "indent": 4
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 35,
      "text": "ans = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "maxx = 0",
      "code": "int maxx = 0 ;",
      "indent": 1
    },
    {
      "line": 37,
      "text": "temp = int",
      "code": "int temp ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "for i = 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 39,
      "text": "temp = 1",
      "code": "temp = 1 ;",
      "indent": 2
    },
    {
      "line": 40,
      "text": "if g [ i ]",
      "code": "if ( g [ i ] )",
      "indent": 2
    },
    {
      "line": 41,
      "text": "for j = 1 to n inclusive",
      "code": "for ( j = 1 ; j <= n ; j ++ )",
      "indent": 3
    },
    {
      "line": 42,
      "text": "if i is not j and not g [ j ] and f [ find ( j ) ] is i increment temp",
      "code": "if ( i != j && ! g [ j ] && f [ find ( j ) ] == i ) { temp ++ ; }",
      "indent": 4
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 44,
      "text": "add temp * ( temp - 1 ) / 2 to ans",
      "code": "ans += temp * ( temp - 1 ) / 2 ;",
      "indent": 3
    },
    {
      "line": 45,
      "text": "maxx = max ( maxx , temp )",
      "code": "maxx = max ( maxx , temp ) ;",
      "indent": 3
    },
    {
      "line": 46,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 47,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 48,
      "text": "cnt = 0",
      "code": "int cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 49,
      "text": "for i = 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 50,
      "text": "if not g [ i ] and not g [ f [ find ( i ) ] ] increment cnt",
      "code": "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ] ) { cnt ++ ; }",
      "indent": 2
    },
    {
      "line": 51,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 52,
      "text": "add maxx * cnt to ans",
      "code": "ans += maxx * cnt ;",
      "indent": 1
    },
    {
      "line": 53,
      "text": "add cnt * ( cnt - 1 ) / 2 to ans",
      "code": "ans += cnt * ( cnt - 1 ) / 2 ;",
      "indent": 1
    },
    {
      "line": 54,
      "text": "subtract m from ans",
      "code": "ans -= m ;",
      "indent": 1
    },
    {
      "line": 55,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 57,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int find ( int x ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "bool clear ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "maxx = 0 ;"
      ],
      "err_line": 36,
      "err_msg": "‘maxx’ was not declared in this scope"
    },
    {
      "mod_line": [
        50
      ],
      "mod_code": [
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 50,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "clear ( ) ; )"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int n , m , k , k ;"
      ],
      "err_line": 11,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "int i , j , j ;"
      ],
      "err_line": 13,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "gets ( gov ) ;"
      ],
      "err_line": 16,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "int x , y , y ;"
      ],
      "err_line": 20,
      "err_msg": "redeclaration of ‘int y’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "f [ find ( y ) ] = x ) ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "f [ find ( x ) ] = y ) ;"
      ],
      "err_line": 25,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 31,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "ans = 0 ;"
      ],
      "err_line": 35,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "char temp ;"
      ],
      "err_line": 45,
      "err_msg": "no matching function for call to ‘max(int&, char&)’"
    },
    {
      "mod_line": [
        42
      ],
      "mod_code": [
        "if ( i != j && f != g [ j ] && f [ find ( j ) ] != i ) temp ++ ;"
      ],
      "err_line": 42,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        48
      ],
      "mod_code": [
        "cnt = 0 ;"
      ],
      "err_line": 48,
      "err_msg": "‘cnt’ was not declared in this scope"
    },
    {
      "mod_line": [
        50
      ],
      "mod_code": [
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ] ) cnt ++ ;"
      ],
      "err_line": 50,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        5
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "bool clear ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        36
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "bool clear ( ) ;",
        "maxx = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        42
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "bool clear ( ) ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        50
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "bool clear ( ) ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        36
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "maxx = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        36,
        42
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "maxx = 0 ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        36,
        50
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "maxx = 0 ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        42
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        42,
        50
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        3,
        50
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "bool clear ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        5,
        36
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "bool clear ( ) ;",
        "maxx = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        5,
        36,
        42
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "bool clear ( ) ;",
        "maxx = 0 ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        5,
        36,
        50
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "bool clear ( ) ;",
        "maxx = 0 ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        5,
        42
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "bool clear ( ) ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        5,
        42,
        50
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "bool clear ( ) ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        5,
        50
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "bool clear ( ) ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        36
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "maxx = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        36,
        42
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "maxx = 0 ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        36,
        42,
        50
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "maxx = 0 ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        36,
        50
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "maxx = 0 ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        42
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        42,
        50
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        50
      ],
      "mod_code": [
        "int find ( int x ) ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "bool clear ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        5,
        36
      ],
      "mod_code": [
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "bool clear ( ) ;",
        "maxx = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        5,
        36,
        42
      ],
      "mod_code": [
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "bool clear ( ) ;",
        "maxx = 0 ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        5,
        36,
        50
      ],
      "mod_code": [
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "bool clear ( ) ;",
        "maxx = 0 ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        5,
        42
      ],
      "mod_code": [
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "bool clear ( ) ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        5,
        42,
        50
      ],
      "mod_code": [
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "bool clear ( ) ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        5,
        50
      ],
      "mod_code": [
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "bool clear ( ) ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        36
      ],
      "mod_code": [
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "maxx = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        36,
        42
      ],
      "mod_code": [
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "maxx = 0 ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        36,
        42,
        50
      ],
      "mod_code": [
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "maxx = 0 ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        36,
        50
      ],
      "mod_code": [
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "maxx = 0 ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        42
      ],
      "mod_code": [
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        42,
        50
      ],
      "mod_code": [
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        50
      ],
      "mod_code": [
        "if ( f [ x ] == x && f [ x ] == x ) return x [ x ] == find ( f [ x ] ) ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        36
      ],
      "mod_code": [
        "bool clear ( ) ;",
        "maxx = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        36,
        42
      ],
      "mod_code": [
        "bool clear ( ) ;",
        "maxx = 0 ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        36,
        42,
        50
      ],
      "mod_code": [
        "bool clear ( ) ;",
        "maxx = 0 ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        36,
        50
      ],
      "mod_code": [
        "bool clear ( ) ;",
        "maxx = 0 ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        42
      ],
      "mod_code": [
        "bool clear ( ) ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        42,
        50
      ],
      "mod_code": [
        "bool clear ( ) ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        50
      ],
      "mod_code": [
        "bool clear ( ) ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 6,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        36,
        42
      ],
      "mod_code": [
        "maxx = 0 ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;"
      ],
      "err_line": 36,
      "err_msg": "‘maxx’ was not declared in this scope"
    },
    {
      "mod_line": [
        36,
        42,
        50
      ],
      "mod_code": [
        "maxx = 0 ;",
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 36,
      "err_msg": "‘maxx’ was not declared in this scope"
    },
    {
      "mod_line": [
        36,
        50
      ],
      "mod_code": [
        "maxx = 0 ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 36,
      "err_msg": "‘maxx’ was not declared in this scope"
    },
    {
      "mod_line": [
        42,
        50
      ],
      "mod_code": [
        "if ( i != j && ! g [ j ] && f [ find ( j ) ] != i ) temp ++ ;",
        "if ( ! g [ i ] && ! g [ f [ find ( i ) ] ) ) cnt ++ ;"
      ],
      "err_line": 50,
      "err_msg": "expected ‘]’ before ‘)’ token"
    }
  ]
}