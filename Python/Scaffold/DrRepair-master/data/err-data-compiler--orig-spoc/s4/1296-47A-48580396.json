{
  "meta": {
    "index": 1296,
    "hitid": "3NC6WP7WJHERRL1KDI1I5I5AMB7WWX",
    "workerid": "AIWEXPJAU66D9",
    "probid": "47A",
    "subid": "48580396"
  },
  "lines": [
    {
      "line": 0,
      "text": "let n be long long",
      "code": "long long n ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "flag is integer = 0",
      "code": "int flag = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "loop through double i from 0",
      "code": "for ( double i = 0 ; ; ++ i )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if i * ( i + 1 ) / 2 = n",
      "code": "if ( i * ( i + 1 ) / 2 == n )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if i * ( i + 1 ) / 2 is greater than n",
      "code": "else if ( i * ( i + 1 ) / 2 > n )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "break the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if flag = 1",
      "code": "if ( flag == 1 )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print \" YES \" and a new line",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" NO \" and a new line",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "if ( i * ( i + 1 ) / 2 )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        7
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "if ( i * ( i + 1 ) / 2 )",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        9
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "if ( i * ( i + 1 ) / 2 )",
        "break break ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        14
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "if ( i * ( i + 1 ) / 2 )",
        "break break ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        6
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "if ( i * ( i + 1 ) / 2 )",
        "break break ;",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        9
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "if ( i * ( i + 1 ) / 2 )",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        9,
        14
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "if ( i * ( i + 1 ) / 2 )",
        "break break ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        9,
        6
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "if ( i * ( i + 1 ) / 2 )",
        "break break ;",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        14
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "if ( i * ( i + 1 ) / 2 )",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        14,
        6
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "if ( i * ( i + 1 ) / 2 )",
        "else else",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        6
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "if ( i * ( i + 1 ) / 2 )",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        9
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "break break ;",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        9,
        14
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "break break ;",
        "break break ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        9,
        6
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "break break ;",
        "break break ;",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        14
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "break break ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        14,
        6
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "break break ;",
        "else else",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        6
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "break break ;",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "break break ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        14
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "break break ;",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        14,
        6
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "break break ;",
        "else else",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        6
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "break break ;",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "else else"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        14,
        6
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "else else",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "for ( double j = 0 ; ; i ++ )",
        "int flag = 1 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "if ( i * ( i + 1 ) / 2 )",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        7,
        9
      ],
      "mod_code": [
        "if ( i * ( i + 1 ) / 2 )",
        "break break ;",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        14
      ],
      "mod_code": [
        "if ( i * ( i + 1 ) / 2 )",
        "break break ;",
        "break break ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        7,
        9,
        6
      ],
      "mod_code": [
        "if ( i * ( i + 1 ) / 2 )",
        "break break ;",
        "break break ;",
        "int flag = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        7,
        14
      ],
      "mod_code": [
        "if ( i * ( i + 1 ) / 2 )",
        "break break ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        7,
        14,
        6
      ],
      "mod_code": [
        "if ( i * ( i + 1 ) / 2 )",
        "break break ;",
        "else else",
        "int flag = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        7,
        6
      ],
      "mod_code": [
        "if ( i * ( i + 1 ) / 2 )",
        "break break ;",
        "int flag = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "if ( i * ( i + 1 ) / 2 )",
        "break break ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        9,
        14
      ],
      "mod_code": [
        "if ( i * ( i + 1 ) / 2 )",
        "break break ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        9,
        14,
        6
      ],
      "mod_code": [
        "if ( i * ( i + 1 ) / 2 )",
        "break break ;",
        "else else",
        "int flag = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        9,
        6
      ],
      "mod_code": [
        "if ( i * ( i + 1 ) / 2 )",
        "break break ;",
        "int flag = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        5,
        14
      ],
      "mod_code": [
        "if ( i * ( i + 1 ) / 2 )",
        "else else"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        14,
        6
      ],
      "mod_code": [
        "if ( i * ( i + 1 ) / 2 )",
        "else else",
        "int flag = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "break break ;",
        "break break ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        9,
        14
      ],
      "mod_code": [
        "break break ;",
        "break break ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        9,
        14,
        6
      ],
      "mod_code": [
        "break break ;",
        "break break ;",
        "else else",
        "int flag = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        9,
        6
      ],
      "mod_code": [
        "break break ;",
        "break break ;",
        "int flag = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        14
      ],
      "mod_code": [
        "break break ;",
        "else else"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        14,
        6
      ],
      "mod_code": [
        "break break ;",
        "else else",
        "int flag = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "break break ;",
        "int flag = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "break break ;",
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        14,
        6
      ],
      "mod_code": [
        "break break ;",
        "else else",
        "int flag = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        9,
        6
      ],
      "mod_code": [
        "break break ;",
        "int flag = 1 ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘break’"
    },
    {
      "mod_line": [
        14,
        6
      ],
      "mod_code": [
        "else else",
        "int flag = 1 ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    }
  ]
}