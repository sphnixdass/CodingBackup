{
  "meta": {
    "index": 191,
    "hitid": "3U18MJKL1UGSQTM14QAUX5LG2LXNC5",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "3A",
    "subid": "48319090"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "sx , dx = int",
      "code": "int sx , dx ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "c , d = char",
      "code": "char c , d ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read c then sx then d then dx",
      "code": "cin >> c >> sx >> d >> dx ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "sy = int with sy = c - ' a ' + 1",
      "code": "int sy = c - ' a ' + 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "dy = int with dy = d - ' a ' + 1",
      "code": "int dy = d - ' a ' + 1 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "v = string vector",
      "code": "vector < string > v ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "cnt = int with cnt = 0",
      "code": "int cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "loop while sx is not dx or sy is not dy",
      "code": "while ( sx != dx || sy != dy )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "increment cnt",
      "code": "++ cnt ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if sx is greater than dx and sy is less than dy",
      "code": "if ( sx > dx && sy < dy )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "append \" RD \" to v",
      "code": "v . push_back ( \" RD \" ) ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "decrement sx",
      "code": "sx -- ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "increment sy",
      "code": "sy ++ ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else if sx is less than dx and sy is greater than dy",
      "code": "else if ( sx < dx && sy > dy )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "append \" LU \" to v",
      "code": "v . push_back ( \" LU \" ) ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "increment sx",
      "code": "sx ++ ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "decrement sy",
      "code": "sy -- ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else if sx is less than dx and sy is less than dy",
      "code": "else if ( sx < dx && sy < dy )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "append \" RU \" to v",
      "code": "v . push_back ( \" RU \" ) ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "increment sx",
      "code": "sx ++ ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "increment sy",
      "code": "sy ++ ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "else if sx is greater than dx and sy is greater than dy",
      "code": "else if ( sx > dx && sy > dy )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "append \" LD \" to v",
      "code": "v . push_back ( \" LD \" ) ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "decrement sx",
      "code": "sx -- ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "decrement sy",
      "code": "sy -- ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "else if sx is dx and sy is greater than dy",
      "code": "else if ( sx == dx && sy > dy )",
      "indent": 2
    },
    {
      "line": 27,
      "text": "append \" L \" to v",
      "code": "v . push_back ( \" L \" ) ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "decrement sy",
      "code": "sy -- ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "else if sx is dx and sy is less than dy",
      "code": "else if ( sx == dx && sy < dy )",
      "indent": 2
    },
    {
      "line": 30,
      "text": "append \" R \" to v",
      "code": "v . push_back ( \" R \" ) ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "increment sy",
      "code": "sy ++ ;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "else if sx is less than dx and sy is dy",
      "code": "else if ( sx < dx && sy == dy )",
      "indent": 2
    },
    {
      "line": 33,
      "text": "append \" U \" to v",
      "code": "v . push_back ( \" U \" ) ;",
      "indent": 3
    },
    {
      "line": 34,
      "text": "increment sx",
      "code": "sx ++ ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "else if sx is greater than dx and sy is dy",
      "code": "else if ( sx > dx && sy == dy )",
      "indent": 2
    },
    {
      "line": 36,
      "text": "append \" D \" to v",
      "code": "v . push_back ( \" D \" ) ;",
      "indent": 3
    },
    {
      "line": 37,
      "text": "decrement sx",
      "code": "sx -- ;",
      "indent": 3
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 40,
      "text": "print cnt",
      "code": "cout << cnt << endl ;",
      "indent": 1
    },
    {
      "line": 41,
      "text": "print all values of v",
      "code": "for ( int i = 0 ; i < v . size ( ) ; ++ i ) cout << v [ i ] << endl ;",
      "indent": 1
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "v += \" RU \" ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "v += \" L \" ;"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "v += \" R \" ;"
      ],
      "err_line": 30,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "v += \" U \" ;"
      ],
      "err_line": 33,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "v += \" D \" ;"
      ],
      "err_line": 36,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 41,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char c [ d ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘d’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "vector < char > v ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::vector<char>::value_type {aka char}’ [-fpermissive]"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "v += \" RD \" ;"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "v += \" LU \" ;"
      ],
      "err_line": 15,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "v = \" RU \" ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "v += \" LD \" ;"
      ],
      "err_line": 23,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "v = \" L \" ;"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "v += \" ;"
      ],
      "err_line": 30,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "v = \" U \" ;"
      ],
      "err_line": 33,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "v = \" D \" ;"
      ],
      "err_line": 36,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        19,
        27
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" L \" ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        27,
        30
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" L \" ;",
        "v += \" R \" ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        27,
        30,
        33
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" L \" ;",
        "v += \" R \" ;",
        "v += \" U \" ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        27,
        30,
        36
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" L \" ;",
        "v += \" R \" ;",
        "v += \" D \" ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        27,
        30,
        41
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" L \" ;",
        "v += \" R \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        27,
        33
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" L \" ;",
        "v += \" U \" ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        27,
        33,
        36
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" L \" ;",
        "v += \" U \" ;",
        "v += \" D \" ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        27,
        33,
        41
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" L \" ;",
        "v += \" U \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        27,
        36
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" L \" ;",
        "v += \" D \" ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        27,
        36,
        41
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" L \" ;",
        "v += \" D \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        27,
        41
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" L \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        30
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" R \" ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        30,
        33
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" R \" ;",
        "v += \" U \" ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        30,
        33,
        36
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" R \" ;",
        "v += \" U \" ;",
        "v += \" D \" ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        30,
        33,
        41
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" R \" ;",
        "v += \" U \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        30,
        36
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" R \" ;",
        "v += \" D \" ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        30,
        36,
        41
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" R \" ;",
        "v += \" D \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        30,
        41
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" R \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        33
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" U \" ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        33,
        36
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" U \" ;",
        "v += \" D \" ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        33,
        36,
        41
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" U \" ;",
        "v += \" D \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        33,
        41
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" U \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        36
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" D \" ;"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        36,
        41
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "v += \" D \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        19,
        41
      ],
      "mod_code": [
        "v += \" RU \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 19,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [3]’)"
    },
    {
      "mod_line": [
        27,
        30
      ],
      "mod_code": [
        "v += \" L \" ;",
        "v += \" R \" ;"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        27,
        30,
        33
      ],
      "mod_code": [
        "v += \" L \" ;",
        "v += \" R \" ;",
        "v += \" U \" ;"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        27,
        30,
        33,
        36
      ],
      "mod_code": [
        "v += \" L \" ;",
        "v += \" R \" ;",
        "v += \" U \" ;",
        "v += \" D \" ;"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        27,
        30,
        33,
        41
      ],
      "mod_code": [
        "v += \" L \" ;",
        "v += \" R \" ;",
        "v += \" U \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        27,
        30,
        36
      ],
      "mod_code": [
        "v += \" L \" ;",
        "v += \" R \" ;",
        "v += \" D \" ;"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        27,
        30,
        36,
        41
      ],
      "mod_code": [
        "v += \" L \" ;",
        "v += \" R \" ;",
        "v += \" D \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        27,
        30,
        41
      ],
      "mod_code": [
        "v += \" L \" ;",
        "v += \" R \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        27,
        33
      ],
      "mod_code": [
        "v += \" L \" ;",
        "v += \" U \" ;"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        27,
        33,
        36
      ],
      "mod_code": [
        "v += \" L \" ;",
        "v += \" U \" ;",
        "v += \" D \" ;"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        27,
        33,
        36,
        41
      ],
      "mod_code": [
        "v += \" L \" ;",
        "v += \" U \" ;",
        "v += \" D \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        27,
        33,
        41
      ],
      "mod_code": [
        "v += \" L \" ;",
        "v += \" U \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        27,
        36
      ],
      "mod_code": [
        "v += \" L \" ;",
        "v += \" D \" ;"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        27,
        36,
        41
      ],
      "mod_code": [
        "v += \" L \" ;",
        "v += \" D \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        27,
        41
      ],
      "mod_code": [
        "v += \" L \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 27,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        30,
        33
      ],
      "mod_code": [
        "v += \" R \" ;",
        "v += \" U \" ;"
      ],
      "err_line": 30,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        30,
        33,
        36
      ],
      "mod_code": [
        "v += \" R \" ;",
        "v += \" U \" ;",
        "v += \" D \" ;"
      ],
      "err_line": 30,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        30,
        33,
        36,
        41
      ],
      "mod_code": [
        "v += \" R \" ;",
        "v += \" U \" ;",
        "v += \" D \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 30,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        30,
        33,
        41
      ],
      "mod_code": [
        "v += \" R \" ;",
        "v += \" U \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 30,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        30,
        36
      ],
      "mod_code": [
        "v += \" R \" ;",
        "v += \" D \" ;"
      ],
      "err_line": 30,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        30,
        36,
        41
      ],
      "mod_code": [
        "v += \" R \" ;",
        "v += \" D \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 30,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        30,
        41
      ],
      "mod_code": [
        "v += \" R \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 30,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        33,
        36
      ],
      "mod_code": [
        "v += \" U \" ;",
        "v += \" D \" ;"
      ],
      "err_line": 33,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        33,
        36,
        41
      ],
      "mod_code": [
        "v += \" U \" ;",
        "v += \" D \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 33,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        33,
        41
      ],
      "mod_code": [
        "v += \" U \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 33,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    },
    {
      "mod_line": [
        36,
        41
      ],
      "mod_code": [
        "v += \" D \" ;",
        "for ( int i = 0 ; i < n ; i ++ ) { cout << v [ i ] << endl ; }"
      ],
      "err_line": 36,
      "err_msg": "no match for ‘operator+=’ (operand types are ‘std::vector<std::__cxx11::basic_string<char> >’ and ‘const char [2]’)"
    }
  ]
}