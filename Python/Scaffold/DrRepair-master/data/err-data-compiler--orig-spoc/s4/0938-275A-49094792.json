{
  "meta": {
    "index": 938,
    "hitid": "385MDVINFC95L11L6JI3GSB2LHAJW6",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "275A",
    "subid": "49094792"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare isvalid taking in ints r and c and returning bool",
      "code": "bool isvalid ( int r , int c )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return ( ( r > = 0 & & r < 3 ) & & ( c > = 0 & & c < 3 ) )",
      "code": "return ( ( r >= 0 && r < 3 ) && ( c >= 0 && c < 3 ) ) ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "let ints i , j , and k",
      "code": "int i , j , k ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create int array a of size 3 containing array of size 3",
      "code": "int a [ 3 ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for j = 0 to 3 exclusive , read a [ i ] [ j ]",
      "code": "for ( j = 0 ; j < 3 ; j ++ ) cin >> a [ i ] [ j ] ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "let char array s of size 3 with array of size 3",
      "code": "char s [ 3 ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for j = 0 to 3 exclusive , set s [ i ] [ j ] to ' 1 '",
      "code": "for ( j = 0 ; j < 3 ; j ++ ) s [ i ] [ j ] = ' 1 ' ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if s [ i ] [ j ] is equal to ' 1 '",
      "code": "if ( s [ i ] [ j ] == ' 1 ' )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "if a [ i ] [ j ] modulo 2 is truthy",
      "code": "if ( a [ i ] [ j ] % 2 )",
      "indent": 4
    },
    {
      "line": 17,
      "text": "set s [ i ] [ j ] to ' 0 '",
      "code": "s [ i ] [ j ] = ' 0 ' ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 19,
      "text": "set s [ i ] [ j ] to ' 1 '",
      "code": "s [ i ] [ j ] = ' 1 ' ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "otherwise do",
      "code": "else",
      "indent": 3
    },
    {
      "line": 21,
      "text": "if a [ i ] [ j ] modulo 2 is truthy",
      "code": "if ( a [ i ] [ j ] % 2 )",
      "indent": 4
    },
    {
      "line": 22,
      "text": "set s [ i ] [ j ] to ' 1 '",
      "code": "s [ i ] [ j ] = ' 1 ' ;",
      "indent": 5
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 24,
      "text": "set s [ i ] [ j ] to ' 0 '",
      "code": "s [ i ] [ j ] = ' 0 ' ;",
      "indent": 5
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 26,
      "text": "if isvalid ( i - 1 , j ) is true and a [ i ] [ j ] is not equal to 0",
      "code": "if ( isvalid ( i - 1 , j ) && a [ i ] [ j ] != 0 )",
      "indent": 3
    },
    {
      "line": 27,
      "text": "if s [ i - 1 ] [ j ] is equal to ' 1 '",
      "code": "if ( s [ i - 1 ] [ j ] == ' 1 ' )",
      "indent": 4
    },
    {
      "line": 28,
      "text": "if a [ i ] [ j ] modulo 2 is truthy",
      "code": "if ( a [ i ] [ j ] % 2 )",
      "indent": 5
    },
    {
      "line": 29,
      "text": "set s [ i - 1 ] [ j ] to ' 0 '",
      "code": "s [ i - 1 ] [ j ] = ' 0 ' ;",
      "indent": 6
    },
    {
      "line": 30,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 31,
      "text": "set s [ i - 1 ] [ j ] to ' 1 '",
      "code": "s [ i - 1 ] [ j ] = ' 1 ' ;",
      "indent": 6
    },
    {
      "line": 32,
      "text": "otherwise",
      "code": "else",
      "indent": 4
    },
    {
      "line": 33,
      "text": "if a [ i ] [ j ] is not even",
      "code": "if ( a [ i ] [ j ] % 2 )",
      "indent": 5
    },
    {
      "line": 34,
      "text": "set s [ i - 1 ] [ j ] to ' 1 '",
      "code": "s [ i - 1 ] [ j ] = ' 1 ' ;",
      "indent": 6
    },
    {
      "line": 35,
      "text": "else do",
      "code": "else",
      "indent": 5
    },
    {
      "line": 36,
      "text": "set s [ i - 1 ] [ j ] to ' 0 '",
      "code": "s [ i - 1 ] [ j ] = ' 0 ' ;",
      "indent": 6
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 39,
      "text": "if isvalid ( i + 1 , j ) is true and a [ i ] [ j ] is not equal to 0",
      "code": "if ( isvalid ( i + 1 , j ) && a [ i ] [ j ] != 0 )",
      "indent": 3
    },
    {
      "line": 40,
      "text": "if s [ i + 1 ] [ j ] is equal to ' 1 '",
      "code": "if ( s [ i + 1 ] [ j ] == ' 1 ' )",
      "indent": 4
    },
    {
      "line": 41,
      "text": "if a [ i ] [ j ] is not even",
      "code": "if ( a [ i ] [ j ] % 2 )",
      "indent": 5
    },
    {
      "line": 42,
      "text": "set s [ i + 1 ] [ j ] to ' 0 '",
      "code": "s [ i + 1 ] [ j ] = ' 0 ' ;",
      "indent": 6
    },
    {
      "line": 43,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 44,
      "text": "set s [ i + 1 ] [ j ] to ' 1 '",
      "code": "s [ i + 1 ] [ j ] = ' 1 ' ;",
      "indent": 6
    },
    {
      "line": 45,
      "text": "otherwise",
      "code": "else",
      "indent": 4
    },
    {
      "line": 46,
      "text": "if a [ i ] [ j ] is not even",
      "code": "if ( a [ i ] [ j ] % 2 )",
      "indent": 5
    },
    {
      "line": 47,
      "text": "set s [ i + 1 ] [ j ] to ' 1 '",
      "code": "s [ i + 1 ] [ j ] = ' 1 ' ;",
      "indent": 6
    },
    {
      "line": 48,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 49,
      "text": "set s [ i + 1 ] [ j ] to ' 0 '",
      "code": "s [ i + 1 ] [ j ] = ' 0 ' ;",
      "indent": 6
    },
    {
      "line": 50,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 51,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 52,
      "text": "if isvalid ( i , j - 1 ) is true and a [ i ] [ j ] is not equal to 0",
      "code": "if ( isvalid ( i , j - 1 ) && a [ i ] [ j ] != 0 )",
      "indent": 3
    },
    {
      "line": 53,
      "text": "if s [ i ] [ j - 1 ] is equal to ' 1 '",
      "code": "if ( s [ i ] [ j - 1 ] == ' 1 ' )",
      "indent": 4
    },
    {
      "line": 54,
      "text": "if a [ i ] [ j ] is not even",
      "code": "if ( a [ i ] [ j ] % 2 )",
      "indent": 5
    },
    {
      "line": 55,
      "text": "set s [ i ] [ j - 1 ] to ' 0 '",
      "code": "s [ i ] [ j - 1 ] = ' 0 ' ;",
      "indent": 6
    },
    {
      "line": 56,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 57,
      "text": "set s [ i ] [ j - 1 ] to ' 1 '",
      "code": "s [ i ] [ j - 1 ] = ' 1 ' ;",
      "indent": 6
    },
    {
      "line": 58,
      "text": "otherwise",
      "code": "else",
      "indent": 4
    },
    {
      "line": 59,
      "text": "if a [ i ] [ j ] is not even",
      "code": "if ( a [ i ] [ j ] % 2 )",
      "indent": 5
    },
    {
      "line": 60,
      "text": "set s [ i ] [ j - 1 ] to ' 1 '",
      "code": "s [ i ] [ j - 1 ] = ' 1 ' ;",
      "indent": 6
    },
    {
      "line": 61,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 62,
      "text": "set s [ i ] [ j - 1 ] to ' 0 '",
      "code": "s [ i ] [ j - 1 ] = ' 0 ' ;",
      "indent": 6
    },
    {
      "line": 63,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 64,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 65,
      "text": "if isvalid ( i , j + 1 ) is true and a [ i ] [ j ] is not equal to 0",
      "code": "if ( isvalid ( i , j + 1 ) && a [ i ] [ j ] != 0 )",
      "indent": 3
    },
    {
      "line": 66,
      "text": "if s [ i ] [ j + 1 ] is equal to ' 1 '",
      "code": "if ( s [ i ] [ j + 1 ] == ' 1 ' )",
      "indent": 4
    },
    {
      "line": 67,
      "text": "if a [ i ] [ j ] is not even",
      "code": "if ( a [ i ] [ j ] % 2 )",
      "indent": 5
    },
    {
      "line": 68,
      "text": "set s [ i ] [ j + 1 ] to ' 0 '",
      "code": "s [ i ] [ j + 1 ] = ' 0 ' ;",
      "indent": 6
    },
    {
      "line": 69,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 70,
      "text": "set s [ i ] [ j + 1 ] to ' 1 '",
      "code": "s [ i ] [ j + 1 ] = ' 1 ' ;",
      "indent": 6
    },
    {
      "line": 71,
      "text": "else do",
      "code": "else",
      "indent": 4
    },
    {
      "line": 72,
      "text": "if a [ i ] [ j ] is not even",
      "code": "if ( a [ i ] [ j ] % 2 )",
      "indent": 5
    },
    {
      "line": 73,
      "text": "set s [ i ] [ j + 1 ] to ' 1 '",
      "code": "s [ i ] [ j + 1 ] = ' 1 ' ;",
      "indent": 6
    },
    {
      "line": 74,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 75,
      "text": "set s [ i ] [ j + 1 ] to ' 0 '",
      "code": "s [ i ] [ j + 1 ] = ' 0 ' ;",
      "indent": 6
    },
    {
      "line": 76,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 77,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 78,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 79,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 80,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 81,
      "text": "for i = 0 to 3 exclusive , print s [ i ] [ j ]",
      "code": "for ( j = 0 ; j < 3 ; j ++ ) cout << s [ i ] [ j ] ;",
      "indent": 2
    },
    {
      "line": 82,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 83,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 84,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool isvalid ( int r , int c ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int i , j , k , k ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int a [ 3 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "char s [ 3 ] = { 0 } ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] % 2 == truthy )"
      ],
      "err_line": 16,
      "err_msg": "‘truthy’ was not declared in this scope"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] % 2 == truthy )"
      ],
      "err_line": 21,
      "err_msg": "‘truthy’ was not declared in this scope"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] % 2 == truthy )"
      ],
      "err_line": 28,
      "err_msg": "‘truthy’ was not declared in this scope"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 30,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 37,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        43
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 43,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        48
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 48,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        56
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 56,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        71
      ],
      "mod_code": [
        "else do"
      ],
      "err_line": 77,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}