{
  "meta": {
    "index": 953,
    "hitid": "3IKMEYR0LWPEK59WAKT8T0VQWZF2K6",
    "workerid": "A1APYLD4DUK33J",
    "probid": "275A",
    "subid": "40572738"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create 2d integer array arr with size 3 by 3",
      "code": "int arr [ 3 ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create 2d integer array arr1 with size 3 by 3",
      "code": "int arr1 [ 3 ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer p",
      "code": "int p ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 0 to 3 exclusive , read arr [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < 3 ; j ++ ) { cin >> arr [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set p to arr [ 0 ] [ 0 ] + arr [ 0 ] [ 1 ] + arr [ 1 ] [ 0 ]",
      "code": "p = arr [ 0 ] [ 0 ] + arr [ 0 ] [ 1 ] + arr [ 1 ] [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if p % 2 is not 0",
      "code": "if ( p % 2 != 0 )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set arr1 [ 0 ] [ 0 ] to 0",
      "code": "arr1 [ 0 ] [ 0 ] = 0 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 11,
      "text": "set arr1 [ 0 ] [ 0 ] to 1",
      "code": "arr1 [ 0 ] [ 0 ] = 1 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set p to arr [ 0 ] [ 1 ] + arr [ 0 ] [ 0 ] + arr [ 1 ] [ 1 ] + arr [ 0 ] [ 2 ]",
      "code": "p = arr [ 0 ] [ 1 ] + arr [ 0 ] [ 0 ] + arr [ 1 ] [ 1 ] + arr [ 0 ] [ 2 ] ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if p % 2 is not 0",
      "code": "if ( p % 2 != 0 )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "set arr1 [ 0 ] [ 1 ] to 0",
      "code": "arr1 [ 0 ] [ 1 ] = 0 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "set arr1 [ 0 ] [ 1 ] to 1",
      "code": "arr1 [ 0 ] [ 1 ] = 1 ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "set p to arr [ 0 ] [ 1 ] + arr [ 0 ] [ 2 ] + arr [ 1 ] [ 2 ]",
      "code": "p = arr [ 0 ] [ 1 ] + arr [ 0 ] [ 2 ] + arr [ 1 ] [ 2 ] ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if p % 2 is not 0",
      "code": "if ( p % 2 != 0 )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "set arr1 [ 0 ] [ 2 ] to 0",
      "code": "arr1 [ 0 ] [ 2 ] = 0 ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 21,
      "text": "set arr1 [ 0 ] [ 2 ] to 1",
      "code": "arr1 [ 0 ] [ 2 ] = 1 ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "set p to arr [ 1 ] [ 0 ] + arr [ 1 ] [ 1 ] + arr [ 2 ] [ 0 ] + arr [ 0 ] [ 0 ]",
      "code": "p = arr [ 1 ] [ 0 ] + arr [ 1 ] [ 1 ] + arr [ 2 ] [ 0 ] + arr [ 0 ] [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "if p % 2 is not 0",
      "code": "if ( p % 2 != 0 )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "set arr1 [ 1 ] [ 0 ] to 0",
      "code": "arr1 [ 1 ] [ 0 ] = 0 ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 26,
      "text": "set arr1 [ 1 ] [ 0 ] to 1",
      "code": "arr1 [ 1 ] [ 0 ] = 1 ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "set p to arr [ 1 ] [ 1 ] + arr [ 1 ] [ 0 ] + arr [ 1 ] [ 2 ] + arr [ 0 ] [ 1 ] + arr [ 2 ] [ 1 ]",
      "code": "p = arr [ 1 ] [ 1 ] + arr [ 1 ] [ 0 ] + arr [ 1 ] [ 2 ] + arr [ 0 ] [ 1 ] + arr [ 2 ] [ 1 ] ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "if p % 2 is not 0",
      "code": "if ( p % 2 != 0 )",
      "indent": 1
    },
    {
      "line": 29,
      "text": "set arr1 [ 1 ] [ 1 ] to 0",
      "code": "arr1 [ 1 ] [ 1 ] = 0 ;",
      "indent": 2
    },
    {
      "line": 30,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 31,
      "text": "set arr1 [ 1 ] [ 1 ] to 1",
      "code": "arr1 [ 1 ] [ 1 ] = 1 ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "set p to arr [ 1 ] [ 2 ] + arr [ 0 ] [ 2 ] + arr [ 2 ] [ 2 ] + arr [ 1 ] [ 1 ]",
      "code": "p = arr [ 1 ] [ 2 ] + arr [ 0 ] [ 2 ] + arr [ 2 ] [ 2 ] + arr [ 1 ] [ 1 ] ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "if p % 2 is not 0",
      "code": "if ( p % 2 != 0 )",
      "indent": 1
    },
    {
      "line": 34,
      "text": "set arr1 [ 1 ] [ 2 ] to 0",
      "code": "arr1 [ 1 ] [ 2 ] = 0 ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 36,
      "text": "set arr1 [ 1 ] [ 2 ] to 1",
      "code": "arr1 [ 1 ] [ 2 ] = 1 ;",
      "indent": 2
    },
    {
      "line": 37,
      "text": "set p to arr [ 2 ] [ 0 ] + arr [ 1 ] [ 0 ] + arr [ 2 ] [ 1 ]",
      "code": "p = arr [ 2 ] [ 0 ] + arr [ 1 ] [ 0 ] + arr [ 2 ] [ 1 ] ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "if p % 2 is not 0",
      "code": "if ( p % 2 != 0 )",
      "indent": 1
    },
    {
      "line": 39,
      "text": "set arr [ 2 ] [ 0 ] to 0",
      "code": "arr1 [ 2 ] [ 0 ] = 0 ;",
      "indent": 2
    },
    {
      "line": 40,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 41,
      "text": "set arr1 [ 2 ] [ 0 ] to 1",
      "code": "arr1 [ 2 ] [ 0 ] = 1 ;",
      "indent": 2
    },
    {
      "line": 42,
      "text": "set p to arr [ 2 ] [ 1 ] + arr [ 1 ] [ 1 ] + arr [ 2 ] [ 0 ] + arr [ 2 ] [ 2 ]",
      "code": "p = arr [ 2 ] [ 1 ] + arr [ 1 ] [ 1 ] + arr [ 2 ] [ 0 ] + arr [ 2 ] [ 2 ] ;",
      "indent": 1
    },
    {
      "line": 43,
      "text": "if p % 2 is not 0",
      "code": "if ( p % 2 != 0 )",
      "indent": 1
    },
    {
      "line": 44,
      "text": "set arr1 [ 2 ] [ 1 ] to 0",
      "code": "arr1 [ 2 ] [ 1 ] = 0 ;",
      "indent": 2
    },
    {
      "line": 45,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 46,
      "text": "set arr1 [ 2 ] [ 1 ] to 1",
      "code": "arr1 [ 2 ] [ 1 ] = 1 ;",
      "indent": 2
    },
    {
      "line": 47,
      "text": "set p to arr [ 2 ] [ 2 ] + arr [ 2 ] [ 1 ] + arr [ 1 ] [ 2 ]",
      "code": "p = arr [ 2 ] [ 2 ] + arr [ 2 ] [ 1 ] + arr [ 1 ] [ 2 ] ;",
      "indent": 1
    },
    {
      "line": 48,
      "text": "if p % 2 is not 0",
      "code": "if ( p % 2 != 0 )",
      "indent": 1
    },
    {
      "line": 49,
      "text": "set arr1 [ 2 ] [ 2 ] to 0",
      "code": "arr1 [ 2 ] [ 2 ] = 0 ;",
      "indent": 2
    },
    {
      "line": 50,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 51,
      "text": "set arr1 [ 2 ] [ 2 ] to 1",
      "code": "arr1 [ 2 ] [ 2 ] = 1 ;",
      "indent": 2
    },
    {
      "line": 52,
      "text": "for i = 0 to 3 exclusive",
      "code": "for ( int i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 53,
      "text": "for j = 0 to 3 exclusive , print arr1 [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < 3 ; j ++ ) cout << arr1 [ i ] [ j ] ;",
      "indent": 2
    },
    {
      "line": 54,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 55,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 57,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int n ;"
      ],
      "err_line": 7,
      "err_msg": "‘p’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int p = arr [ 0 ] [ 0 ] + arr [ 0 ] [ 1 ] + arr [ 1 ] [ 0 ] ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "arr1 [ 0 ] [ j ] = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "int p = arr [ 0 ] [ 1 ] + arr [ 0 ] [ 2 ] + arr [ 1 ] [ 2 ] ;"
      ],
      "err_line": 17,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "arr1 [ 0 ] [ 2 ] ] = 1 ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "arr1 [ 1 ] [ 0 ] = l ;"
      ],
      "err_line": 26,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "arr1 [ 1 ] [ 2 ] ] = 1 ;"
      ],
      "err_line": 36,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "arr1 [ 2 ] [ 0 ] = l ;"
      ],
      "err_line": 41,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        46
      ],
      "mod_code": [
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        51
      ],
      "mod_code": [
        "arr1 [ 2 ] [ 2 ] ] = 1 ;"
      ],
      "err_line": 51,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        52
      ],
      "mod_code": [
        "for ( i = 0 ; i < 3 ; i ++ )"
      ],
      "err_line": 52,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        27,
        39,
        50,
        46
      ],
      "mod_code": [
        "p = arr [ 1 ] [ 1 ] + arr [ 1 ] [ 0 ] + arr [ 1 ] [ 2 ] + arr [ 0 ] [ 2 ] + arr [ 2 ] [ 1 ] ;",
        "arr [ 2 ] [ 0 ] = 0 ;",
        "else ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        27,
        39,
        14,
        46
      ],
      "mod_code": [
        "p = arr [ 1 ] [ 1 ] + arr [ 1 ] [ 0 ] + arr [ 1 ] [ 2 ] + arr [ 0 ] [ 2 ] + arr [ 2 ] [ 1 ] ;",
        "arr [ 2 ] [ 0 ] = 0 ;",
        "arr1 [ 0 ] [ 1 ] = ' 0 ' ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        27,
        39,
        19,
        46
      ],
      "mod_code": [
        "p = arr [ 1 ] [ 1 ] + arr [ 1 ] [ 0 ] + arr [ 1 ] [ 2 ] + arr [ 0 ] [ 2 ] + arr [ 2 ] [ 1 ] ;",
        "arr [ 2 ] [ 0 ] = 0 ;",
        "arr1 [ 0 ] [ 2 ] = ' 0 ' ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        27,
        39,
        46
      ],
      "mod_code": [
        "p = arr [ 1 ] [ 1 ] + arr [ 1 ] [ 0 ] + arr [ 1 ] [ 2 ] + arr [ 0 ] [ 2 ] + arr [ 2 ] [ 1 ] ;",
        "arr [ 2 ] [ 0 ] = 0 ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        27,
        50,
        14,
        46
      ],
      "mod_code": [
        "p = arr [ 1 ] [ 1 ] + arr [ 1 ] [ 0 ] + arr [ 1 ] [ 2 ] + arr [ 0 ] [ 2 ] + arr [ 2 ] [ 1 ] ;",
        "else ;",
        "arr1 [ 0 ] [ 1 ] = ' 0 ' ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        27,
        50,
        19,
        46
      ],
      "mod_code": [
        "p = arr [ 1 ] [ 1 ] + arr [ 1 ] [ 0 ] + arr [ 1 ] [ 2 ] + arr [ 0 ] [ 2 ] + arr [ 2 ] [ 1 ] ;",
        "else ;",
        "arr1 [ 0 ] [ 2 ] = ' 0 ' ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        27,
        50,
        46
      ],
      "mod_code": [
        "p = arr [ 1 ] [ 1 ] + arr [ 1 ] [ 0 ] + arr [ 1 ] [ 2 ] + arr [ 0 ] [ 2 ] + arr [ 2 ] [ 1 ] ;",
        "else ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        27,
        14,
        19,
        46
      ],
      "mod_code": [
        "p = arr [ 1 ] [ 1 ] + arr [ 1 ] [ 0 ] + arr [ 1 ] [ 2 ] + arr [ 0 ] [ 2 ] + arr [ 2 ] [ 1 ] ;",
        "arr1 [ 0 ] [ 1 ] = ' 0 ' ;",
        "arr1 [ 0 ] [ 2 ] = ' 0 ' ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        27,
        14,
        46
      ],
      "mod_code": [
        "p = arr [ 1 ] [ 1 ] + arr [ 1 ] [ 0 ] + arr [ 1 ] [ 2 ] + arr [ 0 ] [ 2 ] + arr [ 2 ] [ 1 ] ;",
        "arr1 [ 0 ] [ 1 ] = ' 0 ' ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        27,
        19,
        46
      ],
      "mod_code": [
        "p = arr [ 1 ] [ 1 ] + arr [ 1 ] [ 0 ] + arr [ 1 ] [ 2 ] + arr [ 0 ] [ 2 ] + arr [ 2 ] [ 1 ] ;",
        "arr1 [ 0 ] [ 2 ] = ' 0 ' ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        27,
        46
      ],
      "mod_code": [
        "p = arr [ 1 ] [ 1 ] + arr [ 1 ] [ 0 ] + arr [ 1 ] [ 2 ] + arr [ 0 ] [ 2 ] + arr [ 2 ] [ 1 ] ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        39,
        50,
        14,
        46
      ],
      "mod_code": [
        "arr [ 2 ] [ 0 ] = 0 ;",
        "else ;",
        "arr1 [ 0 ] [ 1 ] = ' 0 ' ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        39,
        50,
        19,
        46
      ],
      "mod_code": [
        "arr [ 2 ] [ 0 ] = 0 ;",
        "else ;",
        "arr1 [ 0 ] [ 2 ] = ' 0 ' ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        39,
        50,
        46
      ],
      "mod_code": [
        "arr [ 2 ] [ 0 ] = 0 ;",
        "else ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        39,
        14,
        19,
        46
      ],
      "mod_code": [
        "arr [ 2 ] [ 0 ] = 0 ;",
        "arr1 [ 0 ] [ 1 ] = ' 0 ' ;",
        "arr1 [ 0 ] [ 2 ] = ' 0 ' ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        39,
        14,
        46
      ],
      "mod_code": [
        "arr [ 2 ] [ 0 ] = 0 ;",
        "arr1 [ 0 ] [ 1 ] = ' 0 ' ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        39,
        19,
        46
      ],
      "mod_code": [
        "arr [ 2 ] [ 0 ] = 0 ;",
        "arr1 [ 0 ] [ 2 ] = ' 0 ' ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        39,
        46
      ],
      "mod_code": [
        "arr [ 2 ] [ 0 ] = 0 ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        50,
        14,
        19,
        46
      ],
      "mod_code": [
        "else ;",
        "arr1 [ 0 ] [ 1 ] = ' 0 ' ;",
        "arr1 [ 0 ] [ 2 ] = ' 0 ' ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        50,
        14,
        46
      ],
      "mod_code": [
        "else ;",
        "arr1 [ 0 ] [ 1 ] = ' 0 ' ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        50,
        19,
        46
      ],
      "mod_code": [
        "else ;",
        "arr1 [ 0 ] [ 2 ] = ' 0 ' ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        50,
        46
      ],
      "mod_code": [
        "else ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        19,
        46
      ],
      "mod_code": [
        "arr1 [ 0 ] [ 1 ] = ' 0 ' ;",
        "arr1 [ 0 ] [ 2 ] = ' 0 ' ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        14,
        46
      ],
      "mod_code": [
        "arr1 [ 0 ] [ 1 ] = ' 0 ' ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    },
    {
      "mod_line": [
        19,
        46
      ],
      "mod_code": [
        "arr1 [ 0 ] [ 2 ] = ' 0 ' ;",
        "arr1 [ 2 ] [ 1 ] ] = 1 ;"
      ],
      "err_line": 46,
      "err_msg": "expected ‘;’ before ‘]’ token"
    }
  ]
}