{
  "meta": {
    "index": 1103,
    "hitid": "32W3UF2EZOF64LCVMLVYYWFGAH6C4S",
    "workerid": "A1APYLD4DUK33J",
    "probid": "1085A",
    "subid": "48416087"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create character array re with size 111",
      "code": "char re [ 111 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create character array pre with size 111",
      "code": "char pre [ 111 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer t with t = 0",
      "code": "int t = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read re",
      "code": "gets ( re ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create integers i , j , flag",
      "code": "int i , j , flag ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "create integer n with n = string length of re",
      "code": "int n = strlen ( re ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if n % 2",
      "code": "if ( n % 2 )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 10,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "create character pointer p with p = re",
      "code": "char * p = re ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "create character pointer q with q = re + n - 1",
      "code": "char * q = re + n - 1 ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if flag is true",
      "code": "if ( flag )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "for j = t to 0 exclusive , decrementing j , set pre [ j ] to pre [ j - 1 ]",
      "code": "for ( j = t ; j > 0 ; j -- ) { pre [ j ] = pre [ j - 1 ] ; }",
      "indent": 3
    },
    {
      "line": 16,
      "text": "set pre [ t + 1 ] to ' \\ 0 '",
      "code": "pre [ t + 1 ] = ' \\0 ' ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "set pre [ 0 ] to value of p",
      "code": "pre [ 0 ] = * p ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "increment t",
      "code": "t ++ ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "increment p",
      "code": "p ++ ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 21,
      "text": "for j = t to 0 exclusive , decrementing j , set pre [ j ] to pre [ j - 1 ]",
      "code": "for ( j = t ; j > 0 ; j -- ) { pre [ j ] = pre [ j - 1 ] ; }",
      "indent": 3
    },
    {
      "line": 22,
      "text": "set pre [ t + 1 ] to ' \\ 0 '",
      "code": "pre [ t + 1 ] = ' \\0 ' ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "set pre [ 0 ] to value of q",
      "code": "pre [ 0 ] = * q ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "increment t",
      "code": "t ++ ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "decrement q",
      "code": "q -- ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "increment flag",
      "code": "flag ++ ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "if flag is 2 , set flag to 0",
      "code": "if ( flag == 2 ) flag = 0 ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print pre print newline",
      "code": "cout << pre << endl ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "pre [ 0 ] = p ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "pre [ 0 ] = q ;"
      ],
      "err_line": 23,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char a [ 111 ] ;"
      ],
      "err_line": 4,
      "err_msg": "‘re’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char a [ 111 ] ;"
      ],
      "err_line": 15,
      "err_msg": "‘pre’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int n = re . size ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘re’, which is of non-class type ‘char [111]’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "char p = re ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "char q = re + n - 1 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        17,
        23
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "pre [ 0 ] = q ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        23,
        20
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "pre [ 0 ] = q ;",
        "else else"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        23,
        20,
        11
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "pre [ 0 ] = q ;",
        "else else",
        "char p = re ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        23,
        20,
        16
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "pre [ 0 ] = q ;",
        "else else",
        "pre [ t + 1 ] = ' \\n ' ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        23,
        20,
        30
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "pre [ 0 ] = q ;",
        "else else",
        "cout << pre ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        23,
        11
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "pre [ 0 ] = q ;",
        "char p = re ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        23,
        11,
        16
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "pre [ 0 ] = q ;",
        "char p = re ;",
        "pre [ t + 1 ] = ' \\n ' ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        23,
        11,
        30
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "pre [ 0 ] = q ;",
        "char p = re ;",
        "cout << pre ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        23,
        16
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "pre [ 0 ] = q ;",
        "pre [ t + 1 ] = ' \\n ' ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        23,
        16,
        30
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "pre [ 0 ] = q ;",
        "pre [ t + 1 ] = ' \\n ' ;",
        "cout << pre ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        23,
        30
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "pre [ 0 ] = q ;",
        "cout << pre ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        20
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "else else"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        20,
        11
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "else else",
        "char p = re ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        20,
        11,
        16
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "else else",
        "char p = re ;",
        "pre [ t + 1 ] = ' \\n ' ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        20,
        11,
        30
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "else else",
        "char p = re ;",
        "cout << pre ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        20,
        16
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "else else",
        "pre [ t + 1 ] = ' \\n ' ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        20,
        16,
        30
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "else else",
        "pre [ t + 1 ] = ' \\n ' ;",
        "cout << pre ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        20,
        30
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "else else",
        "cout << pre ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        11
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "char p = re ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        11,
        16
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "char p = re ;",
        "pre [ t + 1 ] = ' \\n ' ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        11,
        16,
        30
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "char p = re ;",
        "pre [ t + 1 ] = ' \\n ' ;",
        "cout << pre ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        11,
        30
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "char p = re ;",
        "cout << pre ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        16
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "pre [ t + 1 ] = ' \\n ' ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        16,
        30
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "pre [ t + 1 ] = ' \\n ' ;",
        "cout << pre ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        30
      ],
      "mod_code": [
        "pre [ 0 ] = p ;",
        "cout << pre ;"
      ],
      "err_line": 17,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        20
      ],
      "mod_code": [
        "pre [ 0 ] = q ;",
        "else else"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        20,
        11
      ],
      "mod_code": [
        "pre [ 0 ] = q ;",
        "else else",
        "char p = re ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        20,
        11,
        16
      ],
      "mod_code": [
        "pre [ 0 ] = q ;",
        "else else",
        "char p = re ;",
        "pre [ t + 1 ] = ' \\n ' ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        20,
        11,
        30
      ],
      "mod_code": [
        "pre [ 0 ] = q ;",
        "else else",
        "char p = re ;",
        "cout << pre ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        20,
        16
      ],
      "mod_code": [
        "pre [ 0 ] = q ;",
        "else else",
        "pre [ t + 1 ] = ' \\n ' ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        20,
        16,
        30
      ],
      "mod_code": [
        "pre [ 0 ] = q ;",
        "else else",
        "pre [ t + 1 ] = ' \\n ' ;",
        "cout << pre ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        20,
        30
      ],
      "mod_code": [
        "pre [ 0 ] = q ;",
        "else else",
        "cout << pre ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        23,
        11
      ],
      "mod_code": [
        "pre [ 0 ] = q ;",
        "char p = re ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        11,
        16
      ],
      "mod_code": [
        "pre [ 0 ] = q ;",
        "char p = re ;",
        "pre [ t + 1 ] = ' \\n ' ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        11,
        16,
        30
      ],
      "mod_code": [
        "pre [ 0 ] = q ;",
        "char p = re ;",
        "pre [ t + 1 ] = ' \\n ' ;",
        "cout << pre ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        11,
        30
      ],
      "mod_code": [
        "pre [ 0 ] = q ;",
        "char p = re ;",
        "cout << pre ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        16
      ],
      "mod_code": [
        "pre [ 0 ] = q ;",
        "pre [ t + 1 ] = ' \\n ' ;"
      ],
      "err_line": 23,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        16,
        30
      ],
      "mod_code": [
        "pre [ 0 ] = q ;",
        "pre [ t + 1 ] = ' \\n ' ;",
        "cout << pre ;"
      ],
      "err_line": 23,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        30
      ],
      "mod_code": [
        "pre [ 0 ] = q ;",
        "cout << pre ;"
      ],
      "err_line": 23,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        11
      ],
      "mod_code": [
        "else else",
        "char p = re ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        11,
        16
      ],
      "mod_code": [
        "else else",
        "char p = re ;",
        "pre [ t + 1 ] = ' \\n ' ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        11,
        16,
        30
      ],
      "mod_code": [
        "else else",
        "char p = re ;",
        "pre [ t + 1 ] = ' \\n ' ;",
        "cout << pre ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        11,
        30
      ],
      "mod_code": [
        "else else",
        "char p = re ;",
        "cout << pre ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        20,
        16
      ],
      "mod_code": [
        "else else",
        "pre [ t + 1 ] = ' \\n ' ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        16,
        30
      ],
      "mod_code": [
        "else else",
        "pre [ t + 1 ] = ' \\n ' ;",
        "cout << pre ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        20,
        30
      ],
      "mod_code": [
        "else else",
        "cout << pre ;"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        16
      ],
      "mod_code": [
        "char p = re ;",
        "pre [ t + 1 ] = ' \\n ' ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        16,
        30
      ],
      "mod_code": [
        "char p = re ;",
        "pre [ t + 1 ] = ' \\n ' ;",
        "cout << pre ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        30
      ],
      "mod_code": [
        "char p = re ;",
        "cout << pre ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    }
  ]
}