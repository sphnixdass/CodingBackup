{
  "meta": {
    "index": 351,
    "hitid": "3JMQI2OLFZZ2VLSF4M55HB3YNL8DNU",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "617A",
    "subid": "48717028"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int x , tmp , step and int array s of size 5 , set step to 0 and elements of s to 5 , 4 , 3 , 2 , 1",
      "code": "int x , tmp , step = 0 , s [ 5 ] = { 5 , 4 , 3 , 2 , 1 } ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to 5 exclusive",
      "code": "for ( int i = 0 ; i < 5 ; ++ i )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if x > = s [ i ]",
      "code": "if ( x >= s [ i ] )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "step = step + tmp = x / s [ i ]",
      "code": "step += ( tmp = x / s [ i ] ) ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "x = x - tmp * s [ i +",
      "code": "x -= tmp * s [ i ] ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 8,
      "text": "print step",
      "code": "cout << step << endl ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "step += tmp [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int x [ 5 ] , s [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int s [5]’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;",
        "step += tmp [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        5,
        6
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;",
        "step += tmp [ i ] ;",
        "x -= tmp * s [ i + tmp ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        2
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;",
        "step += tmp [ i ] ;",
        "x -= tmp * s [ i + tmp ] ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        3
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;",
        "step += tmp [ i ] ;",
        "x -= tmp * s [ i + tmp ] ;",
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        5,
        2
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;",
        "step += tmp [ i ] ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        5,
        2,
        6
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;",
        "step += tmp [ i ] ;",
        "cin >> n ;",
        "x = x - tmp * s [ i + tmp ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        5,
        2,
        3
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;",
        "step += tmp [ i ] ;",
        "cin >> n ;",
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        5,
        6
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;",
        "step += tmp [ i ] ;",
        "x = x - tmp * s [ i + tmp ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        3
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;",
        "step += tmp [ i ] ;",
        "x = x - tmp * s [ i + tmp ] ;",
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        5,
        3
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;",
        "step += tmp [ i ] ;",
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;",
        "x -= tmp * s [ i + tmp ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        6,
        2
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;",
        "x -= tmp * s [ i + tmp ] ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        6,
        2,
        3
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;",
        "x -= tmp * s [ i + tmp ] ;",
        "cin >> n ;",
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        6,
        3
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;",
        "x -= tmp * s [ i + tmp ] ;",
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;",
        "cin >> n ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        2,
        6
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;",
        "cin >> n ;",
        "x = x - tmp * s [ i + tmp ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        3
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;",
        "cin >> n ;",
        "x = x - tmp * s [ i + tmp ] ;",
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;",
        "cin >> n ;",
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;",
        "x = x - tmp * s [ i + tmp ] ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        6,
        3
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;",
        "x = x - tmp * s [ i + tmp ] ;",
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int x [ 5 ] , tmp [ 5 ] , s [ 5 ] , 4 , 4 , 2 , 2 , 1 , 1 } ;",
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "step += tmp [ i ] ;",
        "x -= tmp * s [ i + tmp ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        6,
        2
      ],
      "mod_code": [
        "step += tmp [ i ] ;",
        "x -= tmp * s [ i + tmp ] ;",
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        2,
        3
      ],
      "mod_code": [
        "step += tmp [ i ] ;",
        "x -= tmp * s [ i + tmp ] ;",
        "cin >> n ;",
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        3
      ],
      "mod_code": [
        "step += tmp [ i ] ;",
        "x -= tmp * s [ i + tmp ] ;",
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "step += tmp [ i ] ;",
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2,
        6
      ],
      "mod_code": [
        "step += tmp [ i ] ;",
        "cin >> n ;",
        "x = x - tmp * s [ i + tmp ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2,
        6,
        3
      ],
      "mod_code": [
        "step += tmp [ i ] ;",
        "cin >> n ;",
        "x = x - tmp * s [ i + tmp ] ;",
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        2,
        3
      ],
      "mod_code": [
        "step += tmp [ i ] ;",
        "cin >> n ;",
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "step += tmp [ i ] ;",
        "x = x - tmp * s [ i + tmp ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        6,
        3
      ],
      "mod_code": [
        "step += tmp [ i ] ;",
        "x = x - tmp * s [ i + tmp ] ;",
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "step += tmp [ i ] ;",
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "x -= tmp * s [ i + tmp ] ;",
        "cin >> n ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        2,
        3
      ],
      "mod_code": [
        "x -= tmp * s [ i + tmp ] ;",
        "cin >> n ;",
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "x -= tmp * s [ i + tmp ] ;",
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "cin >> n ;",
        "x = x - tmp * s [ i + tmp ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        3
      ],
      "mod_code": [
        "cin >> n ;",
        "x = x - tmp * s [ i + tmp ] ;",
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "cin >> n ;",
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "x = x - tmp * s [ i + tmp ] ;",
        "for ( i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    }
  ]
}