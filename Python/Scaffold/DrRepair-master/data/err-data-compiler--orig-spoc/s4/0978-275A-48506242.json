{
  "meta": {
    "index": 978,
    "hitid": "3SA4EMRVJVW8ZM3Y8PU26TOATB1P0A",
    "workerid": "AIWEXPJAU66D9",
    "probid": "275A",
    "subid": "48506242"
  },
  "lines": [
    {
      "line": 0,
      "text": "function checkodd with int argument n that returns bool",
      "code": "bool checkodd ( int n )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if n is even",
      "code": "if ( n % 2 == 0 )",
      "indent": 1
    },
    {
      "line": 2,
      "text": "return false",
      "code": "return false ;",
      "indent": 2
    },
    {
      "line": 3,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 4,
      "text": "return true",
      "code": "return true ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "declare arrays of ints a and b with size 3 by 3",
      "code": "int a [ 3 ] [ 3 ] , b [ 3 ] [ 3 ] ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create integers i and j",
      "code": "int i , j ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "in the for loop , change i from 0 to 3 exclusive",
      "code": "for ( i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "in the for loop , change j from 0 to 3 exclusive",
      "code": "for ( j = 0 ; j < 3 ; j ++ )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "read input to a [ i ] [ j ]",
      "code": "cin >> a [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "assign 1 to b [ i ] [ j ]",
      "code": "b [ i ] [ j ] = 1 ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] ) is true , change b [ 0 ] [ 0 ] to 0",
      "code": "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] ) ) b [ 0 ] [ 0 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 1 ] ) is true , change b [ 0 ] [ 1 ] to 0",
      "code": "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 1 ] ) ) b [ 0 ] [ 1 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] ) is true , change b [ 0 ] [ 2 ] to 0",
      "code": "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] ) ) b [ 0 ] [ 2 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 1 ] ) is true , change b [ 1 ] [ 0 ] to 0",
      "code": "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 1 ] ) ) b [ 1 ] [ 0 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 2 ] [ 1 ] ) is true , assign 0 to b [ 1 ] [ 1 ]",
      "code": "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 2 ] [ 1 ] ) ) b [ 1 ] [ 1 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) is true , change b [ 1 ] [ 2 ] to 0",
      "code": "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) ) b [ 1 ] [ 2 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] ) is true , set b [ 2 ] [ 0 ] to 0",
      "code": "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] ) ) b [ 2 ] [ 0 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) is true , change b [ 2 ] [ 1 ] to 0",
      "code": "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) ) b [ 2 ] [ 1 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] ) is true , set b [ 2 ] [ 2 ] to 0",
      "code": "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] ) ) b [ 2 ] [ 2 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "start for loop from i = 0 to 3 exclusive",
      "code": "for ( i = 0 ; i < 3 ; i ++ )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "start for loop from j = 0 to 3 exclusive , print b [ i ] [ j ]",
      "code": "for ( j = 0 ; j < 3 ; j ++ ) { cout << b [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 25,
      "text": "print \" \\ n \"",
      "code": "cout << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool checkodd ( int n ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] , b [ 3 ] ;"
      ],
      "err_line": 7,
      "err_msg": "redeclaration of ‘int b [3]’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "a >> a [ i ] [ j ] ;"
      ],
      "err_line": 11,
      "err_msg": "invalid operands of types ‘int [3][3]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "char b [ i ] [ j ] = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        7,
        14
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        15
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        15,
        16
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        15,
        17
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        15,
        18
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        15,
        19
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        15,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        15,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        15,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        15,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        16
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        16,
        17
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        16,
        18
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        16,
        19
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        16,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        16,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        16,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        16,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        17
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        17,
        18
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        17,
        19
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        17,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        17,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        17,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        17,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        18
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        18,
        19
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        18,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        18,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        18,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        18,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        19
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        19,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        19,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        19,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        19,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        20,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        20,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        20,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        21,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        21,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        22,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        14,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        16
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        16,
        17
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        16,
        18
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        16,
        19
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        16,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        16,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        16,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        16,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        17
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        17,
        18
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        17,
        19
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        17,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        17,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        17,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        17,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        18
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        18,
        19
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        18,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        18,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        18,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        18,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        19
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        19,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        19,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        19,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        19,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        20,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        20,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        20,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        21,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        21,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        22,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        17
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        17,
        18
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        17,
        19
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        17,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        17,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        17,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        17,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        18
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        18,
        19
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        18,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        18,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        18,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        18,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        19
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        19,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        19,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        19,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        19,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        20,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        20,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        20,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        21,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        21,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        22,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        16,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        18
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        18,
        19
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        18,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        18,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        18,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        18,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        19
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        19,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        19,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        19,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        19,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        20,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        20,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        20,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        21,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        21,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        22,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        17,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        18
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        18,
        19
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        18,
        19,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        18,
        19,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        18,
        19,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        18,
        19,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        18,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        18,
        20,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        18,
        20,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        18,
        20,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        18,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        18,
        21,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        18,
        21,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        18,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        18,
        22,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        18,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        19
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        19,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        19,
        20,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        19,
        20,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        19,
        20,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        19,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        19,
        21,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        19,
        21,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        19,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        19,
        22,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        19,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        20
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        20,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        20,
        21,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        20,
        21,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        20,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        20,
        22,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        20,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        21
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        21,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        21,
        22,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        21,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        22
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        22,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        25
      ],
      "mod_code": [
        "int a [ 3 ] , b [ 3 ] ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        14,
        15,
        16,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        15,
        17,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        15,
        18,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        15,
        19,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        15,
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        15,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        15,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        15,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        16,
        17,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        16,
        18,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        16,
        19,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        16,
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        16,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        16,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        16,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        17,
        18,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        17,
        19,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        17,
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        17,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        17,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        17,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        18,
        19,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        18,
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        18,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        18,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        18,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        19,
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        19,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        19,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        19,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        20,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        20,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        21,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        14,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 0 ] ) == 0 ) b [ 0 ] [ 0 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        16,
        17,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        16,
        18,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        16,
        19,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        16,
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        16,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        16,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        16,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        17,
        18,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        17,
        19,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        17,
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        17,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        17,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        17,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        18,
        19,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        18,
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        18,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        18,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        18,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        19,
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        19,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        19,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        19,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        20,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        20,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        21,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        15,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 0 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 0 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        17,
        18,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        17,
        19,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        17,
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        17,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        17,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        17,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        18,
        19,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        18,
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        18,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        18,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        18,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        19,
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        19,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        19,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        19,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        20,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        20,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        21,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 0 ] [ 1 ] + a [ 0 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 0 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        18,
        19,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        18,
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        18,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        18,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        18,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        19,
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        19,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        19,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        19,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        20,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        20,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        21,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        17,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 0 ] + a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 0 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        18,
        19,
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        18,
        19,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        18,
        19,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        18,
        19,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        18,
        20,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        18,
        20,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        18,
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        18,
        21,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        18,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        18,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        18,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 0 ] + a [ 0 ] [ 1 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 1 ] + a [ 1 ] [ 1 ] ) + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) { b [ 1 ] [ 1 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        19,
        20,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        19,
        20,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        19,
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        19,
        21,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        19,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        19,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        19,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 1 ] [ 2 ] + a [ 0 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 1 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        20,
        21,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        20,
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        20,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        20,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 1 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 1 ] ) == 0 ) { b [ 2 ] [ 0 ] = 0 ; }",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        21,
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        21,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 2 ] [ 0 ] + a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 1 ] ) == 0 ) b [ 2 ] [ 1 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        22,
        25
      ],
      "mod_code": [
        "if ( checkodd ( a [ 2 ] [ 1 ] + a [ 2 ] [ 2 ] + a [ 1 ] [ 2 ] + a [ 1 ] [ 2 ] ) == 0 ) b [ 2 ] [ 2 ] = 0 ;",
        "<< \" \\n \" ;"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘<<’ token"
    }
  ]
}