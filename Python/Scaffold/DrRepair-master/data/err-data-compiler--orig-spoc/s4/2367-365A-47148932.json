{
  "meta": {
    "index": 2367,
    "hitid": "39KV3A5D181JUPJAL5J5GD38O9ES7T",
    "workerid": "AGRKG3YT3KMD8",
    "probid": "365A",
    "subid": "47148932"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let integers n , k and r be - 1",
      "code": "int n , k , r = - 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let integers count_dig and count_num be 0",
      "code": "int count_dig = 0 , count_num = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let string t be 0123456789",
      "code": "string t = \" 0123456789 \" ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i from 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for j from 0 to k inclusive",
      "code": "for ( int j = 0 ; j <= k ; j ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if t at index j is in s then increment count_dig",
      "code": "if ( s . find ( t [ j ] ) != - 1 ) { count_dig ++ ; }",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if count_dig is greater than or equal to k + 1 then increment count_dig",
      "code": "if ( count_dig >= k + 1 ) count_num ++ ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set count_dig to 0",
      "code": "count_dig = 0 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print count_num",
      "code": "cout << count_num << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "string t = 0123456789 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( s . at ( j ) == s . end ( ) ) count_dig ++ ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , k , r , r ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int count_dig = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "‘count_num’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "string t = ' 0123456789 ' ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "string s s ;"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘s’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( j = 0 ; j <= k ; j ++ )"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( s . at ( j ) == s . end ( ) ) { count_dig ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "string t = 0123456789 ;",
        "if ( s . at ( j ) == s . end ( ) ) count_dig ++ ;"
      ],
      "err_line": 4,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        4,
        9,
        11
      ],
      "mod_code": [
        "string t = 0123456789 ;",
        "if ( s . at ( j ) == s . end ( ) ) count_dig ++ ;",
        "if ( count_dig >= k + 1 ) count_dig ++ ;"
      ],
      "err_line": 4,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        4,
        9,
        11,
        14
      ],
      "mod_code": [
        "string t = 0123456789 ;",
        "if ( s . at ( j ) == s . end ( ) ) count_dig ++ ;",
        "if ( count_dig >= k + 1 ) count_dig ++ ;",
        "cout << count_num ;"
      ],
      "err_line": 4,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        4,
        9,
        11
      ],
      "mod_code": [
        "string t = 0123456789 ;",
        "if ( s . at ( j ) == s . end ( ) ) count_dig ++ ;",
        "if ( count_dig >= k + 1 ) { count_dig ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        4,
        9,
        11,
        14
      ],
      "mod_code": [
        "string t = 0123456789 ;",
        "if ( s . at ( j ) == s . end ( ) ) count_dig ++ ;",
        "if ( count_dig >= k + 1 ) { count_dig ++ ; }",
        "cout << count_num ;"
      ],
      "err_line": 4,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        4,
        9,
        14
      ],
      "mod_code": [
        "string t = 0123456789 ;",
        "if ( s . at ( j ) == s . end ( ) ) count_dig ++ ;",
        "cout << count_num ;"
      ],
      "err_line": 4,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "string t = 0123456789 ;",
        "if ( count_dig >= k + 1 ) count_dig ++ ;"
      ],
      "err_line": 4,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        4,
        11,
        14
      ],
      "mod_code": [
        "string t = 0123456789 ;",
        "if ( count_dig >= k + 1 ) count_dig ++ ;",
        "cout << count_num ;"
      ],
      "err_line": 4,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "string t = 0123456789 ;",
        "if ( count_dig >= k + 1 ) { count_dig ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        4,
        11,
        14
      ],
      "mod_code": [
        "string t = 0123456789 ;",
        "if ( count_dig >= k + 1 ) { count_dig ++ ; }",
        "cout << count_num ;"
      ],
      "err_line": 4,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "string t = 0123456789 ;",
        "cout << count_num ;"
      ],
      "err_line": 4,
      "err_msg": "invalid digit \"9\" in octal constant"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "if ( s . at ( j ) == s . end ( ) ) count_dig ++ ;",
        "if ( count_dig >= k + 1 ) count_dig ++ ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        9,
        11,
        14
      ],
      "mod_code": [
        "if ( s . at ( j ) == s . end ( ) ) count_dig ++ ;",
        "if ( count_dig >= k + 1 ) count_dig ++ ;",
        "cout << count_num ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        9,
        11,
        14,
        4
      ],
      "mod_code": [
        "if ( s . at ( j ) == s . end ( ) ) count_dig ++ ;",
        "if ( count_dig >= k + 1 ) count_dig ++ ;",
        "cout << count_num ;",
        "string t = ' 0123456789 ' ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        9,
        11,
        4
      ],
      "mod_code": [
        "if ( s . at ( j ) == s . end ( ) ) count_dig ++ ;",
        "if ( count_dig >= k + 1 ) count_dig ++ ;",
        "string t = ' 0123456789 ' ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "if ( s . at ( j ) == s . end ( ) ) count_dig ++ ;",
        "if ( count_dig >= k + 1 ) { count_dig ++ ; }"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        9,
        11,
        14
      ],
      "mod_code": [
        "if ( s . at ( j ) == s . end ( ) ) count_dig ++ ;",
        "if ( count_dig >= k + 1 ) { count_dig ++ ; }",
        "cout << count_num ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        9,
        11,
        14,
        4
      ],
      "mod_code": [
        "if ( s . at ( j ) == s . end ( ) ) count_dig ++ ;",
        "if ( count_dig >= k + 1 ) { count_dig ++ ; }",
        "cout << count_num ;",
        "string t = ' 0123456789 ' ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        9,
        11,
        4
      ],
      "mod_code": [
        "if ( s . at ( j ) == s . end ( ) ) count_dig ++ ;",
        "if ( count_dig >= k + 1 ) { count_dig ++ ; }",
        "string t = ' 0123456789 ' ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "if ( s . at ( j ) == s . end ( ) ) count_dig ++ ;",
        "cout << count_num ;"
      ],
      "err_line": 9,
      "err_msg": "no match for ‘operator==’ (operand types are ‘char’ and ‘std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}’)"
    },
    {
      "mod_line": [
        9,
        14,
        4
      ],
      "mod_code": [
        "if ( s . at ( j ) == s . end ( ) ) count_dig ++ ;",
        "cout << count_num ;",
        "string t = ' 0123456789 ' ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "if ( s . at ( j ) == s . end ( ) ) count_dig ++ ;",
        "string t = ' 0123456789 ' ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        11,
        14,
        4
      ],
      "mod_code": [
        "if ( count_dig >= k + 1 ) count_dig ++ ;",
        "cout << count_num ;",
        "string t = ' 0123456789 ' ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        11,
        4
      ],
      "mod_code": [
        "if ( count_dig >= k + 1 ) count_dig ++ ;",
        "string t = ' 0123456789 ' ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        11,
        14,
        4
      ],
      "mod_code": [
        "if ( count_dig >= k + 1 ) { count_dig ++ ; }",
        "cout << count_num ;",
        "string t = ' 0123456789 ' ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        11,
        4
      ],
      "mod_code": [
        "if ( count_dig >= k + 1 ) { count_dig ++ ; }",
        "string t = ' 0123456789 ' ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        14,
        4
      ],
      "mod_code": [
        "cout << count_num ;",
        "string t = ' 0123456789 ' ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘int’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    }
  ]
}