{
  "meta": {
    "index": 361,
    "hitid": "3P520RYKCH0KMYXVMHZ8XU70I035U6",
    "workerid": "AIWEXPJAU66D9",
    "probid": "617A",
    "subid": "49120684"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer variable x",
      "code": "int x ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read input to x",
      "code": "cin >> x ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "int array arr with elements 1 , 2 , 3 , 4 , 5",
      "code": "int arr [ 5 ] = { 1 , 2 , 3 , 4 , 5 } ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if x < = 5",
      "code": "if ( x <= 5 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "print \" 1 \\ n \"",
      "code": "cout << \" 1\\n \" ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else {",
      "code": "else",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if x % 5 = 0",
      "code": "if ( x % 5 == 0 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print x / 5",
      "code": "cout << x / 5 << endl ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print ( x / 5 ) + 1",
      "code": "cout << ( x / 5 ) + 1 << endl ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 2 , 3 , 4 , 5 } ;"
      ],
      "err_line": 3,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "else else"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        11,
        3
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "else else",
        "int arr [ 4 ] = { 1 , 2 , 3 , 4 , 5 } ;"
      ],
      "err_line": 3,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        5,
        11,
        3,
        8
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "else else",
        "int arr [ 4 ] = { 1 , 2 , 3 , 4 , 5 } ;",
        "if ( ! x % 5 )"
      ],
      "err_line": 3,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        5,
        11,
        3,
        2
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "else else",
        "int arr [ 4 ] = { 1 , 2 , 3 , 4 , 5 } ;",
        "x = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        5,
        11,
        8
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "else else",
        "if ( ! x % 5 )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        11,
        8,
        2
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "else else",
        "if ( ! x % 5 )",
        "x = getchar ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        11,
        2
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "else else",
        "x = getchar ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "int arr [ 4 ] = { 1 , 2 , 3 , 4 , 5 } ;"
      ],
      "err_line": 3,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        5,
        3,
        8
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "int arr [ 4 ] = { 1 , 2 , 3 , 4 , 5 } ;",
        "if ( ! x % 5 )"
      ],
      "err_line": 3,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        5,
        3,
        8,
        2
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "int arr [ 4 ] = { 1 , 2 , 3 , 4 , 5 } ;",
        "if ( ! x % 5 )",
        "x = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        5,
        3,
        2
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "int arr [ 4 ] = { 1 , 2 , 3 , 4 , 5 } ;",
        "x = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "else else",
        "int arr [ 4 ] = { 1 , 2 , 3 , 4 , 5 } ;"
      ],
      "err_line": 3,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        11,
        3,
        8
      ],
      "mod_code": [
        "else else",
        "int arr [ 4 ] = { 1 , 2 , 3 , 4 , 5 } ;",
        "if ( ! x % 5 )"
      ],
      "err_line": 3,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        11,
        3,
        8,
        2
      ],
      "mod_code": [
        "else else",
        "int arr [ 4 ] = { 1 , 2 , 3 , 4 , 5 } ;",
        "if ( ! x % 5 )",
        "x = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        11,
        3,
        2
      ],
      "mod_code": [
        "else else",
        "int arr [ 4 ] = { 1 , 2 , 3 , 4 , 5 } ;",
        "x = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "else else",
        "if ( ! x % 5 )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        8,
        2
      ],
      "mod_code": [
        "else else",
        "if ( ! x % 5 )",
        "x = getchar ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "else else",
        "x = getchar ( ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 2 , 3 , 4 , 5 } ;",
        "if ( ! x % 5 )"
      ],
      "err_line": 3,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        3,
        8,
        2
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 2 , 3 , 4 , 5 } ;",
        "if ( ! x % 5 )",
        "x = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too many initializers for ‘int [4]’"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int arr [ 4 ] = { 1 , 2 , 3 , 4 , 5 } ;",
        "x = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "too many initializers for ‘int [4]’"
    }
  ]
}