{
  "meta": {
    "index": 451,
    "hitid": "356ZPKYPUHB5WHZJGX5BYLIU41LYPE",
    "workerid": "A1APYLD4DUK33J",
    "probid": "734A",
    "subid": "42206405"
  },
  "lines": [
    {
      "line": 0,
      "text": "create string s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create integers a , d , i , n , m",
      "code": "int a , d , i , n , m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read m",
      "code": "cin >> m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set n to length of s",
      "code": "n = s . length ( ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set a to d to 0",
      "code": "a = d = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to n exclusive",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if s [ i ] is ' A '",
      "code": "if ( s [ i ] == ' A ' )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment a",
      "code": "a ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if s [ i ] is ' D '",
      "code": "else if ( s [ i ] == ' D ' )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increment d",
      "code": "d ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if a is greater than d",
      "code": "if ( a > d )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" Anton \" print newline",
      "code": "cout << \" Anton \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else if a is less than d",
      "code": "else if ( a < d )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print \" Danik \" print newline",
      "code": "cout << \" Danik \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print \" Friendship \" print newline",
      "code": "cout << \" Friendship \" << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gets ( m ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        17
      ],
      "mod_code": [
        "int s ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        17,
        3
      ],
      "mod_code": [
        "int s ;",
        "do",
        "gets ( m ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        17,
        3,
        4
      ],
      "mod_code": [
        "int s ;",
        "do",
        "gets ( m ) ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        17,
        3,
        8
      ],
      "mod_code": [
        "int s ;",
        "do",
        "gets ( m ) ;",
        "if ( ! s [ i ] )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        17,
        3,
        14
      ],
      "mod_code": [
        "int s ;",
        "do",
        "gets ( m ) ;",
        "cout << \" Anton \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        17,
        4
      ],
      "mod_code": [
        "int s ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        17,
        4,
        8
      ],
      "mod_code": [
        "int s ;",
        "do",
        "s >> s ;",
        "if ( ! s [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        17,
        4,
        14
      ],
      "mod_code": [
        "int s ;",
        "do",
        "s >> s ;",
        "cout << \" Anton \" ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        17,
        8
      ],
      "mod_code": [
        "int s ;",
        "do",
        "if ( ! s [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        17,
        8,
        14
      ],
      "mod_code": [
        "int s ;",
        "do",
        "if ( ! s [ i ] )",
        "cout << \" Anton \" ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        17,
        14
      ],
      "mod_code": [
        "int s ;",
        "do",
        "cout << \" Anton \" ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "int s ;",
        "gets ( m ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        4
      ],
      "mod_code": [
        "int s ;",
        "gets ( m ) ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        8
      ],
      "mod_code": [
        "int s ;",
        "gets ( m ) ;",
        "s >> s ;",
        "if ( ! s [ i ] )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        4,
        14
      ],
      "mod_code": [
        "int s ;",
        "gets ( m ) ;",
        "s >> s ;",
        "cout << \" Anton \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        8
      ],
      "mod_code": [
        "int s ;",
        "gets ( m ) ;",
        "if ( ! s [ i ] )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        8,
        14
      ],
      "mod_code": [
        "int s ;",
        "gets ( m ) ;",
        "if ( ! s [ i ] )",
        "cout << \" Anton \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        3,
        14
      ],
      "mod_code": [
        "int s ;",
        "gets ( m ) ;",
        "cout << \" Anton \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "int s ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        4,
        8
      ],
      "mod_code": [
        "int s ;",
        "s >> s ;",
        "if ( ! s [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        4,
        8,
        14
      ],
      "mod_code": [
        "int s ;",
        "s >> s ;",
        "if ( ! s [ i ] )",
        "cout << \" Anton \" ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        4,
        14
      ],
      "mod_code": [
        "int s ;",
        "s >> s ;",
        "cout << \" Anton \" ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "int s ;",
        "if ( ! s [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        8,
        14
      ],
      "mod_code": [
        "int s ;",
        "if ( ! s [ i ] )",
        "cout << \" Anton \" ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "int s ;",
        "cout << \" Anton \" ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        17,
        3
      ],
      "mod_code": [
        "do",
        "gets ( m ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        3,
        4
      ],
      "mod_code": [
        "do",
        "gets ( m ) ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        3,
        4,
        8
      ],
      "mod_code": [
        "do",
        "gets ( m ) ;",
        "s >> s ;",
        "if ( ! s [ i ] )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        3,
        4,
        14
      ],
      "mod_code": [
        "do",
        "gets ( m ) ;",
        "s >> s ;",
        "cout << \" Anton \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        3,
        8
      ],
      "mod_code": [
        "do",
        "gets ( m ) ;",
        "if ( ! s [ i ] )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        3,
        8,
        14
      ],
      "mod_code": [
        "do",
        "gets ( m ) ;",
        "if ( ! s [ i ] )",
        "cout << \" Anton \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        3,
        14
      ],
      "mod_code": [
        "do",
        "gets ( m ) ;",
        "cout << \" Anton \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        4
      ],
      "mod_code": [
        "do",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        4,
        8
      ],
      "mod_code": [
        "do",
        "s >> s ;",
        "if ( ! s [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        4,
        8,
        14
      ],
      "mod_code": [
        "do",
        "s >> s ;",
        "if ( ! s [ i ] )",
        "cout << \" Anton \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        4,
        14
      ],
      "mod_code": [
        "do",
        "s >> s ;",
        "cout << \" Anton \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        8
      ],
      "mod_code": [
        "do",
        "if ( ! s [ i ] )"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        17,
        8,
        14
      ],
      "mod_code": [
        "do",
        "if ( ! s [ i ] )",
        "cout << \" Anton \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        17,
        14
      ],
      "mod_code": [
        "do",
        "cout << \" Anton \" ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "gets ( m ) ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        8
      ],
      "mod_code": [
        "gets ( m ) ;",
        "s >> s ;",
        "if ( ! s [ i ] )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        8,
        14
      ],
      "mod_code": [
        "gets ( m ) ;",
        "s >> s ;",
        "if ( ! s [ i ] )",
        "cout << \" Anton \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        14
      ],
      "mod_code": [
        "gets ( m ) ;",
        "s >> s ;",
        "cout << \" Anton \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "gets ( m ) ;",
        "if ( ! s [ i ] )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        14
      ],
      "mod_code": [
        "gets ( m ) ;",
        "if ( ! s [ i ] )",
        "cout << \" Anton \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "gets ( m ) ;",
        "cout << \" Anton \" ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "if ( ! s [ i ] )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        8,
        14
      ],
      "mod_code": [
        "s >> s ;",
        "if ( ! s [ i ] )",
        "cout << \" Anton \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "s >> s ;",
        "cout << \" Anton \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}