{
  "meta": {
    "index": 366,
    "hitid": "37MQ8Z1JQEQ94AYDEZUZ28A1UESY21",
    "workerid": "A1APYLD4DUK33J",
    "probid": "950A",
    "subid": "48472491"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers l , r , a",
      "code": "int l , r , a ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read l , r , a",
      "code": "cin >> l >> r >> a ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if ( l is 0 and a is 0 ) or ( r is 0 bitwise and a is 0 )",
      "code": "if ( ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print 0 and newline",
      "code": "cout << 0 << endl ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "{",
      "indent": 1
    },
    {
      "line": 7,
      "text": "while a is greater than 0",
      "code": "while ( a > 0 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if l is less than r",
      "code": "if ( l < r )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "increment l",
      "code": "l ++ ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "decrement a",
      "code": "a -- ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "else if r is less than l",
      "code": "else if ( r < l )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "increment r",
      "code": "r ++ ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "decrement a",
      "code": "a -- ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if a is greater than or equal to 2",
      "code": "if ( a >= 2 )",
      "indent": 4
    },
    {
      "line": 16,
      "text": "increment l",
      "code": "l ++ ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "increment r",
      "code": "r ++ ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "decrement a by 2",
      "code": "a -= 2 ;",
      "indent": 5
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 20,
      "text": "end loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if l is less than r",
      "code": "if ( l < r )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "let r be l",
      "code": "r = l ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 26,
      "text": "let l be r",
      "code": "l = r ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "if ( l + r ) % 2 is 0",
      "code": "if ( ( l + r ) % 2 == 0 )",
      "indent": 2
    },
    {
      "line": 28,
      "text": "print l + r and newline",
      "code": "cout << l + r << endl ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "else if a is not 0",
      "code": "else if ( a != 0 )",
      "indent": 2
    },
    {
      "line": 30,
      "text": "print l + r + 1 and newline",
      "code": "cout << l + r + 1 << endl ;",
      "indent": 3
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) or ( r == 0 & a == 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘or’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 21,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        3,
        20
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "continue ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        20,
        5
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "continue ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        20,
        5,
        19
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "continue ;",
        "do",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        20,
        5,
        26
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "continue ;",
        "do",
        "int l = r ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        20,
        5,
        24
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "continue ;",
        "do",
        "int r = l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        20,
        19
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "continue ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        20,
        19,
        26
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "continue ;",
        "do",
        "int l = r ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        20,
        19,
        24
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "continue ;",
        "do",
        "int r = l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        20,
        26
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "continue ;",
        "int l = r ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        20,
        26,
        24
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "continue ;",
        "int l = r ;",
        "int r = l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        20,
        24
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "continue ;",
        "int r = l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        5,
        19
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "do",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        5,
        19,
        26
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "do",
        "do",
        "int l = r ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        5,
        19,
        24
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "do",
        "do",
        "int r = l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        5,
        26
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "do",
        "int l = r ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        5,
        26,
        24
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "do",
        "int l = r ;",
        "int r = l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        5,
        24
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "do",
        "int r = l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        19
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        19,
        26
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "do",
        "int l = r ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        19,
        26,
        24
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "do",
        "int l = r ;",
        "int r = l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        19,
        24
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "do",
        "int r = l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        26
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "int l = r ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        26,
        24
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "int l = r ;",
        "int r = l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        3,
        24
      ],
      "mod_code": [
        "if ( l == 0 && a == 0 ) || ( r == 0 & a == 0 ) ;",
        "int r = l ;"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘||’ token"
    },
    {
      "mod_line": [
        20,
        5
      ],
      "mod_code": [
        "continue ;",
        "do"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        5,
        19
      ],
      "mod_code": [
        "continue ;",
        "do",
        "do"
      ],
      "err_line": 21,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        5,
        19,
        26
      ],
      "mod_code": [
        "continue ;",
        "do",
        "do",
        "int l = r ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        5,
        19,
        24
      ],
      "mod_code": [
        "continue ;",
        "do",
        "do",
        "int r = l ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        5,
        26
      ],
      "mod_code": [
        "continue ;",
        "do",
        "int l = r ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        5,
        26,
        24
      ],
      "mod_code": [
        "continue ;",
        "do",
        "int l = r ;",
        "int r = l ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        5,
        24
      ],
      "mod_code": [
        "continue ;",
        "do",
        "int r = l ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        19
      ],
      "mod_code": [
        "continue ;",
        "do"
      ],
      "err_line": 21,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        19,
        26
      ],
      "mod_code": [
        "continue ;",
        "do",
        "int l = r ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        19,
        26,
        24
      ],
      "mod_code": [
        "continue ;",
        "do",
        "int l = r ;",
        "int r = l ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        19,
        24
      ],
      "mod_code": [
        "continue ;",
        "do",
        "int r = l ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        19
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 21,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        19,
        26
      ],
      "mod_code": [
        "do",
        "do",
        "int l = r ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        19,
        26,
        24
      ],
      "mod_code": [
        "do",
        "do",
        "int l = r ;",
        "int r = l ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        19,
        24
      ],
      "mod_code": [
        "do",
        "do",
        "int r = l ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        26
      ],
      "mod_code": [
        "do",
        "int l = r ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        26,
        24
      ],
      "mod_code": [
        "do",
        "int l = r ;",
        "int r = l ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        24
      ],
      "mod_code": [
        "do",
        "int r = l ;"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        26
      ],
      "mod_code": [
        "do",
        "int l = r ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        26,
        24
      ],
      "mod_code": [
        "do",
        "int l = r ;",
        "int r = l ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        24
      ],
      "mod_code": [
        "do",
        "int r = l ;"
      ],
      "err_line": 21,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}