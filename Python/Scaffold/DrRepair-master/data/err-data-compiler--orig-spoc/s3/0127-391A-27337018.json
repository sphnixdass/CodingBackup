{
  "meta": {
    "index": 127,
    "hitid": "3X4Q1O9UBHG4WXRHEO2WW8T7RK9O7Q",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "391A",
    "subid": "27337018"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "Read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "z = integer with length of string s",
      "code": "int z = s . size ( ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "ans = integer with 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "tmp = integer with 1",
      "code": "int tmp = 1 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 1 to z exclusive",
      "code": "for ( int i = 1 ; i < z ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if s [ i ] is s [ i - 1 ]",
      "code": "if ( s [ i ] == s [ i - 1 ] )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment tmp",
      "code": "tmp ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if tmp is even , then increment ans",
      "code": "if ( tmp % 2 == 0 ) ans ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "set tmp to 1",
      "code": "tmp = 1 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if tmp is even , then increment ans",
      "code": "if ( tmp % 2 == 0 ) ans ++ ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print ans and new line",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "gets ( s ) ;",
        "int tmp = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        11,
        9
      ],
      "mod_code": [
        "gets ( s ) ;",
        "int tmp = 1 ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        11,
        9,
        7
      ],
      "mod_code": [
        "gets ( s ) ;",
        "int tmp = 1 ;",
        "do",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        11,
        9,
        1
      ],
      "mod_code": [
        "gets ( s ) ;",
        "int tmp = 1 ;",
        "do",
        "char s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        11,
        7
      ],
      "mod_code": [
        "gets ( s ) ;",
        "int tmp = 1 ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        11,
        7,
        1
      ],
      "mod_code": [
        "gets ( s ) ;",
        "int tmp = 1 ;",
        "if ( s [ i ] == ' [ ' )",
        "char s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        11,
        1
      ],
      "mod_code": [
        "gets ( s ) ;",
        "int tmp = 1 ;",
        "char s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "gets ( s ) ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        9,
        7
      ],
      "mod_code": [
        "gets ( s ) ;",
        "do",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        9,
        7,
        1
      ],
      "mod_code": [
        "gets ( s ) ;",
        "do",
        "if ( s [ i ] == ' [ ' )",
        "char s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        9,
        1
      ],
      "mod_code": [
        "gets ( s ) ;",
        "do",
        "char s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "gets ( s ) ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        7,
        1
      ],
      "mod_code": [
        "gets ( s ) ;",
        "if ( s [ i ] == ' [ ' )",
        "char s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "gets ( s ) ;",
        "char s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "int tmp = 1 ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        9,
        7
      ],
      "mod_code": [
        "int tmp = 1 ;",
        "do",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        9,
        7,
        1
      ],
      "mod_code": [
        "int tmp = 1 ;",
        "do",
        "if ( s [ i ] == ' [ ' )",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        11,
        9,
        1
      ],
      "mod_code": [
        "int tmp = 1 ;",
        "do",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        11,
        7,
        1
      ],
      "mod_code": [
        "int tmp = 1 ;",
        "if ( s [ i ] == ' [ ' )",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "int tmp = 1 ;",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "do",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        7,
        1
      ],
      "mod_code": [
        "do",
        "if ( s [ i ] == ' [ ' )",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "do",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        7,
        1
      ],
      "mod_code": [
        "if ( s [ i ] == ' [ ' )",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    }
  ]
}