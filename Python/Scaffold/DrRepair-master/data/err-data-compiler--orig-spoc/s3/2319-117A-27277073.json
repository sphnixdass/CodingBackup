{
  "meta": {
    "index": 2319,
    "hitid": "32TZXEA1OLEMHI2X6O6EH0WP6KH41W",
    "workerid": "AIWEXPJAU66D9",
    "probid": "117A",
    "subid": "27277073"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare long longs n and m",
      "code": "long long n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "decrement m",
      "code": "m -- ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for long long i = 0 to n exclusive",
      "code": "for ( long long i = 0 ; i < ( long long ) ( n ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create long longs s , f and t",
      "code": "long long s , f , t ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read s , f and t",
      "code": "cin >> s >> f >> t ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "decrease s and f",
      "code": "s -- , f -- ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if s = f",
      "code": "if ( s == f )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print t and ' \\ n '",
      "code": "cout << t << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "continue the loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "declare long long dt = t % ( 2 * m )",
      "code": "long long dt = t % ( 2 * m ) ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if dt < = m",
      "code": "if ( dt <= m )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if dt < = s",
      "code": "if ( dt <= s )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if s < = f",
      "code": "if ( s <= f )",
      "indent": 4
    },
    {
      "line": 16,
      "text": "increase t by s - dt",
      "code": "t += s - dt ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "increase t by f - s",
      "code": "t += f - s ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 19,
      "text": "increase t by s - dt",
      "code": "t += s - dt ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "increase t by m - s",
      "code": "t += m - s ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "increase t by m - f",
      "code": "t += m - f ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 24,
      "text": "if s is less than f",
      "code": "if ( s < f )",
      "indent": 4
    },
    {
      "line": 25,
      "text": "increase t by m - dt",
      "code": "t += m - dt ;",
      "indent": 5
    },
    {
      "line": 26,
      "text": "increase t by m - s",
      "code": "t += m - s ;",
      "indent": 5
    },
    {
      "line": 27,
      "text": "increase t by s - 0",
      "code": "t += s - 0 ;",
      "indent": 5
    },
    {
      "line": 28,
      "text": "increase t by f - 0",
      "code": "t += f - 0 ;",
      "indent": 5
    },
    {
      "line": 29,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 30,
      "text": "increase t by m - dt",
      "code": "t += m - dt ;",
      "indent": 5
    },
    {
      "line": 31,
      "text": "increase t by m - s",
      "code": "t += m - s ;",
      "indent": 5
    },
    {
      "line": 32,
      "text": "increase t by s - f",
      "code": "t += s - f ;",
      "indent": 5
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 35,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 36,
      "text": "dt = m - ( dt % m )",
      "code": "dt = m - ( dt % m ) ;",
      "indent": 3
    },
    {
      "line": 37,
      "text": "if dt > = s",
      "code": "if ( dt >= s )",
      "indent": 3
    },
    {
      "line": 38,
      "text": "if s > = f",
      "code": "if ( s >= f )",
      "indent": 4
    },
    {
      "line": 39,
      "text": "increase t by dt - s",
      "code": "t += dt - s ;",
      "indent": 5
    },
    {
      "line": 40,
      "text": "increase t by s - f",
      "code": "t += s - f ;",
      "indent": 5
    },
    {
      "line": 41,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 42,
      "text": "increase t by dt - s",
      "code": "t += dt - s ;",
      "indent": 5
    },
    {
      "line": 43,
      "text": "increase t by s - 0",
      "code": "t += s - 0 ;",
      "indent": 5
    },
    {
      "line": 44,
      "text": "increase t by f - 0",
      "code": "t += f - 0 ;",
      "indent": 5
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 46,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 47,
      "text": "if s < = f",
      "code": "if ( s <= f )",
      "indent": 4
    },
    {
      "line": 48,
      "text": "increase t by dt - 0",
      "code": "t += dt - 0 ;",
      "indent": 5
    },
    {
      "line": 49,
      "text": "increase t by s - 0",
      "code": "t += s - 0 ;",
      "indent": 5
    },
    {
      "line": 50,
      "text": "increase t by f - s",
      "code": "t += f - s ;",
      "indent": 5
    },
    {
      "line": 51,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 52,
      "text": "increase t by dt - 0",
      "code": "t += dt - 0 ;",
      "indent": 5
    },
    {
      "line": 53,
      "text": "increase t by s - 0",
      "code": "t += s - 0 ;",
      "indent": 5
    },
    {
      "line": 54,
      "text": "increase t by m - s",
      "code": "t += m - s ;",
      "indent": 5
    },
    {
      "line": 55,
      "text": "increase t by m - f",
      "code": "t += m - f ;",
      "indent": 5
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 57,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 58,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 59,
      "text": "print t and ' \\ n '",
      "code": "cout << t << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 60,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 61,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 62,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long n and m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else if ( dt <= m )"
      ],
      "err_line": 13,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 35,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 34,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 59,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "else if ( dt >= s )"
      ],
      "err_line": 37,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        41
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 46,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        46
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 58,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        51
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 57,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        46,
        10
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        46,
        10,
        23
      ],
      "mod_code": [
        "do",
        "do",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        46,
        10,
        23,
        51
      ],
      "mod_code": [
        "do",
        "do",
        "do",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        46,
        10,
        23,
        47
      ],
      "mod_code": [
        "do",
        "do",
        "do",
        "if ( s <= ' f ' )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        46,
        10,
        23,
        13
      ],
      "mod_code": [
        "do",
        "do",
        "do",
        "else if ( dt <= m )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        46,
        10,
        51
      ],
      "mod_code": [
        "do",
        "do",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        46,
        10,
        51,
        47
      ],
      "mod_code": [
        "do",
        "do",
        "do",
        "if ( s <= ' f ' )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        46,
        10,
        51,
        13
      ],
      "mod_code": [
        "do",
        "do",
        "do",
        "else if ( dt <= m )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        46,
        10,
        47
      ],
      "mod_code": [
        "do",
        "do",
        "if ( s <= ' f ' )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        46,
        10,
        47,
        13
      ],
      "mod_code": [
        "do",
        "do",
        "if ( s <= ' f ' )",
        "else if ( dt <= m )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        46,
        10,
        13
      ],
      "mod_code": [
        "do",
        "do",
        "else if ( dt <= m )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        46,
        23
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 35,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        46,
        23,
        51
      ],
      "mod_code": [
        "do",
        "do",
        "do"
      ],
      "err_line": 35,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        46,
        23,
        51,
        47
      ],
      "mod_code": [
        "do",
        "do",
        "do",
        "if ( s <= ' f ' )"
      ],
      "err_line": 35,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        46,
        23,
        51,
        13
      ],
      "mod_code": [
        "do",
        "do",
        "do",
        "else if ( dt <= m )"
      ],
      "err_line": 13,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        46,
        23,
        47
      ],
      "mod_code": [
        "do",
        "do",
        "if ( s <= ' f ' )"
      ],
      "err_line": 35,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        46,
        23,
        47,
        13
      ],
      "mod_code": [
        "do",
        "do",
        "if ( s <= ' f ' )",
        "else if ( dt <= m )"
      ],
      "err_line": 13,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        46,
        23,
        13
      ],
      "mod_code": [
        "do",
        "do",
        "else if ( dt <= m )"
      ],
      "err_line": 13,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        46,
        51
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 57,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        46,
        51,
        47
      ],
      "mod_code": [
        "do",
        "do",
        "if ( s <= ' f ' )"
      ],
      "err_line": 57,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        46,
        51,
        47,
        13
      ],
      "mod_code": [
        "do",
        "do",
        "if ( s <= ' f ' )",
        "else if ( dt <= m )"
      ],
      "err_line": 13,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        46,
        51,
        13
      ],
      "mod_code": [
        "do",
        "do",
        "else if ( dt <= m )"
      ],
      "err_line": 13,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        46,
        47
      ],
      "mod_code": [
        "do",
        "if ( s <= ' f ' )"
      ],
      "err_line": 58,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        46,
        47,
        13
      ],
      "mod_code": [
        "do",
        "if ( s <= ' f ' )",
        "else if ( dt <= m )"
      ],
      "err_line": 13,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        46,
        13
      ],
      "mod_code": [
        "do",
        "else if ( dt <= m )"
      ],
      "err_line": 13,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        10,
        23
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        23,
        51
      ],
      "mod_code": [
        "do",
        "do",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        23,
        51,
        47
      ],
      "mod_code": [
        "do",
        "do",
        "do",
        "if ( s <= ' f ' )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        23,
        51,
        13
      ],
      "mod_code": [
        "do",
        "do",
        "do",
        "else if ( dt <= m )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        23,
        47
      ],
      "mod_code": [
        "do",
        "do",
        "if ( s <= ' f ' )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        23,
        47,
        13
      ],
      "mod_code": [
        "do",
        "do",
        "if ( s <= ' f ' )",
        "else if ( dt <= m )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        23,
        13
      ],
      "mod_code": [
        "do",
        "do",
        "else if ( dt <= m )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        51
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        51,
        47
      ],
      "mod_code": [
        "do",
        "do",
        "if ( s <= ' f ' )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        51,
        47,
        13
      ],
      "mod_code": [
        "do",
        "do",
        "if ( s <= ' f ' )",
        "else if ( dt <= m )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        51,
        13
      ],
      "mod_code": [
        "do",
        "do",
        "else if ( dt <= m )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        47
      ],
      "mod_code": [
        "do",
        "if ( s <= ' f ' )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        47,
        13
      ],
      "mod_code": [
        "do",
        "if ( s <= ' f ' )",
        "else if ( dt <= m )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "do",
        "else if ( dt <= m )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        23,
        51
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 35,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        23,
        51,
        47
      ],
      "mod_code": [
        "do",
        "do",
        "if ( s <= ' f ' )"
      ],
      "err_line": 35,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        23,
        51,
        47,
        13
      ],
      "mod_code": [
        "do",
        "do",
        "if ( s <= ' f ' )",
        "else if ( dt <= m )"
      ],
      "err_line": 13,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        23,
        51,
        13
      ],
      "mod_code": [
        "do",
        "do",
        "else if ( dt <= m )"
      ],
      "err_line": 13,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        23,
        47
      ],
      "mod_code": [
        "do",
        "if ( s <= ' f ' )"
      ],
      "err_line": 35,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        23,
        47,
        13
      ],
      "mod_code": [
        "do",
        "if ( s <= ' f ' )",
        "else if ( dt <= m )"
      ],
      "err_line": 13,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        23,
        13
      ],
      "mod_code": [
        "do",
        "else if ( dt <= m )"
      ],
      "err_line": 13,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        51,
        47
      ],
      "mod_code": [
        "do",
        "if ( s <= ' f ' )"
      ],
      "err_line": 57,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        51,
        47,
        13
      ],
      "mod_code": [
        "do",
        "if ( s <= ' f ' )",
        "else if ( dt <= m )"
      ],
      "err_line": 13,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        51,
        13
      ],
      "mod_code": [
        "do",
        "else if ( dt <= m )"
      ],
      "err_line": 13,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        47,
        13
      ],
      "mod_code": [
        "if ( s <= ' f ' )",
        "else if ( dt <= m )"
      ],
      "err_line": 13,
      "err_msg": "‘else’ without a previous ‘if’"
    }
  ]
}