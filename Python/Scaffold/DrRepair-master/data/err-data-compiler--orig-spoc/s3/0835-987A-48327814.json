{
  "meta": {
    "index": 835,
    "hitid": "3MDKGGG61QH15PIKRVJ3K4ZYVHBT6N",
    "workerid": "AIWEXPJAU66D9",
    "probid": "987A",
    "subid": "48327814"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers n , i , j and flag1",
      "code": "int n , i , j , flag1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read user input to n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "s is a string array with elements \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \"",
      "code": "string s [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "s_color is an array of strings filled with values \" purple \" , \" green \" , \" blue \" , \" orange \" , \" red \" , \" yellow \"",
      "code": "string s_color [ 6 ] = { \" purple \" , \" green \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "s_ip is a new array of strings with size 6",
      "code": "string s_ip [ 6 ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read n elements from the input to s_ip in a loop",
      "code": "for ( i = 0 ; i < n ; i ++ ) { cin >> s_ip [ i ] ; }",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print 6 - n to the standard output",
      "code": "cout << 6 - n << endl ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i from 0 to 6 exclusive",
      "code": "for ( i = 0 ; i < 6 ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "assign the new value = 0 to flag1",
      "code": "flag1 = 0 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "for j = 0 to n exclusive",
      "code": "for ( j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if s_color [ i ] = s_ip [ j ]",
      "code": "if ( s_color [ i ] == s_ip [ j ] )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "assign 1 to flag1",
      "code": "flag1 = 1 ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if flag1 is equal to 0 , print s [ i ] to the standard output",
      "code": "if ( flag1 == 0 ) cout << s [ i ] << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , i , j , j ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( ! s_color [ i ] )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        4,
        16
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "if ( flag1 == 0 ) cout << s [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        4,
        16,
        11
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "if ( flag1 == 0 ) cout << s [ i ] ;",
        "if ( ! s_color [ i ] )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        4,
        16,
        13
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "if ( flag1 == 0 ) cout << s [ i ] ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        4,
        16,
        6
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "if ( flag1 == 0 ) cout << s [ i ] ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        4,
        11
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "if ( ! s_color [ i ] )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        4,
        11,
        13
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "if ( ! s_color [ i ] )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        4,
        11,
        6
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "if ( ! s_color [ i ] )",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        4,
        13
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        4,
        13,
        6
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "do",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        4,
        6
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "if ( flag1 == 0 ) cout << s [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        16,
        11
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "if ( flag1 == 0 ) cout << s [ i ] ;",
        "if ( ! s_color [ i ] )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        16,
        11,
        13
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "if ( flag1 == 0 ) cout << s [ i ] ;",
        "if ( ! s_color [ i ] )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        16,
        11,
        6
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "if ( flag1 == 0 ) cout << s [ i ] ;",
        "if ( ! s_color [ i ] )",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        16,
        13
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "if ( flag1 == 0 ) cout << s [ i ] ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        16,
        13,
        6
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "if ( flag1 == 0 ) cout << s [ i ] ;",
        "do",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        16,
        6
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "if ( flag1 == 0 ) cout << s [ i ] ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "if ( ! s_color [ i ] )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        11,
        13
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "if ( ! s_color [ i ] )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        11,
        13,
        6
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "if ( ! s_color [ i ] )",
        "do",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        11,
        6
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "if ( ! s_color [ i ] )",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        13,
        6
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "do",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "string s [ \" ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
        "while ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        16,
        11
      ],
      "mod_code": [
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "if ( flag1 == 0 ) cout << s [ i ] ;",
        "if ( ! s_color [ i ] )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        16,
        11,
        13
      ],
      "mod_code": [
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "if ( flag1 == 0 ) cout << s [ i ] ;",
        "if ( ! s_color [ i ] )",
        "do"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        16,
        11,
        6
      ],
      "mod_code": [
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "if ( flag1 == 0 ) cout << s [ i ] ;",
        "if ( ! s_color [ i ] )",
        "while ( cin >> n )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        16,
        13
      ],
      "mod_code": [
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "if ( flag1 == 0 ) cout << s [ i ] ;",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        16,
        13,
        6
      ],
      "mod_code": [
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "if ( flag1 == 0 ) cout << s [ i ] ;",
        "do",
        "while ( cin >> n )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "if ( ! s_color [ i ] )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        11,
        13
      ],
      "mod_code": [
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "if ( ! s_color [ i ] )",
        "do"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        11,
        13,
        6
      ],
      "mod_code": [
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "if ( ! s_color [ i ] )",
        "do",
        "while ( cin >> n )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        11,
        6
      ],
      "mod_code": [
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "if ( ! s_color [ i ] )",
        "while ( cin >> n )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        13,
        6
      ],
      "mod_code": [
        "string s_color [ ] = { \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" } ;",
        "do",
        "while ( cin >> n )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        11
      ],
      "mod_code": [
        "if ( flag1 == 0 ) cout << s [ i ] ;",
        "if ( ! s_color [ i ] )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        11,
        13
      ],
      "mod_code": [
        "if ( flag1 == 0 ) cout << s [ i ] ;",
        "if ( ! s_color [ i ] )",
        "do"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        11,
        13,
        6
      ],
      "mod_code": [
        "if ( flag1 == 0 ) cout << s [ i ] ;",
        "if ( ! s_color [ i ] )",
        "do",
        "while ( cin >> n )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        11,
        6
      ],
      "mod_code": [
        "if ( flag1 == 0 ) cout << s [ i ] ;",
        "if ( ! s_color [ i ] )",
        "while ( cin >> n )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        13
      ],
      "mod_code": [
        "if ( flag1 == 0 ) cout << s [ i ] ;",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        13,
        6
      ],
      "mod_code": [
        "if ( flag1 == 0 ) cout << s [ i ] ;",
        "do",
        "while ( cin >> n )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "if ( ! s_color [ i ] )",
        "do"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        13,
        6
      ],
      "mod_code": [
        "if ( ! s_color [ i ] )",
        "do",
        "while ( cin >> n )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "if ( ! s_color [ i ] )",
        "while ( cin >> n )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        6
      ],
      "mod_code": [
        "do",
        "while ( cin >> n )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}