{
  "meta": {
    "index": 1954,
    "hitid": "3G9UA71JVVOQVM0KYBAROCCLR37J7Z",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "899A",
    "subid": "46704262"
  },
  "lines": [
    {
      "line": 0,
      "text": "in the function cmp that takes integers x , y and returns bool",
      "code": "bool cmp ( int x , int y )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return x , y",
      "code": "return x > y ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "n = long long int",
      "code": "long long int n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while read n",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "num = integer , a = array of 200001 integers with num = 0 , a = { }",
      "code": "int num = 0 , a [ 200001 ] = { } ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for i = 0 to n exclusive , read a [ i ]",
      "code": "for ( long i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 2
    },
    {
      "line": 8,
      "text": "sort cmp from a to a + n",
      "code": "sort ( a , a + n , cmp ) ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "for i = 0 to n exclusive",
      "code": "for ( long i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if a [ i ] is 2 and a [ n - i - 1 ] is 1",
      "code": "if ( a [ i ] == 2 && a [ n - i - 1 ] == 1 )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "increment num",
      "code": "num ++ ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "a [ i ] = 0",
      "code": "a [ i ] = 0 ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "a [ n - i - 1 ] = 0",
      "code": "a [ n - i - 1 ] = 0 ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "else if a [ i ] is 1 and a [ i + 1 ] is 1 and a [ i + 2 ] is 1",
      "code": "else if ( a [ i ] == 1 && a [ i + 1 ] == 1 && a [ i + 2 ] == 1 )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "increment num",
      "code": "num ++ ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "a [ i ] = 0",
      "code": "a [ i ] = 0 ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "a [ i + 1 ] = 0",
      "code": "a [ i + 1 ] = 0 ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "a [ i + 2 ] = 0",
      "code": "a [ i + 2 ] = 0 ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "print num",
      "code": "cout << num << endl ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "long long int t ;"
      ],
      "err_line": 5,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "while ( gets ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int num [ 200001 ] = { 0 , a = 0 } ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "return x , y ;",
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "return x , y ;",
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "sort ( cmp , cmp + n ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        14
      ],
      "mod_code": [
        "return x , y ;",
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "sort ( cmp , cmp + n ) ;",
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        5
      ],
      "mod_code": [
        "return x , y ;",
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "sort ( cmp , cmp + n ) ;",
        "while ( gets ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        0
      ],
      "mod_code": [
        "return x , y ;",
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "sort ( cmp , cmp + n ) ;",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        1,
        6,
        14
      ],
      "mod_code": [
        "return x , y ;",
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        6,
        14,
        5
      ],
      "mod_code": [
        "return x , y ;",
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )",
        "while ( gets ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        14,
        0
      ],
      "mod_code": [
        "return x , y ;",
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        1,
        6,
        5
      ],
      "mod_code": [
        "return x , y ;",
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "while ( gets ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        6,
        5,
        0
      ],
      "mod_code": [
        "return x , y ;",
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "while ( gets ( cin >> n )",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        1,
        6,
        0
      ],
      "mod_code": [
        "return x , y ;",
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        1,
        8,
        14,
        5
      ],
      "mod_code": [
        "return x , y ;",
        "sort ( cmp , cmp + n ) ;",
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )",
        "while ( gets ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        14,
        0
      ],
      "mod_code": [
        "return x , y ;",
        "sort ( cmp , cmp + n ) ;",
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        1,
        8,
        5
      ],
      "mod_code": [
        "return x , y ;",
        "sort ( cmp , cmp + n ) ;",
        "while ( gets ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        5,
        0
      ],
      "mod_code": [
        "return x , y ;",
        "sort ( cmp , cmp + n ) ;",
        "while ( gets ( cin >> n )",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        1,
        8,
        0
      ],
      "mod_code": [
        "return x , y ;",
        "sort ( cmp , cmp + n ) ;",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        1,
        14,
        5
      ],
      "mod_code": [
        "return x , y ;",
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )",
        "while ( gets ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        14,
        5,
        0
      ],
      "mod_code": [
        "return x , y ;",
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )",
        "while ( gets ( cin >> n )",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        1,
        14,
        0
      ],
      "mod_code": [
        "return x , y ;",
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "return x , y ;",
        "while ( gets ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5,
        0
      ],
      "mod_code": [
        "return x , y ;",
        "while ( gets ( cin >> n )",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "return x , y ;",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "sort ( cmp , cmp + n ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8,
        14
      ],
      "mod_code": [
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "sort ( cmp , cmp + n ) ;",
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8,
        14,
        5
      ],
      "mod_code": [
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "sort ( cmp , cmp + n ) ;",
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )",
        "while ( gets ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        14,
        0
      ],
      "mod_code": [
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "sort ( cmp , cmp + n ) ;",
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        6,
        8,
        5
      ],
      "mod_code": [
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "sort ( cmp , cmp + n ) ;",
        "while ( gets ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        5,
        0
      ],
      "mod_code": [
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "sort ( cmp , cmp + n ) ;",
        "while ( gets ( cin >> n )",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        6,
        8,
        0
      ],
      "mod_code": [
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "sort ( cmp , cmp + n ) ;",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        14,
        5
      ],
      "mod_code": [
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )",
        "while ( gets ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        14,
        5,
        0
      ],
      "mod_code": [
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )",
        "while ( gets ( cin >> n )",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        6,
        14,
        0
      ],
      "mod_code": [
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "while ( gets ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        5,
        0
      ],
      "mod_code": [
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "while ( gets ( cin >> n )",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        6,
        0
      ],
      "mod_code": [
        "int num [ 200001 ] = { 0 , a [ 200001 ] ;",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        8,
        14,
        5
      ],
      "mod_code": [
        "sort ( cmp , cmp + n ) ;",
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )",
        "while ( gets ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        14,
        5,
        0
      ],
      "mod_code": [
        "sort ( cmp , cmp + n ) ;",
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )",
        "while ( gets ( cin >> n )",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        8,
        14,
        0
      ],
      "mod_code": [
        "sort ( cmp , cmp + n ) ;",
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "sort ( cmp , cmp + n ) ;",
        "while ( gets ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        5,
        0
      ],
      "mod_code": [
        "sort ( cmp , cmp + n ) ;",
        "while ( gets ( cin >> n )",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "sort ( cmp , cmp + n ) ;",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        14,
        5
      ],
      "mod_code": [
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )",
        "while ( gets ( cin >> n )"
      ],
      "err_line": 5,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        5,
        0
      ],
      "mod_code": [
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )",
        "while ( gets ( cin >> n )",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        14,
        0
      ],
      "mod_code": [
        "else if ( a [ i ] == ' 1 ' && a [ i + 1 ] == ' 1 ' && a [ i + 2 ] == ' 1 ' )",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    },
    {
      "mod_line": [
        5,
        0
      ],
      "mod_code": [
        "while ( gets ( cin >> n )",
        "bool cmp ( int x , long bool y )"
      ],
      "err_line": 0,
      "err_msg": "‘long’ or ‘short’ invalid for ‘y’"
    }
  ]
}