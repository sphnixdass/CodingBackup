{
  "meta": {
    "index": 1528,
    "hitid": "3IYI9285WSUW73VGPSI24Y4ZT1RJCW",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "1097A",
    "subid": "49033841"
  },
  "lines": [
    {
      "line": 0,
      "text": "create string s and c",
      "code": "string s , c ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int i",
      "code": "int i ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 5 exclusive",
      "code": "for ( i = 0 ; i < 5 ; ++ i )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read c",
      "code": "cin >> c ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if c [ 0 ] = s [ 0 ] or c [ 1 ] = s [ 1 ]",
      "code": "if ( c [ 0 ] == s [ 0 ] || c [ 1 ] == s [ 1 ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string s and c ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "gets ( c ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "string s and c ;",
        "s >> s ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        0,
        3,
        6
      ],
      "mod_code": [
        "string s and c ;",
        "s >> s ;",
        "if ( ! c [ 0 ] || c [ 1 ] == s [ 1 ] )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        0,
        3,
        6,
        5
      ],
      "mod_code": [
        "string s and c ;",
        "s >> s ;",
        "if ( ! c [ 0 ] || c [ 1 ] == s [ 1 ] )",
        "gets ( c ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        0,
        3,
        5
      ],
      "mod_code": [
        "string s and c ;",
        "s >> s ;",
        "gets ( c ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        0,
        6
      ],
      "mod_code": [
        "string s and c ;",
        "if ( ! c [ 0 ] || c [ 1 ] == s [ 1 ] )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        0,
        6,
        5
      ],
      "mod_code": [
        "string s and c ;",
        "if ( ! c [ 0 ] || c [ 1 ] == s [ 1 ] )",
        "gets ( c ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        0,
        5
      ],
      "mod_code": [
        "string s and c ;",
        "gets ( c ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "s >> s ;",
        "if ( ! c [ 0 ] || c [ 1 ] == s [ 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        6,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "if ( ! c [ 0 ] || c [ 1 ] == s [ 1 ] )",
        "gets ( c ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "gets ( c ) ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "if ( ! c [ 0 ] || c [ 1 ] == s [ 1 ] )",
        "gets ( c ) ;"
      ],
      "err_line": 5,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}