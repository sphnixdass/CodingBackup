{
  "meta": {
    "index": 2011,
    "hitid": "3S1WOPCJFGNB41FULJOXUM42ED5JEQ",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "276A",
    "subid": "34278145"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , k = integers , f , t , j = integer array of size 10005",
      "code": "int n , k , f [ 10005 ] , t [ 10005 ] , j [ 10005 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while read n , k",
      "code": "while ( cin >> n >> k )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to n exclusive , read f [ i ] , t [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> f [ i ] >> t [ i ] ; }",
      "indent": 2
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if t [ i ] > = k",
      "code": "if ( t [ i ] >= k )",
      "indent": 3
    },
    {
      "line": 6,
      "text": "j [ i ] = f [ i ] - ( t [ i ] - k )",
      "code": "j [ i ] = f [ i ] - ( t [ i ] - k ) ;",
      "indent": 4
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 8,
      "text": "j [ i ] = f [ i ]",
      "code": "j [ i ] = f [ i ] ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "sort reference j [ 0 ] and reference j [ n ]",
      "code": "sort ( & j [ 0 ] , & j [ n ] ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print j [ n - 1 ]",
      "code": "cout << j [ n - 1 ] << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , k , f [ 10005 ] , t , j ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "sort ( j [ 0 ] , & j [ n ] ) ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘sort(int&, int*)’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , k , t , f [ 10005 ] , j ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( { cin >> n >> k )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "sort ( j [ 0 ] , & & j [ n ] ) ;"
      ],
      "err_line": 10,
      "err_msg": "lvalue required as unary ‘&’ operand"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int n , k , f [ 10005 ] , t , j ;",
        "sort ( j [ 0 ] , & j [ n ] ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        2
      ],
      "mod_code": [
        "int n , k , f [ 10005 ] , t , j ;",
        "sort ( j [ 0 ] , & j [ n ] ) ;",
        "while ( { cin >> n >> k )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        2,
        5
      ],
      "mod_code": [
        "int n , k , f [ 10005 ] , t , j ;",
        "sort ( j [ 0 ] , & j [ n ] ) ;",
        "while ( { cin >> n >> k )",
        "if ( t [ i ] >= ' k ' )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        2,
        6
      ],
      "mod_code": [
        "int n , k , f [ 10005 ] , t , j ;",
        "sort ( j [ 0 ] , & j [ n ] ) ;",
        "while ( { cin >> n >> k )",
        "j [ i ] -= ( t [ i ] - k ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        10,
        5
      ],
      "mod_code": [
        "int n , k , f [ 10005 ] , t , j ;",
        "sort ( j [ 0 ] , & j [ n ] ) ;",
        "if ( t [ i ] >= ' k ' )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        5,
        6
      ],
      "mod_code": [
        "int n , k , f [ 10005 ] , t , j ;",
        "sort ( j [ 0 ] , & j [ n ] ) ;",
        "if ( t [ i ] >= ' k ' )",
        "j [ i ] -= ( t [ i ] - k ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        6
      ],
      "mod_code": [
        "int n , k , f [ 10005 ] , t , j ;",
        "sort ( j [ 0 ] , & j [ n ] ) ;",
        "j [ i ] -= ( t [ i ] - k ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , k , f [ 10005 ] , t , j ;",
        "while ( { cin >> n >> k )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "int n , k , f [ 10005 ] , t , j ;",
        "while ( { cin >> n >> k )",
        "if ( t [ i ] >= ' k ' )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        6
      ],
      "mod_code": [
        "int n , k , f [ 10005 ] , t , j ;",
        "while ( { cin >> n >> k )",
        "if ( t [ i ] >= ' k ' )",
        "j [ i ] -= ( t [ i ] - k ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        2,
        6
      ],
      "mod_code": [
        "int n , k , f [ 10005 ] , t , j ;",
        "while ( { cin >> n >> k )",
        "j [ i ] -= ( t [ i ] - k ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int n , k , f [ 10005 ] , t , j ;",
        "if ( t [ i ] >= ' k ' )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        5,
        6
      ],
      "mod_code": [
        "int n , k , f [ 10005 ] , t , j ;",
        "if ( t [ i ] >= ' k ' )",
        "j [ i ] -= ( t [ i ] - k ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int n , k , f [ 10005 ] , t , j ;",
        "j [ i ] -= ( t [ i ] - k ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "sort ( j [ 0 ] , & j [ n ] ) ;",
        "while ( { cin >> n >> k )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        2,
        5
      ],
      "mod_code": [
        "sort ( j [ 0 ] , & j [ n ] ) ;",
        "while ( { cin >> n >> k )",
        "if ( t [ i ] >= ' k ' )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        2,
        5,
        1
      ],
      "mod_code": [
        "sort ( j [ 0 ] , & j [ n ] ) ;",
        "while ( { cin >> n >> k )",
        "if ( t [ i ] >= ' k ' )",
        "int n , k , t , f [ 10005 ] , j ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        2,
        5,
        6
      ],
      "mod_code": [
        "sort ( j [ 0 ] , & j [ n ] ) ;",
        "while ( { cin >> n >> k )",
        "if ( t [ i ] >= ' k ' )",
        "j [ i ] -= ( t [ i ] - k ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        2,
        1
      ],
      "mod_code": [
        "sort ( j [ 0 ] , & j [ n ] ) ;",
        "while ( { cin >> n >> k )",
        "int n , k , t , f [ 10005 ] , j ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        2,
        1,
        6
      ],
      "mod_code": [
        "sort ( j [ 0 ] , & j [ n ] ) ;",
        "while ( { cin >> n >> k )",
        "int n , k , t , f [ 10005 ] , j ;",
        "j [ i ] -= ( t [ i ] - k ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        2,
        6
      ],
      "mod_code": [
        "sort ( j [ 0 ] , & j [ n ] ) ;",
        "while ( { cin >> n >> k )",
        "j [ i ] -= ( t [ i ] - k ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        5
      ],
      "mod_code": [
        "sort ( j [ 0 ] , & j [ n ] ) ;",
        "if ( t [ i ] >= ' k ' )"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘sort(int&, int*)’"
    },
    {
      "mod_line": [
        10,
        5,
        1
      ],
      "mod_code": [
        "sort ( j [ 0 ] , & j [ n ] ) ;",
        "if ( t [ i ] >= ' k ' )",
        "int n , k , t , f [ 10005 ] , j ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        5,
        1,
        6
      ],
      "mod_code": [
        "sort ( j [ 0 ] , & j [ n ] ) ;",
        "if ( t [ i ] >= ' k ' )",
        "int n , k , t , f [ 10005 ] , j ;",
        "j [ i ] -= ( t [ i ] - k ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        5,
        6
      ],
      "mod_code": [
        "sort ( j [ 0 ] , & j [ n ] ) ;",
        "if ( t [ i ] >= ' k ' )",
        "j [ i ] -= ( t [ i ] - k ) ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘sort(int&, int*)’"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "sort ( j [ 0 ] , & j [ n ] ) ;",
        "int n , k , t , f [ 10005 ] , j ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        1,
        6
      ],
      "mod_code": [
        "sort ( j [ 0 ] , & j [ n ] ) ;",
        "int n , k , t , f [ 10005 ] , j ;",
        "j [ i ] -= ( t [ i ] - k ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "sort ( j [ 0 ] , & j [ n ] ) ;",
        "j [ i ] -= ( t [ i ] - k ) ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘sort(int&, int*)’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "if ( t [ i ] >= ' k ' )"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        5,
        1
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "if ( t [ i ] >= ' k ' )",
        "int n , k , t , f [ 10005 ] , j ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        5,
        1,
        6
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "if ( t [ i ] >= ' k ' )",
        "int n , k , t , f [ 10005 ] , j ;",
        "j [ i ] -= ( t [ i ] - k ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        5,
        6
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "if ( t [ i ] >= ' k ' )",
        "j [ i ] -= ( t [ i ] - k ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "int n , k , t , f [ 10005 ] , j ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        1,
        6
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "int n , k , t , f [ 10005 ] , j ;",
        "j [ i ] -= ( t [ i ] - k ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "while ( { cin >> n >> k )",
        "j [ i ] -= ( t [ i ] - k ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "if ( t [ i ] >= ' k ' )",
        "int n , k , t , f [ 10005 ] , j ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        1,
        6
      ],
      "mod_code": [
        "if ( t [ i ] >= ' k ' )",
        "int n , k , t , f [ 10005 ] , j ;",
        "j [ i ] -= ( t [ i ] - k ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int n , k , t , f [ 10005 ] , j ;",
        "j [ i ] -= ( t [ i ] - k ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}