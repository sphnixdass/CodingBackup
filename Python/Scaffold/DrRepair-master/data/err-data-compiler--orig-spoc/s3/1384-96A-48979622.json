{
  "meta": {
    "index": 1384,
    "hitid": "3YLTXLH3DF0JAM9U6X1NCLNRE57PH5",
    "workerid": "A1APYLD4DUK33J",
    "probid": "96A",
    "subid": "48979622"
  },
  "lines": [
    {
      "line": 0,
      "text": "create string s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , count1 , count2 with count1 = 1 , count2 = 1",
      "code": "int n , count1 = 1 , count2 = 1 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "setn to length of s",
      "code": "n = s . length ( ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if n is less than 7",
      "code": "if ( n < 7 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if s [ i ] is s [ i + 1 ] and s [ i ] is ' 1 '",
      "code": "if ( s [ i ] == s [ i + 1 ] && s [ i ] == ' 1 ' )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increment count1",
      "code": "count1 ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "if count1 is 7 , break loop",
      "code": "if ( count1 == 7 ) break ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set count1 to 1",
      "code": "count1 = 1 ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if s [ i ] is s [ i + 1 ] and s [ i ] is ' 0 '",
      "code": "if ( s [ i ] == s [ i + 1 ] && s [ i ] == ' 0 ' )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "increment count2",
      "code": "count2 ++ ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "if count2 is 7 , break loop",
      "code": "if ( count2 == 7 ) break ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 19,
      "text": "set count2 to 1",
      "code": "count2 = 1 ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "if count1 is 7 or count2 is 7",
      "code": "if ( count1 == 7 || count2 == 7 )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print \" NO \" print newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "setn = s . length ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , count1 , count2 = 1 , count2 = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int count2’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "setn = s . size ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        18
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        18,
        10
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        18,
        10,
        23
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        18,
        10,
        13
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        18,
        10,
        15
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        18,
        23
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "do",
        "do"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        18,
        23,
        13
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "do",
        "do",
        "do"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        18,
        23,
        15
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "do",
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        18,
        13
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "do",
        "do"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        18,
        13,
        15
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "do",
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        18,
        15
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        23
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        23,
        13
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "do",
        "do"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        23,
        15
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        13
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        13,
        15
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10,
        15
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        23
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        23,
        13
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "do",
        "do"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        23,
        13,
        15
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "do",
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        23,
        15
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        13,
        15
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        15
      ],
      "mod_code": [
        "setn = s . length ( ) ;",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 4,
      "err_msg": "‘setn’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        10
      ],
      "mod_code": [
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        18,
        10,
        23
      ],
      "mod_code": [
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        18,
        10,
        23,
        13
      ],
      "mod_code": [
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "do",
        "do"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        18,
        10,
        23,
        15
      ],
      "mod_code": [
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        18,
        10,
        13
      ],
      "mod_code": [
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        18,
        10,
        13,
        15
      ],
      "mod_code": [
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        18,
        10,
        15
      ],
      "mod_code": [
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        18,
        23
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        23,
        13
      ],
      "mod_code": [
        "do",
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        18,
        23,
        13,
        15
      ],
      "mod_code": [
        "do",
        "do",
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        18,
        23,
        15
      ],
      "mod_code": [
        "do",
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        18,
        13
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        18,
        13,
        15
      ],
      "mod_code": [
        "do",
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        18,
        15
      ],
      "mod_code": [
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        23
      ],
      "mod_code": [
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        23,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "do",
        "do"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        23,
        13,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "do",
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        23,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        13,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 1 ' )",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        23,
        13
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        23,
        13,
        15
      ],
      "mod_code": [
        "do",
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        23,
        15
      ],
      "mod_code": [
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "do",
        "if ( s [ i ] == ' [ ' [ i + 1 ] && s [ i ] == ' 0 ' )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    }
  ]
}