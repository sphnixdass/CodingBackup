{
  "meta": {
    "index": 2161,
    "hitid": "344M16OZKI97NR6F0HGPNTLJMAEENI",
    "workerid": "AIWEXPJAU66D9",
    "probid": "330A",
    "subid": "39081609"
  },
  "lines": [
    {
      "line": 0,
      "text": "a is an array of integers with size 1005 by 1005",
      "code": "int a [ 1005 ] [ 1005 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "vis is an array of integers with size 1005 by 1005",
      "code": "int vis [ 1005 ] [ 1005 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create integers r and c",
      "code": "int r , c ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read r and c",
      "code": "cin >> r >> c ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "s is an array of strings with size 1000",
      "code": "string s [ 1000 ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "i and j are integers",
      "code": "int i , j ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read r elements into s",
      "code": "for ( i = 0 ; i < r ; i ++ ) { cin >> s [ i ] ; }",
      "indent": 1
    },
    {
      "line": 8,
      "text": "call memset with arguments a , 0 and sizeof ( a )",
      "code": "memset ( a , 0 , sizeof ( a ) ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "call memset with arguments vis , 0 and sizeof ( vis )",
      "code": "memset ( vis , 0 , sizeof ( vis ) ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to r exclusive",
      "code": "for ( i = 0 ; i < r ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for j = 0 to c exclusive",
      "code": "for ( j = 0 ; j < c ; j ++ )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if s [ i ] [ j ] = ' S ' set a [ i ] [ j ] = 1",
      "code": "if ( s [ i ] [ j ] == ' S ' ) a [ i ] [ j ] = 1 ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "ans is integer = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "declare integer flag = 0",
      "code": "int flag = 0 ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = 0 to r exclusive",
      "code": "for ( i = 0 ; i < r ; i ++ )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "assign value of 0 to flag",
      "code": "flag = 0 ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "for j = 0 to c exclusive",
      "code": "for ( j = 0 ; j < c ; j ++ )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if a [ i ] [ j ] = 1 , set flag to 1",
      "code": "if ( a [ i ] [ j ] == 1 ) { flag = 1 ; }",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if flag = 0",
      "code": "if ( flag == 0 )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "for j = 0 to c exclusive",
      "code": "for ( j = 0 ; j < c ; j ++ )",
      "indent": 3
    },
    {
      "line": 24,
      "text": "if a [ i ] [ j ] = 0 , increment ans",
      "code": "if ( a [ i ] [ j ] == 0 ) ans ++ ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "set a [ i ] [ j ] to 2",
      "code": "a [ i ] [ j ] = 2 ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 29,
      "text": "for j = 0 to c exclusive",
      "code": "for ( j = 0 ; j < c ; j ++ )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "set value of flag to 0",
      "code": "flag = 0 ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "for i = 0 to r exclusive",
      "code": "for ( i = 0 ; i < r ; i ++ )",
      "indent": 2
    },
    {
      "line": 32,
      "text": "if a [ i ] [ j ] = 1 , set flag to 1",
      "code": "if ( a [ i ] [ j ] == 1 ) flag = 1 ;",
      "indent": 3
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 34,
      "text": "if flag = 0",
      "code": "if ( flag == 0 )",
      "indent": 2
    },
    {
      "line": 35,
      "text": "for i = 0 to r exclusive",
      "code": "for ( i = 0 ; i < r ; i ++ )",
      "indent": 3
    },
    {
      "line": 36,
      "text": "if a [ i ] [ j ] = 0 , increment ans",
      "code": "if ( a [ i ] [ j ] == 0 ) ans ++ ;",
      "indent": 4
    },
    {
      "line": 37,
      "text": "a [ i ] [ j ] = 2",
      "code": "a [ i ] [ j ] = 2 ;",
      "indent": 4
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 41,
      "text": "print ans and a new line",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( cin >> r >> c )"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "char s [ 1000 ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "string i , j ;"
      ],
      "err_line": 7,
      "err_msg": "ambiguous overload for ‘operator=’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int a ( a , sizeof ( a ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "a [ ' i ' ] = 2 ;"
      ],
      "err_line": 25,
      "err_msg": "incompatible types in assignment of ‘int’ to ‘int [1005]’"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "* flag = 0 ;"
      ],
      "err_line": 30,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        36,
        30
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "* flag = 0 ;"
      ],
      "err_line": 30,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        36,
        30,
        5
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "* flag = 0 ;",
        "char s [ 1000 ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        36,
        30,
        5,
        8
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "* flag = 0 ;",
        "char s [ 1000 ] ;",
        "int a ( a , sizeof ( a ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        36,
        30,
        5,
        4
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "* flag = 0 ;",
        "char s [ 1000 ] ;",
        "while ( cin >> r >> c )"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        36,
        30,
        5,
        9
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "* flag = 0 ;",
        "char s [ 1000 ] ;",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        36,
        30,
        8
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "* flag = 0 ;",
        "int a ( a , sizeof ( a ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        36,
        30,
        8,
        4
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "* flag = 0 ;",
        "int a ( a , sizeof ( a ) ) ;",
        "while ( cin >> r >> c )"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        36,
        30,
        8,
        9
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "* flag = 0 ;",
        "int a ( a , sizeof ( a ) ) ;",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        36,
        30,
        4
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "* flag = 0 ;",
        "while ( cin >> r >> c )"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        36,
        30,
        4,
        9
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "* flag = 0 ;",
        "while ( cin >> r >> c )",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        36,
        30,
        9
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "* flag = 0 ;",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        36,
        5
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "char s [ 1000 ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        36,
        5,
        8
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "char s [ 1000 ] ;",
        "int a ( a , sizeof ( a ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        36,
        5,
        8,
        4
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "char s [ 1000 ] ;",
        "int a ( a , sizeof ( a ) ) ;",
        "while ( cin >> r >> c )"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        36,
        5,
        8,
        9
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "char s [ 1000 ] ;",
        "int a ( a , sizeof ( a ) ) ;",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        36,
        5,
        4
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "char s [ 1000 ] ;",
        "while ( cin >> r >> c )"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        36,
        5,
        4,
        9
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "char s [ 1000 ] ;",
        "while ( cin >> r >> c )",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        36,
        5,
        9
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "char s [ 1000 ] ;",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        36,
        8
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "int a ( a , sizeof ( a ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        36,
        8,
        4
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "int a ( a , sizeof ( a ) ) ;",
        "while ( cin >> r >> c )"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        36,
        8,
        4,
        9
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "int a ( a , sizeof ( a ) ) ;",
        "while ( cin >> r >> c )",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        36,
        8,
        9
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "int a ( a , sizeof ( a ) ) ;",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        36,
        4
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "while ( cin >> r >> c )"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        36,
        4,
        9
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "while ( cin >> r >> c )",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        36,
        9
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' 0 ' ) ans ++ ;",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        5
      ],
      "mod_code": [
        "* flag = 0 ;",
        "char s [ 1000 ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        30,
        5,
        8
      ],
      "mod_code": [
        "* flag = 0 ;",
        "char s [ 1000 ] ;",
        "int a ( a , sizeof ( a ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        5,
        8,
        4
      ],
      "mod_code": [
        "* flag = 0 ;",
        "char s [ 1000 ] ;",
        "int a ( a , sizeof ( a ) ) ;",
        "while ( cin >> r >> c )"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        5,
        8,
        9
      ],
      "mod_code": [
        "* flag = 0 ;",
        "char s [ 1000 ] ;",
        "int a ( a , sizeof ( a ) ) ;",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        5,
        4
      ],
      "mod_code": [
        "* flag = 0 ;",
        "char s [ 1000 ] ;",
        "while ( cin >> r >> c )"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        5,
        4,
        9
      ],
      "mod_code": [
        "* flag = 0 ;",
        "char s [ 1000 ] ;",
        "while ( cin >> r >> c )",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        5,
        9
      ],
      "mod_code": [
        "* flag = 0 ;",
        "char s [ 1000 ] ;",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        8
      ],
      "mod_code": [
        "* flag = 0 ;",
        "int a ( a , sizeof ( a ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        8,
        4
      ],
      "mod_code": [
        "* flag = 0 ;",
        "int a ( a , sizeof ( a ) ) ;",
        "while ( cin >> r >> c )"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        8,
        4,
        9
      ],
      "mod_code": [
        "* flag = 0 ;",
        "int a ( a , sizeof ( a ) ) ;",
        "while ( cin >> r >> c )",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        8,
        9
      ],
      "mod_code": [
        "* flag = 0 ;",
        "int a ( a , sizeof ( a ) ) ;",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        30,
        4
      ],
      "mod_code": [
        "* flag = 0 ;",
        "while ( cin >> r >> c )"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        4,
        9
      ],
      "mod_code": [
        "* flag = 0 ;",
        "while ( cin >> r >> c )",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        30,
        9
      ],
      "mod_code": [
        "* flag = 0 ;",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "char s [ 1000 ] ;",
        "int a ( a , sizeof ( a ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        8,
        4
      ],
      "mod_code": [
        "char s [ 1000 ] ;",
        "int a ( a , sizeof ( a ) ) ;",
        "while ( cin >> r >> c )"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        4,
        9
      ],
      "mod_code": [
        "char s [ 1000 ] ;",
        "int a ( a , sizeof ( a ) ) ;",
        "while ( cin >> r >> c )",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        9
      ],
      "mod_code": [
        "char s [ 1000 ] ;",
        "int a ( a , sizeof ( a ) ) ;",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "char s [ 1000 ] ;",
        "while ( cin >> r >> c )"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        4,
        9
      ],
      "mod_code": [
        "char s [ 1000 ] ;",
        "while ( cin >> r >> c )",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "char s [ 1000 ] ;",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "int a ( a , sizeof ( a ) ) ;",
        "while ( cin >> r >> c )"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        4,
        9
      ],
      "mod_code": [
        "int a ( a , sizeof ( a ) ) ;",
        "while ( cin >> r >> c )",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "int a ( a , sizeof ( a ) ) ;",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "while ( cin >> r >> c )",
        "int memset ( vis , 0 , sizeof ( vis ) ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘s’ was not declared in this scope"
    }
  ]
}