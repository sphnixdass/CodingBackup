{
  "meta": {
    "index": 2157,
    "hitid": "32204AGAAB6DX9GV3EB0IC9ZDEKHGT",
    "workerid": "A1APYLD4DUK33J",
    "probid": "330A",
    "subid": "49097335"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers m , n",
      "code": "int m , n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read m read n",
      "code": "cin >> m >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create 2d character arrays a , b , with a size 100 by 100 , b size 100 by 100",
      "code": "char a [ 100 ] [ 100 ] , b [ 100 ] [ 100 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integers i , j",
      "code": "int i , j ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read character",
      "code": "cin . get ( ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to m exclusive",
      "code": "for ( i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for j = 0 to n exclusive",
      "code": "for ( j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set a [ i ] [ j ] to read character",
      "code": "a [ i ] [ j ] = cin . get ( ) ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "set b [ i ] [ j ] to a [ i ] [ j ]",
      "code": "b [ i ] [ j ] = a [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "read character",
      "code": "cin . get ( ) ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "create integer sum1 with sum1 = 0",
      "code": "int sum1 = 0 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "create integer sum2 with sum2 = 0",
      "code": "int sum2 = 0 ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "create integer sum with sum = 0",
      "code": "int sum = 0 ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for i = 0 to m exclusive",
      "code": "for ( i = 0 ; i < m ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "set sum1 to 0",
      "code": "sum1 = 0 ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "for j = 0 to n exclusive",
      "code": "for ( j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if a [ i ] [ j ] is ' . '",
      "code": "if ( a [ i ] [ j ] == ' . ' )",
      "indent": 3
    },
    {
      "line": 20,
      "text": "increment sum",
      "code": "sum1 ++ ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "set a [ i ] [ j ] to ' 0 '",
      "code": "a [ i ] [ j ] = ' 0 ' ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 23,
      "text": "set sum1 to 0",
      "code": "sum1 = 0 ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 26,
      "text": "if sum1 is 0",
      "code": "if ( sum1 == 0 )",
      "indent": 2
    },
    {
      "line": 27,
      "text": "for j = 0 to n exclusive , set a [ i ] [ j ] to b [ i ] [ j ]",
      "code": "for ( j = 0 ; j < n ; j ++ ) a [ i ] [ j ] = b [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "increment sum by sum1",
      "code": "sum += sum1 ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "for j = 0 to n exclusive",
      "code": "for ( j = 0 ; j < n ; j ++ )",
      "indent": 1
    },
    {
      "line": 31,
      "text": "set sum2 with 0",
      "code": "sum2 = 0 ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "for i = 0 to m exclusive",
      "code": "for ( i = 0 ; i < m ; i ++ )",
      "indent": 2
    },
    {
      "line": 33,
      "text": "if b [ i ] [ j ] is ' . '",
      "code": "if ( b [ i ] [ j ] == ' . ' )",
      "indent": 3
    },
    {
      "line": 34,
      "text": "if a [ i ] [ j ] is ' . ' , increment sum2",
      "code": "if ( a [ i ] [ j ] == ' . ' ) sum2 ++ ;",
      "indent": 4
    },
    {
      "line": 35,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 36,
      "text": "set sum2 to 0",
      "code": "sum2 = 0 ;",
      "indent": 4
    },
    {
      "line": 37,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 39,
      "text": "increment sum by sum2",
      "code": "sum += sum2 ;",
      "indent": 2
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 41,
      "text": "print sum print newline",
      "code": "cout << sum << endl ;",
      "indent": 1
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 43,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int i , j"
      ],
      "err_line": 5,
      "err_msg": "expected initializer before ‘cin’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "a [ i ] [ j ] = \" 0 ' ;"
      ],
      "err_line": 21,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 25,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 39,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        37
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        37
      ],
      "mod_code": [
        "sum ++ ;",
        "do"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        37,
        19
      ],
      "mod_code": [
        "sum ++ ;",
        "do",
        "if ( ! a [ i ] [ j ] == ' . ' )"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        37,
        19,
        8
      ],
      "mod_code": [
        "sum ++ ;",
        "do",
        "if ( ! a [ i ] [ j ] == ' . ' )",
        "a [ i ] [ j ] = ' read ' ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        37,
        19,
        23
      ],
      "mod_code": [
        "sum ++ ;",
        "do",
        "if ( ! a [ i ] [ j ] == ' . ' )",
        "int sum1 = 0 ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        37,
        19,
        9
      ],
      "mod_code": [
        "sum ++ ;",
        "do",
        "if ( ! a [ i ] [ j ] == ' . ' )",
        "b [ i ] [ j ] = ! a [ i ] [ j ] ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        37,
        8
      ],
      "mod_code": [
        "sum ++ ;",
        "do",
        "a [ i ] [ j ] = ' read ' ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        37,
        8,
        23
      ],
      "mod_code": [
        "sum ++ ;",
        "do",
        "a [ i ] [ j ] = ' read ' ;",
        "int sum1 = 0 ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        37,
        8,
        9
      ],
      "mod_code": [
        "sum ++ ;",
        "do",
        "a [ i ] [ j ] = ' read ' ;",
        "b [ i ] [ j ] = ! a [ i ] [ j ] ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        37,
        23
      ],
      "mod_code": [
        "sum ++ ;",
        "do",
        "int sum1 = 0 ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        37,
        23,
        9
      ],
      "mod_code": [
        "sum ++ ;",
        "do",
        "int sum1 = 0 ;",
        "b [ i ] [ j ] = ! a [ i ] [ j ] ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        37,
        9
      ],
      "mod_code": [
        "sum ++ ;",
        "do",
        "b [ i ] [ j ] = ! a [ i ] [ j ] ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        19
      ],
      "mod_code": [
        "do",
        "if ( ! a [ i ] [ j ] == ' . ' )"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        19,
        8
      ],
      "mod_code": [
        "do",
        "if ( ! a [ i ] [ j ] == ' . ' )",
        "a [ i ] [ j ] = ' read ' ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        19,
        8,
        23
      ],
      "mod_code": [
        "do",
        "if ( ! a [ i ] [ j ] == ' . ' )",
        "a [ i ] [ j ] = ' read ' ;",
        "int sum1 = 0 ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        19,
        8,
        9
      ],
      "mod_code": [
        "do",
        "if ( ! a [ i ] [ j ] == ' . ' )",
        "a [ i ] [ j ] = ' read ' ;",
        "b [ i ] [ j ] = ! a [ i ] [ j ] ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        19,
        23
      ],
      "mod_code": [
        "do",
        "if ( ! a [ i ] [ j ] == ' . ' )",
        "int sum1 = 0 ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        19,
        23,
        9
      ],
      "mod_code": [
        "do",
        "if ( ! a [ i ] [ j ] == ' . ' )",
        "int sum1 = 0 ;",
        "b [ i ] [ j ] = ! a [ i ] [ j ] ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        19,
        9
      ],
      "mod_code": [
        "do",
        "if ( ! a [ i ] [ j ] == ' . ' )",
        "b [ i ] [ j ] = ! a [ i ] [ j ] ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        8
      ],
      "mod_code": [
        "do",
        "a [ i ] [ j ] = ' read ' ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        8,
        23
      ],
      "mod_code": [
        "do",
        "a [ i ] [ j ] = ' read ' ;",
        "int sum1 = 0 ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        8,
        23,
        9
      ],
      "mod_code": [
        "do",
        "a [ i ] [ j ] = ' read ' ;",
        "int sum1 = 0 ;",
        "b [ i ] [ j ] = ! a [ i ] [ j ] ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        8,
        9
      ],
      "mod_code": [
        "do",
        "a [ i ] [ j ] = ' read ' ;",
        "b [ i ] [ j ] = ! a [ i ] [ j ] ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        23
      ],
      "mod_code": [
        "do",
        "int sum1 = 0 ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        23,
        9
      ],
      "mod_code": [
        "do",
        "int sum1 = 0 ;",
        "b [ i ] [ j ] = ! a [ i ] [ j ] ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        9
      ],
      "mod_code": [
        "do",
        "b [ i ] [ j ] = ! a [ i ] [ j ] ;"
      ],
      "err_line": 38,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}