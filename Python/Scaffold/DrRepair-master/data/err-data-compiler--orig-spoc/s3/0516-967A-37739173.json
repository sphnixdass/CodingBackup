{
  "meta": {
    "index": 516,
    "hitid": "3WKGUBL7SZGZ7P61ZYOX1F535DML4U",
    "workerid": "AIWEXPJAU66D9",
    "probid": "967A",
    "subid": "37739173"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , s , ansh and ansm be integers with ansh and ansm = - 1",
      "code": "int n , s , ansh = - 1 , ansm = - 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create an arrays of ints hh and mm with size 105",
      "code": "int hh [ 105 ] , mm [ 105 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read input to n and s",
      "code": "cin >> n >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set hh [ 0 ] to 0",
      "code": "hh [ 0 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "assign the new value = 0 to mm [ 0 ]",
      "code": "mm [ 0 ] = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read n elements into hh and mm , starting from the index 1",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) { cin >> hh [ i ] >> mm [ i ] ; }",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if hh [ 1 ] * 60 + mm [ 1 ] > = s + 1",
      "code": "if ( hh [ 1 ] * 60 + mm [ 1 ] >= s + 1 )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set ansh to 0",
      "code": "ansh = 0 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "change ansm to 0",
      "code": "ansm = 0 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 11,
      "text": "start for loop from i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if ( hh [ i ] - hh [ i - 1 ] ) * 60 + mm [ i ] - mm [ i - 1 ] - 2 > = s * 2",
      "code": "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 + mm [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "change the value of ansh to hh [ i - 1 ] + ( ( s + 1 ) / 60 )",
      "code": "ansh = hh [ i - 1 ] + ( ( s + 1 ) / 60 ) ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "assign the new value = mm [ i - 1 ] + ( ( s + 1 ) modulo 60 ) to ansm",
      "code": "ansm = mm [ i - 1 ] + ( ( s + 1 ) % 60 ) ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "while ansm > 59",
      "code": "while ( ansm > 59 )",
      "indent": 4
    },
    {
      "line": 16,
      "text": "decrease ansm by 60",
      "code": "ansm -= 60 ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "increment ansh",
      "code": "ansh ++ ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 19,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if ansh = - 1",
      "code": "if ( ansh == - 1 )",
      "indent": 2
    },
    {
      "line": 23,
      "text": "change ansh to hh [ n ] + ( ( s + 1 ) / 60 )",
      "code": "ansh = hh [ n ] + ( ( s + 1 ) / 60 ) ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "assign the new value = mm [ n ] + ( ( s + 1 ) modulo 60 ) to ansm",
      "code": "ansm = mm [ n ] + ( ( s + 1 ) % 60 ) ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "while ansm > 59",
      "code": "while ( ansm > 59 )",
      "indent": 3
    },
    {
      "line": 26,
      "text": "change ansm to ansm - 60",
      "code": "ansm -= 60 ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "increment ansh by one",
      "code": "ansh ++ ;",
      "indent": 4
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "print ansh , \" \" and ansm",
      "code": "cout << ansh << \" \" << ansm << endl ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int hh [ 105 ] , hh [ 105 ] ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int hh [105]’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "C [ 0 ] = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘C’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 31,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "ansh [ i - 1 ] + ( ( s + 1 ) / 60 ) ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "stop ;"
      ],
      "err_line": 19,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "ansh += ( ( s + ( ( s + 1 ) / 60 ) ) ;"
      ],
      "err_line": 23,
      "err_msg": "expected ‘)’ before ‘;’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> hh [ i ] ;",
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        7,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> hh [ i ] ;",
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        7,
        12,
        15
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> hh [ i ] ;",
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( ansm -- )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        7,
        12,
        25
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> hh [ i ] ;",
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( ansm -- )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        7,
        12,
        3
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> hh [ i ] ;",
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( cin >> n >> s )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        7,
        15
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> hh [ i ] ;",
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "while ( ansm -- )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        7,
        15,
        25
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> hh [ i ] ;",
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "while ( ansm -- )",
        "while ( ansm -- )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        7,
        15,
        3
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> hh [ i ] ;",
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "while ( ansm -- )",
        "while ( cin >> n >> s )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        7,
        25
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> hh [ i ] ;",
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "while ( ansm -- )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        7,
        25,
        3
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> hh [ i ] ;",
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "while ( ansm -- )",
        "while ( cin >> n >> s )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        7,
        3
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> hh [ i ] ;",
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "while ( cin >> n >> s )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> hh [ i ] ;",
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        15
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> hh [ i ] ;",
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( ansm -- )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        15,
        25
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> hh [ i ] ;",
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( ansm -- )",
        "while ( ansm -- )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        15,
        3
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> hh [ i ] ;",
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( ansm -- )",
        "while ( cin >> n >> s )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        25
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> hh [ i ] ;",
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( ansm -- )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        25,
        3
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> hh [ i ] ;",
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( ansm -- )",
        "while ( cin >> n >> s )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        12,
        3
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ ) cin >> hh [ i ] ;",
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( cin >> n >> s )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        12,
        15
      ],
      "mod_code": [
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( ansm -- )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        12,
        15,
        25
      ],
      "mod_code": [
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( ansm -- )",
        "while ( ansm -- )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        12,
        15,
        3
      ],
      "mod_code": [
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( ansm -- )",
        "while ( cin >> n >> s )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        12,
        25
      ],
      "mod_code": [
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( ansm -- )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        12,
        25,
        3
      ],
      "mod_code": [
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( ansm -- )",
        "while ( cin >> n >> s )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        12,
        3
      ],
      "mod_code": [
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( cin >> n >> s )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15
      ],
      "mod_code": [
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "while ( ansm -- )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        25
      ],
      "mod_code": [
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "while ( ansm -- )",
        "while ( ansm -- )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        25,
        3
      ],
      "mod_code": [
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "while ( ansm -- )",
        "while ( ansm -- )",
        "while ( cin >> n >> s )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        15,
        3
      ],
      "mod_code": [
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "while ( ansm -- )",
        "while ( cin >> n >> s )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        25
      ],
      "mod_code": [
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "while ( ansm -- )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        25,
        3
      ],
      "mod_code": [
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "while ( ansm -- )",
        "while ( cin >> n >> s )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "if ( hh [ 1 ] * 60 [ 1 ] >= s + 1 )",
        "while ( cin >> n >> s )"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        15
      ],
      "mod_code": [
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( ansm -- )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        15,
        25
      ],
      "mod_code": [
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( ansm -- )",
        "while ( ansm -- )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        15,
        25,
        3
      ],
      "mod_code": [
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( ansm -- )",
        "while ( ansm -- )",
        "while ( cin >> n >> s )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        15,
        3
      ],
      "mod_code": [
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( ansm -- )",
        "while ( cin >> n >> s )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        25
      ],
      "mod_code": [
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( ansm -- )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        25,
        3
      ],
      "mod_code": [
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( ansm -- )",
        "while ( cin >> n >> s )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        3
      ],
      "mod_code": [
        "if ( ( hh [ i ] - hh [ i - 1 ] ) * 60 [ i ] - mm [ i - 1 ] - 2 >= s * 2 )",
        "while ( cin >> n >> s )"
      ],
      "err_line": 12,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}