{
  "meta": {
    "index": 804,
    "hitid": "3K8CQCU3KEV14RS6LHAV9ZSJU1CNWB",
    "workerid": "A1APYLD4DUK33J",
    "probid": "81A",
    "subid": "47278345"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant integer N with N = 1e5 + 5",
      "code": "const int N = 1e5 + 5 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create constant integer inf with inf = 1e9",
      "code": "const int inf = 1e9 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create constant long long INF with INF = 1e18",
      "code": "const long long INF = 1e18 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create constant double PI with PI = acosign of - 1 . 0",
      "code": "const double PI = acos ( - 1.0 ) ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "create constant double EPS with EPS = 1e - 8",
      "code": "const double EPS = 1e-8 ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "create constant integer MOD with MOD = 1000000007",
      "code": "const int MOD = 1000000007 ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 7,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "create character stack st",
      "code": "stack < char > st ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to size of s exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if st is empty",
      "code": "if ( st . empty ( ) )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "add element s [ i ] to top of st",
      "code": "st . push ( s [ i ] ) ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if st is not empty and top of st is s [ i ]",
      "code": "if ( ! st . empty ( ) && st . top ( ) == s [ i ] )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "while st is not empty and top of st is s [ i ] , remove top of st",
      "code": "while ( ! st . empty ( ) && st . top ( ) == s [ i ] ) st . pop ( ) ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 17,
      "text": "add element s [ i ] to top of st",
      "code": "st . push ( s [ i ] ) ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "create string ans with ans = \" \"",
      "code": "string ans = \" \" ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "while st is not emtpy , increment and by top of st , remove top element from st",
      "code": "while ( ! st . empty ( ) ) ans += st . top ( ) , st . pop ( ) ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "reverse element order from beginning of and to end of ans",
      "code": "reverse ( ans . begin ( ) , ans . end ( ) ) ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "prnt ans print newline",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "while ( st != emtpy ) { st += st . top ( ) ; }"
      ],
      "err_line": 21,
      "err_msg": "‘emtpy’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 10,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "stack < stack < char > st ;"
      ],
      "err_line": 9,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "st . push_back ( s [ i ] ) ;"
      ],
      "err_line": 12,
      "err_msg": "‘class std::stack<char>’ has no member named ‘push_back’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "st . push_back ( s [ i ] ) ;"
      ],
      "err_line": 17,
      "err_msg": "‘class std::stack<char>’ has no member named ‘push_back’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "string ans = \" \""
      ],
      "err_line": 21,
      "err_msg": "expected ‘,’ or ‘;’ before ‘while’"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "while ( st != emtpy ) { st . push_back ( st . top ( ) ) ; }"
      ],
      "err_line": 21,
      "err_msg": "‘emtpy’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "no matching function for call to ‘reverse(std::__cxx11::basic_string<char>::reverse_iterator, std::__cxx11::basic_string<char>::iterator)’"
    },
    {
      "mod_line": [
        20,
        21
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "while ( st != emtpy ) { st += st . top ( ) ; }"
      ],
      "err_line": 21,
      "err_msg": "‘emtpy’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        21,
        8
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        21,
        8,
        14
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "s >> s ;",
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        21,
        8,
        13
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "s >> s ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        21,
        8,
        22
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "s >> s ;",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        21,
        14
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )"
      ],
      "err_line": 21,
      "err_msg": "‘emtpy’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        21,
        14,
        13
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        21,
        14,
        22
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘emtpy’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        21,
        13
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        21,
        13,
        22
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "do",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        21,
        22
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘emtpy’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        8
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        8,
        14
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "s >> s ;",
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        8,
        14,
        13
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "s >> s ;",
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )",
        "do"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        8,
        14,
        22
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "s >> s ;",
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        8,
        13
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "s >> s ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        8,
        13,
        22
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "s >> s ;",
        "do",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        8,
        22
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "s >> s ;",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        20,
        14,
        13
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        14,
        13,
        22
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )",
        "do",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        14,
        22
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "no matching function for call to ‘reverse(std::__cxx11::basic_string<char>::reverse_iterator, std::__cxx11::basic_string<char>::iterator)’"
    },
    {
      "mod_line": [
        20,
        13
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        13,
        22
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "do",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        22
      ],
      "mod_code": [
        "string ans = \" \" ;",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "no matching function for call to ‘reverse(std::__cxx11::basic_string<char>::reverse_iterator, std::__cxx11::basic_string<char>::iterator)’"
    },
    {
      "mod_line": [
        21,
        8
      ],
      "mod_code": [
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        8,
        14
      ],
      "mod_code": [
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "s >> s ;",
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        8,
        14,
        13
      ],
      "mod_code": [
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "s >> s ;",
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )",
        "do"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        8,
        14,
        22
      ],
      "mod_code": [
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "s >> s ;",
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        8,
        13
      ],
      "mod_code": [
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "s >> s ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        8,
        13,
        22
      ],
      "mod_code": [
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "s >> s ;",
        "do",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        8,
        22
      ],
      "mod_code": [
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "s >> s ;",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        14
      ],
      "mod_code": [
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )"
      ],
      "err_line": 21,
      "err_msg": "‘emtpy’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        14,
        13
      ],
      "mod_code": [
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        14,
        13,
        22
      ],
      "mod_code": [
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )",
        "do",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        14,
        22
      ],
      "mod_code": [
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘emtpy’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        13
      ],
      "mod_code": [
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        13,
        22
      ],
      "mod_code": [
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "do",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        22
      ],
      "mod_code": [
        "while ( st != emtpy ) { st += st . top ( ) ; }",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘emtpy’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "s >> s ;",
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        14,
        13
      ],
      "mod_code": [
        "s >> s ;",
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )",
        "do"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        14,
        13,
        22
      ],
      "mod_code": [
        "s >> s ;",
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )",
        "do",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        14,
        22
      ],
      "mod_code": [
        "s >> s ;",
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "s >> s ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        13,
        22
      ],
      "mod_code": [
        "s >> s ;",
        "do",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        22
      ],
      "mod_code": [
        "s >> s ;",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        13
      ],
      "mod_code": [
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        13,
        22
      ],
      "mod_code": [
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )",
        "do",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        22
      ],
      "mod_code": [
        "if ( st . empty ( ) && st . top ( ) == s [ i ] )",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 22,
      "err_msg": "no matching function for call to ‘reverse(std::__cxx11::basic_string<char>::reverse_iterator, std::__cxx11::basic_string<char>::iterator)’"
    },
    {
      "mod_line": [
        13,
        22
      ],
      "mod_code": [
        "do",
        "reverse ( ans . rbegin ( ) , ans . end ( ) ) ;"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}