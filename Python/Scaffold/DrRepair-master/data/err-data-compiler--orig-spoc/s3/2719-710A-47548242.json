{
  "meta": {
    "index": 2719,
    "hitid": "3XT3KXP24ZSBWB29XJKZ6XXPK0V6IJ",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "710A",
    "subid": "47548242"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "str = string",
      "code": "string str ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "x = int with x = str [ 0 ] - ' a '",
      "code": "int x = str [ 0 ] - ' a ' ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "y = int with y = str [ 1 ] - ' 0 ' - 1",
      "code": "int y = str [ 1 ] - ' 0 ' - 1 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if ( x is 0 or 7 ) and ( y is 0 or 7 )",
      "code": "if ( ( x == 0 || x == 7 ) && ( y == 0 || y == 7 ) )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print \" 3 \"",
      "code": "cout << \" 3\\n \" ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else if x is 0 or 7 or y is 0 or 7",
      "code": "else if ( x == 0 || x == 7 || y == 0 || y == 7 )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print \" 5 \"",
      "code": "cout << \" 5\\n \" ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print \" 8 \"",
      "code": "cout << \" 8\\n \" ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char str ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int x = str [ 0 ] - \" a ' ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        5,
        6,
        10,
        2
      ],
      "mod_code": [
        "if ( x == 0 || ( y == 0 || y == 0 || 7 ) )",
        "cout << \" 3 \" ;",
        "cout << \" 8 \" ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        6,
        10,
        3
      ],
      "mod_code": [
        "if ( x == 0 || ( y == 0 || y == 0 || 7 ) )",
        "cout << \" 3 \" ;",
        "cout << \" 8 \" ;",
        "int x = str [ 0 ] - \" a ' ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        6,
        2
      ],
      "mod_code": [
        "if ( x == 0 || ( y == 0 || y == 0 || 7 ) )",
        "cout << \" 3 \" ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        6,
        2,
        3
      ],
      "mod_code": [
        "if ( x == 0 || ( y == 0 || y == 0 || 7 ) )",
        "cout << \" 3 \" ;",
        "gets ( str ) ;",
        "int x = str [ 0 ] - \" a ' ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        6,
        3
      ],
      "mod_code": [
        "if ( x == 0 || ( y == 0 || y == 0 || 7 ) )",
        "cout << \" 3 \" ;",
        "int x = str [ 0 ] - \" a ' ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        10,
        2
      ],
      "mod_code": [
        "if ( x == 0 || ( y == 0 || y == 0 || 7 ) )",
        "cout << \" 8 \" ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        10,
        2,
        3
      ],
      "mod_code": [
        "if ( x == 0 || ( y == 0 || y == 0 || 7 ) )",
        "cout << \" 8 \" ;",
        "gets ( str ) ;",
        "int x = str [ 0 ] - \" a ' ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        10,
        2,
        6
      ],
      "mod_code": [
        "if ( x == 0 || ( y == 0 || y == 0 || 7 ) )",
        "cout << \" 8 \" ;",
        "gets ( str ) ;",
        "cout << \" 0\\n \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        10,
        3
      ],
      "mod_code": [
        "if ( x == 0 || ( y == 0 || y == 0 || 7 ) )",
        "cout << \" 8 \" ;",
        "int x = str [ 0 ] - \" a ' ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        10,
        3,
        6
      ],
      "mod_code": [
        "if ( x == 0 || ( y == 0 || y == 0 || 7 ) )",
        "cout << \" 8 \" ;",
        "int x = str [ 0 ] - \" a ' ;",
        "cout << \" 0\\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "if ( x == 0 || ( y == 0 || y == 0 || 7 ) )",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        2,
        3
      ],
      "mod_code": [
        "if ( x == 0 || ( y == 0 || y == 0 || 7 ) )",
        "gets ( str ) ;",
        "int x = str [ 0 ] - \" a ' ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        2,
        3,
        6
      ],
      "mod_code": [
        "if ( x == 0 || ( y == 0 || y == 0 || 7 ) )",
        "gets ( str ) ;",
        "int x = str [ 0 ] - \" a ' ;",
        "cout << \" 0\\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        2,
        6
      ],
      "mod_code": [
        "if ( x == 0 || ( y == 0 || y == 0 || 7 ) )",
        "gets ( str ) ;",
        "cout << \" 0\\n \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "if ( x == 0 || ( y == 0 || y == 0 || 7 ) )",
        "int x = str [ 0 ] - \" a ' ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        3,
        6
      ],
      "mod_code": [
        "if ( x == 0 || ( y == 0 || y == 0 || 7 ) )",
        "int x = str [ 0 ] - \" a ' ;",
        "cout << \" 0\\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        10,
        2
      ],
      "mod_code": [
        "cout << \" 3 \" ;",
        "cout << \" 8 \" ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        10,
        2,
        3
      ],
      "mod_code": [
        "cout << \" 3 \" ;",
        "cout << \" 8 \" ;",
        "gets ( str ) ;",
        "int x = str [ 0 ] - \" a ' ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        10,
        3
      ],
      "mod_code": [
        "cout << \" 3 \" ;",
        "cout << \" 8 \" ;",
        "int x = str [ 0 ] - \" a ' ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "cout << \" 3 \" ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6,
        2,
        3
      ],
      "mod_code": [
        "cout << \" 3 \" ;",
        "gets ( str ) ;",
        "int x = str [ 0 ] - \" a ' ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "cout << \" 3 \" ;",
        "int x = str [ 0 ] - \" a ' ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "cout << \" 8 \" ;",
        "gets ( str ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        2,
        3
      ],
      "mod_code": [
        "cout << \" 8 \" ;",
        "gets ( str ) ;",
        "int x = str [ 0 ] - \" a ' ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        2,
        3,
        6
      ],
      "mod_code": [
        "cout << \" 8 \" ;",
        "gets ( str ) ;",
        "int x = str [ 0 ] - \" a ' ;",
        "cout << \" 0\\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        2,
        6
      ],
      "mod_code": [
        "cout << \" 8 \" ;",
        "gets ( str ) ;",
        "cout << \" 0\\n \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "cout << \" 8 \" ;",
        "int x = str [ 0 ] - \" a ' ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        3,
        6
      ],
      "mod_code": [
        "cout << \" 8 \" ;",
        "int x = str [ 0 ] - \" a ' ;",
        "cout << \" 0\\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "gets ( str ) ;",
        "int x = str [ 0 ] - \" a ' ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        3,
        6
      ],
      "mod_code": [
        "gets ( str ) ;",
        "int x = str [ 0 ] - \" a ' ;",
        "cout << \" 0\\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "gets ( str ) ;",
        "cout << \" 0\\n \" ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "int x = str [ 0 ] - \" a ' ;",
        "cout << \" 0\\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "missing terminating \" character"
    }
  ]
}