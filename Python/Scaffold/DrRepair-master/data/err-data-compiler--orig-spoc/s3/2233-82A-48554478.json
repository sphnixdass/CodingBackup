{
  "meta": {
    "index": 2233,
    "hitid": "374UMBUHN5JQL6RL1MW664R8R3JTCC",
    "workerid": "A1APYLD4DUK33J",
    "probid": "82A",
    "subid": "48554478"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers i , j , m , n , temp = 0",
      "code": "int i , j , m , n , temp = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare string array a with size 5 = { \" Sheldon \" , \" Leonard \" , \" Penny \" , \" Rajesh \" , \" Howard \" }",
      "code": "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Penny \" , \" Rajesh \" , \" Howard \" } ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if n is greater than 5",
      "code": "if ( n > 5 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let temp be ( n / 2 - 2 )",
      "code": "temp = ( n / 2 - 2 ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "while temp is greater than 5 , let temp be ( temp / 2 - 2 )",
      "code": "while ( temp > 5 ) { temp = ( temp / 2 - 2 ) ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "let m be temp - 1",
      "code": "m = temp - 1 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "print a [ m ] , newline",
      "code": "cout << a [ m ] << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print a [ n - 1 ] , newline",
      "code": "cout << a [ n - 1 ] << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Penny \" , \" Rajesh \" , \" Howard \" } } ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int i , j , m , n , temp , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Leonard \" , \" Rajesh \" , \" Howard \" } } ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Penny \" , \" Rajesh \" , \" Howard \" } } ;",
        "int i , j , m , n , temp , 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        1,
        7
      ],
      "mod_code": [
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Penny \" , \" Rajesh \" , \" Howard \" } } ;",
        "int i , j , m , n , temp , 0 ;",
        "m -= 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        1,
        7,
        5
      ],
      "mod_code": [
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Penny \" , \" Rajesh \" , \" Howard \" } } ;",
        "int i , j , m , n , temp , 0 ;",
        "m -= 1 ;",
        "temp /= 2 - 2 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        1,
        7,
        9
      ],
      "mod_code": [
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Penny \" , \" Rajesh \" , \" Howard \" } } ;",
        "int i , j , m , n , temp , 0 ;",
        "m -= 1 ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        1,
        5
      ],
      "mod_code": [
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Penny \" , \" Rajesh \" , \" Howard \" } } ;",
        "int i , j , m , n , temp , 0 ;",
        "temp /= 2 - 2 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        1,
        5,
        9
      ],
      "mod_code": [
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Penny \" , \" Rajesh \" , \" Howard \" } } ;",
        "int i , j , m , n , temp , 0 ;",
        "temp /= 2 - 2 ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        1,
        9
      ],
      "mod_code": [
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Penny \" , \" Rajesh \" , \" Howard \" } } ;",
        "int i , j , m , n , temp , 0 ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Penny \" , \" Rajesh \" , \" Howard \" } } ;",
        "m -= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        7,
        5
      ],
      "mod_code": [
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Penny \" , \" Rajesh \" , \" Howard \" } } ;",
        "m -= 1 ;",
        "temp /= 2 - 2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        7,
        5,
        9
      ],
      "mod_code": [
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Penny \" , \" Rajesh \" , \" Howard \" } } ;",
        "m -= 1 ;",
        "temp /= 2 - 2 ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        7,
        9
      ],
      "mod_code": [
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Penny \" , \" Rajesh \" , \" Howard \" } } ;",
        "m -= 1 ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Penny \" , \" Rajesh \" , \" Howard \" } } ;",
        "temp /= 2 - 2 ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        5,
        9
      ],
      "mod_code": [
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Penny \" , \" Rajesh \" , \" Howard \" } } ;",
        "temp /= 2 - 2 ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Penny \" , \" Rajesh \" , \" Howard \" } } ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int i , j , m , n , temp , 0 ;",
        "m -= 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        7,
        5
      ],
      "mod_code": [
        "int i , j , m , n , temp , 0 ;",
        "m -= 1 ;",
        "temp /= 2 - 2 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        7,
        5,
        2
      ],
      "mod_code": [
        "int i , j , m , n , temp , 0 ;",
        "m -= 1 ;",
        "temp /= 2 - 2 ;",
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Leonard \" , \" Rajesh \" , \" Howard \" } } ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        7,
        5,
        9
      ],
      "mod_code": [
        "int i , j , m , n , temp , 0 ;",
        "m -= 1 ;",
        "temp /= 2 - 2 ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        7,
        2
      ],
      "mod_code": [
        "int i , j , m , n , temp , 0 ;",
        "m -= 1 ;",
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Leonard \" , \" Rajesh \" , \" Howard \" } } ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        7,
        2,
        9
      ],
      "mod_code": [
        "int i , j , m , n , temp , 0 ;",
        "m -= 1 ;",
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Leonard \" , \" Rajesh \" , \" Howard \" } } ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        7,
        9
      ],
      "mod_code": [
        "int i , j , m , n , temp , 0 ;",
        "m -= 1 ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int i , j , m , n , temp , 0 ;",
        "temp /= 2 - 2 ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        5,
        2
      ],
      "mod_code": [
        "int i , j , m , n , temp , 0 ;",
        "temp /= 2 - 2 ;",
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Leonard \" , \" Rajesh \" , \" Howard \" } } ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        5,
        2,
        9
      ],
      "mod_code": [
        "int i , j , m , n , temp , 0 ;",
        "temp /= 2 - 2 ;",
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Leonard \" , \" Rajesh \" , \" Howard \" } } ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        5,
        9
      ],
      "mod_code": [
        "int i , j , m , n , temp , 0 ;",
        "temp /= 2 - 2 ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int i , j , m , n , temp , 0 ;",
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Leonard \" , \" Rajesh \" , \" Howard \" } } ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        2,
        9
      ],
      "mod_code": [
        "int i , j , m , n , temp , 0 ;",
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Leonard \" , \" Rajesh \" , \" Howard \" } } ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        1,
        9
      ],
      "mod_code": [
        "int i , j , m , n , temp , 0 ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        7,
        5,
        2
      ],
      "mod_code": [
        "m -= 1 ;",
        "temp /= 2 - 2 ;",
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Leonard \" , \" Rajesh \" , \" Howard \" } } ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        5,
        2,
        9
      ],
      "mod_code": [
        "m -= 1 ;",
        "temp /= 2 - 2 ;",
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Leonard \" , \" Rajesh \" , \" Howard \" } } ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        5,
        9
      ],
      "mod_code": [
        "m -= 1 ;",
        "temp /= 2 - 2 ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "m -= 1 ;",
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Leonard \" , \" Rajesh \" , \" Howard \" } } ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        2,
        9
      ],
      "mod_code": [
        "m -= 1 ;",
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Leonard \" , \" Rajesh \" , \" Howard \" } } ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "m -= 1 ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "temp /= 2 - 2 ;",
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Leonard \" , \" Rajesh \" , \" Howard \" } } ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        2,
        9
      ],
      "mod_code": [
        "temp /= 2 - 2 ;",
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Leonard \" , \" Rajesh \" , \" Howard \" } } ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "temp /= 2 - 2 ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "string a [ 5 ] = { \" Sheldon \" , \" Leonard \" , \" Leonard \" , \" Rajesh \" , \" Howard \" } } ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    }
  ]
}