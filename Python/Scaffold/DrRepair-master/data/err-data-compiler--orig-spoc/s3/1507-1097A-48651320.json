{
  "meta": {
    "index": 1507,
    "hitid": "337F8MIIMZ7MATHFA52E3VDF2F440X",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1097A",
    "subid": "48651320"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare string cardOnTable",
      "code": "string cardOnTable ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read cardOnTable",
      "code": "cin >> cardOnTable ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare string array myCards with size 5",
      "code": "string myCards [ 5 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read 5 elements into myCards",
      "code": "for ( int i = 0 ; i < 5 ; i ++ ) { cin >> myCards [ i ] ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create bool win = false",
      "code": "bool win = false ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "declare integer variable i = 0",
      "code": "int i = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "while win is false and i < 5",
      "code": "while ( ( ! win ) && ( i < 5 ) )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if cardOnTable [ 0 ] = myCards [ i ] [ 0 ] or cardOnTable [ 1 ] = = myCards [ i ] [ 1 ] with incremented i , set win to true",
      "code": "if ( ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] ) || ( cardOnTable [ 1 ] == myCards [ i ++ ] [ 1 ] ) ) { win = true ; }",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print \" YES \" if win if true , or \" NO \" if it is false",
      "code": "cout << ( win ? \" YES \" : \" NO \" ) << endl ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool cardOnTable ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string myCards [ 5 ] [ 5 ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "i = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) win = true ;",
        "i = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        6,
        3
      ],
      "mod_code": [
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) win = true ;",
        "i = 0 ;",
        "string myCards [ 5 ] [ 5 ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        8,
        6,
        3,
        2
      ],
      "mod_code": [
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) win = true ;",
        "i = 0 ;",
        "string myCards [ 5 ] [ 5 ] ;",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        8,
        6,
        3,
        1
      ],
      "mod_code": [
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) win = true ;",
        "i = 0 ;",
        "string myCards [ 5 ] [ 5 ] ;",
        "bool cardOnTable ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        8,
        6,
        2
      ],
      "mod_code": [
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) win = true ;",
        "i = 0 ;",
        "cin . get ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        6,
        2,
        1
      ],
      "mod_code": [
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) win = true ;",
        "i = 0 ;",
        "cin . get ( ) ;",
        "bool cardOnTable ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        6,
        1
      ],
      "mod_code": [
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) win = true ;",
        "i = 0 ;",
        "bool cardOnTable ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) win = true ;",
        "string myCards [ 5 ] [ 5 ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        8,
        3,
        2
      ],
      "mod_code": [
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) win = true ;",
        "string myCards [ 5 ] [ 5 ] ;",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        8,
        3,
        2,
        1
      ],
      "mod_code": [
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) win = true ;",
        "string myCards [ 5 ] [ 5 ] ;",
        "cin . get ( ) ;",
        "bool cardOnTable ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        8,
        3,
        1
      ],
      "mod_code": [
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) win = true ;",
        "string myCards [ 5 ] [ 5 ] ;",
        "bool cardOnTable ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        8,
        2,
        1
      ],
      "mod_code": [
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) win = true ;",
        "cin . get ( ) ;",
        "bool cardOnTable ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) win = true ;",
        "bool cardOnTable ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "i = 0 ;",
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) { win = true ; }"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        3
      ],
      "mod_code": [
        "i = 0 ;",
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) { win = true ; }",
        "string myCards [ 5 ] [ 5 ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        6,
        8,
        3,
        2
      ],
      "mod_code": [
        "i = 0 ;",
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) { win = true ; }",
        "string myCards [ 5 ] [ 5 ] ;",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        6,
        8,
        3,
        1
      ],
      "mod_code": [
        "i = 0 ;",
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) { win = true ; }",
        "string myCards [ 5 ] [ 5 ] ;",
        "bool cardOnTable ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        6,
        8,
        2
      ],
      "mod_code": [
        "i = 0 ;",
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) { win = true ; }",
        "cin . get ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        2,
        1
      ],
      "mod_code": [
        "i = 0 ;",
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) { win = true ; }",
        "cin . get ( ) ;",
        "bool cardOnTable ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        1
      ],
      "mod_code": [
        "i = 0 ;",
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) { win = true ; }",
        "bool cardOnTable ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "i = 0 ;",
        "string myCards [ 5 ] [ 5 ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        6,
        3,
        2
      ],
      "mod_code": [
        "i = 0 ;",
        "string myCards [ 5 ] [ 5 ] ;",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        6,
        3,
        2,
        1
      ],
      "mod_code": [
        "i = 0 ;",
        "string myCards [ 5 ] [ 5 ] ;",
        "cin . get ( ) ;",
        "bool cardOnTable ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        6,
        3,
        1
      ],
      "mod_code": [
        "i = 0 ;",
        "string myCards [ 5 ] [ 5 ] ;",
        "bool cardOnTable ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "i = 0 ;",
        "cin . get ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        2,
        1
      ],
      "mod_code": [
        "i = 0 ;",
        "cin . get ( ) ;",
        "bool cardOnTable ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "i = 0 ;",
        "bool cardOnTable ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) { win = true ; }",
        "string myCards [ 5 ] [ 5 ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        8,
        3,
        2
      ],
      "mod_code": [
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) { win = true ; }",
        "string myCards [ 5 ] [ 5 ] ;",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        8,
        3,
        2,
        1
      ],
      "mod_code": [
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) { win = true ; }",
        "string myCards [ 5 ] [ 5 ] ;",
        "cin . get ( ) ;",
        "bool cardOnTable ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        8,
        3,
        1
      ],
      "mod_code": [
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) { win = true ; }",
        "string myCards [ 5 ] [ 5 ] ;",
        "bool cardOnTable ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        8,
        2,
        1
      ],
      "mod_code": [
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) { win = true ; }",
        "cin . get ( ) ;",
        "bool cardOnTable ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "if ( cardOnTable [ 0 ] == myCards [ i ] [ 0 ] || cardOnTable [ 1 ] == myCards [ i ] [ 1 ] ) { win = true ; }",
        "bool cardOnTable ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "string myCards [ 5 ] [ 5 ] ;",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        3,
        2,
        1
      ],
      "mod_code": [
        "string myCards [ 5 ] [ 5 ] ;",
        "cin . get ( ) ;",
        "bool cardOnTable ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "string myCards [ 5 ] [ 5 ] ;",
        "bool cardOnTable ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [5] {aka std::__cxx11::basic_string<char> [5]}’)"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "cin . get ( ) ;",
        "bool cardOnTable ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    }
  ]
}