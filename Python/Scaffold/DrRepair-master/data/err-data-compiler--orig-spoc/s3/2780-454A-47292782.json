{
  "meta": {
    "index": 2780,
    "hitid": "39RRBHZ0AUVI6R6KYVGTIKGEX6PZV1",
    "workerid": "AIWEXPJAU66D9",
    "probid": "454A",
    "subid": "47292782"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare new integer variables n and k where k = 1",
      "code": "int n , k = 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read variable n from the input",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i from 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if i is less than n / 2 + 1",
      "code": "if ( i < n / 2 + 1 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "start for loop from j = 1 to n inclusive",
      "code": "for ( int j = 1 ; j <= n ; j ++ )",
      "indent": 3
    },
    {
      "line": 6,
      "text": "if j < = ( n - i * 2 - 1 ) / 2",
      "code": "if ( j <= ( n - i * 2 - 1 ) / 2 )",
      "indent": 4
    },
    {
      "line": 7,
      "text": "print \" * \"",
      "code": "cout << \" * \" ;",
      "indent": 5
    },
    {
      "line": 8,
      "text": "else if j < = n / 2 + i + 1",
      "code": "else if ( j <= n / 2 + i + 1 )",
      "indent": 4
    },
    {
      "line": 9,
      "text": "print \" D \"",
      "code": "cout << \" D \" ;",
      "indent": 5
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 11,
      "text": "print \" * \"",
      "code": "cout << \" * \" ;",
      "indent": 5
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 15,
      "text": "change j in a loop from 1 to n inclusive",
      "code": "for ( int j = 1 ; j <= n ; j ++ )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "if j < = k",
      "code": "if ( j <= k )",
      "indent": 4
    },
    {
      "line": 17,
      "text": "print \" * \"",
      "code": "cout << \" * \" ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "else if j < = n - k",
      "code": "else if ( j <= n - k )",
      "indent": 4
    },
    {
      "line": 19,
      "text": "print \" D \" to the standard output",
      "code": "cout << \" D \" ;",
      "indent": 5
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 21,
      "text": "print \" * \"",
      "code": "cout << \" * \" ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 24,
      "text": "increment k by one",
      "code": "k ++ ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "print \" \\ n \"",
      "code": "cout << \" \\n \" ;",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "<< \" \\n \" ;"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "{ cin >> n ;"
      ],
      "err_line": 29,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cout << \" * \""
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "cout << \" * \""
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "else if ( j <= k )"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "cout << \" * \""
      ],
      "err_line": 18,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "cout << \" * \""
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        16
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "else if ( j <= k )"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        26,
        16,
        19
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "else if ( j <= k )",
        "puts ( \" D \" ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        26,
        16,
        19,
        11
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "else if ( j <= k )",
        "puts ( \" D \" ) ;",
        "cout << \" * \""
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        16,
        19,
        7
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "else if ( j <= k )",
        "puts ( \" D \" ) ;",
        "cout << \" * \""
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        16,
        19,
        6
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "else if ( j <= k )",
        "puts ( \" D \" ) ;",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        26,
        16,
        11
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "else if ( j <= k )",
        "cout << \" * \""
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        16,
        11,
        7
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "else if ( j <= k )",
        "cout << \" * \"",
        "cout << \" * \""
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        16,
        11,
        6
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "else if ( j <= k )",
        "cout << \" * \"",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        16,
        7
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "else if ( j <= k )",
        "cout << \" * \""
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        16,
        7,
        6
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "else if ( j <= k )",
        "cout << \" * \"",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        16,
        6
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "else if ( j <= k )",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        26,
        19
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "puts ( \" D \" ) ;"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        26,
        19,
        11
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "puts ( \" D \" ) ;",
        "cout << \" * \""
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        19,
        11,
        7
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "puts ( \" D \" ) ;",
        "cout << \" * \"",
        "cout << \" * \""
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        19,
        11,
        6
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "puts ( \" D \" ) ;",
        "cout << \" * \"",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        19,
        7
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "puts ( \" D \" ) ;",
        "cout << \" * \""
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        19,
        7,
        6
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "puts ( \" D \" ) ;",
        "cout << \" * \"",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        19,
        6
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "puts ( \" D \" ) ;",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        26,
        11
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "cout << \" * \""
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        11,
        7
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "cout << \" * \"",
        "cout << \" * \""
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        11,
        7,
        6
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "cout << \" * \"",
        "cout << \" * \"",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        11,
        6
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "cout << \" * \"",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        7
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "cout << \" * \""
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        7,
        6
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "cout << \" * \"",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        6
      ],
      "mod_code": [
        "<< \" \\n \" ;",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        16,
        19
      ],
      "mod_code": [
        "else if ( j <= k )",
        "puts ( \" D \" ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        16,
        19,
        11
      ],
      "mod_code": [
        "else if ( j <= k )",
        "puts ( \" D \" ) ;",
        "cout << \" * \""
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        19,
        11,
        7
      ],
      "mod_code": [
        "else if ( j <= k )",
        "puts ( \" D \" ) ;",
        "cout << \" * \"",
        "cout << \" * \""
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        19,
        11,
        6
      ],
      "mod_code": [
        "else if ( j <= k )",
        "puts ( \" D \" ) ;",
        "cout << \" * \"",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        19,
        7
      ],
      "mod_code": [
        "else if ( j <= k )",
        "puts ( \" D \" ) ;",
        "cout << \" * \""
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        19,
        7,
        6
      ],
      "mod_code": [
        "else if ( j <= k )",
        "puts ( \" D \" ) ;",
        "cout << \" * \"",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        19,
        6
      ],
      "mod_code": [
        "else if ( j <= k )",
        "puts ( \" D \" ) ;",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        16,
        11
      ],
      "mod_code": [
        "else if ( j <= k )",
        "cout << \" * \""
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        11,
        7
      ],
      "mod_code": [
        "else if ( j <= k )",
        "cout << \" * \"",
        "cout << \" * \""
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        11,
        7,
        6
      ],
      "mod_code": [
        "else if ( j <= k )",
        "cout << \" * \"",
        "cout << \" * \"",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        11,
        6
      ],
      "mod_code": [
        "else if ( j <= k )",
        "cout << \" * \"",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        7
      ],
      "mod_code": [
        "else if ( j <= k )",
        "cout << \" * \""
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        7,
        6
      ],
      "mod_code": [
        "else if ( j <= k )",
        "cout << \" * \"",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        6
      ],
      "mod_code": [
        "else if ( j <= k )",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 16,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        19,
        11
      ],
      "mod_code": [
        "puts ( \" D \" ) ;",
        "cout << \" * \""
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        11,
        7
      ],
      "mod_code": [
        "puts ( \" D \" ) ;",
        "cout << \" * \"",
        "cout << \" * \""
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        11,
        7,
        6
      ],
      "mod_code": [
        "puts ( \" D \" ) ;",
        "cout << \" * \"",
        "cout << \" * \"",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        11,
        6
      ],
      "mod_code": [
        "puts ( \" D \" ) ;",
        "cout << \" * \"",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        7
      ],
      "mod_code": [
        "puts ( \" D \" ) ;",
        "cout << \" * \""
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        7,
        6
      ],
      "mod_code": [
        "puts ( \" D \" ) ;",
        "cout << \" * \"",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "cout << \" * \"",
        "cout << \" * \""
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        7,
        6
      ],
      "mod_code": [
        "cout << \" * \"",
        "cout << \" * \"",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "cout << \" * \"",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "cout << \" * \"",
        "if ( j <= ( n - i * 2 - 1 ) )"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘}’ token"
    }
  ]
}