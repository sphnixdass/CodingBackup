{
  "meta": {
    "index": 2465,
    "hitid": "3LAZVA75NILXAWUB8CL10HCZG4RO2E",
    "workerid": "A1APYLD4DUK33J",
    "probid": "574A",
    "subid": "47599635"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare integer array arr size 105",
      "code": "int arr [ 105 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare integer m",
      "code": "int m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while read m is true",
      "code": "while ( cin >> m )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to m exclusive , read arr [ i ]",
      "code": "for ( int i = 0 ; i < m ; i ++ ) cin >> arr [ i ] ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "declare boolean flag = 1",
      "code": "bool flag = 1 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "declare integer ans = 0",
      "code": "int ans = 0 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "while flag is true",
      "code": "while ( flag )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "let flag be 0",
      "code": "flag = 0 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "declare integer Max = - 9999999",
      "code": "int Max = - 9999999 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "declare integer k = 1",
      "code": "int k = 1 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "for i = 1 to m exclusive",
      "code": "for ( int i = 1 ; i < m ; i ++ )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "if arr [ i ] is greater than Max",
      "code": "if ( arr [ i ] > Max )",
      "indent": 4
    },
    {
      "line": 13,
      "text": "let Max be arr [ i ]",
      "code": "Max = arr [ i ] ;",
      "indent": 5
    },
    {
      "line": 14,
      "text": "let k be i",
      "code": "k = i ;",
      "indent": 5
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "if Max is greater than or equal to arr [ 0 ]",
      "code": "if ( Max >= arr [ 0 ] )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "decrement arr [ k ]",
      "code": "arr [ k ] -- ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "increment arr [ 0 ]",
      "code": "arr [ 0 ] ++ ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "increment ans",
      "code": "ans ++ ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "let flag be 1",
      "code": "flag = 1 ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 23,
      "text": "let flag be 0",
      "code": "flag = 0 ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "print ans and newline",
      "code": "cout << ans << endl ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "flag = 1 ;"
      ],
      "err_line": 5,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        14,
        7,
        22
      ],
      "mod_code": [
        "int Max = arr [ i ] ;",
        "int k = i ;",
        "while ( ! flag )",
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        14,
        21,
        22
      ],
      "mod_code": [
        "int Max = arr [ i ] ;",
        "int k = i ;",
        "int flag = 1 ;",
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        14,
        22
      ],
      "mod_code": [
        "int Max = arr [ i ] ;",
        "int k = i ;",
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        14,
        22,
        3
      ],
      "mod_code": [
        "int Max = arr [ i ] ;",
        "int k = i ;",
        "do",
        "while ( m >> m )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        7,
        21,
        22
      ],
      "mod_code": [
        "int Max = arr [ i ] ;",
        "while ( ! flag )",
        "int flag = 1 ;",
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        7,
        22
      ],
      "mod_code": [
        "int Max = arr [ i ] ;",
        "while ( ! flag )",
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        7,
        22,
        3
      ],
      "mod_code": [
        "int Max = arr [ i ] ;",
        "while ( ! flag )",
        "do",
        "while ( m >> m )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        21,
        22
      ],
      "mod_code": [
        "int Max = arr [ i ] ;",
        "int flag = 1 ;",
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        21,
        22,
        3
      ],
      "mod_code": [
        "int Max = arr [ i ] ;",
        "int flag = 1 ;",
        "do",
        "while ( m >> m )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        22
      ],
      "mod_code": [
        "int Max = arr [ i ] ;",
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        22,
        3
      ],
      "mod_code": [
        "int Max = arr [ i ] ;",
        "do",
        "while ( m >> m )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        7,
        21,
        22
      ],
      "mod_code": [
        "int k = i ;",
        "while ( ! flag )",
        "int flag = 1 ;",
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        7,
        22
      ],
      "mod_code": [
        "int k = i ;",
        "while ( ! flag )",
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        7,
        22,
        3
      ],
      "mod_code": [
        "int k = i ;",
        "while ( ! flag )",
        "do",
        "while ( m >> m )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        21,
        22
      ],
      "mod_code": [
        "int k = i ;",
        "int flag = 1 ;",
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        21,
        22,
        3
      ],
      "mod_code": [
        "int k = i ;",
        "int flag = 1 ;",
        "do",
        "while ( m >> m )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        22
      ],
      "mod_code": [
        "int k = i ;",
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        22,
        3
      ],
      "mod_code": [
        "int k = i ;",
        "do",
        "while ( m >> m )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        21,
        22
      ],
      "mod_code": [
        "while ( ! flag )",
        "int flag = 1 ;",
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        21,
        22,
        3
      ],
      "mod_code": [
        "while ( ! flag )",
        "int flag = 1 ;",
        "do",
        "while ( m >> m )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        22
      ],
      "mod_code": [
        "while ( ! flag )",
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        22,
        3
      ],
      "mod_code": [
        "while ( ! flag )",
        "do",
        "while ( m >> m )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        22
      ],
      "mod_code": [
        "int flag = 1 ;",
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        21,
        22,
        3
      ],
      "mod_code": [
        "int flag = 1 ;",
        "do",
        "while ( m >> m )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        22,
        3
      ],
      "mod_code": [
        "do",
        "while ( m >> m )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}