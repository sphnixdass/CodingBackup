{
  "meta": {
    "index": 2221,
    "hitid": "3VW0145YLY69GP772HCG7U9BNFXMJJ",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "350A",
    "subid": "41445675"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare insercion taking in int n and int array v",
      "code": "void insercion ( int v [ ] , int n )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "make int j",
      "code": "int j ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "make integer aux = v [ i ]",
      "code": "int aux = v [ i ] ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "for j = i - 1 , loop until j > = 0 and v [ j ] is greater than aux , set v [ j + 1 ] to v [ j ]",
      "code": "for ( j = i - 1 ; j >= 0 && v [ j ] > aux ; j -- ) v [ j + 1 ] = v [ j ] ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "set v [ j + 1 ] to aux",
      "code": "v [ j + 1 ] = aux ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 9,
      "text": "create integers n and m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "create int arrays v of size n and v2 of size m",
      "code": "int v [ n ] , v2 [ m ] ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 0 to n exclusive , read v [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cin >> v [ i ] ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 0 to m exclusive , read v2 [ i ]",
      "code": "for ( int i = 0 ; i < m ; i ++ ) cin >> v2 [ i ] ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "call insercion ( v , n )",
      "code": "insercion ( v , n ) ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "call insercion ( v2 , m )",
      "code": "insercion ( v2 , m ) ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "create ints va = v [ 0 ] , p = v [ n - 1 ] , and c = v2 [ 0 ]",
      "code": "int va = v [ 0 ] , p = v [ n - 1 ] , c = v2 [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if max ( 2 * va , p ) is less than c",
      "code": "if ( max ( 2 * va , p ) < c )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print max ( 2 * va , p )",
      "code": "cout << max ( 2 * va , p ) << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print - 1",
      "code": "cout << - 1 << endl ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void insercion ( int n , int v )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void insercion ( int v [ ] , int v )"
      ],
      "err_line": 0,
      "err_msg": "conflicting declaration ‘int v’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "aux = v [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘aux’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "while ( cin >> n >> m )"
      ],
      "err_line": 12,
      "err_msg": "‘v’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "void insercion ( v , n ) ;"
      ],
      "err_line": 14,
      "err_msg": "variable or field ‘insercion’ declared void"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 15,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;"
      ],
      "err_line": 16,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 21,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "void insercion ( int n , int v )",
        "for ( int j = i - 1 ; j >= 0 ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        4,
        16
      ],
      "mod_code": [
        "void insercion ( int n , int v )",
        "for ( int j = i - 1 ; j >= 0 ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        4,
        16,
        14
      ],
      "mod_code": [
        "void insercion ( int n , int v )",
        "for ( int j = i - 1 ; j >= 0 ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;",
        "void insercion ( v , n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        4,
        16,
        15
      ],
      "mod_code": [
        "void insercion ( int n , int v )",
        "for ( int j = i - 1 ; j >= 0 ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;",
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        4,
        14
      ],
      "mod_code": [
        "void insercion ( int n , int v )",
        "for ( int j = i - 1 ; j >= 0 ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "void insercion ( v , n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        4,
        14,
        15
      ],
      "mod_code": [
        "void insercion ( int n , int v )",
        "for ( int j = i - 1 ; j >= 0 ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "void insercion ( v , n ) ;",
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        4,
        15
      ],
      "mod_code": [
        "void insercion ( int n , int v )",
        "for ( int j = i - 1 ; j >= 0 ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        16
      ],
      "mod_code": [
        "void insercion ( int n , int v )",
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        16,
        4
      ],
      "mod_code": [
        "void insercion ( int n , int v )",
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;",
        "for ( int j = i - 1 ; j >= aux ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        16,
        4,
        14
      ],
      "mod_code": [
        "void insercion ( int n , int v )",
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;",
        "for ( int j = i - 1 ; j >= aux ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "void insercion ( v , n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        16,
        4,
        15
      ],
      "mod_code": [
        "void insercion ( int n , int v )",
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;",
        "for ( int j = i - 1 ; j >= aux ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        16,
        14
      ],
      "mod_code": [
        "void insercion ( int n , int v )",
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;",
        "void insercion ( v , n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        16,
        14,
        15
      ],
      "mod_code": [
        "void insercion ( int n , int v )",
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;",
        "void insercion ( v , n ) ;",
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        16,
        15
      ],
      "mod_code": [
        "void insercion ( int n , int v )",
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;",
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "void insercion ( int n , int v )",
        "for ( int j = i - 1 ; j >= aux ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        4,
        14
      ],
      "mod_code": [
        "void insercion ( int n , int v )",
        "for ( int j = i - 1 ; j >= aux ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "void insercion ( v , n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        4,
        14,
        15
      ],
      "mod_code": [
        "void insercion ( int n , int v )",
        "for ( int j = i - 1 ; j >= aux ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "void insercion ( v , n ) ;",
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        4,
        15
      ],
      "mod_code": [
        "void insercion ( int n , int v )",
        "for ( int j = i - 1 ; j >= aux ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        14
      ],
      "mod_code": [
        "void insercion ( int n , int v )",
        "void insercion ( v , n ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        14,
        15
      ],
      "mod_code": [
        "void insercion ( int n , int v )",
        "void insercion ( v , n ) ;",
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "void insercion ( int n , int v )",
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        4,
        16
      ],
      "mod_code": [
        "for ( int j = i - 1 ; j >= 0 ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;"
      ],
      "err_line": 16,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        16,
        14
      ],
      "mod_code": [
        "for ( int j = i - 1 ; j >= 0 ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;",
        "void insercion ( v , n ) ;"
      ],
      "err_line": 14,
      "err_msg": "variable or field ‘insercion’ declared void"
    },
    {
      "mod_line": [
        4,
        16,
        14,
        15
      ],
      "mod_code": [
        "for ( int j = i - 1 ; j >= 0 ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;",
        "void insercion ( v , n ) ;",
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 14,
      "err_msg": "variable or field ‘insercion’ declared void"
    },
    {
      "mod_line": [
        4,
        16,
        15
      ],
      "mod_code": [
        "for ( int j = i - 1 ; j >= 0 ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;",
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 15,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "for ( int j = i - 1 ; j >= 0 ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "void insercion ( v , n ) ;"
      ],
      "err_line": 14,
      "err_msg": "variable or field ‘insercion’ declared void"
    },
    {
      "mod_line": [
        4,
        14,
        15
      ],
      "mod_code": [
        "for ( int j = i - 1 ; j >= 0 ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "void insercion ( v , n ) ;",
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 14,
      "err_msg": "variable or field ‘insercion’ declared void"
    },
    {
      "mod_line": [
        4,
        15
      ],
      "mod_code": [
        "for ( int j = i - 1 ; j >= 0 ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 15,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        4
      ],
      "mod_code": [
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;",
        "for ( int j = i - 1 ; j >= aux ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }"
      ],
      "err_line": 16,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        4,
        14
      ],
      "mod_code": [
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;",
        "for ( int j = i - 1 ; j >= aux ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "void insercion ( v , n ) ;"
      ],
      "err_line": 14,
      "err_msg": "variable or field ‘insercion’ declared void"
    },
    {
      "mod_line": [
        16,
        4,
        14,
        15
      ],
      "mod_code": [
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;",
        "for ( int j = i - 1 ; j >= aux ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "void insercion ( v , n ) ;",
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 14,
      "err_msg": "variable or field ‘insercion’ declared void"
    },
    {
      "mod_line": [
        16,
        4,
        15
      ],
      "mod_code": [
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;",
        "for ( int j = i - 1 ; j >= aux ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 15,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        14
      ],
      "mod_code": [
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;",
        "void insercion ( v , n ) ;"
      ],
      "err_line": 14,
      "err_msg": "variable or field ‘insercion’ declared void"
    },
    {
      "mod_line": [
        16,
        14,
        15
      ],
      "mod_code": [
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;",
        "void insercion ( v , n ) ;",
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 14,
      "err_msg": "variable or field ‘insercion’ declared void"
    },
    {
      "mod_line": [
        16,
        15
      ],
      "mod_code": [
        "int va = v [ 0 ] , p = v [ n - 1 ] >> c = v2 [ 0 ] ;",
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 15,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "for ( int j = i - 1 ; j >= aux ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "void insercion ( v , n ) ;"
      ],
      "err_line": 14,
      "err_msg": "variable or field ‘insercion’ declared void"
    },
    {
      "mod_line": [
        4,
        14,
        15
      ],
      "mod_code": [
        "for ( int j = i - 1 ; j >= aux ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "void insercion ( v , n ) ;",
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 14,
      "err_msg": "variable or field ‘insercion’ declared void"
    },
    {
      "mod_line": [
        4,
        15
      ],
      "mod_code": [
        "for ( int j = i - 1 ; j >= aux ; j -- ) { v [ j + 1 ] = v [ j + 1 ] ; }",
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 15,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        15
      ],
      "mod_code": [
        "void insercion ( v , n ) ;",
        "int insercion ( v2 , m ) ;"
      ],
      "err_line": 14,
      "err_msg": "variable or field ‘insercion’ declared void"
    }
  ]
}