{
  "meta": {
    "index": 14,
    "hitid": "3QGHA0EA0JUZ3I39IR5MI4SPCP7BW8",
    "workerid": "A1AYVATMT88U1W",
    "probid": "485A",
    "subid": "48703447"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let a be a integer",
      "code": "int a ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let m be a integer",
      "code": "int m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read m",
      "code": "cin >> m ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let ma be a map with key , value pairs as integers respectively",
      "code": "map < int , int > ma ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "let ma [ a modulus m ] is equal to 1",
      "code": "ma [ a % m ] = 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "let integer value count is equal to 1",
      "code": "int count = 1 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "a is equal to ( a + a modulus m )",
      "code": "a += a % m ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "do , ( execute once even if the condition is false )",
      "code": "do",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if ( a modulus m is equal to 0 )",
      "code": "if ( a % m == 0 )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print YES and newline",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if ( ma [ ( a modulus m ) ] is greater than 0 )",
      "code": "if ( ma [ ( a % m ) ] > 0 )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "print NO and newline",
      "code": "cout << \" No \" << endl ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "else , do the following",
      "code": "else",
      "indent": 3
    },
    {
      "line": 18,
      "text": "increase the value ma [ a % m ] by 1",
      "code": "ma [ a % m ] ++ ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "a is equal to ( a + a modulus of m )",
      "code": "a += a % m ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "increase count by 1",
      "code": "count ++ ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "while ( count is less than m )",
      "code": "while ( count < m ) ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print NO and newline",
      "code": "cout << \" No \" << endl ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "a = a + min ( m ) ;"
      ],
      "err_line": 19,
      "err_msg": "no matching function for call to ‘min(int&)’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "while ( count < m )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "gets ( m ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "map < int > ma ;"
      ],
      "err_line": 5,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "count = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else"
      ],
      "err_line": 9,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 23,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        15,
        19
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "a = a + min ( m ) ;"
      ],
      "err_line": 19,
      "err_msg": "no matching function for call to ‘min(int&)’"
    },
    {
      "mod_line": [
        11,
        15,
        19,
        23
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "a = a + min ( m ) ;",
        "while ( count < m )"
      ],
      "err_line": 19,
      "err_msg": "no matching function for call to ‘min(int&)’"
    },
    {
      "mod_line": [
        11,
        15,
        19,
        4
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "a = a + min ( m ) ;",
        "gets ( m ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        15,
        19,
        17
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "a = a + min ( m ) ;",
        "do"
      ],
      "err_line": 19,
      "err_msg": "no matching function for call to ‘min(int&)’"
    },
    {
      "mod_line": [
        11,
        15,
        23
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "while ( count < m )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        11,
        15,
        23,
        4
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "while ( count < m )",
        "gets ( m ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        15,
        23,
        17
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "while ( count < m )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        15,
        4
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "gets ( m ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        15,
        4,
        17
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "gets ( m ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        15,
        17
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        19
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "a = a + min ( m ) ;"
      ],
      "err_line": 19,
      "err_msg": "no matching function for call to ‘min(int&)’"
    },
    {
      "mod_line": [
        11,
        19,
        23
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "a = a + min ( m ) ;",
        "while ( count < m )"
      ],
      "err_line": 19,
      "err_msg": "no matching function for call to ‘min(int&)’"
    },
    {
      "mod_line": [
        11,
        19,
        23,
        4
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "a = a + min ( m ) ;",
        "while ( count < m )",
        "gets ( m ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        19,
        23,
        17
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "a = a + min ( m ) ;",
        "while ( count < m )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "no matching function for call to ‘min(int&)’"
    },
    {
      "mod_line": [
        11,
        19,
        4
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "a = a + min ( m ) ;",
        "gets ( m ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        19,
        4,
        17
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "a = a + min ( m ) ;",
        "gets ( m ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        19,
        17
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "a = a + min ( m ) ;",
        "do"
      ],
      "err_line": 19,
      "err_msg": "no matching function for call to ‘min(int&)’"
    },
    {
      "mod_line": [
        11,
        23
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "while ( count < m )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        11,
        23,
        4
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "while ( count < m )",
        "gets ( m ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        23,
        4,
        17
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "while ( count < m )",
        "gets ( m ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        23,
        17
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "while ( count < m )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        4
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "gets ( m ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        4,
        17
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "gets ( m ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        17
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        19
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "a = a + min ( m ) ;"
      ],
      "err_line": 19,
      "err_msg": "no matching function for call to ‘min(int&)’"
    },
    {
      "mod_line": [
        15,
        19,
        23
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "a = a + min ( m ) ;",
        "while ( count < m )"
      ],
      "err_line": 19,
      "err_msg": "no matching function for call to ‘min(int&)’"
    },
    {
      "mod_line": [
        15,
        19,
        23,
        4
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "a = a + min ( m ) ;",
        "while ( count < m )",
        "gets ( m ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        19,
        23,
        17
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "a = a + min ( m ) ;",
        "while ( count < m )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "no matching function for call to ‘min(int&)’"
    },
    {
      "mod_line": [
        15,
        19,
        4
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "a = a + min ( m ) ;",
        "gets ( m ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        19,
        4,
        17
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "a = a + min ( m ) ;",
        "gets ( m ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        19,
        17
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "a = a + min ( m ) ;",
        "do"
      ],
      "err_line": 19,
      "err_msg": "no matching function for call to ‘min(int&)’"
    },
    {
      "mod_line": [
        15,
        23
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "while ( count < m )"
      ],
      "err_line": 24,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        15,
        23,
        4
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "while ( count < m )",
        "gets ( m ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        23,
        4,
        17
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "while ( count < m )",
        "gets ( m ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        23,
        17
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "while ( count < m )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        4
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "gets ( m ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        4,
        17
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "gets ( m ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        17
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        23
      ],
      "mod_code": [
        "a = a + min ( m ) ;",
        "while ( count < m )"
      ],
      "err_line": 19,
      "err_msg": "no matching function for call to ‘min(int&)’"
    },
    {
      "mod_line": [
        19,
        23,
        4
      ],
      "mod_code": [
        "a = a + min ( m ) ;",
        "while ( count < m )",
        "gets ( m ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        23,
        4,
        17
      ],
      "mod_code": [
        "a = a + min ( m ) ;",
        "while ( count < m )",
        "gets ( m ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        23,
        17
      ],
      "mod_code": [
        "a = a + min ( m ) ;",
        "while ( count < m )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "no matching function for call to ‘min(int&)’"
    },
    {
      "mod_line": [
        19,
        4
      ],
      "mod_code": [
        "a = a + min ( m ) ;",
        "gets ( m ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        4,
        17
      ],
      "mod_code": [
        "a = a + min ( m ) ;",
        "gets ( m ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        17
      ],
      "mod_code": [
        "a = a + min ( m ) ;",
        "do"
      ],
      "err_line": 19,
      "err_msg": "no matching function for call to ‘min(int&)’"
    },
    {
      "mod_line": [
        23,
        4
      ],
      "mod_code": [
        "while ( count < m )",
        "gets ( m ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        4,
        17
      ],
      "mod_code": [
        "while ( count < m )",
        "gets ( m ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        23,
        17
      ],
      "mod_code": [
        "while ( count < m )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        17
      ],
      "mod_code": [
        "gets ( m ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    }
  ]
}