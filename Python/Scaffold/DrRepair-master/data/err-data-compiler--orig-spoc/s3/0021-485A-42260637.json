{
  "meta": {
    "index": 21,
    "hitid": "3VW0145YLY69GP772HCG7U9BMS2MJD",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "485A",
    "subid": "42260637"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int n and m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while read n , m",
      "code": "while ( cin >> n >> m )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while m is even , m = m / 2",
      "code": "while ( m % 2 == 0 ) { m /= 2 ; }",
      "indent": 2
    },
    {
      "line": 4,
      "text": "if n mod m = 0",
      "code": "if ( n % m == 0 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "print Yes and a new line",
      "code": "puts ( \" Yes \" ) ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "otherwise",
      "code": "else",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print No and a new line",
      "code": "puts ( \" No \" ) ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n and m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "return else ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        5,
        2,
        1
      ],
      "mod_code": [
        "while ( m % 2 == 0 && m == m / 2 )",
        "cout << \" YES\\n \" ;",
        "while ( cin >> m >> m )",
        "int n and m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        5,
        2,
        6
      ],
      "mod_code": [
        "while ( m % 2 == 0 && m == m / 2 )",
        "cout << \" YES\\n \" ;",
        "while ( cin >> m >> m )",
        "return else ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        5,
        1
      ],
      "mod_code": [
        "while ( m % 2 == 0 && m == m / 2 )",
        "cout << \" YES\\n \" ;",
        "int n and m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        5,
        1,
        6
      ],
      "mod_code": [
        "while ( m % 2 == 0 && m == m / 2 )",
        "cout << \" YES\\n \" ;",
        "int n and m ;",
        "return else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        5,
        6
      ],
      "mod_code": [
        "while ( m % 2 == 0 && m == m / 2 )",
        "cout << \" YES\\n \" ;",
        "return else ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        2,
        1
      ],
      "mod_code": [
        "while ( m % 2 == 0 && m == m / 2 )",
        "while ( cin >> m >> m )",
        "int n and m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        2,
        1,
        6
      ],
      "mod_code": [
        "while ( m % 2 == 0 && m == m / 2 )",
        "while ( cin >> m >> m )",
        "int n and m ;",
        "return else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        2,
        6
      ],
      "mod_code": [
        "while ( m % 2 == 0 && m == m / 2 )",
        "while ( cin >> m >> m )",
        "return else ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "while ( m % 2 == 0 && m == m / 2 )",
        "int n and m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        1,
        6
      ],
      "mod_code": [
        "while ( m % 2 == 0 && m == m / 2 )",
        "int n and m ;",
        "return else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "while ( m % 2 == 0 && m == m / 2 )",
        "return else ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        2,
        1
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "while ( cin >> m >> m )",
        "int n and m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        2,
        1,
        6
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "while ( cin >> m >> m )",
        "int n and m ;",
        "return else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        2,
        6
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "while ( cin >> m >> m )",
        "return else ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "int n and m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        1,
        6
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "int n and m ;",
        "return else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "return else ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "while ( cin >> m >> m )",
        "int n and m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        2,
        1,
        6
      ],
      "mod_code": [
        "while ( cin >> m >> m )",
        "int n and m ;",
        "return else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "while ( cin >> m >> m )",
        "return else ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int n and m ;",
        "return else ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    }
  ]
}