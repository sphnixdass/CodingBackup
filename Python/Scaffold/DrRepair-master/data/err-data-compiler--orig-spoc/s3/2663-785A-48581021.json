{
  "meta": {
    "index": 2663,
    "hitid": "386659BNTLB5IUKWNNJC5X6CQV310Q",
    "workerid": "AIWEXPJAU66D9",
    "probid": "785A",
    "subid": "48581021"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "define new integers n , s = 0 , x = 0",
      "code": "int n , s = 0 , x = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "define new string poly",
      "code": "string poly ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "change i from 0 to n exclusive in a loop",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read variable poly from the input",
      "code": "cin >> poly ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if value of poly = \" Tetrahedron \"",
      "code": "if ( poly == \" Tetrahedron \" )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "change x to 4",
      "code": "x = 4 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if value of poly is equal to \" Cube \"",
      "code": "else if ( poly == \" Cube \" )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "assign 6 to x",
      "code": "x = 6 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if content of poly = \" Octahedron \"",
      "code": "else if ( poly == \" Octahedron \" )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set x to 8",
      "code": "x = 8 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else if poly is equal to \" Dodecahedron \"",
      "code": "else if ( poly == \" Dodecahedron \" )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set the value of x to 12",
      "code": "x = 12 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else if poly = \" Icosahedron \"",
      "code": "else if ( poly == \" Icosahedron \" )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "change the value of x to 20",
      "code": "x = 20 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "change s to s + x",
      "code": "s = s + x ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print s to the standard output",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , s , x = 0 , x = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char poly ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( * poly == \" Tetrahedron \" )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else if ( abs ( poly ) == \" Octahedron \" )"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘abs(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "* x = 12 ;"
      ],
      "err_line": 13,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "cin >> N ;",
        "cin . get ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        1
      ],
      "mod_code": [
        "cin >> N ;",
        "cin . get ( ) ;",
        "int n , s , x = 0 , x = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        5,
        1,
        14
      ],
      "mod_code": [
        "cin >> N ;",
        "cin . get ( ) ;",
        "int n , s , x = 0 , x = 0 ;",
        "else if ( poly == \" [] \" )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        5,
        1,
        6
      ],
      "mod_code": [
        "cin >> N ;",
        "cin . get ( ) ;",
        "int n , s , x = 0 , x = 0 ;",
        "if ( * poly == \" Tetrahedron \" )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        5,
        1,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "cin . get ( ) ;",
        "int n , s , x = 0 , x = 0 ;",
        "x /= 4 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        5,
        14
      ],
      "mod_code": [
        "cin >> N ;",
        "cin . get ( ) ;",
        "else if ( poly == \" [] \" )"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        14,
        6
      ],
      "mod_code": [
        "cin >> N ;",
        "cin . get ( ) ;",
        "else if ( poly == \" [] \" )",
        "if ( * poly == \" Tetrahedron \" )"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        14,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "cin . get ( ) ;",
        "else if ( poly == \" [] \" )",
        "x /= 4 ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        6
      ],
      "mod_code": [
        "cin >> N ;",
        "cin . get ( ) ;",
        "if ( * poly == \" Tetrahedron \" )"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "cin . get ( ) ;",
        "if ( * poly == \" Tetrahedron \" )",
        "x /= 4 ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        5,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "cin . get ( ) ;",
        "x /= 4 ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "cin >> N ;",
        "int n , s , x = 0 , x = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        1,
        14
      ],
      "mod_code": [
        "cin >> N ;",
        "int n , s , x = 0 , x = 0 ;",
        "else if ( poly == \" [] \" )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        1,
        14,
        6
      ],
      "mod_code": [
        "cin >> N ;",
        "int n , s , x = 0 , x = 0 ;",
        "else if ( poly == \" [] \" )",
        "if ( * poly == \" Tetrahedron \" )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        1,
        14,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "int n , s , x = 0 , x = 0 ;",
        "else if ( poly == \" [] \" )",
        "x /= 4 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        1,
        6
      ],
      "mod_code": [
        "cin >> N ;",
        "int n , s , x = 0 , x = 0 ;",
        "if ( * poly == \" Tetrahedron \" )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        1,
        6,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "int n , s , x = 0 , x = 0 ;",
        "if ( * poly == \" Tetrahedron \" )",
        "x /= 4 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        1,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "int n , s , x = 0 , x = 0 ;",
        "x /= 4 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "cin >> N ;",
        "else if ( poly == \" [] \" )"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        14,
        6
      ],
      "mod_code": [
        "cin >> N ;",
        "else if ( poly == \" [] \" )",
        "if ( * poly == \" Tetrahedron \" )"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        14,
        6,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "else if ( poly == \" [] \" )",
        "if ( * poly == \" Tetrahedron \" )",
        "x /= 4 ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        14,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "else if ( poly == \" [] \" )",
        "x /= 4 ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "cin >> N ;",
        "if ( * poly == \" Tetrahedron \" )"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "if ( * poly == \" Tetrahedron \" )",
        "x /= 4 ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "cin >> N ;",
        "x /= 4 ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "cin . get ( ) ;",
        "int n , s , x = 0 , x = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        5,
        1,
        14
      ],
      "mod_code": [
        "cin . get ( ) ;",
        "int n , s , x = 0 , x = 0 ;",
        "else if ( poly == \" [] \" )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        5,
        1,
        14,
        6
      ],
      "mod_code": [
        "cin . get ( ) ;",
        "int n , s , x = 0 , x = 0 ;",
        "else if ( poly == \" [] \" )",
        "if ( * poly == \" Tetrahedron \" )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        5,
        1,
        14,
        7
      ],
      "mod_code": [
        "cin . get ( ) ;",
        "int n , s , x = 0 , x = 0 ;",
        "else if ( poly == \" [] \" )",
        "x /= 4 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        5,
        1,
        6
      ],
      "mod_code": [
        "cin . get ( ) ;",
        "int n , s , x = 0 , x = 0 ;",
        "if ( * poly == \" Tetrahedron \" )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        5,
        1,
        6,
        7
      ],
      "mod_code": [
        "cin . get ( ) ;",
        "int n , s , x = 0 , x = 0 ;",
        "if ( * poly == \" Tetrahedron \" )",
        "x /= 4 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        5,
        1,
        7
      ],
      "mod_code": [
        "cin . get ( ) ;",
        "int n , s , x = 0 , x = 0 ;",
        "x /= 4 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        5,
        14,
        6
      ],
      "mod_code": [
        "cin . get ( ) ;",
        "else if ( poly == \" [] \" )",
        "if ( * poly == \" Tetrahedron \" )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        14,
        6,
        7
      ],
      "mod_code": [
        "cin . get ( ) ;",
        "else if ( poly == \" [] \" )",
        "if ( * poly == \" Tetrahedron \" )",
        "x /= 4 ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "cin . get ( ) ;",
        "if ( * poly == \" Tetrahedron \" )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        6,
        7
      ],
      "mod_code": [
        "cin . get ( ) ;",
        "if ( * poly == \" Tetrahedron \" )",
        "x /= 4 ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int n , s , x = 0 , x = 0 ;",
        "else if ( poly == \" [] \" )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        14,
        6
      ],
      "mod_code": [
        "int n , s , x = 0 , x = 0 ;",
        "else if ( poly == \" [] \" )",
        "if ( * poly == \" Tetrahedron \" )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        14,
        6,
        7
      ],
      "mod_code": [
        "int n , s , x = 0 , x = 0 ;",
        "else if ( poly == \" [] \" )",
        "if ( * poly == \" Tetrahedron \" )",
        "x /= 4 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        14,
        7
      ],
      "mod_code": [
        "int n , s , x = 0 , x = 0 ;",
        "else if ( poly == \" [] \" )",
        "x /= 4 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int n , s , x = 0 , x = 0 ;",
        "if ( * poly == \" Tetrahedron \" )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        6,
        7
      ],
      "mod_code": [
        "int n , s , x = 0 , x = 0 ;",
        "if ( * poly == \" Tetrahedron \" )",
        "x /= 4 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int n , s , x = 0 , x = 0 ;",
        "x /= 4 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int x’"
    },
    {
      "mod_line": [
        14,
        6
      ],
      "mod_code": [
        "else if ( poly == \" [] \" )",
        "if ( * poly == \" Tetrahedron \" )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        6,
        7
      ],
      "mod_code": [
        "else if ( poly == \" [] \" )",
        "if ( * poly == \" Tetrahedron \" )",
        "x /= 4 ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "if ( * poly == \" Tetrahedron \" )",
        "x /= 4 ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}