{
  "meta": {
    "index": 484,
    "hitid": "3U74KRR67MF9CAOCQC5KMFLKPK2NTI",
    "workerid": "A1AYVATMT88U1W",
    "probid": "734A",
    "subid": "42139599"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , i , k , p be integers with values k is equal to 0 , p is equal to 0",
      "code": "int n , i , k = 0 , p = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let s be a string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for ( integer i = 0 to n exclusive )",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if ( ith element of array s is equal to A )",
      "code": "if ( s [ i ] == ' A ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increase p by 1",
      "code": "p ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if ( ith element of array s is equal to D )",
      "code": "else if ( s [ i ] == ' D ' )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increase k by 1",
      "code": "k ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if ( p is greater than k )",
      "code": "if ( p > k )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print Anton and new line",
      "code": "cout << \" Anton \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else if ( p is less than k )",
      "code": "else if ( p < k )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print Danik and newline",
      "code": "cout << \" Danik \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print Friendship and newline",
      "code": "cout << \" Friendship \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cout << Anton << endl ;"
      ],
      "err_line": 12,
      "err_msg": "‘Anton’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "cout << Danik << endl ;"
      ],
      "err_line": 14,
      "err_msg": "‘Danik’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , i , k = 0 , p , p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( s [ j ] == ' A ' )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "else if ( s [ x ] == ' D ' )"
      ],
      "err_line": 8,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cout << Anton << \" \\n \" ;"
      ],
      "err_line": 12,
      "err_msg": "‘Anton’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "cout << Danik << \" \\n \" ;"
      ],
      "err_line": 14,
      "err_msg": "‘Danik’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "cout << Danik << endl ;"
      ],
      "err_line": 12,
      "err_msg": "‘Anton’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        14,
        13
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "cout << Danik << endl ;",
        "else if ( p <= k )"
      ],
      "err_line": 12,
      "err_msg": "‘Anton’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        14,
        13,
        4
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "cout << Danik << endl ;",
        "else if ( p <= k )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        14,
        13,
        1
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "cout << Danik << endl ;",
        "else if ( p <= k )",
        "int n , i , k = 0 , p , p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        12,
        14,
        4
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "cout << Danik << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        14,
        4,
        1
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "cout << Danik << endl ;",
        "s >> s ;",
        "int n , i , k = 0 , p , p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        12,
        14,
        1
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "cout << Danik << endl ;",
        "int n , i , k = 0 , p , p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "else if ( p <= k )"
      ],
      "err_line": 12,
      "err_msg": "‘Anton’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        13,
        4
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "else if ( p <= k )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        13,
        4,
        1
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "else if ( p <= k )",
        "s >> s ;",
        "int n , i , k = 0 , p , p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        12,
        13,
        4,
        14
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "else if ( p <= k )",
        "s >> s ;",
        "cout << Danik << \" \\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        13,
        1
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "else if ( p <= k )",
        "int n , i , k = 0 , p , p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        12,
        13,
        1,
        14
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "else if ( p <= k )",
        "int n , i , k = 0 , p , p ;",
        "cout << Danik << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        12,
        13,
        14
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "else if ( p <= k )",
        "cout << Danik << \" \\n \" ;"
      ],
      "err_line": 12,
      "err_msg": "‘Anton’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        4,
        1
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "s >> s ;",
        "int n , i , k = 0 , p , p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        12,
        4,
        1,
        14
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "s >> s ;",
        "int n , i , k = 0 , p , p ;",
        "cout << Danik << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        12,
        4,
        14
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "s >> s ;",
        "cout << Danik << \" \\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        1
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "int n , i , k = 0 , p , p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        12,
        1,
        14
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "int n , i , k = 0 , p , p ;",
        "cout << Danik << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "cout << Anton << endl ;",
        "cout << Danik << \" \\n \" ;"
      ],
      "err_line": 12,
      "err_msg": "‘Anton’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        13
      ],
      "mod_code": [
        "cout << Danik << endl ;",
        "else if ( p <= k )"
      ],
      "err_line": 14,
      "err_msg": "‘Danik’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        13,
        4
      ],
      "mod_code": [
        "cout << Danik << endl ;",
        "else if ( p <= k )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        13,
        4,
        1
      ],
      "mod_code": [
        "cout << Danik << endl ;",
        "else if ( p <= k )",
        "s >> s ;",
        "int n , i , k = 0 , p , p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        14,
        13,
        1
      ],
      "mod_code": [
        "cout << Danik << endl ;",
        "else if ( p <= k )",
        "int n , i , k = 0 , p , p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        14,
        4
      ],
      "mod_code": [
        "cout << Danik << endl ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        4,
        1
      ],
      "mod_code": [
        "cout << Danik << endl ;",
        "s >> s ;",
        "int n , i , k = 0 , p , p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        14,
        1
      ],
      "mod_code": [
        "cout << Danik << endl ;",
        "int n , i , k = 0 , p , p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        13,
        4
      ],
      "mod_code": [
        "else if ( p <= k )",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        4,
        1
      ],
      "mod_code": [
        "else if ( p <= k )",
        "s >> s ;",
        "int n , i , k = 0 , p , p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        13,
        4,
        1,
        14
      ],
      "mod_code": [
        "else if ( p <= k )",
        "s >> s ;",
        "int n , i , k = 0 , p , p ;",
        "cout << Danik << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        13,
        4,
        14
      ],
      "mod_code": [
        "else if ( p <= k )",
        "s >> s ;",
        "cout << Danik << \" \\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        1
      ],
      "mod_code": [
        "else if ( p <= k )",
        "int n , i , k = 0 , p , p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        13,
        1,
        14
      ],
      "mod_code": [
        "else if ( p <= k )",
        "int n , i , k = 0 , p , p ;",
        "cout << Danik << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        13,
        14
      ],
      "mod_code": [
        "else if ( p <= k )",
        "cout << Danik << \" \\n \" ;"
      ],
      "err_line": 14,
      "err_msg": "‘Danik’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "int n , i , k = 0 , p , p ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        4,
        1,
        14
      ],
      "mod_code": [
        "s >> s ;",
        "int n , i , k = 0 , p , p ;",
        "cout << Danik << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "s >> s ;",
        "cout << Danik << \" \\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "int n , i , k = 0 , p , p ;",
        "cout << Danik << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int p’"
    }
  ]
}