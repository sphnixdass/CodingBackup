{
  "meta": {
    "index": 1505,
    "hitid": "306996CF6WE62HN6L3G1PE2VHZR1B3",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1097A",
    "subid": "48960002"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare string variable t",
      "code": "string t ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 0 to 5 exclusive",
      "code": "for ( int i = 0 ; i < 5 ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare string s",
      "code": "string s ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if s [ 0 ] is equal to t [ 0 ] or s [ 1 ] = t [ 1 ] , return 0 * puts ( \" YES \" )",
      "code": "if ( s [ 0 ] == t [ 0 ] || s [ 1 ] == t [ 1 ] ) { return 0 * puts ( \" YES \" ) ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print \" NO \"",
      "code": "puts ( \" NO \" ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int t ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "bool s ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "gets ( t ) ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        5,
        1
      ],
      "mod_code": [
        "gets ( t ) ;",
        "s >> s ;",
        "int t ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5,
        1,
        6
      ],
      "mod_code": [
        "gets ( t ) ;",
        "s >> s ;",
        "int t ;",
        "if ( s [ 0 ] == t [ 0 ] || s [ 1 ] == t [ 1 ] ) return 0 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5,
        1,
        4
      ],
      "mod_code": [
        "gets ( t ) ;",
        "s >> s ;",
        "int t ;",
        "bool s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5,
        6
      ],
      "mod_code": [
        "gets ( t ) ;",
        "s >> s ;",
        "if ( s [ 0 ] == t [ 0 ] || s [ 1 ] == t [ 1 ] ) return 0 ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        4
      ],
      "mod_code": [
        "gets ( t ) ;",
        "s >> s ;",
        "if ( s [ 0 ] == t [ 0 ] || s [ 1 ] == t [ 1 ] ) return 0 ;",
        "bool s ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        5,
        4
      ],
      "mod_code": [
        "gets ( t ) ;",
        "s >> s ;",
        "bool s ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "gets ( t ) ;",
        "int t ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        6
      ],
      "mod_code": [
        "gets ( t ) ;",
        "int t ;",
        "if ( s [ 0 ] == t [ 0 ] || s [ 1 ] == t [ 1 ] ) return 0 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        6,
        4
      ],
      "mod_code": [
        "gets ( t ) ;",
        "int t ;",
        "if ( s [ 0 ] == t [ 0 ] || s [ 1 ] == t [ 1 ] ) return 0 ;",
        "bool s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        4
      ],
      "mod_code": [
        "gets ( t ) ;",
        "int t ;",
        "bool s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "gets ( t ) ;",
        "if ( s [ 0 ] == t [ 0 ] || s [ 1 ] == t [ 1 ] ) return 0 ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        6,
        4
      ],
      "mod_code": [
        "gets ( t ) ;",
        "if ( s [ 0 ] == t [ 0 ] || s [ 1 ] == t [ 1 ] ) return 0 ;",
        "bool s ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "gets ( t ) ;",
        "bool s ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "int t ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        1,
        6
      ],
      "mod_code": [
        "s >> s ;",
        "int t ;",
        "if ( s [ 0 ] == t [ 0 ] || s [ 1 ] == t [ 1 ] ) return 0 ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        1,
        6,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "int t ;",
        "if ( s [ 0 ] == t [ 0 ] || s [ 1 ] == t [ 1 ] ) return 0 ;",
        "bool s ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        1,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "int t ;",
        "bool s ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ 0 ] == t [ 0 ] || s [ 1 ] == t [ 1 ] ) return 0 ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        5,
        6,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ 0 ] == t [ 0 ] || s [ 1 ] == t [ 1 ] ) return 0 ;",
        "bool s ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "bool s ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int t ;",
        "if ( s [ 0 ] == t [ 0 ] || s [ 1 ] == t [ 1 ] ) return 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        6,
        4
      ],
      "mod_code": [
        "int t ;",
        "if ( s [ 0 ] == t [ 0 ] || s [ 1 ] == t [ 1 ] ) return 0 ;",
        "bool s ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int t ;",
        "bool s ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "if ( s [ 0 ] == t [ 0 ] || s [ 1 ] == t [ 1 ] ) return 0 ;",
        "bool s ;"
      ],
      "err_line": 6,
      "err_msg": "invalid types ‘bool[int]’ for array subscript"
    }
  ]
}