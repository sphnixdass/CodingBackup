{
  "meta": {
    "index": 2176,
    "hitid": "3IZPORCT1F34MZP9JP5CHGN6FNVRHZ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "330A",
    "subid": "48567143"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer variables r and c",
      "code": "int r , c ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read r and c",
      "code": "cin >> r >> c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let a be string array with size 12",
      "code": "string a [ 12 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integers row and col",
      "code": "int row , col ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set row and col to 0",
      "code": "row = col = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for integer i = 0 to r exclusive read a [ i ]",
      "code": "for ( int i = 0 ; i < r ; ++ i ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for integer i = 0 to r exclusive",
      "code": "for ( int i = 0 ; i < r ; ++ i )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create boolean f = 1",
      "code": "bool f = 1 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "for j = 0 to c exclusive",
      "code": "for ( int j = 0 ; j < c ; ++ j )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if a [ i ] [ j ] = ' S ' , set f to 0",
      "code": "if ( a [ i ] [ j ] == ' S ' ) f = 0 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "increase row by f",
      "code": "row += f ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for j = 0 to c exclusive",
      "code": "for ( int j = 0 ; j < c ; ++ j )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "declare boolean f = 1",
      "code": "bool f = 1 ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "for i = 0 to r exclusive",
      "code": "for ( int i = 0 ; i < r ; ++ i )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "if a [ i ] [ j ] = ' S '",
      "code": "if ( a [ i ] [ j ] == ' S ' ) f = 0 ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "increase col by f",
      "code": "col += f ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print row * c + col * r - row * col and \" \\ n \"",
      "code": "cout << row * c + col * r - row * col << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int row’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> r >> c )"
      ],
      "err_line": 6,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int a [ 12 ] ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "long long row = 0 , col = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘long long int row’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "f = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "‘f’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( j = 0 ; j < c ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( j = 0 ; j < c ; j ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "bool f = l ;"
      ],
      "err_line": 15,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( i = 0 ; i < r ; i ++ )"
      ],
      "err_line": 16,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "if ( ! a [ i ] [ j ] )"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "cout << row * c + col * r - row * col - \" \\n \" ;"
      ],
      "err_line": 21,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        5,
        17
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "if ( a [ i ] [ j ] == ' S ' )"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int row’"
    },
    {
      "mod_line": [
        5,
        17,
        15
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "if ( a [ i ] [ j ] == ' S ' )",
        "bool f = l ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int row’"
    },
    {
      "mod_line": [
        5,
        17,
        15,
        21
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "if ( a [ i ] [ j ] == ' S ' )",
        "bool f = l ;",
        "cout << row * c + col * r - row * col - \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int row’"
    },
    {
      "mod_line": [
        5,
        17,
        15,
        3
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "if ( a [ i ] [ j ] == ' S ' )",
        "bool f = l ;",
        "int a [ 12 ] ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int row’"
    },
    {
      "mod_line": [
        5,
        17,
        15,
        1
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "if ( a [ i ] [ j ] == ' S ' )",
        "bool f = l ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        17,
        21
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "if ( a [ i ] [ j ] == ' S ' )",
        "cout << row * c + col * r - row * col - \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int row’"
    },
    {
      "mod_line": [
        5,
        17,
        21,
        3
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "if ( a [ i ] [ j ] == ' S ' )",
        "cout << row * c + col * r - row * col - \" \\n \" ;",
        "int a [ 12 ] ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int row’"
    },
    {
      "mod_line": [
        5,
        17,
        21,
        1
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "if ( a [ i ] [ j ] == ' S ' )",
        "cout << row * c + col * r - row * col - \" \\n \" ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        17,
        3
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "if ( a [ i ] [ j ] == ' S ' )",
        "int a [ 12 ] ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int row’"
    },
    {
      "mod_line": [
        5,
        17,
        3,
        1
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "if ( a [ i ] [ j ] == ' S ' )",
        "int a [ 12 ] ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        17,
        1
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "if ( a [ i ] [ j ] == ' S ' )",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        15
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "bool f = l ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int row’"
    },
    {
      "mod_line": [
        5,
        15,
        21
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "bool f = l ;",
        "cout << row * c + col * r - row * col - \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int row’"
    },
    {
      "mod_line": [
        5,
        15,
        21,
        3
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "bool f = l ;",
        "cout << row * c + col * r - row * col - \" \\n \" ;",
        "int a [ 12 ] ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int row’"
    },
    {
      "mod_line": [
        5,
        15,
        21,
        1
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "bool f = l ;",
        "cout << row * c + col * r - row * col - \" \\n \" ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        15,
        3
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "bool f = l ;",
        "int a [ 12 ] ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int row’"
    },
    {
      "mod_line": [
        5,
        15,
        3,
        1
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "bool f = l ;",
        "int a [ 12 ] ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        15,
        1
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "bool f = l ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        21
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "cout << row * c + col * r - row * col - \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int row’"
    },
    {
      "mod_line": [
        5,
        21,
        3
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "cout << row * c + col * r - row * col - \" \\n \" ;",
        "int a [ 12 ] ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int row’"
    },
    {
      "mod_line": [
        5,
        21,
        3,
        1
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "cout << row * c + col * r - row * col - \" \\n \" ;",
        "int a [ 12 ] ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        21,
        1
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "cout << row * c + col * r - row * col - \" \\n \" ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "int a [ 12 ] ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int row’"
    },
    {
      "mod_line": [
        5,
        3,
        1
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "int a [ 12 ] ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "int row = 0 , col = 0 ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        17,
        15
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' )",
        "bool f = l ;"
      ],
      "err_line": 15,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        15,
        21
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' )",
        "bool f = l ;",
        "cout << row * c + col * r - row * col - \" \\n \" ;"
      ],
      "err_line": 15,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        15,
        21,
        3
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' )",
        "bool f = l ;",
        "cout << row * c + col * r - row * col - \" \\n \" ;",
        "int a [ 12 ] ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        17,
        15,
        21,
        1
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' )",
        "bool f = l ;",
        "cout << row * c + col * r - row * col - \" \\n \" ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        17,
        15,
        3
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' )",
        "bool f = l ;",
        "int a [ 12 ] ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        17,
        15,
        3,
        1
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' )",
        "bool f = l ;",
        "int a [ 12 ] ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        17,
        15,
        1
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' )",
        "bool f = l ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        17,
        21
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' )",
        "cout << row * c + col * r - row * col - \" \\n \" ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        21,
        3
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' )",
        "cout << row * c + col * r - row * col - \" \\n \" ;",
        "int a [ 12 ] ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        17,
        21,
        3,
        1
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' )",
        "cout << row * c + col * r - row * col - \" \\n \" ;",
        "int a [ 12 ] ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        17,
        21,
        1
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' )",
        "cout << row * c + col * r - row * col - \" \\n \" ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        17,
        3
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' )",
        "int a [ 12 ] ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        17,
        3,
        1
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' )",
        "int a [ 12 ] ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        17,
        1
      ],
      "mod_code": [
        "if ( a [ i ] [ j ] == ' S ' )",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        15,
        21
      ],
      "mod_code": [
        "bool f = l ;",
        "cout << row * c + col * r - row * col - \" \\n \" ;"
      ],
      "err_line": 15,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        3
      ],
      "mod_code": [
        "bool f = l ;",
        "cout << row * c + col * r - row * col - \" \\n \" ;",
        "int a [ 12 ] ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        21,
        3,
        1
      ],
      "mod_code": [
        "bool f = l ;",
        "cout << row * c + col * r - row * col - \" \\n \" ;",
        "int a [ 12 ] ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        15,
        21,
        1
      ],
      "mod_code": [
        "bool f = l ;",
        "cout << row * c + col * r - row * col - \" \\n \" ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        15,
        3
      ],
      "mod_code": [
        "bool f = l ;",
        "int a [ 12 ] ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        3,
        1
      ],
      "mod_code": [
        "bool f = l ;",
        "int a [ 12 ] ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        15,
        1
      ],
      "mod_code": [
        "bool f = l ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        21,
        3
      ],
      "mod_code": [
        "cout << row * c + col * r - row * col - \" \\n \" ;",
        "int a [ 12 ] ;"
      ],
      "err_line": 10,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        21,
        3,
        1
      ],
      "mod_code": [
        "cout << row * c + col * r - row * col - \" \\n \" ;",
        "int a [ 12 ] ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        21,
        1
      ],
      "mod_code": [
        "cout << row * c + col * r - row * col - \" \\n \" ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "int a [ 12 ] ;",
        "int r and c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    }
  ]
}