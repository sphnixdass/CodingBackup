{
  "meta": {
    "index": 2335,
    "hitid": "3RSBJ6YZECKHBQ6NW708K06OOLZOFQ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "117A",
    "subid": "25361993"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers n , m , st , fin , tim and timr",
      "code": "int n , m , st , fin , tim , timr ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "loop , decrementing n while n > 0",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read st , fin and tim",
      "code": "cin >> st >> fin >> tim ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "timr = tim modulo ( 2 * ( m - 1 ) )",
      "code": "timr = tim % ( 2 * ( m - 1 ) ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if st = fin",
      "code": "if ( st == fin )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print tim and \" \\ n \"",
      "code": "cout << tim << \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if timr is less than st",
      "code": "else if ( timr < st )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if st is less than fin",
      "code": "if ( st < fin )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "print tim + ( fin - timr - 1 ) and \" \\ n \"",
      "code": "cout << tim + ( fin - timr - 1 ) << \" \\n \" ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 12,
      "text": "print tim - timr - 1 + ( 2 * m ) - fin and \" \\ n \"",
      "code": "cout << tim - timr - 1 + ( 2 * m ) - fin << \" \\n \" ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if timr is less than m",
      "code": "if ( timr < m )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if st is greater than fin",
      "code": "if ( st > fin )",
      "indent": 4
    },
    {
      "line": 16,
      "text": "print ( 2 * m ) - timr - 1 - fin + tim and \" \\ n \"",
      "code": "cout << ( 2 * m ) - timr - 1 - fin + tim << \" \\n \" ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 18,
      "text": "print ( 2 * m ) - timr - 3 + fin + tim and \" \\ n \"",
      "code": "cout << ( 2 * m ) - timr - 3 + fin + tim << \" \\n \" ;",
      "indent": 5
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 20,
      "text": "if ( ( 2 * m ) - timr - 1 ) > = st",
      "code": "if ( ( ( 2 * m ) - timr - 1 ) >= st )",
      "indent": 4
    },
    {
      "line": 21,
      "text": "if st is greater than fin",
      "code": "if ( st > fin )",
      "indent": 5
    },
    {
      "line": 22,
      "text": "print ( 2 * m ) - timr - fin + tim - 1 and \" \\ n \"",
      "code": "cout << ( 2 * m ) - timr - fin + tim - 1 << \" \\n \" ;",
      "indent": 6
    },
    {
      "line": 23,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 24,
      "text": "print ( 2 * m ) - timr + fin - 3 + tim and \" \\ n \"",
      "code": "cout << ( 2 * m ) - timr + fin - 3 + tim << \" \\n \" ;",
      "indent": 6
    },
    {
      "line": 25,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 26,
      "text": "if st is less than fin",
      "code": "if ( st < fin )",
      "indent": 5
    },
    {
      "line": 27,
      "text": "print tim + ( 2 * m ) - timr + fin - 3 and \" \\ n \"",
      "code": "cout << tim + ( 2 * m ) - timr + fin - 3 << \" \\n \" ;",
      "indent": 6
    },
    {
      "line": 28,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 29,
      "text": "print tim + ( 4 * m ) - timr - fin - 3 and \" \\ n \"",
      "code": "cout << tim + ( 4 * m ) - timr - fin - 3 << \" \\n \" ;",
      "indent": 6
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 34,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cout << tim + ( fin - l - 1 ) << \" \\n \" ;"
      ],
      "err_line": 10,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 33,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 31,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 30,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do"
      ],
      "err_line": 33,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        13,
        19
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do",
        "do"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        13,
        19,
        11
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do",
        "do",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        13,
        19,
        9
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do",
        "do",
        "if ( st < ' fin ' )"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        13,
        19,
        6
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do",
        "do",
        "if ( st == ' fin ' )"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        13,
        11
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        13,
        11,
        9
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do",
        "do",
        "if ( st < ' fin ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        13,
        11,
        6
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do",
        "do",
        "if ( st == ' fin ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        13,
        9
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do",
        "if ( st < ' fin ' )"
      ],
      "err_line": 33,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        13,
        9,
        6
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do",
        "if ( st < ' fin ' )",
        "if ( st == ' fin ' )"
      ],
      "err_line": 33,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        13,
        6
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do",
        "if ( st == ' fin ' )"
      ],
      "err_line": 33,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        19
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        19,
        11
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        19,
        11,
        9
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do",
        "do",
        "if ( st < ' fin ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        19,
        11,
        6
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do",
        "do",
        "if ( st == ' fin ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        19,
        9
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do",
        "if ( st < ' fin ' )"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        19,
        9,
        6
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do",
        "if ( st < ' fin ' )",
        "if ( st == ' fin ' )"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        19,
        6
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do",
        "if ( st == ' fin ' )"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        11
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        11,
        9
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do",
        "if ( st < ' fin ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        11,
        9,
        6
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do",
        "if ( st < ' fin ' )",
        "if ( st == ' fin ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        11,
        6
      ],
      "mod_code": [
        "cout << tim - timr - 1 << \" \" << ( 2 * m ) - fin << \" \\n \" ;",
        "do",
        "if ( st == ' fin ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        19
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        19,
        11
      ],
      "mod_code": [
        "do",
        "do",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        19,
        11,
        9
      ],
      "mod_code": [
        "do",
        "do",
        "do",
        "if ( st < ' fin ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        19,
        11,
        6
      ],
      "mod_code": [
        "do",
        "do",
        "do",
        "if ( st == ' fin ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        19,
        9
      ],
      "mod_code": [
        "do",
        "do",
        "if ( st < ' fin ' )"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        19,
        9,
        6
      ],
      "mod_code": [
        "do",
        "do",
        "if ( st < ' fin ' )",
        "if ( st == ' fin ' )"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        19,
        6
      ],
      "mod_code": [
        "do",
        "do",
        "if ( st == ' fin ' )"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        11
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        11,
        9
      ],
      "mod_code": [
        "do",
        "do",
        "if ( st < ' fin ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        11,
        9,
        6
      ],
      "mod_code": [
        "do",
        "do",
        "if ( st < ' fin ' )",
        "if ( st == ' fin ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        11,
        6
      ],
      "mod_code": [
        "do",
        "do",
        "if ( st == ' fin ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        9
      ],
      "mod_code": [
        "do",
        "if ( st < ' fin ' )"
      ],
      "err_line": 33,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        9,
        6
      ],
      "mod_code": [
        "do",
        "if ( st < ' fin ' )",
        "if ( st == ' fin ' )"
      ],
      "err_line": 33,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        6
      ],
      "mod_code": [
        "do",
        "if ( st == ' fin ' )"
      ],
      "err_line": 33,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        11
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        11,
        9
      ],
      "mod_code": [
        "do",
        "do",
        "if ( st < ' fin ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        11,
        9,
        6
      ],
      "mod_code": [
        "do",
        "do",
        "if ( st < ' fin ' )",
        "if ( st == ' fin ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        11,
        6
      ],
      "mod_code": [
        "do",
        "do",
        "if ( st == ' fin ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        9
      ],
      "mod_code": [
        "do",
        "if ( st < ' fin ' )"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        9,
        6
      ],
      "mod_code": [
        "do",
        "if ( st < ' fin ' )",
        "if ( st == ' fin ' )"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19,
        6
      ],
      "mod_code": [
        "do",
        "if ( st == ' fin ' )"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "do",
        "if ( st < ' fin ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        9,
        6
      ],
      "mod_code": [
        "do",
        "if ( st < ' fin ' )",
        "if ( st == ' fin ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "do",
        "if ( st == ' fin ' )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}