{
  "meta": {
    "index": 2802,
    "hitid": "3IKDQS3DQEU0CSBA7AX2SXPZGM8CIJ",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "454A",
    "subid": "41592423"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "make ints n and t",
      "code": "int n , t ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set n to t",
      "code": "n = t ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - ( n + 1 ) / 2 + 1 ) is less than or equal to ( n + 1 ) / 2 - 1",
      "code": "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - ( n + 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
      "indent": 3
    },
    {
      "line": 7,
      "text": "print \" D \"",
      "code": "cout << \" D \" ;",
      "indent": 4
    },
    {
      "line": 8,
      "text": "else do",
      "code": "else",
      "indent": 3
    },
    {
      "line": 9,
      "text": "print \" * \"",
      "code": "cout << \" * \" ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int n = t ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<=’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "cout << \" * \""
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "gets ( t ) ;",
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        9
      ],
      "mod_code": [
        "gets ( t ) ;",
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "cout << \" * \""
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        9,
        7
      ],
      "mod_code": [
        "gets ( t ) ;",
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "cout << \" * \"",
        "puts ( \" D \" ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        9,
        5
      ],
      "mod_code": [
        "gets ( t ) ;",
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "cout << \" * \"",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        9,
        8
      ],
      "mod_code": [
        "gets ( t ) ;",
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "cout << \" * \"",
        "do"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        7
      ],
      "mod_code": [
        "gets ( t ) ;",
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "puts ( \" D \" ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        7,
        5
      ],
      "mod_code": [
        "gets ( t ) ;",
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "puts ( \" D \" ) ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        7,
        8
      ],
      "mod_code": [
        "gets ( t ) ;",
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "puts ( \" D \" ) ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        5
      ],
      "mod_code": [
        "gets ( t ) ;",
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        5,
        8
      ],
      "mod_code": [
        "gets ( t ) ;",
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "for ( j = 0 ; j < n ; j ++ )",
        "do"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        8
      ],
      "mod_code": [
        "gets ( t ) ;",
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "do"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "gets ( t ) ;",
        "cout << \" * \""
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        9,
        7
      ],
      "mod_code": [
        "gets ( t ) ;",
        "cout << \" * \"",
        "puts ( \" D \" ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        9,
        7,
        5
      ],
      "mod_code": [
        "gets ( t ) ;",
        "cout << \" * \"",
        "puts ( \" D \" ) ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        9,
        7,
        8
      ],
      "mod_code": [
        "gets ( t ) ;",
        "cout << \" * \"",
        "puts ( \" D \" ) ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        9,
        5
      ],
      "mod_code": [
        "gets ( t ) ;",
        "cout << \" * \"",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        9,
        5,
        8
      ],
      "mod_code": [
        "gets ( t ) ;",
        "cout << \" * \"",
        "for ( j = 0 ; j < n ; j ++ )",
        "do"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        9,
        8
      ],
      "mod_code": [
        "gets ( t ) ;",
        "cout << \" * \"",
        "do"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "gets ( t ) ;",
        "puts ( \" D \" ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        7,
        5
      ],
      "mod_code": [
        "gets ( t ) ;",
        "puts ( \" D \" ) ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        7,
        5,
        8
      ],
      "mod_code": [
        "gets ( t ) ;",
        "puts ( \" D \" ) ;",
        "for ( j = 0 ; j < n ; j ++ )",
        "do"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        7,
        8
      ],
      "mod_code": [
        "gets ( t ) ;",
        "puts ( \" D \" ) ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "gets ( t ) ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5,
        8
      ],
      "mod_code": [
        "gets ( t ) ;",
        "for ( j = 0 ; j < n ; j ++ )",
        "do"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "gets ( t ) ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "cout << \" * \""
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<=’ token"
    },
    {
      "mod_line": [
        6,
        9,
        7
      ],
      "mod_code": [
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "cout << \" * \"",
        "puts ( \" D \" ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<=’ token"
    },
    {
      "mod_line": [
        6,
        9,
        7,
        5
      ],
      "mod_code": [
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "cout << \" * \"",
        "puts ( \" D \" ) ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        7,
        8
      ],
      "mod_code": [
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "cout << \" * \"",
        "puts ( \" D \" ) ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<=’ token"
    },
    {
      "mod_line": [
        6,
        9,
        5
      ],
      "mod_code": [
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "cout << \" * \"",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        5,
        8
      ],
      "mod_code": [
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "cout << \" * \"",
        "for ( j = 0 ; j < n ; j ++ )",
        "do"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9,
        8
      ],
      "mod_code": [
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "cout << \" * \"",
        "do"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<=’ token"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "puts ( \" D \" ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<=’ token"
    },
    {
      "mod_line": [
        6,
        7,
        5
      ],
      "mod_code": [
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "puts ( \" D \" ) ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        5,
        8
      ],
      "mod_code": [
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "puts ( \" D \" ) ;",
        "for ( j = 0 ; j < n ; j ++ )",
        "do"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7,
        8
      ],
      "mod_code": [
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "puts ( \" D \" ) ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<=’ token"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        5,
        8
      ],
      "mod_code": [
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "for ( j = 0 ; j < n ; j ++ )",
        "do"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "if ( abs ( i - ( n + 1 ) / 2 + 1 ) + abs ( j - 1 ) / 2 + 1 ) <= ( n + 1 ) / 2 - 1 )",
        "do"
      ],
      "err_line": 6,
      "err_msg": "expected primary-expression before ‘<=’ token"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "cout << \" * \"",
        "puts ( \" D \" ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        7,
        5
      ],
      "mod_code": [
        "cout << \" * \"",
        "puts ( \" D \" ) ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        7,
        5,
        8
      ],
      "mod_code": [
        "cout << \" * \"",
        "puts ( \" D \" ) ;",
        "for ( j = 0 ; j < n ; j ++ )",
        "do"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        7,
        8
      ],
      "mod_code": [
        "cout << \" * \"",
        "puts ( \" D \" ) ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "cout << \" * \"",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        5,
        8
      ],
      "mod_code": [
        "cout << \" * \"",
        "for ( j = 0 ; j < n ; j ++ )",
        "do"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "cout << \" * \"",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "puts ( \" D \" ) ;",
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        5,
        8
      ],
      "mod_code": [
        "puts ( \" D \" ) ;",
        "for ( j = 0 ; j < n ; j ++ )",
        "do"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "puts ( \" D \" ) ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )",
        "do"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    }
  ]
}