{
  "meta": {
    "index": 2243,
    "hitid": "3K2CEDRACBV3US3CEBQK90WKLHNTMU",
    "workerid": "A1APYLD4DUK33J",
    "probid": "82A",
    "subid": "41659631"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare string array strs = { \" Sheldon \\ n \" , \" Leonard \\ n \" , \" Penny \\ n \" , \" Rajesh \\ n \" , \" Howard \\ n \" }",
      "code": "string strs [ ] = { \" Sheldon\\n \" , \" Leonard\\n \" , \" Penny\\n \" , \" Rajesh\\n \" , \" Howard\\n \" } ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare n as integer = 0",
      "code": "int n = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while read n",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare integer i = 1",
      "code": "int i = 1 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "while n is greater than i * 5",
      "code": "while ( n > i * 5 )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "decrement n by i * 5",
      "code": "n -= i * 5 ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "let i be i bitshift left 1",
      "code": "i <<= 1 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 9,
      "text": "declare integer a = n / i",
      "code": "int a = n / i ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if n % i , increment a",
      "code": "if ( n % i ) a ++ ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print strs [ a - 1 ]",
      "code": "cout << strs [ a - 1 ] ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( gets ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        11,
        3
      ],
      "mod_code": [
        "string strs [ ] = { \" 1/6 \" , \" 1/3 \" , \" D\\n \" , \" D\\n \" } ;",
        "cout << strs [ a - 1 ] << endl ;",
        "while ( gets ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        11,
        3,
        7
      ],
      "mod_code": [
        "string strs [ ] = { \" 1/6 \" , \" 1/3 \" , \" D\\n \" , \" D\\n \" } ;",
        "cout << strs [ a - 1 ] << endl ;",
        "while ( gets ( cin >> n )",
        "i = i >> 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "string strs [ ] = { \" 1/6 \" , \" 1/3 \" , \" D\\n \" , \" D\\n \" } ;",
        "while ( gets ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        7
      ],
      "mod_code": [
        "string strs [ ] = { \" 1/6 \" , \" 1/3 \" , \" D\\n \" , \" D\\n \" } ;",
        "while ( gets ( cin >> n )",
        "i = i >> 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "cout << strs [ a - 1 ] << endl ;",
        "while ( gets ( cin >> n )"
      ],
      "err_line": 3,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        3,
        7
      ],
      "mod_code": [
        "cout << strs [ a - 1 ] << endl ;",
        "while ( gets ( cin >> n )",
        "i = i >> 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        3,
        7,
        1
      ],
      "mod_code": [
        "cout << strs [ a - 1 ] << endl ;",
        "while ( gets ( cin >> n )",
        "i = i >> 1 ;",
        "string strs [ ] = { \" 1/6 \" , \" 1/2 \" , \" D\\n \" , \" D\\n \" } ;"
      ],
      "err_line": 3,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        3,
        1
      ],
      "mod_code": [
        "cout << strs [ a - 1 ] << endl ;",
        "while ( gets ( cin >> n )",
        "string strs [ ] = { \" 1/6 \" , \" 1/2 \" , \" D\\n \" , \" D\\n \" } ;"
      ],
      "err_line": 3,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "while ( gets ( cin >> n )",
        "i = i >> 1 ;"
      ],
      "err_line": 3,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7,
        1
      ],
      "mod_code": [
        "while ( gets ( cin >> n )",
        "i = i >> 1 ;",
        "string strs [ ] = { \" 1/6 \" , \" 1/2 \" , \" D\\n \" , \" D\\n \" } ;"
      ],
      "err_line": 3,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "while ( gets ( cin >> n )",
        "string strs [ ] = { \" 1/6 \" , \" 1/2 \" , \" D\\n \" , \" D\\n \" } ;"
      ],
      "err_line": 3,
      "err_msg": "invalid user-defined conversion from ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    }
  ]
}