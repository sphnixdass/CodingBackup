{
  "meta": {
    "index": 2266,
    "hitid": "3511RHPADV868V8ZAAKA98GDXR7RLK",
    "workerid": "AIWEXPJAU66D9",
    "probid": "58A",
    "subid": "48962874"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "define new string called s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read input to s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "pos is a new size_t = 0",
      "code": "size_t pos = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "add 1 to pos while pos < length of s and s [ pos ] is not ' h '",
      "code": "while ( pos < s . length ( ) && s [ pos ] != ' h ' ) ++ pos ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "increment pos",
      "code": "++ pos ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "while pos < length of s and s [ pos ] is not ' e ' , add 1 to pos",
      "code": "while ( pos < s . length ( ) && s [ pos ] != ' e ' ) ++ pos ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "add 1 to pos",
      "code": "++ pos ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "while pos < length of s and s [ pos ] is not ' l ' , increment pos",
      "code": "while ( pos < s . length ( ) && s [ pos ] != ' l ' ) ++ pos ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "increase pos by 1",
      "code": "++ pos ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "increment pos while pos < length of s and s [ pos ] ! = ' l '",
      "code": "while ( pos < s . length ( ) && s [ pos ] != ' l ' ) ++ pos ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "increment pos",
      "code": "++ pos ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "while pos < length of s and s [ pos ] is not ' o ' , increase pos by 1",
      "code": "while ( pos < s . length ( ) && s [ pos ] != ' o ' ) ++ pos ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if pos is less than length of s",
      "code": "if ( pos < s . length ( ) )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string s = s . size ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "size_t pos = ' 0 ' ;",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        3,
        15,
        1
      ],
      "mod_code": [
        "size_t pos = ' 0 ' ;",
        "do",
        "string s = s . size ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "size_t pos = ' 0 ' ;",
        "string s = s . size ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        15,
        1
      ],
      "mod_code": [
        "do",
        "string s = s . size ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    }
  ]
}