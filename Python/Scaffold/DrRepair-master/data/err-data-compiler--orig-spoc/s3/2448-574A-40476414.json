{
  "meta": {
    "index": 2448,
    "hitid": "36QZ6V15897LS0V6YDCGQ5HSWKESUY",
    "workerid": "A1XZJAF9DYWJ5G",
    "probid": "574A",
    "subid": "40476414"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare a pointer called log that points to an integer value",
      "code": "int * log ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "allocate a block of memory with space for 5 integers for log",
      "code": "log = new int [ n ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n ( exclusive ) , read log [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> log [ i ] ; }",
      "indent": 1
    },
    {
      "line": 6,
      "text": "sort the second through the last elements of n from smallest to largest",
      "code": "sort ( log + 1 , log + n ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "k = integer with value of 0",
      "code": "int k = 0 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "create a while loop that runs indefinitely",
      "code": "while ( 1 )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if the value of log [ 0 ] is larger than the log [ n - 1 ] value",
      "code": "if ( log [ 0 ] > log [ n - 1 ] )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "exit the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "otherwise",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "increment log [ 0 ]",
      "code": "log [ 0 ] ++ ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "decrement log [ n - 1 ]",
      "code": "log [ n - 1 ] -- ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "increment k",
      "code": "k ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "sort the second through the last elements of n from smallest to largest",
      "code": "sort ( log + 1 , log + n ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print k",
      "code": "cout << k << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "log ( memory , memory , memory ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘memory’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "sort ( n , n + ( n ) . size ( ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }"
      ],
      "err_line": 9,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "sort ( n , n + ( n ) . size ( ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "request for member ‘size’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int * points = 1e-8 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘double’ to ‘int*’ in initialization"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "log ( log ( log ( log ) ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "sort ( n , n + ( n . size ( ) ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "k = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘k’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "while ( runs )"
      ],
      "err_line": 8,
      "err_msg": "‘runs’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( log ( log [ 0 ] ) )"
      ],
      "err_line": 9,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "return else ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "sort ( n , n + ( n . size ( ) ) ) ;"
      ],
      "err_line": 16,
      "err_msg": "request for member ‘size’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "log ( memory , memory , memory ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        6
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "log ( memory , memory , memory ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        9
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "log ( memory , memory , memory ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        16
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "log ( memory , memory , memory ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        10
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "log ( memory , memory , memory ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "continue ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        9
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "log ( memory , memory , memory ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        9,
        16
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "log ( memory , memory , memory ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }",
        "sort ( n , n + ( n ) . size ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        9,
        10
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "log ( memory , memory , memory ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }",
        "continue ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        16
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "log ( memory , memory , memory ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        16,
        10
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "log ( memory , memory , memory ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "continue ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        10
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "log ( memory , memory , memory ) ;",
        "continue ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        6,
        9
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        6,
        9,
        16
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }",
        "sort ( n , n + ( n ) . size ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        6,
        9,
        10
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }",
        "continue ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        6,
        16
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        6,
        16,
        10
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "continue ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        6,
        10
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "continue ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        9,
        16
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }",
        "sort ( n , n + ( n ) . size ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        9,
        16,
        10
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "continue ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        9,
        10
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }",
        "continue ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        16,
        10
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "continue ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        10
      ],
      "mod_code": [
        "int * log ( log ( log ) ) ;",
        "continue ;"
      ],
      "err_line": 3,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "log ( memory , memory , memory ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘memory’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        9
      ],
      "mod_code": [
        "log ( memory , memory , memory ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }"
      ],
      "err_line": 4,
      "err_msg": "‘memory’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        9,
        16
      ],
      "mod_code": [
        "log ( memory , memory , memory ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }",
        "sort ( n , n + ( n ) . size ( ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘memory’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        9,
        10
      ],
      "mod_code": [
        "log ( memory , memory , memory ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }",
        "continue ;"
      ],
      "err_line": 4,
      "err_msg": "‘memory’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        16
      ],
      "mod_code": [
        "log ( memory , memory , memory ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘memory’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        16,
        10
      ],
      "mod_code": [
        "log ( memory , memory , memory ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "continue ;"
      ],
      "err_line": 4,
      "err_msg": "‘memory’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        10
      ],
      "mod_code": [
        "log ( memory , memory , memory ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "continue ;"
      ],
      "err_line": 4,
      "err_msg": "‘memory’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "log ( memory , memory , memory ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }"
      ],
      "err_line": 4,
      "err_msg": "‘memory’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        16
      ],
      "mod_code": [
        "log ( memory , memory , memory ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }",
        "sort ( n , n + ( n ) . size ( ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘memory’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        16,
        10
      ],
      "mod_code": [
        "log ( memory , memory , memory ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "continue ;"
      ],
      "err_line": 4,
      "err_msg": "‘memory’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        9,
        10
      ],
      "mod_code": [
        "log ( memory , memory , memory ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }",
        "continue ;"
      ],
      "err_line": 4,
      "err_msg": "‘memory’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        16
      ],
      "mod_code": [
        "log ( memory , memory , memory ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘memory’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        16,
        10
      ],
      "mod_code": [
        "log ( memory , memory , memory ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "continue ;"
      ],
      "err_line": 4,
      "err_msg": "‘memory’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "log ( memory , memory , memory ) ;",
        "continue ;"
      ],
      "err_line": 4,
      "err_msg": "‘memory’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        6,
        9,
        16
      ],
      "mod_code": [
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }",
        "sort ( n , n + ( n ) . size ( ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        6,
        9,
        16,
        10
      ],
      "mod_code": [
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "continue ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        6,
        9,
        10
      ],
      "mod_code": [
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }",
        "continue ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        6,
        16
      ],
      "mod_code": [
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        6,
        16,
        10
      ],
      "mod_code": [
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "continue ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "continue ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘n’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        9,
        16
      ],
      "mod_code": [
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }",
        "sort ( n , n + ( n ) . size ( ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        9,
        16,
        10
      ],
      "mod_code": [
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }",
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "continue ;"
      ],
      "err_line": 9,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "if ( log ( log [ 0 ] ) ) { log ( n - 1 ] ) ; }",
        "continue ;"
      ],
      "err_line": 9,
      "err_msg": "‘log’ cannot be used as a function"
    },
    {
      "mod_line": [
        16,
        10
      ],
      "mod_code": [
        "sort ( n , n + ( n ) . size ( ) ) ;",
        "continue ;"
      ],
      "err_line": 16,
      "err_msg": "request for member ‘size’ in ‘n’, which is of non-class type ‘int’"
    }
  ]
}