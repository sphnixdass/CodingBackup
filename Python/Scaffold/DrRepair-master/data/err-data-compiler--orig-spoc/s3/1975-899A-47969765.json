{
  "meta": {
    "index": 1975,
    "hitid": "32TZXEA1OLEMHI2X6O6EH0WP77941Z",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "899A",
    "subid": "47969765"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , k = integers",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "a = integer with 0",
      "code": "int a = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "b = integer with 0",
      "code": "int b = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "Read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "Read k",
      "code": "cin >> k ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if k is 2",
      "code": "if ( k == 2 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set a to a + 1",
      "code": "a += 1 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set b to b + 1",
      "code": "b += 1 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if a is greater than b",
      "code": "if ( a > b )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print b and a new line",
      "code": "cout << b << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print a + ( b - a ) / 3 and a new line",
      "code": "cout << a + ( b - a ) / 3 << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "gets ( n ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "gets ( k ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "a = a + l ;"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "gets ( k ) ;",
        "gets ( n ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        4,
        8
      ],
      "mod_code": [
        "gets ( k ) ;",
        "gets ( n ) ;",
        "a = a + l ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        4,
        8,
        7
      ],
      "mod_code": [
        "gets ( k ) ;",
        "gets ( n ) ;",
        "a = a + l ;",
        "if ( ! k )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        4,
        8,
        15
      ],
      "mod_code": [
        "gets ( k ) ;",
        "gets ( n ) ;",
        "a = a + l ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        4,
        8,
        9
      ],
      "mod_code": [
        "gets ( k ) ;",
        "gets ( n ) ;",
        "a = a + l ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        4,
        7
      ],
      "mod_code": [
        "gets ( k ) ;",
        "gets ( n ) ;",
        "if ( ! k )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        4,
        7,
        15
      ],
      "mod_code": [
        "gets ( k ) ;",
        "gets ( n ) ;",
        "if ( ! k )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        4,
        7,
        9
      ],
      "mod_code": [
        "gets ( k ) ;",
        "gets ( n ) ;",
        "if ( ! k )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        4,
        15
      ],
      "mod_code": [
        "gets ( k ) ;",
        "gets ( n ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        4,
        15,
        9
      ],
      "mod_code": [
        "gets ( k ) ;",
        "gets ( n ) ;",
        "do",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        4,
        9
      ],
      "mod_code": [
        "gets ( k ) ;",
        "gets ( n ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "gets ( k ) ;",
        "a = a + l ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        7
      ],
      "mod_code": [
        "gets ( k ) ;",
        "a = a + l ;",
        "if ( ! k )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        7,
        15
      ],
      "mod_code": [
        "gets ( k ) ;",
        "a = a + l ;",
        "if ( ! k )",
        "do"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        7,
        9
      ],
      "mod_code": [
        "gets ( k ) ;",
        "a = a + l ;",
        "if ( ! k )",
        "do"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        15
      ],
      "mod_code": [
        "gets ( k ) ;",
        "a = a + l ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        15,
        9
      ],
      "mod_code": [
        "gets ( k ) ;",
        "a = a + l ;",
        "do",
        "do"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        9
      ],
      "mod_code": [
        "gets ( k ) ;",
        "a = a + l ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "gets ( k ) ;",
        "if ( ! k )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        15
      ],
      "mod_code": [
        "gets ( k ) ;",
        "if ( ! k )",
        "do"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        15,
        9
      ],
      "mod_code": [
        "gets ( k ) ;",
        "if ( ! k )",
        "do",
        "do"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        9
      ],
      "mod_code": [
        "gets ( k ) ;",
        "if ( ! k )",
        "do"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "gets ( k ) ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        15,
        9
      ],
      "mod_code": [
        "gets ( k ) ;",
        "do",
        "do"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "gets ( k ) ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "gets ( n ) ;",
        "a = a + l ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        8,
        7
      ],
      "mod_code": [
        "gets ( n ) ;",
        "a = a + l ;",
        "if ( ! k )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        8,
        7,
        15
      ],
      "mod_code": [
        "gets ( n ) ;",
        "a = a + l ;",
        "if ( ! k )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        8,
        7,
        9
      ],
      "mod_code": [
        "gets ( n ) ;",
        "a = a + l ;",
        "if ( ! k )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        8,
        15
      ],
      "mod_code": [
        "gets ( n ) ;",
        "a = a + l ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        8,
        15,
        9
      ],
      "mod_code": [
        "gets ( n ) ;",
        "a = a + l ;",
        "do",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        8,
        9
      ],
      "mod_code": [
        "gets ( n ) ;",
        "a = a + l ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "gets ( n ) ;",
        "if ( ! k )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        7,
        15
      ],
      "mod_code": [
        "gets ( n ) ;",
        "if ( ! k )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        7,
        15,
        9
      ],
      "mod_code": [
        "gets ( n ) ;",
        "if ( ! k )",
        "do",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        7,
        9
      ],
      "mod_code": [
        "gets ( n ) ;",
        "if ( ! k )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        15
      ],
      "mod_code": [
        "gets ( n ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        15,
        9
      ],
      "mod_code": [
        "gets ( n ) ;",
        "do",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "gets ( n ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "a = a + l ;",
        "if ( ! k )"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        7,
        15
      ],
      "mod_code": [
        "a = a + l ;",
        "if ( ! k )",
        "do"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        7,
        15,
        9
      ],
      "mod_code": [
        "a = a + l ;",
        "if ( ! k )",
        "do",
        "do"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        7,
        9
      ],
      "mod_code": [
        "a = a + l ;",
        "if ( ! k )",
        "do"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        15
      ],
      "mod_code": [
        "a = a + l ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        15,
        9
      ],
      "mod_code": [
        "a = a + l ;",
        "do",
        "do"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "a = a + l ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        15
      ],
      "mod_code": [
        "if ( ! k )",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        15,
        9
      ],
      "mod_code": [
        "if ( ! k )",
        "do",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "if ( ! k )",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        9
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}