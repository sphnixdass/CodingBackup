{
  "meta": {
    "index": 343,
    "hitid": "34ZTTGSNJXI4AYA96AGCCQD1KOSHQY",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "339A",
    "subid": "48887779"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "c1 , c2 , c3 = integers with c1 = 0 , c2 = 0 , c3 = 0",
      "code": "int c1 = 0 , c2 = 0 , c3 = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "res = character array of size s . length ( )",
      "code": "char res [ s . length ( ) ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to s . length ( ) exclusive",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if ( s [ i ] is 1 )",
      "code": "if ( s [ i ] == ' 1 ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment c1",
      "code": "c1 ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if ( s [ i ] is 2 )",
      "code": "else if ( s [ i ] == ' 2 ' )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment c2",
      "code": "c2 ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if ( s [ i ] is 3 )",
      "code": "else if ( s [ i ] == ' 3 ' )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increment c3",
      "code": "c3 ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "totalc = integer with totalc = c1 + c2 + c3",
      "code": "int totalc = c1 + c2 + c3 ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "printC = integer with printC = 0",
      "code": "int printC = 0 ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "while ( c1 is not 0 )",
      "code": "while ( c1 != 0 )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print 1",
      "code": "cout << \" 1 \" ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "increment printC",
      "code": "printC ++ ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if ( printC is totalc ) , break loop",
      "code": "if ( printC == totalc ) { break ; }",
      "indent": 2
    },
    {
      "line": 20,
      "text": "print +",
      "code": "cout << \" + \" ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "decrement c1",
      "code": "c1 -- ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "while ( c2 is not 0 )",
      "code": "while ( c2 != 0 )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "print 2",
      "code": "cout << \" 2 \" ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "increment printC",
      "code": "printC ++ ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "if ( printC i totalc ) , break loop",
      "code": "if ( printC == totalc ) { break ; }",
      "indent": 2
    },
    {
      "line": 27,
      "text": "print +",
      "code": "cout << \" + \" ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "decrement c2",
      "code": "c2 -- ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "while ( c3 is not 0 )",
      "code": "while ( c3 != 0 )",
      "indent": 1
    },
    {
      "line": 31,
      "text": "print 3",
      "code": "cout << \" 3 \" ;",
      "indent": 2
    },
    {
      "line": 32,
      "text": "increment printC",
      "code": "printC ++ ;",
      "indent": 2
    },
    {
      "line": 33,
      "text": "if ( printC is totalc ) , break loop",
      "code": "if ( printC == totalc ) { break ; }",
      "indent": 2
    },
    {
      "line": 34,
      "text": "print +",
      "code": "cout << \" + \" ;",
      "indent": 2
    },
    {
      "line": 35,
      "text": "decrement c3",
      "code": "c3 -- ;",
      "indent": 2
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 37,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "if ( printC [ i ] ) break ;"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int c1 = 0 , c2 = 0 , c3 = 0 , c3 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int c3’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "int totalc += c2 + c3 ;"
      ],
      "err_line": 14,
      "err_msg": "expected initializer before ‘+=’ token"
    },
    {
      "mod_line": [
        17,
        24,
        26
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "cout << 2 << endl ;",
        "if ( printC [ i ] ) break ;"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        24,
        26,
        31
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "cout << 2 << endl ;",
        "if ( printC [ i ] ) break ;",
        "cout << 3 << endl ;"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        24,
        26,
        10
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "cout << 2 << endl ;",
        "if ( printC [ i ] ) break ;",
        "else if ( s [ i ] == 3 )"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        24,
        26,
        2
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "cout << 2 << endl ;",
        "if ( printC [ i ] ) break ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        24,
        31,
        2
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "cout << 2 << endl ;",
        "cout << 3 << endl ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        24,
        10,
        2
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "cout << 2 << endl ;",
        "else if ( s [ i ] == 3 )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        24,
        2
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "cout << 2 << endl ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        26
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "if ( printC [ i ] ) break ;"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        26,
        31
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "if ( printC [ i ] ) break ;",
        "cout << 3 << endl ;"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        26,
        31,
        10
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "if ( printC [ i ] ) break ;",
        "cout << 3 << endl ;",
        "else if ( s [ i ] == 3 )"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        26,
        31,
        2
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "if ( printC [ i ] ) break ;",
        "cout << 3 << endl ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        26,
        10
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "if ( printC [ i ] ) break ;",
        "else if ( s [ i ] == 3 )"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        26,
        10,
        2
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "if ( printC [ i ] ) break ;",
        "else if ( s [ i ] == 3 )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        26,
        2
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "if ( printC [ i ] ) break ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        31,
        10,
        2
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "cout << 3 << endl ;",
        "else if ( s [ i ] == 3 )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        31,
        2
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "cout << 3 << endl ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        10,
        2
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "else if ( s [ i ] == 3 )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        2
      ],
      "mod_code": [
        "cout << 1 << endl ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        24,
        26
      ],
      "mod_code": [
        "cout << 2 << endl ;",
        "if ( printC [ i ] ) break ;"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        24,
        26,
        31
      ],
      "mod_code": [
        "cout << 2 << endl ;",
        "if ( printC [ i ] ) break ;",
        "cout << 3 << endl ;"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        24,
        26,
        31,
        10
      ],
      "mod_code": [
        "cout << 2 << endl ;",
        "if ( printC [ i ] ) break ;",
        "cout << 3 << endl ;",
        "else if ( s [ i ] == 3 )"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        24,
        26,
        31,
        2
      ],
      "mod_code": [
        "cout << 2 << endl ;",
        "if ( printC [ i ] ) break ;",
        "cout << 3 << endl ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        24,
        26,
        10
      ],
      "mod_code": [
        "cout << 2 << endl ;",
        "if ( printC [ i ] ) break ;",
        "else if ( s [ i ] == 3 )"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        24,
        26,
        10,
        2
      ],
      "mod_code": [
        "cout << 2 << endl ;",
        "if ( printC [ i ] ) break ;",
        "else if ( s [ i ] == 3 )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        24,
        26,
        2
      ],
      "mod_code": [
        "cout << 2 << endl ;",
        "if ( printC [ i ] ) break ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        24,
        31,
        10,
        2
      ],
      "mod_code": [
        "cout << 2 << endl ;",
        "cout << 3 << endl ;",
        "else if ( s [ i ] == 3 )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        24,
        31,
        2
      ],
      "mod_code": [
        "cout << 2 << endl ;",
        "cout << 3 << endl ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        24,
        10,
        2
      ],
      "mod_code": [
        "cout << 2 << endl ;",
        "else if ( s [ i ] == 3 )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        24,
        2
      ],
      "mod_code": [
        "cout << 2 << endl ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        31
      ],
      "mod_code": [
        "if ( printC [ i ] ) break ;",
        "cout << 3 << endl ;"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        31,
        10
      ],
      "mod_code": [
        "if ( printC [ i ] ) break ;",
        "cout << 3 << endl ;",
        "else if ( s [ i ] == 3 )"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        31,
        10,
        2
      ],
      "mod_code": [
        "if ( printC [ i ] ) break ;",
        "cout << 3 << endl ;",
        "else if ( s [ i ] == 3 )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        31,
        2
      ],
      "mod_code": [
        "if ( printC [ i ] ) break ;",
        "cout << 3 << endl ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        10
      ],
      "mod_code": [
        "if ( printC [ i ] ) break ;",
        "else if ( s [ i ] == 3 )"
      ],
      "err_line": 26,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        26,
        10,
        2
      ],
      "mod_code": [
        "if ( printC [ i ] ) break ;",
        "else if ( s [ i ] == 3 )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        26,
        2
      ],
      "mod_code": [
        "if ( printC [ i ] ) break ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        31,
        10,
        2
      ],
      "mod_code": [
        "cout << 3 << endl ;",
        "else if ( s [ i ] == 3 )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        31,
        2
      ],
      "mod_code": [
        "cout << 3 << endl ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "else if ( s [ i ] == 3 )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}