{
  "meta": {
    "index": 2017,
    "hitid": "30P8I9JKOIFKZDMVR79DTG9JVKJ5VR",
    "workerid": "A1AYVATMT88U1W",
    "probid": "1032A",
    "subid": "46888623"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n , k be integers",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "initialize 101th element of array uts to , open bracket",
      "code": "int uts [ 101 ] =",
      "indent": 1
    },
    {
      "line": 3,
      "text": "0 ( zero )",
      "code": "0 ,",
      "indent": 2
    },
    {
      "line": 4,
      "text": "close the bracket",
      "code": ";",
      "indent": 1
    },
    {
      "line": 5,
      "text": "initialize 101th element of array freq to , open bracket",
      "code": "int freq [ 101 ] =",
      "indent": 1
    },
    {
      "line": 6,
      "text": "0 ( zero )",
      "code": "0 ,",
      "indent": 2
    },
    {
      "line": 7,
      "text": "close the bracket",
      "code": ";",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read n and k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for ( i = 0 to n exclusive ) , read the ith element of array uts",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cin >> uts [ i ] ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "sort the values ( uts and uts + n )",
      "code": "sort ( uts , uts + n ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "let integer kind is equal to 1",
      "code": "int kind = 1 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for ( i = 0 to n exclusive )",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if ( [ i + 1 ] th element of array uts is equal to ith element of array uts )",
      "code": "if ( uts [ i + 1 ] == uts [ i ] )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "increase the value of freq [ kind ] by 1",
      "code": "freq [ kind ] ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 16,
      "text": "increase the value of freq [ kind ] by 1",
      "code": "freq [ kind ] ++ ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "increase the value of kind by 1",
      "code": "kind ++ ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "decrease the value of kind by 1",
      "code": "kind -- ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "let the value of integer maxcount is equal to 0",
      "code": "int maxcount = 0 ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "for ( int i = 1 to kind inclusive )",
      "code": "for ( int i = 1 ; i <= kind ; i ++ )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "if ( maxcount is less than ith element of array freq ) , maxcount is equal to ith element of freq",
      "code": "if ( maxcount < freq [ i ] ) maxcount = freq [ i ] ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "let integer ans is equal to 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "let integer temp is equal to 0",
      "code": "int temp = 0 ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "let temp is equal to maxcount",
      "code": "temp = maxcount ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "while ( temp % k is not equal to 0 ) , increase the value of temp by 1",
      "code": "while ( temp % k != 0 ) { temp ++ ; }",
      "indent": 1
    },
    {
      "line": 29,
      "text": "for ( int i = 1 to kind inclusive ) , ans is equal to ( ans + temp - freq [ i ] )",
      "code": "for ( int i = 1 ; i <= kind ; i ++ ) ans += temp - freq [ i ] ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print ans and newline",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "0 ( 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        ";"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "freq [ 0 ] = { 0 } ;"
      ],
      "err_line": 5,
      "err_msg": "‘freq’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "0 ( 0 ) ;"
      ],
      "err_line": 6,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        ";"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "uts . pop_back ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "0 ( zero ( zero ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘zero’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "getchar ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "freq [ 4 ] = { 0 } ;"
      ],
      "err_line": 5,
      "err_msg": "‘freq’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "0 ( zero ( zero ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘zero’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "getchar ( ) ;"
      ],
      "err_line": 7,
      "err_msg": "expected ‘}’ before ‘;’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "kind = 1 ;"
      ],
      "err_line": 11,
      "err_msg": "‘kind’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 12,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "maxcount = 0 ;"
      ],
      "err_line": 21,
      "err_msg": "‘maxcount’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "if ( maxcount < freq [ 0 ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "ans = 0 ;"
      ],
      "err_line": 25,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "temp = 0 ;"
      ],
      "err_line": 26,
      "err_msg": "‘temp’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        4
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        ";"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        5
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        ";",
        "freq [ 0 ] = { 0 } ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        6
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        ";",
        "0 ( 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        7
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        ";",
        ";"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        13
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        ";",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        5
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "freq [ 0 ] = { 0 } ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        6
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        7
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "freq [ 0 ] = { 0 } ;",
        ";"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        13
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "freq [ 0 ] = { 0 } ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "freq [ 0 ] = { 0 } ;",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        6
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "0 ( 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        7
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "0 ( 0 ) ;",
        ";"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        13
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "0 ( 0 ) ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "0 ( 0 ) ;",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        7
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        ";"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        13
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        ";",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        13
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        13,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        3,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        ";"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        5
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        ";",
        "freq [ 0 ] = { 0 } ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        6
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        ";",
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        7
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        ";",
        "freq [ 0 ] = { 0 } ;",
        ";"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        13
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        ";",
        "freq [ 0 ] = { 0 } ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        ";",
        "freq [ 0 ] = { 0 } ;",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        6
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        ";",
        "0 ( 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        7
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        ";",
        "0 ( 0 ) ;",
        ";"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        13
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        ";",
        "0 ( 0 ) ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        ";",
        "0 ( 0 ) ;",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        7
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        ";",
        ";"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        7,
        13
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        ";",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        7,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        ";",
        ";",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        13
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        13,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        4,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        ";",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "freq [ 0 ] = { 0 } ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        6
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        7
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        ";"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        13
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        7
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "freq [ 0 ] = { 0 } ;",
        ";"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        7,
        13
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "freq [ 0 ] = { 0 } ;",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        7,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "freq [ 0 ] = { 0 } ;",
        ";",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        13
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "freq [ 0 ] = { 0 } ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        13,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "freq [ 0 ] = { 0 } ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "freq [ 0 ] = { 0 } ;",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        7
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        ";"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        7,
        13
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        7,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        ";",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        13
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        13,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        ";"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        13
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        13,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        7,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        ";",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        13,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        23
      ],
      "mod_code": [
        "uts [ 0 ] = { 0 } ;",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 2,
      "err_msg": "‘uts’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        5
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";",
        "freq [ 0 ] = { 0 } ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        6
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";",
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        7
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";",
        "freq [ 0 ] = { 0 } ;",
        ";"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        13
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";",
        "freq [ 0 ] = { 0 } ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        23
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";",
        "freq [ 0 ] = { 0 } ;",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        6
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";",
        "0 ( 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        7
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";",
        "0 ( 0 ) ;",
        ";"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        13
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";",
        "0 ( 0 ) ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        23
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";",
        "0 ( 0 ) ;",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        7
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";",
        ";"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        13
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        23
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";",
        ";",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        13
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        13,
        23
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        4,
        23
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "freq [ 0 ] = { 0 } ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        5,
        6
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        7
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        ";"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        13
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        23
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        5,
        7
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "freq [ 0 ] = { 0 } ;",
        ";"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        13
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "freq [ 0 ] = { 0 } ;",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        23
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "freq [ 0 ] = { 0 } ;",
        ";",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        5,
        13
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "freq [ 0 ] = { 0 } ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        5,
        13,
        23
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "freq [ 0 ] = { 0 } ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        5,
        23
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "freq [ 0 ] = { 0 } ;",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "0 ( 0 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        6,
        7
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "0 ( 0 ) ;",
        ";"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        13
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "0 ( 0 ) ;",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        23
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "0 ( 0 ) ;",
        ";",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        6,
        13
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "0 ( 0 ) ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        6,
        13,
        23
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "0 ( 0 ) ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        6,
        23
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "0 ( 0 ) ;",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        7,
        13
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        7,
        13,
        23
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        7,
        23
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        13,
        23
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        3,
        23
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        ";",
        "freq [ 0 ] = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        5,
        6
      ],
      "mod_code": [
        ";",
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        7
      ],
      "mod_code": [
        ";",
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        ";"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        13
      ],
      "mod_code": [
        ";",
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        23
      ],
      "mod_code": [
        ";",
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        5,
        7
      ],
      "mod_code": [
        ";",
        "freq [ 0 ] = { 0 } ;",
        ";"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        13
      ],
      "mod_code": [
        ";",
        "freq [ 0 ] = { 0 } ;",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        23
      ],
      "mod_code": [
        ";",
        "freq [ 0 ] = { 0 } ;",
        ";",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        5,
        13
      ],
      "mod_code": [
        ";",
        "freq [ 0 ] = { 0 } ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        5,
        13,
        23
      ],
      "mod_code": [
        ";",
        "freq [ 0 ] = { 0 } ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        5,
        23
      ],
      "mod_code": [
        ";",
        "freq [ 0 ] = { 0 } ;",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        ";",
        "0 ( 0 ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        6,
        7
      ],
      "mod_code": [
        ";",
        "0 ( 0 ) ;",
        ";"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        6,
        7,
        13
      ],
      "mod_code": [
        ";",
        "0 ( 0 ) ;",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        6,
        7,
        23
      ],
      "mod_code": [
        ";",
        "0 ( 0 ) ;",
        ";",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        6,
        13
      ],
      "mod_code": [
        ";",
        "0 ( 0 ) ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        6,
        13,
        23
      ],
      "mod_code": [
        ";",
        "0 ( 0 ) ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        6,
        23
      ],
      "mod_code": [
        ";",
        "0 ( 0 ) ;",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        ";",
        ";"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        7,
        13
      ],
      "mod_code": [
        ";",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        7,
        13,
        23
      ],
      "mod_code": [
        ";",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        7,
        23
      ],
      "mod_code": [
        ";",
        ";",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        13,
        23
      ],
      "mod_code": [
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        4,
        23
      ],
      "mod_code": [
        ";",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘freq’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        7
      ],
      "mod_code": [
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        ";"
      ],
      "err_line": 5,
      "err_msg": "‘freq’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        7,
        13
      ],
      "mod_code": [
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 5,
      "err_msg": "‘freq’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        7,
        23
      ],
      "mod_code": [
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        ";",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘freq’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        13
      ],
      "mod_code": [
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 5,
      "err_msg": "‘freq’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        13,
        23
      ],
      "mod_code": [
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘freq’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        23
      ],
      "mod_code": [
        "freq [ 0 ] = { 0 } ;",
        "0 ( 0 ) ;",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘freq’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "freq [ 0 ] = { 0 } ;",
        ";"
      ],
      "err_line": 5,
      "err_msg": "‘freq’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        13
      ],
      "mod_code": [
        "freq [ 0 ] = { 0 } ;",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 5,
      "err_msg": "‘freq’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        13,
        23
      ],
      "mod_code": [
        "freq [ 0 ] = { 0 } ;",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘freq’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        7,
        23
      ],
      "mod_code": [
        "freq [ 0 ] = { 0 } ;",
        ";",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘freq’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "freq [ 0 ] = { 0 } ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 5,
      "err_msg": "‘freq’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        13,
        23
      ],
      "mod_code": [
        "freq [ 0 ] = { 0 } ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘freq’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        23
      ],
      "mod_code": [
        "freq [ 0 ] = { 0 } ;",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘freq’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";"
      ],
      "err_line": 6,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        6,
        7,
        13
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 6,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        6,
        7,
        13,
        23
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        6,
        7,
        23
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        ";",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 6,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        6,
        13,
        23
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        6,
        23
      ],
      "mod_code": [
        "0 ( 0 ) ;",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        7,
        13
      ],
      "mod_code": [
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        13,
        23
      ],
      "mod_code": [
        ";",
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        23
      ],
      "mod_code": [
        ";",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 7,
      "err_msg": "expected primary-expression before ‘;’ token"
    },
    {
      "mod_line": [
        13,
        23
      ],
      "mod_code": [
        "if ( uts [ i + 1 ] == uts [ i + 1 ] )",
        "if ( maxcount < freq [ i ] ) maxcount = maxcount [ i ] ;"
      ],
      "err_line": 23,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}