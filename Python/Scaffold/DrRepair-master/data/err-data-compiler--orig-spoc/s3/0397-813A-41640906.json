{
  "meta": {
    "index": 397,
    "hitid": "3DIIW4IV8PPXHOYVEVRK9ZDBO9N4IU",
    "workerid": "A1APYLD4DUK33J",
    "probid": "813A",
    "subid": "41640906"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare maxn = 100005 as integer",
      "code": "const int maxn = 100005 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers n , m , integer arrays a size maxn , l size maxn , r size maxn , sub size maxn",
      "code": "int n , a [ maxn ] , l [ maxn ] , r [ maxn ] , m , sub [ maxn ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "while read n is true",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set bytes from sub to size of sub to value 0",
      "code": "memset ( sub , 0 , sizeof ( sub ) ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "declare integers i , j , f = 0",
      "code": "int i , j , f = 0 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "for i = 1 to n inclusive , read a [ i ]",
      "code": "for ( i = 1 ; i <= n ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "read m",
      "code": "cin >> m ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for i = 1 to m inclusive , read l [ i ] and r [ i ]",
      "code": "for ( i = 1 ; i <= m ; i ++ ) { cin >> l [ i ] >> r [ i ] ; }",
      "indent": 2
    },
    {
      "line": 9,
      "text": "declare long long sum = 0",
      "code": "long long sum = 0 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "let j be 1",
      "code": "j = 1 ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "for i = 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if j is greater than m , break loop",
      "code": "if ( j > m ) break ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "if f is 0 , increment sum by a [ i ]",
      "code": "if ( f == 0 ) sum += a [ i ] ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "let f be 0",
      "code": "f = 0 ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "if sum is less than or equal to r [ j ]",
      "code": "if ( sum <= r [ j ] )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "let sub [ i ] be 1",
      "code": "sub [ i ] = 1 ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 18,
      "text": "increment j",
      "code": "j ++ ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "let f be 1",
      "code": "f = 1 ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "decrement i",
      "code": "i -- ;",
      "indent": 4
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "let f = 1",
      "code": "f = 1 ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "for i = 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if sub [ i ] is 0",
      "code": "if ( sub [ i ] == 0 )",
      "indent": 3
    },
    {
      "line": 26,
      "text": "let f be 0",
      "code": "f = 0 ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "if f is 0",
      "code": "if ( f == 0 )",
      "indent": 2
    },
    {
      "line": 31,
      "text": "print \" - 1 \" , newline",
      "code": "cout << \" -1 \" << endl ;",
      "indent": 3
    },
    {
      "line": 32,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 33,
      "text": "if sum is less than l [ j ]",
      "code": "if ( sum < l [ j ] )",
      "indent": 3
    },
    {
      "line": 34,
      "text": "print l [ j ] , newline",
      "code": "cout << l [ j ] << endl ;",
      "indent": 4
    },
    {
      "line": 35,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 36,
      "text": "print sum , newline",
      "code": "cout << sum << endl ;",
      "indent": 4
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int maxn = 100005 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , a [ maxn ] , l [ maxn ] , sub [ maxn ] , sub [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int sub [100005]’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , a [ maxn ] , r [ maxn ] , sub [ maxn ] , sub [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int sub [100005]’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "gets ( m ) ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int j = 1 ;"
      ],
      "err_line": 10,
      "err_msg": "redeclaration of ‘int j’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( sum ] <= r [ j ] )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "int f = 1 ;"
      ],
      "err_line": 23,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 28,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        32
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 38,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        35
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 37,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int maxn = 100005 ;",
        "int n , a [ maxn ] , l [ maxn ] , sub [ maxn ] , sub [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        1,
        3
      ],
      "mod_code": [
        "int maxn = 100005 ;",
        "int n , a [ maxn ] , l [ maxn ] , sub [ maxn ] , sub [ maxn ] ;",
        "while ( n ++ )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        1,
        3,
        19
      ],
      "mod_code": [
        "int maxn = 100005 ;",
        "int n , a [ maxn ] , l [ maxn ] , sub [ maxn ] , sub [ maxn ] ;",
        "while ( n ++ )",
        "int f = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        1,
        3,
        15
      ],
      "mod_code": [
        "int maxn = 100005 ;",
        "int n , a [ maxn ] , l [ maxn ] , sub [ maxn ] , sub [ maxn ] ;",
        "while ( n ++ )",
        "if ( sum ] <= r [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        1,
        19
      ],
      "mod_code": [
        "int maxn = 100005 ;",
        "int n , a [ maxn ] , l [ maxn ] , sub [ maxn ] , sub [ maxn ] ;",
        "int f = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        1,
        19,
        15
      ],
      "mod_code": [
        "int maxn = 100005 ;",
        "int n , a [ maxn ] , l [ maxn ] , sub [ maxn ] , sub [ maxn ] ;",
        "int f = 1 ;",
        "if ( sum ] <= r [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        1,
        15
      ],
      "mod_code": [
        "int maxn = 100005 ;",
        "int n , a [ maxn ] , l [ maxn ] , sub [ maxn ] , sub [ maxn ] ;",
        "if ( sum ] <= r [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        3
      ],
      "mod_code": [
        "int maxn = 100005 ;",
        "while ( n ++ )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        3,
        19
      ],
      "mod_code": [
        "int maxn = 100005 ;",
        "while ( n ++ )",
        "int f = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        3,
        19,
        15
      ],
      "mod_code": [
        "int maxn = 100005 ;",
        "while ( n ++ )",
        "int f = 1 ;",
        "if ( sum ] <= r [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        3,
        19,
        1
      ],
      "mod_code": [
        "int maxn = 100005 ;",
        "while ( n ++ )",
        "int f = 1 ;",
        "int n , a [ maxn ] , r [ maxn ] , sub [ maxn ] , sub [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        3,
        15
      ],
      "mod_code": [
        "int maxn = 100005 ;",
        "while ( n ++ )",
        "if ( sum ] <= r [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        3,
        15,
        1
      ],
      "mod_code": [
        "int maxn = 100005 ;",
        "while ( n ++ )",
        "if ( sum ] <= r [ j ] )",
        "int n , a [ maxn ] , r [ maxn ] , sub [ maxn ] , sub [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        3,
        1
      ],
      "mod_code": [
        "int maxn = 100005 ;",
        "while ( n ++ )",
        "int n , a [ maxn ] , r [ maxn ] , sub [ maxn ] , sub [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        19
      ],
      "mod_code": [
        "int maxn = 100005 ;",
        "int f = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        19,
        15
      ],
      "mod_code": [
        "int maxn = 100005 ;",
        "int f = 1 ;",
        "if ( sum ] <= r [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        19,
        15,
        1
      ],
      "mod_code": [
        "int maxn = 100005 ;",
        "int f = 1 ;",
        "if ( sum ] <= r [ j ] )",
        "int n , a [ maxn ] , r [ maxn ] , sub [ maxn ] , sub [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        19,
        1
      ],
      "mod_code": [
        "int maxn = 100005 ;",
        "int f = 1 ;",
        "int n , a [ maxn ] , r [ maxn ] , sub [ maxn ] , sub [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        15
      ],
      "mod_code": [
        "int maxn = 100005 ;",
        "if ( sum ] <= r [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        15,
        1
      ],
      "mod_code": [
        "int maxn = 100005 ;",
        "if ( sum ] <= r [ j ] )",
        "int n , a [ maxn ] , r [ maxn ] , sub [ maxn ] , sub [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int maxn = 100005 ;",
        "int n , a [ maxn ] , r [ maxn ] , sub [ maxn ] , sub [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "array bound is not an integer constant before ‘]’ token"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int n , a [ maxn ] , l [ maxn ] , sub [ maxn ] , sub [ maxn ] ;",
        "while ( n ++ )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int sub [100005]’"
    },
    {
      "mod_line": [
        1,
        3,
        19
      ],
      "mod_code": [
        "int n , a [ maxn ] , l [ maxn ] , sub [ maxn ] , sub [ maxn ] ;",
        "while ( n ++ )",
        "int f = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int sub [100005]’"
    },
    {
      "mod_line": [
        1,
        3,
        19,
        15
      ],
      "mod_code": [
        "int n , a [ maxn ] , l [ maxn ] , sub [ maxn ] , sub [ maxn ] ;",
        "while ( n ++ )",
        "int f = 1 ;",
        "if ( sum ] <= r [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int sub [100005]’"
    },
    {
      "mod_line": [
        1,
        3,
        15
      ],
      "mod_code": [
        "int n , a [ maxn ] , l [ maxn ] , sub [ maxn ] , sub [ maxn ] ;",
        "while ( n ++ )",
        "if ( sum ] <= r [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int sub [100005]’"
    },
    {
      "mod_line": [
        1,
        19
      ],
      "mod_code": [
        "int n , a [ maxn ] , l [ maxn ] , sub [ maxn ] , sub [ maxn ] ;",
        "int f = 1 ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int sub [100005]’"
    },
    {
      "mod_line": [
        1,
        19,
        15
      ],
      "mod_code": [
        "int n , a [ maxn ] , l [ maxn ] , sub [ maxn ] , sub [ maxn ] ;",
        "int f = 1 ;",
        "if ( sum ] <= r [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int sub [100005]’"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "int n , a [ maxn ] , l [ maxn ] , sub [ maxn ] , sub [ maxn ] ;",
        "if ( sum ] <= r [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int sub [100005]’"
    },
    {
      "mod_line": [
        3,
        19,
        15
      ],
      "mod_code": [
        "while ( n ++ )",
        "int f = 1 ;",
        "if ( sum ] <= r [ j ] )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        19,
        15,
        1
      ],
      "mod_code": [
        "while ( n ++ )",
        "int f = 1 ;",
        "if ( sum ] <= r [ j ] )",
        "int n , a [ maxn ] , r [ maxn ] , sub [ maxn ] , sub [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int sub [100005]’"
    },
    {
      "mod_line": [
        3,
        19,
        1
      ],
      "mod_code": [
        "while ( n ++ )",
        "int f = 1 ;",
        "int n , a [ maxn ] , r [ maxn ] , sub [ maxn ] , sub [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int sub [100005]’"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "while ( n ++ )",
        "if ( sum ] <= r [ j ] )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        15,
        1
      ],
      "mod_code": [
        "while ( n ++ )",
        "if ( sum ] <= r [ j ] )",
        "int n , a [ maxn ] , r [ maxn ] , sub [ maxn ] , sub [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int sub [100005]’"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "while ( n ++ )",
        "int n , a [ maxn ] , r [ maxn ] , sub [ maxn ] , sub [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int sub [100005]’"
    },
    {
      "mod_line": [
        19,
        15
      ],
      "mod_code": [
        "int f = 1 ;",
        "if ( sum ] <= r [ j ] )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘)’ before ‘]’ token"
    },
    {
      "mod_line": [
        19,
        15,
        1
      ],
      "mod_code": [
        "int f = 1 ;",
        "if ( sum ] <= r [ j ] )",
        "int n , a [ maxn ] , r [ maxn ] , sub [ maxn ] , sub [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int sub [100005]’"
    },
    {
      "mod_line": [
        19,
        1
      ],
      "mod_code": [
        "int f = 1 ;",
        "int n , a [ maxn ] , r [ maxn ] , sub [ maxn ] , sub [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int sub [100005]’"
    },
    {
      "mod_line": [
        15,
        1
      ],
      "mod_code": [
        "if ( sum ] <= r [ j ] )",
        "int n , a [ maxn ] , r [ maxn ] , sub [ maxn ] , sub [ maxn ] ;"
      ],
      "err_line": 1,
      "err_msg": "redefinition of ‘int sub [100005]’"
    }
  ]
}