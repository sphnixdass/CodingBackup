{
  "meta": {
    "index": 846,
    "hitid": "3UUIU9GZC5Z5MLI6MC9YSYLYZM0T57",
    "workerid": "ACI8PUCF5OPDC",
    "probid": "987A",
    "subid": "48782961"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integers n , a , b , c , d , e , f",
      "code": "int n , a , b , c , d , e , f ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for integer i = 1 to n with increment i",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if s is equal to \" purple \" then increment a",
      "code": "if ( s == \" purple \" ) a ++ ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if s is equal to \" green \" then increment b",
      "code": "if ( s == \" green \" ) b ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if s is equal to \" blue \" then increment c",
      "code": "if ( s == \" blue \" ) c ++ ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if s is equal to \" orange \" then increment d",
      "code": "if ( s == \" orange \" ) d ++ ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if s is equal to \" red \" then increment e",
      "code": "if ( s == \" red \" ) e ++ ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if s is equal to \" yellow \" then increment f",
      "code": "if ( s == \" yellow \" ) f ++ ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print 6 - n",
      "code": "cout << 6 - n << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if a is equal to 0 then print \" Power \"",
      "code": "if ( a == 0 ) { cout << \" Power \" << endl ; }",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if b is equal to 0 then print \" Time \"",
      "code": "if ( b == 0 ) { cout << \" Time \" << endl ; }",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if c is equal to 0 then print \" Space \"",
      "code": "if ( c == 0 ) { cout << \" Space \" << endl ; }",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if d is equal to 0 then print \" Soul \"",
      "code": "if ( d == 0 ) { cout << \" Soul \" << endl ; }",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if e is equal to 0 then print \" Reality \"",
      "code": "if ( e == 0 ) { cout << \" Reality \" << endl ; }",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if f is equal to 0 then print \" Mind \"",
      "code": "if ( f == 0 ) { cout << \" Mind \" << endl ; }",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 6,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        16,
        17,
        5
      ],
      "mod_code": [
        "if ( a == 0 ) cout << \" Power \" ;",
        "if ( c == 0 ) cout << \" Space \" ;",
        "if ( d == 0 ) cout << \" Soul \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        16,
        18,
        5
      ],
      "mod_code": [
        "if ( a == 0 ) cout << \" Power \" ;",
        "if ( c == 0 ) cout << \" Space \" ;",
        "if ( e == 0 ) cout << \" Reality \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        16,
        19,
        5
      ],
      "mod_code": [
        "if ( a == 0 ) cout << \" Power \" ;",
        "if ( c == 0 ) cout << \" Space \" ;",
        "if ( f == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        16,
        5
      ],
      "mod_code": [
        "if ( a == 0 ) cout << \" Power \" ;",
        "if ( c == 0 ) cout << \" Space \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        17,
        18,
        5
      ],
      "mod_code": [
        "if ( a == 0 ) cout << \" Power \" ;",
        "if ( d == 0 ) cout << \" Soul \" ;",
        "if ( e == 0 ) cout << \" Reality \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        17,
        19,
        5
      ],
      "mod_code": [
        "if ( a == 0 ) cout << \" Power \" ;",
        "if ( d == 0 ) cout << \" Soul \" ;",
        "if ( f == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        17,
        5
      ],
      "mod_code": [
        "if ( a == 0 ) cout << \" Power \" ;",
        "if ( d == 0 ) cout << \" Soul \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        18,
        19,
        5
      ],
      "mod_code": [
        "if ( a == 0 ) cout << \" Power \" ;",
        "if ( e == 0 ) cout << \" Reality \" ;",
        "if ( f == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        18,
        5
      ],
      "mod_code": [
        "if ( a == 0 ) cout << \" Power \" ;",
        "if ( e == 0 ) cout << \" Reality \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        19,
        5
      ],
      "mod_code": [
        "if ( a == 0 ) cout << \" Power \" ;",
        "if ( f == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        5
      ],
      "mod_code": [
        "if ( a == 0 ) cout << \" Power \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        17,
        18,
        5
      ],
      "mod_code": [
        "if ( c == 0 ) cout << \" Space \" ;",
        "if ( d == 0 ) cout << \" Soul \" ;",
        "if ( e == 0 ) cout << \" Reality \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        17,
        19,
        5
      ],
      "mod_code": [
        "if ( c == 0 ) cout << \" Space \" ;",
        "if ( d == 0 ) cout << \" Soul \" ;",
        "if ( f == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        17,
        5
      ],
      "mod_code": [
        "if ( c == 0 ) cout << \" Space \" ;",
        "if ( d == 0 ) cout << \" Soul \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        18,
        19,
        5
      ],
      "mod_code": [
        "if ( c == 0 ) cout << \" Space \" ;",
        "if ( e == 0 ) cout << \" Reality \" ;",
        "if ( f == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        18,
        5
      ],
      "mod_code": [
        "if ( c == 0 ) cout << \" Space \" ;",
        "if ( e == 0 ) cout << \" Reality \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        19,
        5
      ],
      "mod_code": [
        "if ( c == 0 ) cout << \" Space \" ;",
        "if ( f == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        5
      ],
      "mod_code": [
        "if ( c == 0 ) cout << \" Space \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        18,
        19,
        5
      ],
      "mod_code": [
        "if ( d == 0 ) cout << \" Soul \" ;",
        "if ( e == 0 ) cout << \" Reality \" ;",
        "if ( f == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        18,
        5
      ],
      "mod_code": [
        "if ( d == 0 ) cout << \" Soul \" ;",
        "if ( e == 0 ) cout << \" Reality \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        19,
        5
      ],
      "mod_code": [
        "if ( d == 0 ) cout << \" Soul \" ;",
        "if ( f == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        5
      ],
      "mod_code": [
        "if ( d == 0 ) cout << \" Soul \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18,
        19,
        5
      ],
      "mod_code": [
        "if ( e == 0 ) cout << \" Reality \" ;",
        "if ( f == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        18,
        5
      ],
      "mod_code": [
        "if ( e == 0 ) cout << \" Reality \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19,
        5
      ],
      "mod_code": [
        "if ( f == 0 ) cout << \" Mind \" ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}