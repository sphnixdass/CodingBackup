{
  "meta": {
    "index": 583,
    "hitid": "3MG8450X2O4OF8FE6W8MV0CH909UPM",
    "workerid": "A1MJVTR0PCKBWW",
    "probid": "593A",
    "subid": "37743576"
  },
  "lines": [
    {
      "line": 0,
      "text": "create character set ss of size 200",
      "code": "set < char > ss [ 200 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "integer as num [ 200 ]",
      "code": "int num [ 200 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "integer as n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "s = string array",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "create memset with pointer num , a value of 0 and byte size the same as num",
      "code": "memset ( num , 0 , sizeof ( num ) ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to less than n do the following",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "for j = 0 to less than s . size ( ) do the following",
      "code": "for ( int j = 0 ; j < s . size ( ) ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "insert array s [ j ] into array ss [ i ]",
      "code": "ss [ i ] . insert ( s [ j ] ) ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "add one to num [ i ]",
      "code": "num [ i ] ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "integer as maxn = 0 , ans",
      "code": "int maxn = 0 , ans ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for har i = a to less than or equal to z do the following",
      "code": "for ( char i = ' a ' ; i <= ' z ' ; i ++ )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for har j = i + 1 to less than or equal to z do the following",
      "code": "for ( char j = i + 1 ; j <= ' z ' ; j ++ )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "set ans to 0",
      "code": "ans = 0 ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "for k = 0 to less than n do the following",
      "code": "for ( int k = 0 ; k < n ; k ++ )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "if ss [ k ] . size is greater than 2 then do the following continue",
      "code": "if ( ss [ k ] . size ( ) > 2 ) continue ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "if ss [ k ] . size is 1 then do the following",
      "code": "if ( ss [ k ] . size ( ) == 1 )",
      "indent": 4
    },
    {
      "line": 21,
      "text": "if ss [ k ] . count i or j is true then add num [ k ] to ans",
      "code": "if ( ss [ k ] . count ( i ) || ss [ k ] . count ( j ) ) ans += num [ k ] ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "if ss [ k ] . size is 2 then do the following",
      "code": "if ( ss [ k ] . size ( ) == 2 )",
      "indent": 4
    },
    {
      "line": 23,
      "text": "if ss [ k ] . count i and j is true then add num [ k ] to ans",
      "code": "if ( ss [ k ] . count ( i ) && ss [ k ] . count ( j ) ) ans += num [ k ] ;",
      "indent": 5
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 25,
      "text": "set maxn to the maximum of maxn or ans",
      "code": "maxn = max ( maxn , ans ) ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "output maxn",
      "code": "cout << maxn << endl ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= z ; j ++ )"
      ],
      "err_line": 16,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }"
      ],
      "err_line": 23,
      "err_msg": "no matching function for call to ‘std::set<char>::count(char&, char&)’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "set < char > ss ( 200 ) ;"
      ],
      "err_line": 0,
      "err_msg": "no matching function for call to ‘std::set<char>::set(int)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "string s [ 101 ] ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [101] {aka std::__cxx11::basic_string<char> [101]}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "memset ( num , num , sizeof ( num ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "ss [ i ] . push_back ( s [ j ] ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘class std::set<char>’ has no member named ‘push_back’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( int i = 0 ; i <= z ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= z ; ++ j )"
      ],
      "err_line": 16,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "if ( ss [ k ] . count ( i , j ) ) { ans += num [ k ] ; }"
      ],
      "err_line": 23,
      "err_msg": "no matching function for call to ‘std::set<char>::count(char&, char&)’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "maxn = max ( maxn ) ;"
      ],
      "err_line": 25,
      "err_msg": "no matching function for call to ‘max(int&)’"
    },
    {
      "mod_line": [
        15,
        16
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "for ( int j = i + 1 ; j <= z ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        16,
        21
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;"
      ],
      "err_line": 15,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        16,
        21,
        23
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }"
      ],
      "err_line": 15,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        16,
        21,
        8
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        16,
        21,
        27
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;",
        "cout << maxn ;"
      ],
      "err_line": 15,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        16,
        23
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }"
      ],
      "err_line": 15,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        16,
        23,
        8
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        16,
        23,
        27
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }",
        "cout << maxn ;"
      ],
      "err_line": 15,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        16,
        8
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        16,
        8,
        27
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "s >> s ;",
        "cout << maxn ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        16,
        27
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "cout << maxn ;"
      ],
      "err_line": 15,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;"
      ],
      "err_line": 15,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        23
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }"
      ],
      "err_line": 15,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        23,
        8
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        21,
        23,
        27
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }",
        "cout << maxn ;"
      ],
      "err_line": 15,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        21,
        8
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        21,
        8,
        27
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;",
        "s >> s ;",
        "cout << maxn ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        21,
        27
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;",
        "cout << maxn ;"
      ],
      "err_line": 15,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }"
      ],
      "err_line": 15,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        23,
        8
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        23,
        8,
        27
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }",
        "s >> s ;",
        "cout << maxn ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        23,
        27
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }",
        "cout << maxn ;"
      ],
      "err_line": 15,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        8
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        8,
        27
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "s >> s ;",
        "cout << maxn ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        27
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "cout << maxn ;"
      ],
      "err_line": 15,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        21
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;"
      ],
      "err_line": 16,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        21,
        23
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }"
      ],
      "err_line": 16,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        21,
        23,
        8
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        21,
        23,
        27
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }",
        "cout << maxn ;"
      ],
      "err_line": 16,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        21,
        8
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        21,
        8,
        27
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;",
        "s >> s ;",
        "cout << maxn ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        21,
        27
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;",
        "cout << maxn ;"
      ],
      "err_line": 16,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        23
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }"
      ],
      "err_line": 16,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        23,
        8
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        23,
        8,
        27
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }",
        "s >> s ;",
        "cout << maxn ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        23,
        27
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }",
        "cout << maxn ;"
      ],
      "err_line": 16,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        16,
        8
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        8,
        27
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "s >> s ;",
        "cout << maxn ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        27
      ],
      "mod_code": [
        "for ( int j = i + 1 ; j <= z ; j ++ )",
        "cout << maxn ;"
      ],
      "err_line": 16,
      "err_msg": "‘z’ was not declared in this scope"
    },
    {
      "mod_line": [
        21,
        23
      ],
      "mod_code": [
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }"
      ],
      "err_line": 23,
      "err_msg": "no matching function for call to ‘std::set<char>::count(char&, char&)’"
    },
    {
      "mod_line": [
        21,
        23,
        8
      ],
      "mod_code": [
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        23,
        8,
        27
      ],
      "mod_code": [
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }",
        "s >> s ;",
        "cout << maxn ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        23,
        27
      ],
      "mod_code": [
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;",
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }",
        "cout << maxn ;"
      ],
      "err_line": 23,
      "err_msg": "no matching function for call to ‘std::set<char>::count(char&, char&)’"
    },
    {
      "mod_line": [
        21,
        8
      ],
      "mod_code": [
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        21,
        8,
        27
      ],
      "mod_code": [
        "if ( ss [ k ] . count ( j ) || j ) ans += num [ k ] ;",
        "s >> s ;",
        "cout << maxn ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        23,
        8
      ],
      "mod_code": [
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        23,
        8,
        27
      ],
      "mod_code": [
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }",
        "s >> s ;",
        "cout << maxn ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        23,
        27
      ],
      "mod_code": [
        "if ( ss [ k ] . count ( j , j ) ) { ans += num [ k ] ; }",
        "cout << maxn ;"
      ],
      "err_line": 23,
      "err_msg": "no matching function for call to ‘std::set<char>::count(char&, char&)’"
    },
    {
      "mod_line": [
        8,
        27
      ],
      "mod_code": [
        "s >> s ;",
        "cout << maxn ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}