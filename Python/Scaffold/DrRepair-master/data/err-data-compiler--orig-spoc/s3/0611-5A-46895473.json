{
  "meta": {
    "index": 611,
    "hitid": "3BO3NEOQM0BCJDECNW1BM2ZBFH6IA1",
    "workerid": "A1APYLD4DUK33J",
    "probid": "5A",
    "subid": "46895473"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integer p with p = 0",
      "code": "int p = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer d with d = 0",
      "code": "int d = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while read line from cin to s",
      "code": "while ( getline ( cin , s ) )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if s [ 0 ] is ' + '",
      "code": "if ( s [ 0 ] == ' + ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment p",
      "code": "p ++ ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else if s [ 0 ] is ' - '",
      "code": "else if ( s [ 0 ] == ' - ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "decrement p",
      "code": "p -- ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "increment d by p * ( size of s - 1 - first index of \" : \" in s )",
      "code": "d += p * ( s . size ( ) - 1 - s . find ( \" : \" ) ) ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print d print newline",
      "code": "cout << d << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid operands of types ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 4,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( cin >> cin >> s )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - min ( \" : \" ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘min(const char [2])’"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "invalid operands of types ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        10,
        9,
        5
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "do",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        9,
        5,
        7
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        9,
        5,
        4
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "while ( cin >> cin >> s )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        9,
        7
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "do",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid operands of types ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        10,
        9,
        7,
        4
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "do",
        "else if ( ! s [ 0 ] == ' - ' )",
        "while ( cin >> cin >> s )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        10,
        9,
        4
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "do",
        "while ( cin >> cin >> s )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        10,
        5
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        5,
        7
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        5,
        7,
        4
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( ! s [ 0 ] == ' - ' )",
        "while ( cin >> cin >> s )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        5,
        4
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "while ( cin >> cin >> s )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 10,
      "err_msg": "invalid operands of types ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        10,
        7,
        4
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "else if ( ! s [ 0 ] == ' - ' )",
        "while ( cin >> cin >> s )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "while ( cin >> cin >> s )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        5,
        7
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        5,
        7,
        4
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( ! s [ 0 ] == ' - ' )",
        "while ( cin >> cin >> s )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        5,
        7,
        10
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( ! s [ 0 ] == ' - ' )",
        "d += p * ( s . size ( ) - 1 - min ( \" : \" ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        5,
        4
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "while ( cin >> cin >> s )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        5,
        4,
        10
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "while ( cin >> cin >> s )",
        "d += p * ( s . size ( ) - 1 - min ( \" : \" ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        5,
        10
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "d += p * ( s . size ( ) - 1 - min ( \" : \" ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "do",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        7,
        4
      ],
      "mod_code": [
        "do",
        "else if ( ! s [ 0 ] == ' - ' )",
        "while ( cin >> cin >> s )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        9,
        7,
        4,
        10
      ],
      "mod_code": [
        "do",
        "else if ( ! s [ 0 ] == ' - ' )",
        "while ( cin >> cin >> s )",
        "d += p * ( s . size ( ) - 1 - min ( \" : \" ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        9,
        7,
        10
      ],
      "mod_code": [
        "do",
        "else if ( ! s [ 0 ] == ' - ' )",
        "d += p * ( s . size ( ) - 1 - min ( \" : \" ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘min(const char [2])’"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "do",
        "while ( cin >> cin >> s )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        9,
        4,
        10
      ],
      "mod_code": [
        "do",
        "while ( cin >> cin >> s )",
        "d += p * ( s . size ( ) - 1 - min ( \" : \" ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "do",
        "d += p * ( s . size ( ) - 1 - min ( \" : \" ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘min(const char [2])’"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        7,
        4
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "else if ( ! s [ 0 ] == ' - ' )",
        "while ( cin >> cin >> s )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        7,
        4,
        10
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "else if ( ! s [ 0 ] == ' - ' )",
        "while ( cin >> cin >> s )",
        "d += p * ( s . size ( ) - 1 - min ( \" : \" ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        7,
        10
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "else if ( ! s [ 0 ] == ' - ' )",
        "d += p * ( s . size ( ) - 1 - min ( \" : \" ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "while ( cin >> cin >> s )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        4,
        10
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "while ( cin >> cin >> s )",
        "d += p * ( s . size ( ) - 1 - min ( \" : \" ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "d += p * ( s . size ( ) - 1 - min ( \" : \" ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "else if ( ! s [ 0 ] == ' - ' )",
        "while ( cin >> cin >> s )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        7,
        4,
        10
      ],
      "mod_code": [
        "else if ( ! s [ 0 ] == ' - ' )",
        "while ( cin >> cin >> s )",
        "d += p * ( s . size ( ) - 1 - min ( \" : \" ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "else if ( ! s [ 0 ] == ' - ' )",
        "d += p * ( s . size ( ) - 1 - min ( \" : \" ) ) ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘min(const char [2])’"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "d += p * ( s . size ( ) - 1 - min ( \" : \" ) ) ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    }
  ]
}