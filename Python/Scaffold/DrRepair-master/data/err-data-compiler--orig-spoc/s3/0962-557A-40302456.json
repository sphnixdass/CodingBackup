{
  "meta": {
    "index": 962,
    "hitid": "3XUSYT70ITVZAP083G376Z7LFSWD0I",
    "workerid": "A1MJVTR0PCKBWW",
    "probid": "557A",
    "subid": "40302456"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "integers = n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n )",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "integers = a [ 4 ] [ 2 ] = 0",
      "code": "int a [ 4 ] [ 2 ] = { 0 } ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "read a [ 0 ] [ 0 ] , a [ 0 ] [ 1 ] , a [ 1 ] [ 0 ] , a [ 1 ] [ 1 ] , a [ 2 ] [ 0 ] , a [ 2 ] [ 1 ]",
      "code": "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] [ 0 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 0 ] >> a [ 2 ] [ 1 ] ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "integers = t = n , ad = a [ 0 ] [ 0 ] , b = a [ 1 ] [ 0 ] , c = a [ 2 ] [ 0 ]",
      "code": "int t = n , ad = a [ 0 ] [ 0 ] , b = a [ 1 ] [ 0 ] , c = a [ 2 ] [ 0 ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if t = t - ad - b - c is true do next instruction",
      "code": "if ( t = t - ad - b - c )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if t is less than or equal to a [ 0 ] [ 1 ] - a [ 0 ] [ 0 ] then do the following",
      "code": "if ( t <= a [ 0 ] [ 1 ] - a [ 0 ] [ 0 ] )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "ad equals ad plus t",
      "code": "ad += t ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "set t to 0",
      "code": "t = 0 ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 11,
      "text": "set t to t + ad - a [ 0 ] [ 1 ]",
      "code": "t = t + ad - a [ 0 ] [ 1 ] ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "set ad to a [ 0 ] [ 1 ]",
      "code": "ad = a [ 0 ] [ 1 ] ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "if t is less than or equal to a [ 1 ] [ 1 ] - a [ 1 ] [ 0 ] then do the following",
      "code": "if ( t <= a [ 1 ] [ 1 ] - a [ 1 ] [ 0 ] )",
      "indent": 4
    },
    {
      "line": 14,
      "text": "b equals b plus t",
      "code": "b += t ;",
      "indent": 5
    },
    {
      "line": 15,
      "text": "set t to 0",
      "code": "t = 0 ;",
      "indent": 5
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 17,
      "text": "set t to t + b - a [ 1 ] [ 1 ]",
      "code": "t = t + b - a [ 1 ] [ 1 ] ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "set b to a [ 1 ] [ 1 ]",
      "code": "b = a [ 1 ] [ 1 ] ;",
      "indent": 5
    },
    {
      "line": 19,
      "text": "if t is less than or equal to a [ 2 ] [ 1 ] - a [ 2 ] [ 0 ] then do the following",
      "code": "if ( t <= a [ 2 ] [ 1 ] - a [ 2 ] [ 0 ] )",
      "indent": 5
    },
    {
      "line": 20,
      "text": "c equals c plus t",
      "code": "c += t ;",
      "indent": 6
    },
    {
      "line": 21,
      "text": "set t to 0",
      "code": "t = 0 ;",
      "indent": 6
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 5
    },
    {
      "line": 23,
      "text": "set c to a [ 2 ] [ 1 ]",
      "code": "c = a [ 2 ] [ 1 ] ;",
      "indent": 6
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "output ad b c",
      "code": "cout << ad << \" \" << b << \" \" << c << endl ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int a [ 4 ] [ 2 ] = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "array must be initialized with a brace-enclosed initializer"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( t == t - ad - b - c ) { instruction ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "‘instruction’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "while ( t <= a [ 0 ] [ 1 ] - a [ 0 ] [ 0 ] )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "while ( t <= a [ 1 ] [ 1 ] - a [ 1 ] [ 0 ] )"
      ],
      "err_line": 16,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "while ( t <= a [ 2 ] [ 1 ] - a [ 2 ] [ 0 ] )"
      ],
      "err_line": 22,
      "err_msg": "expected ‘}’ before ‘else’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;",
        "if ( t == t - ad - b - c )"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        4,
        6,
        28
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;",
        "if ( t == t - ad - b - c )",
        "cout << \" ad \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        4,
        6,
        28,
        10
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;",
        "if ( t == t - ad - b - c )",
        "cout << \" ad \" << endl ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        4,
        6,
        28,
        2
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;",
        "if ( t == t - ad - b - c )",
        "cout << \" ad \" << endl ;",
        "cin >> n >> n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        4,
        6,
        10
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;",
        "if ( t == t - ad - b - c )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        4,
        6,
        10,
        2
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;",
        "if ( t == t - ad - b - c )",
        "do",
        "cin >> n >> n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        4,
        6,
        2
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;",
        "if ( t == t - ad - b - c )",
        "cin >> n >> n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        4,
        28
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;",
        "cout << \" ad \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        4,
        28,
        10
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;",
        "cout << \" ad \" << endl ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        4,
        28,
        10,
        6
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;",
        "cout << \" ad \" << endl ;",
        "do",
        "if ( t == t - ad - b - c ) { instruction ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        4,
        28,
        10,
        2
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;",
        "cout << \" ad \" << endl ;",
        "do",
        "cin >> n >> n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        4,
        28,
        6
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;",
        "cout << \" ad \" << endl ;",
        "if ( t == t - ad - b - c ) { instruction ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        4,
        28,
        6,
        2
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;",
        "cout << \" ad \" << endl ;",
        "if ( t == t - ad - b - c ) { instruction ++ ; }",
        "cin >> n >> n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        4,
        28,
        2
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;",
        "cout << \" ad \" << endl ;",
        "cin >> n >> n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        4,
        10,
        6
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;",
        "do",
        "if ( t == t - ad - b - c ) { instruction ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        4,
        10,
        6,
        2
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;",
        "do",
        "if ( t == t - ad - b - c ) { instruction ++ ; }",
        "cin >> n >> n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        4,
        10,
        2
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;",
        "do",
        "cin >> n >> n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;",
        "if ( t == t - ad - b - c ) { instruction ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        4,
        6,
        2
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;",
        "if ( t == t - ad - b - c ) { instruction ++ ; }",
        "cin >> n >> n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "cin >> a [ 0 ] [ 0 ] >> a [ 0 ] [ 1 ] >> a [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 1 ] [ 1 ] >> a [ 2 ] [ 1 ] >> a [ 2 ] [ 1 ] ;",
        "cin >> n >> n ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::basic_istream<char>::__istream_type {aka std::basic_istream<char>}’ and ‘int [2]’)"
    },
    {
      "mod_line": [
        6,
        28,
        10
      ],
      "mod_code": [
        "if ( t == t - ad - b - c )",
        "cout << \" ad \" << endl ;",
        "do"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        28,
        10,
        2
      ],
      "mod_code": [
        "if ( t == t - ad - b - c )",
        "cout << \" ad \" << endl ;",
        "do",
        "cin >> n >> n ;"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "if ( t == t - ad - b - c )",
        "do"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        10,
        2
      ],
      "mod_code": [
        "if ( t == t - ad - b - c )",
        "do",
        "cin >> n >> n ;"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        28,
        10
      ],
      "mod_code": [
        "cout << \" ad \" << endl ;",
        "do"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        28,
        10,
        6
      ],
      "mod_code": [
        "cout << \" ad \" << endl ;",
        "do",
        "if ( t == t - ad - b - c ) { instruction ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "‘instruction’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        10,
        6,
        2
      ],
      "mod_code": [
        "cout << \" ad \" << endl ;",
        "do",
        "if ( t == t - ad - b - c ) { instruction ++ ; }",
        "cin >> n >> n ;"
      ],
      "err_line": 6,
      "err_msg": "‘instruction’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        10,
        2
      ],
      "mod_code": [
        "cout << \" ad \" << endl ;",
        "do",
        "cin >> n >> n ;"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        28,
        6
      ],
      "mod_code": [
        "cout << \" ad \" << endl ;",
        "if ( t == t - ad - b - c ) { instruction ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "‘instruction’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        6,
        2
      ],
      "mod_code": [
        "cout << \" ad \" << endl ;",
        "if ( t == t - ad - b - c ) { instruction ++ ; }",
        "cin >> n >> n ;"
      ],
      "err_line": 6,
      "err_msg": "‘instruction’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        6
      ],
      "mod_code": [
        "do",
        "if ( t == t - ad - b - c ) { instruction ++ ; }"
      ],
      "err_line": 6,
      "err_msg": "‘instruction’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        6,
        2
      ],
      "mod_code": [
        "do",
        "if ( t == t - ad - b - c ) { instruction ++ ; }",
        "cin >> n >> n ;"
      ],
      "err_line": 6,
      "err_msg": "‘instruction’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "do",
        "cin >> n >> n ;"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "if ( t == t - ad - b - c ) { instruction ++ ; }",
        "cin >> n >> n ;"
      ],
      "err_line": 6,
      "err_msg": "‘instruction’ was not declared in this scope"
    }
  ]
}