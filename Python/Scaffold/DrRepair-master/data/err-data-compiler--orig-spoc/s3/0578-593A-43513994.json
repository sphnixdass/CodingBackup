{
  "meta": {
    "index": 578,
    "hitid": "3BCRDCM0ODO226SXXM5BJDC2C4M6KW",
    "workerid": "A1C5H6OY3HGO4U",
    "probid": "593A",
    "subid": "43513994"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = character array of length 1001 by 1001",
      "code": "char s [ 1001 ] [ 1001 ] ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "hah = integer with value of 0",
      "code": "int hah = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "num = integer",
      "code": "int num ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "m = integer",
      "code": "int m ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "flag = integer",
      "code": "int flag ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to n exclusive read s [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for k = ' a ' to ' z ' inclusive",
      "code": "for ( int k = ' a ' ; k <= ' z ' ; k ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for l = k to ' z ' inclusive",
      "code": "for ( int l = k ; l <= ' z ' ; l ++ )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set num to 0",
      "code": "num = 0 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "set m to the length of the string in s [ i ]",
      "code": "m = strlen ( s [ i ] ) ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "for j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 4
    },
    {
      "line": 16,
      "text": "if s [ i ] [ j ] does not equal k and s [ i ] [ j ] does not equal l",
      "code": "if ( s [ i ] [ j ] != k && s [ i ] [ j ] != l )",
      "indent": 5
    },
    {
      "line": 17,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 6
    },
    {
      "line": 18,
      "text": "break",
      "code": "break ;",
      "indent": 6
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 21,
      "text": "if flag equals 1 then increase num by m",
      "code": "if ( flag == 1 ) num = num + m ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 23,
      "text": "if num is greater than hah then set hah to num",
      "code": "if ( num > hah ) hah = num ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print hah",
      "code": "cout << hah << endl ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 7,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "m = s [ i ] . size ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "request for member ‘size’ in ‘s[i]’, which is of non-class type ‘char [1001]’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        18
      ],
      "mod_code": [
        "int flag = 0 ;",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        18,
        15
      ],
      "mod_code": [
        "int flag = 0 ;",
        "do",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        18,
        15,
        16
      ],
      "mod_code": [
        "int flag = 0 ;",
        "do",
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        18,
        15,
        26
      ],
      "mod_code": [
        "int flag = 0 ;",
        "do",
        "for ( j = 0 ; j < m ; j ++ )",
        "cout << hah ;"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        18,
        15,
        1
      ],
      "mod_code": [
        "int flag = 0 ;",
        "do",
        "for ( j = 0 ; j < m ; j ++ )",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        17,
        18,
        16
      ],
      "mod_code": [
        "int flag = 0 ;",
        "do",
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        18,
        16,
        26
      ],
      "mod_code": [
        "int flag = 0 ;",
        "do",
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )",
        "cout << hah ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        18,
        16,
        1
      ],
      "mod_code": [
        "int flag = 0 ;",
        "do",
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        17,
        18,
        26
      ],
      "mod_code": [
        "int flag = 0 ;",
        "do",
        "cout << hah ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        18,
        26,
        1
      ],
      "mod_code": [
        "int flag = 0 ;",
        "do",
        "cout << hah ;",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        17,
        18,
        1
      ],
      "mod_code": [
        "int flag = 0 ;",
        "do",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        17,
        15
      ],
      "mod_code": [
        "int flag = 0 ;",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        15,
        16
      ],
      "mod_code": [
        "int flag = 0 ;",
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        15,
        16,
        26
      ],
      "mod_code": [
        "int flag = 0 ;",
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )",
        "cout << hah ;"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        15,
        16,
        1
      ],
      "mod_code": [
        "int flag = 0 ;",
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        17,
        15,
        26
      ],
      "mod_code": [
        "int flag = 0 ;",
        "for ( j = 0 ; j < m ; j ++ )",
        "cout << hah ;"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        15,
        26,
        1
      ],
      "mod_code": [
        "int flag = 0 ;",
        "for ( j = 0 ; j < m ; j ++ )",
        "cout << hah ;",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        17,
        15,
        1
      ],
      "mod_code": [
        "int flag = 0 ;",
        "for ( j = 0 ; j < m ; j ++ )",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        17,
        16,
        26,
        1
      ],
      "mod_code": [
        "int flag = 0 ;",
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )",
        "cout << hah ;",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        17,
        16,
        1
      ],
      "mod_code": [
        "int flag = 0 ;",
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        17,
        26,
        1
      ],
      "mod_code": [
        "int flag = 0 ;",
        "cout << hah ;",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        17,
        1
      ],
      "mod_code": [
        "int flag = 0 ;",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        18,
        15
      ],
      "mod_code": [
        "do",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        15,
        16
      ],
      "mod_code": [
        "do",
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        15,
        16,
        26
      ],
      "mod_code": [
        "do",
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )",
        "cout << hah ;"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        15,
        16,
        1
      ],
      "mod_code": [
        "do",
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        18,
        15,
        26
      ],
      "mod_code": [
        "do",
        "for ( j = 0 ; j < m ; j ++ )",
        "cout << hah ;"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        15,
        26,
        1
      ],
      "mod_code": [
        "do",
        "for ( j = 0 ; j < m ; j ++ )",
        "cout << hah ;",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        18,
        15,
        1
      ],
      "mod_code": [
        "do",
        "for ( j = 0 ; j < m ; j ++ )",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        18,
        16
      ],
      "mod_code": [
        "do",
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        16,
        26
      ],
      "mod_code": [
        "do",
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )",
        "cout << hah ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        16,
        26,
        1
      ],
      "mod_code": [
        "do",
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )",
        "cout << hah ;",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        18,
        16,
        1
      ],
      "mod_code": [
        "do",
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        18,
        26
      ],
      "mod_code": [
        "do",
        "cout << hah ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        26,
        1
      ],
      "mod_code": [
        "do",
        "cout << hah ;",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        18,
        1
      ],
      "mod_code": [
        "do",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        15,
        16
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        16,
        26
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )",
        "cout << hah ;"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        16,
        26,
        1
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )",
        "cout << hah ;",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        15,
        16,
        1
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )",
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        15,
        26
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )",
        "cout << hah ;"
      ],
      "err_line": 15,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        26,
        1
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )",
        "cout << hah ;",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        15,
        1
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        16,
        26,
        1
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )",
        "cout << hah ;",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        16,
        1
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] != ' k ' && s [ i ] [ j ] != ' l ' )",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        26,
        1
      ],
      "mod_code": [
        "cout << hah ;",
        "char s [ 1001 ] [ 1001 ] ="
      ],
      "err_line": 2,
      "err_msg": "expected primary-expression before ‘int’"
    }
  ]
}