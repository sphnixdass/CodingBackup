{
  "meta": {
    "index": 2714,
    "hitid": "3QO7EE372OHUJL7N6I6GQFA3PBNBQC",
    "workerid": "A1AYVATMT88U1W",
    "probid": "710A",
    "subid": "48443507"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let s be a string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if s [ 0 ] is equal to a or s [ 0 ] is equal to h",
      "code": "if ( s [ 0 ] == ' a ' || s [ 0 ] == ' h ' )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let xx be a integer with xx is equal to ( int ) s [ 1 ]",
      "code": "int xx = ( int ) s [ 1 ] ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "decrement xx by 48",
      "code": "xx -= 48 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if xx is equal to 1 or xx is equal to 8",
      "code": "if ( xx == 1 || xx == 8 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "print 3 and newline",
      "code": "cout << 3 << endl ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print 5 and newline",
      "code": "cout << 5 << endl ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 11,
      "text": "let xx be a integer with xx is equal to ( int ) s [ 1 ]",
      "code": "int xx = ( int ) s [ 1 ] ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "decrement xx by 48",
      "code": "xx -= 48 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if xx is equal to 1 or xx is equal to 8",
      "code": "if ( xx == 1 || xx == 8 )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print 5 and newline",
      "code": "cout << 5 << endl ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print 8 and newline",
      "code": "cout << 8 << endl ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "char s ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        2
      ],
      "mod_code": [
        "char s ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        2,
        3
      ],
      "mod_code": [
        "char s ;",
        "do",
        "s >> s ;",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        2,
        8
      ],
      "mod_code": [
        "char s ;",
        "do",
        "s >> s ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        2,
        15
      ],
      "mod_code": [
        "char s ;",
        "do",
        "s >> s ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        3
      ],
      "mod_code": [
        "char s ;",
        "do",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        3,
        8
      ],
      "mod_code": [
        "char s ;",
        "do",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        3,
        15
      ],
      "mod_code": [
        "char s ;",
        "do",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        8
      ],
      "mod_code": [
        "char s ;",
        "do",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        8,
        15
      ],
      "mod_code": [
        "char s ;",
        "do",
        "do",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        10,
        15
      ],
      "mod_code": [
        "char s ;",
        "do",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "char s ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "char s ;",
        "s >> s ;",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        8
      ],
      "mod_code": [
        "char s ;",
        "s >> s ;",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        3,
        15
      ],
      "mod_code": [
        "char s ;",
        "s >> s ;",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        8
      ],
      "mod_code": [
        "char s ;",
        "s >> s ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        15
      ],
      "mod_code": [
        "char s ;",
        "s >> s ;",
        "do",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        2,
        15
      ],
      "mod_code": [
        "char s ;",
        "s >> s ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "char s ;",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        3,
        8
      ],
      "mod_code": [
        "char s ;",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        15
      ],
      "mod_code": [
        "char s ;",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )",
        "do",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        3,
        15
      ],
      "mod_code": [
        "char s ;",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "char s ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        8,
        15
      ],
      "mod_code": [
        "char s ;",
        "do",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "char s ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        2,
        3
      ],
      "mod_code": [
        "do",
        "s >> s ;",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        2,
        3,
        8
      ],
      "mod_code": [
        "do",
        "s >> s ;",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        2,
        3,
        15
      ],
      "mod_code": [
        "do",
        "s >> s ;",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        2,
        8
      ],
      "mod_code": [
        "do",
        "s >> s ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        2,
        8,
        15
      ],
      "mod_code": [
        "do",
        "s >> s ;",
        "do",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        2,
        15
      ],
      "mod_code": [
        "do",
        "s >> s ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        3,
        8
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        3,
        8,
        15
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )",
        "do",
        "do"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        3,
        15
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        8,
        15
      ],
      "mod_code": [
        "do",
        "do",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )",
        "do",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "do",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "s >> s ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        15
      ],
      "mod_code": [
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )",
        "do",
        "do"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "if ( s [ 0 ] == a || s [ 0 ] == ' h ' )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        15
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}