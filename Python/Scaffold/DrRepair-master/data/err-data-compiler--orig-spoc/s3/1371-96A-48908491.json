{
  "meta": {
    "index": 1371,
    "hitid": "3G9UA71JVVOQVM0KYBAROCCLR357JL",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "96A",
    "subid": "48908491"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "i = int",
      "code": "int i ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "count1 , count2 = int with count1 = 0 and count2 = 0",
      "code": "int count1 = 0 , count2 = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "n = size of s",
      "code": "n = s . size ( ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to n",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if s [ i ] equals ' 1 '",
      "code": "if ( s [ i ] == ' 1 ' )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment count1",
      "code": "count1 ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "set count2 to 0",
      "code": "count2 = 0 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if s [ i ] equals ' 0 '",
      "code": "else if ( s [ i ] == ' 0 ' )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "increment count2",
      "code": "count2 ++ ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "set count1 to 0",
      "code": "count1 = 0 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if count1 or count2 is greater than 6 then break the for loop",
      "code": "if ( count1 >= 7 || count2 >= 7 ) break ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if count1 or count2 is greater than 6",
      "code": "if ( count1 >= 7 || count2 >= 7 )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int n = s . size ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 21,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "int n = s . size ( ) ;",
        "if ( count1 || count2 > 6 ) break ;"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        6,
        15,
        17
      ],
      "mod_code": [
        "int n = s . size ( ) ;",
        "if ( count1 || count2 > 6 ) break ;",
        "if ( count1 || count2 > 6 )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        6,
        15,
        17,
        5
      ],
      "mod_code": [
        "int n = s . size ( ) ;",
        "if ( count1 || count2 > 6 ) break ;",
        "if ( count1 || count2 > 6 )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        15,
        17,
        3
      ],
      "mod_code": [
        "int n = s . size ( ) ;",
        "if ( count1 || count2 > 6 ) break ;",
        "if ( count1 || count2 > 6 )",
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        6,
        15,
        17
      ],
      "mod_code": [
        "int n = s . size ( ) ;",
        "if ( count1 || count2 > 6 ) break ;",
        "if ( count1 or count2 > 6 )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        6,
        15,
        17,
        5
      ],
      "mod_code": [
        "int n = s . size ( ) ;",
        "if ( count1 || count2 > 6 ) break ;",
        "if ( count1 or count2 > 6 )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        15,
        17,
        3
      ],
      "mod_code": [
        "int n = s . size ( ) ;",
        "if ( count1 || count2 > 6 ) break ;",
        "if ( count1 or count2 > 6 )",
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        6,
        15,
        5
      ],
      "mod_code": [
        "int n = s . size ( ) ;",
        "if ( count1 || count2 > 6 ) break ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        15,
        5,
        3
      ],
      "mod_code": [
        "int n = s . size ( ) ;",
        "if ( count1 || count2 > 6 ) break ;",
        "s >> s ;",
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        6,
        15,
        3
      ],
      "mod_code": [
        "int n = s . size ( ) ;",
        "if ( count1 || count2 > 6 ) break ;",
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "int n = s . size ( ) ;",
        "if ( count1 || count2 > 6 )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        6,
        17,
        5
      ],
      "mod_code": [
        "int n = s . size ( ) ;",
        "if ( count1 || count2 > 6 )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        17,
        5,
        3
      ],
      "mod_code": [
        "int n = s . size ( ) ;",
        "if ( count1 || count2 > 6 )",
        "s >> s ;",
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        6,
        17,
        3
      ],
      "mod_code": [
        "int n = s . size ( ) ;",
        "if ( count1 || count2 > 6 )",
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "int n = s . size ( ) ;",
        "if ( count1 or count2 > 6 )"
      ],
      "err_line": 6,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        6,
        17,
        5
      ],
      "mod_code": [
        "int n = s . size ( ) ;",
        "if ( count1 or count2 > 6 )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        17,
        5,
        3
      ],
      "mod_code": [
        "int n = s . size ( ) ;",
        "if ( count1 or count2 > 6 )",
        "s >> s ;",
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        6,
        17,
        3
      ],
      "mod_code": [
        "int n = s . size ( ) ;",
        "if ( count1 or count2 > 6 )",
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        6,
        5
      ],
      "mod_code": [
        "int n = s . size ( ) ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        5,
        3
      ],
      "mod_code": [
        "int n = s . size ( ) ;",
        "s >> s ;",
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "int n = s . size ( ) ;",
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        15,
        17,
        5
      ],
      "mod_code": [
        "if ( count1 || count2 > 6 ) break ;",
        "if ( count1 || count2 > 6 )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        17,
        5,
        3
      ],
      "mod_code": [
        "if ( count1 || count2 > 6 ) break ;",
        "if ( count1 || count2 > 6 )",
        "s >> s ;",
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        15,
        17,
        3
      ],
      "mod_code": [
        "if ( count1 || count2 > 6 ) break ;",
        "if ( count1 || count2 > 6 )",
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        15,
        17,
        5
      ],
      "mod_code": [
        "if ( count1 || count2 > 6 ) break ;",
        "if ( count1 or count2 > 6 )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        17,
        5,
        3
      ],
      "mod_code": [
        "if ( count1 || count2 > 6 ) break ;",
        "if ( count1 or count2 > 6 )",
        "s >> s ;",
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        15,
        17,
        3
      ],
      "mod_code": [
        "if ( count1 || count2 > 6 ) break ;",
        "if ( count1 or count2 > 6 )",
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        15,
        5
      ],
      "mod_code": [
        "if ( count1 || count2 > 6 ) break ;",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        15,
        5,
        3
      ],
      "mod_code": [
        "if ( count1 || count2 > 6 ) break ;",
        "s >> s ;",
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        15,
        3
      ],
      "mod_code": [
        "if ( count1 || count2 > 6 ) break ;",
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        17,
        5
      ],
      "mod_code": [
        "if ( count1 || count2 > 6 )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        5,
        3
      ],
      "mod_code": [
        "if ( count1 || count2 > 6 )",
        "s >> s ;",
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        17,
        3
      ],
      "mod_code": [
        "if ( count1 || count2 > 6 )",
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        17,
        5
      ],
      "mod_code": [
        "if ( count1 or count2 > 6 )",
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        17,
        5,
        3
      ],
      "mod_code": [
        "if ( count1 or count2 > 6 )",
        "s >> s ;",
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        17,
        3
      ],
      "mod_code": [
        "if ( count1 or count2 > 6 )",
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "int count1 = 0 , count2 = 0 , count2 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int count2’"
    }
  ]
}