{
  "meta": {
    "index": 2392,
    "hitid": "3EAWOID6MTRL460UU131CLDSEC5V0T",
    "workerid": "A1APYLD4DUK33J",
    "probid": "472A",
    "subid": "41547423"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare check with integer x as argument , returning boolean",
      "code": "bool check ( int x )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer i",
      "code": "int i ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "for i = 2 to square root of x",
      "code": "for ( i = 2 ; i <= sqrt ( x ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if x % i is 0 , return true from function",
      "code": "if ( x % i == 0 ) return true ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 5,
      "text": "return false from function",
      "code": "return false ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 8,
      "text": "create long long n",
      "code": "long long n ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "create long longs a , b",
      "code": "long long a , b ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 2 to n / 2 inclusive",
      "code": "for ( int i = 2 ; i <= n / 2 ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "set b to n - 1",
      "code": "b = n - i ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if result of run check with argument i and result of run check with argument b",
      "code": "if ( check ( i ) && check ( b ) )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print i print \" \" print b print newline",
      "code": "cout << i << \" \" << b << endl ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( check ( i , check ( b ) ) )"
      ],
      "err_line": 13,
      "err_msg": "too many arguments to function ‘bool check(int)’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 9,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( check ( i , abs ( b ) ) )"
      ],
      "err_line": 13,
      "err_msg": "too many arguments to function ‘bool check(int)’"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "b = n - 1 ;",
        "if ( check ( i , check ( b ) ) )"
      ],
      "err_line": 13,
      "err_msg": "too many arguments to function ‘bool check(int)’"
    },
    {
      "mod_line": [
        12,
        13,
        5
      ],
      "mod_code": [
        "b = n - 1 ;",
        "if ( check ( i , check ( b ) ) )",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        12,
        13,
        5,
        2
      ],
      "mod_code": [
        "b = n - 1 ;",
        "if ( check ( i , check ( b ) ) )",
        "else",
        "for ( int i = 2 ; i < sqrt ( x ) ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        12,
        13,
        2
      ],
      "mod_code": [
        "b = n - 1 ;",
        "if ( check ( i , check ( b ) ) )",
        "for ( int i = 2 ; i < sqrt ( x ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "too many arguments to function ‘bool check(int)’"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "b = n - 1 ;",
        "if ( check ( i , abs ( b ) ) )"
      ],
      "err_line": 13,
      "err_msg": "too many arguments to function ‘bool check(int)’"
    },
    {
      "mod_line": [
        12,
        13,
        5
      ],
      "mod_code": [
        "b = n - 1 ;",
        "if ( check ( i , abs ( b ) ) )",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        12,
        13,
        5,
        2
      ],
      "mod_code": [
        "b = n - 1 ;",
        "if ( check ( i , abs ( b ) ) )",
        "else",
        "for ( int i = 2 ; i < sqrt ( x ) ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        12,
        13,
        2
      ],
      "mod_code": [
        "b = n - 1 ;",
        "if ( check ( i , abs ( b ) ) )",
        "for ( int i = 2 ; i < sqrt ( x ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "too many arguments to function ‘bool check(int)’"
    },
    {
      "mod_line": [
        12,
        5
      ],
      "mod_code": [
        "b = n - 1 ;",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        12,
        5,
        2
      ],
      "mod_code": [
        "b = n - 1 ;",
        "else",
        "for ( int i = 2 ; i < sqrt ( x ) ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        13,
        5
      ],
      "mod_code": [
        "if ( check ( i , check ( b ) ) )",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        13,
        5,
        12
      ],
      "mod_code": [
        "if ( check ( i , check ( b ) ) )",
        "else",
        "b -= 1 ;"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        13,
        5,
        12,
        2
      ],
      "mod_code": [
        "if ( check ( i , check ( b ) ) )",
        "else",
        "b -= 1 ;",
        "for ( int i = 2 ; i < sqrt ( x ) ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        13,
        5,
        2
      ],
      "mod_code": [
        "if ( check ( i , check ( b ) ) )",
        "else",
        "for ( int i = 2 ; i < sqrt ( x ) ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        13,
        12
      ],
      "mod_code": [
        "if ( check ( i , check ( b ) ) )",
        "b -= 1 ;"
      ],
      "err_line": 13,
      "err_msg": "too many arguments to function ‘bool check(int)’"
    },
    {
      "mod_line": [
        13,
        12,
        2
      ],
      "mod_code": [
        "if ( check ( i , check ( b ) ) )",
        "b -= 1 ;",
        "for ( int i = 2 ; i < sqrt ( x ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "too many arguments to function ‘bool check(int)’"
    },
    {
      "mod_line": [
        13,
        2
      ],
      "mod_code": [
        "if ( check ( i , check ( b ) ) )",
        "for ( int i = 2 ; i < sqrt ( x ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "too many arguments to function ‘bool check(int)’"
    },
    {
      "mod_line": [
        13,
        5
      ],
      "mod_code": [
        "if ( check ( i , abs ( b ) ) )",
        "else"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        13,
        5,
        12
      ],
      "mod_code": [
        "if ( check ( i , abs ( b ) ) )",
        "else",
        "b -= 1 ;"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        13,
        5,
        12,
        2
      ],
      "mod_code": [
        "if ( check ( i , abs ( b ) ) )",
        "else",
        "b -= 1 ;",
        "for ( int i = 2 ; i < sqrt ( x ) ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        13,
        5,
        2
      ],
      "mod_code": [
        "if ( check ( i , abs ( b ) ) )",
        "else",
        "for ( int i = 2 ; i < sqrt ( x ) ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        13,
        12
      ],
      "mod_code": [
        "if ( check ( i , abs ( b ) ) )",
        "b -= 1 ;"
      ],
      "err_line": 13,
      "err_msg": "too many arguments to function ‘bool check(int)’"
    },
    {
      "mod_line": [
        13,
        12,
        2
      ],
      "mod_code": [
        "if ( check ( i , abs ( b ) ) )",
        "b -= 1 ;",
        "for ( int i = 2 ; i < sqrt ( x ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "too many arguments to function ‘bool check(int)’"
    },
    {
      "mod_line": [
        13,
        2
      ],
      "mod_code": [
        "if ( check ( i , abs ( b ) ) )",
        "for ( int i = 2 ; i < sqrt ( x ) ; i ++ )"
      ],
      "err_line": 13,
      "err_msg": "too many arguments to function ‘bool check(int)’"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "else",
        "b -= 1 ;"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        12,
        2
      ],
      "mod_code": [
        "else",
        "b -= 1 ;",
        "for ( int i = 2 ; i < sqrt ( x ) ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "else",
        "for ( int i = 2 ; i < sqrt ( x ) ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘else’ without a previous ‘if’"
    }
  ]
}