{
  "meta": {
    "index": 2366,
    "hitid": "3PGQRAZX02E299FB8E95TQN5RLTYSV",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1004A",
    "subid": "48105936"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant integer max_n = 2e2",
      "code": "const int max_n = 2e2 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long long array a with max_n elements",
      "code": "long long a [ max_n ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create long longs n , d , cnt , p and l",
      "code": "long long n , d , cnt , p , l ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "read n and d",
      "code": "cin >> n >> d ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if n = 1 , return cout < < 2 < < ' \\ n ' , 0",
      "code": "if ( n == 1 ) return cout << 2 << ' \\n ' , 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive read a [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) cin >> a [ i ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if i = 0",
      "code": "if ( i == 0 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increase cnt by one",
      "code": "cnt ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "p = a [ 0 ] + d",
      "code": "p = a [ 0 ] + d ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if abs ( p - a [ 1 ] ) is greater than d",
      "code": "if ( abs ( p - a [ 1 ] ) > d )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "else if abs ( p - a [ 1 ] ) = d",
      "code": "else if ( abs ( p - a [ 1 ] ) == d )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "increase cnt by one",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "increase l",
      "code": "l ++ ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else if i = n - 1",
      "code": "else if ( i == n - 1 )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "increase cnt by one",
      "code": "cnt ++ ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "p = a [ n - 1 ] - d",
      "code": "p = a [ n - 1 ] - d ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "if abs ( p - a [ n - 2 ] ) is greater than d",
      "code": "if ( abs ( p - a [ n - 2 ] ) > d )",
      "indent": 3
    },
    {
      "line": 21,
      "text": "increase cnt",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 22,
      "text": "else if absolute value of p - a [ n - 2 ] = d",
      "code": "else if ( abs ( p - a [ n - 2 ] ) == d )",
      "indent": 3
    },
    {
      "line": 23,
      "text": "increase cnt",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "increase l",
      "code": "l ++ ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 26,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 27,
      "text": "set value of p to a [ i ] - d",
      "code": "p = a [ i ] - d ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "if abs ( p - a [ i - 1 ] ) is greater than d",
      "code": "if ( abs ( p - a [ i - 1 ] ) > d )",
      "indent": 3
    },
    {
      "line": 29,
      "text": "increase cnt by one",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 30,
      "text": "else if absolute value of p - a [ i - 1 ] = d",
      "code": "else if ( abs ( p - a [ i - 1 ] ) == d )",
      "indent": 3
    },
    {
      "line": 31,
      "text": "increase cnt",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 32,
      "text": "increase l",
      "code": "l ++ ;",
      "indent": 4
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 34,
      "text": "set p to a [ i ] + d",
      "code": "p = a [ i ] + d ;",
      "indent": 3
    },
    {
      "line": 35,
      "text": "if absolute value of p - a [ i + 1 ] is greater than d",
      "code": "if ( abs ( p - a [ i + 1 ] ) > d )",
      "indent": 3
    },
    {
      "line": 36,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 37,
      "text": "else if abs ( p - a [ i + 1 ] ) = d",
      "code": "else if ( abs ( p - a [ i + 1 ] ) == d )",
      "indent": 3
    },
    {
      "line": 38,
      "text": "increase cnt by one",
      "code": "cnt ++ ;",
      "indent": 4
    },
    {
      "line": 39,
      "text": "increase l",
      "code": "l ++ ;",
      "indent": 4
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 42,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 43,
      "text": "print cnt - ( l / 2 ) and ' \\ n '",
      "code": "cout << cnt - ( l / 2 ) << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 44,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 45,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        30
      ],
      "mod_code": [
        "else if ( abs ( p - a [ i - 1 ] = d ) )"
      ],
      "err_line": 30,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const max_n = 2e2 ;"
      ],
      "err_line": 0,
      "err_msg": "‘max_n’ does not name a type"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 42,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        22,
        30
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "else if ( abs ( p - a [ i - 1 ] = d ) )"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        30,
        20
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "if ( ! abs ( p - a [ n - 2 ] ) > d )"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        30,
        20,
        37
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "if ( ! abs ( p - a [ n - 2 ] ) > d )",
        "else if ( abs ( p - a [ i + 1 ] ) )"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        30,
        20,
        35
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "if ( ! abs ( p - a [ n - 2 ] ) > d )",
        "if ( abs ( p - a [ i + 1 ] > d ) )"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        30,
        20,
        26
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "if ( ! abs ( p - a [ n - 2 ] ) > d )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        30,
        37
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "else if ( abs ( p - a [ i + 1 ] ) )"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        30,
        37,
        35
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "else if ( abs ( p - a [ i + 1 ] ) )",
        "if ( abs ( p - a [ i + 1 ] > d ) )"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        30,
        37,
        26
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "else if ( abs ( p - a [ i + 1 ] ) )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        30,
        35
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "if ( abs ( p - a [ i + 1 ] > d ) )"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        30,
        35,
        26
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "if ( abs ( p - a [ i + 1 ] > d ) )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        30,
        26
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        20
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "if ( ! abs ( p - a [ n - 2 ] ) > d )"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        20,
        37
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "if ( ! abs ( p - a [ n - 2 ] ) > d )",
        "else if ( abs ( p - a [ i + 1 ] ) )"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        20,
        37,
        35
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "if ( ! abs ( p - a [ n - 2 ] ) > d )",
        "else if ( abs ( p - a [ i + 1 ] ) )",
        "if ( abs ( p - a [ i + 1 ] > d ) )"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        20,
        37,
        26
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "if ( ! abs ( p - a [ n - 2 ] ) > d )",
        "else if ( abs ( p - a [ i + 1 ] ) )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        20,
        35
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "if ( ! abs ( p - a [ n - 2 ] ) > d )",
        "if ( abs ( p - a [ i + 1 ] > d ) )"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        20,
        35,
        26
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "if ( ! abs ( p - a [ n - 2 ] ) > d )",
        "if ( abs ( p - a [ i + 1 ] > d ) )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        20,
        26
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "if ( ! abs ( p - a [ n - 2 ] ) > d )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        37
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "else if ( abs ( p - a [ i + 1 ] ) )"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        37,
        35
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "else if ( abs ( p - a [ i + 1 ] ) )",
        "if ( abs ( p - a [ i + 1 ] > d ) )"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        37,
        35,
        26
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "else if ( abs ( p - a [ i + 1 ] ) )",
        "if ( abs ( p - a [ i + 1 ] > d ) )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        37,
        26
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "else if ( abs ( p - a [ i + 1 ] ) )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        35
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "if ( abs ( p - a [ i + 1 ] > d ) )"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        35,
        26
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "if ( abs ( p - a [ i + 1 ] > d ) )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        22,
        26
      ],
      "mod_code": [
        "else if ( abs ( p - a [ n - 2 ] = d ) )",
        "do"
      ],
      "err_line": 22,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        30,
        20
      ],
      "mod_code": [
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "if ( ! abs ( p - a [ n - 2 ] ) > d )"
      ],
      "err_line": 30,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        30,
        20,
        37
      ],
      "mod_code": [
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "if ( ! abs ( p - a [ n - 2 ] ) > d )",
        "else if ( abs ( p - a [ i + 1 ] ) )"
      ],
      "err_line": 30,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        30,
        20,
        37,
        35
      ],
      "mod_code": [
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "if ( ! abs ( p - a [ n - 2 ] ) > d )",
        "else if ( abs ( p - a [ i + 1 ] ) )",
        "if ( abs ( p - a [ i + 1 ] > d ) )"
      ],
      "err_line": 30,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        30,
        20,
        37,
        26
      ],
      "mod_code": [
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "if ( ! abs ( p - a [ n - 2 ] ) > d )",
        "else if ( abs ( p - a [ i + 1 ] ) )",
        "do"
      ],
      "err_line": 30,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        30,
        20,
        35
      ],
      "mod_code": [
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "if ( ! abs ( p - a [ n - 2 ] ) > d )",
        "if ( abs ( p - a [ i + 1 ] > d ) )"
      ],
      "err_line": 30,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        30,
        20,
        35,
        26
      ],
      "mod_code": [
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "if ( ! abs ( p - a [ n - 2 ] ) > d )",
        "if ( abs ( p - a [ i + 1 ] > d ) )",
        "do"
      ],
      "err_line": 30,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        30,
        20,
        26
      ],
      "mod_code": [
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "if ( ! abs ( p - a [ n - 2 ] ) > d )",
        "do"
      ],
      "err_line": 30,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        30,
        37
      ],
      "mod_code": [
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "else if ( abs ( p - a [ i + 1 ] ) )"
      ],
      "err_line": 30,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        30,
        37,
        35
      ],
      "mod_code": [
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "else if ( abs ( p - a [ i + 1 ] ) )",
        "if ( abs ( p - a [ i + 1 ] > d ) )"
      ],
      "err_line": 30,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        30,
        37,
        35,
        26
      ],
      "mod_code": [
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "else if ( abs ( p - a [ i + 1 ] ) )",
        "if ( abs ( p - a [ i + 1 ] > d ) )",
        "do"
      ],
      "err_line": 30,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        30,
        37,
        26
      ],
      "mod_code": [
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "else if ( abs ( p - a [ i + 1 ] ) )",
        "do"
      ],
      "err_line": 30,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        30,
        35
      ],
      "mod_code": [
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "if ( abs ( p - a [ i + 1 ] > d ) )"
      ],
      "err_line": 30,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        30,
        35,
        26
      ],
      "mod_code": [
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "if ( abs ( p - a [ i + 1 ] > d ) )",
        "do"
      ],
      "err_line": 30,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        30,
        26
      ],
      "mod_code": [
        "else if ( abs ( p - a [ i - 1 ] = d ) )",
        "do"
      ],
      "err_line": 30,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        20,
        37,
        35,
        26
      ],
      "mod_code": [
        "if ( ! abs ( p - a [ n - 2 ] ) > d )",
        "else if ( abs ( p - a [ i + 1 ] ) )",
        "if ( abs ( p - a [ i + 1 ] > d ) )",
        "do"
      ],
      "err_line": 42,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        37,
        26
      ],
      "mod_code": [
        "if ( ! abs ( p - a [ n - 2 ] ) > d )",
        "else if ( abs ( p - a [ i + 1 ] ) )",
        "do"
      ],
      "err_line": 42,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        35,
        26
      ],
      "mod_code": [
        "if ( ! abs ( p - a [ n - 2 ] ) > d )",
        "if ( abs ( p - a [ i + 1 ] > d ) )",
        "do"
      ],
      "err_line": 42,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        26
      ],
      "mod_code": [
        "if ( ! abs ( p - a [ n - 2 ] ) > d )",
        "do"
      ],
      "err_line": 42,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        35,
        26
      ],
      "mod_code": [
        "else if ( abs ( p - a [ i + 1 ] ) )",
        "if ( abs ( p - a [ i + 1 ] > d ) )",
        "do"
      ],
      "err_line": 42,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        37,
        26
      ],
      "mod_code": [
        "else if ( abs ( p - a [ i + 1 ] ) )",
        "do"
      ],
      "err_line": 42,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        35,
        26
      ],
      "mod_code": [
        "if ( abs ( p - a [ i + 1 ] > d ) )",
        "do"
      ],
      "err_line": 42,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}