{
  "meta": {
    "index": 2633,
    "hitid": "362E9TQF2HKDT4RF9WTLIOAEEE0IGZ",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "149A",
    "subid": "49030800"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , i , j , k , x , f = integers with k = 0 , f = 0",
      "code": "int n , i , j , k = 0 , x , f = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "Read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "ara = array of 12 integers",
      "code": "int arr [ 12 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 12 exclusive",
      "code": "for ( i = 0 ; i < 12 ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "Read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set arr [ i ] to x",
      "code": "arr [ i ] = x ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if x is greater than arr [ i - 1 ]",
      "code": "if ( x > arr [ i - 1 ] )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for i = i - 1 to 0 exclusive",
      "code": "for ( j = i - 1 ; j >= 0 ; j -- )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if x is greater than arr [ j ]",
      "code": "if ( x > arr [ j ] )",
      "indent": 4
    },
    {
      "line": 10,
      "text": "set arr [ j + 1 ] to arr [ j ]",
      "code": "arr [ j + 1 ] = arr [ j ] ;",
      "indent": 5
    },
    {
      "line": 11,
      "text": "set arr [ j ] to x",
      "code": "arr [ j ] = x ;",
      "indent": 5
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if n is equal to 0",
      "code": "if ( n == 0 )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print 0 and a new line",
      "code": "cout << \" 0\\n \" ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i = 0 to 12 exclusive",
      "code": "for ( i = 0 ; i < 12 ; i ++ )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "set k to k + arr [ i ]",
      "code": "k = k + arr [ i ] ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "if k is greater than or equal to n",
      "code": "if ( k >= n )",
      "indent": 3
    },
    {
      "line": 22,
      "text": "set f to i + 1",
      "code": "f = i + 1 ;",
      "indent": 4
    },
    {
      "line": 23,
      "text": "Terminate the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 26,
      "text": "if f is equal to 0",
      "code": "if ( f == 0 )",
      "indent": 2
    },
    {
      "line": 27,
      "text": "print - 1 and a new line",
      "code": "cout << \" -1\\n \" ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 29,
      "text": "print f and a new line",
      "code": "cout << f << \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int ara [ 12 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , i , j , k , x , f = 0 , f ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int f’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "long long ara [ 12 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "gets ( x ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 32,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "Terminate ;"
      ],
      "err_line": 23,
      "err_msg": "‘Terminate’ was not declared in this scope"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 31,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "int ara [ 12 ] ;"
      ],
      "err_line": 6,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        8
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "int ara [ 12 ] ;",
        "for ( int i = i - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 6,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        2
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "int ara [ 12 ] ;",
        "for ( int i = i - 1 ; i >= 0 ; i -- )",
        "gets ( n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        5
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "int ara [ 12 ] ;",
        "for ( int i = i - 1 ; i >= 0 ; i -- )",
        "gets ( x ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        8,
        21
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "int ara [ 12 ] ;",
        "for ( int i = i - 1 ; i >= 0 ; i -- )",
        "if ( k <= n )"
      ],
      "err_line": 6,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        3,
        2
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "int ara [ 12 ] ;",
        "gets ( n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        2,
        5
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "int ara [ 12 ] ;",
        "gets ( n ) ;",
        "gets ( x ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        2,
        21
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "int ara [ 12 ] ;",
        "gets ( n ) ;",
        "if ( k <= n )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        5
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "int ara [ 12 ] ;",
        "gets ( x ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        5,
        21
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "int ara [ 12 ] ;",
        "gets ( x ) ;",
        "if ( k <= n )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3,
        21
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "int ara [ 12 ] ;",
        "if ( k <= n )"
      ],
      "err_line": 6,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        8,
        2
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "for ( int i = i - 1 ; i >= 0 ; i -- )",
        "gets ( n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        2,
        5
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "for ( int i = i - 1 ; i >= 0 ; i -- )",
        "gets ( n ) ;",
        "gets ( x ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        2,
        21
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "for ( int i = i - 1 ; i >= 0 ; i -- )",
        "gets ( n ) ;",
        "if ( k <= n )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        5
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "for ( int i = i - 1 ; i >= 0 ; i -- )",
        "gets ( x ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8,
        5,
        21
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "for ( int i = i - 1 ; i >= 0 ; i -- )",
        "gets ( x ) ;",
        "if ( k <= n )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "gets ( n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "gets ( n ) ;",
        "gets ( x ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        21
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "gets ( n ) ;",
        "gets ( x ) ;",
        "if ( k <= n )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        21
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "gets ( n ) ;",
        "if ( k <= n )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "gets ( x ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        5,
        21
      ],
      "mod_code": [
        "int n , i , j , k , x = 0 , f = 0 ;",
        "gets ( x ) ;",
        "if ( k <= n )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "int ara [ 12 ] ;",
        "for ( int i = i - 1 ; i >= 0 ; i -- )"
      ],
      "err_line": 6,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        8,
        2
      ],
      "mod_code": [
        "int ara [ 12 ] ;",
        "for ( int i = i - 1 ; i >= 0 ; i -- )",
        "gets ( n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        2,
        5
      ],
      "mod_code": [
        "int ara [ 12 ] ;",
        "for ( int i = i - 1 ; i >= 0 ; i -- )",
        "gets ( n ) ;",
        "gets ( x ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        2,
        21
      ],
      "mod_code": [
        "int ara [ 12 ] ;",
        "for ( int i = i - 1 ; i >= 0 ; i -- )",
        "gets ( n ) ;",
        "if ( k <= n )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        5
      ],
      "mod_code": [
        "int ara [ 12 ] ;",
        "for ( int i = i - 1 ; i >= 0 ; i -- )",
        "gets ( x ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        5,
        21
      ],
      "mod_code": [
        "int ara [ 12 ] ;",
        "for ( int i = i - 1 ; i >= 0 ; i -- )",
        "gets ( x ) ;",
        "if ( k <= n )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        8,
        21
      ],
      "mod_code": [
        "int ara [ 12 ] ;",
        "for ( int i = i - 1 ; i >= 0 ; i -- )",
        "if ( k <= n )"
      ],
      "err_line": 6,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int ara [ 12 ] ;",
        "gets ( n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        2,
        5
      ],
      "mod_code": [
        "int ara [ 12 ] ;",
        "gets ( n ) ;",
        "gets ( x ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        2,
        5,
        21
      ],
      "mod_code": [
        "int ara [ 12 ] ;",
        "gets ( n ) ;",
        "gets ( x ) ;",
        "if ( k <= n )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        2,
        21
      ],
      "mod_code": [
        "int ara [ 12 ] ;",
        "gets ( n ) ;",
        "if ( k <= n )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "int ara [ 12 ] ;",
        "gets ( x ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        21
      ],
      "mod_code": [
        "int ara [ 12 ] ;",
        "gets ( x ) ;",
        "if ( k <= n )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        21
      ],
      "mod_code": [
        "int ara [ 12 ] ;",
        "if ( k <= n )"
      ],
      "err_line": 6,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "for ( int i = i - 1 ; i >= 0 ; i -- )",
        "gets ( n ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        2,
        5
      ],
      "mod_code": [
        "for ( int i = i - 1 ; i >= 0 ; i -- )",
        "gets ( n ) ;",
        "gets ( x ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        2,
        5,
        21
      ],
      "mod_code": [
        "for ( int i = i - 1 ; i >= 0 ; i -- )",
        "gets ( n ) ;",
        "gets ( x ) ;",
        "if ( k <= n )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        2,
        21
      ],
      "mod_code": [
        "for ( int i = i - 1 ; i >= 0 ; i -- )",
        "gets ( n ) ;",
        "if ( k <= n )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "for ( int i = i - 1 ; i >= 0 ; i -- )",
        "gets ( x ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        5,
        21
      ],
      "mod_code": [
        "for ( int i = i - 1 ; i >= 0 ; i -- )",
        "gets ( x ) ;",
        "if ( k <= n )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "gets ( n ) ;",
        "gets ( x ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5,
        21
      ],
      "mod_code": [
        "gets ( n ) ;",
        "gets ( x ) ;",
        "if ( k <= n )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        21
      ],
      "mod_code": [
        "gets ( n ) ;",
        "if ( k <= n )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        21
      ],
      "mod_code": [
        "gets ( x ) ;",
        "if ( k <= n )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    }
  ]
}