{
  "meta": {
    "index": 2811,
    "hitid": "3KWGG5KP6JWM8B11SPVUKQWGXVSCMZ",
    "workerid": "A1APYLD4DUK33J",
    "probid": "454A",
    "subid": "47340291"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare integer m = ( n + 1 ) / 2",
      "code": "int m = ( n + 1 ) / 2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 1 to n inclusive",
      "code": "for ( int j = 1 ; j <= n ; j ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if i is less than m",
      "code": "if ( i < m )",
      "indent": 3
    },
    {
      "line": 7,
      "text": "if j is greater than or equal to m - 1 and j is less than or equal to m + i",
      "code": "if ( j >= m - i and j <= m + i )",
      "indent": 4
    },
    {
      "line": 8,
      "text": "print \" D \"",
      "code": "cout << \" D \" ;",
      "indent": 5
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 10,
      "text": "print \" * \"",
      "code": "cout << \" * \" ;",
      "indent": 5
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 13,
      "text": "if j is greater than ( i + 1 ) % m and j is less than n - ( i % m )",
      "code": "if ( j > ( i + 1 ) % m and j < n - ( i % m ) )",
      "indent": 4
    },
    {
      "line": 14,
      "text": "print \" D \"",
      "code": "cout << \" D \" ;",
      "indent": 5
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 4
    },
    {
      "line": 16,
      "text": "print \" * \"",
      "code": "cout << \" * \" ;",
      "indent": 5
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( j = 1 ; j <= n ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cout << \" * \""
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        6,
        13,
        12
      ],
      "mod_code": [
        "if ( j >= m - 1 && j <= m + i )",
        "if ( i <= m )",
        "if ( j > ( i + 1 ) % m < n - ( i % m ) )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        6,
        13,
        16
      ],
      "mod_code": [
        "if ( j >= m - 1 && j <= m + i )",
        "if ( i <= m )",
        "if ( j > ( i + 1 ) % m < n - ( i % m ) )",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        6,
        12
      ],
      "mod_code": [
        "if ( j >= m - 1 && j <= m + i )",
        "if ( i <= m )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        6,
        12,
        16
      ],
      "mod_code": [
        "if ( j >= m - 1 && j <= m + i )",
        "if ( i <= m )",
        "do",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        6,
        16
      ],
      "mod_code": [
        "if ( j >= m - 1 && j <= m + i )",
        "if ( i <= m )",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        13,
        12
      ],
      "mod_code": [
        "if ( j >= m - 1 && j <= m + i )",
        "if ( j > ( i + 1 ) % m < n - ( i % m ) )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        13,
        12,
        16
      ],
      "mod_code": [
        "if ( j >= m - 1 && j <= m + i )",
        "if ( j > ( i + 1 ) % m < n - ( i % m ) )",
        "do",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        13,
        16
      ],
      "mod_code": [
        "if ( j >= m - 1 && j <= m + i )",
        "if ( j > ( i + 1 ) % m < n - ( i % m ) )",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "if ( j >= m - 1 && j <= m + i )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        12,
        16
      ],
      "mod_code": [
        "if ( j >= m - 1 && j <= m + i )",
        "do",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        16
      ],
      "mod_code": [
        "if ( j >= m - 1 && j <= m + i )",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        13,
        7,
        12
      ],
      "mod_code": [
        "if ( i <= m )",
        "if ( j > ( i + 1 ) % m < n - ( i % m ) )",
        "if ( j >= m - 1 and j <= m + i )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        13,
        7,
        16
      ],
      "mod_code": [
        "if ( i <= m )",
        "if ( j > ( i + 1 ) % m < n - ( i % m ) )",
        "if ( j >= m - 1 and j <= m + i )",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        13,
        12
      ],
      "mod_code": [
        "if ( i <= m )",
        "if ( j > ( i + 1 ) % m < n - ( i % m ) )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        13,
        12,
        16
      ],
      "mod_code": [
        "if ( i <= m )",
        "if ( j > ( i + 1 ) % m < n - ( i % m ) )",
        "do",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        13,
        16
      ],
      "mod_code": [
        "if ( i <= m )",
        "if ( j > ( i + 1 ) % m < n - ( i % m ) )",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        7,
        12
      ],
      "mod_code": [
        "if ( i <= m )",
        "if ( j >= m - 1 and j <= m + i )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        7,
        12,
        16
      ],
      "mod_code": [
        "if ( i <= m )",
        "if ( j >= m - 1 and j <= m + i )",
        "do",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        7,
        16
      ],
      "mod_code": [
        "if ( i <= m )",
        "if ( j >= m - 1 and j <= m + i )",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "if ( i <= m )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        12,
        16
      ],
      "mod_code": [
        "if ( i <= m )",
        "do",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        16
      ],
      "mod_code": [
        "if ( i <= m )",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        7,
        12
      ],
      "mod_code": [
        "if ( j > ( i + 1 ) % m < n - ( i % m ) )",
        "if ( j >= m - 1 and j <= m + i )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        7,
        12,
        16
      ],
      "mod_code": [
        "if ( j > ( i + 1 ) % m < n - ( i % m ) )",
        "if ( j >= m - 1 and j <= m + i )",
        "do",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        7,
        16
      ],
      "mod_code": [
        "if ( j > ( i + 1 ) % m < n - ( i % m ) )",
        "if ( j >= m - 1 and j <= m + i )",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        12
      ],
      "mod_code": [
        "if ( j > ( i + 1 ) % m < n - ( i % m ) )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        12,
        16
      ],
      "mod_code": [
        "if ( j > ( i + 1 ) % m < n - ( i % m ) )",
        "do",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        16
      ],
      "mod_code": [
        "if ( j > ( i + 1 ) % m < n - ( i % m ) )",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        12
      ],
      "mod_code": [
        "if ( j >= m - 1 and j <= m + i )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        12,
        16
      ],
      "mod_code": [
        "if ( j >= m - 1 and j <= m + i )",
        "do",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        16
      ],
      "mod_code": [
        "if ( j >= m - 1 and j <= m + i )",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        16
      ],
      "mod_code": [
        "do",
        "cout << \" * \""
      ],
      "err_line": 17,
      "err_msg": "expected ‘;’ before ‘}’ token"
    }
  ]
}