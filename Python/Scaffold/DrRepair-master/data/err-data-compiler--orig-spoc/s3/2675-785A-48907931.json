{
  "meta": {
    "index": 2675,
    "hitid": "3KA7IJSNW6Z9J96865RRQAKTKF5PB3",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "785A",
    "subid": "48907931"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "arr = array of n string",
      "code": "string arr [ n ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "tetr , cube , dodec , icos , oct and ans = 0",
      "code": "int tetr = 0 , cube = 0 , dodec = 0 , icos = 0 , oct = 0 , ans = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read arr [ i ]",
      "code": "cin >> arr [ i ] ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if arr [ i ] is \" Tetrahedron \"",
      "code": "if ( arr [ i ] == \" Tetrahedron \" )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment tetr",
      "code": "tetr ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else if arr [ i ] is \" Cube \"",
      "code": "else if ( arr [ i ] == \" Cube \" )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "increment cube",
      "code": "cube ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if arr [ i ] is \" Octahedron \"",
      "code": "else if ( arr [ i ] == \" Octahedron \" )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "increment oct",
      "code": "oct ++ ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else if arr [ i ] is \" Dodecahedron \"",
      "code": "else if ( arr [ i ] == \" Dodecahedron \" )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "increment dodec",
      "code": "dodec ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 16,
      "text": "increment icos",
      "code": "icos ++ ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "ans = tetr * 4 + cube * 6 + oct * 8 + dodec * 12 + icos * 20",
      "code": "ans = ( tetr * 4 ) + ( cube * 6 ) + ( oct * 8 ) + ( dodec * 12 ) + ( icos * 20 ) ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char arr [ n ] ;"
      ],
      "err_line": 7,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "cin >> arr . size ( ) ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘size’ in ‘arr’, which is of non-class type ‘std::__cxx11::string [n] {aka std::__cxx11::basic_string<char> [n]}’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else if ( arr [ i ] == ' Cube \" )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else if ( arr [ i ] == ' Dodecahedron \" )"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        18,
        9
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "else if ( arr [ i ] == ' Cube \" )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        18,
        9,
        3
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "else if ( arr [ i ] == ' Cube \" )",
        "char arr [ n ] ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        18,
        9,
        2
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "else if ( arr [ i ] == ' Cube \" )",
        "cin >> N ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        18,
        9,
        11
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "else if ( arr [ i ] == ' Cube \" )",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        18,
        3
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "char arr [ n ] ;"
      ],
      "err_line": 7,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        18,
        3,
        2
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "char arr [ n ] ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        18,
        3,
        11
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "char arr [ n ] ;",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        18,
        2
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        18,
        2,
        11
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "cin >> N ;",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        18,
        11
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "else if ( arr [ i ] == ' Cube \" )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        9,
        3
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "else if ( arr [ i ] == ' Cube \" )",
        "char arr [ n ] ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        9,
        3,
        2
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "else if ( arr [ i ] == ' Cube \" )",
        "char arr [ n ] ;",
        "cin >> N ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        9,
        3,
        11
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "else if ( arr [ i ] == ' Cube \" )",
        "char arr [ n ] ;",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        9,
        2
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "else if ( arr [ i ] == ' Cube \" )",
        "cin >> N ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        9,
        2,
        11
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "else if ( arr [ i ] == ' Cube \" )",
        "cin >> N ;",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        9,
        11
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "else if ( arr [ i ] == ' Cube \" )",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "char arr [ n ] ;"
      ],
      "err_line": 7,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        3,
        2
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "char arr [ n ] ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3,
        2,
        11
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "char arr [ n ] ;",
        "cin >> N ;",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        3,
        11
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "char arr [ n ] ;",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        2,
        11
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "cin >> N ;",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "int tetr , cube , dodec , icos , oct , ans = 0 ;",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        18,
        9
      ],
      "mod_code": [
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "else if ( arr [ i ] == ' Cube \" )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        18,
        9,
        3
      ],
      "mod_code": [
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "else if ( arr [ i ] == ' Cube \" )",
        "char arr [ n ] ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        18,
        9,
        3,
        2
      ],
      "mod_code": [
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "else if ( arr [ i ] == ' Cube \" )",
        "char arr [ n ] ;",
        "cin >> N ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        18,
        9,
        3,
        11
      ],
      "mod_code": [
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "else if ( arr [ i ] == ' Cube \" )",
        "char arr [ n ] ;",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        18,
        9,
        2
      ],
      "mod_code": [
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "else if ( arr [ i ] == ' Cube \" )",
        "cin >> N ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        18,
        9,
        2,
        11
      ],
      "mod_code": [
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "else if ( arr [ i ] == ' Cube \" )",
        "cin >> N ;",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        18,
        9,
        11
      ],
      "mod_code": [
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "else if ( arr [ i ] == ' Cube \" )",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        18,
        3
      ],
      "mod_code": [
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "char arr [ n ] ;"
      ],
      "err_line": 7,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        18,
        3,
        2
      ],
      "mod_code": [
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "char arr [ n ] ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        3,
        2,
        11
      ],
      "mod_code": [
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "char arr [ n ] ;",
        "cin >> N ;",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        18,
        3,
        11
      ],
      "mod_code": [
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "char arr [ n ] ;",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        18,
        2
      ],
      "mod_code": [
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        18,
        2,
        11
      ],
      "mod_code": [
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "cin >> N ;",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        18,
        11
      ],
      "mod_code": [
        "ans = tetr * 4 + cube * 6 + oct * 12 + dodec * 12 + icos * 20 ;",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "else if ( arr [ i ] == ' Cube \" )",
        "char arr [ n ] ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        3,
        2
      ],
      "mod_code": [
        "else if ( arr [ i ] == ' Cube \" )",
        "char arr [ n ] ;",
        "cin >> N ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        3,
        2,
        11
      ],
      "mod_code": [
        "else if ( arr [ i ] == ' Cube \" )",
        "char arr [ n ] ;",
        "cin >> N ;",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        3,
        11
      ],
      "mod_code": [
        "else if ( arr [ i ] == ' Cube \" )",
        "char arr [ n ] ;",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "else if ( arr [ i ] == ' Cube \" )",
        "cin >> N ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        2,
        11
      ],
      "mod_code": [
        "else if ( arr [ i ] == ' Cube \" )",
        "cin >> N ;",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        9,
        11
      ],
      "mod_code": [
        "else if ( arr [ i ] == ' Cube \" )",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "char arr [ n ] ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2,
        11
      ],
      "mod_code": [
        "char arr [ n ] ;",
        "cin >> N ;",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "char arr [ n ] ;",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "cin >> N ;",
        "else if ( arr [ i ] == ' Octahedron \" )"
      ],
      "err_line": 11,
      "err_msg": "missing terminating ' character"
    }
  ]
}