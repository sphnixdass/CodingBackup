{
  "meta": {
    "index": 492,
    "hitid": "30EMX9PEVKD7P4QU4Z8EKI8UUTKSK5",
    "workerid": "AIWEXPJAU66D9",
    "probid": "967A",
    "subid": "43680191"
  },
  "lines": [
    {
      "line": 0,
      "text": "void function solve",
      "code": "void solve ( )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare new integers n and s",
      "code": "int n , s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n and s",
      "code": "cin >> n >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "define vector of integers called a",
      "code": "vector < int > a ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "in a for loop , change i from 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create integers x and y",
      "code": "int x , y ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read from the input to x and y",
      "code": "cin >> x >> y ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "assign the new value = 60 * x + y to x",
      "code": "x = 60 * x + y ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "push x into a",
      "code": "a . push_back ( x ) ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if a [ 0 ] is greater than s",
      "code": "if ( a [ 0 ] > s )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print \" 0 0 \\ n \"",
      "code": "cout << \" 0 0\\n \" ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "return",
      "code": "return ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "start for loop from i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if i = n - 1 or a [ i + 1 ] - a [ i ] > 2 * s + 1",
      "code": "if ( i == n - 1 || a [ i + 1 ] - a [ i ] > 2 * s + 1 )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print ( a [ i ] + s + 1 ) / 60 , ' ' , ( a [ i ] + s + 1 ) % 60 and ' \\ n '",
      "code": "cout << ( a [ i ] + s + 1 ) / 60 << ' ' << ( a [ i ] + s + 1 ) % 60 << ' \\n ' ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "return",
      "code": "return ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 22,
      "text": "call method solve ( )",
      "code": "solve ( ) ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "void solve ( ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n >> s )"
      ],
      "err_line": 8,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "vector < int > a ( temp ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘temp’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "cin >> x >> b ;"
      ],
      "err_line": 6,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "a . push ( x ) ;"
      ],
      "err_line": 8,
      "err_msg": "‘class std::vector<int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "void solve ( )"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        16,
        10,
        12
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "cout << ( a [ i ] + s + 60 ) / 60 << ' ' << ( a [ i ] + s + 1 ) % 60 << ' \\n ' ;",
        "if ( a [ 0 ] > ' s ' )",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        16,
        10,
        17
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "cout << ( a [ i ] + s + 60 ) / 60 << ' ' << ( a [ i ] + s + 1 ) % 60 << ' \\n ' ;",
        "if ( a [ 0 ] > ' s ' )",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        16,
        12
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "cout << ( a [ i ] + s + 60 ) / 60 << ' ' << ( a [ i ] + s + 1 ) % 60 << ' \\n ' ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        16,
        12,
        17
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "cout << ( a [ i ] + s + 60 ) / 60 << ' ' << ( a [ i ] + s + 1 ) % 60 << ' \\n ' ;",
        "do",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        16,
        12,
        7
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "cout << ( a [ i ] + s + 60 ) / 60 << ' ' << ( a [ i ] + s + 1 ) % 60 << ' \\n ' ;",
        "do",
        "x = 60 * ( x + y ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        16,
        17
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "cout << ( a [ i ] + s + 60 ) / 60 << ' ' << ( a [ i ] + s + 1 ) % 60 << ' \\n ' ;",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        16,
        17,
        7
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "cout << ( a [ i ] + s + 60 ) / 60 << ' ' << ( a [ i ] + s + 1 ) % 60 << ' \\n ' ;",
        "do",
        "x = 60 * ( x + y ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        10,
        12
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "if ( a [ 0 ] > ' s ' )",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        10,
        12,
        17
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "if ( a [ 0 ] > ' s ' )",
        "do",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        10,
        12,
        7
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "if ( a [ 0 ] > ' s ' )",
        "do",
        "x = 60 * ( x + y ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        10,
        17
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "if ( a [ 0 ] > ' s ' )",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        10,
        17,
        7
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "if ( a [ 0 ] > ' s ' )",
        "do",
        "x = 60 * ( x + y ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        12,
        17
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "do",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        12,
        17,
        7
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "do",
        "do",
        "x = 60 * ( x + y ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        12,
        7
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "do",
        "x = 60 * ( x + y ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        17
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        17,
        7
      ],
      "mod_code": [
        "cout << \" 0\\n \" ;",
        "do",
        "x = 60 * ( x + y ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        10,
        12
      ],
      "mod_code": [
        "cout << ( a [ i ] + s + 60 ) / 60 << ' ' << ( a [ i ] + s + 1 ) % 60 << ' \\n ' ;",
        "if ( a [ 0 ] > ' s ' )",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        10,
        12,
        17
      ],
      "mod_code": [
        "cout << ( a [ i ] + s + 60 ) / 60 << ' ' << ( a [ i ] + s + 1 ) % 60 << ' \\n ' ;",
        "if ( a [ 0 ] > ' s ' )",
        "do",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        10,
        12,
        7
      ],
      "mod_code": [
        "cout << ( a [ i ] + s + 60 ) / 60 << ' ' << ( a [ i ] + s + 1 ) % 60 << ' \\n ' ;",
        "if ( a [ 0 ] > ' s ' )",
        "do",
        "x = 60 * ( x + y ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        10,
        17
      ],
      "mod_code": [
        "cout << ( a [ i ] + s + 60 ) / 60 << ' ' << ( a [ i ] + s + 1 ) % 60 << ' \\n ' ;",
        "if ( a [ 0 ] > ' s ' )",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        10,
        17,
        7
      ],
      "mod_code": [
        "cout << ( a [ i ] + s + 60 ) / 60 << ' ' << ( a [ i ] + s + 1 ) % 60 << ' \\n ' ;",
        "if ( a [ 0 ] > ' s ' )",
        "do",
        "x = 60 * ( x + y ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        12
      ],
      "mod_code": [
        "cout << ( a [ i ] + s + 60 ) / 60 << ' ' << ( a [ i ] + s + 1 ) % 60 << ' \\n ' ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        12,
        17
      ],
      "mod_code": [
        "cout << ( a [ i ] + s + 60 ) / 60 << ' ' << ( a [ i ] + s + 1 ) % 60 << ' \\n ' ;",
        "do",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        12,
        17,
        7
      ],
      "mod_code": [
        "cout << ( a [ i ] + s + 60 ) / 60 << ' ' << ( a [ i ] + s + 1 ) % 60 << ' \\n ' ;",
        "do",
        "do",
        "x = 60 * ( x + y ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        12,
        7
      ],
      "mod_code": [
        "cout << ( a [ i ] + s + 60 ) / 60 << ' ' << ( a [ i ] + s + 1 ) % 60 << ' \\n ' ;",
        "do",
        "x = 60 * ( x + y ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        17
      ],
      "mod_code": [
        "cout << ( a [ i ] + s + 60 ) / 60 << ' ' << ( a [ i ] + s + 1 ) % 60 << ' \\n ' ;",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        17,
        7
      ],
      "mod_code": [
        "cout << ( a [ i ] + s + 60 ) / 60 << ' ' << ( a [ i ] + s + 1 ) % 60 << ' \\n ' ;",
        "do",
        "x = 60 * ( x + y ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "if ( a [ 0 ] > ' s ' )",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        12,
        17
      ],
      "mod_code": [
        "if ( a [ 0 ] > ' s ' )",
        "do",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        12,
        17,
        7
      ],
      "mod_code": [
        "if ( a [ 0 ] > ' s ' )",
        "do",
        "do",
        "x = 60 * ( x + y ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        12,
        7
      ],
      "mod_code": [
        "if ( a [ 0 ] > ' s ' )",
        "do",
        "x = 60 * ( x + y ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        17
      ],
      "mod_code": [
        "if ( a [ 0 ] > ' s ' )",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        17,
        7
      ],
      "mod_code": [
        "if ( a [ 0 ] > ' s ' )",
        "do",
        "x = 60 * ( x + y ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        17
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        17,
        7
      ],
      "mod_code": [
        "do",
        "do",
        "x = 60 * ( x + y ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        7
      ],
      "mod_code": [
        "do",
        "x = 60 * ( x + y ) ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        7
      ],
      "mod_code": [
        "do",
        "x = 60 * ( x + y ) ;"
      ],
      "err_line": 18,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}