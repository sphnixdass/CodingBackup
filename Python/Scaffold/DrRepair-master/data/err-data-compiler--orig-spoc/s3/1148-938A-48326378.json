{
  "meta": {
    "index": 1148,
    "hitid": "3VDVA3ILID92TYVH1P8FQPTSWPR1GH",
    "workerid": "A1APYLD4DUK33J",
    "probid": "938A",
    "subid": "48326378"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integer a",
      "code": "int a ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create character arrays b , c , d with b size 10005 , c size 20 , d size 10005 , with c = \" aeiouy \" , create character x",
      "code": "char b [ 10005 ] , c [ 20 ] = \" aeiouy \" , x , d [ 10005 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare f with character x as argument , returning integer",
      "code": "int f ( char x )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "for i = 0 to 6 exclusive",
      "code": "for ( int i = 0 ; i < 6 ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if x is c [ i ] , return false from function",
      "code": "if ( x == c [ i ] ) return false ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "return true from function",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 9,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read b",
      "code": "cin >> b ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "create integers i , s , e , with i = 0 , s = 0 , e = 0",
      "code": "int i = 0 , s = 0 , e = 0 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "while i is less than or equal to a",
      "code": "while ( i <= a )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if result of run f with b [ i ] as argument is true",
      "code": "if ( f ( b [ i ] ) )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set d [ e ] to b [ i ]",
      "code": "d [ e ] = b [ i ] ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "increment e",
      "code": "e ++ ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "set s to 0",
      "code": "s = 0 ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "break current loop iteration",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if result of run f with b [ i ] as argument is false and s is 0",
      "code": "if ( f ( b [ i ] ) == false && s == 0 )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "set d [ e ] to b [ i ]",
      "code": "d [ e ] = b [ i ] ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "increment e",
      "code": "e ++ ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "increment s",
      "code": "s ++ ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 26,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "increment s",
      "code": "s ++ ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print d print newline",
      "code": "cout << d << endl ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = { \" aeiouy \" , x } ;"
      ],
      "err_line": 1,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( i = 0 ; i < 6 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 9,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int i = 0 , s = 0 , e = 0 , e ;"
      ],
      "err_line": 11,
      "err_msg": "redeclaration of ‘int e’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 29,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        20
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "if ( f ( b [ i ] ) && s == 0 )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        20,
        14
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "if ( f ( b [ i ] ) && s == 0 )",
        "d [ ' e ' ] = b [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        20,
        14,
        21
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "if ( f ( b [ i ] ) && s == 0 )",
        "d [ ' e ' ] = b [ i ] ;",
        "d [ ' e ' ] = b [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        20,
        14,
        18
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "if ( f ( b [ i ] ) && s == 0 )",
        "d [ ' e ' ] = b [ i ] ;",
        "break ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        20,
        14,
        13
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "if ( f ( b [ i ] ) && s == 0 )",
        "d [ ' e ' ] = b [ i ] ;",
        "if ( ! f ( b [ i ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        20,
        21
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "if ( f ( b [ i ] ) && s == 0 )",
        "d [ ' e ' ] = b [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        20,
        21,
        18
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "if ( f ( b [ i ] ) && s == 0 )",
        "d [ ' e ' ] = b [ i ] ;",
        "break ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        20,
        21,
        13
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "if ( f ( b [ i ] ) && s == 0 )",
        "d [ ' e ' ] = b [ i ] ;",
        "if ( ! f ( b [ i ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        20,
        18
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "if ( f ( b [ i ] ) && s == 0 )",
        "break ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        20,
        18,
        13
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "if ( f ( b [ i ] ) && s == 0 )",
        "break ;",
        "if ( ! f ( b [ i ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        20,
        13
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "if ( f ( b [ i ] ) && s == 0 )",
        "if ( ! f ( b [ i ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "d [ ' e ' ] = b [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        14,
        21
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "d [ ' e ' ] = b [ i ] ;",
        "d [ ' e ' ] = b [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        14,
        21,
        18
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "d [ ' e ' ] = b [ i ] ;",
        "d [ ' e ' ] = b [ i ] ;",
        "break ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        14,
        21,
        13
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "d [ ' e ' ] = b [ i ] ;",
        "d [ ' e ' ] = b [ i ] ;",
        "if ( ! f ( b [ i ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        14,
        18
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "d [ ' e ' ] = b [ i ] ;",
        "break ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        14,
        18,
        13
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "d [ ' e ' ] = b [ i ] ;",
        "break ;",
        "if ( ! f ( b [ i ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        14,
        13
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "d [ ' e ' ] = b [ i ] ;",
        "if ( ! f ( b [ i ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        21
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "d [ ' e ' ] = b [ i ] ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        21,
        18
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "d [ ' e ' ] = b [ i ] ;",
        "break ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        21,
        18,
        13
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "d [ ' e ' ] = b [ i ] ;",
        "break ;",
        "if ( ! f ( b [ i ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        21,
        13
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "d [ ' e ' ] = b [ i ] ;",
        "if ( ! f ( b [ i ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "break ;"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        18,
        13
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "break ;",
        "if ( ! f ( b [ i ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "char b [ 10005 ] , c [ 20 ] , d [ 20 ] = \" aeiouy \" , x = \" aeiouy \" ;",
        "if ( ! f ( b [ i ] ) )"
      ],
      "err_line": 1,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    }
  ]
}