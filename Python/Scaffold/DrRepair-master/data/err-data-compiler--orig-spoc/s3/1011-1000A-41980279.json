{
  "meta": {
    "index": 1011,
    "hitid": "3SZYX62S5GUIONLZ996XN2TGAP9577",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "1000A",
    "subid": "41980279"
  },
  "lines": [
    {
      "line": 0,
      "text": "INF = const int with INF = 0x3f3f3f3f",
      "code": "const int INF = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "i , j , k = int",
      "code": "int i , j , k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "n , m = int",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "s , ss = string array of size 105 each",
      "code": "string s [ 105 ] , ss [ 105 ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read n values into s",
      "code": "for ( i = 0 ; i < n ; i ++ ) cin >> s [ i ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read n values into ss",
      "code": "for ( i = 0 ; i < n ; i ++ ) cin >> ss [ i ] ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to n",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for j = 0 to n",
      "code": "for ( j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if s [ i ] is ss [ j ] and s [ i ] is not \" 0 \" and ss [ j ] is not \" 0 \" set s [ i ] and ss [ j ] to \" 0 \"",
      "code": "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" ) s [ i ] = \" 0 \" , ss [ j ] = \" 0 \" ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "cou = int with cou = 0",
      "code": "int cou = 0 ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 0 to n",
      "code": "for ( i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for j = 0 to n",
      "code": "for ( j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if s [ i ] is not \" 0 \" and ss [ j ] is not \" 0 \"",
      "code": "if ( s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "if length if s [ i ] is length of ss [ j ] set s [ i ] and ss [ j ] to \" 0 \" and increment cou",
      "code": "if ( s [ i ] . length ( ) == ss [ j ] . length ( ) ) s [ i ] = \" 0 \" , ss [ j ] = \" 0 \" , cou ++ ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "print cou",
      "code": "cout << cou << endl ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int i , j , n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "string s [ 105 ] [ 105 ] , ss [ 105 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [105] {aka std::__cxx11::basic_string<char> [105]}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 5,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( s [ i ] == ' ss ' ) s [ i ] . size ( ) ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        16
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        16,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "int cou = ' 0 ' ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        16,
        12,
        19
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "int cou = ' 0 ' ;",
        "cout << cou ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        16,
        12,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "int cou = ' 0 ' ;",
        "int i , j , n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        10,
        16,
        12,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "int cou = ' 0 ' ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        16,
        19
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "cout << cou ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        16,
        19,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "cout << cou ;",
        "int i , j , n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        10,
        16,
        19,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "cout << cou ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        16,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "int i , j , n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        10,
        16,
        2,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "int i , j , n ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        16,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "int cou = ' 0 ' ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        12,
        19
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "int cou = ' 0 ' ;",
        "cout << cou ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        12,
        19,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "int cou = ' 0 ' ;",
        "cout << cou ;",
        "int i , j , n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        10,
        12,
        19,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "int cou = ' 0 ' ;",
        "cout << cou ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        12,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "int cou = ' 0 ' ;",
        "int i , j , n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        10,
        12,
        2,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "int cou = ' 0 ' ;",
        "int i , j , n ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        12,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "int cou = ' 0 ' ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        19
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "cout << cou ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        19,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "cout << cou ;",
        "int i , j , n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        10,
        19,
        2,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "cout << cou ;",
        "int i , j , n ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        19,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "cout << cou ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "int i , j , n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        10,
        2,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "int i , j , n ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ss [ j ] && s [ i ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" && ss [ j ] != \" 0 \" )",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        16,
        12
      ],
      "mod_code": [
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "int cou = ' 0 ' ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        16,
        12,
        19
      ],
      "mod_code": [
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "int cou = ' 0 ' ;",
        "cout << cou ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        16,
        12,
        19,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "int cou = ' 0 ' ;",
        "cout << cou ;",
        "int i , j , n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        16,
        12,
        19,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "int cou = ' 0 ' ;",
        "cout << cou ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        16,
        12,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "int cou = ' 0 ' ;",
        "int i , j , n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        16,
        12,
        2,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "int cou = ' 0 ' ;",
        "int i , j , n ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        16,
        12,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "int cou = ' 0 ' ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        16,
        19
      ],
      "mod_code": [
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "cout << cou ;"
      ],
      "err_line": 16,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        16,
        19,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "cout << cou ;",
        "int i , j , n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        16,
        19,
        2,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "cout << cou ;",
        "int i , j , n ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        16,
        19,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "cout << cou ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        16,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "int i , j , n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        16,
        2,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "int i , j , n ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        16,
        15
      ],
      "mod_code": [
        "if ( s [ i ] == ( int ) ss [ j ] . size ( ) ) { s [ i ] is ss [ j ] to cou ; }",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        19,
        2
      ],
      "mod_code": [
        "int cou = ' 0 ' ;",
        "cout << cou ;",
        "int i , j , n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        12,
        19,
        2,
        15
      ],
      "mod_code": [
        "int cou = ' 0 ' ;",
        "cout << cou ;",
        "int i , j , n ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        19,
        15
      ],
      "mod_code": [
        "int cou = ' 0 ' ;",
        "cout << cou ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "int cou = ' 0 ' ;",
        "int i , j , n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        12,
        2,
        15
      ],
      "mod_code": [
        "int cou = ' 0 ' ;",
        "int i , j , n ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        15
      ],
      "mod_code": [
        "int cou = ' 0 ' ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        19,
        2
      ],
      "mod_code": [
        "cout << cou ;",
        "int i , j , n ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int n’"
    },
    {
      "mod_line": [
        19,
        2,
        15
      ],
      "mod_code": [
        "cout << cou ;",
        "int i , j , n ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        19,
        15
      ],
      "mod_code": [
        "cout << cou ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "int i , j , n ;",
        "if ( s [ i ] != \" 0 ' && ss [ j ] != \" 0 \" )"
      ],
      "err_line": 15,
      "err_msg": "missing terminating \" character"
    }
  ]
}