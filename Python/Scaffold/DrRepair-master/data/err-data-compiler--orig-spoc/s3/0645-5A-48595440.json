{
  "meta": {
    "index": 645,
    "hitid": "3WRAAIUSBJT99837MI1CPCMQ3UAXAG",
    "workerid": "A1APYLD4DUK33J",
    "probid": "5A",
    "subid": "48595440"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers count , result , k , z with count = 0 , result = 0 , k = 0 , z = 0",
      "code": "int count = 0 , result = 0 , k = 0 , z = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while read line from cin to s",
      "code": "while ( getline ( cin , s ) )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set z to 1",
      "code": "z = 1 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if s [ 0 ] is ' + '",
      "code": "if ( s [ 0 ] == ' + ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment count",
      "code": "count ++ ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else if s [ 0 ] is ' - '",
      "code": "else if ( s [ 0 ] == ' - ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "decrement count",
      "code": "count -- ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set k to size of s",
      "code": "k = s . size ( ) ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "for i = 0 to s [ i ] is not ' : ' , incrementing i , increment z",
      "code": "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ ) { z ++ ; }",
      "indent": 3
    },
    {
      "line": 12,
      "text": "increment result by ( k - z ) * count",
      "code": "result += ( k - z ) * count ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print result print newline",
      "code": "cout << result << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( cin >> cin >> s )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) { z ++ ; }",
        "int s ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        11,
        2,
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) { z ++ ; }",
        "int s ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        11,
        2,
        9,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) { z ++ ; }",
        "int s ;",
        "do",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        2,
        9,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) { z ++ ; }",
        "int s ;",
        "do",
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        11,
        2,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) { z ++ ; }",
        "int s ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        2,
        5,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) { z ++ ; }",
        "int s ;",
        "if ( s [ 0 ] == \" + ' )",
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        2,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) { z ++ ; }",
        "int s ;",
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) { z ++ ; }",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        9,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) { z ++ ; }",
        "do",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        9,
        5,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) { z ++ ; }",
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        9,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) { z ++ ; }",
        "do",
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        11,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) { z ++ ; }",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        5,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) { z ++ ; }",
        "if ( s [ 0 ] == \" + ' )",
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) { z ++ ; }",
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) z ++ ;",
        "int s ;"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        11,
        2,
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) z ++ ;",
        "int s ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        11,
        2,
        9,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) z ++ ;",
        "int s ;",
        "do",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        2,
        9,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) z ++ ;",
        "int s ;",
        "do",
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        11,
        2,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) z ++ ;",
        "int s ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        2,
        5,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) z ++ ;",
        "int s ;",
        "if ( s [ 0 ] == \" + ' )",
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        2,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) z ++ ;",
        "int s ;",
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) z ++ ;",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        9,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) z ++ ;",
        "do",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        9,
        5,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) z ++ ;",
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        9,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) z ++ ;",
        "do",
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        11,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) z ++ ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        5,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) z ++ ;",
        "if ( s [ 0 ] == \" + ' )",
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; s [ i ] != ' : ' ; i ++ , z ++ ) z ++ ;",
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "int s ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        2,
        9,
        5
      ],
      "mod_code": [
        "int s ;",
        "do",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        9,
        5,
        1
      ],
      "mod_code": [
        "int s ;",
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        9,
        1
      ],
      "mod_code": [
        "int s ;",
        "do",
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "int s ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        5,
        1
      ],
      "mod_code": [
        "int s ;",
        "if ( s [ 0 ] == \" + ' )",
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "int s ;",
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        5,
        1
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "do",
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int z’"
    },
    {
      "mod_line": [
        5,
        1
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "int count = 0 , result = 0 , k = 0 , z = 0 , z ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    }
  ]
}