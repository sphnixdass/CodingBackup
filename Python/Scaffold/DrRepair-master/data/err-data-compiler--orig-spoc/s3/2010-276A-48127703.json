{
  "meta": {
    "index": 2010,
    "hitid": "3PUOXASB57XK9KTHVUBXQ2RH6E29ZR",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "276A",
    "subid": "48127703"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , k , f , t , m , j = int",
      "code": "int n , k , f , t , m , j ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n , k , f , t",
      "code": "cin >> n >> k >> f >> t ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if t > k",
      "code": "if ( t > k )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "m = f - ( t - k )",
      "code": "m = f - ( t - k ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 6,
      "text": "m = f",
      "code": "m = f ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read f , t",
      "code": "cin >> f >> t ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "if t > k",
      "code": "if ( t > k )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "j = f - ( t - k )",
      "code": "j = f - ( t - k ) ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 13,
      "text": "j = f",
      "code": "j = f ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if j > m m = j",
      "code": "if ( j > m ) { m = j ; }",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print m",
      "code": "cout << m << endl ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , k , f , m , m , j ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        13,
        6,
        1
      ],
      "mod_code": [
        "int j = f ;",
        "int m = f ;",
        "int n , k , f , m , m , j ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        13,
        6,
        1,
        10
      ],
      "mod_code": [
        "int j = f ;",
        "int m = f ;",
        "int n , k , f , m , m , j ;",
        "if ( t )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        13,
        6,
        1,
        3
      ],
      "mod_code": [
        "int j = f ;",
        "int m = f ;",
        "int n , k , f , m , m , j ;",
        "if ( t )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        13,
        6,
        1,
        12
      ],
      "mod_code": [
        "int j = f ;",
        "int m = f ;",
        "int n , k , f , m , m , j ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        13,
        6,
        10,
        12
      ],
      "mod_code": [
        "int j = f ;",
        "int m = f ;",
        "if ( t )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        13,
        6,
        3,
        12
      ],
      "mod_code": [
        "int j = f ;",
        "int m = f ;",
        "if ( t )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        13,
        6,
        12
      ],
      "mod_code": [
        "int j = f ;",
        "int m = f ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        13,
        1
      ],
      "mod_code": [
        "int j = f ;",
        "int n , k , f , m , m , j ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        13,
        1,
        10
      ],
      "mod_code": [
        "int j = f ;",
        "int n , k , f , m , m , j ;",
        "if ( t )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        13,
        1,
        10,
        3
      ],
      "mod_code": [
        "int j = f ;",
        "int n , k , f , m , m , j ;",
        "if ( t )",
        "if ( t )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        13,
        1,
        10,
        12
      ],
      "mod_code": [
        "int j = f ;",
        "int n , k , f , m , m , j ;",
        "if ( t )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        13,
        1,
        3
      ],
      "mod_code": [
        "int j = f ;",
        "int n , k , f , m , m , j ;",
        "if ( t )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        13,
        1,
        3,
        12
      ],
      "mod_code": [
        "int j = f ;",
        "int n , k , f , m , m , j ;",
        "if ( t )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        13,
        1,
        12
      ],
      "mod_code": [
        "int j = f ;",
        "int n , k , f , m , m , j ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        13,
        10,
        3,
        12
      ],
      "mod_code": [
        "int j = f ;",
        "if ( t )",
        "if ( t )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        13,
        10,
        12
      ],
      "mod_code": [
        "int j = f ;",
        "if ( t )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        13,
        3,
        12
      ],
      "mod_code": [
        "int j = f ;",
        "if ( t )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        13,
        12
      ],
      "mod_code": [
        "int j = f ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "int m = f ;",
        "int n , k , f , m , m , j ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6,
        1,
        10
      ],
      "mod_code": [
        "int m = f ;",
        "int n , k , f , m , m , j ;",
        "if ( t )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6,
        1,
        10,
        3
      ],
      "mod_code": [
        "int m = f ;",
        "int n , k , f , m , m , j ;",
        "if ( t )",
        "if ( t )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6,
        1,
        10,
        12
      ],
      "mod_code": [
        "int m = f ;",
        "int n , k , f , m , m , j ;",
        "if ( t )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6,
        1,
        3
      ],
      "mod_code": [
        "int m = f ;",
        "int n , k , f , m , m , j ;",
        "if ( t )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6,
        1,
        3,
        12
      ],
      "mod_code": [
        "int m = f ;",
        "int n , k , f , m , m , j ;",
        "if ( t )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6,
        1,
        12
      ],
      "mod_code": [
        "int m = f ;",
        "int n , k , f , m , m , j ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        6,
        10,
        3,
        12
      ],
      "mod_code": [
        "int m = f ;",
        "if ( t )",
        "if ( t )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        6,
        10,
        12
      ],
      "mod_code": [
        "int m = f ;",
        "if ( t )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        6,
        3,
        12
      ],
      "mod_code": [
        "int m = f ;",
        "if ( t )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "int m = f ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int n , k , f , m , m , j ;",
        "if ( t )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        1,
        10,
        3
      ],
      "mod_code": [
        "int n , k , f , m , m , j ;",
        "if ( t )",
        "if ( t )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        1,
        10,
        3,
        12
      ],
      "mod_code": [
        "int n , k , f , m , m , j ;",
        "if ( t )",
        "if ( t )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        1,
        10,
        12
      ],
      "mod_code": [
        "int n , k , f , m , m , j ;",
        "if ( t )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int n , k , f , m , m , j ;",
        "if ( t )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        1,
        3,
        12
      ],
      "mod_code": [
        "int n , k , f , m , m , j ;",
        "if ( t )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "int n , k , f , m , m , j ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int m’"
    },
    {
      "mod_line": [
        10,
        3,
        12
      ],
      "mod_code": [
        "if ( t )",
        "if ( t )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "if ( t )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "if ( t )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘(’ token"
    }
  ]
}