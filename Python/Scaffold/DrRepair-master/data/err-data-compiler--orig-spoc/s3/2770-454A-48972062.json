{
  "meta": {
    "index": 2770,
    "hitid": "36KM3FWE3R6JTGZYC30L67XPTH070Q",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "454A",
    "subid": "48972062"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = - 1 * ( n / 2 ) to n / 2",
      "code": "for ( int i = - 1 * ( n / 2 ) ; i <= n / 2 ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for j = - 1 * ( n / 2 ) to n / 2",
      "code": "for ( int j = - 1 * ( n / 2 ) ; j <= n / 2 ; j ++ )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if abs ( i ) + abs ( j ) is greater than n / 2",
      "code": "if ( abs ( i ) + abs ( j ) > n / 2 )",
      "indent": 3
    },
    {
      "line": 6,
      "text": "display \" * \"",
      "code": "cout << \" * \" ;",
      "indent": 4
    },
    {
      "line": 7,
      "text": "else do",
      "code": "else",
      "indent": 3
    },
    {
      "line": 8,
      "text": "show \" D \"",
      "code": "cout << \" D \" ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "for ( int i = - 1 * ( n / 2 ) ; i < n / 2 )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "for ( int i = - 1 * ( n / 2 ) ; i < n / 2 )",
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        4,
        7
      ],
      "mod_code": [
        "for ( int i = - 1 * ( n / 2 ) ; i < n / 2 )",
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        6
      ],
      "mod_code": [
        "for ( int i = - 1 * ( n / 2 ) ; i < n / 2 )",
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )",
        "do",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        8
      ],
      "mod_code": [
        "for ( int i = - 1 * ( n / 2 ) ; i < n / 2 )",
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )",
        "do",
        "cout << \" D \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        4,
        6
      ],
      "mod_code": [
        "for ( int i = - 1 * ( n / 2 ) ; i < n / 2 )",
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        8
      ],
      "mod_code": [
        "for ( int i = - 1 * ( n / 2 ) ; i < n / 2 )",
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )",
        "cout << \" * \" << endl ;",
        "cout << \" D \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        4,
        8
      ],
      "mod_code": [
        "for ( int i = - 1 * ( n / 2 ) ; i < n / 2 )",
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )",
        "cout << \" D \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "for ( int i = - 1 * ( n / 2 ) ; i < n / 2 )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        7,
        6
      ],
      "mod_code": [
        "for ( int i = - 1 * ( n / 2 ) ; i < n / 2 )",
        "do",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        7,
        6,
        8
      ],
      "mod_code": [
        "for ( int i = - 1 * ( n / 2 ) ; i < n / 2 )",
        "do",
        "cout << \" * \" << endl ;",
        "cout << \" D \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        7,
        8
      ],
      "mod_code": [
        "for ( int i = - 1 * ( n / 2 ) ; i < n / 2 )",
        "do",
        "cout << \" D \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "for ( int i = - 1 * ( n / 2 ) ; i < n / 2 )",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        6,
        8
      ],
      "mod_code": [
        "for ( int i = - 1 * ( n / 2 ) ; i < n / 2 )",
        "cout << \" * \" << endl ;",
        "cout << \" D \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "for ( int i = - 1 * ( n / 2 ) ; i < n / 2 )",
        "cout << \" D \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        7,
        3
      ],
      "mod_code": [
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )",
        "do",
        "for ( int i = - 1 * ( n / 2 ) ; i < ( n / 2 ) ; ++ i )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        7,
        3,
        6
      ],
      "mod_code": [
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )",
        "do",
        "for ( int i = - 1 * ( n / 2 ) ; i < ( n / 2 ) ; ++ i )",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        7,
        3,
        8
      ],
      "mod_code": [
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )",
        "do",
        "for ( int i = - 1 * ( n / 2 ) ; i < ( n / 2 ) ; ++ i )",
        "cout << \" D \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        7,
        6
      ],
      "mod_code": [
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )",
        "do",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        7,
        6,
        8
      ],
      "mod_code": [
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )",
        "do",
        "cout << \" * \" << endl ;",
        "cout << \" D \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        7,
        8
      ],
      "mod_code": [
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )",
        "do",
        "cout << \" D \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )",
        "for ( int i = - 1 * ( n / 2 ) ; i < ( n / 2 ) ; ++ i )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        3,
        6
      ],
      "mod_code": [
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )",
        "for ( int i = - 1 * ( n / 2 ) ; i < ( n / 2 ) ; ++ i )",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        3,
        6,
        8
      ],
      "mod_code": [
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )",
        "for ( int i = - 1 * ( n / 2 ) ; i < ( n / 2 ) ; ++ i )",
        "cout << \" * \" << endl ;",
        "cout << \" D \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        3,
        8
      ],
      "mod_code": [
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )",
        "for ( int i = - 1 * ( n / 2 ) ; i < ( n / 2 ) ; ++ i )",
        "cout << \" D \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        6,
        8
      ],
      "mod_code": [
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )",
        "cout << \" * \" << endl ;",
        "cout << \" D \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "for ( int j = - 1 * ( n / 2 ) ; j < n / 2 )",
        "cout << \" D \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "do",
        "for ( int i = - 1 * ( n / 2 ) ; i < ( n / 2 ) ; ++ i )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        3,
        6
      ],
      "mod_code": [
        "do",
        "for ( int i = - 1 * ( n / 2 ) ; i < ( n / 2 ) ; ++ i )",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        3,
        6,
        8
      ],
      "mod_code": [
        "do",
        "for ( int i = - 1 * ( n / 2 ) ; i < ( n / 2 ) ; ++ i )",
        "cout << \" * \" << endl ;",
        "cout << \" D \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        3,
        8
      ],
      "mod_code": [
        "do",
        "for ( int i = - 1 * ( n / 2 ) ; i < ( n / 2 ) ; ++ i )",
        "cout << \" D \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "do",
        "cout << \" * \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        6,
        8
      ],
      "mod_code": [
        "do",
        "cout << \" * \" << endl ;",
        "cout << \" D \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "do",
        "cout << \" D \" << endl ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}