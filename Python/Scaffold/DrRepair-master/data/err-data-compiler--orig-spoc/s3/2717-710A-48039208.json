{
  "meta": {
    "index": 2717,
    "hitid": "3SNR5F7R92NF9QVO313XILP21YJEIC",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "710A",
    "subid": "48039208"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "Read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if s [ 0 ] is a and s [ 1 ] is 1",
      "code": "if ( s [ 0 ] == ' a ' && s [ 1 ] == ' 1 ' )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print 3 and a new line",
      "code": "cout << \" 3 \" << endl ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else if s [ 0 ] is a and s [ 1 ] is 8",
      "code": "else if ( s [ 0 ] == ' a ' && s [ 1 ] == ' 8 ' )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print 3 and a new line",
      "code": "cout << \" 3 \" << endl ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else if s [ 0 ] is h and s [ 1 ] is 1",
      "code": "else if ( s [ 0 ] == ' h ' && s [ 1 ] == ' 1 ' )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print 3 and a new line",
      "code": "cout << \" 3 \" << endl ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "else if s [ 0 ] is h and s [ 1 ] is 8",
      "code": "else if ( s [ 0 ] == ' h ' && s [ 1 ] == ' 8 ' )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print 3 and a new line",
      "code": "cout << \" 3 \" << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "else if s [ 0 ] is a and s [ 1 ] is not 1 and s [ 1 ] is not 8",
      "code": "else if ( s [ 0 ] == ' a ' && s [ 1 ] != ' 1 ' && s [ 1 ] != ' 8 ' )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print 5 and a new line",
      "code": "cout << \" 5 \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else if s [ 0 ] is h and s [ 1 ] is not 1 and s [ 1 ] is not 8",
      "code": "else if ( s [ 0 ] == ' h ' && s [ 1 ] != ' 1 ' && s [ 1 ] != ' 8 ' )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print 5 and a new line",
      "code": "cout << \" 5 \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else if s [ 1 ] is 1 OR s [ 1 ] is 8",
      "code": "else if ( s [ 1 ] == ' 1 ' || s [ 1 ] == ' 8 ' )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print 5 and a new line",
      "code": "cout << \" 5 \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "else do the following",
      "code": "else",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print 8 and a new line",
      "code": "cout << \" 8 \" << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "if ( ! s [ 0 ] && s [ 1 ] == ' 1 ' )",
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        2,
        1
      ],
      "mod_code": [
        "if ( ! s [ 0 ] && s [ 1 ] == ' 1 ' )",
        "gets ( s ) ;",
        "char s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        2,
        1,
        17
      ],
      "mod_code": [
        "if ( ! s [ 0 ] && s [ 1 ] == ' 1 ' )",
        "gets ( s ) ;",
        "char s ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        2,
        17
      ],
      "mod_code": [
        "if ( ! s [ 0 ] && s [ 1 ] == ' 1 ' )",
        "gets ( s ) ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "if ( ! s [ 0 ] && s [ 1 ] == ' 1 ' )",
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        1,
        17
      ],
      "mod_code": [
        "if ( ! s [ 0 ] && s [ 1 ] == ' 1 ' )",
        "char s ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        17
      ],
      "mod_code": [
        "if ( ! s [ 0 ] && s [ 1 ] == ' 1 ' )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "gets ( s ) ;",
        "char s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        17
      ],
      "mod_code": [
        "gets ( s ) ;",
        "char s ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        17
      ],
      "mod_code": [
        "gets ( s ) ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        17
      ],
      "mod_code": [
        "char s ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    }
  ]
}