{
  "meta": {
    "index": 500,
    "hitid": "3G5RUKN2ECXQSVFYS603VFK8W00N9U",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "967A",
    "subid": "46267223"
  },
  "lines": [
    {
      "line": 0,
      "text": "MAXN = 105 = const int",
      "code": "const int MAXN = 105 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "takeoffHour = 0 , takeoffMin = 0 be ints",
      "code": "int takeoffHour = 0 , takeoffMin = 0 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "lat h , m be both int arrays of length MAXN",
      "code": "int h [ MAXN ] , m [ MAXN ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "in bool function splitTime taking diff , s , last = int",
      "code": "bool splitTime ( int diff , int s , int last )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "if diff < = 2 * s + 1 then return false",
      "code": "if ( diff <= 2 * s + 1 ) { return false ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set takeoffHour to ( last + s + 1 ) / 60",
      "code": "takeoffHour = ( last + s + 1 ) / 60 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set takeoffMin to ( last + s + 1 ) % 60",
      "code": "takeoffMin = ( last + s + 1 ) % 60 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print takeoffHour and space and takeoffMin",
      "code": "cout << takeoffHour << \" \" << takeoffMin << endl ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return true",
      "code": "return true ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 11,
      "text": "n , s = int",
      "code": "int n , s ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read n , s",
      "code": "cin >> n >> s ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 0 to n to n exlusive , read h [ i ] , m [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> h [ i ] >> m [ i ] ; }",
      "indent": 1
    },
    {
      "line": 14,
      "text": "diff = 60 * h [ 0 ] + m [ 0 ] be an int",
      "code": "int diff = 60 * h [ 0 ] + m [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if diff > s",
      "code": "if ( diff > s )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print 0 and space and 0",
      "code": "cout << 0 << \" \" << 0 << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "for i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "if h [ i ] < h [ i - 1 ] then increment h at i by 24",
      "code": "if ( h [ i ] < h [ i - 1 ] ) h [ i ] += 24 ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "last = int = 60 * h [ i - 1 ] + m [ i - 1 ]",
      "code": "int last = 60 * h [ i - 1 ] + m [ i - 1 ] ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "now = 60 * h [ i ] + m [ i ] = int",
      "code": "int now = 60 * h [ i ] + m [ i ] ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "diff = now - last = int",
      "code": "int diff = now - last ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "if splitTime of diff , s , last then return 0",
      "code": "if ( splitTime ( diff , s , last ) ) { return 0 ; }",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "now = 60 * h [ n - 1 ] + m [ n - 1 ] = int",
      "code": "int now = 60 * h [ n - 1 ] + m [ n - 1 ] ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "set takeoffHour = ( now + s + 1 ) / 60",
      "code": "takeoffHour = ( now + s + 1 ) / 60 ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "set takeoffMin = ( now + s + 1 ) % 60",
      "code": "takeoffMin = ( now + s + 1 ) % 60 ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "print takeoffHour and space and takeoffMin",
      "code": "cout << takeoffHour << \" \" << takeoffMin << endl ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        24
      ],
      "mod_code": [
        "if ( splitTime ( diff , s ) ) return 0 ;"
      ],
      "err_line": 24,
      "err_msg": "too few arguments to function ‘bool splitTime(int, int, int)’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int m [ MAXN ] , m [ MAXN ] ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "takeoffMin += s + 1 ) ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "int diff -= last , last ;"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        16,
        24
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "if ( splitTime ( diff , s ) ) return 0 ;"
      ],
      "err_line": 24,
      "err_msg": "too few arguments to function ‘bool splitTime(int, int, int)’"
    },
    {
      "mod_line": [
        16,
        24,
        23
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "int diff -= last , last ;"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        16,
        24,
        23,
        2
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "int diff -= last , last ;",
        "int m [ MAXN ] , m [ MAXN ] ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        16,
        24,
        23,
        5
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "int diff -= last , last ;",
        "takeoffHour += s + 1 ;"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        16,
        24,
        23,
        3
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "int diff -= last , last ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        16,
        24,
        2
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "int m [ MAXN ] , m [ MAXN ] ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        16,
        24,
        2,
        5
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "int m [ MAXN ] , m [ MAXN ] ;",
        "takeoffHour += s + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        16,
        24,
        2,
        3
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "int m [ MAXN ] , m [ MAXN ] ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        16,
        24,
        5
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "takeoffHour += s + 1 ;"
      ],
      "err_line": 24,
      "err_msg": "too few arguments to function ‘bool splitTime(int, int, int)’"
    },
    {
      "mod_line": [
        16,
        24,
        5,
        3
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "takeoffHour += s + 1 ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 24,
      "err_msg": "too few arguments to function ‘bool splitTime(int, int, bool)’"
    },
    {
      "mod_line": [
        16,
        24,
        3
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 24,
      "err_msg": "too few arguments to function ‘bool splitTime(int, int, bool)’"
    },
    {
      "mod_line": [
        16,
        23
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "int diff -= last , last ;"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        16,
        23,
        2
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "int diff -= last , last ;",
        "int m [ MAXN ] , m [ MAXN ] ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        16,
        23,
        2,
        5
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "int diff -= last , last ;",
        "int m [ MAXN ] , m [ MAXN ] ;",
        "takeoffHour += s + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        16,
        23,
        2,
        3
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "int diff -= last , last ;",
        "int m [ MAXN ] , m [ MAXN ] ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        16,
        23,
        5
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "int diff -= last , last ;",
        "takeoffHour += s + 1 ;"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        16,
        23,
        5,
        3
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "int diff -= last , last ;",
        "takeoffHour += s + 1 ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        16,
        23,
        3
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "int diff -= last , last ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        16,
        2
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "int m [ MAXN ] , m [ MAXN ] ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        16,
        2,
        5
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "int m [ MAXN ] , m [ MAXN ] ;",
        "takeoffHour += s + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        16,
        2,
        5,
        3
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "int m [ MAXN ] , m [ MAXN ] ;",
        "takeoffHour += s + 1 ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        16,
        2,
        3
      ],
      "mod_code": [
        "cout << 0 << \" \" << 0 << \" \" << 0 << endl ;",
        "int m [ MAXN ] , m [ MAXN ] ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        24,
        23
      ],
      "mod_code": [
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "int diff -= last , last ;"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        24,
        23,
        2
      ],
      "mod_code": [
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "int diff -= last , last ;",
        "int m [ MAXN ] , m [ MAXN ] ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        24,
        23,
        2,
        5
      ],
      "mod_code": [
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "int diff -= last , last ;",
        "int m [ MAXN ] , m [ MAXN ] ;",
        "takeoffHour += s + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        24,
        23,
        2,
        3
      ],
      "mod_code": [
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "int diff -= last , last ;",
        "int m [ MAXN ] , m [ MAXN ] ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        24,
        23,
        5
      ],
      "mod_code": [
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "int diff -= last , last ;",
        "takeoffHour += s + 1 ;"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        24,
        23,
        5,
        3
      ],
      "mod_code": [
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "int diff -= last , last ;",
        "takeoffHour += s + 1 ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        24,
        23,
        3
      ],
      "mod_code": [
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "int diff -= last , last ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        24,
        2
      ],
      "mod_code": [
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "int m [ MAXN ] , m [ MAXN ] ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        24,
        2,
        5
      ],
      "mod_code": [
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "int m [ MAXN ] , m [ MAXN ] ;",
        "takeoffHour += s + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        24,
        2,
        5,
        3
      ],
      "mod_code": [
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "int m [ MAXN ] , m [ MAXN ] ;",
        "takeoffHour += s + 1 ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        24,
        2,
        3
      ],
      "mod_code": [
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "int m [ MAXN ] , m [ MAXN ] ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        24,
        5
      ],
      "mod_code": [
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "takeoffHour += s + 1 ;"
      ],
      "err_line": 24,
      "err_msg": "too few arguments to function ‘bool splitTime(int, int, int)’"
    },
    {
      "mod_line": [
        24,
        5,
        3
      ],
      "mod_code": [
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "takeoffHour += s + 1 ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 24,
      "err_msg": "too few arguments to function ‘bool splitTime(int, int, bool)’"
    },
    {
      "mod_line": [
        24,
        3
      ],
      "mod_code": [
        "if ( splitTime ( diff , s ) ) return 0 ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 24,
      "err_msg": "too few arguments to function ‘bool splitTime(int, int, bool)’"
    },
    {
      "mod_line": [
        23,
        2
      ],
      "mod_code": [
        "int diff -= last , last ;",
        "int m [ MAXN ] , m [ MAXN ] ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        23,
        2,
        5
      ],
      "mod_code": [
        "int diff -= last , last ;",
        "int m [ MAXN ] , m [ MAXN ] ;",
        "takeoffHour += s + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        23,
        2,
        5,
        3
      ],
      "mod_code": [
        "int diff -= last , last ;",
        "int m [ MAXN ] , m [ MAXN ] ;",
        "takeoffHour += s + 1 ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        23,
        2,
        3
      ],
      "mod_code": [
        "int diff -= last , last ;",
        "int m [ MAXN ] , m [ MAXN ] ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        23,
        5
      ],
      "mod_code": [
        "int diff -= last , last ;",
        "takeoffHour += s + 1 ;"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        23,
        5,
        3
      ],
      "mod_code": [
        "int diff -= last , last ;",
        "takeoffHour += s + 1 ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        23,
        3
      ],
      "mod_code": [
        "int diff -= last , last ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 23,
      "err_msg": "expected initializer before ‘-=’ token"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "int m [ MAXN ] , m [ MAXN ] ;",
        "takeoffHour += s + 1 ;"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        2,
        5,
        3
      ],
      "mod_code": [
        "int m [ MAXN ] , m [ MAXN ] ;",
        "takeoffHour += s + 1 ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "int m [ MAXN ] , m [ MAXN ] ;",
        "bool splitTime ( int diff , int s , bool last )"
      ],
      "err_line": 2,
      "err_msg": "redefinition of ‘int m [105]’"
    }
  ]
}