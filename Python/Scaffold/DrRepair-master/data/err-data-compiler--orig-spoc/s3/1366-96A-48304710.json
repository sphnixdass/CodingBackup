{
  "meta": {
    "index": 1366,
    "hitid": "3B9XR6P1WEPDXY3ABSM7TEYHATWBJB",
    "workerid": "A1APYLD4DUK33J",
    "probid": "96A",
    "subid": "48304710"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer cnt with cnt = 0",
      "code": "int cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to length of s exclusive",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if s [ i ] is s [ i + 1 ]",
      "code": "if ( s [ i ] == s [ i + 1 ] )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if cnt is greater than 7 or cnt is 7",
      "code": "if ( cnt > 7 || cnt == 7 )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 13,
      "text": "set cnt to 0",
      "code": "cnt = 0 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if cnt is less than or equal to 6 , print \" NO \" print newline",
      "code": "if ( cnt <= 6 ) { cout << \" NO \" << endl ; }",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "int s ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        11,
        7
      ],
      "mod_code": [
        "int s ;",
        "do",
        "do"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        11,
        7,
        3
      ],
      "mod_code": [
        "int s ;",
        "do",
        "do",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        11,
        7,
        16
      ],
      "mod_code": [
        "int s ;",
        "do",
        "do",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        11,
        7,
        5
      ],
      "mod_code": [
        "int s ;",
        "do",
        "do",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        11,
        3
      ],
      "mod_code": [
        "int s ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        11,
        3,
        16
      ],
      "mod_code": [
        "int s ;",
        "do",
        "s >> s ;",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        11,
        3,
        5
      ],
      "mod_code": [
        "int s ;",
        "do",
        "s >> s ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        11,
        16
      ],
      "mod_code": [
        "int s ;",
        "do",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        11,
        16,
        5
      ],
      "mod_code": [
        "int s ;",
        "do",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        11,
        5
      ],
      "mod_code": [
        "int s ;",
        "do",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "int s ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        7,
        3
      ],
      "mod_code": [
        "int s ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        7,
        3,
        16
      ],
      "mod_code": [
        "int s ;",
        "do",
        "s >> s ;",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        7,
        3,
        5
      ],
      "mod_code": [
        "int s ;",
        "do",
        "s >> s ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        7,
        16
      ],
      "mod_code": [
        "int s ;",
        "do",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        7,
        16,
        5
      ],
      "mod_code": [
        "int s ;",
        "do",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        7,
        5
      ],
      "mod_code": [
        "int s ;",
        "do",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "int s ;",
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        3,
        16
      ],
      "mod_code": [
        "int s ;",
        "s >> s ;",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        3,
        16,
        5
      ],
      "mod_code": [
        "int s ;",
        "s >> s ;",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        3,
        5
      ],
      "mod_code": [
        "int s ;",
        "s >> s ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        16
      ],
      "mod_code": [
        "int s ;",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        16,
        5
      ],
      "mod_code": [
        "int s ;",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "int s ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        7,
        3
      ],
      "mod_code": [
        "do",
        "do",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        7,
        3,
        16
      ],
      "mod_code": [
        "do",
        "do",
        "s >> s ;",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        7,
        3,
        5
      ],
      "mod_code": [
        "do",
        "do",
        "s >> s ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        7,
        16
      ],
      "mod_code": [
        "do",
        "do",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        7,
        16,
        5
      ],
      "mod_code": [
        "do",
        "do",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        7,
        5
      ],
      "mod_code": [
        "do",
        "do",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "do",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        3,
        16
      ],
      "mod_code": [
        "do",
        "s >> s ;",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        3,
        16,
        5
      ],
      "mod_code": [
        "do",
        "s >> s ;",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        3,
        5
      ],
      "mod_code": [
        "do",
        "s >> s ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        11,
        16
      ],
      "mod_code": [
        "do",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        16,
        5
      ],
      "mod_code": [
        "do",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        5
      ],
      "mod_code": [
        "do",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "do",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        3,
        16
      ],
      "mod_code": [
        "do",
        "s >> s ;",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        3,
        16,
        5
      ],
      "mod_code": [
        "do",
        "s >> s ;",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        3,
        5
      ],
      "mod_code": [
        "do",
        "s >> s ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        16
      ],
      "mod_code": [
        "do",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        16,
        5
      ],
      "mod_code": [
        "do",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "do",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "s >> s ;",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        16,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "cout << ( cnt <= 6 ) << \" NO \" << endl ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}