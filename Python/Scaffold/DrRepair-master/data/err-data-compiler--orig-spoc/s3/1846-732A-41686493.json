{
  "meta": {
    "index": 1846,
    "hitid": "3UY4PIS8QRF83QC3OTLAG92PYOD1N0",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "732A",
    "subid": "41686493"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "k , r , res = int",
      "code": "int k , r , res ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read k , r",
      "code": "cin >> k >> r ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if k is not multiple of 10",
      "code": "if ( k % 10 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 1 to 10 exclusive",
      "code": "for ( int i = 1 ; i < 10 ; i ++ )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if ( k * i ) modulo 10 is r or not ( ( k * i ) modulo 10 )",
      "code": "if ( ( ( k * i ) % 10 == r ) || ! ( ( k * i ) % 10 ) )",
      "indent": 3
    },
    {
      "line": 6,
      "text": "res = i",
      "code": "res = i ;",
      "indent": 4
    },
    {
      "line": 7,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 11,
      "text": "res = 1",
      "code": "res = 1 ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print res",
      "code": "cout << res << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int k , r , n ;"
      ],
      "err_line": 6,
      "err_msg": "‘res’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        6,
        13,
        10
      ],
      "mod_code": [
        "if ( ( k * i ) % 10 == r || ! ( k * i ) % 10 )",
        "int res = i ;",
        "cout << res ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        6,
        13,
        7
      ],
      "mod_code": [
        "if ( ( k * i ) % 10 == r || ! ( k * i ) % 10 )",
        "int res = i ;",
        "cout << res ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        6,
        10
      ],
      "mod_code": [
        "if ( ( k * i ) % 10 == r || ! ( k * i ) % 10 )",
        "int res = i ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        6,
        10,
        7
      ],
      "mod_code": [
        "if ( ( k * i ) % 10 == r || ! ( k * i ) % 10 )",
        "int res = i ;",
        "do",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        6,
        10,
        2
      ],
      "mod_code": [
        "if ( ( k * i ) % 10 == r || ! ( k * i ) % 10 )",
        "int res = i ;",
        "do",
        "cin >> k >> k ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        6,
        7
      ],
      "mod_code": [
        "if ( ( k * i ) % 10 == r || ! ( k * i ) % 10 )",
        "int res = i ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        6,
        7,
        2
      ],
      "mod_code": [
        "if ( ( k * i ) % 10 == r || ! ( k * i ) % 10 )",
        "int res = i ;",
        "do",
        "cin >> k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        13,
        10
      ],
      "mod_code": [
        "if ( ( k * i ) % 10 == r || ! ( k * i ) % 10 )",
        "cout << res ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        13,
        10,
        7
      ],
      "mod_code": [
        "if ( ( k * i ) % 10 == r || ! ( k * i ) % 10 )",
        "cout << res ;",
        "do",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        13,
        10,
        2
      ],
      "mod_code": [
        "if ( ( k * i ) % 10 == r || ! ( k * i ) % 10 )",
        "cout << res ;",
        "do",
        "cin >> k >> k ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        13,
        7
      ],
      "mod_code": [
        "if ( ( k * i ) % 10 == r || ! ( k * i ) % 10 )",
        "cout << res ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        13,
        7,
        2
      ],
      "mod_code": [
        "if ( ( k * i ) % 10 == r || ! ( k * i ) % 10 )",
        "cout << res ;",
        "do",
        "cin >> k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "if ( ( k * i ) % 10 == r || ! ( k * i ) % 10 )",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        10,
        7
      ],
      "mod_code": [
        "if ( ( k * i ) % 10 == r || ! ( k * i ) % 10 )",
        "do",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        10,
        7,
        2
      ],
      "mod_code": [
        "if ( ( k * i ) % 10 == r || ! ( k * i ) % 10 )",
        "do",
        "do",
        "cin >> k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        10,
        2
      ],
      "mod_code": [
        "if ( ( k * i ) % 10 == r || ! ( k * i ) % 10 )",
        "do",
        "cin >> k >> k ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "if ( ( k * i ) % 10 == r || ! ( k * i ) % 10 )",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        7,
        2
      ],
      "mod_code": [
        "if ( ( k * i ) % 10 == r || ! ( k * i ) % 10 )",
        "do",
        "cin >> k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        13,
        10
      ],
      "mod_code": [
        "int res = i ;",
        "cout << res ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        6,
        13,
        10,
        7
      ],
      "mod_code": [
        "int res = i ;",
        "cout << res ;",
        "do",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        13,
        10,
        2
      ],
      "mod_code": [
        "int res = i ;",
        "cout << res ;",
        "do",
        "cin >> k >> k ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        6,
        13,
        7
      ],
      "mod_code": [
        "int res = i ;",
        "cout << res ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        13,
        7,
        2
      ],
      "mod_code": [
        "int res = i ;",
        "cout << res ;",
        "do",
        "cin >> k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "int res = i ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        6,
        10,
        7
      ],
      "mod_code": [
        "int res = i ;",
        "do",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        10,
        7,
        2
      ],
      "mod_code": [
        "int res = i ;",
        "do",
        "do",
        "cin >> k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        10,
        2
      ],
      "mod_code": [
        "int res = i ;",
        "do",
        "cin >> k >> k ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "int res = i ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        7,
        2
      ],
      "mod_code": [
        "int res = i ;",
        "do",
        "cin >> k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        10
      ],
      "mod_code": [
        "cout << res ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        13,
        10,
        7
      ],
      "mod_code": [
        "cout << res ;",
        "do",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        10,
        7,
        2
      ],
      "mod_code": [
        "cout << res ;",
        "do",
        "do",
        "cin >> k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        10,
        2
      ],
      "mod_code": [
        "cout << res ;",
        "do",
        "cin >> k >> k ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "cout << res ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13,
        7,
        2
      ],
      "mod_code": [
        "cout << res ;",
        "do",
        "cin >> k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        7,
        2
      ],
      "mod_code": [
        "do",
        "do",
        "cin >> k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "do",
        "cin >> k >> k ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "do",
        "cin >> k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}