{
  "meta": {
    "index": 1647,
    "hitid": "3ABAOCJ4R8YQ2CBKX7WP4VLX1ATQMI",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "70A",
    "subid": "44664355"
  },
  "lines": [
    {
      "line": 0,
      "text": "pi = acos ( - 1 )",
      "code": "const double pi = acos ( - 1 ) ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "MODPRIMA = 1000000007",
      "code": "const long long MODPRIMA = ( long long ) 1e9 + 7 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "MAXX = 10 ^ 18",
      "code": "const long long MAXX = ( long long ) 1e18 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "MINN = - 10 ^ 18",
      "code": "const long long MINN = - ( long long ) 1e18 ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "EPS = 1e - 9",
      "code": "const double EPS = 1e-9 ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "N = int",
      "code": "int N ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "MOD = 1000003",
      "code": "const long long MOD = 1e6 + 3 ;",
      "indent": 0
    },
    {
      "line": 7,
      "text": "ans = long long",
      "code": "long long ans ;",
      "indent": 0
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 9,
      "text": "read N",
      "code": "cin >> N ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "ans = 1",
      "code": "ans = 1 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if N is 0",
      "code": "if ( N == 0 )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print 1",
      "code": "cout << 1 << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 1 to N - 1 inclusive",
      "code": "for ( int i = 1 ; i <= N - 1 ; i ++ )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "multiply ans by 3",
      "code": "ans *= 3 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "ans = ans modulo MOD",
      "code": "ans %= MOD ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print ans",
      "code": "cout << ans << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "MOD = 1000003 ;"
      ],
      "err_line": 6,
      "err_msg": "‘MOD’ does not name a type"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "MAXX = 10 ^ 18 ;"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "string EPS = 1e-9 ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "MOD = 1000003 ;"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        6,
        18
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "MOD = 1000003 ;",
        "cout << ans ;"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        6,
        18,
        4
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "MOD = 1000003 ;",
        "cout << ans ;",
        "string EPS = 1e-9 ;"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        6,
        18,
        9
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "MOD = 1000003 ;",
        "cout << ans ;",
        "cout << N ;"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        6,
        18,
        13
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "MOD = 1000003 ;",
        "cout << ans ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        6,
        4
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "MOD = 1000003 ;",
        "string EPS = 1e-9 ;"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        6,
        4,
        9
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "MOD = 1000003 ;",
        "string EPS = 1e-9 ;",
        "cout << N ;"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        6,
        4,
        13
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "MOD = 1000003 ;",
        "string EPS = 1e-9 ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        6,
        9
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "MOD = 1000003 ;",
        "cout << N ;"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        6,
        9,
        13
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "MOD = 1000003 ;",
        "cout << N ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        6,
        13
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "MOD = 1000003 ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        18
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "cout << ans ;"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        18,
        4
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "cout << ans ;",
        "string EPS = 1e-9 ;"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        18,
        4,
        9
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "cout << ans ;",
        "string EPS = 1e-9 ;",
        "cout << N ;"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        18,
        4,
        13
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "cout << ans ;",
        "string EPS = 1e-9 ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        18,
        9
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "cout << ans ;",
        "cout << N ;"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        18,
        9,
        13
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "cout << ans ;",
        "cout << N ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        18,
        13
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "cout << ans ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "string EPS = 1e-9 ;"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        4,
        9
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "string EPS = 1e-9 ;",
        "cout << N ;"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        4,
        9,
        13
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "string EPS = 1e-9 ;",
        "cout << N ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        4,
        13
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "string EPS = 1e-9 ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "cout << N ;"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        9,
        13
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "cout << N ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "MAXX = pow ( 10 , 18 ) ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "‘MAXX’ does not name a type"
    },
    {
      "mod_line": [
        6,
        18
      ],
      "mod_code": [
        "MOD = 1000003 ;",
        "cout << ans ;"
      ],
      "err_line": 6,
      "err_msg": "‘MOD’ does not name a type"
    },
    {
      "mod_line": [
        6,
        18,
        4
      ],
      "mod_code": [
        "MOD = 1000003 ;",
        "cout << ans ;",
        "string EPS = 1e-9 ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        18,
        4,
        9
      ],
      "mod_code": [
        "MOD = 1000003 ;",
        "cout << ans ;",
        "string EPS = 1e-9 ;",
        "cout << N ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        18,
        4,
        13
      ],
      "mod_code": [
        "MOD = 1000003 ;",
        "cout << ans ;",
        "string EPS = 1e-9 ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        18,
        9
      ],
      "mod_code": [
        "MOD = 1000003 ;",
        "cout << ans ;",
        "cout << N ;"
      ],
      "err_line": 6,
      "err_msg": "‘MOD’ does not name a type"
    },
    {
      "mod_line": [
        6,
        18,
        9,
        13
      ],
      "mod_code": [
        "MOD = 1000003 ;",
        "cout << ans ;",
        "cout << N ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "‘MOD’ does not name a type"
    },
    {
      "mod_line": [
        6,
        18,
        13
      ],
      "mod_code": [
        "MOD = 1000003 ;",
        "cout << ans ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "‘MOD’ does not name a type"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "MOD = 1000003 ;",
        "string EPS = 1e-9 ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        4,
        9
      ],
      "mod_code": [
        "MOD = 1000003 ;",
        "string EPS = 1e-9 ;",
        "cout << N ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        4,
        9,
        13
      ],
      "mod_code": [
        "MOD = 1000003 ;",
        "string EPS = 1e-9 ;",
        "cout << N ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        4,
        13
      ],
      "mod_code": [
        "MOD = 1000003 ;",
        "string EPS = 1e-9 ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "MOD = 1000003 ;",
        "cout << N ;"
      ],
      "err_line": 6,
      "err_msg": "‘MOD’ does not name a type"
    },
    {
      "mod_line": [
        6,
        9,
        13
      ],
      "mod_code": [
        "MOD = 1000003 ;",
        "cout << N ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "‘MOD’ does not name a type"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "MOD = 1000003 ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "‘MOD’ does not name a type"
    },
    {
      "mod_line": [
        18,
        4
      ],
      "mod_code": [
        "cout << ans ;",
        "string EPS = 1e-9 ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        18,
        4,
        9
      ],
      "mod_code": [
        "cout << ans ;",
        "string EPS = 1e-9 ;",
        "cout << N ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        18,
        4,
        9,
        13
      ],
      "mod_code": [
        "cout << ans ;",
        "string EPS = 1e-9 ;",
        "cout << N ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        18,
        4,
        13
      ],
      "mod_code": [
        "cout << ans ;",
        "string EPS = 1e-9 ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        18,
        9,
        13
      ],
      "mod_code": [
        "cout << ans ;",
        "cout << N ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        18,
        13
      ],
      "mod_code": [
        "cout << ans ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "string EPS = 1e-9 ;",
        "cout << N ;"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        4,
        9,
        13
      ],
      "mod_code": [
        "string EPS = 1e-9 ;",
        "cout << N ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "string EPS = 1e-9 ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "conversion from ‘double’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "cout << N ;",
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before numeric constant"
    }
  ]
}