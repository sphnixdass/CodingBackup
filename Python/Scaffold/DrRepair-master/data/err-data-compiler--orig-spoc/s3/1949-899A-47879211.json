{
  "meta": {
    "index": 1949,
    "hitid": "38VTL6WC4A7137H0WIWX0FDDD1LY5T",
    "workerid": "A1APYLD4DUK33J",
    "probid": "899A",
    "subid": "47879211"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant long long integer MOD with MOD = 1000000007",
      "code": "const long long int MOD = 1000000007 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long long integers N , M , K , H , W , L , R",
      "code": "long long int N , M , K , H , W , L , R ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read N",
      "code": "cin >> N ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to N exclusive",
      "code": "for ( int i = 0 ; i < N ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read K",
      "code": "cin >> K ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if K is 1",
      "code": "if ( K == 1 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment L",
      "code": "L ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment R",
      "code": "R ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "increment M by minimum of L and R",
      "code": "M += min ( L , R ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "decrement L by M",
      "code": "L -= M ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "decrement R by M",
      "code": "R -= M ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print M + L / 3 print newline",
      "code": "cout << M + L / 3 << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        3,
        5,
        8
      ],
      "mod_code": [
        "cout << min ( L , R ) << endl ;",
        "cout << N ;",
        "cin >> N ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        3,
        6,
        8
      ],
      "mod_code": [
        "cout << min ( L , R ) << endl ;",
        "cout << N ;",
        "if ( ! K )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        3,
        8
      ],
      "mod_code": [
        "cout << min ( L , R ) << endl ;",
        "cout << N ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        5,
        6,
        8
      ],
      "mod_code": [
        "cout << min ( L , R ) << endl ;",
        "cin >> N ;",
        "if ( ! K )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        5,
        8
      ],
      "mod_code": [
        "cout << min ( L , R ) << endl ;",
        "cin >> N ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        6,
        8
      ],
      "mod_code": [
        "cout << min ( L , R ) << endl ;",
        "if ( ! K )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "cout << min ( L , R ) << endl ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        8
      ],
      "mod_code": [
        "cout << N ;",
        "cin >> N ;",
        "if ( ! K )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        5,
        8
      ],
      "mod_code": [
        "cout << N ;",
        "cin >> N ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        6,
        8
      ],
      "mod_code": [
        "cout << N ;",
        "if ( ! K )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "cout << N ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        6,
        8
      ],
      "mod_code": [
        "cin >> N ;",
        "if ( ! K )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "cin >> N ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "if ( ! K )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}