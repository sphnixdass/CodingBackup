{
  "meta": {
    "index": 332,
    "hitid": "3S1L4CQSFXZS9MCMMOVQJ5MJ0RVFAT",
    "workerid": "A28TIENUWLMMIP",
    "probid": "544A",
    "subid": "48685741"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let k be an integer",
      "code": "int k ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read in k",
      "code": "cin >> k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let q be a string",
      "code": "string q ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read in q",
      "code": "cin >> q ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let a be an array of integers of size 26 , set the first value in a to 0",
      "code": "int a [ 26 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "let arr be a vector of integers",
      "code": "vector < int > arr ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "let i and j be integers",
      "code": "int i , j ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 and j = 0 iterate to q . size ( ) and k",
      "code": "for ( i = 0 , j = 0 ; i < q . size ( ) && j < k ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if a [ q [ i ] - ' a ' ] is equal to 0",
      "code": "if ( a [ q [ i ] - ' a ' ] == 0 )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "add a new element to arr and set its value to i",
      "code": "arr . push_back ( i ) ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "increment a [ q [ i ] - ' a ' ]",
      "code": "a [ q [ i ] - ' a ' ] ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "increment j",
      "code": "j ++ ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if j is not equal to k",
      "code": "if ( j != k )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "or else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "for i = 1 iterate to k",
      "code": "for ( int i = 1 ; i < k ; i ++ )",
      "indent": 2
    },
    {
      "line": 20,
      "text": "for i = arr [ i - 1 ] to arr [ i ]",
      "code": "for ( int j = arr [ i - 1 ] ; j < arr [ i ] ; j ++ ) { cout << q [ j ] ; }",
      "indent": 3
    },
    {
      "line": 21,
      "text": "print a newline",
      "code": "cout << endl ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "for i = arr . back ( ) iterate to q . size ( )",
      "code": "for ( int i = arr . back ( ) ; i < q . size ( ) ; i ++ ) { cout << q [ i ] ; }",
      "indent": 2
    },
    {
      "line": 24,
      "text": "print a newline",
      "code": "cout << endl ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "arr . insert ( i ) ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘std::vector<int>::insert(int&)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string s ;"
      ],
      "err_line": 4,
      "err_msg": "‘q’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "arr . push ( i ) ;"
      ],
      "err_line": 10,
      "err_msg": "‘class std::vector<int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "a [ i [ i ] - ' a ' ] ++ ;"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "arr . insert ( i ) ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        10,
        19
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "arr . insert ( i ) ;",
        "for ( int i = 1 ; i <= k ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        10,
        19,
        20
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "arr . insert ( i ) ;",
        "for ( int i = 1 ; i <= k ; i ++ )",
        "for ( int i = arr [ i - 1 ] ; i < arr [ i ] ; ++ i )"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        10,
        19,
        23
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "arr . insert ( i ) ;",
        "for ( int i = 1 ; i <= k ; i ++ )",
        "for ( int i = arr . back ( ) ; i < q . size ( ) ; ++ i )"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        10,
        19,
        2
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "arr . insert ( i ) ;",
        "for ( int i = 1 ; i <= k ; i ++ )",
        "k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        10,
        20
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "arr . insert ( i ) ;",
        "for ( int i = arr [ i - 1 ] ; i < arr [ i ] ; ++ i )"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        10,
        20,
        23
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "arr . insert ( i ) ;",
        "for ( int i = arr [ i - 1 ] ; i < arr [ i ] ; ++ i )",
        "for ( int i = arr . back ( ) ; i < q . size ( ) ; ++ i )"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        10,
        20,
        2
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "arr . insert ( i ) ;",
        "for ( int i = arr [ i - 1 ] ; i < arr [ i ] ; ++ i )",
        "k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        10,
        23
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "arr . insert ( i ) ;",
        "for ( int i = arr . back ( ) ; i < q . size ( ) ; ++ i )"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        10,
        23,
        2
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "arr . insert ( i ) ;",
        "for ( int i = arr . back ( ) ; i < q . size ( ) ; ++ i )",
        "k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        10,
        2
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "arr . insert ( i ) ;",
        "k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        19
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "for ( int i = 1 ; i <= k ; i ++ )"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        19,
        20
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "for ( int i = 1 ; i <= k ; i ++ )",
        "for ( int i = arr [ i - 1 ] ; i < arr [ i ] ; ++ i )"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        19,
        20,
        23
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "for ( int i = 1 ; i <= k ; i ++ )",
        "for ( int i = arr [ i - 1 ] ; i < arr [ i ] ; ++ i )",
        "for ( int i = arr . back ( ) ; i < q . size ( ) ; ++ i )"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        19,
        20,
        2
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "for ( int i = 1 ; i <= k ; i ++ )",
        "for ( int i = arr [ i - 1 ] ; i < arr [ i ] ; ++ i )",
        "k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        19,
        23
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "for ( int i = 1 ; i <= k ; i ++ )",
        "for ( int i = arr . back ( ) ; i < q . size ( ) ; ++ i )"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        19,
        23,
        2
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "for ( int i = 1 ; i <= k ; i ++ )",
        "for ( int i = arr . back ( ) ; i < q . size ( ) ; ++ i )",
        "k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        19,
        2
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "for ( int i = 1 ; i <= k ; i ++ )",
        "k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        20
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "for ( int i = arr [ i - 1 ] ; i < arr [ i ] ; ++ i )"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        20,
        23
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "for ( int i = arr [ i - 1 ] ; i < arr [ i ] ; ++ i )",
        "for ( int i = arr . back ( ) ; i < q . size ( ) ; ++ i )"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        20,
        23,
        2
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "for ( int i = arr [ i - 1 ] ; i < arr [ i ] ; ++ i )",
        "for ( int i = arr . back ( ) ; i < q . size ( ) ; ++ i )",
        "k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        20,
        2
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "for ( int i = arr [ i - 1 ] ; i < arr [ i ] ; ++ i )",
        "k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        23
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "for ( int i = arr . back ( ) ; i < q . size ( ) ; ++ i )"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        23,
        2
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "for ( int i = arr . back ( ) ; i < q . size ( ) ; ++ i )",
        "k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "for ( int i = 0 , j = 0 ; i < q . size ( ) && k = 0 ; i ++ )",
        "k >> k ;"
      ],
      "err_line": 8,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        10,
        19
      ],
      "mod_code": [
        "arr . insert ( i ) ;",
        "for ( int i = 1 ; i <= k ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘std::vector<int>::insert(int&)’"
    },
    {
      "mod_line": [
        10,
        19,
        20
      ],
      "mod_code": [
        "arr . insert ( i ) ;",
        "for ( int i = 1 ; i <= k ; i ++ )",
        "for ( int i = arr [ i - 1 ] ; i < arr [ i ] ; ++ i )"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘std::vector<int>::insert(int&)’"
    },
    {
      "mod_line": [
        10,
        19,
        20,
        23
      ],
      "mod_code": [
        "arr . insert ( i ) ;",
        "for ( int i = 1 ; i <= k ; i ++ )",
        "for ( int i = arr [ i - 1 ] ; i < arr [ i ] ; ++ i )",
        "for ( int i = arr . back ( ) ; i < q . size ( ) ; ++ i )"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘std::vector<int>::insert(int&)’"
    },
    {
      "mod_line": [
        10,
        19,
        20,
        2
      ],
      "mod_code": [
        "arr . insert ( i ) ;",
        "for ( int i = 1 ; i <= k ; i ++ )",
        "for ( int i = arr [ i - 1 ] ; i < arr [ i ] ; ++ i )",
        "k >> k ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘std::vector<int>::insert(int&)’"
    },
    {
      "mod_line": [
        10,
        19,
        23
      ],
      "mod_code": [
        "arr . insert ( i ) ;",
        "for ( int i = 1 ; i <= k ; i ++ )",
        "for ( int i = arr . back ( ) ; i < q . size ( ) ; ++ i )"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘std::vector<int>::insert(int&)’"
    },
    {
      "mod_line": [
        10,
        19,
        23,
        2
      ],
      "mod_code": [
        "arr . insert ( i ) ;",
        "for ( int i = 1 ; i <= k ; i ++ )",
        "for ( int i = arr . back ( ) ; i < q . size ( ) ; ++ i )",
        "k >> k ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘std::vector<int>::insert(int&)’"
    },
    {
      "mod_line": [
        10,
        19,
        2
      ],
      "mod_code": [
        "arr . insert ( i ) ;",
        "for ( int i = 1 ; i <= k ; i ++ )",
        "k >> k ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘std::vector<int>::insert(int&)’"
    },
    {
      "mod_line": [
        10,
        20
      ],
      "mod_code": [
        "arr . insert ( i ) ;",
        "for ( int i = arr [ i - 1 ] ; i < arr [ i ] ; ++ i )"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘std::vector<int>::insert(int&)’"
    },
    {
      "mod_line": [
        10,
        20,
        23
      ],
      "mod_code": [
        "arr . insert ( i ) ;",
        "for ( int i = arr [ i - 1 ] ; i < arr [ i ] ; ++ i )",
        "for ( int i = arr . back ( ) ; i < q . size ( ) ; ++ i )"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘std::vector<int>::insert(int&)’"
    },
    {
      "mod_line": [
        10,
        20,
        23,
        2
      ],
      "mod_code": [
        "arr . insert ( i ) ;",
        "for ( int i = arr [ i - 1 ] ; i < arr [ i ] ; ++ i )",
        "for ( int i = arr . back ( ) ; i < q . size ( ) ; ++ i )",
        "k >> k ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘std::vector<int>::insert(int&)’"
    },
    {
      "mod_line": [
        10,
        20,
        2
      ],
      "mod_code": [
        "arr . insert ( i ) ;",
        "for ( int i = arr [ i - 1 ] ; i < arr [ i ] ; ++ i )",
        "k >> k ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘std::vector<int>::insert(int&)’"
    },
    {
      "mod_line": [
        10,
        23
      ],
      "mod_code": [
        "arr . insert ( i ) ;",
        "for ( int i = arr . back ( ) ; i < q . size ( ) ; ++ i )"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘std::vector<int>::insert(int&)’"
    },
    {
      "mod_line": [
        10,
        23,
        2
      ],
      "mod_code": [
        "arr . insert ( i ) ;",
        "for ( int i = arr . back ( ) ; i < q . size ( ) ; ++ i )",
        "k >> k ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘std::vector<int>::insert(int&)’"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "arr . insert ( i ) ;",
        "k >> k ;"
      ],
      "err_line": 10,
      "err_msg": "no matching function for call to ‘std::vector<int>::insert(int&)’"
    }
  ]
}