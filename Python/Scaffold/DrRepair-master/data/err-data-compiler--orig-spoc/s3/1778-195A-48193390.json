{
  "meta": {
    "index": 1778,
    "hitid": "3D06DR5225DYFW438BZ3EV6SXS4AMS",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "195A",
    "subid": "48193390"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "a . b . c = int , count = 0",
      "code": "int a , b , c , count = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a , b , c",
      "code": "cin >> a >> b >> c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if ( a * c ) modulo b is 0",
      "code": "if ( ( a * c ) % b == 0 )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "count = ( a * c ) / b - c",
      "code": "count = ( ( a * c ) / b ) - c ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 6,
      "text": "count = ( a * c ) / b - c + 1",
      "code": "count = ( ( ( a * c ) / b ) - c ) + 1 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print count",
      "code": "cout << count << endl ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a . b , count = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int a . c , count = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int a . b , count = 0 ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        5,
        6
      ],
      "mod_code": [
        "int a . b , count = 0 ;",
        "do",
        "int count = ( a * c ) / b - c + 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        8
      ],
      "mod_code": [
        "int a . b , count = 0 ;",
        "do",
        "int count = ( a * c ) / b - c + 1 ;",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        4
      ],
      "mod_code": [
        "int a . b , count = 0 ;",
        "do",
        "int count = ( a * c ) / b - c + 1 ;",
        "int count = ( a * c ) / b - c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        5,
        8
      ],
      "mod_code": [
        "int a . b , count = 0 ;",
        "do",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        4
      ],
      "mod_code": [
        "int a . b , count = 0 ;",
        "do",
        "cout << count ;",
        "int count = ( a * c ) / b - c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        5,
        4
      ],
      "mod_code": [
        "int a . b , count = 0 ;",
        "do",
        "int count = ( a * c ) / b - c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int a . b , count = 0 ;",
        "int count = ( a * c ) / b - c + 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "int a . b , count = 0 ;",
        "int count = ( a * c ) / b - c + 1 ;",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        4
      ],
      "mod_code": [
        "int a . b , count = 0 ;",
        "int count = ( a * c ) / b - c + 1 ;",
        "cout << count ;",
        "int count = ( a * c ) / b - c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        6,
        4
      ],
      "mod_code": [
        "int a . b , count = 0 ;",
        "int count = ( a * c ) / b - c + 1 ;",
        "int count = ( a * c ) / b - c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int a . b , count = 0 ;",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        8,
        4
      ],
      "mod_code": [
        "int a . b , count = 0 ;",
        "cout << count ;",
        "int count = ( a * c ) / b - c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int a . b , count = 0 ;",
        "int count = ( a * c ) / b - c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "int a . c , count = 0 ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        5,
        6
      ],
      "mod_code": [
        "int a . c , count = 0 ;",
        "do",
        "int count = ( a * c ) / b - c + 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        8
      ],
      "mod_code": [
        "int a . c , count = 0 ;",
        "do",
        "int count = ( a * c ) / b - c + 1 ;",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        5,
        6,
        4
      ],
      "mod_code": [
        "int a . c , count = 0 ;",
        "do",
        "int count = ( a * c ) / b - c + 1 ;",
        "int count = ( a * c ) / b - c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        5,
        8
      ],
      "mod_code": [
        "int a . c , count = 0 ;",
        "do",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        4
      ],
      "mod_code": [
        "int a . c , count = 0 ;",
        "do",
        "cout << count ;",
        "int count = ( a * c ) / b - c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        5,
        4
      ],
      "mod_code": [
        "int a . c , count = 0 ;",
        "do",
        "int count = ( a * c ) / b - c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "int a . c , count = 0 ;",
        "int count = ( a * c ) / b - c + 1 ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "int a . c , count = 0 ;",
        "int count = ( a * c ) / b - c + 1 ;",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        4
      ],
      "mod_code": [
        "int a . c , count = 0 ;",
        "int count = ( a * c ) / b - c + 1 ;",
        "cout << count ;",
        "int count = ( a * c ) / b - c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        6,
        4
      ],
      "mod_code": [
        "int a . c , count = 0 ;",
        "int count = ( a * c ) / b - c + 1 ;",
        "int count = ( a * c ) / b - c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "int a . c , count = 0 ;",
        "cout << count ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        8,
        4
      ],
      "mod_code": [
        "int a . c , count = 0 ;",
        "cout << count ;",
        "int count = ( a * c ) / b - c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int a . c , count = 0 ;",
        "int count = ( a * c ) / b - c ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "do",
        "int count = ( a * c ) / b - c + 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        6,
        8
      ],
      "mod_code": [
        "do",
        "int count = ( a * c ) / b - c + 1 ;",
        "cout << count ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        6,
        8,
        4
      ],
      "mod_code": [
        "do",
        "int count = ( a * c ) / b - c + 1 ;",
        "cout << count ;",
        "int count = ( a * c ) / b - c ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        6,
        4
      ],
      "mod_code": [
        "do",
        "int count = ( a * c ) / b - c + 1 ;",
        "int count = ( a * c ) / b - c ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "do",
        "cout << count ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        8,
        4
      ],
      "mod_code": [
        "do",
        "cout << count ;",
        "int count = ( a * c ) / b - c ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "do",
        "int count = ( a * c ) / b - c ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘while’ before ‘cout’"
    }
  ]
}