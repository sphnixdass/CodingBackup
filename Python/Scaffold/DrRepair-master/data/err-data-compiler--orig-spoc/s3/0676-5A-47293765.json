{
  "meta": {
    "index": 676,
    "hitid": "3B6F54KMR265J348WP2WF3CVKL2S1F",
    "workerid": "AIWEXPJAU66D9",
    "probid": "5A",
    "subid": "47293765"
  },
  "lines": [
    {
      "line": 0,
      "text": "let mp be a map from string to boolean",
      "code": "map < string , bool > mp ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "let cnt and res be integers = 0",
      "code": "int cnt = 0 , res = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create strings txt and name",
      "code": "string txt , name ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while can read line from the input to txt",
      "code": "while ( getline ( cin , txt ) )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if txt is empty",
      "code": "if ( txt . size ( ) == 0 ) break ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if txt [ 0 ] is equal to ' + '",
      "code": "if ( txt [ 0 ] == ' + ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "name = \" \"",
      "code": "name = \" \" ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "for integer i = 1 to length of txt exclusive , append character at txt [ i ] to the name",
      "code": "for ( int i = 1 ; i < txt . size ( ) ; i ++ ) name += txt [ i ] ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "assign value of 1 to the mp [ name ]",
      "code": "mp [ name ] = 1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "increase cnt by one",
      "code": "cnt ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if txt [ 0 ] is equal to ' - '",
      "code": "else if ( txt [ 0 ] == ' - ' )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "decrease cnt by one",
      "code": "cnt -- ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "set value of name to an ampty string",
      "code": "name = \" \" ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "for i = 1 to length of txt exclusive append txt [ i ] to name",
      "code": "for ( int i = 1 ; i < txt . size ( ) ; i ++ ) name += txt [ i ] ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "set mp [ name ] to 0",
      "code": "mp [ name ] = 0 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 17,
      "text": "let ind be integer",
      "code": "int ind ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "for i = 0 to length of txt exclusive",
      "code": "for ( int i = 0 ; i < txt . size ( ) ; i ++ )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "if txt [ i ] is equal to ' : '",
      "code": "if ( txt [ i ] == ' : ' )",
      "indent": 4
    },
    {
      "line": 20,
      "text": "assign value of i to the ind",
      "code": "ind = i ;",
      "indent": 5
    },
    {
      "line": 21,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 23,
      "text": "name = \" \"",
      "code": "name = \" \" ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "for integer i = ind + 1 to length of txt exclusive append txt [ i ] to name",
      "code": "for ( int i = ind + 1 ; i < txt . size ( ) ; i ++ ) name += txt [ i ] ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "increase res by ( cnt * length of name casted to integer )",
      "code": "res += ( cnt * ( int ) name . size ( ) ) ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print res and a new line",
      "code": "cout << res << endl ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "map < string , bool mp ;"
      ],
      "err_line": 0,
      "err_msg": "template argument 2 is invalid"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string output.txt , name ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "while ( cin >> can )"
      ],
      "err_line": 4,
      "err_msg": "‘can’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "stop ;"
      ],
      "err_line": 21,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        13,
        23,
        3
      ],
      "mod_code": [
        "while ( cin >> txt )",
        "name = getchar ( ) ;",
        "name = \" \" ;",
        "string output.txt , name ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        4,
        13,
        19,
        3
      ],
      "mod_code": [
        "while ( cin >> txt )",
        "name = getchar ( ) ;",
        "if ( ! txt [ i ] )",
        "string output.txt , name ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        4,
        13,
        3
      ],
      "mod_code": [
        "while ( cin >> txt )",
        "name = getchar ( ) ;",
        "string output.txt , name ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        4,
        13,
        3,
        20
      ],
      "mod_code": [
        "while ( cin >> txt )",
        "name = getchar ( ) ;",
        "string output.txt , name ;",
        "i = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        4,
        23,
        19,
        3
      ],
      "mod_code": [
        "while ( cin >> txt )",
        "name = \" \" ;",
        "if ( ! txt [ i ] )",
        "string output.txt , name ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        4,
        23,
        3
      ],
      "mod_code": [
        "while ( cin >> txt )",
        "name = \" \" ;",
        "string output.txt , name ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        4,
        23,
        3,
        20
      ],
      "mod_code": [
        "while ( cin >> txt )",
        "name = \" \" ;",
        "string output.txt , name ;",
        "i = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        4,
        19,
        3
      ],
      "mod_code": [
        "while ( cin >> txt )",
        "if ( ! txt [ i ] )",
        "string output.txt , name ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        4,
        19,
        3,
        20
      ],
      "mod_code": [
        "while ( cin >> txt )",
        "if ( ! txt [ i ] )",
        "string output.txt , name ;",
        "i = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "while ( cin >> txt )",
        "string output.txt , name ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        4,
        3,
        20
      ],
      "mod_code": [
        "while ( cin >> txt )",
        "string output.txt , name ;",
        "i = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        13,
        23,
        19,
        3
      ],
      "mod_code": [
        "name = getchar ( ) ;",
        "name = \" \" ;",
        "if ( ! txt [ i ] )",
        "string output.txt , name ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        13,
        23,
        3
      ],
      "mod_code": [
        "name = getchar ( ) ;",
        "name = \" \" ;",
        "string output.txt , name ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        13,
        23,
        3,
        20
      ],
      "mod_code": [
        "name = getchar ( ) ;",
        "name = \" \" ;",
        "string output.txt , name ;",
        "i = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        13,
        19,
        3
      ],
      "mod_code": [
        "name = getchar ( ) ;",
        "if ( ! txt [ i ] )",
        "string output.txt , name ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        13,
        19,
        3,
        20
      ],
      "mod_code": [
        "name = getchar ( ) ;",
        "if ( ! txt [ i ] )",
        "string output.txt , name ;",
        "i = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        13,
        3
      ],
      "mod_code": [
        "name = getchar ( ) ;",
        "string output.txt , name ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        13,
        3,
        20
      ],
      "mod_code": [
        "name = getchar ( ) ;",
        "string output.txt , name ;",
        "i = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        23,
        19,
        3
      ],
      "mod_code": [
        "name = \" \" ;",
        "if ( ! txt [ i ] )",
        "string output.txt , name ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        23,
        19,
        3,
        20
      ],
      "mod_code": [
        "name = \" \" ;",
        "if ( ! txt [ i ] )",
        "string output.txt , name ;",
        "i = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        23,
        3
      ],
      "mod_code": [
        "name = \" \" ;",
        "string output.txt , name ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        23,
        3,
        20
      ],
      "mod_code": [
        "name = \" \" ;",
        "string output.txt , name ;",
        "i = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        19,
        3
      ],
      "mod_code": [
        "if ( ! txt [ i ] )",
        "string output.txt , name ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        19,
        3,
        20
      ],
      "mod_code": [
        "if ( ! txt [ i ] )",
        "string output.txt , name ;",
        "i = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    },
    {
      "mod_line": [
        3,
        20
      ],
      "mod_code": [
        "string output.txt , name ;",
        "i = i ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘.’ token"
    }
  ]
}