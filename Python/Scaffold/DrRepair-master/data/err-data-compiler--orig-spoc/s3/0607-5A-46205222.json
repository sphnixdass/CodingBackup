{
  "meta": {
    "index": 607,
    "hitid": "31YWE12TE06RQ659FFPSFLK02M4X7P",
    "workerid": "AIWEXPJAU66D9",
    "probid": "5A",
    "subid": "46205222"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare string variable s",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let n and ans be integers",
      "code": "int n , ans ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "set character c to the result of getchar ( )",
      "code": "char c = getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while c ! = EOF",
      "code": "while ( c != EOF )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set value of s to \" \"",
      "code": "s = \" \" ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "while c ! = ' \\ n ' add c to s , set c = to the result of getchar ( )",
      "code": "while ( c != ' \\n ' ) s += c , c = getchar ( ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if s [ 0 ] is equal to ' + '",
      "code": "if ( s [ 0 ] == ' + ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment n",
      "code": "++ n ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else if s [ 0 ] is equal to ' - '",
      "code": "else if ( s [ 0 ] == ' - ' )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "decrement n",
      "code": "-- n ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "create integer i with value 0",
      "code": "int i = 0 ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "while s [ i ] ! = ' : ' increment i",
      "code": "while ( s [ i ] != ' : ' ) ++ i ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "increase ans by n * ( length of s - i - 1 )",
      "code": "ans += n * ( s . size ( ) - i - 1 ) ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set c to the result of getchar ( )",
      "code": "c = getchar ( ) ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print ans and a new line",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "c = getchar ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "* s = \" \" ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator*’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘c’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "t = getchar ( ) ;"
      ],
      "err_line": 16,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6,
        11
      ],
      "mod_code": [
        "s = \" \" ;",
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘c’"
    },
    {
      "mod_line": [
        5,
        6,
        11,
        0
      ],
      "mod_code": [
        "s = \" \" ;",
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "do",
        "int s ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        11,
        9
      ],
      "mod_code": [
        "s = \" \" ;",
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "do",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        6,
        11,
        7
      ],
      "mod_code": [
        "s = \" \" ;",
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "do",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        6,
        0
      ],
      "mod_code": [
        "s = \" \" ;",
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "int s ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        0,
        9
      ],
      "mod_code": [
        "s = \" \" ;",
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "int s ;",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        6,
        0,
        7
      ],
      "mod_code": [
        "s = \" \" ;",
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "int s ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        6,
        9
      ],
      "mod_code": [
        "s = \" \" ;",
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        6,
        9,
        7
      ],
      "mod_code": [
        "s = \" \" ;",
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "else if ( s [ 0 ] == \" - ' )",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        6,
        7
      ],
      "mod_code": [
        "s = \" \" ;",
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "s = \" \" ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘c’"
    },
    {
      "mod_line": [
        5,
        11,
        0
      ],
      "mod_code": [
        "s = \" \" ;",
        "do",
        "int s ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        11,
        0,
        9
      ],
      "mod_code": [
        "s = \" \" ;",
        "do",
        "int s ;",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        11,
        0,
        7
      ],
      "mod_code": [
        "s = \" \" ;",
        "do",
        "int s ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        11,
        9
      ],
      "mod_code": [
        "s = \" \" ;",
        "do",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        11,
        9,
        7
      ],
      "mod_code": [
        "s = \" \" ;",
        "do",
        "else if ( s [ 0 ] == \" - ' )",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        11,
        7
      ],
      "mod_code": [
        "s = \" \" ;",
        "do",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        0
      ],
      "mod_code": [
        "s = \" \" ;",
        "int s ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        0,
        9
      ],
      "mod_code": [
        "s = \" \" ;",
        "int s ;",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        0,
        9,
        7
      ],
      "mod_code": [
        "s = \" \" ;",
        "int s ;",
        "else if ( s [ 0 ] == \" - ' )",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        0,
        7
      ],
      "mod_code": [
        "s = \" \" ;",
        "int s ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "s = \" \" ;",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        9,
        7
      ],
      "mod_code": [
        "s = \" \" ;",
        "else if ( s [ 0 ] == \" - ' )",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "s = \" \" ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘c’"
    },
    {
      "mod_line": [
        6,
        11,
        0
      ],
      "mod_code": [
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "do",
        "int s ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        11,
        0,
        9
      ],
      "mod_code": [
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "do",
        "int s ;",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        11,
        0,
        7
      ],
      "mod_code": [
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "do",
        "int s ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        11,
        9
      ],
      "mod_code": [
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "do",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        11,
        9,
        7
      ],
      "mod_code": [
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "do",
        "else if ( s [ 0 ] == \" - ' )",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        11,
        7
      ],
      "mod_code": [
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "do",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        0
      ],
      "mod_code": [
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "int s ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        0,
        9
      ],
      "mod_code": [
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "int s ;",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        0,
        9,
        7
      ],
      "mod_code": [
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "int s ;",
        "else if ( s [ 0 ] == \" - ' )",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        0,
        7
      ],
      "mod_code": [
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "int s ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        9,
        7
      ],
      "mod_code": [
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "else if ( s [ 0 ] == \" - ' )",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "while ( c != ' \\n ' ) c = getchar ( ) ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        0
      ],
      "mod_code": [
        "do",
        "int s ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        0,
        9
      ],
      "mod_code": [
        "do",
        "int s ;",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        0,
        9,
        7
      ],
      "mod_code": [
        "do",
        "int s ;",
        "else if ( s [ 0 ] == \" - ' )",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        0,
        7
      ],
      "mod_code": [
        "do",
        "int s ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "do",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        9,
        7
      ],
      "mod_code": [
        "do",
        "else if ( s [ 0 ] == \" - ' )",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "int s ;",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        9,
        7
      ],
      "mod_code": [
        "int s ;",
        "else if ( s [ 0 ] == \" - ' )",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "int s ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "else if ( s [ 0 ] == \" - ' )",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    }
  ]
}