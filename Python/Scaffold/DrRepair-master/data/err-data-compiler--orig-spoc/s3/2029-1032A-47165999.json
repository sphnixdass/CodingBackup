{
  "meta": {
    "index": 2029,
    "hitid": "3JHB4BPSFK3BVSSQ8YSKZ9FD0OMQ98",
    "workerid": "A1APYLD4DUK33J",
    "probid": "1032A",
    "subid": "47165999"
  },
  "lines": [
    {
      "line": 0,
      "text": "create constant long longs MAX_SIZE , MOD with MAX_SIZE = 4 * 1e5 , MOD = 998244353",
      "code": "const long long MAX_SIZE = 4 * 1e5 , MOD = 998244353 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare files with no arguments , returning void",
      "code": "void files ( )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "reuse stream stdin to open \" input . txt \" in read mode",
      "code": "freopen ( \" input.txt \" , \" r \" , stdin ) ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "reuse stream stdout to open \" output . txt \" in write mode",
      "code": "freopen ( \" output.txt \" , \" w \" , stdout ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "create long long array a with size MAX_SIZE",
      "code": "long long a [ MAX_SIZE ] ;",
      "indent": 0
    },
    {
      "line": 6,
      "text": "create long longs n , x , m , temp with x initialized with 0 , temp initialized with 0",
      "code": "long long n , x ( 0 ) , m , temp ( 0 ) ;",
      "indent": 0
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 8,
      "text": "read n read m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "create long long dish initialized with 0",
      "code": "long long dish ( 0 ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if a [ x ] is 0 , increment temp",
      "code": "if ( a [ x ] == 0 ) temp ++ ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "increment a [ x ]",
      "code": "a [ x ] ++ ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "set dish to maximum of dish and ( a [ x ] - 1 ) / m + 1",
      "code": "dish = max ( dish , ( a [ x ] - 1 ) / m + 1 ) ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print m * dish * temp - n print \" \\ n \"",
      "code": "cout << m * dish * temp - n << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , stdout ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "void files ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "getline ( \" input.txt \" , stdin ) ;"
      ],
      "err_line": 2,
      "err_msg": "no matching function for call to ‘getline(const char [10], _IO_FILE*&)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "redefinition of ‘long long int temp’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "while ( cin >> n >> m )"
      ],
      "err_line": 14,
      "err_msg": "‘dish’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘max(bool)’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "freopen ( \" output.txt \" , stdout ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        3,
        8
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "freopen ( \" output.txt \" , stdout ) ;",
        "while ( cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        11
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "freopen ( \" output.txt \" , stdout ) ;",
        "while ( cin >> n >> m )",
        "while ( cin >> x )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        14
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "freopen ( \" output.txt \" , stdout ) ;",
        "while ( cin >> n >> m )",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        3,
        8,
        6
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "freopen ( \" output.txt \" , stdout ) ;",
        "while ( cin >> n >> m )",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        3,
        11
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "freopen ( \" output.txt \" , stdout ) ;",
        "while ( cin >> x )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        3,
        11,
        14
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "freopen ( \" output.txt \" , stdout ) ;",
        "while ( cin >> x )",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        3,
        11,
        6
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "freopen ( \" output.txt \" , stdout ) ;",
        "while ( cin >> x )",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        3,
        14
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "freopen ( \" output.txt \" , stdout ) ;",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        3,
        14,
        6
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "freopen ( \" output.txt \" , stdout ) ;",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        3,
        6
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "freopen ( \" output.txt \" , stdout ) ;",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "while ( cin >> n >> m )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        8,
        11
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "while ( cin >> n >> m )",
        "while ( cin >> x )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        8,
        11,
        14
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "while ( cin >> n >> m )",
        "while ( cin >> x )",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        8,
        11,
        6
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "while ( cin >> n >> m )",
        "while ( cin >> x )",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        8,
        14
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "while ( cin >> n >> m )",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        8,
        14,
        6
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "while ( cin >> n >> m )",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        8,
        6
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "while ( cin >> n >> m )",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "while ( cin >> x )"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        11,
        14
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "while ( cin >> x )",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        11,
        14,
        6
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "while ( cin >> x )",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        11,
        6
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "while ( cin >> x )",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        14,
        6
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "freopen ( \" input.txt \" , stdin ) ;",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , stdout ) ;",
        "while ( cin >> n >> m )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        3,
        8,
        11
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , stdout ) ;",
        "while ( cin >> n >> m )",
        "while ( cin >> x )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        3,
        8,
        11,
        14
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , stdout ) ;",
        "while ( cin >> n >> m )",
        "while ( cin >> x )",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        3,
        8,
        11,
        6
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , stdout ) ;",
        "while ( cin >> n >> m )",
        "while ( cin >> x )",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        3,
        8,
        14
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , stdout ) ;",
        "while ( cin >> n >> m )",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        3,
        8,
        14,
        6
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , stdout ) ;",
        "while ( cin >> n >> m )",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        3,
        8,
        6
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , stdout ) ;",
        "while ( cin >> n >> m )",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , stdout ) ;",
        "while ( cin >> x )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        3,
        11,
        14
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , stdout ) ;",
        "while ( cin >> x )",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        3,
        11,
        14,
        6
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , stdout ) ;",
        "while ( cin >> x )",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        3,
        11,
        6
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , stdout ) ;",
        "while ( cin >> x )",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , stdout ) ;",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        3,
        14,
        6
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , stdout ) ;",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "freopen ( \" output.txt \" , stdout ) ;",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘_IO_FILE*’ to ‘const char*’ for argument ‘2’ to ‘FILE* freopen(const char*, const char*, FILE*)’"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "while ( cin >> x )"
      ],
      "err_line": 14,
      "err_msg": "‘dish’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        11,
        14
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "while ( cin >> x )",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘dish’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        11,
        14,
        6
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "while ( cin >> x )",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "redefinition of ‘long long int temp’"
    },
    {
      "mod_line": [
        8,
        11,
        6
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "while ( cin >> x )",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "redefinition of ‘long long int temp’"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;"
      ],
      "err_line": 14,
      "err_msg": "‘dish’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        14,
        6
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "redefinition of ‘long long int temp’"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "redefinition of ‘long long int temp’"
    },
    {
      "mod_line": [
        11,
        14
      ],
      "mod_code": [
        "while ( cin >> x )",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;"
      ],
      "err_line": 14,
      "err_msg": "no matching function for call to ‘max(bool)’"
    },
    {
      "mod_line": [
        11,
        14,
        6
      ],
      "mod_code": [
        "while ( cin >> x )",
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "redefinition of ‘long long int temp’"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "while ( cin >> x )",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "redefinition of ‘long long int temp’"
    },
    {
      "mod_line": [
        14,
        6
      ],
      "mod_code": [
        "dish = max ( dish and ( a [ x ] - 1 ) / m + 1 ) ;",
        "long long n , x , m , temp = 0 , temp = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "redefinition of ‘long long int temp’"
    }
  ]
}