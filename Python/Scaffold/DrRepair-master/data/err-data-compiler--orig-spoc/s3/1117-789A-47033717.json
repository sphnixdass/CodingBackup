{
  "meta": {
    "index": 1117,
    "hitid": "3AJA9FLWSCS7F4VKYCN303A2DZWFIT",
    "workerid": "A1APYLD4DUK33J",
    "probid": "789A",
    "subid": "47033717"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare integer array w size 100010",
      "code": "int w [ 100010 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare integers n , k",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while read n read k",
      "code": "while ( cin >> n >> k )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare integer sum = 0",
      "code": "int sum = 0 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read w [ i ]",
      "code": "cin >> w [ i ] ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "if w [ i ] is greater than or equal to 2 * k",
      "code": "if ( w [ i ] >= 2 * k )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "increment sum by w [ i ] / ( 2 * k )",
      "code": "sum += w [ i ] / ( 2 * k ) ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "let w [ i ] be w [ i ] % ( 2 * k )",
      "code": "w [ i ] = w [ i ] % ( 2 * k ) ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "declare integer count = 0",
      "code": "int count = 0 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if w [ i ] is greater than k",
      "code": "if ( w [ i ] > k )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "increment sum",
      "code": "sum ++ ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 17,
      "text": "if w [ i ] is not 0 , increment count",
      "code": "if ( w [ i ] != 0 ) { count ++ ; }",
      "indent": 4
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "if count % 2 is 0",
      "code": "if ( count % 2 == 0 )",
      "indent": 2
    },
    {
      "line": 21,
      "text": "increment sum by count / 2",
      "code": "sum += count / 2 ;",
      "indent": 3
    },
    {
      "line": 22,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 23,
      "text": "increment sum by ( count - 1 ) / 2 + 1",
      "code": "sum += ( count - 1 ) / 2 + 1 ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "print sum , newline",
      "code": "cout << sum << endl ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int w [ 100010 ] [ 100010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [100010]’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "w >> w [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [100010]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "while ( n >> n >> k )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        16,
        6
      ],
      "mod_code": [
        "while ( n >> n >> k )",
        "do",
        "w >> w [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [100010]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        16,
        6,
        22
      ],
      "mod_code": [
        "while ( n >> n >> k )",
        "do",
        "w >> w [ i ] ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [100010]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        16,
        6,
        0
      ],
      "mod_code": [
        "while ( n >> n >> k )",
        "do",
        "w >> w [ i ] ;",
        "int w [ 100010 ] [ 100010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [100010][100010]’ and ‘int [100010]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        16,
        22
      ],
      "mod_code": [
        "while ( n >> n >> k )",
        "do",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        16,
        22,
        0
      ],
      "mod_code": [
        "while ( n >> n >> k )",
        "do",
        "do",
        "int w [ 100010 ] [ 100010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [100010]’)"
    },
    {
      "mod_line": [
        3,
        16,
        0
      ],
      "mod_code": [
        "while ( n >> n >> k )",
        "do",
        "int w [ 100010 ] [ 100010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [100010]’)"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "while ( n >> n >> k )",
        "w >> w [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [100010]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        6,
        22
      ],
      "mod_code": [
        "while ( n >> n >> k )",
        "w >> w [ i ] ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [100010]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        6,
        22,
        0
      ],
      "mod_code": [
        "while ( n >> n >> k )",
        "w >> w [ i ] ;",
        "do",
        "int w [ 100010 ] [ 100010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [100010][100010]’ and ‘int [100010]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        6,
        0
      ],
      "mod_code": [
        "while ( n >> n >> k )",
        "w >> w [ i ] ;",
        "int w [ 100010 ] [ 100010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [100010][100010]’ and ‘int [100010]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        3,
        22
      ],
      "mod_code": [
        "while ( n >> n >> k )",
        "do"
      ],
      "err_line": 25,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        3,
        22,
        0
      ],
      "mod_code": [
        "while ( n >> n >> k )",
        "do",
        "int w [ 100010 ] [ 100010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [100010]’)"
    },
    {
      "mod_line": [
        3,
        0
      ],
      "mod_code": [
        "while ( n >> n >> k )",
        "int w [ 100010 ] [ 100010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [100010]’)"
    },
    {
      "mod_line": [
        16,
        6
      ],
      "mod_code": [
        "do",
        "w >> w [ i ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [100010]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        16,
        6,
        22
      ],
      "mod_code": [
        "do",
        "w >> w [ i ] ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [100010]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        16,
        6,
        22,
        0
      ],
      "mod_code": [
        "do",
        "w >> w [ i ] ;",
        "do",
        "int w [ 100010 ] [ 100010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [100010][100010]’ and ‘int [100010]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        16,
        6,
        0
      ],
      "mod_code": [
        "do",
        "w >> w [ i ] ;",
        "int w [ 100010 ] [ 100010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [100010][100010]’ and ‘int [100010]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        16,
        22
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        22,
        0
      ],
      "mod_code": [
        "do",
        "do",
        "int w [ 100010 ] [ 100010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [100010]’)"
    },
    {
      "mod_line": [
        16,
        0
      ],
      "mod_code": [
        "do",
        "int w [ 100010 ] [ 100010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [100010]’)"
    },
    {
      "mod_line": [
        6,
        22
      ],
      "mod_code": [
        "w >> w [ i ] ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [100010]’ and ‘int’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        22,
        0
      ],
      "mod_code": [
        "w >> w [ i ] ;",
        "do",
        "int w [ 100010 ] [ 100010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [100010][100010]’ and ‘int [100010]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        6,
        0
      ],
      "mod_code": [
        "w >> w [ i ] ;",
        "int w [ 100010 ] [ 100010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘int [100010][100010]’ and ‘int [100010]’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        22,
        0
      ],
      "mod_code": [
        "do",
        "int w [ 100010 ] [ 100010 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [100010]’)"
    }
  ]
}