{
  "meta": {
    "index": 2598,
    "hitid": "31KPKEKW4A76VS2OPKC1B9JLBKR0BU",
    "workerid": "A1C5H6OY3HGO4U",
    "probid": "707A",
    "subid": "47598663"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "test , m , n , i , j , k color = integers with color = 2",
      "code": "int test , m , n , i , j , k , color = 2 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "a = char array of size 105 by 105",
      "code": "char a [ 105 ] [ 105 ] ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read m",
      "code": "cin >> m ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 1 to n inclusive",
      "code": "for ( j = 1 ; j <= n ; j ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for k = 1 to m inclusive read a [ j ] [ k ]",
      "code": "for ( int k = 1 ; k <= m ; k ++ ) { cin >> a [ j ] [ k ] ; }",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for i = 1 to n inclusive",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for k = 1 to m inclusive",
      "code": "for ( int k = 1 ; k <= m ; k ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if a [ i ] [ k ] = = ' C ' or ' M ' or ' Y ' set color to 1",
      "code": "if ( a [ i ] [ k ] == ' C ' || a [ i ] [ k ] == ' M ' || a [ i ] [ k ] == ' Y ' ) color = 1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if color is 1",
      "code": "if ( color == 1 )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print # Color",
      "code": "cout << \" #Color\\n \" ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print # Black & White",
      "code": "cout << \" #Black&White\\n \" ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int test , m , n , i , j , k , k = 2 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int k’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "gets ( m ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "if ( color == l )"
      ],
      "err_line": 12,
      "err_msg": "‘l’ was not declared in this scope"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        13,
        15,
        14
      ],
      "mod_code": [
        "if ( a [ i ] [ k ] == ' C ' || a [ i ] [ k ] == ' M ' ) color = 1 ;",
        "cout << \" # \" ;",
        "cout << \" # \" ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        13,
        15,
        14
      ],
      "mod_code": [
        "if ( a [ i ] [ k ] == ' C ' || a [ i ] [ k ] == ' M ' ) color = 1 ;",
        "cout << \" # \" ;",
        "cout << \" # \" << endl ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        13,
        14
      ],
      "mod_code": [
        "if ( a [ i ] [ k ] == ' C ' || a [ i ] [ k ] == ' M ' ) color = 1 ;",
        "cout << \" # \" ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        15,
        13,
        14
      ],
      "mod_code": [
        "if ( a [ i ] [ k ] == ' C ' || a [ i ] [ k ] == ' M ' ) color = 1 ;",
        "cout << \" # \" ;",
        "cout << ' # ' ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        15,
        14
      ],
      "mod_code": [
        "if ( a [ i ] [ k ] == ' C ' || a [ i ] [ k ] == ' M ' ) color = 1 ;",
        "cout << \" # \" ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        15,
        13,
        14
      ],
      "mod_code": [
        "if ( a [ i ] [ k ] == ' C ' || a [ i ] [ k ] == ' M ' ) color = 1 ;",
        "cout << \" # \" << endl ;",
        "cout << ' # ' ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        15,
        14
      ],
      "mod_code": [
        "if ( a [ i ] [ k ] == ' C ' || a [ i ] [ k ] == ' M ' ) color = 1 ;",
        "cout << \" # \" << endl ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        13,
        14
      ],
      "mod_code": [
        "if ( a [ i ] [ k ] == ' C ' || a [ i ] [ k ] == ' M ' ) color = 1 ;",
        "cout << ' # ' ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "if ( a [ i ] [ k ] == ' C ' || a [ i ] [ k ] == ' M ' ) color = 1 ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        13,
        15,
        14
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "cout << \" # \" ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        13,
        15,
        14
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "cout << \" # \" << endl ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        13,
        14
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        13,
        14
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "cout << ' # ' ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        14
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        13,
        14
      ],
      "mod_code": [
        "cout << \" # \" << endl ;",
        "cout << ' # ' ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        14
      ],
      "mod_code": [
        "cout << \" # \" << endl ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        13,
        14
      ],
      "mod_code": [
        "cout << ' # ' ;",
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before numeric constant"
    }
  ]
}