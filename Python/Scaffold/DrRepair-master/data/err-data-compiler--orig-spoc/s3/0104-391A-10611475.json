{
  "meta": {
    "index": 104,
    "hitid": "3A520CCNWNU038CQRDBK1N1JOQ9AEZ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "391A",
    "subid": "10611475"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare string variable str",
      "code": "string str ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int n",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create int result",
      "code": "int result ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare integer answer",
      "code": "int answer ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "let s be integer array with size 101",
      "code": "int s [ 101 ] ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "change s [ 0 ] to - 1",
      "code": "s [ 0 ] = - 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "change n to the length of str",
      "code": "n = ( int ) str . size ( ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i from 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if str [ i + 1 ] ! = str [ i ]",
      "code": "if ( str [ i + 1 ] != str [ i ] )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increment result and set s [ result ] to i",
      "code": "s [ ++ result ] = i ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "if s [ result ] - s [ result - 1 ] is even , increment answer",
      "code": "if ( ( s [ result ] - s [ result - 1 ] ) % 2 == 0 ) answer ++ ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print answer and \" \\ n \"",
      "code": "cout << answer << \" \\n \" ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int str ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘size’ in ‘str’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int t ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "cout << ans << \" \\n \" ;"
      ],
      "err_line": 15,
      "err_msg": "‘ans’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        12,
        1
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "int t ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        12,
        1,
        7
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "int t ;",
        "gets ( str ) ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        12,
        1,
        10
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "int t ;",
        "if ( str [ i + 1 ] != ' [ ' )"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        12,
        1,
        2
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "int t ;",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        11,
        12,
        7
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "gets ( str ) ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        12,
        7,
        10
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "gets ( str ) ;",
        "if ( str [ i + 1 ] != ' [ ' )"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        12,
        7,
        2
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "gets ( str ) ;",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        11,
        12,
        10,
        2
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "if ( str [ i + 1 ] != ' [ ' )",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        11,
        12,
        2
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "int t ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        1,
        7
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "int t ;",
        "gets ( str ) ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        1,
        7,
        10
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "int t ;",
        "gets ( str ) ;",
        "if ( str [ i + 1 ] != ' [ ' )"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        1,
        7,
        2
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "int t ;",
        "gets ( str ) ;",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        11,
        1,
        10
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "int t ;",
        "if ( str [ i + 1 ] != ' [ ' )"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        1,
        10,
        2
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "int t ;",
        "if ( str [ i + 1 ] != ' [ ' )",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        11,
        1,
        2
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "int t ;",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "gets ( str ) ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        7,
        10
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "gets ( str ) ;",
        "if ( str [ i + 1 ] != ' [ ' )"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        11,
        7,
        10,
        2
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "gets ( str ) ;",
        "if ( str [ i + 1 ] != ' [ ' )",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        11,
        7,
        2
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "gets ( str ) ;",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        11,
        10,
        2
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "if ( str [ i + 1 ] != ' [ ' )",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "s [ result ] = i ;",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        12,
        1
      ],
      "mod_code": [
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "int t ;"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        1,
        7
      ],
      "mod_code": [
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "int t ;",
        "gets ( str ) ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        1,
        7,
        10
      ],
      "mod_code": [
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "int t ;",
        "gets ( str ) ;",
        "if ( str [ i + 1 ] != ' [ ' )"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        1,
        7,
        2
      ],
      "mod_code": [
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "int t ;",
        "gets ( str ) ;",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        12,
        1,
        10
      ],
      "mod_code": [
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "int t ;",
        "if ( str [ i + 1 ] != ' [ ' )"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        1,
        10,
        2
      ],
      "mod_code": [
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "int t ;",
        "if ( str [ i + 1 ] != ' [ ' )",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        12,
        1,
        2
      ],
      "mod_code": [
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "int t ;",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        12,
        7
      ],
      "mod_code": [
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "gets ( str ) ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        7,
        10
      ],
      "mod_code": [
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "gets ( str ) ;",
        "if ( str [ i + 1 ] != ' [ ' )"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        12,
        7,
        10,
        2
      ],
      "mod_code": [
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "gets ( str ) ;",
        "if ( str [ i + 1 ] != ' [ ' )",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        12,
        7,
        2
      ],
      "mod_code": [
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "gets ( str ) ;",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        12,
        10,
        2
      ],
      "mod_code": [
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "if ( str [ i + 1 ] != ' [ ' )",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "if ( s [ result ] - s [ result - 1 ] % 2 == 0 ) { answer ++ ; }",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "int t ;",
        "gets ( str ) ;"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        7,
        10
      ],
      "mod_code": [
        "int t ;",
        "gets ( str ) ;",
        "if ( str [ i + 1 ] != ' [ ' )"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        7,
        10,
        2
      ],
      "mod_code": [
        "int t ;",
        "gets ( str ) ;",
        "if ( str [ i + 1 ] != ' [ ' )",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        1,
        7,
        2
      ],
      "mod_code": [
        "int t ;",
        "gets ( str ) ;",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "int t ;",
        "if ( str [ i + 1 ] != ' [ ' )"
      ],
      "err_line": 8,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10,
        2
      ],
      "mod_code": [
        "int t ;",
        "if ( str [ i + 1 ] != ' [ ' )",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int t ;",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "gets ( str ) ;",
        "if ( str [ i + 1 ] != ' [ ' )"
      ],
      "err_line": 7,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        10,
        2
      ],
      "mod_code": [
        "gets ( str ) ;",
        "if ( str [ i + 1 ] != ' [ ' )",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "gets ( str ) ;",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "if ( str [ i + 1 ] != ' [ ' )",
        "int result ="
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘int’"
    }
  ]
}