{
  "meta": {
    "index": 2185,
    "hitid": "3Q7TKIAPOT4C7LPUS9PQ4JZ9H3DDLM",
    "workerid": "AIWEXPJAU66D9",
    "probid": "330A",
    "subid": "44753483"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integers n , m , res = 0 and rowsDeleted = 0",
      "code": "int n , m , res = 0 , rowsDeleted = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read m",
      "code": "cin >> m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "char * * inputArr = new char * [ n ]",
      "code": "char * * inputArr = new char * [ n ] ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "bool * rows points to an array of bool with size n",
      "code": "bool * rows = new bool [ n ] ( ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "bool * cols points to an array of bool with size m",
      "code": "bool * cols = new bool [ m ] ( ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for integer i = 0 to n exclusive , set inputArr [ i ] to a new char array with size m",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { inputArr [ i ] = new char [ m ] ; }",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "read inputArr [ i ] [ j ]",
      "code": "cin >> inputArr [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if inputArr [ i ] [ j ] = ' S '",
      "code": "if ( inputArr [ i ] [ j ] == ' S ' )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "set rows [ i ] to true",
      "code": "rows [ i ] = true ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "set cols [ j ] to true",
      "code": "cols [ j ] = true ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if rows [ i ] = false",
      "code": "if ( rows [ i ] == false )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "increase res by m",
      "code": "res += m ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "increment rowsDeleted",
      "code": "rowsDeleted ++ ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "for integer j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 1
    },
    {
      "line": 24,
      "text": "if cols [ j ] = false increase res by n - rowsDeleted",
      "code": "if ( cols [ j ] == false ) { res += n - rowsDeleted ; }",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print res",
      "code": "cout << res << endl ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "bool * points [ n ] = { 0 } ;"
      ],
      "err_line": 12,
      "err_msg": "‘rows’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "bool * points [ m ] = { 0 } ;"
      ],
      "err_line": 13,
      "err_msg": "‘cols’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , m , res = 0 , res = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int res’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gets ( m ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "bool * points [ n ] , points [ n ] ;"
      ],
      "err_line": 5,
      "err_msg": "conflicting declaration ‘bool points [n]’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "bool * cols [ m ] = { 0 } ;"
      ],
      "err_line": 13,
      "err_msg": "cannot convert ‘bool’ to ‘bool*’ in assignment"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 9,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "if ( ! rows . false )"
      ],
      "err_line": 18,
      "err_msg": "expected unqualified-id before ‘false’"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "bool * points [ n ] = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        5,
        6
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "bool * points [ n ] = { 0 } ;",
        "bool * points [ m ] = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        12
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "bool * points [ n ] = { 0 } ;",
        "bool * points [ m ] = { 0 } ;",
        "rows [ ' i ' ] = true ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        10
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "bool * points [ n ] = { 0 } ;",
        "bool * points [ m ] = { 0 } ;",
        "cout << inputArr [ i ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        11
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "bool * points [ n ] = { 0 } ;",
        "bool * points [ m ] = { 0 } ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        5,
        12
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "bool * points [ n ] = { 0 } ;",
        "rows [ ' i ' ] = true ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        5,
        12,
        10
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "bool * points [ n ] = { 0 } ;",
        "rows [ ' i ' ] = true ;",
        "cout << inputArr [ i ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        5,
        12,
        11
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "bool * points [ n ] = { 0 } ;",
        "rows [ ' i ' ] = true ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        5,
        10
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "bool * points [ n ] = { 0 } ;",
        "cout << inputArr [ i ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        5,
        10,
        11
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "bool * points [ n ] = { 0 } ;",
        "cout << inputArr [ i ] [ j ] ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        5,
        11
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "bool * points [ n ] = { 0 } ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "bool * points [ m ] = { 0 } ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        6,
        12
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "bool * points [ m ] = { 0 } ;",
        "rows [ ' i ' ] = true ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        6,
        12,
        10
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "bool * points [ m ] = { 0 } ;",
        "rows [ ' i ' ] = true ;",
        "cout << inputArr [ i ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        6,
        12,
        11
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "bool * points [ m ] = { 0 } ;",
        "rows [ ' i ' ] = true ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        6,
        10
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "bool * points [ m ] = { 0 } ;",
        "cout << inputArr [ i ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        6,
        10,
        11
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "bool * points [ m ] = { 0 } ;",
        "cout << inputArr [ i ] [ j ] ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        6,
        11
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "bool * points [ m ] = { 0 } ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "rows [ ' i ' ] = true ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        12,
        10
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "rows [ ' i ' ] = true ;",
        "cout << inputArr [ i ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        12,
        10,
        11
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "rows [ ' i ' ] = true ;",
        "cout << inputArr [ i ] [ j ] ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        12,
        11
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "rows [ ' i ' ] = true ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "cout << inputArr [ i ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        10,
        11
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "cout << inputArr [ i ] [ j ] ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "char * inputArr = new char * [ n ] ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 4,
      "err_msg": "cannot convert ‘char**’ to ‘char*’ in initialization"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "bool * points [ n ] = { 0 } ;",
        "bool * points [ m ] = { 0 } ;"
      ],
      "err_line": 6,
      "err_msg": "conflicting declaration ‘bool* points [m]’"
    },
    {
      "mod_line": [
        5,
        6,
        12
      ],
      "mod_code": [
        "bool * points [ n ] = { 0 } ;",
        "bool * points [ m ] = { 0 } ;",
        "rows [ ' i ' ] = true ;"
      ],
      "err_line": 6,
      "err_msg": "conflicting declaration ‘bool* points [m]’"
    },
    {
      "mod_line": [
        5,
        6,
        12,
        10
      ],
      "mod_code": [
        "bool * points [ n ] = { 0 } ;",
        "bool * points [ m ] = { 0 } ;",
        "rows [ ' i ' ] = true ;",
        "cout << inputArr [ i ] [ j ] ;"
      ],
      "err_line": 6,
      "err_msg": "conflicting declaration ‘bool* points [m]’"
    },
    {
      "mod_line": [
        5,
        6,
        12,
        11
      ],
      "mod_code": [
        "bool * points [ n ] = { 0 } ;",
        "bool * points [ m ] = { 0 } ;",
        "rows [ ' i ' ] = true ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 6,
      "err_msg": "conflicting declaration ‘bool* points [m]’"
    },
    {
      "mod_line": [
        5,
        6,
        10
      ],
      "mod_code": [
        "bool * points [ n ] = { 0 } ;",
        "bool * points [ m ] = { 0 } ;",
        "cout << inputArr [ i ] [ j ] ;"
      ],
      "err_line": 6,
      "err_msg": "conflicting declaration ‘bool* points [m]’"
    },
    {
      "mod_line": [
        5,
        6,
        10,
        11
      ],
      "mod_code": [
        "bool * points [ n ] = { 0 } ;",
        "bool * points [ m ] = { 0 } ;",
        "cout << inputArr [ i ] [ j ] ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 6,
      "err_msg": "conflicting declaration ‘bool* points [m]’"
    },
    {
      "mod_line": [
        5,
        6,
        11
      ],
      "mod_code": [
        "bool * points [ n ] = { 0 } ;",
        "bool * points [ m ] = { 0 } ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 6,
      "err_msg": "conflicting declaration ‘bool* points [m]’"
    },
    {
      "mod_line": [
        5,
        12
      ],
      "mod_code": [
        "bool * points [ n ] = { 0 } ;",
        "rows [ ' i ' ] = true ;"
      ],
      "err_line": 12,
      "err_msg": "‘rows’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        12,
        10
      ],
      "mod_code": [
        "bool * points [ n ] = { 0 } ;",
        "rows [ ' i ' ] = true ;",
        "cout << inputArr [ i ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘rows’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        12,
        10,
        11
      ],
      "mod_code": [
        "bool * points [ n ] = { 0 } ;",
        "rows [ ' i ' ] = true ;",
        "cout << inputArr [ i ] [ j ] ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 12,
      "err_msg": "‘rows’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        12,
        11
      ],
      "mod_code": [
        "bool * points [ n ] = { 0 } ;",
        "rows [ ' i ' ] = true ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 12,
      "err_msg": "‘rows’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "bool * points [ n ] = { 0 } ;",
        "cout << inputArr [ i ] [ j ] ;"
      ],
      "err_line": 12,
      "err_msg": "‘rows’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10,
        11
      ],
      "mod_code": [
        "bool * points [ n ] = { 0 } ;",
        "cout << inputArr [ i ] [ j ] ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 12,
      "err_msg": "‘rows’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "bool * points [ n ] = { 0 } ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 12,
      "err_msg": "‘rows’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12
      ],
      "mod_code": [
        "bool * points [ m ] = { 0 } ;",
        "rows [ ' i ' ] = true ;"
      ],
      "err_line": 13,
      "err_msg": "‘cols’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        10
      ],
      "mod_code": [
        "bool * points [ m ] = { 0 } ;",
        "rows [ ' i ' ] = true ;",
        "cout << inputArr [ i ] [ j ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘cols’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        10,
        11
      ],
      "mod_code": [
        "bool * points [ m ] = { 0 } ;",
        "rows [ ' i ' ] = true ;",
        "cout << inputArr [ i ] [ j ] ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 13,
      "err_msg": "‘cols’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        12,
        11
      ],
      "mod_code": [
        "bool * points [ m ] = { 0 } ;",
        "rows [ ' i ' ] = true ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 13,
      "err_msg": "‘cols’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "bool * points [ m ] = { 0 } ;",
        "cout << inputArr [ i ] [ j ] ;"
      ],
      "err_line": 13,
      "err_msg": "‘cols’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        11
      ],
      "mod_code": [
        "bool * points [ m ] = { 0 } ;",
        "cout << inputArr [ i ] [ j ] ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 13,
      "err_msg": "‘cols’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "bool * points [ m ] = { 0 } ;",
        "if ( ! inputArr [ i ] [ j ] )"
      ],
      "err_line": 13,
      "err_msg": "‘cols’ was not declared in this scope"
    }
  ]
}