{
  "meta": {
    "index": 1674,
    "hitid": "39O6Z4JLX2RT1W65XDS8LZ03P6SXV3",
    "workerid": "ACI8PUCF5OPDC",
    "probid": "92A",
    "subid": "47234503"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer n , m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "get n , m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create long long res and set res as ( n * ( n + 1 ) ) / 2",
      "code": "long long res = ( n * ( n + 1 ) ) / 2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integer x and set x as m mod res",
      "code": "int x = m % res ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for integer i = 1 to n with increment i",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if x greater than or equal to i then",
      "code": "if ( x >= i )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "subtract i from x",
      "code": "x -= i ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else do",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print x",
      "code": "cout << x << endl ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print x",
      "code": "cout << x << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "long long res * ( n * ( n + 1 ) ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘*’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "do",
        "long long res * ( n * ( n + 1 ) ) / 2 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘*’ token"
    },
    {
      "mod_line": [
        8,
        3,
        6
      ],
      "mod_code": [
        "do",
        "long long res * ( n * ( n + 1 ) ) / 2 ;",
        "if ( x <= i )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘*’ token"
    },
    {
      "mod_line": [
        8,
        3,
        6,
        9
      ],
      "mod_code": [
        "do",
        "long long res * ( n * ( n + 1 ) ) / 2 ;",
        "if ( x <= i )",
        "cout << x ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘*’ token"
    },
    {
      "mod_line": [
        8,
        3,
        6,
        2
      ],
      "mod_code": [
        "do",
        "long long res * ( n * ( n + 1 ) ) / 2 ;",
        "if ( x <= i )",
        "cin >> m >> m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘*’ token"
    },
    {
      "mod_line": [
        8,
        3,
        9
      ],
      "mod_code": [
        "do",
        "long long res * ( n * ( n + 1 ) ) / 2 ;",
        "cout << x ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘*’ token"
    },
    {
      "mod_line": [
        8,
        3,
        9,
        2
      ],
      "mod_code": [
        "do",
        "long long res * ( n * ( n + 1 ) ) / 2 ;",
        "cout << x ;",
        "cin >> m >> m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘*’ token"
    },
    {
      "mod_line": [
        8,
        3,
        2
      ],
      "mod_code": [
        "do",
        "long long res * ( n * ( n + 1 ) ) / 2 ;",
        "cin >> m >> m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘*’ token"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "do",
        "if ( x <= i )"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        6,
        9
      ],
      "mod_code": [
        "do",
        "if ( x <= i )",
        "cout << x ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        6,
        9,
        2
      ],
      "mod_code": [
        "do",
        "if ( x <= i )",
        "cout << x ;",
        "cin >> m >> m ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        6,
        2
      ],
      "mod_code": [
        "do",
        "if ( x <= i )",
        "cin >> m >> m ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        9
      ],
      "mod_code": [
        "do",
        "cout << x ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        9,
        2
      ],
      "mod_code": [
        "do",
        "cout << x ;",
        "cin >> m >> m ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "do",
        "cin >> m >> m ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "long long res * ( n * ( n + 1 ) ) / 2 ;",
        "if ( x <= i )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        6,
        9
      ],
      "mod_code": [
        "long long res * ( n * ( n + 1 ) ) / 2 ;",
        "if ( x <= i )",
        "cout << x ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        6,
        9,
        2
      ],
      "mod_code": [
        "long long res * ( n * ( n + 1 ) ) / 2 ;",
        "if ( x <= i )",
        "cout << x ;",
        "cin >> m >> m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        6,
        2
      ],
      "mod_code": [
        "long long res * ( n * ( n + 1 ) ) / 2 ;",
        "if ( x <= i )",
        "cin >> m >> m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "long long res * ( n * ( n + 1 ) ) / 2 ;",
        "cout << x ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        9,
        2
      ],
      "mod_code": [
        "long long res * ( n * ( n + 1 ) ) / 2 ;",
        "cout << x ;",
        "cin >> m >> m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘*’ token"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "long long res * ( n * ( n + 1 ) ) / 2 ;",
        "cin >> m >> m ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘*’ token"
    }
  ]
}