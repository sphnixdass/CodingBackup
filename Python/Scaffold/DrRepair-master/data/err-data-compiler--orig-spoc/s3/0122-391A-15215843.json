{
  "meta": {
    "index": 122,
    "hitid": "3QGHA0EA0JUZ3I39IR5MI4SPDCZBWB",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "391A",
    "subid": "15215843"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "Read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "ans , j , co = integers with ans = 0 , j = 0",
      "code": "int ans = 0 , j = 0 , co ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to length of string s exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set co to 0",
      "code": "co = 0 ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "set j to i",
      "code": "j = i ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "while s [ i ] is s [ j ] and j is less than length of string s",
      "code": "while ( s [ i ] == s [ j ] && j < s . size ( ) )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment co",
      "code": "co ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "increment j",
      "code": "j ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if co is even , then increment ans",
      "code": "if ( co % 2 == 0 ) { ans ++ ; }",
      "indent": 2
    },
    {
      "line": 12,
      "text": "set i to j - 1",
      "code": "i = j - 1 ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print ans and a new line",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( s ) ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "j to ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "gets ( s ) ;",
        "char s ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        12
      ],
      "mod_code": [
        "gets ( s ) ;",
        "char s ;",
        "i -= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        12,
        6
      ],
      "mod_code": [
        "gets ( s ) ;",
        "char s ;",
        "i -= 1 ;",
        "j to ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        6
      ],
      "mod_code": [
        "gets ( s ) ;",
        "char s ;",
        "j to ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "gets ( s ) ;",
        "i -= 1 ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        12,
        6
      ],
      "mod_code": [
        "gets ( s ) ;",
        "i -= 1 ;",
        "j to ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "gets ( s ) ;",
        "j to ;"
      ],
      "err_line": 2,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        12
      ],
      "mod_code": [
        "char s ;",
        "i -= 1 ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        1,
        12,
        6
      ],
      "mod_code": [
        "char s ;",
        "i -= 1 ;",
        "j to ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "char s ;",
        "j to ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "i -= 1 ;",
        "j to ;"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘to’"
    }
  ]
}