{
  "meta": {
    "index": 610,
    "hitid": "3BO3NEOQM0BCJDECNW1BM2ZBFH6IA1",
    "workerid": "AIWEXPJAU66D9",
    "probid": "5A",
    "subid": "46895473"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let s be string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "set integer p to 0",
      "code": "int p = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set integer d to 0",
      "code": "int d = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while can read line from input into s",
      "code": "while ( getline ( cin , s ) )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if s [ 0 ] is equal to ' + '",
      "code": "if ( s [ 0 ] == ' + ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increase p",
      "code": "p ++ ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else if s [ 0 ] is equal to ' - '",
      "code": "else if ( s [ 0 ] == ' - ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "decrement p",
      "code": "p -- ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "increase d by p * ( length of s - 1 - index of \" : \" in s )",
      "code": "d += p * ( s . size ( ) - 1 - s . find ( \" : \" ) ) ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print d and a new line",
      "code": "cout << d << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid operands of types ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string s let"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "d += p * ( s . length ( ) - 1 - 1 - \" : \" ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid operands of types ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "while ( cin >> s )",
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid operands of types ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        4,
        10,
        9
      ],
      "mod_code": [
        "while ( cin >> s )",
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "invalid operands of types ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        4,
        10,
        9,
        5
      ],
      "mod_code": [
        "while ( cin >> s )",
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "do",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        10,
        9,
        7
      ],
      "mod_code": [
        "while ( cin >> s )",
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "do",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        10,
        5
      ],
      "mod_code": [
        "while ( cin >> s )",
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        10,
        5,
        7
      ],
      "mod_code": [
        "while ( cin >> s )",
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        10,
        7
      ],
      "mod_code": [
        "while ( cin >> s )",
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        10
      ],
      "mod_code": [
        "while ( cin >> s )",
        "d += p * ( s . length ( ) - 1 - 1 - \" : \" ) ;"
      ],
      "err_line": 10,
      "err_msg": "invalid operands of types ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        4,
        10,
        9
      ],
      "mod_code": [
        "while ( cin >> s )",
        "d += p * ( s . length ( ) - 1 - 1 - \" : \" ) ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "invalid operands of types ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        4,
        10,
        9,
        5
      ],
      "mod_code": [
        "while ( cin >> s )",
        "d += p * ( s . length ( ) - 1 - 1 - \" : \" ) ;",
        "do",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        10,
        9,
        7
      ],
      "mod_code": [
        "while ( cin >> s )",
        "d += p * ( s . length ( ) - 1 - 1 - \" : \" ) ;",
        "do",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        10,
        5
      ],
      "mod_code": [
        "while ( cin >> s )",
        "d += p * ( s . length ( ) - 1 - 1 - \" : \" ) ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        10,
        5,
        7
      ],
      "mod_code": [
        "while ( cin >> s )",
        "d += p * ( s . length ( ) - 1 - 1 - \" : \" ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        10,
        7
      ],
      "mod_code": [
        "while ( cin >> s )",
        "d += p * ( s . length ( ) - 1 - 1 - \" : \" ) ;",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "while ( cin >> s )",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        9,
        5
      ],
      "mod_code": [
        "while ( cin >> s )",
        "do",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        9,
        5,
        7
      ],
      "mod_code": [
        "while ( cin >> s )",
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        9,
        7
      ],
      "mod_code": [
        "while ( cin >> s )",
        "do",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "while ( cin >> s )",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5,
        7
      ],
      "mod_code": [
        "while ( cin >> s )",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "while ( cin >> s )",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "invalid operands of types ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        10,
        9,
        5
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "do",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        9,
        5,
        7
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        9,
        7
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "do",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        5
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        5,
        7
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "d += p * ( s . size ( ) - 1 - 1 - \" : \" ) ;",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "d += p * ( s . length ( ) - 1 - 1 - \" : \" ) ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "invalid operands of types ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        10,
        9,
        5
      ],
      "mod_code": [
        "d += p * ( s . length ( ) - 1 - 1 - \" : \" ) ;",
        "do",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        9,
        5,
        7
      ],
      "mod_code": [
        "d += p * ( s . length ( ) - 1 - 1 - \" : \" ) ;",
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        9,
        7
      ],
      "mod_code": [
        "d += p * ( s . length ( ) - 1 - 1 - \" : \" ) ;",
        "do",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        5
      ],
      "mod_code": [
        "d += p * ( s . length ( ) - 1 - 1 - \" : \" ) ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        5,
        7
      ],
      "mod_code": [
        "d += p * ( s . length ( ) - 1 - 1 - \" : \" ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "d += p * ( s . length ( ) - 1 - 1 - \" : \" ) ;",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        5,
        7
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "do",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    }
  ]
}