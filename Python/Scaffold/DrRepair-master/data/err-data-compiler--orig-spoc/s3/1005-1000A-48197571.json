{
  "meta": {
    "index": 1005,
    "hitid": "3K1H3NEY7LTWLTBTHISARRU1M9QGDT",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1000A",
    "subid": "48197571"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare new ints n and ans with ans = 0",
      "code": "int n , ans = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create string variable with name s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read user input to n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "check = map from strings to integers",
      "code": "map < string , int > check ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "in a for loop , change i from 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment check [ s ] by one",
      "code": "check [ s ] ++ ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i from 0 to n exclusive incrementing i",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "read s from the user input",
      "code": "cin >> s ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if check [ s ] is greater than 0",
      "code": "if ( check [ s ] > 0 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "decrement check [ s ]",
      "code": "check [ s ] -- ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "go to the start of the loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "increment ans",
      "code": "ans ++ ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print ans and ' \\ n '",
      "code": "cout << ans << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string s = s . length ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "map < strings , int > check ;"
      ],
      "err_line": 4,
      "err_msg": "‘strings’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "to ;"
      ],
      "err_line": 13,
      "err_msg": "‘to’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        17
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "cout << ans << endl << ' \\n ' ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        17,
        11
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "cout << ans << endl << ' \\n ' ;",
        "if ( check [ s ] > ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        17,
        11,
        13
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "cout << ans << endl << ' \\n ' ;",
        "if ( check [ s ] > ' 0 ' )",
        "to ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        17,
        11,
        10
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "cout << ans << endl << ' \\n ' ;",
        "if ( check [ s ] > ' 0 ' )",
        "s = getchar ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        17,
        11,
        9
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "cout << ans << endl << ' \\n ' ;",
        "if ( check [ s ] > ' 0 ' )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        17,
        13
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "cout << ans << endl << ' \\n ' ;",
        "to ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        17,
        13,
        10
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "cout << ans << endl << ' \\n ' ;",
        "to ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        17,
        13,
        9
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "cout << ans << endl << ' \\n ' ;",
        "to ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        17,
        10
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "cout << ans << endl << ' \\n ' ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        17,
        10,
        9
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "cout << ans << endl << ' \\n ' ;",
        "s = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        17,
        9
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "cout << ans << endl << ' \\n ' ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "if ( check [ s ] > ' 0 ' )"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        11,
        13
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "if ( check [ s ] > ' 0 ' )",
        "to ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        11,
        13,
        10
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "if ( check [ s ] > ' 0 ' )",
        "to ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        11,
        13,
        9
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "if ( check [ s ] > ' 0 ' )",
        "to ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        11,
        10
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "if ( check [ s ] > ' 0 ' )",
        "s = getchar ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        11,
        10,
        9
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "if ( check [ s ] > ' 0 ' )",
        "s = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        11,
        9
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "if ( check [ s ] > ' 0 ' )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "to ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        13,
        10
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "to ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        13,
        10,
        9
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "to ;",
        "s = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        13,
        9
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "to ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        10,
        9
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "s = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "string s = s . length ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "conversion from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        17,
        11,
        13
      ],
      "mod_code": [
        "cout << ans << endl << ' \\n ' ;",
        "if ( check [ s ] > ' 0 ' )",
        "to ;"
      ],
      "err_line": 13,
      "err_msg": "‘to’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        11,
        13,
        10
      ],
      "mod_code": [
        "cout << ans << endl << ' \\n ' ;",
        "if ( check [ s ] > ' 0 ' )",
        "to ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘to’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        11,
        13,
        9
      ],
      "mod_code": [
        "cout << ans << endl << ' \\n ' ;",
        "if ( check [ s ] > ' 0 ' )",
        "to ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        11,
        10,
        9
      ],
      "mod_code": [
        "cout << ans << endl << ' \\n ' ;",
        "if ( check [ s ] > ' 0 ' )",
        "s = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        11,
        9
      ],
      "mod_code": [
        "cout << ans << endl << ' \\n ' ;",
        "if ( check [ s ] > ' 0 ' )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        13
      ],
      "mod_code": [
        "cout << ans << endl << ' \\n ' ;",
        "to ;"
      ],
      "err_line": 13,
      "err_msg": "‘to’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        13,
        10
      ],
      "mod_code": [
        "cout << ans << endl << ' \\n ' ;",
        "to ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘to’ was not declared in this scope"
    },
    {
      "mod_line": [
        17,
        13,
        10,
        9
      ],
      "mod_code": [
        "cout << ans << endl << ' \\n ' ;",
        "to ;",
        "s = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        13,
        9
      ],
      "mod_code": [
        "cout << ans << endl << ' \\n ' ;",
        "to ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        10,
        9
      ],
      "mod_code": [
        "cout << ans << endl << ' \\n ' ;",
        "s = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        17,
        9
      ],
      "mod_code": [
        "cout << ans << endl << ' \\n ' ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        13
      ],
      "mod_code": [
        "if ( check [ s ] > ' 0 ' )",
        "to ;"
      ],
      "err_line": 13,
      "err_msg": "‘to’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13,
        10
      ],
      "mod_code": [
        "if ( check [ s ] > ' 0 ' )",
        "to ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘to’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        13,
        10,
        9
      ],
      "mod_code": [
        "if ( check [ s ] > ' 0 ' )",
        "to ;",
        "s = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        13,
        9
      ],
      "mod_code": [
        "if ( check [ s ] > ' 0 ' )",
        "to ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        10,
        9
      ],
      "mod_code": [
        "if ( check [ s ] > ' 0 ' )",
        "s = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "if ( check [ s ] > ' 0 ' )",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        10
      ],
      "mod_code": [
        "to ;",
        "s = getchar ( ) ;"
      ],
      "err_line": 13,
      "err_msg": "‘to’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        10,
        9
      ],
      "mod_code": [
        "to ;",
        "s = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        13,
        9
      ],
      "mod_code": [
        "to ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "s = getchar ( ) ;",
        "for ( i = 0 ; i < n ; i ++ )"
      ],
      "err_line": 9,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}