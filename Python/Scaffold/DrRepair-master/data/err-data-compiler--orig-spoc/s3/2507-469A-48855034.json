{
  "meta": {
    "index": 2507,
    "hitid": "3FO95NVK5CUTC83PUJHBLUU8PLFRSY",
    "workerid": "AIWEXPJAU66D9",
    "probid": "469A",
    "subid": "48855034"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "define integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "loop , reading n from the input",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "define integer k with value 0",
      "code": "int k = 0 ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "define integers i and j",
      "code": "int i , j ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "new integer variable p",
      "code": "int p ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read from the input to i",
      "code": "cin >> i ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "new int pointer * r pointed to the new int array with i + 1 element",
      "code": "int * r = new int [ i + 1 ] ( ) ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for p from 0 to i exclusive , read r [ p ]",
      "code": "for ( p = 0 ; p < i ; p ++ ) { cin >> r [ p ] ; }",
      "indent": 2
    },
    {
      "line": 9,
      "text": "read j from the input",
      "code": "cin >> j ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "define int pointer * u pointed to the new int array with j + 1 element",
      "code": "int * u = new int [ j + 1 ] ( ) ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "in a for loop , change p from 0 to j exclusive , read standard input to u [ p ] on each loop",
      "code": "for ( p = 0 ; p < j ; p ++ ) { cin >> u [ p ] ; }",
      "indent": 2
    },
    {
      "line": 12,
      "text": "define int pointer * m pointed to the new int array with size = i + j + 1",
      "code": "int * m = new int [ i + j + 1 ] ( ) ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "start for loop from p = 0 to i exclusive , setting the value of m [ p ] to r [ p ] on each loop iteration",
      "code": "for ( p = 0 ; p < i ; p ++ ) { m [ p ] = r [ p ] ; }",
      "indent": 2
    },
    {
      "line": 14,
      "text": "new integer t with value p",
      "code": "int t = p ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "start for loop from p = 0 to j exclusive , changing the value of m [ t + p ] to u [ p ] on each loop",
      "code": "for ( p = 0 ; p < j ; p ++ ) { m [ t + p ] = u [ p ] ; }",
      "indent": 2
    },
    {
      "line": 16,
      "text": "declare integer y",
      "code": "int y ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "in a for loop , change p from 1 to n inclusive",
      "code": "for ( p = 1 ; p <= n ; p ++ )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "for y from 0 to i + j exclusive",
      "code": "for ( y = 0 ; y < i + j ; y ++ )",
      "indent": 3
    },
    {
      "line": 19,
      "text": "if m [ y ] is equal to p , break the loop",
      "code": "if ( m [ y ] == p ) { break ; }",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 21,
      "text": "if y is equal to i + j , assign the new value = 1 to k",
      "code": "if ( y == i + j ) { k = 1 ; }",
      "indent": 3
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if k is equal to 0 , print \" I become the guy . \"",
      "code": "if ( k == 0 ) { cout << \" I become the guy. \" << endl ; }",
      "indent": 2
    },
    {
      "line": 24,
      "text": "if k = 1 , print \" Oh , my keyboard ! \"",
      "code": "if ( k == 1 ) { cout << \" Oh, my keyboard! \" << endl ; }",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "int * m = i + j + 1 ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int p = s . size ( ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘s’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "gets ( i ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int r = new int [ i + 1 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "int u = new int [ j + 1 ] ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "int m = i + j + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "for ( int p = 0 ; p < i ; p ++ ) { m [ p ] = r [ p ] ; }"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13,
        18
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "for ( int p = 0 ; p < i ; p ++ ) { m [ p ] = r [ p ] ; }",
        "for ( int y = 0 ; y < i + j ; y ++ )"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13,
        18,
        19
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "for ( int p = 0 ; p < i ; p ++ ) { m [ p ] = r [ p ] ; }",
        "for ( int y = 0 ; y < i + j ; y ++ )",
        "if ( m [ y ] == ' p ' ) break ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13,
        18,
        23
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "for ( int p = 0 ; p < i ; p ++ ) { m [ p ] = r [ p ] ; }",
        "for ( int y = 0 ; y < i + j ; y ++ )",
        "if ( k == 0 ) cout << \" I \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13,
        18,
        24
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "for ( int p = 0 ; p < i ; p ++ ) { m [ p ] = r [ p ] ; }",
        "for ( int y = 0 ; y < i + j ; y ++ )",
        "if ( k == 1 ) cout << \" Oh \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13,
        19
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "for ( int p = 0 ; p < i ; p ++ ) { m [ p ] = r [ p ] ; }",
        "if ( m [ y ] == ' p ' ) break ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13,
        19,
        23
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "for ( int p = 0 ; p < i ; p ++ ) { m [ p ] = r [ p ] ; }",
        "if ( m [ y ] == ' p ' ) break ;",
        "if ( k == 0 ) cout << \" I \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13,
        19,
        24
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "for ( int p = 0 ; p < i ; p ++ ) { m [ p ] = r [ p ] ; }",
        "if ( m [ y ] == ' p ' ) break ;",
        "if ( k == 1 ) cout << \" Oh \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13,
        23
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "for ( int p = 0 ; p < i ; p ++ ) { m [ p ] = r [ p ] ; }",
        "if ( k == 0 ) cout << \" I \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13,
        23,
        24
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "for ( int p = 0 ; p < i ; p ++ ) { m [ p ] = r [ p ] ; }",
        "if ( k == 0 ) cout << \" I \" << endl ;",
        "if ( k == 1 ) cout << \" Oh \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        13,
        24
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "for ( int p = 0 ; p < i ; p ++ ) { m [ p ] = r [ p ] ; }",
        "if ( k == 1 ) cout << \" Oh \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        18
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "for ( int y = 0 ; y < i + j ; y ++ )"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        18,
        19
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "for ( int y = 0 ; y < i + j ; y ++ )",
        "if ( m [ y ] == ' p ' ) break ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        18,
        19,
        23
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "for ( int y = 0 ; y < i + j ; y ++ )",
        "if ( m [ y ] == ' p ' ) break ;",
        "if ( k == 0 ) cout << \" I \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        18,
        19,
        24
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "for ( int y = 0 ; y < i + j ; y ++ )",
        "if ( m [ y ] == ' p ' ) break ;",
        "if ( k == 1 ) cout << \" Oh \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        18,
        23
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "for ( int y = 0 ; y < i + j ; y ++ )",
        "if ( k == 0 ) cout << \" I \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        18,
        23,
        24
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "for ( int y = 0 ; y < i + j ; y ++ )",
        "if ( k == 0 ) cout << \" I \" << endl ;",
        "if ( k == 1 ) cout << \" Oh \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        18,
        24
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "for ( int y = 0 ; y < i + j ; y ++ )",
        "if ( k == 1 ) cout << \" Oh \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        19
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "if ( m [ y ] == ' p ' ) break ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        19,
        23
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "if ( m [ y ] == ' p ' ) break ;",
        "if ( k == 0 ) cout << \" I \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        19,
        23,
        24
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "if ( m [ y ] == ' p ' ) break ;",
        "if ( k == 0 ) cout << \" I \" << endl ;",
        "if ( k == 1 ) cout << \" Oh \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        19,
        24
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "if ( m [ y ] == ' p ' ) break ;",
        "if ( k == 1 ) cout << \" Oh \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        23
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "if ( k == 0 ) cout << \" I \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        23,
        24
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "if ( k == 0 ) cout << \" I \" << endl ;",
        "if ( k == 1 ) cout << \" Oh \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        24
      ],
      "mod_code": [
        "int * m = i + j + 1 ;",
        "if ( k == 1 ) cout << \" Oh \" << endl ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    }
  ]
}