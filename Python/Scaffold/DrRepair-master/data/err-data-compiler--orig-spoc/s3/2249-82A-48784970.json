{
  "meta": {
    "index": 2249,
    "hitid": "3QGTX7BCHPW18XR5S4YGEMMFKIK5ZX",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "82A",
    "subid": "48784970"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = long long int",
      "code": "long long int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "increment n by 4",
      "code": "n = n + 4 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "loop infinitely",
      "code": "while ( 1 )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if n is 5",
      "code": "if ( n == 5 )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "print \" Sheldon \"",
      "code": "cout << \" Sheldon \" << endl ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if n = 6",
      "code": "else if ( n == 6 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print \" Leonard \"",
      "code": "cout << \" Leonard \" << endl ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if n = 7",
      "code": "else if ( n == 7 )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print \" Penny \"",
      "code": "cout << \" Penny \" << endl ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else if n = 8",
      "code": "else if ( n == 8 )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "print \" Rajesh \"",
      "code": "cout << \" Rajesh \" << endl ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else if n = 9",
      "code": "else if ( n == 9 )",
      "indent": 2
    },
    {
      "line": 18,
      "text": "print \" Howard \"",
      "code": "cout << \" Howard \" << endl ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "set n to n bitshift right by 1",
      "code": "n = n >> 1 ;",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "long long int t ;"
      ],
      "err_line": 2,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}