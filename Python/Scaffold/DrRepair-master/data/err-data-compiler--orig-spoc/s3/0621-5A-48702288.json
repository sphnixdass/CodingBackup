{
  "meta": {
    "index": 621,
    "hitid": "3SV8KD29L4M4QGC8ZR2MGB5XG62KZF",
    "workerid": "A1APYLD4DUK33J",
    "probid": "5A",
    "subid": "48702288"
  },
  "lines": [
    {
      "line": 0,
      "text": "create character array c of size integer casted 1e2 + 5",
      "code": "char c [ ( int ) 1e2 + 5 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "creatre integers n , ans",
      "code": "int n , ans ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare mygets with character pointer s as argument , returning integer",
      "code": "int mygets ( char * s )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "set bytes starting at s to size of s to value 0",
      "code": "memset ( s , 0 , sizeof ( s ) ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create character c",
      "code": "char c ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create integer i with i = 0",
      "code": "int i = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "while c is get character is not ' \\ n ' , set s [ i ] to c , increment i",
      "code": "while ( ( c = getchar ( ) ) != ' \\n ' ) { s [ i ] = c , i ++ ; }",
      "indent": 1
    },
    {
      "line": 7,
      "text": "return i from function",
      "code": "return i ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 10,
      "text": "set n to 0",
      "code": "n = 0 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "create integers me , cnt , ok , with me = 0 , cnt = 0 , ok = 0",
      "code": "int me = 0 , cnt = 0 , ok = 0 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "while read string to c is true",
      "code": "while ( gets ( c ) )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if c [ 0 ] is ' + '",
      "code": "if ( c [ 0 ] == ' + ' )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "increment n",
      "code": "n ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else if c [ 0 ] is ' - '",
      "code": "else if ( c [ 0 ] == ' - ' )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "decrement n",
      "code": "n -- ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 18,
      "text": "set ok to 0 , set cnt to 0",
      "code": "ok = 0 , cnt = 0 ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "for i = 0 to string length of c exclusive",
      "code": "for ( int i = 0 ; i < strlen ( c ) ; i ++ )",
      "indent": 3
    },
    {
      "line": 20,
      "text": "if c [ i ] is ' : '",
      "code": "if ( c [ i ] == ' : ' )",
      "indent": 4
    },
    {
      "line": 21,
      "text": "set ok to 1",
      "code": "ok = 1 ;",
      "indent": 5
    },
    {
      "line": 22,
      "text": "else if ok is 1",
      "code": "else if ( ok == 1 )",
      "indent": 4
    },
    {
      "line": 23,
      "text": "increment cnt",
      "code": "cnt ++ ;",
      "indent": 5
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 25,
      "text": "increment ans by n * cnt",
      "code": "ans += n * cnt ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "print ans print newline",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "char c [ 1e2 + 5 ] = { 0 } ;"
      ],
      "err_line": 0,
      "err_msg": "size of array ‘c’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "request for member ‘size’ in ‘c’, which is of non-class type ‘char [105]’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "char c [ 1e2 + 5 ] ;"
      ],
      "err_line": 0,
      "err_msg": "size of array ‘c’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int mygets ( char s )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘void*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "declaration of ‘char s’ shadows a parameter"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "int me , cnt = 0 , ok = 0 , ok = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "redeclaration of ‘int ok’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "while ( gets ( ) )"
      ],
      "err_line": 12,
      "err_msg": "too few arguments to function ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "if ( c [ 0 ] == \" + ' )"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 27,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "else if ( c [ i ] == ' : ' )"
      ],
      "err_line": 20,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "char c [ 1e2 + 5 ] = { 0 } ;",
        "while ( cin >> c )"
      ],
      "err_line": 0,
      "err_msg": "size of array ‘c’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        0,
        12,
        19
      ],
      "mod_code": [
        "char c [ 1e2 + 5 ] = { 0 } ;",
        "while ( cin >> c )",
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "size of array ‘c’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        0,
        12,
        19,
        2
      ],
      "mod_code": [
        "char c [ 1e2 + 5 ] = { 0 } ;",
        "while ( cin >> c )",
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )",
        "int mygets ( char s )"
      ],
      "err_line": 0,
      "err_msg": "size of array ‘c’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        0,
        12,
        19,
        13
      ],
      "mod_code": [
        "char c [ 1e2 + 5 ] = { 0 } ;",
        "while ( cin >> c )",
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )",
        "if ( c [ 0 ] == \" + ' )"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        12,
        2
      ],
      "mod_code": [
        "char c [ 1e2 + 5 ] = { 0 } ;",
        "while ( cin >> c )",
        "int mygets ( char s )"
      ],
      "err_line": 0,
      "err_msg": "size of array ‘c’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        0,
        12,
        2,
        13
      ],
      "mod_code": [
        "char c [ 1e2 + 5 ] = { 0 } ;",
        "while ( cin >> c )",
        "int mygets ( char s )",
        "if ( c [ 0 ] == \" + ' )"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        12,
        13
      ],
      "mod_code": [
        "char c [ 1e2 + 5 ] = { 0 } ;",
        "while ( cin >> c )",
        "if ( c [ 0 ] == \" + ' )"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        19
      ],
      "mod_code": [
        "char c [ 1e2 + 5 ] = { 0 } ;",
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )"
      ],
      "err_line": 0,
      "err_msg": "size of array ‘c’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        0,
        19,
        2
      ],
      "mod_code": [
        "char c [ 1e2 + 5 ] = { 0 } ;",
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )",
        "int mygets ( char s )"
      ],
      "err_line": 0,
      "err_msg": "size of array ‘c’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        0,
        19,
        2,
        13
      ],
      "mod_code": [
        "char c [ 1e2 + 5 ] = { 0 } ;",
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )",
        "int mygets ( char s )",
        "if ( c [ 0 ] == \" + ' )"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        19,
        13
      ],
      "mod_code": [
        "char c [ 1e2 + 5 ] = { 0 } ;",
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )",
        "if ( c [ 0 ] == \" + ' )"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        2
      ],
      "mod_code": [
        "char c [ 1e2 + 5 ] = { 0 } ;",
        "int mygets ( char s )"
      ],
      "err_line": 0,
      "err_msg": "size of array ‘c’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        0,
        2,
        13
      ],
      "mod_code": [
        "char c [ 1e2 + 5 ] = { 0 } ;",
        "int mygets ( char s )",
        "if ( c [ 0 ] == \" + ' )"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        0,
        13
      ],
      "mod_code": [
        "char c [ 1e2 + 5 ] = { 0 } ;",
        "if ( c [ 0 ] == \" + ' )"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        19
      ],
      "mod_code": [
        "while ( cin >> c )",
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )"
      ],
      "err_line": 19,
      "err_msg": "request for member ‘size’ in ‘c’, which is of non-class type ‘char [105]’"
    },
    {
      "mod_line": [
        12,
        19,
        2
      ],
      "mod_code": [
        "while ( cin >> c )",
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )",
        "int mygets ( char s )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘void*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        19,
        2,
        13
      ],
      "mod_code": [
        "while ( cin >> c )",
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )",
        "int mygets ( char s )",
        "if ( c [ 0 ] == \" + ' )"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        19,
        2,
        0
      ],
      "mod_code": [
        "while ( cin >> c )",
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )",
        "int mygets ( char s )",
        "char c [ 1e2 + 5 ] ;"
      ],
      "err_line": 0,
      "err_msg": "size of array ‘c’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        12,
        19,
        13
      ],
      "mod_code": [
        "while ( cin >> c )",
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )",
        "if ( c [ 0 ] == \" + ' )"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        19,
        13,
        0
      ],
      "mod_code": [
        "while ( cin >> c )",
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )",
        "if ( c [ 0 ] == \" + ' )",
        "char c [ 1e2 + 5 ] ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        19,
        0
      ],
      "mod_code": [
        "while ( cin >> c )",
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )",
        "char c [ 1e2 + 5 ] ;"
      ],
      "err_line": 0,
      "err_msg": "size of array ‘c’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "while ( cin >> c )",
        "int mygets ( char s )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘void*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        2,
        13
      ],
      "mod_code": [
        "while ( cin >> c )",
        "int mygets ( char s )",
        "if ( c [ 0 ] == \" + ' )"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        2,
        13,
        0
      ],
      "mod_code": [
        "while ( cin >> c )",
        "int mygets ( char s )",
        "if ( c [ 0 ] == \" + ' )",
        "char c [ 1e2 + 5 ] ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        2,
        0
      ],
      "mod_code": [
        "while ( cin >> c )",
        "int mygets ( char s )",
        "char c [ 1e2 + 5 ] ;"
      ],
      "err_line": 0,
      "err_msg": "size of array ‘c’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        12,
        13
      ],
      "mod_code": [
        "while ( cin >> c )",
        "if ( c [ 0 ] == \" + ' )"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        13,
        0
      ],
      "mod_code": [
        "while ( cin >> c )",
        "if ( c [ 0 ] == \" + ' )",
        "char c [ 1e2 + 5 ] ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12,
        0
      ],
      "mod_code": [
        "while ( cin >> c )",
        "char c [ 1e2 + 5 ] ;"
      ],
      "err_line": 0,
      "err_msg": "size of array ‘c’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        19,
        2
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )",
        "int mygets ( char s )"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘char’ to ‘void*’ [-fpermissive]"
    },
    {
      "mod_line": [
        19,
        2,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )",
        "int mygets ( char s )",
        "if ( c [ 0 ] == \" + ' )"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        19,
        2,
        13,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )",
        "int mygets ( char s )",
        "if ( c [ 0 ] == \" + ' )",
        "char c [ 1e2 + 5 ] ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        19,
        2,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )",
        "int mygets ( char s )",
        "char c [ 1e2 + 5 ] ;"
      ],
      "err_line": 0,
      "err_msg": "size of array ‘c’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        19,
        13
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )",
        "if ( c [ 0 ] == \" + ' )"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        19,
        13,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )",
        "if ( c [ 0 ] == \" + ' )",
        "char c [ 1e2 + 5 ] ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        19,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < c . size ( ) ; i ++ )",
        "char c [ 1e2 + 5 ] ;"
      ],
      "err_line": 0,
      "err_msg": "size of array ‘c’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "int mygets ( char s )",
        "if ( c [ 0 ] == \" + ' )"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        13,
        0
      ],
      "mod_code": [
        "int mygets ( char s )",
        "if ( c [ 0 ] == \" + ' )",
        "char c [ 1e2 + 5 ] ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "int mygets ( char s )",
        "char c [ 1e2 + 5 ] ;"
      ],
      "err_line": 0,
      "err_msg": "size of array ‘c’ has non-integral type ‘double’"
    },
    {
      "mod_line": [
        13,
        0
      ],
      "mod_code": [
        "if ( c [ 0 ] == \" + ' )",
        "char c [ 1e2 + 5 ] ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating \" character"
    }
  ]
}