{
  "meta": {
    "index": 1223,
    "hitid": "3LEG2HW4UFH34JHI992BDN3LN1N2FO",
    "workerid": "A1APYLD4DUK33J",
    "probid": "44A",
    "subid": "41956466"
  },
  "lines": [
    {
      "line": 0,
      "text": "create integers n , ans with ans = 1",
      "code": "int n , ans = 1 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create boolean flag",
      "code": "bool flag ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "create 2d string array a of size 101 by 3",
      "code": "string a [ 101 ] [ 3 ] ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 1 to n inclusive , read a [ i ] [ 1 ] read a [ i ] [ 2 ]",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) cin >> a [ i ] [ 1 ] >> a [ i ] [ 2 ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 2 to n inclusive",
      "code": "for ( int i = 2 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for j = i - 1 to 1 inclusive , decrementing i",
      "code": "for ( int j = i - 1 ; j >= 1 ; j -- )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if a [ i ] [ 1 ] is a [ j ] [ 1 ] and a [ i ] [ 2 ] is a [ j ] [ 2 ]",
      "code": "if ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "set flag to 0",
      "code": "flag = 0 ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if flag is true , increment ans",
      "code": "if ( flag ) ans ++ ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print ans print newline",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool flag ( )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘string’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "for ( j = i - 1 ; j >= 1 ; j -- )"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "do"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        11,
        9
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "do",
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        11,
        9,
        8
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "do",
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "for ( j = i - 1 ; j >= 1 ; j -- )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        11,
        9,
        2
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "do",
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "int a [ 101 ] [ 3 ] ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        11,
        9,
        10
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "do",
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "int flag = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        11,
        8
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "do",
        "for ( j = i - 1 ; j >= 1 ; j -- )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        11,
        8,
        2
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "do",
        "for ( j = i - 1 ; j >= 1 ; j -- )",
        "int a [ 101 ] [ 3 ] ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        11,
        8,
        10
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "do",
        "for ( j = i - 1 ; j >= 1 ; j -- )",
        "int flag = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        11,
        2
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "do",
        "int a [ 101 ] [ 3 ] ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        11,
        2,
        10
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "do",
        "int a [ 101 ] [ 3 ] ;",
        "int flag = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        11,
        10
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "do",
        "int flag = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        9
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        9,
        8
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "for ( j = i - 1 ; j >= 1 ; j -- )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        9,
        8,
        2
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "for ( j = i - 1 ; j >= 1 ; j -- )",
        "int a [ 101 ] [ 3 ] ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        9,
        8,
        10
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "for ( j = i - 1 ; j >= 1 ; j -- )",
        "int flag = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        9,
        2
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "int a [ 101 ] [ 3 ] ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        9,
        2,
        10
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "int a [ 101 ] [ 3 ] ;",
        "int flag = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        9,
        10
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "int flag = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "for ( j = i - 1 ; j >= 1 ; j -- )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        2
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "for ( j = i - 1 ; j >= 1 ; j -- )",
        "int a [ 101 ] [ 3 ] ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        2,
        10
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "for ( j = i - 1 ; j >= 1 ; j -- )",
        "int a [ 101 ] [ 3 ] ;",
        "int flag = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        10
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "for ( j = i - 1 ; j >= 1 ; j -- )",
        "int flag = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "int a [ 101 ] [ 3 ] ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        2,
        10
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "int a [ 101 ] [ 3 ] ;",
        "int flag = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "for ( i = 2 ; i <= n ; i ++ )",
        "int flag = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        9
      ],
      "mod_code": [
        "do",
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        9,
        8
      ],
      "mod_code": [
        "do",
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "for ( j = i - 1 ; j >= 1 ; j -- )"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        9,
        8,
        2
      ],
      "mod_code": [
        "do",
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "for ( j = i - 1 ; j >= 1 ; j -- )",
        "int a [ 101 ] [ 3 ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        9,
        8,
        10
      ],
      "mod_code": [
        "do",
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "for ( j = i - 1 ; j >= 1 ; j -- )",
        "int flag = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        9,
        2
      ],
      "mod_code": [
        "do",
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "int a [ 101 ] [ 3 ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        9,
        2,
        10
      ],
      "mod_code": [
        "do",
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "int a [ 101 ] [ 3 ] ;",
        "int flag = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        9,
        10
      ],
      "mod_code": [
        "do",
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "int flag = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "do",
        "for ( j = i - 1 ; j >= 1 ; j -- )"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        8,
        2
      ],
      "mod_code": [
        "do",
        "for ( j = i - 1 ; j >= 1 ; j -- )",
        "int a [ 101 ] [ 3 ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        8,
        2,
        10
      ],
      "mod_code": [
        "do",
        "for ( j = i - 1 ; j >= 1 ; j -- )",
        "int a [ 101 ] [ 3 ] ;",
        "int flag = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        8,
        10
      ],
      "mod_code": [
        "do",
        "for ( j = i - 1 ; j >= 1 ; j -- )",
        "int flag = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "do",
        "int a [ 101 ] [ 3 ] ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        2,
        10
      ],
      "mod_code": [
        "do",
        "int a [ 101 ] [ 3 ] ;",
        "int flag = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "do",
        "int flag = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "for ( j = i - 1 ; j >= 1 ; j -- )"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        8,
        2
      ],
      "mod_code": [
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "for ( j = i - 1 ; j >= 1 ; j -- )",
        "int a [ 101 ] [ 3 ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        8,
        2,
        10
      ],
      "mod_code": [
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "for ( j = i - 1 ; j >= 1 ; j -- )",
        "int a [ 101 ] [ 3 ] ;",
        "int flag = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        8,
        10
      ],
      "mod_code": [
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "for ( j = i - 1 ; j >= 1 ; j -- )",
        "int flag = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "int a [ 101 ] [ 3 ] ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        2,
        10
      ],
      "mod_code": [
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "int a [ 101 ] [ 3 ] ;",
        "int flag = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        9,
        10
      ],
      "mod_code": [
        "if ( ( a [ i ] [ 1 ] == a [ j ] [ 1 ] && a [ i ] [ 2 ] == a [ j ] [ 2 ] )",
        "int flag = 0 ;"
      ],
      "err_line": 10,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "for ( j = i - 1 ; j >= 1 ; j -- )",
        "int a [ 101 ] [ 3 ] ;"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        2,
        10
      ],
      "mod_code": [
        "for ( j = i - 1 ; j >= 1 ; j -- )",
        "int a [ 101 ] [ 3 ] ;",
        "int flag = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "for ( j = i - 1 ; j >= 1 ; j -- )",
        "int flag = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘j’ was not declared in this scope"
    }
  ]
}