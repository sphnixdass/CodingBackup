{
  "meta": {
    "index": 357,
    "hitid": "3URJ6VVYUPH7DA9YCQ4PTW9X0IO4OR",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "339A",
    "subid": "48784399"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "l = int with l = size of s",
      "code": "int l = s . size ( ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "one , two , three = int with one = 0 and two = 0 and three = 0",
      "code": "int one = 0 , two = 0 , three = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to l",
      "code": "for ( int i = 0 ; i < l ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if s [ i ] is ' 1 '",
      "code": "if ( s [ i ] == ' 1 ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment one",
      "code": "one ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if s [ i ] is ' 2 '",
      "code": "else if ( s [ i ] == ' 2 ' )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment two",
      "code": "two ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if s [ i ] is ' 3 '",
      "code": "else if ( s [ i ] == ' 3 ' )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increment three",
      "code": "three ++ ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 13,
      "text": "continue",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "for i = 0 to one",
      "code": "for ( int i = 0 ; i < one ; i ++ )",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print \" 1 \"",
      "code": "cout << \" 1 \" ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "if two is 0 and three is 0 and i is one - 1",
      "code": "if ( two == 0 and three == 0 and i == one - 1 )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "continue",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "print \" + \"",
      "code": "cout << \" + \" ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 24,
      "text": "for i = 0 to two",
      "code": "for ( int i = 0 ; i < two ; i ++ )",
      "indent": 1
    },
    {
      "line": 25,
      "text": "print \" 2 \"",
      "code": "cout << \" 2 \" ;",
      "indent": 2
    },
    {
      "line": 26,
      "text": "if three is 0 and i is two - 1",
      "code": "if ( three == 0 and i == two - 1 )",
      "indent": 2
    },
    {
      "line": 27,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 3
    },
    {
      "line": 28,
      "text": "continue",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "print \" + \"",
      "code": "cout << \" + \" ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "for i = 0 to three",
      "code": "for ( int i = 0 ; i < three ; i ++ )",
      "indent": 1
    },
    {
      "line": 33,
      "text": "print \" 3 \"",
      "code": "cout << \" 3 \" ;",
      "indent": 2
    },
    {
      "line": 34,
      "text": "if i is three - 1",
      "code": "if ( i == three - 1 )",
      "indent": 2
    },
    {
      "line": 35,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 3
    },
    {
      "line": 36,
      "text": "continue",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 38,
      "text": "print \" + \"",
      "code": "cout << \" + \" ;",
      "indent": 2
    },
    {
      "line": 39,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int l = strlen ( s ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘const char*’ for argument ‘1’ to ‘size_t strlen(const char*)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int one = 0 , two = 0 , two = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int two’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 21,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 37,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        32,
        12
      ],
      "mod_code": [
        "if ( three == 0 && i == - 1 )",
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        32,
        12,
        38
      ],
      "mod_code": [
        "if ( three == 0 && i == - 1 )",
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "do",
        "cout << \" + \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        32,
        12,
        28
      ],
      "mod_code": [
        "if ( three == 0 && i == - 1 )",
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        32,
        12,
        24
      ],
      "mod_code": [
        "if ( three == 0 && i == - 1 )",
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "do",
        "for ( int i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        32,
        38,
        28
      ],
      "mod_code": [
        "if ( three == 0 && i == - 1 )",
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "cout << \" + \" << endl ;",
        "do"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        32,
        28
      ],
      "mod_code": [
        "if ( three == 0 && i == - 1 )",
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "do"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        32,
        28,
        24
      ],
      "mod_code": [
        "if ( three == 0 && i == - 1 )",
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "do",
        "for ( int i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        12
      ],
      "mod_code": [
        "if ( three == 0 && i == - 1 )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        12,
        38
      ],
      "mod_code": [
        "if ( three == 0 && i == - 1 )",
        "do",
        "cout << \" + \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        12,
        38,
        28
      ],
      "mod_code": [
        "if ( three == 0 && i == - 1 )",
        "do",
        "cout << \" + \" << endl ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        12,
        38,
        24
      ],
      "mod_code": [
        "if ( three == 0 && i == - 1 )",
        "do",
        "cout << \" + \" << endl ;",
        "for ( int i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        12,
        28
      ],
      "mod_code": [
        "if ( three == 0 && i == - 1 )",
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        12,
        28,
        24
      ],
      "mod_code": [
        "if ( three == 0 && i == - 1 )",
        "do",
        "do",
        "for ( int i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        12,
        24
      ],
      "mod_code": [
        "if ( three == 0 && i == - 1 )",
        "do",
        "for ( int i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        38,
        28
      ],
      "mod_code": [
        "if ( three == 0 && i == - 1 )",
        "cout << \" + \" << endl ;",
        "do"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        38,
        28,
        24
      ],
      "mod_code": [
        "if ( three == 0 && i == - 1 )",
        "cout << \" + \" << endl ;",
        "do",
        "for ( int i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        28
      ],
      "mod_code": [
        "if ( three == 0 && i == - 1 )",
        "do"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        26,
        28,
        24
      ],
      "mod_code": [
        "if ( three == 0 && i == - 1 )",
        "do",
        "for ( int i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        32,
        12
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        32,
        12,
        38
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "do",
        "cout << \" + \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        32,
        12,
        38,
        28
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "do",
        "cout << \" + \" << endl ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        32,
        12,
        38,
        24
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "do",
        "cout << \" + \" << endl ;",
        "for ( int i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        32,
        12,
        28
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        32,
        12,
        28,
        24
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "do",
        "do",
        "for ( int i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        32,
        12,
        24
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "do",
        "for ( int i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        32,
        38,
        28
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "cout << \" + \" << endl ;",
        "do"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        32,
        38,
        28,
        24
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "cout << \" + \" << endl ;",
        "do",
        "for ( int i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        32,
        28
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "do"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        32,
        28,
        24
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "do",
        "for ( int i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        38
      ],
      "mod_code": [
        "do",
        "cout << \" + \" << endl ;"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        38,
        28
      ],
      "mod_code": [
        "do",
        "cout << \" + \" << endl ;",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        38,
        28,
        24
      ],
      "mod_code": [
        "do",
        "cout << \" + \" << endl ;",
        "do",
        "for ( int i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        38,
        24
      ],
      "mod_code": [
        "do",
        "cout << \" + \" << endl ;",
        "for ( int i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        28
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        28,
        24
      ],
      "mod_code": [
        "do",
        "do",
        "for ( int i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        24
      ],
      "mod_code": [
        "do",
        "for ( int i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        38,
        28
      ],
      "mod_code": [
        "cout << \" + \" << endl ;",
        "do"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        38,
        28,
        24
      ],
      "mod_code": [
        "cout << \" + \" << endl ;",
        "do",
        "for ( int i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        28,
        24
      ],
      "mod_code": [
        "do",
        "for ( int i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 29,
      "err_msg": "expected primary-expression before ‘}’ token"
    }
  ]
}