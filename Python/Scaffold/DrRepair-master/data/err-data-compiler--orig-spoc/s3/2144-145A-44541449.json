{
  "meta": {
    "index": 2144,
    "hitid": "3H1C3QRA01DOWN9OBR7B7IR7OTTCE2",
    "workerid": "AIWEXPJAU66D9",
    "probid": "145A",
    "subid": "44541449"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare string variables s and t",
      "code": "string s , t ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read from the input to s and t",
      "code": "cin >> s >> t ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare integers a and b = 0",
      "code": "int a = 0 , b = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for integer i = 0 to length of s exclusive",
      "code": "for ( int i = 0 ; i < ( int ) s . length ( ) ; ++ i )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if s [ i ] ! = t [ i ]",
      "code": "if ( s [ i ] != t [ i ] )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "if s [ i ] is ' 4 '",
      "code": "if ( s [ i ] == ' 4 ' )",
      "indent": 3
    },
    {
      "line": 7,
      "text": "increment a",
      "code": "++ a ;",
      "indent": 4
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 9,
      "text": "increment b",
      "code": "++ b ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print min of a and b + absolute value of a - b",
      "code": "cout << min ( a , b ) + abs ( a - b ) << endl ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string s declare t ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s >> s >> t ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "string s declare t ;",
        "s >> s >> t ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        2,
        6
      ],
      "mod_code": [
        "string s declare t ;",
        "s >> s >> t ;",
        "if ( ! s [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        8
      ],
      "mod_code": [
        "string s declare t ;",
        "s >> s >> t ;",
        "if ( ! s [ i ] )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        13
      ],
      "mod_code": [
        "string s declare t ;",
        "s >> s >> t ;",
        "if ( ! s [ i ] )",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        2,
        6,
        5
      ],
      "mod_code": [
        "string s declare t ;",
        "s >> s >> t ;",
        "if ( ! s [ i ] )",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        2,
        8
      ],
      "mod_code": [
        "string s declare t ;",
        "s >> s >> t ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        13
      ],
      "mod_code": [
        "string s declare t ;",
        "s >> s >> t ;",
        "do",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        5
      ],
      "mod_code": [
        "string s declare t ;",
        "s >> s >> t ;",
        "do",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        2,
        13
      ],
      "mod_code": [
        "string s declare t ;",
        "s >> s >> t ;",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        2,
        13,
        5
      ],
      "mod_code": [
        "string s declare t ;",
        "s >> s >> t ;",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "string s declare t ;",
        "s >> s >> t ;",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "string s declare t ;",
        "if ( ! s [ i ] )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        6,
        8
      ],
      "mod_code": [
        "string s declare t ;",
        "if ( ! s [ i ] )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        13
      ],
      "mod_code": [
        "string s declare t ;",
        "if ( ! s [ i ] )",
        "do",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        6,
        8,
        5
      ],
      "mod_code": [
        "string s declare t ;",
        "if ( ! s [ i ] )",
        "do",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        6,
        13
      ],
      "mod_code": [
        "string s declare t ;",
        "if ( ! s [ i ] )",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        6,
        13,
        5
      ],
      "mod_code": [
        "string s declare t ;",
        "if ( ! s [ i ] )",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        6,
        5
      ],
      "mod_code": [
        "string s declare t ;",
        "if ( ! s [ i ] )",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "string s declare t ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        8,
        13
      ],
      "mod_code": [
        "string s declare t ;",
        "do",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        8,
        13,
        5
      ],
      "mod_code": [
        "string s declare t ;",
        "do",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        8,
        5
      ],
      "mod_code": [
        "string s declare t ;",
        "do",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        13
      ],
      "mod_code": [
        "string s declare t ;",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        13,
        5
      ],
      "mod_code": [
        "string s declare t ;",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "string s declare t ;",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘declare’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "s >> s >> t ;",
        "if ( ! s [ i ] )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        6,
        8
      ],
      "mod_code": [
        "s >> s >> t ;",
        "if ( ! s [ i ] )",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        13
      ],
      "mod_code": [
        "s >> s >> t ;",
        "if ( ! s [ i ] )",
        "do",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        5
      ],
      "mod_code": [
        "s >> s >> t ;",
        "if ( ! s [ i ] )",
        "do",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        6,
        13
      ],
      "mod_code": [
        "s >> s >> t ;",
        "if ( ! s [ i ] )",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        6,
        13,
        5
      ],
      "mod_code": [
        "s >> s >> t ;",
        "if ( ! s [ i ] )",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        6,
        5
      ],
      "mod_code": [
        "s >> s >> t ;",
        "if ( ! s [ i ] )",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "s >> s >> t ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8,
        13
      ],
      "mod_code": [
        "s >> s >> t ;",
        "do",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8,
        13,
        5
      ],
      "mod_code": [
        "s >> s >> t ;",
        "do",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8,
        5
      ],
      "mod_code": [
        "s >> s >> t ;",
        "do",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "s >> s >> t ;",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        13,
        5
      ],
      "mod_code": [
        "s >> s >> t ;",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "s >> s >> t ;",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "if ( ! s [ i ] )",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        8,
        13
      ],
      "mod_code": [
        "if ( ! s [ i ] )",
        "do",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        8,
        13,
        5
      ],
      "mod_code": [
        "if ( ! s [ i ] )",
        "do",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        8,
        5
      ],
      "mod_code": [
        "if ( ! s [ i ] )",
        "do",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "do",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        13,
        5
      ],
      "mod_code": [
        "do",
        "cout << min ( a , b + abs ( a - b ) ) << endl ;",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "do",
        "if ( s [ i ] != ' [ ' )"
      ],
      "err_line": 11,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}