{
  "meta": {
    "index": 654,
    "hitid": "3WYZV0QBFJ7ESI8ZSW18KN6WLCVXBB",
    "workerid": "A1APYLD4DUK33J",
    "probid": "5A",
    "subid": "44084467"
  },
  "lines": [
    {
      "line": 0,
      "text": "create string vector data",
      "code": "vector < string > data ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create map frq from string to int",
      "code": "map < string , int > frq ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create integers count1 , ans with count1 = 0 , ans = 0",
      "code": "int count1 = 0 , ans = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while read line from cin to s is true",
      "code": "while ( getline ( cin , s ) )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if s [ 0 ] is ' + '",
      "code": "if ( s [ 0 ] == ' + ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment count1",
      "code": "count1 ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if s [ 0 ] is ' - '",
      "code": "else if ( s [ 0 ] == ' - ' )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "decrement count1",
      "code": "count1 -- ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increment ans by count1 * ( size of s - first index of ' : ' in s - 1 )",
      "code": "ans += count1 * ( s . size ( ) - s . find ( ' : ' ) - 1 ) ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print ans print newline",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "while ( cin >> cin >> s )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "ans += count1 * ( s . size ( ) - min ( ' : ' - 1 ) ) ;"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘min(int)’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int count1 = 0 , ans = 0 , ans ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int ans’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "ans += count1 * ( s . size ( ) - min ( ' : ' - 1 ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        5,
        11,
        6
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "ans += count1 * ( s . size ( ) - min ( ' : ' - 1 ) ) ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        11,
        6,
        3
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "ans += count1 * ( s . size ( ) - min ( ' : ' - 1 ) ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "int s ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        11,
        6,
        8
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "ans += count1 * ( s . size ( ) - min ( ' : ' - 1 ) ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        11,
        3
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "ans += count1 * ( s . size ( ) - min ( ' : ' - 1 ) ) ;",
        "int s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        5,
        11,
        3,
        8
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "ans += count1 * ( s . size ( ) - min ( ' : ' - 1 ) ) ;",
        "int s ;",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        5,
        11,
        8
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "ans += count1 * ( s . size ( ) - min ( ' : ' - 1 ) ) ;",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        6,
        11
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "if ( s [ 0 ] == \" + ' )",
        "ans += count1 * ( s . size ( ) - abs ( ' : ' - 1 ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        6,
        11,
        3
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "if ( s [ 0 ] == \" + ' )",
        "ans += count1 * ( s . size ( ) - abs ( ' : ' - 1 ) ) ;",
        "int s ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        6,
        11,
        8
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "if ( s [ 0 ] == \" + ' )",
        "ans += count1 * ( s . size ( ) - abs ( ' : ' - 1 ) ) ;",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        6,
        3
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "if ( s [ 0 ] == \" + ' )",
        "int s ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        6,
        3,
        8
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "if ( s [ 0 ] == \" + ' )",
        "int s ;",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        6,
        8
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        11
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "ans += count1 * ( s . size ( ) - abs ( ' : ' - 1 ) ) ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        5,
        11,
        3
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "ans += count1 * ( s . size ( ) - abs ( ' : ' - 1 ) ) ;",
        "int s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        5,
        11,
        3,
        8
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "ans += count1 * ( s . size ( ) - abs ( ' : ' - 1 ) ) ;",
        "int s ;",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        5,
        11,
        8
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "ans += count1 * ( s . size ( ) - abs ( ' : ' - 1 ) ) ;",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "int s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        5,
        3,
        8
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "int s ;",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "while ( cin >> cin >> s )",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::istream {aka std::basic_istream<char>}’)"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "ans += count1 * ( s . size ( ) - min ( ' : ' - 1 ) ) ;",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        6,
        3
      ],
      "mod_code": [
        "ans += count1 * ( s . size ( ) - min ( ' : ' - 1 ) ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "int s ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        6,
        3,
        8
      ],
      "mod_code": [
        "ans += count1 * ( s . size ( ) - min ( ' : ' - 1 ) ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "int s ;",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        6,
        8
      ],
      "mod_code": [
        "ans += count1 * ( s . size ( ) - min ( ' : ' - 1 ) ) ;",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "ans += count1 * ( s . size ( ) - min ( ' : ' - 1 ) ) ;",
        "int s ;"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        11,
        3,
        8
      ],
      "mod_code": [
        "ans += count1 * ( s . size ( ) - min ( ' : ' - 1 ) ) ;",
        "int s ;",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "ans += count1 * ( s . size ( ) - min ( ' : ' - 1 ) ) ;",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 11,
      "err_msg": "no matching function for call to ‘min(int)’"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "ans += count1 * ( s . size ( ) - abs ( ' : ' - 1 ) ) ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        11,
        3
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "ans += count1 * ( s . size ( ) - abs ( ' : ' - 1 ) ) ;",
        "int s ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        11,
        3,
        8
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "ans += count1 * ( s . size ( ) - abs ( ' : ' - 1 ) ) ;",
        "int s ;",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        11,
        8
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "ans += count1 * ( s . size ( ) - abs ( ' : ' - 1 ) ) ;",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        3
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "int s ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        3,
        8
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "int s ;",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        3
      ],
      "mod_code": [
        "ans += count1 * ( s . size ( ) - abs ( ' : ' - 1 ) ) ;",
        "int s ;"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        11,
        3,
        8
      ],
      "mod_code": [
        "ans += count1 * ( s . size ( ) - abs ( ' : ' - 1 ) ) ;",
        "int s ;",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "int s ;",
        "else if ( ! s [ 0 ] == ' - ' )"
      ],
      "err_line": 5,
      "err_msg": "no matching function for call to ‘getline(std::istream&, int&)’"
    }
  ]
}