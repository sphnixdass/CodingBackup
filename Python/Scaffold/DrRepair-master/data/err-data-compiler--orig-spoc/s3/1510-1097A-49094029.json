{
  "meta": {
    "index": 1510,
    "hitid": "37SDSEDIN9WN0JPZIRWRYCCU9T6184",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1097A",
    "subid": "49094029"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare string he",
      "code": "string he ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare vector of strings called me with 5 elements",
      "code": "vector < string > me ( 5 ) ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "OK is a bool function with string arguments a and b",
      "code": "bool OK ( string a , string b )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "return true if a [ 0 ] = b [ 0 ] or a [ 1 ] = = b [ 1 ] , or false otherwise",
      "code": "return a [ 0 ] == b [ 0 ] || a [ 1 ] == b [ 1 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "read he",
      "code": "cin >> he ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for integer i = 0 to 5 exclusive",
      "code": "for ( int i = 0 ; i < 5 ; ++ i ) cin >> me [ i ] ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for integer i = 0 to 5 exclusive",
      "code": "for ( int i = 0 ; i < 5 ; ++ i )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if OK ( he , me [ i ] ) is true",
      "code": "if ( OK ( he , me [ i ] ) )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "print \" YES \\ n \"",
      "code": "cout << \" YES\\n \" ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "exit ( 0 )",
      "code": "exit ( 0 ) ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "print \" NO \\ n \"",
      "code": "cout << \" NO\\n \" ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string he he ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "vector < string > called ( 5 ) ;"
      ],
      "err_line": 7,
      "err_msg": "‘me’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ? true : false ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "gets ( he ) ;"
      ],
      "err_line": 6,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;",
        "for ( int i = 0 ; i < 5 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        7,
        0
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;",
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "string he he ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    },
    {
      "mod_line": [
        3,
        7,
        0,
        9
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;",
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "string he he ;",
        "if ( ! OK ( he , me [ i ] ) )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    },
    {
      "mod_line": [
        3,
        7,
        0,
        11
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;",
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "string he he ;",
        "exit ( ' 0 ' ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    },
    {
      "mod_line": [
        3,
        7,
        9
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;",
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "if ( ! OK ( he , me [ i ] ) )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        7,
        9,
        11
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;",
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "if ( ! OK ( he , me [ i ] ) )",
        "exit ( ' 0 ' ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        7,
        11
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;",
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "exit ( ' 0 ' ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        0
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;",
        "string he he ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    },
    {
      "mod_line": [
        3,
        0,
        9
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;",
        "string he he ;",
        "if ( ! OK ( he , me [ i ] ) )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    },
    {
      "mod_line": [
        3,
        0,
        9,
        11
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;",
        "string he he ;",
        "if ( ! OK ( he , me [ i ] ) )",
        "exit ( ' 0 ' ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    },
    {
      "mod_line": [
        3,
        0,
        9,
        7
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;",
        "string he he ;",
        "if ( ! OK ( he , me [ i ] ) )",
        "for ( int i = 0 ; i < 5 ; ++ i )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    },
    {
      "mod_line": [
        3,
        0,
        11
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;",
        "string he he ;",
        "exit ( ' 0 ' ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    },
    {
      "mod_line": [
        3,
        0,
        11,
        7
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;",
        "string he he ;",
        "exit ( ' 0 ' ) ;",
        "for ( int i = 0 ; i < 5 ; ++ i )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    },
    {
      "mod_line": [
        3,
        0,
        7
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;",
        "string he he ;",
        "for ( int i = 0 ; i < 5 ; ++ i )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;",
        "if ( ! OK ( he , me [ i ] ) )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        9,
        11
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;",
        "if ( ! OK ( he , me [ i ] ) )",
        "exit ( ' 0 ' ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        9,
        11,
        7
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;",
        "if ( ! OK ( he , me [ i ] ) )",
        "exit ( ' 0 ' ) ;",
        "for ( int i = 0 ; i < 5 ; ++ i )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        9,
        7
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;",
        "if ( ! OK ( he , me [ i ] ) )",
        "for ( int i = 0 ; i < 5 ; ++ i )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;",
        "exit ( ' 0 ' ) ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        11,
        7
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;",
        "exit ( ' 0 ' ) ;",
        "for ( int i = 0 ; i < 5 ; ++ i )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "return a [ 0 ] == b [ 0 ] ? a [ 1 ] == b [ 1 ] ;",
        "for ( int i = 0 ; i < 5 ; ++ i )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "string he he ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    },
    {
      "mod_line": [
        7,
        0,
        9
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "string he he ;",
        "if ( ! OK ( he , me [ i ] ) )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    },
    {
      "mod_line": [
        7,
        0,
        9,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "string he he ;",
        "if ( ! OK ( he , me [ i ] ) )",
        "exit ( ' 0 ' ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    },
    {
      "mod_line": [
        7,
        0,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < 5 ; i ++ )",
        "string he he ;",
        "exit ( ' 0 ' ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    },
    {
      "mod_line": [
        0,
        9
      ],
      "mod_code": [
        "string he he ;",
        "if ( ! OK ( he , me [ i ] ) )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    },
    {
      "mod_line": [
        0,
        9,
        11
      ],
      "mod_code": [
        "string he he ;",
        "if ( ! OK ( he , me [ i ] ) )",
        "exit ( ' 0 ' ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    },
    {
      "mod_line": [
        0,
        9,
        11,
        7
      ],
      "mod_code": [
        "string he he ;",
        "if ( ! OK ( he , me [ i ] ) )",
        "exit ( ' 0 ' ) ;",
        "for ( int i = 0 ; i < 5 ; ++ i )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    },
    {
      "mod_line": [
        0,
        9,
        7
      ],
      "mod_code": [
        "string he he ;",
        "if ( ! OK ( he , me [ i ] ) )",
        "for ( int i = 0 ; i < 5 ; ++ i )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "string he he ;",
        "exit ( ' 0 ' ) ;"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    },
    {
      "mod_line": [
        0,
        11,
        7
      ],
      "mod_code": [
        "string he he ;",
        "exit ( ' 0 ' ) ;",
        "for ( int i = 0 ; i < 5 ; ++ i )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    },
    {
      "mod_line": [
        0,
        7
      ],
      "mod_code": [
        "string he he ;",
        "for ( int i = 0 ; i < 5 ; ++ i )"
      ],
      "err_line": 0,
      "err_msg": "expected initializer before ‘he’"
    }
  ]
}