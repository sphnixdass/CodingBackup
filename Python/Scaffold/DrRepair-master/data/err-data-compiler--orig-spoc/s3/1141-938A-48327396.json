{
  "meta": {
    "index": 1141,
    "hitid": "3INZSNUD80KH6JOL3CM0ZA8EH9Z9DO",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "938A",
    "subid": "48327396"
  },
  "lines": [
    {
      "line": 0,
      "text": "mp = map from char to int",
      "code": "map < char , int > mp ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "in the function init that returns void",
      "code": "void init ( )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "index a of mp = 1",
      "code": "mp [ ' a ' ] = 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "index e of mp = 2",
      "code": "mp [ ' e ' ] = 2 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "index i of mp = 3 ;",
      "code": "mp [ ' i ' ] = 3 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "index o of mp = 4",
      "code": "mp [ ' o ' ] = 4 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "index u of mp = 5",
      "code": "mp [ ' u ' ] = 5 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "index y of mp = 6",
      "code": "mp [ ' y ' ] = 6 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 10,
      "text": "call init",
      "code": "init ( ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "read n and s",
      "code": "cin >> n >> s ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = o to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if mp [ s [ i ] ] and mp [ s [ i + 1 ] ]",
      "code": "if ( mp [ s [ i ] ] && mp [ s [ i + 1 ] ] )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "for j = i + 1 to n exclusive , s [ j ] = s [ j + 1 ]",
      "code": "for ( int j = i + 1 ; j < n ; j ++ ) { s [ j ] = s [ j + 1 ] ; }",
      "indent": 3
    },
    {
      "line": 17,
      "text": "erase s . end ( ) - 1 from s",
      "code": "s . erase ( s . end ( ) - 1 ) ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "decrement i",
      "code": "i -- ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "decrement n",
      "code": "n -- ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print s",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int * mp = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int e ( mp , mp ) ;"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "mp [ i ] = 3 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int * mp = 4 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "mp = min ( mp = 5 ) ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<char, int>’ and ‘int’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int * mp = 6 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 14,
      "err_msg": "‘o’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "map < char = int > mp ;"
      ],
      "err_line": 0,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "void init ( ) { }"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int * a = 1 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "e . push ( mp ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘e’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int * i = 3 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "mp . push ( 4 ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘class std::map<char, int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "mp . push ( mp ) ;"
      ],
      "err_line": 6,
      "err_msg": "‘class std::map<char, int>’ has no member named ‘push’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int * y = 6 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "return init ( ) ;"
      ],
      "err_line": 10,
      "err_msg": "void value not ignored as it ought to be"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 15,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "s . erase ( s . end ( ) - 1 , 1 ) ;"
      ],
      "err_line": 17,
      "err_msg": "no matching function for call to ‘std::__cxx11::basic_string<char>::erase(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >, int)’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int e ( mp , mp ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        4
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int e ( mp , mp ) ;",
        "mp [ i ] = 3 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        5
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int e ( mp , mp ) ;",
        "mp [ i ] = 3 ;",
        "int * mp = 4 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        6
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int e ( mp , mp ) ;",
        "mp [ i ] = 3 ;",
        "mp = min ( mp = 5 ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        7
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int e ( mp , mp ) ;",
        "mp [ i ] = 3 ;",
        "int * mp = 6 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        14
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int e ( mp , mp ) ;",
        "mp [ i ] = 3 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        5
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int e ( mp , mp ) ;",
        "int * mp = 4 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        6
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int e ( mp , mp ) ;",
        "int * mp = 4 ;",
        "mp = min ( mp = 5 ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        7
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int e ( mp , mp ) ;",
        "int * mp = 4 ;",
        "int * mp = 6 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        5,
        14
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int e ( mp , mp ) ;",
        "int * mp = 4 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        6
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int e ( mp , mp ) ;",
        "mp = min ( mp = 5 ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        7
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int e ( mp , mp ) ;",
        "mp = min ( mp = 5 ) ;",
        "int * mp = 6 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        6,
        14
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int e ( mp , mp ) ;",
        "mp = min ( mp = 5 ) ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        7
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int e ( mp , mp ) ;",
        "int * mp = 6 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        7,
        14
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int e ( mp , mp ) ;",
        "int * mp = 6 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3,
        14
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int e ( mp , mp ) ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "mp [ i ] = 3 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4,
        5
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "mp [ i ] = 3 ;",
        "int * mp = 4 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        6
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "mp [ i ] = 3 ;",
        "int * mp = 4 ;",
        "mp = min ( mp = 5 ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        7
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "mp [ i ] = 3 ;",
        "int * mp = 4 ;",
        "int * mp = 6 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        14
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "mp [ i ] = 3 ;",
        "int * mp = 4 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4,
        6
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "mp [ i ] = 3 ;",
        "mp = min ( mp = 5 ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        7
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "mp [ i ] = 3 ;",
        "mp = min ( mp = 5 ) ;",
        "int * mp = 6 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4,
        6,
        14
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "mp [ i ] = 3 ;",
        "mp = min ( mp = 5 ) ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4,
        7
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "mp [ i ] = 3 ;",
        "int * mp = 6 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4,
        7,
        14
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "mp [ i ] = 3 ;",
        "int * mp = 6 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        4,
        14
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "mp [ i ] = 3 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int * mp = 4 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5,
        6
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int * mp = 4 ;",
        "mp = min ( mp = 5 ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        7
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int * mp = 4 ;",
        "mp = min ( mp = 5 ) ;",
        "int * mp = 6 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5,
        6,
        14
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int * mp = 4 ;",
        "mp = min ( mp = 5 ) ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5,
        7
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int * mp = 4 ;",
        "int * mp = 6 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5,
        7,
        14
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int * mp = 4 ;",
        "int * mp = 6 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        5,
        14
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int * mp = 4 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "mp = min ( mp = 5 ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        7
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "mp = min ( mp = 5 ) ;",
        "int * mp = 6 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        7,
        14
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "mp = min ( mp = 5 ) ;",
        "int * mp = 6 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        14
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "mp = min ( mp = 5 ) ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int * mp = 6 ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        7,
        14
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "int * mp = 6 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "int * mp = 1 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "mp [ i ] = 3 ;"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        5
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "mp [ i ] = 3 ;",
        "int * mp = 4 ;"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        6
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "mp [ i ] = 3 ;",
        "int * mp = 4 ;",
        "mp = min ( mp = 5 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        7
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "mp [ i ] = 3 ;",
        "int * mp = 4 ;",
        "int * mp = 6 ;"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        5,
        14
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "mp [ i ] = 3 ;",
        "int * mp = 4 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        6
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "mp [ i ] = 3 ;",
        "mp = min ( mp = 5 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        7
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "mp [ i ] = 3 ;",
        "mp = min ( mp = 5 ) ;",
        "int * mp = 6 ;"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        6,
        14
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "mp [ i ] = 3 ;",
        "mp = min ( mp = 5 ) ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        7
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "mp [ i ] = 3 ;",
        "int * mp = 6 ;"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        14
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "mp [ i ] = 3 ;",
        "int * mp = 6 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        4,
        14
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "mp [ i ] = 3 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "int * mp = 4 ;"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        6
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "int * mp = 4 ;",
        "mp = min ( mp = 5 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        7
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "int * mp = 4 ;",
        "mp = min ( mp = 5 ) ;",
        "int * mp = 6 ;"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        6,
        14
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "int * mp = 4 ;",
        "mp = min ( mp = 5 ) ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        7
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "int * mp = 4 ;",
        "int * mp = 6 ;"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        7,
        14
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "int * mp = 4 ;",
        "int * mp = 6 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        5,
        14
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "int * mp = 4 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "mp = min ( mp = 5 ) ;"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        6,
        7
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "mp = min ( mp = 5 ) ;",
        "int * mp = 6 ;"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        6,
        7,
        14
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "mp = min ( mp = 5 ) ;",
        "int * mp = 6 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        6,
        14
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "mp = min ( mp = 5 ) ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "int * mp = 6 ;"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        7,
        14
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "int * mp = 6 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "int e ( mp , mp ) ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expression list treated as compound expression in initializer [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "mp [ i ] = 3 ;",
        "int * mp = 4 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        6
      ],
      "mod_code": [
        "mp [ i ] = 3 ;",
        "int * mp = 4 ;",
        "mp = min ( mp = 5 ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        7
      ],
      "mod_code": [
        "mp [ i ] = 3 ;",
        "int * mp = 4 ;",
        "mp = min ( mp = 5 ) ;",
        "int * mp = 6 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        6,
        14
      ],
      "mod_code": [
        "mp [ i ] = 3 ;",
        "int * mp = 4 ;",
        "mp = min ( mp = 5 ) ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        7
      ],
      "mod_code": [
        "mp [ i ] = 3 ;",
        "int * mp = 4 ;",
        "int * mp = 6 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        14
      ],
      "mod_code": [
        "mp [ i ] = 3 ;",
        "int * mp = 4 ;",
        "int * mp = 6 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        5,
        14
      ],
      "mod_code": [
        "mp [ i ] = 3 ;",
        "int * mp = 4 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "mp [ i ] = 3 ;",
        "mp = min ( mp = 5 ) ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        7
      ],
      "mod_code": [
        "mp [ i ] = 3 ;",
        "mp = min ( mp = 5 ) ;",
        "int * mp = 6 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        7,
        14
      ],
      "mod_code": [
        "mp [ i ] = 3 ;",
        "mp = min ( mp = 5 ) ;",
        "int * mp = 6 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6,
        14
      ],
      "mod_code": [
        "mp [ i ] = 3 ;",
        "mp = min ( mp = 5 ) ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "mp [ i ] = 3 ;",
        "int * mp = 6 ;"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        14
      ],
      "mod_code": [
        "mp [ i ] = 3 ;",
        "int * mp = 6 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        14
      ],
      "mod_code": [
        "mp [ i ] = 3 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 4,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "int * mp = 4 ;",
        "mp = min ( mp = 5 ) ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        7
      ],
      "mod_code": [
        "int * mp = 4 ;",
        "mp = min ( mp = 5 ) ;",
        "int * mp = 6 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        7,
        14
      ],
      "mod_code": [
        "int * mp = 4 ;",
        "mp = min ( mp = 5 ) ;",
        "int * mp = 6 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        6,
        14
      ],
      "mod_code": [
        "int * mp = 4 ;",
        "mp = min ( mp = 5 ) ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "int * mp = 4 ;",
        "int * mp = 6 ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        7,
        14
      ],
      "mod_code": [
        "int * mp = 4 ;",
        "int * mp = 6 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        14
      ],
      "mod_code": [
        "int * mp = 4 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "mp = min ( mp = 5 ) ;",
        "int * mp = 6 ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<char, int>’ and ‘int’)"
    },
    {
      "mod_line": [
        6,
        7,
        14
      ],
      "mod_code": [
        "mp = min ( mp = 5 ) ;",
        "int * mp = 6 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<char, int>’ and ‘int’)"
    },
    {
      "mod_line": [
        6,
        14
      ],
      "mod_code": [
        "mp = min ( mp = 5 ) ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator=’ (operand types are ‘std::map<char, int>’ and ‘int’)"
    },
    {
      "mod_line": [
        7,
        14
      ],
      "mod_code": [
        "int * mp = 6 ;",
        "for ( int i = o ; i < n ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘int’ to ‘int*’ [-fpermissive]"
    }
  ]
}