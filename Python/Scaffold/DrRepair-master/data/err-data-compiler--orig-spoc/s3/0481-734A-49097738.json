{
  "meta": {
    "index": 481,
    "hitid": "3R15W654VDN6WUTZXVVA4I680I3LQ0",
    "workerid": "AIWEXPJAU66D9",
    "probid": "734A",
    "subid": "49097738"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare string variable s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare integer variables a , d and n with a and d = 0",
      "code": "int a = 0 , d = 0 , n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create character c",
      "code": "char c ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "create stringstream ss with s as a content",
      "code": "stringstream ss ( s ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read characters from ss to c in a loop",
      "code": "while ( ss >> c )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "increment a if c = ' A '",
      "code": "if ( c == ' A ' ) a ++ ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment d if c = ' D '",
      "code": "if ( c == ' D ' ) d ++ ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if a = d",
      "code": "if ( a == d )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print \" Friendship \"",
      "code": "cout << \" Friendship \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if a is greater than d",
      "code": "if ( a > d )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "print \" Anton \"",
      "code": "cout << \" Anton \" << endl ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 17,
      "text": "print \" Danik \"",
      "code": "cout << \" Danik \" << endl ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "stringstream ss ( a ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘std::ios_base::openmode {aka std::_Ios_Openmode}’ [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "while ( cin >> ss )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::stringstream {aka std::__cxx11::basic_stringstream<char>}’)"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘std::ios_base::openmode {aka std::_Ios_Openmode}’ [-fpermissive]"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘char s’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 5,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "stringstream ss ( a ) ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        6,
        7
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "stringstream ss ( a ) ;",
        "while ( cin >> ss )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        6,
        7,
        15
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "stringstream ss ( a ) ;",
        "while ( cin >> ss )",
        "cout << \" Anton \" ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        6,
        7,
        17
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "stringstream ss ( a ) ;",
        "while ( cin >> ss )",
        "cout << \" Danik \" ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        6,
        7,
        11
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "stringstream ss ( a ) ;",
        "while ( cin >> ss )",
        "if ( ! a )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        6,
        15
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "stringstream ss ( a ) ;",
        "cout << \" Anton \" ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        6,
        15,
        17
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "stringstream ss ( a ) ;",
        "cout << \" Anton \" ;",
        "cout << \" Danik \" ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        6,
        15,
        11
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "stringstream ss ( a ) ;",
        "cout << \" Anton \" ;",
        "if ( ! a )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        6,
        17
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "stringstream ss ( a ) ;",
        "cout << \" Danik \" ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        6,
        17,
        11
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "stringstream ss ( a ) ;",
        "cout << \" Danik \" ;",
        "if ( ! a )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        6,
        11
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "stringstream ss ( a ) ;",
        "if ( ! a )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "while ( cin >> ss )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        7,
        15
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "while ( cin >> ss )",
        "cout << \" Anton \" ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        7,
        15,
        17
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "while ( cin >> ss )",
        "cout << \" Anton \" ;",
        "cout << \" Danik \" ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        7,
        15,
        11
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "while ( cin >> ss )",
        "cout << \" Anton \" ;",
        "if ( ! a )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        7,
        17
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "while ( cin >> ss )",
        "cout << \" Danik \" ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        7,
        17,
        11
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "while ( cin >> ss )",
        "cout << \" Danik \" ;",
        "if ( ! a )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        7,
        11
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "while ( cin >> ss )",
        "if ( ! a )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "cout << \" Anton \" ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        15,
        17
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "cout << \" Anton \" ;",
        "cout << \" Danik \" ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        15,
        17,
        11
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "cout << \" Anton \" ;",
        "cout << \" Danik \" ;",
        "if ( ! a )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        15,
        11
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "cout << \" Anton \" ;",
        "if ( ! a )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        17
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "cout << \" Danik \" ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        17,
        11
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "cout << \" Danik \" ;",
        "if ( ! a )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "int a , d = 0 , d = 0 ;",
        "if ( ! a )"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "stringstream ss ( a ) ;",
        "while ( cin >> ss )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘std::ios_base::openmode {aka std::_Ios_Openmode}’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        15
      ],
      "mod_code": [
        "stringstream ss ( a ) ;",
        "while ( cin >> ss )",
        "cout << \" Anton \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘std::ios_base::openmode {aka std::_Ios_Openmode}’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        15,
        17
      ],
      "mod_code": [
        "stringstream ss ( a ) ;",
        "while ( cin >> ss )",
        "cout << \" Anton \" ;",
        "cout << \" Danik \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘std::ios_base::openmode {aka std::_Ios_Openmode}’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        15,
        11
      ],
      "mod_code": [
        "stringstream ss ( a ) ;",
        "while ( cin >> ss )",
        "cout << \" Anton \" ;",
        "if ( ! a )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘std::ios_base::openmode {aka std::_Ios_Openmode}’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        17
      ],
      "mod_code": [
        "stringstream ss ( a ) ;",
        "while ( cin >> ss )",
        "cout << \" Danik \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘std::ios_base::openmode {aka std::_Ios_Openmode}’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        17,
        11
      ],
      "mod_code": [
        "stringstream ss ( a ) ;",
        "while ( cin >> ss )",
        "cout << \" Danik \" ;",
        "if ( ! a )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘std::ios_base::openmode {aka std::_Ios_Openmode}’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        11
      ],
      "mod_code": [
        "stringstream ss ( a ) ;",
        "while ( cin >> ss )",
        "if ( ! a )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘std::ios_base::openmode {aka std::_Ios_Openmode}’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "stringstream ss ( a ) ;",
        "cout << \" Anton \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘std::ios_base::openmode {aka std::_Ios_Openmode}’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        15,
        17
      ],
      "mod_code": [
        "stringstream ss ( a ) ;",
        "cout << \" Anton \" ;",
        "cout << \" Danik \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘std::ios_base::openmode {aka std::_Ios_Openmode}’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        15,
        17,
        11
      ],
      "mod_code": [
        "stringstream ss ( a ) ;",
        "cout << \" Anton \" ;",
        "cout << \" Danik \" ;",
        "if ( ! a )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘std::ios_base::openmode {aka std::_Ios_Openmode}’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        15,
        11
      ],
      "mod_code": [
        "stringstream ss ( a ) ;",
        "cout << \" Anton \" ;",
        "if ( ! a )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘std::ios_base::openmode {aka std::_Ios_Openmode}’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "stringstream ss ( a ) ;",
        "cout << \" Danik \" ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘std::ios_base::openmode {aka std::_Ios_Openmode}’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        17,
        11
      ],
      "mod_code": [
        "stringstream ss ( a ) ;",
        "cout << \" Danik \" ;",
        "if ( ! a )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘std::ios_base::openmode {aka std::_Ios_Openmode}’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "stringstream ss ( a ) ;",
        "if ( ! a )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘int’ to ‘std::ios_base::openmode {aka std::_Ios_Openmode}’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        15
      ],
      "mod_code": [
        "while ( cin >> ss )",
        "cout << \" Anton \" ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::stringstream {aka std::__cxx11::basic_stringstream<char>}’)"
    },
    {
      "mod_line": [
        7,
        15,
        17
      ],
      "mod_code": [
        "while ( cin >> ss )",
        "cout << \" Anton \" ;",
        "cout << \" Danik \" ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::stringstream {aka std::__cxx11::basic_stringstream<char>}’)"
    },
    {
      "mod_line": [
        7,
        15,
        17,
        11
      ],
      "mod_code": [
        "while ( cin >> ss )",
        "cout << \" Anton \" ;",
        "cout << \" Danik \" ;",
        "if ( ! a )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::stringstream {aka std::__cxx11::basic_stringstream<char>}’)"
    },
    {
      "mod_line": [
        7,
        15,
        11
      ],
      "mod_code": [
        "while ( cin >> ss )",
        "cout << \" Anton \" ;",
        "if ( ! a )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::stringstream {aka std::__cxx11::basic_stringstream<char>}’)"
    },
    {
      "mod_line": [
        7,
        17
      ],
      "mod_code": [
        "while ( cin >> ss )",
        "cout << \" Danik \" ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::stringstream {aka std::__cxx11::basic_stringstream<char>}’)"
    },
    {
      "mod_line": [
        7,
        17,
        11
      ],
      "mod_code": [
        "while ( cin >> ss )",
        "cout << \" Danik \" ;",
        "if ( ! a )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::stringstream {aka std::__cxx11::basic_stringstream<char>}’)"
    },
    {
      "mod_line": [
        7,
        11
      ],
      "mod_code": [
        "while ( cin >> ss )",
        "if ( ! a )"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::stringstream {aka std::__cxx11::basic_stringstream<char>}’)"
    }
  ]
}