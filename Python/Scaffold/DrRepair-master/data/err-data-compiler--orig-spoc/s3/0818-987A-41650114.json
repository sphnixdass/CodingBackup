{
  "meta": {
    "index": 818,
    "hitid": "35O6H0UNLSAB8IM1AIVUQSYP1K95JE",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "987A",
    "subid": "41650114"
  },
  "lines": [
    {
      "line": 0,
      "text": "q = string , int map",
      "code": "map < string , int > q ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string array of size 7",
      "code": "string s [ 7 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "ss = string",
      "code": "string ss ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set q [ \" purple \" ] to 1",
      "code": "q [ \" purple \" ] = 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set q [ \" green \" ] to 2",
      "code": "q [ \" green \" ] = 2 ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set q [ \" blue \" ] to 3",
      "code": "q [ \" blue \" ] = 3 ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "set q [ \" orange \" ] to 4",
      "code": "q [ \" orange \" ] = 4 ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "set q [ \" red \" ] to 5",
      "code": "q [ \" red \" ] = 5 ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "set q [ \" yellow \" ] to 6",
      "code": "q [ \" yellow \" ] = 6 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "set s [ 1 ] to \" Power \"",
      "code": "s [ 1 ] = \" Power \" ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "set s [ 2 ] to \" Time \"",
      "code": "s [ 2 ] = \" Time \" ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "set s [ 3 ] to \" Space \"",
      "code": "s [ 3 ] = \" Space \" ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "set s [ 4 ] to \" Soul \"",
      "code": "s [ 4 ] = \" Soul \" ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "set s [ 5 ] to \" Reality \"",
      "code": "s [ 5 ] = \" Reality \" ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "set s [ 6 ] to \" Mind \"",
      "code": "s [ 6 ] = \" Mind \" ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "cont = int with cont = 6",
      "code": "int cont = 6 ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "loop n times",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 20,
      "text": "read ss",
      "code": "cin >> ss ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if q [ ss ] is not 0",
      "code": "if ( q [ ss ] != 0 )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "set q [ ss ] to 0",
      "code": "q [ ss ] = 0 ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "decrement cont",
      "code": "cont -- ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "print cont",
      "code": "cout << cont << endl ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "if q [ \" purple \" ] is not 0 print s [ 1 ]",
      "code": "if ( q [ \" purple \" ] != 0 ) cout << s [ 1 ] << endl ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "if q [ \" green \" ] is not 0 print s [ 2 ]",
      "code": "if ( q [ \" green \" ] != 0 ) cout << s [ 2 ] << endl ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "if q [ \" blue \" ] is not 0 print s [ 3 ]",
      "code": "if ( q [ \" blue \" ] != 0 ) cout << s [ 3 ] << endl ;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "if q [ \" orange \" ] is not 0 print s [ 4 ]",
      "code": "if ( q [ \" orange \" ] != 0 ) cout << s [ 4 ] << endl ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "if q [ \" red \" ] is not 0 print s [ 5 ]",
      "code": "if ( q [ \" red \" ] != 0 ) cout << s [ 5 ] << endl ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "if q [ \" yellow \" ] is not 0 print s [ 6 ]",
      "code": "if ( q [ \" yellow \" ] != 0 ) cout << s [ 6 ] << endl ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "map < int , int > q ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int s [ 7 ] ;"
      ],
      "err_line": 12,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char ss ;"
      ],
      "err_line": 21,
      "err_msg": "no match for ‘operator[]’ (operand types are ‘std::map<std::__cxx11::basic_string<char>, int>’ and ‘char’)"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 5,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "q [ \" purple ' ] = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "q [ \" green ' ] = 2 ;"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "q [ \" blue ' ] = 3 ;"
      ],
      "err_line": 8,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "q [ \" orange ' ] = 4 ;"
      ],
      "err_line": 9,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "q [ \" red ' ] = 5 ;"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "q [ \" yellow ' ] = 6 ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "s [ 1 ] = ' Power \" ;"
      ],
      "err_line": 12,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "s [ 2 ] = ' Time \" ;"
      ],
      "err_line": 13,
      "err_msg": "missing terminating ' character"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "s [ 3 ++ ] = \" Space \" ;"
      ],
      "err_line": 14,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "s [ 4 ++ ] = \" Soul \" ;"
      ],
      "err_line": 15,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "s [ 5 ++ ] = \" Reality \" ;"
      ],
      "err_line": 16,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "s [ 6 ++ ] = \" Mind \" ;"
      ],
      "err_line": 17,
      "err_msg": "lvalue required as increment operand"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "bool cont = 6 ;"
      ],
      "err_line": 23,
      "err_msg": "invalid use of Boolean expression as operand to ‘operator--’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "ss >> ss ;"
      ],
      "err_line": 20,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        0,
        27
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" purple \" ] != 0 ) cout << s [ 1 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27,
        28
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" purple \" ] != 0 ) cout << s [ 1 ] ;",
        "if ( q [ \" green \" ] != 0 ) cout << s [ 2 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27,
        28,
        29
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" purple \" ] != 0 ) cout << s [ 1 ] ;",
        "if ( q [ \" green \" ] != 0 ) cout << s [ 2 ] ;",
        "if ( q [ \" blue \" ] != 0 ) cout << s [ 3 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27,
        28,
        30
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" purple \" ] != 0 ) cout << s [ 1 ] ;",
        "if ( q [ \" green \" ] != 0 ) cout << s [ 2 ] ;",
        "if ( q [ \" orange \" ] != 0 ) cout << s [ 4 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27,
        28,
        31
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" purple \" ] != 0 ) cout << s [ 1 ] ;",
        "if ( q [ \" green \" ] != 0 ) cout << s [ 2 ] ;",
        "if ( q [ \" red \" ] != 0 ) cout << s [ 5 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27,
        28,
        32
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" purple \" ] != 0 ) cout << s [ 1 ] ;",
        "if ( q [ \" green \" ] != 0 ) cout << s [ 2 ] ;",
        "if ( q [ \" yellow \" ] != 0 ) cout << s [ 6 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27,
        29
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" purple \" ] != 0 ) cout << s [ 1 ] ;",
        "if ( q [ \" blue \" ] != 0 ) cout << s [ 3 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27,
        29,
        30
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" purple \" ] != 0 ) cout << s [ 1 ] ;",
        "if ( q [ \" blue \" ] != 0 ) cout << s [ 3 ] ;",
        "if ( q [ \" orange \" ] != 0 ) cout << s [ 4 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27,
        29,
        31
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" purple \" ] != 0 ) cout << s [ 1 ] ;",
        "if ( q [ \" blue \" ] != 0 ) cout << s [ 3 ] ;",
        "if ( q [ \" red \" ] != 0 ) cout << s [ 5 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27,
        29,
        32
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" purple \" ] != 0 ) cout << s [ 1 ] ;",
        "if ( q [ \" blue \" ] != 0 ) cout << s [ 3 ] ;",
        "if ( q [ \" yellow \" ] != 0 ) cout << s [ 6 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27,
        30
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" purple \" ] != 0 ) cout << s [ 1 ] ;",
        "if ( q [ \" orange \" ] != 0 ) cout << s [ 4 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27,
        30,
        31
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" purple \" ] != 0 ) cout << s [ 1 ] ;",
        "if ( q [ \" orange \" ] != 0 ) cout << s [ 4 ] ;",
        "if ( q [ \" red \" ] != 0 ) cout << s [ 5 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27,
        30,
        32
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" purple \" ] != 0 ) cout << s [ 1 ] ;",
        "if ( q [ \" orange \" ] != 0 ) cout << s [ 4 ] ;",
        "if ( q [ \" yellow \" ] != 0 ) cout << s [ 6 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27,
        31
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" purple \" ] != 0 ) cout << s [ 1 ] ;",
        "if ( q [ \" red \" ] != 0 ) cout << s [ 5 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27,
        31,
        32
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" purple \" ] != 0 ) cout << s [ 1 ] ;",
        "if ( q [ \" red \" ] != 0 ) cout << s [ 5 ] ;",
        "if ( q [ \" yellow \" ] != 0 ) cout << s [ 6 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        27,
        32
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" purple \" ] != 0 ) cout << s [ 1 ] ;",
        "if ( q [ \" yellow \" ] != 0 ) cout << s [ 6 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        28
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" green \" ] != 0 ) cout << s [ 2 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        28,
        29
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" green \" ] != 0 ) cout << s [ 2 ] ;",
        "if ( q [ \" blue \" ] != 0 ) cout << s [ 3 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        28,
        29,
        30
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" green \" ] != 0 ) cout << s [ 2 ] ;",
        "if ( q [ \" blue \" ] != 0 ) cout << s [ 3 ] ;",
        "if ( q [ \" orange \" ] != 0 ) cout << s [ 4 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        28,
        29,
        31
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" green \" ] != 0 ) cout << s [ 2 ] ;",
        "if ( q [ \" blue \" ] != 0 ) cout << s [ 3 ] ;",
        "if ( q [ \" red \" ] != 0 ) cout << s [ 5 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        28,
        29,
        32
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" green \" ] != 0 ) cout << s [ 2 ] ;",
        "if ( q [ \" blue \" ] != 0 ) cout << s [ 3 ] ;",
        "if ( q [ \" yellow \" ] != 0 ) cout << s [ 6 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        28,
        30
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" green \" ] != 0 ) cout << s [ 2 ] ;",
        "if ( q [ \" orange \" ] != 0 ) cout << s [ 4 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        28,
        30,
        31
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" green \" ] != 0 ) cout << s [ 2 ] ;",
        "if ( q [ \" orange \" ] != 0 ) cout << s [ 4 ] ;",
        "if ( q [ \" red \" ] != 0 ) cout << s [ 5 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        28,
        30,
        32
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" green \" ] != 0 ) cout << s [ 2 ] ;",
        "if ( q [ \" orange \" ] != 0 ) cout << s [ 4 ] ;",
        "if ( q [ \" yellow \" ] != 0 ) cout << s [ 6 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        28,
        31
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" green \" ] != 0 ) cout << s [ 2 ] ;",
        "if ( q [ \" red \" ] != 0 ) cout << s [ 5 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        28,
        31,
        32
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" green \" ] != 0 ) cout << s [ 2 ] ;",
        "if ( q [ \" red \" ] != 0 ) cout << s [ 5 ] ;",
        "if ( q [ \" yellow \" ] != 0 ) cout << s [ 6 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        28,
        32
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" green \" ] != 0 ) cout << s [ 2 ] ;",
        "if ( q [ \" yellow \" ] != 0 ) cout << s [ 6 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        29
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" blue \" ] != 0 ) cout << s [ 3 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        29,
        30
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" blue \" ] != 0 ) cout << s [ 3 ] ;",
        "if ( q [ \" orange \" ] != 0 ) cout << s [ 4 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        29,
        30,
        31
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" blue \" ] != 0 ) cout << s [ 3 ] ;",
        "if ( q [ \" orange \" ] != 0 ) cout << s [ 4 ] ;",
        "if ( q [ \" red \" ] != 0 ) cout << s [ 5 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        29,
        30,
        32
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" blue \" ] != 0 ) cout << s [ 3 ] ;",
        "if ( q [ \" orange \" ] != 0 ) cout << s [ 4 ] ;",
        "if ( q [ \" yellow \" ] != 0 ) cout << s [ 6 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        29,
        31
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" blue \" ] != 0 ) cout << s [ 3 ] ;",
        "if ( q [ \" red \" ] != 0 ) cout << s [ 5 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        29,
        31,
        32
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" blue \" ] != 0 ) cout << s [ 3 ] ;",
        "if ( q [ \" red \" ] != 0 ) cout << s [ 5 ] ;",
        "if ( q [ \" yellow \" ] != 0 ) cout << s [ 6 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        29,
        32
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" blue \" ] != 0 ) cout << s [ 3 ] ;",
        "if ( q [ \" yellow \" ] != 0 ) cout << s [ 6 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        30
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" orange \" ] != 0 ) cout << s [ 4 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        30,
        31
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" orange \" ] != 0 ) cout << s [ 4 ] ;",
        "if ( q [ \" red \" ] != 0 ) cout << s [ 5 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        30,
        31,
        32
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" orange \" ] != 0 ) cout << s [ 4 ] ;",
        "if ( q [ \" red \" ] != 0 ) cout << s [ 5 ] ;",
        "if ( q [ \" yellow \" ] != 0 ) cout << s [ 6 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        30,
        32
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" orange \" ] != 0 ) cout << s [ 4 ] ;",
        "if ( q [ \" yellow \" ] != 0 ) cout << s [ 6 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        31
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" red \" ] != 0 ) cout << s [ 5 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        31,
        32
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" red \" ] != 0 ) cout << s [ 5 ] ;",
        "if ( q [ \" yellow \" ] != 0 ) cout << s [ 6 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        32
      ],
      "mod_code": [
        "map < int , int > q ;",
        "if ( q [ \" yellow \" ] != 0 ) cout << s [ 6 ] ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘const char*’ to ‘std::map<int, int>::key_type {aka int}’ [-fpermissive]"
    }
  ]
}