{
  "meta": {
    "index": 2677,
    "hitid": "3MQKOF1EE2ISIF1TWNWSDUGPGXKWDC",
    "workerid": "AIWEXPJAU66D9",
    "probid": "785A",
    "subid": "48981757"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare int variables n and r where r = 0",
      "code": "int n , r = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "declare new string called s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read char from the input",
      "code": "getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while n ! = 0 , decrement it and continue the loop",
      "code": "while ( n -- )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read data from the input and put it into s",
      "code": "getline ( cin , s ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if s = \" Tetrahedron \"",
      "code": "if ( s == \" Tetrahedron \" )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set r to r + 4",
      "code": "r = r + 4 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else if s is equal to \" Cube \"",
      "code": "else if ( s == \" Cube \" )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "assign r + 6 to r",
      "code": "r = r + 6 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if s = \" Octahedron \"",
      "code": "else if ( s == \" Octahedron \" )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "assign the new value = r + 8 to r",
      "code": "r = r + 8 ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else if s is equal to \" Dodecahedron \"",
      "code": "else if ( s == \" Dodecahedron \" )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "change r to r + 12",
      "code": "r = r + 12 ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else if s = \" Icosahedron \"",
      "code": "else if ( s == \" Icosahedron \" )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "set r to r + 20",
      "code": "r = r + 20 ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "print r",
      "code": "cout << r << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string s called ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "gets ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "while ( -- n -- )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "gets ( cin , s ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid user-defined conversion from ‘std::istream {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "gets ( ) ;",
        "string s called ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        4,
        2,
        7
      ],
      "mod_code": [
        "gets ( ) ;",
        "string s called ;",
        "if ( s == \" [] \" )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        4,
        2,
        7,
        15
      ],
      "mod_code": [
        "gets ( ) ;",
        "string s called ;",
        "if ( s == \" [] \" )",
        "else if ( s == \" [] \" )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        4,
        2,
        7,
        3
      ],
      "mod_code": [
        "gets ( ) ;",
        "string s called ;",
        "if ( s == \" [] \" )",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        4,
        2,
        7,
        6
      ],
      "mod_code": [
        "gets ( ) ;",
        "string s called ;",
        "if ( s == \" [] \" )",
        "gets ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        4,
        2,
        15
      ],
      "mod_code": [
        "gets ( ) ;",
        "string s called ;",
        "else if ( s == \" [] \" )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        4,
        2,
        15,
        3
      ],
      "mod_code": [
        "gets ( ) ;",
        "string s called ;",
        "else if ( s == \" [] \" )",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        4,
        2,
        15,
        6
      ],
      "mod_code": [
        "gets ( ) ;",
        "string s called ;",
        "else if ( s == \" [] \" )",
        "gets ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        4,
        2,
        3
      ],
      "mod_code": [
        "gets ( ) ;",
        "string s called ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        4,
        2,
        3,
        6
      ],
      "mod_code": [
        "gets ( ) ;",
        "string s called ;",
        "cin >> N ;",
        "gets ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        4,
        2,
        6
      ],
      "mod_code": [
        "gets ( ) ;",
        "string s called ;",
        "gets ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "gets ( ) ;",
        "if ( s == \" [] \" )"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        7,
        15
      ],
      "mod_code": [
        "gets ( ) ;",
        "if ( s == \" [] \" )",
        "else if ( s == \" [] \" )"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        7,
        15,
        3
      ],
      "mod_code": [
        "gets ( ) ;",
        "if ( s == \" [] \" )",
        "else if ( s == \" [] \" )",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        15,
        6
      ],
      "mod_code": [
        "gets ( ) ;",
        "if ( s == \" [] \" )",
        "else if ( s == \" [] \" )",
        "gets ( cin , s ) ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        7,
        3
      ],
      "mod_code": [
        "gets ( ) ;",
        "if ( s == \" [] \" )",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        3,
        6
      ],
      "mod_code": [
        "gets ( ) ;",
        "if ( s == \" [] \" )",
        "cin >> N ;",
        "gets ( cin , s ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7,
        6
      ],
      "mod_code": [
        "gets ( ) ;",
        "if ( s == \" [] \" )",
        "gets ( cin , s ) ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        15
      ],
      "mod_code": [
        "gets ( ) ;",
        "else if ( s == \" [] \" )"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        15,
        3
      ],
      "mod_code": [
        "gets ( ) ;",
        "else if ( s == \" [] \" )",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        15,
        3,
        6
      ],
      "mod_code": [
        "gets ( ) ;",
        "else if ( s == \" [] \" )",
        "cin >> N ;",
        "gets ( cin , s ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        15,
        6
      ],
      "mod_code": [
        "gets ( ) ;",
        "else if ( s == \" [] \" )",
        "gets ( cin , s ) ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "gets ( ) ;",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3,
        6
      ],
      "mod_code": [
        "gets ( ) ;",
        "cin >> N ;",
        "gets ( cin , s ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "gets ( ) ;",
        "gets ( cin , s ) ;"
      ],
      "err_line": 4,
      "err_msg": "too few arguments to function ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "string s called ;",
        "if ( s == \" [] \" )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        2,
        7,
        15
      ],
      "mod_code": [
        "string s called ;",
        "if ( s == \" [] \" )",
        "else if ( s == \" [] \" )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        2,
        7,
        15,
        3
      ],
      "mod_code": [
        "string s called ;",
        "if ( s == \" [] \" )",
        "else if ( s == \" [] \" )",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        2,
        7,
        15,
        6
      ],
      "mod_code": [
        "string s called ;",
        "if ( s == \" [] \" )",
        "else if ( s == \" [] \" )",
        "gets ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        2,
        7,
        3
      ],
      "mod_code": [
        "string s called ;",
        "if ( s == \" [] \" )",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        2,
        7,
        3,
        6
      ],
      "mod_code": [
        "string s called ;",
        "if ( s == \" [] \" )",
        "cin >> N ;",
        "gets ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        2,
        7,
        6
      ],
      "mod_code": [
        "string s called ;",
        "if ( s == \" [] \" )",
        "gets ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "string s called ;",
        "else if ( s == \" [] \" )"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        2,
        15,
        3
      ],
      "mod_code": [
        "string s called ;",
        "else if ( s == \" [] \" )",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        2,
        15,
        3,
        6
      ],
      "mod_code": [
        "string s called ;",
        "else if ( s == \" [] \" )",
        "cin >> N ;",
        "gets ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        2,
        15,
        6
      ],
      "mod_code": [
        "string s called ;",
        "else if ( s == \" [] \" )",
        "gets ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "string s called ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        2,
        3,
        6
      ],
      "mod_code": [
        "string s called ;",
        "cin >> N ;",
        "gets ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "string s called ;",
        "gets ( cin , s ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected initializer before ‘called’"
    },
    {
      "mod_line": [
        7,
        15,
        3
      ],
      "mod_code": [
        "if ( s == \" [] \" )",
        "else if ( s == \" [] \" )",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        15,
        3,
        6
      ],
      "mod_code": [
        "if ( s == \" [] \" )",
        "else if ( s == \" [] \" )",
        "cin >> N ;",
        "gets ( cin , s ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        15,
        6
      ],
      "mod_code": [
        "if ( s == \" [] \" )",
        "else if ( s == \" [] \" )",
        "gets ( cin , s ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid user-defined conversion from ‘std::istream {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "if ( s == \" [] \" )",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        3,
        6
      ],
      "mod_code": [
        "if ( s == \" [] \" )",
        "cin >> N ;",
        "gets ( cin , s ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "if ( s == \" [] \" )",
        "gets ( cin , s ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid user-defined conversion from ‘std::istream {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        15,
        3
      ],
      "mod_code": [
        "else if ( s == \" [] \" )",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        3,
        6
      ],
      "mod_code": [
        "else if ( s == \" [] \" )",
        "cin >> N ;",
        "gets ( cin , s ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        6
      ],
      "mod_code": [
        "else if ( s == \" [] \" )",
        "gets ( cin , s ) ;"
      ],
      "err_line": 6,
      "err_msg": "invalid user-defined conversion from ‘std::istream {aka std::basic_istream<char>}’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "cin >> N ;",
        "gets ( cin , s ) ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    }
  ]
}