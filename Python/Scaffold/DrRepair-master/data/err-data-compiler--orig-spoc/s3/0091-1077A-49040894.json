{
  "meta": {
    "index": 91,
    "hitid": "3ZFRE2BDQ98AAGBFYAHB65DZDHXXZ2",
    "workerid": "AIWEXPJAU66D9",
    "probid": "1077A",
    "subid": "49040894"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long long ints a , b , k , t and c",
      "code": "long long int a , b , k , t , c ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read t from the user input",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "decrement t and loop further , while t is not 0",
      "code": "while ( t -- )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read variables a , b and k from the input",
      "code": "cin >> a >> b >> k ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if k is even",
      "code": "if ( k % 2 == 0 )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "change the value of k to k / 2",
      "code": "k = k / 2 ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "set c to a * k - b * k",
      "code": "c = ( a * k ) - ( b * k ) ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if k is odd",
      "code": "else if ( k % 2 != 0 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "change the value of k to k - 1",
      "code": "k = k - 1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "set k to k / 2",
      "code": "k = k / 2 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "change the value of c to ( a + a * k ) - ( b * k )",
      "code": "c = ( a + a * k ) - ( b * k ) ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "print c to the output stream",
      "code": "cout << c << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "c to a * k - ( b * k ) ;"
      ],
      "err_line": 11,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        2,
        13,
        4,
        3
      ],
      "mod_code": [
        "t = getchar ( ) ;",
        "cout << c ;",
        "cin >> a , b >> k ;",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        13,
        8,
        3
      ],
      "mod_code": [
        "t = getchar ( ) ;",
        "cout << c ;",
        "else if ( k % 2 == 0 )",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        13,
        5,
        3
      ],
      "mod_code": [
        "t = getchar ( ) ;",
        "cout << c ;",
        "if ( k % 2 == 1 )",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        13,
        3
      ],
      "mod_code": [
        "t = getchar ( ) ;",
        "cout << c ;",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        8,
        3
      ],
      "mod_code": [
        "t = getchar ( ) ;",
        "cin >> a , b >> k ;",
        "else if ( k % 2 == 0 )",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        3
      ],
      "mod_code": [
        "t = getchar ( ) ;",
        "cin >> a , b >> k ;",
        "if ( k % 2 == 1 )",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        3
      ],
      "mod_code": [
        "t = getchar ( ) ;",
        "cin >> a , b >> k ;",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        8,
        5,
        3
      ],
      "mod_code": [
        "t = getchar ( ) ;",
        "else if ( k % 2 == 0 )",
        "if ( k % 2 == 1 )",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        8,
        3
      ],
      "mod_code": [
        "t = getchar ( ) ;",
        "else if ( k % 2 == 0 )",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        5,
        3
      ],
      "mod_code": [
        "t = getchar ( ) ;",
        "if ( k % 2 == 1 )",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "t = getchar ( ) ;",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        4,
        8,
        3
      ],
      "mod_code": [
        "cout << c ;",
        "cin >> a , b >> k ;",
        "else if ( k % 2 == 0 )",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        4,
        5,
        3
      ],
      "mod_code": [
        "cout << c ;",
        "cin >> a , b >> k ;",
        "if ( k % 2 == 1 )",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        4,
        3
      ],
      "mod_code": [
        "cout << c ;",
        "cin >> a , b >> k ;",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        8,
        5,
        3
      ],
      "mod_code": [
        "cout << c ;",
        "else if ( k % 2 == 0 )",
        "if ( k % 2 == 1 )",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        8,
        3
      ],
      "mod_code": [
        "cout << c ;",
        "else if ( k % 2 == 0 )",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        5,
        3
      ],
      "mod_code": [
        "cout << c ;",
        "if ( k % 2 == 1 )",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        3
      ],
      "mod_code": [
        "cout << c ;",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        8,
        5,
        3
      ],
      "mod_code": [
        "cin >> a , b >> k ;",
        "else if ( k % 2 == 0 )",
        "if ( k % 2 == 1 )",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        8,
        3
      ],
      "mod_code": [
        "cin >> a , b >> k ;",
        "else if ( k % 2 == 0 )",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        5,
        3
      ],
      "mod_code": [
        "cin >> a , b >> k ;",
        "if ( k % 2 == 1 )",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "cin >> a , b >> k ;",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        5,
        3
      ],
      "mod_code": [
        "else if ( k % 2 == 0 )",
        "if ( k % 2 == 1 )",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "else if ( k % 2 == 0 )",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "if ( k % 2 == 1 )",
        "while ( -- -- )"
      ],
      "err_line": 3,
      "err_msg": "expected primary-expression before ‘)’ token"
    }
  ]
}