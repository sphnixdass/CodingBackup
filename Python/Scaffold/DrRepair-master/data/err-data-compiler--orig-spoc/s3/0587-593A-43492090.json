{
  "meta": {
    "index": 587,
    "hitid": "3QGHA0EA0JUZ3I39IR5MI4SPDC6BWI",
    "workerid": "A9X69TEYMWYG7",
    "probid": "593A",
    "subid": "43492090"
  },
  "lines": [
    {
      "line": 0,
      "text": "create int n",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create char a [ 110 ] [ 110 ]",
      "code": "char a [ 110 ] [ 110 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to n exclusive , read a [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> a [ i ] ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "ans = 0",
      "code": "int ans = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = a to z inclusive",
      "code": "for ( char i = ' a ' ; i <= ' z ' ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for j = a to z inclusive",
      "code": "for ( char j = ' a ' ; j <= ' z ' ; j ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "m = 0",
      "code": "int m = 0 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "for k = 0 to n exclusive",
      "code": "for ( int k = 0 ; k < n ; k ++ )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "flag = 1",
      "code": "int flag = 1 ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "len = lenght of a [ k ]",
      "code": "int len = strlen ( a [ k ] ) ;",
      "indent": 4
    },
    {
      "line": 12,
      "text": "for h = 0 to len exclusive",
      "code": "for ( int h = 0 ; h < len ; h ++ )",
      "indent": 4
    },
    {
      "line": 13,
      "text": "a [ k ] [ h ] is different from i and a [ k ] [ h ] is different from j",
      "code": "if ( a [ k ] [ h ] != i && a [ k ] [ h ] != j )",
      "indent": 5
    },
    {
      "line": 14,
      "text": "flag = 0",
      "code": "flag = 0 ;",
      "indent": 6
    },
    {
      "line": 15,
      "text": "break",
      "code": "break ;",
      "indent": 6
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 5
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 18,
      "text": "if flag = 1 , m = m + len",
      "code": "if ( flag == 1 ) m += len ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 20,
      "text": "ans = max of ans and m",
      "code": "ans = max ( ans , m ) ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 23,
      "text": "print ans",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( int j = a ; j <= z ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "m = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "flag = 1 ;"
      ],
      "err_line": 10,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int t ;"
      ],
      "err_line": 3,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char a [ 110 ] [ j ] ;"
      ],
      "err_line": 1,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "long long ans = 0 ;"
      ],
      "err_line": 20,
      "err_msg": "no matching function for call to ‘max(long long int&, int&)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( i = a ; i <= z ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( j = a ; j <= z ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "string len = strlen ( a [ k ] ) ;"
      ],
      "err_line": 11,
      "err_msg": "conversion from ‘size_t {aka long unsigned int}’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "ans = max ( ans and m ) ;"
      ],
      "err_line": 20,
      "err_msg": "no matching function for call to ‘max(bool)’"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "for ( int j = a ; j <= z ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        8
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "for ( int j = a ; j <= z ; j ++ )",
        "m = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        8,
        10
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "for ( int j = a ; j <= z ; j ++ )",
        "m = 0 ;",
        "flag = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        8,
        13
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "for ( int j = a ; j <= z ; j ++ )",
        "m = 0 ;",
        "a [ k ] [ h ] != i && a [ k ] [ h ] != j ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        10
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "for ( int j = a ; j <= z ; j ++ )",
        "flag = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        10,
        13
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "for ( int j = a ; j <= z ; j ++ )",
        "flag = 1 ;",
        "a [ k ] [ h ] != i && a [ k ] [ h ] != j ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7,
        13
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "for ( int j = a ; j <= z ; j ++ )",
        "a [ k ] [ h ] != i && a [ k ] [ h ] != j ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "m = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        10
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "m = 0 ;",
        "flag = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        10,
        13
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "m = 0 ;",
        "flag = 1 ;",
        "a [ k ] [ h ] != i && a [ k ] [ h ] != j ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        10,
        7
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "m = 0 ;",
        "flag = 1 ;",
        "for ( j = a ; j <= z ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        13
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "m = 0 ;",
        "a [ k ] [ h ] != i && a [ k ] [ h ] != j ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        13,
        7
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "m = 0 ;",
        "a [ k ] [ h ] != i && a [ k ] [ h ] != j ;",
        "for ( j = a ; j <= z ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8,
        7
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "m = 0 ;",
        "for ( j = a ; j <= z ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "flag = 1 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        10,
        13
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "flag = 1 ;",
        "a [ k ] [ h ] != i && a [ k ] [ h ] != j ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        10,
        13,
        7
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "flag = 1 ;",
        "a [ k ] [ h ] != i && a [ k ] [ h ] != j ;",
        "for ( j = a ; j <= z ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        10,
        7
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "flag = 1 ;",
        "for ( j = a ; j <= z ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "a [ k ] [ h ] != i && a [ k ] [ h ] != j ;"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        13,
        7
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "a [ k ] [ h ] != i && a [ k ] [ h ] != j ;",
        "for ( j = a ; j <= z ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        7
      ],
      "mod_code": [
        "for ( int i = a ; i <= z ; i ++ )",
        "for ( j = a ; j <= z ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "for ( int j = a ; j <= z ; j ++ )",
        "m = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        10
      ],
      "mod_code": [
        "for ( int j = a ; j <= z ; j ++ )",
        "m = 0 ;",
        "flag = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        10,
        13
      ],
      "mod_code": [
        "for ( int j = a ; j <= z ; j ++ )",
        "m = 0 ;",
        "flag = 1 ;",
        "a [ k ] [ h ] != i && a [ k ] [ h ] != j ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        8,
        13
      ],
      "mod_code": [
        "for ( int j = a ; j <= z ; j ++ )",
        "m = 0 ;",
        "a [ k ] [ h ] != i && a [ k ] [ h ] != j ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10
      ],
      "mod_code": [
        "for ( int j = a ; j <= z ; j ++ )",
        "flag = 1 ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        10,
        13
      ],
      "mod_code": [
        "for ( int j = a ; j <= z ; j ++ )",
        "flag = 1 ;",
        "a [ k ] [ h ] != i && a [ k ] [ h ] != j ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        13
      ],
      "mod_code": [
        "for ( int j = a ; j <= z ; j ++ )",
        "a [ k ] [ h ] != i && a [ k ] [ h ] != j ;"
      ],
      "err_line": 7,
      "err_msg": "invalid conversion from ‘char (*)[110]’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "m = 0 ;",
        "flag = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        10,
        13
      ],
      "mod_code": [
        "m = 0 ;",
        "flag = 1 ;",
        "a [ k ] [ h ] != i && a [ k ] [ h ] != j ;"
      ],
      "err_line": 8,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        10,
        13,
        7
      ],
      "mod_code": [
        "m = 0 ;",
        "flag = 1 ;",
        "a [ k ] [ h ] != i && a [ k ] [ h ] != j ;",
        "for ( j = a ; j <= z ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        10,
        7
      ],
      "mod_code": [
        "m = 0 ;",
        "flag = 1 ;",
        "for ( j = a ; j <= z ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "m = 0 ;",
        "a [ k ] [ h ] != i && a [ k ] [ h ] != j ;"
      ],
      "err_line": 8,
      "err_msg": "‘m’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        13,
        7
      ],
      "mod_code": [
        "m = 0 ;",
        "a [ k ] [ h ] != i && a [ k ] [ h ] != j ;",
        "for ( j = a ; j <= z ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "m = 0 ;",
        "for ( j = a ; j <= z ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "flag = 1 ;",
        "a [ k ] [ h ] != i && a [ k ] [ h ] != j ;"
      ],
      "err_line": 10,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        13,
        7
      ],
      "mod_code": [
        "flag = 1 ;",
        "a [ k ] [ h ] != i && a [ k ] [ h ] != j ;",
        "for ( j = a ; j <= z ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "flag = 1 ;",
        "for ( j = a ; j <= z ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        7
      ],
      "mod_code": [
        "a [ k ] [ h ] != i && a [ k ] [ h ] != j ;",
        "for ( j = a ; j <= z ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    }
  ]
}