{
  "meta": {
    "index": 106,
    "hitid": "3BPP3MA3TCEHZR3UO40AA1HUI28ELL",
    "workerid": "AIWEXPJAU66D9",
    "probid": "391A",
    "subid": "48684563"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers count and sol where sol = 0",
      "code": "int count , sol = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create string c",
      "code": "string c ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read c",
      "code": "cin >> c ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare int variable i = 0",
      "code": "int i = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while i < length of c",
      "code": "while ( i < c . size ( ) )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "assign 0 to count",
      "code": "count = 0 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if c [ i ] is equal to ' A '",
      "code": "if ( c [ i ] == ' A ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "while c [ i ] is ' A ' and i < length of c",
      "code": "while ( c [ i ] == ' A ' && i < c . size ( ) )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "increment count",
      "code": "count ++ ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 12,
      "text": "if count is even , increment sol",
      "code": "if ( count % 2 == 0 ) sol ++ ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 14,
      "text": "change count to 0",
      "code": "count = 0 ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if c [ i ] = ' C ' and i < length of c",
      "code": "if ( c [ i ] == ' C ' && i < c . size ( ) )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "while c [ i ] = ' C ' and i < length of c",
      "code": "while ( c [ i ] == ' C ' && i < c . size ( ) )",
      "indent": 3
    },
    {
      "line": 17,
      "text": "increment count",
      "code": "count ++ ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 20,
      "text": "if count is even , increment sol by one",
      "code": "if ( count % 2 == 0 ) sol ++ ;",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "assign 0 to count",
      "code": "count = 0 ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "if c [ i ] = ' T ' and i < length of c",
      "code": "if ( c [ i ] == ' T ' && i < c . size ( ) )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "while c [ i ] is ' T ' and i < length of c",
      "code": "while ( c [ i ] == ' T ' && i < c . size ( ) )",
      "indent": 3
    },
    {
      "line": 25,
      "text": "increment count by one",
      "code": "count ++ ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "increment i by one",
      "code": "i ++ ;",
      "indent": 4
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 28,
      "text": "if count is even , increment sol by one",
      "code": "if ( count % 2 == 0 ) sol ++ ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "assign 0 to count",
      "code": "count = 0 ;",
      "indent": 2
    },
    {
      "line": 31,
      "text": "if c [ i ] = ' G ' and i < length of c",
      "code": "if ( c [ i ] == ' G ' && i < c . size ( ) )",
      "indent": 2
    },
    {
      "line": 32,
      "text": "while c [ i ] = ' G ' and i < length of c",
      "code": "while ( c [ i ] == ' G ' && i < c . size ( ) )",
      "indent": 3
    },
    {
      "line": 33,
      "text": "increment count by one",
      "code": "count ++ ;",
      "indent": 4
    },
    {
      "line": 34,
      "text": "increment i",
      "code": "i ++ ;",
      "indent": 4
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 36,
      "text": "if count is even , increment sol",
      "code": "if ( count % 2 == 0 ) sol ++ ;",
      "indent": 3
    },
    {
      "line": 37,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 38,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 39,
      "text": "print sol",
      "code": "cout << sol << endl ;",
      "indent": 1
    },
    {
      "line": 40,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int c ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘c’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gets ( c ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int count = 0 , sol ;",
        "int c ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘c’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        1,
        2,
        39
      ],
      "mod_code": [
        "int count = 0 , sol ;",
        "int c ;",
        "cout << \" sol \" ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘c’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        1,
        2,
        39,
        7
      ],
      "mod_code": [
        "int count = 0 , sol ;",
        "int c ;",
        "cout << \" sol \" ;",
        "if ( ! c [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘c’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        1,
        2,
        39,
        3
      ],
      "mod_code": [
        "int count = 0 , sol ;",
        "int c ;",
        "cout << \" sol \" ;",
        "gets ( c ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        7
      ],
      "mod_code": [
        "int count = 0 , sol ;",
        "int c ;",
        "if ( ! c [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘c’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        1,
        2,
        7,
        3
      ],
      "mod_code": [
        "int count = 0 , sol ;",
        "int c ;",
        "if ( ! c [ i ] )",
        "gets ( c ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2,
        3
      ],
      "mod_code": [
        "int count = 0 , sol ;",
        "int c ;",
        "gets ( c ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        39,
        7,
        3
      ],
      "mod_code": [
        "int count = 0 , sol ;",
        "cout << \" sol \" ;",
        "if ( ! c [ i ] )",
        "gets ( c ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        39,
        3
      ],
      "mod_code": [
        "int count = 0 , sol ;",
        "cout << \" sol \" ;",
        "gets ( c ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        7,
        3
      ],
      "mod_code": [
        "int count = 0 , sol ;",
        "if ( ! c [ i ] )",
        "gets ( c ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "int count = 0 , sol ;",
        "gets ( c ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        2,
        39
      ],
      "mod_code": [
        "int c ;",
        "cout << \" sol \" ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘c’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        39,
        7
      ],
      "mod_code": [
        "int c ;",
        "cout << \" sol \" ;",
        "if ( ! c [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘c’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        39,
        7,
        3
      ],
      "mod_code": [
        "int c ;",
        "cout << \" sol \" ;",
        "if ( ! c [ i ] )",
        "gets ( c ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        39,
        3
      ],
      "mod_code": [
        "int c ;",
        "cout << \" sol \" ;",
        "gets ( c ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "int c ;",
        "if ( ! c [ i ] )"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘c’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2,
        7,
        3
      ],
      "mod_code": [
        "int c ;",
        "if ( ! c [ i ] )",
        "gets ( c ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "int c ;",
        "gets ( c ) ;"
      ],
      "err_line": 3,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        39,
        7,
        3
      ],
      "mod_code": [
        "cout << \" sol \" ;",
        "if ( ! c [ i ] )",
        "gets ( c ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        39,
        3
      ],
      "mod_code": [
        "cout << \" sol \" ;",
        "gets ( c ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "if ( ! c [ i ] )",
        "gets ( c ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    }
  ]
}