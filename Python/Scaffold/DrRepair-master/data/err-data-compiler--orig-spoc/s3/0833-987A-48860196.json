{
  "meta": {
    "index": 833,
    "hitid": "3KL228NDMVG4ZZH39ZEXV4PR6INGK6",
    "workerid": "A3QHJOSOK95QWB",
    "probid": "987A",
    "subid": "48860196"
  },
  "lines": [
    {
      "line": 0,
      "text": "n , i , j , counter = short",
      "code": "short n , i , j , counter ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "l = string , mas = string array of size 6 = \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \"",
      "code": "string l , mas [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "mas1 = string array of size 6 = \" purple \" , \" green \" , \" blue \" , \" orange \" , \" red \" , \" yellow \"",
      "code": "string mas1 [ 6 ] = { \" purple \" , \" green \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i 1 to n inclusve",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read l",
      "code": "cin >> l ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for j = 0 to 6 exclusive",
      "code": "for ( j = 0 ; j < 6 ; j ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if mas1 at j = 1",
      "code": "if ( mas1 [ j ] == l )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "set mas1 at j to \" 0 \"",
      "code": "mas1 [ j ] = \" 0 \" ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "increment counter",
      "code": "counter ++ ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print 6 - counter",
      "code": "cout << 6 - counter << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for i = 0 to 6 exclusive",
      "code": "for ( i = 0 ; i < 6 ; i ++ )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if mas1 at i isn ' t \" 0 \" then print mas at i",
      "code": "if ( mas1 [ i ] != \" 0 \" ) { cout << mas [ i ] << endl ; }",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string l [ 6 ] = \" Time \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string mas1 [ 6 ] = \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( mas1 [ j ] == 1 )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "short long n , i , j , counter ;"
      ],
      "err_line": 0,
      "err_msg": "‘long’ and ‘short’ specified together for ‘n’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string l [ 6 ] = \" Time \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string mas1 [ 6 ] = \" purple \" , \" green \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "l >> l ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( ! mas1 [ j ] )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator!’ (operand type is ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "string l [ 6 ] = \" Time \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "string mas1 [ 6 ] = \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        1,
        2,
        8
      ],
      "mod_code": [
        "string l [ 6 ] = \" Time \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "string mas1 [ 6 ] = \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;",
        "if ( mas1 [ j ] == 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        1,
        2,
        8,
        4
      ],
      "mod_code": [
        "string l [ 6 ] = \" Time \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "string mas1 [ 6 ] = \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;",
        "if ( mas1 [ j ] == 1 )",
        "cin >> N ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        1,
        2,
        4
      ],
      "mod_code": [
        "string l [ 6 ] = \" Time \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "string mas1 [ 6 ] = \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;",
        "cin >> N ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        8
      ],
      "mod_code": [
        "string l [ 6 ] = \" Time \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "string mas1 [ 6 ] = \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;",
        "cin >> N ;",
        "if ( ! mas1 [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        1,
        2,
        8
      ],
      "mod_code": [
        "string l [ 6 ] = \" Time \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "string mas1 [ 6 ] = \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;",
        "if ( ! mas1 [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "string l [ 6 ] = \" Time \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "if ( mas1 [ j ] == 1 )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        1,
        8,
        4
      ],
      "mod_code": [
        "string l [ 6 ] = \" Time \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "if ( mas1 [ j ] == 1 )",
        "cin >> N ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        1,
        8,
        4,
        2
      ],
      "mod_code": [
        "string l [ 6 ] = \" Time \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "if ( mas1 [ j ] == 1 )",
        "cin >> N ;",
        "string mas1 [ 6 ] = \" purple \" , \" green \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        1,
        8,
        2
      ],
      "mod_code": [
        "string l [ 6 ] = \" Time \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "if ( mas1 [ j ] == 1 )",
        "string mas1 [ 6 ] = \" purple \" , \" green \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "string l [ 6 ] = \" Time \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "cin >> N ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        1,
        4,
        2
      ],
      "mod_code": [
        "string l [ 6 ] = \" Time \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "cin >> N ;",
        "string mas1 [ 6 ] = \" purple \" , \" green \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        1,
        4,
        2,
        8
      ],
      "mod_code": [
        "string l [ 6 ] = \" Time \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "cin >> N ;",
        "string mas1 [ 6 ] = \" purple \" , \" green \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;",
        "if ( ! mas1 [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        1,
        4,
        8
      ],
      "mod_code": [
        "string l [ 6 ] = \" Time \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "cin >> N ;",
        "if ( ! mas1 [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "string l [ 6 ] = \" Time \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "string mas1 [ 6 ] = \" purple \" , \" green \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        1,
        2,
        8
      ],
      "mod_code": [
        "string l [ 6 ] = \" Time \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "string mas1 [ 6 ] = \" purple \" , \" green \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;",
        "if ( ! mas1 [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "string l [ 6 ] = \" Time \" , \" Time \" , \" Time \" , \" Soul \" , \" Soul \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! mas1 [ j ] )"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "string mas1 [ 6 ] = \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;",
        "if ( mas1 [ j ] == 1 )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2,
        8,
        4
      ],
      "mod_code": [
        "string mas1 [ 6 ] = \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;",
        "if ( mas1 [ j ] == 1 )",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "string mas1 [ 6 ] = \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2,
        4,
        8
      ],
      "mod_code": [
        "string mas1 [ 6 ] = \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;",
        "cin >> N ;",
        "if ( ! mas1 [ j ] )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "string mas1 [ 6 ] = \" purple \" , \" blue \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;",
        "if ( ! mas1 [ j ] )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "if ( mas1 [ j ] == 1 )",
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        4,
        2
      ],
      "mod_code": [
        "if ( mas1 [ j ] == 1 )",
        "cin >> N ;",
        "string mas1 [ 6 ] = \" purple \" , \" green \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "if ( mas1 [ j ] == 1 )",
        "string mas1 [ 6 ] = \" purple \" , \" green \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "cin >> N ;",
        "string mas1 [ 6 ] = \" purple \" , \" green \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        4,
        2,
        8
      ],
      "mod_code": [
        "cin >> N ;",
        "string mas1 [ 6 ] = \" purple \" , \" green \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;",
        "if ( ! mas1 [ j ] )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "cin >> N ;",
        "if ( ! mas1 [ j ] )"
      ],
      "err_line": 4,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "string mas1 [ 6 ] = \" purple \" , \" green \" , \" blue \" , \" red \" , \" red \" , \" yellow \" ;",
        "if ( ! mas1 [ j ] )"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    }
  ]
}