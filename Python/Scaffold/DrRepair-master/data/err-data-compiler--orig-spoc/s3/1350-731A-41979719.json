{
  "meta": {
    "index": 1350,
    "hitid": "3QGTX7BCHPW18XR5S4YGEMMFKIN5Z0",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "731A",
    "subid": "41979719"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "set s to \" a \" + s",
      "code": "s = \" a \" + s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let int r = 0",
      "code": "int r = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 1 to s . size ( ) exclusive",
      "code": "for ( int i = 1 ; i < s . size ( ) ; ++ i )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if s [ i ] is greater than s [ i - 1 ]",
      "code": "if ( s [ i ] > s [ i - 1 ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "set r to r + min ( s [ i ] - s [ i - 1 ] , ' z ' - s [ i ] + s [ i - 1 ] - ' a ' + 1 )",
      "code": "r += min ( s [ i ] - s [ i - 1 ] , ' z ' - s [ i ] + s [ i - 1 ] - ' a ' + 1 ) ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if s [ i ] is less than s [ i - 1 ]",
      "code": "else if ( s [ i ] < s [ i - 1 ] )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "add min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) to r",
      "code": "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print r",
      "code": "cout << r << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int s = \" a \" + s ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int s’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "s >> s ;",
        "int s = \" a \" + s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "int s = \" a \" + s ;",
        "cout << r ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        12,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "int s = \" a \" + s ;",
        "cout << r ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        12,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "int s = \" a \" + s ;",
        "cout << r ;",
        "int r = ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        12,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "int s = \" a \" + s ;",
        "cout << r ;",
        "string s = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "int s = \" a \" + s ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        9,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "int s = \" a \" + s ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;",
        "int r = ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        9,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "int s = \" a \" + s ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;",
        "string s = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "int s = \" a \" + s ;",
        "int r = ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        4,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "int s = \" a \" + s ;",
        "int r = ' 0 ' ;",
        "string s = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        3,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "int s = \" a \" + s ;",
        "string s = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "cout << r ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        12,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "cout << r ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        12,
        9,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "cout << r ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;",
        "int r = ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        12,
        9,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "cout << r ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;",
        "string s = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        12,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "cout << r ;",
        "int r = ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        12,
        4,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "cout << r ;",
        "int r = ' 0 ' ;",
        "string s = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        12,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "cout << r ;",
        "string s = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "s >> s ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        9,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;",
        "int r = ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        9,
        4,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;",
        "int r = ' 0 ' ;",
        "string s = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        9,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;",
        "string s = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "s >> s ;",
        "int r = ' 0 ' ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        4,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "int r = ' 0 ' ;",
        "string s = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "s >> s ;",
        "string s = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "int s = \" a \" + s ;",
        "cout << r ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int s’"
    },
    {
      "mod_line": [
        3,
        12,
        9
      ],
      "mod_code": [
        "int s = \" a \" + s ;",
        "cout << r ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int s’"
    },
    {
      "mod_line": [
        3,
        12,
        9,
        4
      ],
      "mod_code": [
        "int s = \" a \" + s ;",
        "cout << r ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;",
        "int r = ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int s’"
    },
    {
      "mod_line": [
        3,
        12,
        9,
        1
      ],
      "mod_code": [
        "int s = \" a \" + s ;",
        "cout << r ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;",
        "string s = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int s’"
    },
    {
      "mod_line": [
        3,
        12,
        4
      ],
      "mod_code": [
        "int s = \" a \" + s ;",
        "cout << r ;",
        "int r = ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int s’"
    },
    {
      "mod_line": [
        3,
        12,
        4,
        1
      ],
      "mod_code": [
        "int s = \" a \" + s ;",
        "cout << r ;",
        "int r = ' 0 ' ;",
        "string s = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int s’"
    },
    {
      "mod_line": [
        3,
        12,
        1
      ],
      "mod_code": [
        "int s = \" a \" + s ;",
        "cout << r ;",
        "string s = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int s’"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "int s = \" a \" + s ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int s’"
    },
    {
      "mod_line": [
        3,
        9,
        4
      ],
      "mod_code": [
        "int s = \" a \" + s ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;",
        "int r = ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int s’"
    },
    {
      "mod_line": [
        3,
        9,
        4,
        1
      ],
      "mod_code": [
        "int s = \" a \" + s ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;",
        "int r = ' 0 ' ;",
        "string s = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int s’"
    },
    {
      "mod_line": [
        3,
        9,
        1
      ],
      "mod_code": [
        "int s = \" a \" + s ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;",
        "string s = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int s’"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "int s = \" a \" + s ;",
        "int r = ' 0 ' ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int s’"
    },
    {
      "mod_line": [
        3,
        4,
        1
      ],
      "mod_code": [
        "int s = \" a \" + s ;",
        "int r = ' 0 ' ;",
        "string s = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int s’"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "int s = \" a \" + s ;",
        "string s = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "conflicting declaration ‘int s’"
    },
    {
      "mod_line": [
        12,
        9
      ],
      "mod_code": [
        "cout << r ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        9,
        4
      ],
      "mod_code": [
        "cout << r ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;",
        "int r = ' 0 ' ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        9,
        4,
        1
      ],
      "mod_code": [
        "cout << r ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;",
        "int r = ' 0 ' ;",
        "string s = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        12,
        9,
        1
      ],
      "mod_code": [
        "cout << r ;",
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;",
        "string s = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;",
        "int r = ' 0 ' ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        4,
        1
      ],
      "mod_code": [
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;",
        "int r = ' 0 ' ;",
        "string s = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        1
      ],
      "mod_code": [
        "r += min ( s [ i - 1 ] - s [ i ] , ' z ' - s [ i - 1 ] + s [ i ] - ' a ' + 1 ) ) ;",
        "string s = 0 ;"
      ],
      "err_line": 9,
      "err_msg": "expected ‘;’ before ‘)’ token"
    }
  ]
}