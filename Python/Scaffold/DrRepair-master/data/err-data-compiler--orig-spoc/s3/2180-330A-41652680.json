{
  "meta": {
    "index": 2180,
    "hitid": "3MZ3TAMYTLH4IU0TP7NXHSOLF0ARIS",
    "workerid": "A1C6BNLZXBOMT7",
    "probid": "330A",
    "subid": "41652680"
  },
  "lines": [
    {
      "line": 0,
      "text": "n , m = integers",
      "code": "int n , m ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "r , c = array of 11 integers each",
      "code": "int r [ 11 ] , c [ 11 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "ans = integer",
      "code": "int ans ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "Read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; ++ j )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "ch = character",
      "code": "char ch ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "Read ch",
      "code": "cin >> ch ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if ch is equal to S , then set r [ i ] = c [ j ] = 1",
      "code": "if ( ch == ' S ' ) r [ i ] = c [ j ] = 1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "set ans to n * m",
      "code": "ans = n * m ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; ++ j )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if r [ i ] and c [ j ] is true , then increment ans",
      "code": "if ( r [ i ] && c [ j ] ) ans -- ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "print ans and new line",
      "code": "cout << ans << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "set < char > ch ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 13,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        14,
        7
      ],
      "mod_code": [
        "if ( ch == ' S ' ) r [ i ] = 1 ;",
        "if ( r [ i ] && c [ j ] ) ans ++ ;",
        "set < char > ch ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        9,
        14,
        7,
        4
      ],
      "mod_code": [
        "if ( ch == ' S ' ) r [ i ] = 1 ;",
        "if ( r [ i ] && c [ j ] ) ans ++ ;",
        "set < char > ch ;",
        "cin >> n >> n ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        9,
        14,
        7,
        8
      ],
      "mod_code": [
        "if ( ch == ' S ' ) r [ i ] = 1 ;",
        "if ( r [ i ] && c [ j ] ) ans ++ ;",
        "set < char > ch ;",
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        14,
        4,
        8
      ],
      "mod_code": [
        "if ( ch == ' S ' ) r [ i ] = 1 ;",
        "if ( r [ i ] && c [ j ] ) ans ++ ;",
        "cin >> n >> n ;",
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        14,
        8
      ],
      "mod_code": [
        "if ( ch == ' S ' ) r [ i ] = 1 ;",
        "if ( r [ i ] && c [ j ] ) ans ++ ;",
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "if ( ch == ' S ' ) r [ i ] = 1 ;",
        "set < char > ch ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        9,
        7,
        4
      ],
      "mod_code": [
        "if ( ch == ' S ' ) r [ i ] = 1 ;",
        "set < char > ch ;",
        "cin >> n >> n ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        9,
        7,
        4,
        8
      ],
      "mod_code": [
        "if ( ch == ' S ' ) r [ i ] = 1 ;",
        "set < char > ch ;",
        "cin >> n >> n ;",
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        7,
        8
      ],
      "mod_code": [
        "if ( ch == ' S ' ) r [ i ] = 1 ;",
        "set < char > ch ;",
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        9,
        4,
        8
      ],
      "mod_code": [
        "if ( ch == ' S ' ) r [ i ] = 1 ;",
        "cin >> n >> n ;",
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "if ( ch == ' S ' ) r [ i ] = 1 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        7
      ],
      "mod_code": [
        "if ( r [ i ] && c [ j ] ) ans ++ ;",
        "set < char > ch ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        14,
        7,
        4
      ],
      "mod_code": [
        "if ( r [ i ] && c [ j ] ) ans ++ ;",
        "set < char > ch ;",
        "cin >> n >> n ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        14,
        7,
        4,
        9
      ],
      "mod_code": [
        "if ( r [ i ] && c [ j ] ) ans ++ ;",
        "set < char > ch ;",
        "cin >> n >> n ;",
        "if ( ch == ' S ' ) r [ i ++ ] = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        14,
        7,
        4,
        8
      ],
      "mod_code": [
        "if ( r [ i ] && c [ j ] ) ans ++ ;",
        "set < char > ch ;",
        "cin >> n >> n ;",
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        14,
        7,
        9
      ],
      "mod_code": [
        "if ( r [ i ] && c [ j ] ) ans ++ ;",
        "set < char > ch ;",
        "if ( ch == ' S ' ) r [ i ++ ] = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        14,
        7,
        9,
        8
      ],
      "mod_code": [
        "if ( r [ i ] && c [ j ] ) ans ++ ;",
        "set < char > ch ;",
        "if ( ch == ' S ' ) r [ i ++ ] = 1 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        14,
        7,
        8
      ],
      "mod_code": [
        "if ( r [ i ] && c [ j ] ) ans ++ ;",
        "set < char > ch ;",
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        14,
        4,
        9,
        8
      ],
      "mod_code": [
        "if ( r [ i ] && c [ j ] ) ans ++ ;",
        "cin >> n >> n ;",
        "if ( ch == ' S ' ) r [ i ++ ] = 1 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        4,
        8
      ],
      "mod_code": [
        "if ( r [ i ] && c [ j ] ) ans ++ ;",
        "cin >> n >> n ;",
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        9,
        8
      ],
      "mod_code": [
        "if ( r [ i ] && c [ j ] ) ans ++ ;",
        "if ( ch == ' S ' ) r [ i ++ ] = 1 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        14,
        8
      ],
      "mod_code": [
        "if ( r [ i ] && c [ j ] ) ans ++ ;",
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "set < char > ch ;",
        "cin >> n >> n ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        7,
        4,
        9
      ],
      "mod_code": [
        "set < char > ch ;",
        "cin >> n >> n ;",
        "if ( ch == ' S ' ) r [ i ++ ] = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        7,
        4,
        9,
        8
      ],
      "mod_code": [
        "set < char > ch ;",
        "cin >> n >> n ;",
        "if ( ch == ' S ' ) r [ i ++ ] = 1 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        4,
        8
      ],
      "mod_code": [
        "set < char > ch ;",
        "cin >> n >> n ;",
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "set < char > ch ;",
        "if ( ch == ' S ' ) r [ i ++ ] = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::set<char>’)"
    },
    {
      "mod_line": [
        7,
        9,
        8
      ],
      "mod_code": [
        "set < char > ch ;",
        "if ( ch == ' S ' ) r [ i ++ ] = 1 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "set < char > ch ;",
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "cannot convert ‘std::set<char>’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        4,
        9,
        8
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "if ( ch == ' S ' ) r [ i ++ ] = 1 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "cin >> n >> n ;",
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "if ( ch == ' S ' ) r [ i ++ ] = 1 ;",
        "gets ( ch ) ;"
      ],
      "err_line": 8,
      "err_msg": "invalid conversion from ‘char’ to ‘char*’ [-fpermissive]"
    }
  ]
}