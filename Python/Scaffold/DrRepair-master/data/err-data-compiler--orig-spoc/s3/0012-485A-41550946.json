{
  "meta": {
    "index": 12,
    "hitid": "3NSCTNUR2ZH07PJXGCIHXTV6AAIA5V",
    "workerid": "A1APYLD4DUK33J",
    "probid": "485A",
    "subid": "41550946"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create long longs a , b",
      "code": "long long a , b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read a read b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create long long array arr with size 100010 with arr = { 0 }",
      "code": "long long arr [ 100010 ] = { 0 } ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create boolean f with f = 0",
      "code": "bool f = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while 1 is true",
      "code": "while ( 1 )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "set a to ( a + a ) % b",
      "code": "a = ( a + a ) % b ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if arr [ a ] is 1 , break loop",
      "code": "if ( arr [ a ] == 1 ) { break ; }",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set arr [ a ] to 1",
      "code": "arr [ a ] = 1 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if a % b is 0",
      "code": "if ( a % b == 0 )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "set f to 1",
      "code": "f = 1 ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if f is true",
      "code": "if ( f )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print \" Yes \\ n \"",
      "code": "cout << \" Yes\\n \" ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print \" No \\ n \"",
      "code": "cout << \" No\\n \" ;",
      "indent": 2
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> a >> b )"
      ],
      "err_line": 7,
      "err_msg": "‘arr’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "0 f = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘;’ before ‘f’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "while ( -- 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "a += a )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        17,
        8,
        11
      ],
      "mod_code": [
        "cout << \" TRIANGLE\\n \" ;",
        "arr [ ' a ' ] = 1 ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        8,
        11,
        10
      ],
      "mod_code": [
        "cout << \" TRIANGLE\\n \" ;",
        "arr [ ' a ' ] = 1 ;",
        "do",
        "int f = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        8,
        11,
        5
      ],
      "mod_code": [
        "cout << \" TRIANGLE\\n \" ;",
        "arr [ ' a ' ] = 1 ;",
        "do",
        "while ( -- 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        17,
        8,
        11,
        7
      ],
      "mod_code": [
        "cout << \" TRIANGLE\\n \" ;",
        "arr [ ' a ' ] = 1 ;",
        "do",
        "if ( arr [ a ] == ' 1 ' ) break ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        8,
        10,
        5
      ],
      "mod_code": [
        "cout << \" TRIANGLE\\n \" ;",
        "arr [ ' a ' ] = 1 ;",
        "int f = 1 ;",
        "while ( -- 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        17,
        8,
        5
      ],
      "mod_code": [
        "cout << \" TRIANGLE\\n \" ;",
        "arr [ ' a ' ] = 1 ;",
        "while ( -- 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        17,
        8,
        5,
        7
      ],
      "mod_code": [
        "cout << \" TRIANGLE\\n \" ;",
        "arr [ ' a ' ] = 1 ;",
        "while ( -- 1 )",
        "if ( arr [ a ] == ' 1 ' ) break ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        17,
        11
      ],
      "mod_code": [
        "cout << \" TRIANGLE\\n \" ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        11,
        10
      ],
      "mod_code": [
        "cout << \" TRIANGLE\\n \" ;",
        "do",
        "int f = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        11,
        10,
        5
      ],
      "mod_code": [
        "cout << \" TRIANGLE\\n \" ;",
        "do",
        "int f = 1 ;",
        "while ( -- 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        17,
        11,
        10,
        7
      ],
      "mod_code": [
        "cout << \" TRIANGLE\\n \" ;",
        "do",
        "int f = 1 ;",
        "if ( arr [ a ] == ' 1 ' ) break ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        11,
        5
      ],
      "mod_code": [
        "cout << \" TRIANGLE\\n \" ;",
        "do",
        "while ( -- 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        17,
        11,
        5,
        7
      ],
      "mod_code": [
        "cout << \" TRIANGLE\\n \" ;",
        "do",
        "while ( -- 1 )",
        "if ( arr [ a ] == ' 1 ' ) break ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        17,
        11,
        7
      ],
      "mod_code": [
        "cout << \" TRIANGLE\\n \" ;",
        "do",
        "if ( arr [ a ] == ' 1 ' ) break ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17,
        10,
        5
      ],
      "mod_code": [
        "cout << \" TRIANGLE\\n \" ;",
        "int f = 1 ;",
        "while ( -- 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        17,
        10,
        5,
        7
      ],
      "mod_code": [
        "cout << \" TRIANGLE\\n \" ;",
        "int f = 1 ;",
        "while ( -- 1 )",
        "if ( arr [ a ] == ' 1 ' ) break ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        17,
        5
      ],
      "mod_code": [
        "cout << \" TRIANGLE\\n \" ;",
        "while ( -- 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        17,
        5,
        7
      ],
      "mod_code": [
        "cout << \" TRIANGLE\\n \" ;",
        "while ( -- 1 )",
        "if ( arr [ a ] == ' 1 ' ) break ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "arr [ ' a ' ] = 1 ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        11,
        10
      ],
      "mod_code": [
        "arr [ ' a ' ] = 1 ;",
        "do",
        "int f = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        11,
        10,
        5
      ],
      "mod_code": [
        "arr [ ' a ' ] = 1 ;",
        "do",
        "int f = 1 ;",
        "while ( -- 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        8,
        11,
        10,
        7
      ],
      "mod_code": [
        "arr [ ' a ' ] = 1 ;",
        "do",
        "int f = 1 ;",
        "if ( arr [ a ] == ' 1 ' ) break ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        11,
        5
      ],
      "mod_code": [
        "arr [ ' a ' ] = 1 ;",
        "do",
        "while ( -- 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        8,
        11,
        5,
        7
      ],
      "mod_code": [
        "arr [ ' a ' ] = 1 ;",
        "do",
        "while ( -- 1 )",
        "if ( arr [ a ] == ' 1 ' ) break ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        8,
        11,
        7
      ],
      "mod_code": [
        "arr [ ' a ' ] = 1 ;",
        "do",
        "if ( arr [ a ] == ' 1 ' ) break ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        10,
        5
      ],
      "mod_code": [
        "arr [ ' a ' ] = 1 ;",
        "int f = 1 ;",
        "while ( -- 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        8,
        10,
        5,
        7
      ],
      "mod_code": [
        "arr [ ' a ' ] = 1 ;",
        "int f = 1 ;",
        "while ( -- 1 )",
        "if ( arr [ a ] == ' 1 ' ) break ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        8,
        5
      ],
      "mod_code": [
        "arr [ ' a ' ] = 1 ;",
        "while ( -- 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        8,
        5,
        7
      ],
      "mod_code": [
        "arr [ ' a ' ] = 1 ;",
        "while ( -- 1 )",
        "if ( arr [ a ] == ' 1 ' ) break ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        11,
        10
      ],
      "mod_code": [
        "do",
        "int f = 1 ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        10,
        5
      ],
      "mod_code": [
        "do",
        "int f = 1 ;",
        "while ( -- 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        11,
        10,
        5,
        7
      ],
      "mod_code": [
        "do",
        "int f = 1 ;",
        "while ( -- 1 )",
        "if ( arr [ a ] == ' 1 ' ) break ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        11,
        10,
        7
      ],
      "mod_code": [
        "do",
        "int f = 1 ;",
        "if ( arr [ a ] == ' 1 ' ) break ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        5
      ],
      "mod_code": [
        "do",
        "while ( -- 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        11,
        5,
        7
      ],
      "mod_code": [
        "do",
        "while ( -- 1 )",
        "if ( arr [ a ] == ' 1 ' ) break ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "do",
        "if ( arr [ a ] == ' 1 ' ) break ;"
      ],
      "err_line": 12,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        5
      ],
      "mod_code": [
        "int f = 1 ;",
        "while ( -- 1 )"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        10,
        5,
        7
      ],
      "mod_code": [
        "int f = 1 ;",
        "while ( -- 1 )",
        "if ( arr [ a ] == ' 1 ' ) break ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "while ( -- 1 )",
        "if ( arr [ a ] == ' 1 ' ) break ;"
      ],
      "err_line": 5,
      "err_msg": "lvalue required as decrement operand"
    }
  ]
}