{
  "meta": {
    "index": 2097,
    "hitid": "31HLTCK4BLPIFABF83S4XD08MGVVG8",
    "workerid": "AIWEXPJAU66D9",
    "probid": "961A",
    "subid": "47490809"
  },
  "lines": [
    {
      "line": 0,
      "text": "n , m , tmp and minx are integers with minx = 0x3f3f3f3f ; a is an integer array with 1004 elements",
      "code": "int n , m , a [ 1004 ] , tmp , minx = 0x3f3f3f3f ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "minn is a inlined int function with const int reference arguments & a and & b",
      "code": "inline int minn ( const int & a , const int & b )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "if a is greater than b",
      "code": "if ( a > b )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "return b",
      "code": "return b ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 5,
      "text": "return a",
      "code": "return a ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 8,
      "text": "read from the input to n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "for i from 1 to m inclusive , read input to tmp and increment a [ tmp ]",
      "code": "for ( int i = 1 ; i <= m ; i ++ ) cin >> tmp , a [ tmp ] ++ ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "start for loop from i = 1 to n inclusive , assigning minn ( minx , a [ i ] ) to minx on each iteration",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) minx = minn ( minx , a [ i ] ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print minx to the standard output",
      "code": "cout << minx << endl ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n , m , tmp , a [ 1004 ] , minx [ 1004 ] ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int n , m , tmp , minx [ 1004 ] , minx [ 1004 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int minx [1004]’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "void minn ( const int & a , const int & b )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "int n , m , tmp , a [ 1004 ] , minx [ 1004 ] ;",
        "cout << minx ;"
      ],
      "err_line": 10,
      "err_msg": "invalid conversion from ‘int*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        11,
        4
      ],
      "mod_code": [
        "int n , m , tmp , a [ 1004 ] , minx [ 1004 ] ;",
        "cout << minx ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        11,
        4,
        1
      ],
      "mod_code": [
        "int n , m , tmp , a [ 1004 ] , minx [ 1004 ] ;",
        "cout << minx ;",
        "do",
        "void minn ( const int & a , const int & b )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        11,
        1
      ],
      "mod_code": [
        "int n , m , tmp , a [ 1004 ] , minx [ 1004 ] ;",
        "cout << minx ;",
        "void minn ( const int & a , const int & b )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "int n , m , tmp , a [ 1004 ] , minx [ 1004 ] ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        0,
        4,
        1
      ],
      "mod_code": [
        "int n , m , tmp , a [ 1004 ] , minx [ 1004 ] ;",
        "do",
        "void minn ( const int & a , const int & b )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int n , m , tmp , a [ 1004 ] , minx [ 1004 ] ;",
        "void minn ( const int & a , const int & b )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        0
      ],
      "mod_code": [
        "cout << minx ;",
        "int n , m , tmp , minx [ 1004 ] , minx [ 1004 ] ;"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int minx [1004]’"
    },
    {
      "mod_line": [
        11,
        0,
        4
      ],
      "mod_code": [
        "cout << minx ;",
        "int n , m , tmp , minx [ 1004 ] , minx [ 1004 ] ;",
        "do"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int minx [1004]’"
    },
    {
      "mod_line": [
        11,
        0,
        4,
        1
      ],
      "mod_code": [
        "cout << minx ;",
        "int n , m , tmp , minx [ 1004 ] , minx [ 1004 ] ;",
        "do",
        "void minn ( const int & a , const int & b )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int minx [1004]’"
    },
    {
      "mod_line": [
        11,
        0,
        1
      ],
      "mod_code": [
        "cout << minx ;",
        "int n , m , tmp , minx [ 1004 ] , minx [ 1004 ] ;",
        "void minn ( const int & a , const int & b )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int minx [1004]’"
    },
    {
      "mod_line": [
        11,
        4
      ],
      "mod_code": [
        "cout << minx ;",
        "do"
      ],
      "err_line": 6,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        4,
        1
      ],
      "mod_code": [
        "cout << minx ;",
        "do",
        "void minn ( const int & a , const int & b )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "cout << minx ;",
        "void minn ( const int & a , const int & b )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "int n , m , tmp , minx [ 1004 ] , minx [ 1004 ] ;",
        "do"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int minx [1004]’"
    },
    {
      "mod_line": [
        0,
        4,
        1
      ],
      "mod_code": [
        "int n , m , tmp , minx [ 1004 ] , minx [ 1004 ] ;",
        "do",
        "void minn ( const int & a , const int & b )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int minx [1004]’"
    },
    {
      "mod_line": [
        0,
        1
      ],
      "mod_code": [
        "int n , m , tmp , minx [ 1004 ] , minx [ 1004 ] ;",
        "void minn ( const int & a , const int & b )"
      ],
      "err_line": 0,
      "err_msg": "redefinition of ‘int minx [1004]’"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "do",
        "void minn ( const int & a , const int & b )"
      ],
      "err_line": 3,
      "err_msg": "return-statement with a value, in function returning 'void' [-fpermissive]"
    }
  ]
}