{
  "meta": {
    "index": 1246,
    "hitid": "351S7I5UG9QFY7S7EIRGK9YBS5BNJO",
    "workerid": "A1AYVATMT88U1W",
    "probid": "1042A",
    "subid": "45705645"
  },
  "lines": [
    {
      "line": 0,
      "text": "let gcd be a function which accepts long integers b and y and returns a long integer value",
      "code": "long long gcd ( long long b , long long y )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return gcd of y modulo b and b if b is greater than 0 else return y",
      "code": "return b > 0 ? gcd ( y % b , b ) : y ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "let lcm be a function which accepts long integers b and y and returns a long integer value",
      "code": "long long lcm ( long long b , long long y )",
      "indent": 0
    },
    {
      "line": 4,
      "text": "return the value of b * y / gcd of b and y",
      "code": "return b * y / gcd ( b , y ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 6,
      "text": "let dis be a function which accepts double x1 , double x2 , double y1 , double y2 and returns a double value",
      "code": "double dis ( double x1 , double x2 , double y1 , double y2 )",
      "indent": 0
    },
    {
      "line": 7,
      "text": "let the double value of ans is equal to ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 )",
      "code": "double ans = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "return the value of square root of ans",
      "code": "return sqrt ( ans ) ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 10,
      "text": "let random be a function that accepts double start , double en and returns a double value",
      "code": "double random ( double start , double en )",
      "indent": 0
    },
    {
      "line": 11,
      "text": "return the value of start + ( en - start ) * rand ( ) / ( RAND_MAX + 1 . 0 )",
      "code": "return start + ( en - start ) * rand ( ) / ( RAND_MAX + 1.0 ) ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 13,
      "text": "let read be a void function that accepts int & n",
      "code": "void read ( int & n )",
      "indent": 0
    },
    {
      "line": 14,
      "text": "let the character value of c = +",
      "code": "char c = ' + ' ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "let the integer value of x = 0",
      "code": "int x = 0 ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "set boolean value flag to 0",
      "code": "bool flag = 0 ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "while c is less than 0 or c is greater than 9",
      "code": "while ( c < ' 0 ' || c > ' 9 ' )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "c = getchar ( )",
      "code": "c = getchar ( ) ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "if c is equal to - , flag is equal to 1",
      "code": "if ( c == ' - ' ) flag = 1 ;",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "while c > = 0 and c < = 9 , x is equal to x * 10 + c - 48 , read a character into c",
      "code": "while ( c >= ' 0 ' && c <= ' 9 ' ) x = x * 10 + c - 48 , c = getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "if flag is equal to 1 , n is equal to - x else n is equal to x",
      "code": "n = flag == 1 ? - x : x ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 24,
      "text": "let F be a function that accepts double values x , y and returns a double value",
      "code": "double F ( double x , double y )",
      "indent": 0
    },
    {
      "line": 25,
      "text": "return the value of 6 * pow ( x , 7 ) + 8 * pow ( x , 6 ) + 7 * pow ( x , 3 ) + 5 * pow ( x , 2 ) - y * x",
      "code": "return 6 * pow ( x , 7 ) + 8 * pow ( x , 6 ) + 7 * pow ( x , 3 ) + 5 * pow ( x , 2 ) - y * x ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 27,
      "text": "let FF be a function that accepts double values x , y and returns a double value",
      "code": "double FF ( double x , double y )",
      "indent": 0
    },
    {
      "line": 28,
      "text": "return the value of 42 * pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y",
      "code": "return 42 * pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 31,
      "text": "let n , k be integers",
      "code": "int n , k ;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "read n , k",
      "code": "cin >> n >> k ;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "a = array of integers of length 110",
      "code": "int a [ 110 ] ;",
      "indent": 1
    },
    {
      "line": 34,
      "text": "let l , r be integers",
      "code": "int l , r ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "for i = 1 to n inclusive",
      "code": "for ( int i = 1 ; i <= n ; i ++ )",
      "indent": 1
    },
    {
      "line": 36,
      "text": "read a [ i ]",
      "code": "cin >> a [ i ] ;",
      "indent": 2
    },
    {
      "line": 37,
      "text": "if i is equal to 1",
      "code": "if ( i == 1 )",
      "indent": 2
    },
    {
      "line": 38,
      "text": "l is equal to a [ i ]",
      "code": "l = a [ i ] ;",
      "indent": 3
    },
    {
      "line": 39,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 40,
      "text": "l is equal to maximum of a [ i ] and l",
      "code": "l = max ( a [ i ] , l ) ;",
      "indent": 3
    },
    {
      "line": 41,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 42,
      "text": "r is equal to l + k",
      "code": "r = l + k ;",
      "indent": 1
    },
    {
      "line": 43,
      "text": "let MIN , MAX be integer with MAX = r",
      "code": "int MIN , MAX = r ;",
      "indent": 1
    },
    {
      "line": 44,
      "text": "let ans be a integer",
      "code": "int ans ;",
      "indent": 1
    },
    {
      "line": 45,
      "text": "while l < = r",
      "code": "while ( l <= r )",
      "indent": 1
    },
    {
      "line": 46,
      "text": "the integer value of mid = ( l + r ) / 2",
      "code": "int mid = ( l + r ) / 2 ;",
      "indent": 2
    },
    {
      "line": 47,
      "text": "the integer value of sum = 0",
      "code": "int sum = 0 ;",
      "indent": 2
    },
    {
      "line": 48,
      "text": "for i = 1 to n inclusive , increment sum by mid - a [ i ]",
      "code": "for ( int i = 1 ; i <= n ; i ++ ) { sum += mid - a [ i ] ; }",
      "indent": 2
    },
    {
      "line": 49,
      "text": "if sum > = k",
      "code": "if ( sum >= k )",
      "indent": 2
    },
    {
      "line": 50,
      "text": "ans is equal to mid",
      "code": "ans = mid ;",
      "indent": 3
    },
    {
      "line": 51,
      "text": "r is equal to mid - 1",
      "code": "r = mid - 1 ;",
      "indent": 3
    },
    {
      "line": 52,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 53,
      "text": "l is equal to mid + 1",
      "code": "l = mid + 1 ;",
      "indent": 3
    },
    {
      "line": 54,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 55,
      "text": "print ans and space and MAX and newline",
      "code": "cout << ans << \" \" << MAX << endl ;",
      "indent": 1
    },
    {
      "line": 56,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;"
      ],
      "err_line": 11,
      "err_msg": "too many arguments to function ‘int rand()’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "flag == 1 ? n == - x ? n : x ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;"
      ],
      "err_line": 28,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b ? b : y ) ;"
      ],
      "err_line": 1,
      "err_msg": "too few arguments to function ‘long long int gcd(long long int, long long int)’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "double dis ( double x1 , double x2 , double y2 , double y2 )"
      ],
      "err_line": 6,
      "err_msg": "redefinition of ‘double y2’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "double random ( double en , double en )"
      ],
      "err_line": 10,
      "err_msg": "redefinition of ‘double en’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "return start + ( en - start ) * rand ( 1 + 1.0 ) ;"
      ],
      "err_line": 11,
      "err_msg": "too many arguments to function ‘int rand()’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "char c = \" + \" ;"
      ],
      "err_line": 14,
      "err_msg": "invalid conversion from ‘const char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "x = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "flag = 0 ;"
      ],
      "err_line": 16,
      "err_msg": "‘flag’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "flag == 1 ? n == - x ? x : x ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        33
      ],
      "mod_code": [
        "long long a [ 110 ] ;"
      ],
      "err_line": 40,
      "err_msg": "no matching function for call to ‘max(long long int&, int&)’"
    },
    {
      "mod_line": [
        34
      ],
      "mod_code": [
        "long long l , r ;"
      ],
      "err_line": 40,
      "err_msg": "no matching function for call to ‘max(int&, long long int&)’"
    },
    {
      "mod_line": [
        36
      ],
      "mod_code": [
        "cin >> a . size ( ) ;"
      ],
      "err_line": 36,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘int [110]’"
    },
    {
      "mod_line": [
        39
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 41,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        40
      ],
      "mod_code": [
        "l = max ( a [ i ] and l ) ;"
      ],
      "err_line": 40,
      "err_msg": "no matching function for call to ‘max(bool)’"
    },
    {
      "mod_line": [
        46
      ],
      "mod_code": [
        "mid = ( l + r ) / 2 ;"
      ],
      "err_line": 46,
      "err_msg": "‘mid’ was not declared in this scope"
    },
    {
      "mod_line": [
        47
      ],
      "mod_code": [
        "sum = 0 ;"
      ],
      "err_line": 47,
      "err_msg": "‘sum’ was not declared in this scope"
    },
    {
      "mod_line": [
        49
      ],
      "mod_code": [
        "else if ( sum >= k )"
      ],
      "err_line": 49,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        52
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 54,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        11,
        22
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "flag == 1 ? n == - x ? n : x ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        11,
        22,
        28
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "flag == 1 ? n == - x ? n : x ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        11,
        22,
        42
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "flag == 1 ? n == - x ? n : x ;",
        "r += k ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        11,
        22,
        15
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "flag == 1 ? n == - x ? n : x ;",
        "x = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        11,
        28
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        11,
        28,
        42
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;",
        "r += k ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        11,
        28,
        15
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;",
        "x = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        11,
        42
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "r += k ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        11,
        42,
        15
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "r += k ;",
        "x = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        11,
        15
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "x = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        22
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "flag == 1 ? n == - x ? n : x ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        22,
        28
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "flag == 1 ? n == - x ? n : x ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        22,
        28,
        42
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "flag == 1 ? n == - x ? n : x ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;",
        "r += k ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        22,
        28,
        15
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "flag == 1 ? n == - x ? n : x ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;",
        "x = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        22,
        42
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "flag == 1 ? n == - x ? n : x ;",
        "r += k ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        22,
        42,
        15
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "flag == 1 ? n == - x ? n : x ;",
        "r += k ;",
        "x = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        22,
        15
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "flag == 1 ? n == - x ? n : x ;",
        "x = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        28
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        28,
        42
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;",
        "r += k ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        28,
        42,
        15
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;",
        "r += k ;",
        "x = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        28,
        15
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;",
        "x = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        42
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "r += k ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        42,
        15
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "r += k ;",
        "x = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "return b > 0 ? gcd ( y % b , b : y ) ;",
        "x = 0 ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘)’ before ‘:’ token"
    },
    {
      "mod_line": [
        11,
        22
      ],
      "mod_code": [
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "flag == 1 ? n == - x ? n : x ;"
      ],
      "err_line": 11,
      "err_msg": "too many arguments to function ‘int rand()’"
    },
    {
      "mod_line": [
        11,
        22,
        28
      ],
      "mod_code": [
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "flag == 1 ? n == - x ? n : x ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;"
      ],
      "err_line": 11,
      "err_msg": "too many arguments to function ‘int rand()’"
    },
    {
      "mod_line": [
        11,
        22,
        28,
        42
      ],
      "mod_code": [
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "flag == 1 ? n == - x ? n : x ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;",
        "r += k ;"
      ],
      "err_line": 11,
      "err_msg": "too many arguments to function ‘int rand()’"
    },
    {
      "mod_line": [
        11,
        22,
        28,
        15
      ],
      "mod_code": [
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "flag == 1 ? n == - x ? n : x ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;",
        "x = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "too many arguments to function ‘int rand()’"
    },
    {
      "mod_line": [
        11,
        22,
        42
      ],
      "mod_code": [
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "flag == 1 ? n == - x ? n : x ;",
        "r += k ;"
      ],
      "err_line": 11,
      "err_msg": "too many arguments to function ‘int rand()’"
    },
    {
      "mod_line": [
        11,
        22,
        42,
        15
      ],
      "mod_code": [
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "flag == 1 ? n == - x ? n : x ;",
        "r += k ;",
        "x = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "too many arguments to function ‘int rand()’"
    },
    {
      "mod_line": [
        11,
        22,
        15
      ],
      "mod_code": [
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "flag == 1 ? n == - x ? n : x ;",
        "x = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "too many arguments to function ‘int rand()’"
    },
    {
      "mod_line": [
        11,
        28
      ],
      "mod_code": [
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;"
      ],
      "err_line": 11,
      "err_msg": "too many arguments to function ‘int rand()’"
    },
    {
      "mod_line": [
        11,
        28,
        42
      ],
      "mod_code": [
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;",
        "r += k ;"
      ],
      "err_line": 11,
      "err_msg": "too many arguments to function ‘int rand()’"
    },
    {
      "mod_line": [
        11,
        28,
        42,
        15
      ],
      "mod_code": [
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;",
        "r += k ;",
        "x = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "too many arguments to function ‘int rand()’"
    },
    {
      "mod_line": [
        11,
        28,
        15
      ],
      "mod_code": [
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;",
        "x = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "too many arguments to function ‘int rand()’"
    },
    {
      "mod_line": [
        11,
        42
      ],
      "mod_code": [
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "r += k ;"
      ],
      "err_line": 11,
      "err_msg": "too many arguments to function ‘int rand()’"
    },
    {
      "mod_line": [
        11,
        42,
        15
      ],
      "mod_code": [
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "r += k ;",
        "x = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "too many arguments to function ‘int rand()’"
    },
    {
      "mod_line": [
        11,
        15
      ],
      "mod_code": [
        "return start + ( en - start ) * rand ( RAND_MAX + 1.0 ) ;",
        "x = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "too many arguments to function ‘int rand()’"
    },
    {
      "mod_line": [
        22,
        28
      ],
      "mod_code": [
        "flag == 1 ? n == - x ? n : x ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        22,
        28,
        42
      ],
      "mod_code": [
        "flag == 1 ? n == - x ? n : x ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;",
        "r += k ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        22,
        28,
        42,
        15
      ],
      "mod_code": [
        "flag == 1 ? n == - x ? n : x ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;",
        "r += k ;",
        "x = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        28,
        15
      ],
      "mod_code": [
        "flag == 1 ? n == - x ? n : x ;",
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;",
        "x = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        42
      ],
      "mod_code": [
        "flag == 1 ? n == - x ? n : x ;",
        "r += k ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘:’ before ‘;’ token"
    },
    {
      "mod_line": [
        22,
        42,
        15
      ],
      "mod_code": [
        "flag == 1 ? n == - x ? n : x ;",
        "r += k ;",
        "x = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        22,
        15
      ],
      "mod_code": [
        "flag == 1 ? n == - x ? n : x ;",
        "x = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        42
      ],
      "mod_code": [
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;",
        "r += k ;"
      ],
      "err_line": 28,
      "err_msg": "expression cannot be used as a function"
    },
    {
      "mod_line": [
        28,
        42,
        15
      ],
      "mod_code": [
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;",
        "r += k ;",
        "x = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        28,
        15
      ],
      "mod_code": [
        "return 42 ( pow ( x , 6 ) + 48 * pow ( x , 5 ) + 21 * pow ( x , 2 ) + 10 * x - y ) ;",
        "x = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        42,
        15
      ],
      "mod_code": [
        "r += k ;",
        "x = 0 ;"
      ],
      "err_line": 15,
      "err_msg": "‘x’ was not declared in this scope"
    }
  ]
}