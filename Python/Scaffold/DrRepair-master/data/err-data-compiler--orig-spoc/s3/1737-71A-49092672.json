{
  "meta": {
    "index": 1737,
    "hitid": "3FCO4VKOZ47IK6ESKAZ0RWZTNIAE7J",
    "workerid": "A1EKVUFWL7OJMO",
    "probid": "71A",
    "subid": "49092672"
  },
  "lines": [
    {
      "line": 0,
      "text": "in the function ispalin that takes string str and returns bool",
      "code": "bool ispalin ( string str )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "l = long long with l = 0",
      "code": "long long l = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "h = long long with h = str . size ( ) - 1",
      "code": "long long h = str . size ( ) - 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while ( h > l )",
      "code": "while ( h > l )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if ( str [ increment l ] is not str [ decrement h ] ) , return 0",
      "code": "if ( str [ l ++ ] != str [ h -- ] ) return 0 ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 6,
      "text": "return 1",
      "code": "return 1 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "in the function isprime that takes long long n",
      "code": "void isprime ( long long n )",
      "indent": 0
    },
    {
      "line": 9,
      "text": "prime = bool array of size n + 1",
      "code": "bool prime [ n + 1 ] ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "set all contents of prime to true",
      "code": "memset ( prime , true , sizeof ( prime ) ) ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for p = 2 to p * p < = n",
      "code": "for ( long long p = 2 ; p * p <= n ; p ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if ( prime [ p ] is true )",
      "code": "if ( prime [ p ] == true )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "for i = p * p to n , i = i + p , prime [ i ] = false",
      "code": "for ( long long i = p * p ; i <= n ; i += p ) prime [ i ] = false ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "for p = 2 to n",
      "code": "for ( long long p = 2 ; p <= n ; p ++ )",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if ( prime [ p ] ) , print p",
      "code": "if ( prime [ p ] ) cout << p << \" \" ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 19,
      "text": "test = long long with test = 1",
      "code": "long long test = 1 ;",
      "indent": 1
    },
    {
      "line": 20,
      "text": "read test",
      "code": "cin >> test ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "while decrement test",
      "code": "while ( test -- )",
      "indent": 1
    },
    {
      "line": 22,
      "text": "str = string",
      "code": "string str ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "read str",
      "code": "cin >> str ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "n = long long with n = str . size ( )",
      "code": "long long n = str . size ( ) ;",
      "indent": 2
    },
    {
      "line": 25,
      "text": "if ( n < = 10 )",
      "code": "if ( n <= 10 )",
      "indent": 2
    },
    {
      "line": 26,
      "text": "print str",
      "code": "cout << str << endl ;",
      "indent": 3
    },
    {
      "line": 27,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 28,
      "text": "print str [ 0 ] , n - 2 , str [ n - 1",
      "code": "cout << str [ 0 ] << n - 2 << str [ n - 1 ] << endl ;",
      "indent": 3
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "bool ispalin ( string str ) ;"
      ],
      "err_line": 1,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) return 0 ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "getline ( cin , test ) ;"
      ],
      "err_line": 20,
      "err_msg": "no matching function for call to ‘getline(std::istream&, long long int&)’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "char str ;"
      ],
      "err_line": 24,
      "err_msg": "request for member ‘size’ in ‘str’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "gets ( str ) ;"
      ],
      "err_line": 23,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 30,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        13
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        13,
        28
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        13,
        28,
        23
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        13,
        28,
        25
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;",
        "if ( n <= ' 10 ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        13,
        28,
        27
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        13,
        23
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "gets ( str ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        13,
        23,
        25
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "gets ( str ) ;",
        "if ( n <= ' 10 ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        13,
        23,
        27
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "gets ( str ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        13,
        25
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "if ( n <= ' 10 ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        13,
        25,
        27
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "if ( n <= ' 10 ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        13,
        27
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        28
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        28,
        23
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        28,
        23,
        25
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;",
        "gets ( str ) ;",
        "if ( n <= ' 10 ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        28,
        23,
        27
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;",
        "gets ( str ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        28,
        25
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;",
        "if ( n <= ' 10 ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        28,
        25,
        27
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;",
        "if ( n <= ' 10 ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        28,
        27
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        23
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "gets ( str ) ;"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        23,
        25
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "gets ( str ) ;",
        "if ( n <= ' 10 ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        23,
        25,
        27
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "gets ( str ) ;",
        "if ( n <= ' 10 ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        23,
        27
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "gets ( str ) ;",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        25
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "if ( n <= ' 10 ' )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        25,
        27
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "if ( n <= ' 10 ' )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        4,
        27
      ],
      "mod_code": [
        "if ( str [ l ++ ] != str [ -- h ) { return 0 ; }",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘]’ before ‘)’ token"
    },
    {
      "mod_line": [
        13,
        28
      ],
      "mod_code": [
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        28,
        23
      ],
      "mod_code": [
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        28,
        23,
        25
      ],
      "mod_code": [
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;",
        "gets ( str ) ;",
        "if ( n <= ' 10 ' )"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        28,
        23,
        27
      ],
      "mod_code": [
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;",
        "gets ( str ) ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        28,
        25
      ],
      "mod_code": [
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;",
        "if ( n <= ' 10 ' )"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        28,
        25,
        27
      ],
      "mod_code": [
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;",
        "if ( n <= ' 10 ' )",
        "do"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        28,
        27
      ],
      "mod_code": [
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        23
      ],
      "mod_code": [
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "gets ( str ) ;"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        23,
        25
      ],
      "mod_code": [
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "gets ( str ) ;",
        "if ( n <= ' 10 ' )"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        23,
        25,
        27
      ],
      "mod_code": [
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "gets ( str ) ;",
        "if ( n <= ' 10 ' )",
        "do"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        23,
        27
      ],
      "mod_code": [
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "gets ( str ) ;",
        "do"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        25
      ],
      "mod_code": [
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "if ( n <= ' 10 ' )"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        25,
        27
      ],
      "mod_code": [
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "if ( n <= ' 10 ' )",
        "do"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        13,
        27
      ],
      "mod_code": [
        "for ( int i = p * p ; i <= n ; i ++ ) { prime [ i ] = false + p [ i ] = false ; }",
        "do"
      ],
      "err_line": 13,
      "err_msg": "invalid types ‘long long int[int]’ for array subscript"
    },
    {
      "mod_line": [
        28,
        23
      ],
      "mod_code": [
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;",
        "gets ( str ) ;"
      ],
      "err_line": 23,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        28,
        23,
        25
      ],
      "mod_code": [
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;",
        "gets ( str ) ;",
        "if ( n <= ' 10 ' )"
      ],
      "err_line": 23,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        28,
        23,
        25,
        27
      ],
      "mod_code": [
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;",
        "gets ( str ) ;",
        "if ( n <= ' 10 ' )",
        "do"
      ],
      "err_line": 23,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        28,
        23,
        27
      ],
      "mod_code": [
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;",
        "gets ( str ) ;",
        "do"
      ],
      "err_line": 23,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        28,
        25,
        27
      ],
      "mod_code": [
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;",
        "if ( n <= ' 10 ' )",
        "do"
      ],
      "err_line": 30,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        28,
        27
      ],
      "mod_code": [
        "cout << str [ 0 ] << \" \" << n - 2 << \" \" << str [ n - 1 ] << endl ;",
        "do"
      ],
      "err_line": 30,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        23,
        25
      ],
      "mod_code": [
        "gets ( str ) ;",
        "if ( n <= ' 10 ' )"
      ],
      "err_line": 23,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        23,
        25,
        27
      ],
      "mod_code": [
        "gets ( str ) ;",
        "if ( n <= ' 10 ' )",
        "do"
      ],
      "err_line": 23,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        23,
        27
      ],
      "mod_code": [
        "gets ( str ) ;",
        "do"
      ],
      "err_line": 23,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        25,
        27
      ],
      "mod_code": [
        "if ( n <= ' 10 ' )",
        "do"
      ],
      "err_line": 30,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}