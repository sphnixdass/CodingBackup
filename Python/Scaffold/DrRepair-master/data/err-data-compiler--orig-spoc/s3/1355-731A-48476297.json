{
  "meta": {
    "index": 1355,
    "hitid": "3THR0FZ95PN3BIGJII36FDB8M4JLO1",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "731A",
    "subid": "48476297"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer sum = 0",
      "code": "int sum = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "let string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "make char current = ' a '",
      "code": "char current = ' a ' ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 0 to s . length ( ) exclusive",
      "code": "for ( int i = 0 ; i < s . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if abs ( s [ i ] - current ) is more than 13",
      "code": "if ( abs ( s [ i ] - current ) > 13 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if s [ i ] is more than current",
      "code": "if ( s [ i ] > current )",
      "indent": 3
    },
    {
      "line": 8,
      "text": "add ( current - s [ i ] + 26 ) to sum",
      "code": "sum += ( current - s [ i ] + 26 ) ;",
      "indent": 4
    },
    {
      "line": 9,
      "text": "else if current is greater than s [ i ]",
      "code": "else if ( current > s [ i ] )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "set sum to sum + 26 - ( current - s [ i ] )",
      "code": "sum += 26 - ( current - s [ i ] ) ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "else do",
      "code": "else",
      "indent": 2
    },
    {
      "line": 12,
      "text": "if current is greater than s [ i ]",
      "code": "if ( current > s [ i ] )",
      "indent": 3
    },
    {
      "line": 13,
      "text": "set sum to sum + current - s [ i ]",
      "code": "sum += current - s [ i ] ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "otherwise",
      "code": "else",
      "indent": 3
    },
    {
      "line": 15,
      "text": "set sum to sum + s [ i ] - current",
      "code": "sum += s [ i ] - current ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 18,
      "text": "set current to s [ i ]",
      "code": "current = s [ i ] ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "display sum",
      "code": "cout << sum << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "char current = ' a '"
      ],
      "err_line": 5,
      "err_msg": "expected ‘,’ or ‘;’ before ‘for’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘current’"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "return else ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        3
      ],
      "mod_code": [
        "return else ;",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        3,
        6
      ],
      "mod_code": [
        "return else ;",
        "s >> s ;",
        "if ( abs ( s [ i ] - ' current ' ) > 13 )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        3,
        6,
        2
      ],
      "mod_code": [
        "return else ;",
        "s >> s ;",
        "if ( abs ( s [ i ] - ' current ' ) > 13 )",
        "string s = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        3,
        6,
        11
      ],
      "mod_code": [
        "return else ;",
        "s >> s ;",
        "if ( abs ( s [ i ] - ' current ' ) > 13 )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        3,
        6,
        7
      ],
      "mod_code": [
        "return else ;",
        "s >> s ;",
        "if ( abs ( s [ i ] - ' current ' ) > 13 )",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        3,
        2
      ],
      "mod_code": [
        "return else ;",
        "s >> s ;",
        "string s = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        3,
        2,
        11
      ],
      "mod_code": [
        "return else ;",
        "s >> s ;",
        "string s = 0 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        3,
        2,
        7
      ],
      "mod_code": [
        "return else ;",
        "s >> s ;",
        "string s = 0 ;",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        3,
        11
      ],
      "mod_code": [
        "return else ;",
        "s >> s ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        3,
        11,
        7
      ],
      "mod_code": [
        "return else ;",
        "s >> s ;",
        "do",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        3,
        7
      ],
      "mod_code": [
        "return else ;",
        "s >> s ;",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        14,
        6
      ],
      "mod_code": [
        "return else ;",
        "if ( abs ( s [ i ] - ' current ' ) > 13 )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        6,
        2
      ],
      "mod_code": [
        "return else ;",
        "if ( abs ( s [ i ] - ' current ' ) > 13 )",
        "string s = 0 ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        6,
        2,
        11
      ],
      "mod_code": [
        "return else ;",
        "if ( abs ( s [ i ] - ' current ' ) > 13 )",
        "string s = 0 ;",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        6,
        2,
        7
      ],
      "mod_code": [
        "return else ;",
        "if ( abs ( s [ i ] - ' current ' ) > 13 )",
        "string s = 0 ;",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        6,
        11
      ],
      "mod_code": [
        "return else ;",
        "if ( abs ( s [ i ] - ' current ' ) > 13 )",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        6,
        11,
        7
      ],
      "mod_code": [
        "return else ;",
        "if ( abs ( s [ i ] - ' current ' ) > 13 )",
        "do",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        6,
        7
      ],
      "mod_code": [
        "return else ;",
        "if ( abs ( s [ i ] - ' current ' ) > 13 )",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        2
      ],
      "mod_code": [
        "return else ;",
        "string s = 0 ;"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        2,
        11
      ],
      "mod_code": [
        "return else ;",
        "string s = 0 ;",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        2,
        11,
        7
      ],
      "mod_code": [
        "return else ;",
        "string s = 0 ;",
        "do",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        2,
        7
      ],
      "mod_code": [
        "return else ;",
        "string s = 0 ;",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        11
      ],
      "mod_code": [
        "return else ;",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        11,
        7
      ],
      "mod_code": [
        "return else ;",
        "do",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        14,
        7
      ],
      "mod_code": [
        "return else ;",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘else’"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "s >> s ;",
        "if ( abs ( s [ i ] - ' current ' ) > 13 )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        6,
        2
      ],
      "mod_code": [
        "s >> s ;",
        "if ( abs ( s [ i ] - ' current ' ) > 13 )",
        "string s = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        6,
        2,
        11
      ],
      "mod_code": [
        "s >> s ;",
        "if ( abs ( s [ i ] - ' current ' ) > 13 )",
        "string s = 0 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        6,
        2,
        7
      ],
      "mod_code": [
        "s >> s ;",
        "if ( abs ( s [ i ] - ' current ' ) > 13 )",
        "string s = 0 ;",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        6,
        11
      ],
      "mod_code": [
        "s >> s ;",
        "if ( abs ( s [ i ] - ' current ' ) > 13 )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        6,
        11,
        7
      ],
      "mod_code": [
        "s >> s ;",
        "if ( abs ( s [ i ] - ' current ' ) > 13 )",
        "do",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        6,
        7
      ],
      "mod_code": [
        "s >> s ;",
        "if ( abs ( s [ i ] - ' current ' ) > 13 )",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "s >> s ;",
        "string s = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        2,
        11
      ],
      "mod_code": [
        "s >> s ;",
        "string s = 0 ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        2,
        11,
        7
      ],
      "mod_code": [
        "s >> s ;",
        "string s = 0 ;",
        "do",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        2,
        7
      ],
      "mod_code": [
        "s >> s ;",
        "string s = 0 ;",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "s >> s ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        11,
        7
      ],
      "mod_code": [
        "s >> s ;",
        "do",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        2,
        11
      ],
      "mod_code": [
        "if ( abs ( s [ i ] - ' current ' ) > 13 )",
        "string s = 0 ;",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘current’"
    },
    {
      "mod_line": [
        6,
        2,
        11,
        7
      ],
      "mod_code": [
        "if ( abs ( s [ i ] - ' current ' ) > 13 )",
        "string s = 0 ;",
        "do",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘current’"
    },
    {
      "mod_line": [
        6,
        11
      ],
      "mod_code": [
        "if ( abs ( s [ i ] - ' current ' ) > 13 )",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘current’"
    },
    {
      "mod_line": [
        6,
        11,
        7
      ],
      "mod_code": [
        "if ( abs ( s [ i ] - ' current ' ) > 13 )",
        "do",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘current’"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "string s = 0 ;",
        "do"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘current’"
    },
    {
      "mod_line": [
        2,
        11,
        7
      ],
      "mod_code": [
        "string s = 0 ;",
        "do",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘current’"
    },
    {
      "mod_line": [
        11,
        7
      ],
      "mod_code": [
        "do",
        "if ( s [ i ] > ' current ' )"
      ],
      "err_line": 18,
      "err_msg": "expected ‘while’ before ‘current’"
    }
  ]
}