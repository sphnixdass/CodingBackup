{
  "meta": {
    "index": 944,
    "hitid": "3DZKABX2ZIZ5YYVA6HWL7MFTOOXVCS",
    "workerid": "AIWEXPJAU66D9",
    "probid": "557A",
    "subid": "44362255"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , mn1 , mx1 , mn2 , mx2 , mn3 and mx3",
      "code": "int n , mn1 , mx1 , mn2 , mx2 , mn3 , mx3 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read input to n , mn1 , mx1 , mn2 , mx2 , mn3 and mx3",
      "code": "cin >> n >> mn1 >> mx1 >> mn2 >> mx2 >> mn3 >> mx3 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while mn1 + mn2 + mn3 < n",
      "code": "while ( mn1 + mn2 + mn3 < n )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if mn1 is less than mx1",
      "code": "if ( mn1 < mx1 )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "increment mn1",
      "code": "mn1 ++ ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "else if mn2 < mx2",
      "code": "else if ( mn2 < mx2 )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment mn2 by one",
      "code": "mn2 ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if mn3 < mx3",
      "code": "else if ( mn3 < mx3 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment mn3",
      "code": "mn3 ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print mn1 , \" \" , mn2 , \" \" and mn3",
      "code": "cout << mn1 << \" \" << mn2 << \" \" << mn3 << endl ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , mn1 , mx1 , mn2 , mn3 , mn3 , mx3 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int mn3’"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "else if ( mn2 < ' mx2 ' )",
        "int n , mn1 , mx1 , mn2 , mn3 , mn3 , mx3 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int mn3’"
    },
    {
      "mod_line": [
        6,
        1,
        4
      ],
      "mod_code": [
        "else if ( mn2 < ' mx2 ' )",
        "int n , mn1 , mx1 , mn2 , mn3 , mn3 , mx3 ;",
        "if ( mn1 <= mx1 )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int mn3’"
    },
    {
      "mod_line": [
        6,
        1,
        4,
        11
      ],
      "mod_code": [
        "else if ( mn2 < ' mx2 ' )",
        "int n , mn1 , mx1 , mn2 , mn3 , mn3 , mx3 ;",
        "if ( mn1 <= mx1 )",
        "cout << mn1 << \" \" << mn2 << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int mn3’"
    },
    {
      "mod_line": [
        6,
        1,
        4,
        2
      ],
      "mod_code": [
        "else if ( mn2 < ' mx2 ' )",
        "int n , mn1 , mx1 , mn2 , mn3 , mn3 , mx3 ;",
        "if ( mn1 <= mx1 )",
        "cin >> n >> mn1 >> mx1 >> mn2 >> mn3 >> mn3 >> mx3 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int mn3’"
    },
    {
      "mod_line": [
        6,
        1,
        11
      ],
      "mod_code": [
        "else if ( mn2 < ' mx2 ' )",
        "int n , mn1 , mx1 , mn2 , mn3 , mn3 , mx3 ;",
        "cout << mn1 << \" \" << mn2 << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int mn3’"
    },
    {
      "mod_line": [
        6,
        1,
        11,
        2
      ],
      "mod_code": [
        "else if ( mn2 < ' mx2 ' )",
        "int n , mn1 , mx1 , mn2 , mn3 , mn3 , mx3 ;",
        "cout << mn1 << \" \" << mn2 << \" \\n \" ;",
        "cin >> n >> mn1 >> mx1 >> mn2 >> mn3 >> mn3 >> mx3 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int mn3’"
    },
    {
      "mod_line": [
        6,
        1,
        2
      ],
      "mod_code": [
        "else if ( mn2 < ' mx2 ' )",
        "int n , mn1 , mx1 , mn2 , mn3 , mn3 , mx3 ;",
        "cin >> n >> mn1 >> mx1 >> mn2 >> mn3 >> mn3 >> mx3 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int mn3’"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "int n , mn1 , mx1 , mn2 , mn3 , mn3 , mx3 ;",
        "if ( mn1 <= mx1 )"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int mn3’"
    },
    {
      "mod_line": [
        1,
        4,
        11
      ],
      "mod_code": [
        "int n , mn1 , mx1 , mn2 , mn3 , mn3 , mx3 ;",
        "if ( mn1 <= mx1 )",
        "cout << mn1 << \" \" << mn2 << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int mn3’"
    },
    {
      "mod_line": [
        1,
        4,
        11,
        2
      ],
      "mod_code": [
        "int n , mn1 , mx1 , mn2 , mn3 , mn3 , mx3 ;",
        "if ( mn1 <= mx1 )",
        "cout << mn1 << \" \" << mn2 << \" \\n \" ;",
        "cin >> n >> mn1 >> mx1 >> mn2 >> mn3 >> mn3 >> mx3 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int mn3’"
    },
    {
      "mod_line": [
        1,
        4,
        2
      ],
      "mod_code": [
        "int n , mn1 , mx1 , mn2 , mn3 , mn3 , mx3 ;",
        "if ( mn1 <= mx1 )",
        "cin >> n >> mn1 >> mx1 >> mn2 >> mn3 >> mn3 >> mx3 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int mn3’"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "int n , mn1 , mx1 , mn2 , mn3 , mn3 , mx3 ;",
        "cout << mn1 << \" \" << mn2 << \" \\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int mn3’"
    },
    {
      "mod_line": [
        1,
        11,
        2
      ],
      "mod_code": [
        "int n , mn1 , mx1 , mn2 , mn3 , mn3 , mx3 ;",
        "cout << mn1 << \" \" << mn2 << \" \\n \" ;",
        "cin >> n >> mn1 >> mx1 >> mn2 >> mn3 >> mn3 >> mx3 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int mn3’"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "int n , mn1 , mx1 , mn2 , mn3 , mn3 , mx3 ;",
        "cin >> n >> mn1 >> mx1 >> mn2 >> mn3 >> mn3 >> mx3 ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int mn3’"
    }
  ]
}