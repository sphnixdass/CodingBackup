{
  "meta": {
    "index": 2624,
    "hitid": "3XABXM4AJ1ZBHN9G36M6ZDK2GI48Q1",
    "workerid": "A1APYLD4DUK33J",
    "probid": "707A",
    "subid": "48649302"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers n , m",
      "code": "int n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create string s with s = \" # Black & White \"",
      "code": "string s = \" #Black&White \" ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read m",
      "code": "cin >> m ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "create 2d character array p with size n by m",
      "code": "char p [ n ] [ m ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "read p [ i ] [ j ]",
      "code": "cin >> p [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "if p [ i ] [ j ] is not ' W ' and p [ i ] [ j ] is not ' B ' and p [ i ] [ j ] is not ' G ' , set s to \" # Color \"",
      "code": "if ( p [ i ] [ j ] != ' W ' && p [ i ] [ j ] != ' B ' && p [ i ] [ j ] != ' G ' ) { s = \" #Color \" ; }",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print s print newline",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string s = \" # Black ( \" ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string s = \" # \" , \" s \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "gets ( m ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "char p [ n ] [ j ] ;"
      ],
      "err_line": 5,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "string s = \" # Black ( \" ) ;",
        "if ( p [ i ] [ j ] != ' W ' && p [ i ] [ j ] != ' B ' && p [ i ] [ j ] != ' # ' ) s = \" # \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        9,
        4
      ],
      "mod_code": [
        "string s = \" # Black ( \" ) ;",
        "if ( p [ i ] [ j ] != ' W ' && p [ i ] [ j ] != ' B ' && p [ i ] [ j ] != ' # ' ) s = \" # \" ;",
        "gets ( m ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        9,
        4,
        3
      ],
      "mod_code": [
        "string s = \" # Black ( \" ) ;",
        "if ( p [ i ] [ j ] != ' W ' && p [ i ] [ j ] != ' B ' && p [ i ] [ j ] != ' # ' ) s = \" # \" ;",
        "gets ( m ) ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        9,
        4,
        8
      ],
      "mod_code": [
        "string s = \" # Black ( \" ) ;",
        "if ( p [ i ] [ j ] != ' W ' && p [ i ] [ j ] != ' B ' && p [ i ] [ j ] != ' # ' ) s = \" # \" ;",
        "gets ( m ) ;",
        "cout << p [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        9,
        3
      ],
      "mod_code": [
        "string s = \" # Black ( \" ) ;",
        "if ( p [ i ] [ j ] != ' W ' && p [ i ] [ j ] != ' B ' && p [ i ] [ j ] != ' # ' ) s = \" # \" ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        9,
        3,
        8
      ],
      "mod_code": [
        "string s = \" # Black ( \" ) ;",
        "if ( p [ i ] [ j ] != ' W ' && p [ i ] [ j ] != ' B ' && p [ i ] [ j ] != ' # ' ) s = \" # \" ;",
        "cin >> N ;",
        "cout << p [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        9,
        8
      ],
      "mod_code": [
        "string s = \" # Black ( \" ) ;",
        "if ( p [ i ] [ j ] != ' W ' && p [ i ] [ j ] != ' B ' && p [ i ] [ j ] != ' # ' ) s = \" # \" ;",
        "cout << p [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "string s = \" # Black ( \" ) ;",
        "gets ( m ) ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        3
      ],
      "mod_code": [
        "string s = \" # Black ( \" ) ;",
        "gets ( m ) ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        3,
        8
      ],
      "mod_code": [
        "string s = \" # Black ( \" ) ;",
        "gets ( m ) ;",
        "cin >> N ;",
        "cout << p [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        4,
        8
      ],
      "mod_code": [
        "string s = \" # Black ( \" ) ;",
        "gets ( m ) ;",
        "cout << p [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "string s = \" # Black ( \" ) ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        3,
        8
      ],
      "mod_code": [
        "string s = \" # Black ( \" ) ;",
        "cin >> N ;",
        "cout << p [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "string s = \" # Black ( \" ) ;",
        "cout << p [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected ‘,’ or ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        9,
        4
      ],
      "mod_code": [
        "if ( p [ i ] [ j ] != ' W ' && p [ i ] [ j ] != ' B ' && p [ i ] [ j ] != ' # ' ) s = \" # \" ;",
        "gets ( m ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        4,
        2
      ],
      "mod_code": [
        "if ( p [ i ] [ j ] != ' W ' && p [ i ] [ j ] != ' B ' && p [ i ] [ j ] != ' # ' ) s = \" # \" ;",
        "gets ( m ) ;",
        "string s = \" # \" , \" s \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        9,
        4,
        2,
        3
      ],
      "mod_code": [
        "if ( p [ i ] [ j ] != ' W ' && p [ i ] [ j ] != ' B ' && p [ i ] [ j ] != ' # ' ) s = \" # \" ;",
        "gets ( m ) ;",
        "string s = \" # \" , \" s \" ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        9,
        4,
        2,
        8
      ],
      "mod_code": [
        "if ( p [ i ] [ j ] != ' W ' && p [ i ] [ j ] != ' B ' && p [ i ] [ j ] != ' # ' ) s = \" # \" ;",
        "gets ( m ) ;",
        "string s = \" # \" , \" s \" ;",
        "cout << p [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        9,
        4,
        3
      ],
      "mod_code": [
        "if ( p [ i ] [ j ] != ' W ' && p [ i ] [ j ] != ' B ' && p [ i ] [ j ] != ' # ' ) s = \" # \" ;",
        "gets ( m ) ;",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        4,
        3,
        8
      ],
      "mod_code": [
        "if ( p [ i ] [ j ] != ' W ' && p [ i ] [ j ] != ' B ' && p [ i ] [ j ] != ' # ' ) s = \" # \" ;",
        "gets ( m ) ;",
        "cin >> N ;",
        "cout << p [ i ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        4,
        8
      ],
      "mod_code": [
        "if ( p [ i ] [ j ] != ' W ' && p [ i ] [ j ] != ' B ' && p [ i ] [ j ] != ' # ' ) s = \" # \" ;",
        "gets ( m ) ;",
        "cout << p [ i ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "if ( p [ i ] [ j ] != ' W ' && p [ i ] [ j ] != ' B ' && p [ i ] [ j ] != ' # ' ) s = \" # \" ;",
        "string s = \" # \" , \" s \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        9,
        2,
        3
      ],
      "mod_code": [
        "if ( p [ i ] [ j ] != ' W ' && p [ i ] [ j ] != ' B ' && p [ i ] [ j ] != ' # ' ) s = \" # \" ;",
        "string s = \" # \" , \" s \" ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        9,
        2,
        3,
        8
      ],
      "mod_code": [
        "if ( p [ i ] [ j ] != ' W ' && p [ i ] [ j ] != ' B ' && p [ i ] [ j ] != ' # ' ) s = \" # \" ;",
        "string s = \" # \" , \" s \" ;",
        "cin >> N ;",
        "cout << p [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        9,
        2,
        8
      ],
      "mod_code": [
        "if ( p [ i ] [ j ] != ' W ' && p [ i ] [ j ] != ' B ' && p [ i ] [ j ] != ' # ' ) s = \" # \" ;",
        "string s = \" # \" , \" s \" ;",
        "cout << p [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "if ( p [ i ] [ j ] != ' W ' && p [ i ] [ j ] != ' B ' && p [ i ] [ j ] != ' # ' ) s = \" # \" ;",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        9,
        3,
        8
      ],
      "mod_code": [
        "if ( p [ i ] [ j ] != ' W ' && p [ i ] [ j ] != ' B ' && p [ i ] [ j ] != ' # ' ) s = \" # \" ;",
        "cin >> N ;",
        "cout << p [ i ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "gets ( m ) ;",
        "string s = \" # \" , \" s \" ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        4,
        2,
        3
      ],
      "mod_code": [
        "gets ( m ) ;",
        "string s = \" # \" , \" s \" ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        4,
        2,
        3,
        8
      ],
      "mod_code": [
        "gets ( m ) ;",
        "string s = \" # \" , \" s \" ;",
        "cin >> N ;",
        "cout << p [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        4,
        2,
        8
      ],
      "mod_code": [
        "gets ( m ) ;",
        "string s = \" # \" , \" s \" ;",
        "cout << p [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "gets ( m ) ;",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        3,
        8
      ],
      "mod_code": [
        "gets ( m ) ;",
        "cin >> N ;",
        "cout << p [ i ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "gets ( m ) ;",
        "cout << p [ i ] [ j ] ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "string s = \" # \" , \" s \" ;",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2,
        3,
        8
      ],
      "mod_code": [
        "string s = \" # \" , \" s \" ;",
        "cin >> N ;",
        "cout << p [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "string s = \" # \" , \" s \" ;",
        "cout << p [ i ] [ j ] ;"
      ],
      "err_line": 2,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "cin >> N ;",
        "cout << p [ i ] [ j ] ;"
      ],
      "err_line": 3,
      "err_msg": "‘N’ was not declared in this scope"
    }
  ]
}