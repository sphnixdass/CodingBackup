{
  "meta": {
    "index": 1069,
    "hitid": "3G4VVJO6PZAACCA2CI4KPD3J67VKPU",
    "workerid": "A1APYLD4DUK33J",
    "probid": "11A",
    "subid": "46119189"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare fp with long longs n , p as arguments , returning long long",
      "code": "long long fp ( long long n , long long p )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "if p is 0 , return 1 from function",
      "code": "if ( p == 0 ) return 1 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "if p is 1 , return n from function",
      "code": "if ( p == 1 ) return n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create long long res with res = result of run fp with n , p / 2 as arguments % integer casted 1e9 + 7",
      "code": "long long res = fp ( n , p / 2 ) % int ( 1e9 + 7 ) ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set res to ( ( res % integer casted 1e9 + 7 ) * ( res % integer casted 1e9 + 7 ) ) % integer casted 1e9 + 7",
      "code": "res = ( ( res % int ( 1e9 + 7 ) ) * ( res % int ( 1e9 + 7 ) ) ) % int ( 1e9 + 7 ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if p % 2 , set res to ( res * n ) % integer casted 1e9 + 7",
      "code": "if ( p % 2 ) res = ( res * n ) % int ( 1e9 + 7 ) ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "return result of res % integer casted 1e9 + 7 from function",
      "code": "return res % int ( 1e9 + 7 ) ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 8,
      "text": "create long longs n , m , a , ans with ans = 0 , create long long array arr with size 100005",
      "code": "long long n , m , arr [ 100005 ] , a , ans = 0 ;",
      "indent": 0
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 10,
      "text": "read n read m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "read arr [ i ]",
      "code": "cin >> arr [ i ] ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if i is true",
      "code": "if ( i )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "if arr [ i ] is less than or equal to arr [ i - 1 ]",
      "code": "if ( arr [ i ] <= arr [ i - 1 ] )",
      "indent": 3
    },
    {
      "line": 15,
      "text": "set a to ( arr [ i - 1 ] - arr [ i ] ) / m",
      "code": "a = ( arr [ i - 1 ] - arr [ i ] ) / m ;",
      "indent": 4
    },
    {
      "line": 16,
      "text": "increment ans by a",
      "code": "ans += a ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "increment arr [ i ] by a * m",
      "code": "arr [ i ] += a * m ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "if arr [ i ] is less than or equal to arr [ i - 1 ] , increment arr [ i ] by m , increment ans",
      "code": "if ( arr [ i ] <= arr [ i - 1 ] ) arr [ i ] += m , ans ++ ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "print ans print ' \\ n '",
      "code": "cout << ans << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "return res % 1e9 + 7 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans ;"
      ],
      "err_line": 8,
      "err_msg": "redefinition of ‘long long int a [100005]’"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "redefinition of ‘long long int a [100005]’"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "cin >> arr . size ( ) ;"
      ],
      "err_line": 12,
      "err_msg": "request for member ‘size’ in ‘arr’, which is of non-class type ‘long long int [100005]’"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;",
        "return res % 1e9 + 7 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        4,
        6,
        8
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;",
        "return res % 1e9 + 7 ;",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        4,
        6,
        8,
        18
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;",
        "return res % 1e9 + 7 ;",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans ;",
        "if ( arr [ i ] <= arr [ i - 1 ] ) { arr [ i ] += ans ; }"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        4,
        6,
        8,
        17
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;",
        "return res % 1e9 + 7 ;",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans ;",
        "arr [ i ] += m * m ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        4,
        6,
        18
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;",
        "return res % 1e9 + 7 ;",
        "if ( arr [ i ] <= arr [ i - 1 ] ) { arr [ i ] += ans ; }"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        4,
        6,
        18,
        8
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;",
        "return res % 1e9 + 7 ;",
        "if ( arr [ i ] <= arr [ i - 1 ] ) { arr [ i ] += ans ; }",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        4,
        6,
        18,
        17
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;",
        "return res % 1e9 + 7 ;",
        "if ( arr [ i ] <= arr [ i - 1 ] ) { arr [ i ] += ans ; }",
        "arr [ i ] += m * m ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        4,
        6,
        8
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;",
        "return res % 1e9 + 7 ;",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        4,
        6,
        8,
        17
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;",
        "return res % 1e9 + 7 ;",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans = 0 ;",
        "arr [ i ] += m * m ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        4,
        6,
        17
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;",
        "return res % 1e9 + 7 ;",
        "arr [ i ] += m * m ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        4,
        8,
        18
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans ;",
        "if ( arr [ i ] <= arr [ i - 1 ] ) { arr [ i ] += ans ; }"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        4,
        8,
        18,
        17
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans ;",
        "if ( arr [ i ] <= arr [ i - 1 ] ) { arr [ i ] += ans ; }",
        "arr [ i ] += m * m ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        4,
        8,
        17
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans ;",
        "arr [ i ] += m * m ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        4,
        18
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;",
        "if ( arr [ i ] <= arr [ i - 1 ] ) { arr [ i ] += ans ; }"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        4,
        18,
        8
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;",
        "if ( arr [ i ] <= arr [ i - 1 ] ) { arr [ i ] += ans ; }",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        4,
        18,
        8,
        17
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;",
        "if ( arr [ i ] <= arr [ i - 1 ] ) { arr [ i ] += ans ; }",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans = 0 ;",
        "arr [ i ] += m * m ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        4,
        18,
        17
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;",
        "if ( arr [ i ] <= arr [ i - 1 ] ) { arr [ i ] += ans ; }",
        "arr [ i ] += m * m ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        4,
        8,
        17
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans = 0 ;",
        "arr [ i ] += m * m ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        4,
        17
      ],
      "mod_code": [
        "res = ( ( res % 1e9 ) * 7 ) * ( res % 7 ) * ( int ) 1e9 + 7 ;",
        "arr [ i ] += m * m ;"
      ],
      "err_line": 4,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "return res % 1e9 + 7 ;",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        8,
        18
      ],
      "mod_code": [
        "return res % 1e9 + 7 ;",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans ;",
        "if ( arr [ i ] <= arr [ i - 1 ] ) { arr [ i ] += ans ; }"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        8,
        18,
        17
      ],
      "mod_code": [
        "return res % 1e9 + 7 ;",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans ;",
        "if ( arr [ i ] <= arr [ i - 1 ] ) { arr [ i ] += ans ; }",
        "arr [ i ] += m * m ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        8,
        17
      ],
      "mod_code": [
        "return res % 1e9 + 7 ;",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans ;",
        "arr [ i ] += m * m ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        18
      ],
      "mod_code": [
        "return res % 1e9 + 7 ;",
        "if ( arr [ i ] <= arr [ i - 1 ] ) { arr [ i ] += ans ; }"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        18,
        8
      ],
      "mod_code": [
        "return res % 1e9 + 7 ;",
        "if ( arr [ i ] <= arr [ i - 1 ] ) { arr [ i ] += ans ; }",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        18,
        8,
        17
      ],
      "mod_code": [
        "return res % 1e9 + 7 ;",
        "if ( arr [ i ] <= arr [ i - 1 ] ) { arr [ i ] += ans ; }",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans = 0 ;",
        "arr [ i ] += m * m ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        18,
        17
      ],
      "mod_code": [
        "return res % 1e9 + 7 ;",
        "if ( arr [ i ] <= arr [ i - 1 ] ) { arr [ i ] += ans ; }",
        "arr [ i ] += m * m ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "return res % 1e9 + 7 ;",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        8,
        17
      ],
      "mod_code": [
        "return res % 1e9 + 7 ;",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans = 0 ;",
        "arr [ i ] += m * m ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        6,
        17
      ],
      "mod_code": [
        "return res % 1e9 + 7 ;",
        "arr [ i ] += m * m ;"
      ],
      "err_line": 6,
      "err_msg": "invalid operands of types ‘long long int’ and ‘double’ to binary ‘operator%’"
    },
    {
      "mod_line": [
        8,
        18
      ],
      "mod_code": [
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans ;",
        "if ( arr [ i ] <= arr [ i - 1 ] ) { arr [ i ] += ans ; }"
      ],
      "err_line": 8,
      "err_msg": "redefinition of ‘long long int a [100005]’"
    },
    {
      "mod_line": [
        8,
        18,
        17
      ],
      "mod_code": [
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans ;",
        "if ( arr [ i ] <= arr [ i - 1 ] ) { arr [ i ] += ans ; }",
        "arr [ i ] += m * m ;"
      ],
      "err_line": 8,
      "err_msg": "redefinition of ‘long long int a [100005]’"
    },
    {
      "mod_line": [
        8,
        17
      ],
      "mod_code": [
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans ;",
        "arr [ i ] += m * m ;"
      ],
      "err_line": 8,
      "err_msg": "redefinition of ‘long long int a [100005]’"
    },
    {
      "mod_line": [
        18,
        8
      ],
      "mod_code": [
        "if ( arr [ i ] <= arr [ i - 1 ] ) { arr [ i ] += ans ; }",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans = 0 ;"
      ],
      "err_line": 8,
      "err_msg": "redefinition of ‘long long int a [100005]’"
    },
    {
      "mod_line": [
        18,
        8,
        17
      ],
      "mod_code": [
        "if ( arr [ i ] <= arr [ i - 1 ] ) { arr [ i ] += ans ; }",
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans = 0 ;",
        "arr [ i ] += m * m ;"
      ],
      "err_line": 8,
      "err_msg": "redefinition of ‘long long int a [100005]’"
    },
    {
      "mod_line": [
        8,
        17
      ],
      "mod_code": [
        "long long n , m , a [ 100005 ] , a [ 100005 ] , ans = 0 ;",
        "arr [ i ] += m * m ;"
      ],
      "err_line": 8,
      "err_msg": "redefinition of ‘long long int a [100005]’"
    }
  ]
}