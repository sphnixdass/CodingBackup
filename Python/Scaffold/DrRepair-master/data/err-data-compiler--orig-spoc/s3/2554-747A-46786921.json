{
  "meta": {
    "index": 2554,
    "hitid": "3126F2F5F8X7QCISGWTHRIQENCGEPQ",
    "workerid": "A1AYVATMT88U1W",
    "probid": "747A",
    "subid": "46786921"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let m be a double integer",
      "code": "double m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "while read m",
      "code": "while ( cin >> m )",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let a , b be integers",
      "code": "int a , b ;",
      "indent": 2
    },
    {
      "line": 4,
      "text": "double integer y equals square root of m",
      "code": "double y = sqrt ( m ) ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "x equals integer value of y",
      "code": "int x = ( int ) y ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "n equals integer value of m",
      "code": "int n = int ( m ) ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "if the remainder of n divided by x equals 0",
      "code": "if ( n % x == 0 )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "a equals to x",
      "code": "a = x ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "b equals to n / x",
      "code": "b = n / x ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "while n % x not equals 0 , decrement x value by 1",
      "code": "while ( n % x != 0 ) { x -- ; }",
      "indent": 3
    },
    {
      "line": 12,
      "text": "a equals to x",
      "code": "a = x ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "b equals to n / x",
      "code": "b = n / x ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "print a space b and a new line",
      "code": "cout << a << \" \" << b << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "x = int ( y ) ;"
      ],
      "err_line": 5,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( m >> m )"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int x = * y ;"
      ],
      "err_line": 5,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘double’)"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘{’ token"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "while ( m >> m )"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        2,
        8
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "while ( m >> m )",
        "a /= x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        2,
        8,
        10
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "while ( m >> m )",
        "a /= x ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        2,
        8,
        13
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "while ( m >> m )",
        "a /= x ;",
        "b /= x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        2,
        8,
        9
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "while ( m >> m )",
        "a /= x ;",
        "b /= x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        2,
        10
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "while ( m >> m )",
        "do"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        2,
        10,
        13
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "while ( m >> m )",
        "do",
        "b /= x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        2,
        10,
        9
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "while ( m >> m )",
        "do",
        "b /= x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        2,
        13
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "while ( m >> m )",
        "b /= x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        2,
        13,
        9
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "while ( m >> m )",
        "b /= x ;",
        "b /= x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        2,
        9
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "while ( m >> m )",
        "b /= x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "a /= x ;"
      ],
      "err_line": 5,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        10
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "a /= x ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        10,
        13
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "a /= x ;",
        "do",
        "b /= x ;"
      ],
      "err_line": 5,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        10,
        9
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "a /= x ;",
        "do",
        "b /= x ;"
      ],
      "err_line": 5,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        13
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "a /= x ;",
        "b /= x ;"
      ],
      "err_line": 5,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        13,
        9
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "a /= x ;",
        "b /= x ;",
        "b /= x ;"
      ],
      "err_line": 5,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        9
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "a /= x ;",
        "b /= x ;"
      ],
      "err_line": 5,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10,
        13
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "do",
        "b /= x ;"
      ],
      "err_line": 5,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10,
        13,
        9
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "do",
        "b /= x ;",
        "b /= x ;"
      ],
      "err_line": 5,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10,
        9
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "do",
        "b /= x ;"
      ],
      "err_line": 5,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "b /= x ;"
      ],
      "err_line": 5,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        13,
        9
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "b /= x ;",
        "b /= x ;"
      ],
      "err_line": 5,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        9
      ],
      "mod_code": [
        "x = int ( y ) ;",
        "b /= x ;"
      ],
      "err_line": 5,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "while ( m >> m )",
        "a /= x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        8,
        10
      ],
      "mod_code": [
        "while ( m >> m )",
        "a /= x ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        8,
        10,
        13
      ],
      "mod_code": [
        "while ( m >> m )",
        "a /= x ;",
        "do",
        "b /= x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        8,
        10,
        9
      ],
      "mod_code": [
        "while ( m >> m )",
        "a /= x ;",
        "do",
        "b /= x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        8,
        13
      ],
      "mod_code": [
        "while ( m >> m )",
        "a /= x ;",
        "b /= x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        8,
        13,
        9
      ],
      "mod_code": [
        "while ( m >> m )",
        "a /= x ;",
        "b /= x ;",
        "b /= x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        8,
        9
      ],
      "mod_code": [
        "while ( m >> m )",
        "a /= x ;",
        "b /= x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "while ( m >> m )",
        "do"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        10,
        13
      ],
      "mod_code": [
        "while ( m >> m )",
        "do",
        "b /= x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        10,
        13,
        9
      ],
      "mod_code": [
        "while ( m >> m )",
        "do",
        "b /= x ;",
        "b /= x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        10,
        9
      ],
      "mod_code": [
        "while ( m >> m )",
        "do",
        "b /= x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "while ( m >> m )",
        "b /= x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        13,
        9
      ],
      "mod_code": [
        "while ( m >> m )",
        "b /= x ;",
        "b /= x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        2,
        9
      ],
      "mod_code": [
        "while ( m >> m )",
        "b /= x ;"
      ],
      "err_line": 2,
      "err_msg": "invalid operands of types ‘double’ and ‘double’ to binary ‘operator>>’"
    },
    {
      "mod_line": [
        8,
        10
      ],
      "mod_code": [
        "a /= x ;",
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        10,
        13
      ],
      "mod_code": [
        "a /= x ;",
        "do",
        "b /= x ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        10,
        13,
        9
      ],
      "mod_code": [
        "a /= x ;",
        "do",
        "b /= x ;",
        "b /= x ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘{’ token"
    },
    {
      "mod_line": [
        8,
        10,
        9
      ],
      "mod_code": [
        "a /= x ;",
        "do",
        "b /= x ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        13
      ],
      "mod_code": [
        "do",
        "b /= x ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        13,
        9
      ],
      "mod_code": [
        "do",
        "b /= x ;",
        "b /= x ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘{’ token"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "do",
        "b /= x ;"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘{’ token"
    }
  ]
}