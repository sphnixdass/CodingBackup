{
  "meta": {
    "index": 1753,
    "hitid": "3R15W654VDN6WUTZXVVA4I68153QLG",
    "workerid": "A1AYVATMT88U1W",
    "probid": "71A",
    "subid": "49067883"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let t , k be integers",
      "code": "int t , k ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read t",
      "code": "cin >> t ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for k = 0 to t exclusive",
      "code": "for ( k = 0 ; k < t ; k ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "let n be a integer",
      "code": "int n ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "a = array of characters of length 102",
      "code": "char a [ 102 ] ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read a",
      "code": "cin >> a ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "n is equal to string length of a - 2",
      "code": "n = strlen ( a ) - 2 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if n + 2 < = 10",
      "code": "if ( n + 2 <= 10 )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "print a",
      "code": "cout << a ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else do the following",
      "code": "else",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print a [ 0 ] and n and a [ n + 1 ]",
      "code": "cout << a [ 0 ] << n << a [ n + 1 ] ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "print newline",
      "code": "cout << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "string a [ 102 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [102] {aka std::__cxx11::basic_string<char> [102]}’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "n = a . size ( ) - 2 ;"
      ],
      "err_line": 7,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘char [102]’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 12,
      "err_msg": "expected ‘while’ before ‘cout’"
    },
    {
      "mod_line": [
        7,
        9,
        11,
        5
      ],
      "mod_code": [
        "n = strlen ( a - 2 ) ;",
        "cout << a << endl ;",
        "cout << a [ 0 ] << \" \" << n << \" \" << a [ n + 1 ] << endl ;",
        "string a [ 102 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [102] {aka std::__cxx11::basic_string<char> [102]}’)"
    },
    {
      "mod_line": [
        7,
        9,
        11,
        2
      ],
      "mod_code": [
        "n = strlen ( a - 2 ) ;",
        "cout << a << endl ;",
        "cout << a [ 0 ] << \" \" << n << \" \" << a [ n + 1 ] << endl ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        11,
        5
      ],
      "mod_code": [
        "n = strlen ( a - 2 ) ;",
        "cout << a << endl ;",
        "cout << a [ 0 ] << n << \" \" << a [ n + 1 ] << endl ;",
        "string a [ 102 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [102] {aka std::__cxx11::basic_string<char> [102]}’)"
    },
    {
      "mod_line": [
        7,
        9,
        11,
        2
      ],
      "mod_code": [
        "n = strlen ( a - 2 ) ;",
        "cout << a << endl ;",
        "cout << a [ 0 ] << n << \" \" << a [ n + 1 ] << endl ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        5
      ],
      "mod_code": [
        "n = strlen ( a - 2 ) ;",
        "cout << a << endl ;",
        "string a [ 102 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [102] {aka std::__cxx11::basic_string<char> [102]}’)"
    },
    {
      "mod_line": [
        7,
        9,
        5,
        2
      ],
      "mod_code": [
        "n = strlen ( a - 2 ) ;",
        "cout << a << endl ;",
        "string a [ 102 ] ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        9,
        2
      ],
      "mod_code": [
        "n = strlen ( a - 2 ) ;",
        "cout << a << endl ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        11,
        5
      ],
      "mod_code": [
        "n = strlen ( a - 2 ) ;",
        "cout << a [ 0 ] << \" \" << n << \" \" << a [ n + 1 ] << endl ;",
        "string a [ 102 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [102] {aka std::__cxx11::basic_string<char> [102]}’)"
    },
    {
      "mod_line": [
        7,
        11,
        5,
        2
      ],
      "mod_code": [
        "n = strlen ( a - 2 ) ;",
        "cout << a [ 0 ] << \" \" << n << \" \" << a [ n + 1 ] << endl ;",
        "string a [ 102 ] ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        11,
        2
      ],
      "mod_code": [
        "n = strlen ( a - 2 ) ;",
        "cout << a [ 0 ] << \" \" << n << \" \" << a [ n + 1 ] << endl ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        11,
        5
      ],
      "mod_code": [
        "n = strlen ( a - 2 ) ;",
        "cout << a [ 0 ] << n << \" \" << a [ n + 1 ] << endl ;",
        "string a [ 102 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [102] {aka std::__cxx11::basic_string<char> [102]}’)"
    },
    {
      "mod_line": [
        7,
        11,
        5,
        2
      ],
      "mod_code": [
        "n = strlen ( a - 2 ) ;",
        "cout << a [ 0 ] << n << \" \" << a [ n + 1 ] << endl ;",
        "string a [ 102 ] ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        11,
        2
      ],
      "mod_code": [
        "n = strlen ( a - 2 ) ;",
        "cout << a [ 0 ] << n << \" \" << a [ n + 1 ] << endl ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        5
      ],
      "mod_code": [
        "n = strlen ( a - 2 ) ;",
        "string a [ 102 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [102] {aka std::__cxx11::basic_string<char> [102]}’)"
    },
    {
      "mod_line": [
        7,
        5,
        2
      ],
      "mod_code": [
        "n = strlen ( a - 2 ) ;",
        "string a [ 102 ] ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "n = strlen ( a - 2 ) ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        11,
        5
      ],
      "mod_code": [
        "cout << a << endl ;",
        "cout << a [ 0 ] << \" \" << n << \" \" << a [ n + 1 ] << endl ;",
        "string a [ 102 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [102] {aka std::__cxx11::basic_string<char> [102]}’)"
    },
    {
      "mod_line": [
        9,
        11,
        5,
        2
      ],
      "mod_code": [
        "cout << a << endl ;",
        "cout << a [ 0 ] << \" \" << n << \" \" << a [ n + 1 ] << endl ;",
        "string a [ 102 ] ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        11,
        2
      ],
      "mod_code": [
        "cout << a << endl ;",
        "cout << a [ 0 ] << \" \" << n << \" \" << a [ n + 1 ] << endl ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        11,
        5
      ],
      "mod_code": [
        "cout << a << endl ;",
        "cout << a [ 0 ] << n << \" \" << a [ n + 1 ] << endl ;",
        "string a [ 102 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [102] {aka std::__cxx11::basic_string<char> [102]}’)"
    },
    {
      "mod_line": [
        9,
        11,
        5,
        2
      ],
      "mod_code": [
        "cout << a << endl ;",
        "cout << a [ 0 ] << n << \" \" << a [ n + 1 ] << endl ;",
        "string a [ 102 ] ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        11,
        2
      ],
      "mod_code": [
        "cout << a << endl ;",
        "cout << a [ 0 ] << n << \" \" << a [ n + 1 ] << endl ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "cout << a << endl ;",
        "string a [ 102 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [102] {aka std::__cxx11::basic_string<char> [102]}’)"
    },
    {
      "mod_line": [
        9,
        5,
        2
      ],
      "mod_code": [
        "cout << a << endl ;",
        "string a [ 102 ] ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "cout << a << endl ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        5
      ],
      "mod_code": [
        "cout << a [ 0 ] << \" \" << n << \" \" << a [ n + 1 ] << endl ;",
        "string a [ 102 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [102] {aka std::__cxx11::basic_string<char> [102]}’)"
    },
    {
      "mod_line": [
        11,
        5,
        2
      ],
      "mod_code": [
        "cout << a [ 0 ] << \" \" << n << \" \" << a [ n + 1 ] << endl ;",
        "string a [ 102 ] ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "cout << a [ 0 ] << \" \" << n << \" \" << a [ n + 1 ] << endl ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        5
      ],
      "mod_code": [
        "cout << a [ 0 ] << n << \" \" << a [ n + 1 ] << endl ;",
        "string a [ 102 ] ;"
      ],
      "err_line": 6,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘std::__cxx11::string [102] {aka std::__cxx11::basic_string<char> [102]}’)"
    },
    {
      "mod_line": [
        11,
        5,
        2
      ],
      "mod_code": [
        "cout << a [ 0 ] << n << \" \" << a [ n + 1 ] << endl ;",
        "string a [ 102 ] ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "cout << a [ 0 ] << n << \" \" << a [ n + 1 ] << endl ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        5,
        2
      ],
      "mod_code": [
        "string a [ 102 ] ;",
        "gets ( t ) ;"
      ],
      "err_line": 2,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    }
  ]
}