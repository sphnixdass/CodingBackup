{
  "meta": {
    "index": 1921,
    "hitid": "3IJ95K7NDX6575266C6DNW6VZQTGN1",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "626A",
    "subid": "42682377"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = integer",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create strinj ] g s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set r equal to 0",
      "code": "int r = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to size of s exclusive",
      "code": "for ( int i = 0 ; i < s . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set x = 0 and y = 0",
      "code": "int x = 0 , y = 0 ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "for j = 1 to size of s exclusive",
      "code": "for ( int j = i ; j < s . size ( ) ; j ++ )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if s [ j ] = U",
      "code": "if ( s [ j ] == ' U ' )",
      "indent": 3
    },
    {
      "line": 10,
      "text": "decrement y",
      "code": "y -- ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "otherwise if s [ j ] is equal to D",
      "code": "else if ( s [ j ] == ' D ' )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "increment y",
      "code": "y ++ ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "else if s [ j ] is equal to L",
      "code": "else if ( s [ j ] == ' L ' )",
      "indent": 3
    },
    {
      "line": 14,
      "text": "decrement x",
      "code": "x -- ;",
      "indent": 4
    },
    {
      "line": 15,
      "text": "otherwise if s [ j ] = R",
      "code": "else if ( s [ j ] == ' R ' )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "increment x",
      "code": "x ++ ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "if x = 0 and y = 0 , increment r",
      "code": "if ( x == 0 and y == 0 ) { r ++ ; }",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print r",
      "code": "cout << r << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int strinj ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "r = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘r’ was not declared in this scope"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int s ] ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 4,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "x = 0 , y = 0 ;"
      ],
      "err_line": 7,
      "err_msg": "‘x’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else if ( j [ j ] == ' D ' )"
      ],
      "err_line": 11,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "int strinj ] ;",
        "r = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        5,
        8
      ],
      "mod_code": [
        "int strinj ] ;",
        "r = 0 ;",
        "for ( int j = 1 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        20
      ],
      "mod_code": [
        "int strinj ] ;",
        "r = 0 ;",
        "for ( int j = 1 ; j < s . size ( ) ; j ++ )",
        "cout << r ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        15
      ],
      "mod_code": [
        "int strinj ] ;",
        "r = 0 ;",
        "for ( int j = 1 ; j < s . size ( ) ; j ++ )",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        5,
        8,
        13
      ],
      "mod_code": [
        "int strinj ] ;",
        "r = 0 ;",
        "for ( int j = 1 ; j < s . size ( ) ; j ++ )",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        5,
        20
      ],
      "mod_code": [
        "int strinj ] ;",
        "r = 0 ;",
        "cout << r ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        5,
        20,
        15
      ],
      "mod_code": [
        "int strinj ] ;",
        "r = 0 ;",
        "cout << r ;",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        5,
        20,
        13
      ],
      "mod_code": [
        "int strinj ] ;",
        "r = 0 ;",
        "cout << r ;",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        5,
        15
      ],
      "mod_code": [
        "int strinj ] ;",
        "r = 0 ;",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        5,
        15,
        13
      ],
      "mod_code": [
        "int strinj ] ;",
        "r = 0 ;",
        "else if ( s [ j ] == ' 0 ' )",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        5,
        13
      ],
      "mod_code": [
        "int strinj ] ;",
        "r = 0 ;",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "int strinj ] ;",
        "for ( int j = 1 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        8,
        20
      ],
      "mod_code": [
        "int strinj ] ;",
        "for ( int j = 1 ; j < s . size ( ) ; j ++ )",
        "cout << r ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        8,
        20,
        15
      ],
      "mod_code": [
        "int strinj ] ;",
        "for ( int j = 1 ; j < s . size ( ) ; j ++ )",
        "cout << r ;",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        8,
        20,
        13
      ],
      "mod_code": [
        "int strinj ] ;",
        "for ( int j = 1 ; j < s . size ( ) ; j ++ )",
        "cout << r ;",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        8,
        15
      ],
      "mod_code": [
        "int strinj ] ;",
        "for ( int j = 1 ; j < s . size ( ) ; j ++ )",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        8,
        15,
        13
      ],
      "mod_code": [
        "int strinj ] ;",
        "for ( int j = 1 ; j < s . size ( ) ; j ++ )",
        "else if ( s [ j ] == ' 0 ' )",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        8,
        13
      ],
      "mod_code": [
        "int strinj ] ;",
        "for ( int j = 1 ; j < s . size ( ) ; j ++ )",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        20
      ],
      "mod_code": [
        "int strinj ] ;",
        "cout << r ;"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        20,
        15
      ],
      "mod_code": [
        "int strinj ] ;",
        "cout << r ;",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        20,
        15,
        13
      ],
      "mod_code": [
        "int strinj ] ;",
        "cout << r ;",
        "else if ( s [ j ] == ' 0 ' )",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        20,
        13
      ],
      "mod_code": [
        "int strinj ] ;",
        "cout << r ;",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        15
      ],
      "mod_code": [
        "int strinj ] ;",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        15,
        13
      ],
      "mod_code": [
        "int strinj ] ;",
        "else if ( s [ j ] == ' 0 ' )",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "int strinj ] ;",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘]’ token"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "r = 0 ;",
        "for ( int j = 1 ; j < s . size ( ) ; j ++ )"
      ],
      "err_line": 5,
      "err_msg": "‘r’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        20
      ],
      "mod_code": [
        "r = 0 ;",
        "for ( int j = 1 ; j < s . size ( ) ; j ++ )",
        "cout << r ;"
      ],
      "err_line": 5,
      "err_msg": "‘r’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        20,
        15
      ],
      "mod_code": [
        "r = 0 ;",
        "for ( int j = 1 ; j < s . size ( ) ; j ++ )",
        "cout << r ;",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘r’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        20,
        13
      ],
      "mod_code": [
        "r = 0 ;",
        "for ( int j = 1 ; j < s . size ( ) ; j ++ )",
        "cout << r ;",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘r’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        15
      ],
      "mod_code": [
        "r = 0 ;",
        "for ( int j = 1 ; j < s . size ( ) ; j ++ )",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘r’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        15,
        13
      ],
      "mod_code": [
        "r = 0 ;",
        "for ( int j = 1 ; j < s . size ( ) ; j ++ )",
        "else if ( s [ j ] == ' 0 ' )",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘r’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        8,
        13
      ],
      "mod_code": [
        "r = 0 ;",
        "for ( int j = 1 ; j < s . size ( ) ; j ++ )",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘r’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        20
      ],
      "mod_code": [
        "r = 0 ;",
        "cout << r ;"
      ],
      "err_line": 5,
      "err_msg": "‘r’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        20,
        15
      ],
      "mod_code": [
        "r = 0 ;",
        "cout << r ;",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘r’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        20,
        15,
        13
      ],
      "mod_code": [
        "r = 0 ;",
        "cout << r ;",
        "else if ( s [ j ] == ' 0 ' )",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘r’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        20,
        13
      ],
      "mod_code": [
        "r = 0 ;",
        "cout << r ;",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘r’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        15
      ],
      "mod_code": [
        "r = 0 ;",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘r’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        15,
        13
      ],
      "mod_code": [
        "r = 0 ;",
        "else if ( s [ j ] == ' 0 ' )",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘r’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        13
      ],
      "mod_code": [
        "r = 0 ;",
        "else if ( s [ j ] == ' 0 ' )"
      ],
      "err_line": 5,
      "err_msg": "‘r’ was not declared in this scope"
    }
  ]
}