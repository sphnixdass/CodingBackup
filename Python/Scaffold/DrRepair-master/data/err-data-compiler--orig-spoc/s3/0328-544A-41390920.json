{
  "meta": {
    "index": 328,
    "hitid": "3L1EFR8WWTZE432HUIHQNABZU9DF9E",
    "workerid": "A24WRPQYGMQLGF",
    "probid": "544A",
    "subid": "41390920"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n = long long",
      "code": "long long n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "s = string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n , s",
      "code": "cin >> n >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if n > length of s",
      "code": "if ( n > s . length ( ) )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "print NO",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 8,
      "text": "tmp = empty string",
      "code": "string tmp = \" \" ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "tmp = tmp + s [ 0 ]",
      "code": "tmp += s [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "ans = vector string",
      "code": "vector < string > ans ;",
      "indent": 1
    },
    {
      "line": 11,
      "text": "cnt = integer = 0",
      "code": "int cnt = 0 ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "m = map of a character and a boolean",
      "code": "map < char , bool > m ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "m [ s [ 0 ] ] = 1",
      "code": "m [ s [ 0 ] ] = 1 ;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for i = 1 to length of s exclusive",
      "code": "for ( int i = 1 ; i < s . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 15,
      "text": "if the value of s [ i ] in m is at the end of m",
      "code": "if ( m . find ( s [ i ] ) == m . end ( ) )",
      "indent": 2
    },
    {
      "line": 16,
      "text": "increase cnt by 1",
      "code": "cnt ++ ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "if cnt < n",
      "code": "if ( cnt < n )",
      "indent": 3
    },
    {
      "line": 18,
      "text": "push back the element of ans and insert a new element of tmp at the end of ans",
      "code": "ans . push_back ( tmp ) ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "tmp = empty string",
      "code": "tmp = \" \" ;",
      "indent": 4
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 22,
      "text": "tmp = tmp s [ i ]",
      "code": "tmp += s [ i ] ;",
      "indent": 2
    },
    {
      "line": 23,
      "text": "m [ s [ i ] ] = 1",
      "code": "m [ s [ i ] ] = 1 ;",
      "indent": 2
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 25,
      "text": "push back the element of ans and insert a new element of tmp at the end of ans",
      "code": "ans . push_back ( tmp ) ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "if cnt < n - 1",
      "code": "if ( cnt < n - 1 )",
      "indent": 1
    },
    {
      "line": 27,
      "text": "print NO",
      "code": "cout << \" NO\\n \" ;",
      "indent": 2
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "print YES",
      "code": "cout << \" YES\\n \" ;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "for i = 0 to size of ans exclusive , then print ans [ i ]",
      "code": "for ( int i = 0 ; i < ans . size ( ) ; i ++ ) { cout << ans [ i ] << endl ; }",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "int tmp = tmp [ i ] ;"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 4,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "int tmp = tmp + s [ 0 ] ;"
      ],
      "err_line": 9,
      "err_msg": "conflicting declaration ‘int tmp’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "vector < string ans ;"
      ],
      "err_line": 10,
      "err_msg": "template argument 1 is invalid"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "map < char > m ;"
      ],
      "err_line": 12,
      "err_msg": "wrong number of template arguments (1, should be at least 2)"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "ans . push_back ( ' tmp ' ) ;"
      ],
      "err_line": 18,
      "err_msg": "no matching function for call to ‘std::vector<std::__cxx11::basic_string<char> >::push_back(int)’"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "string tmp = tmp [ i ] ;"
      ],
      "err_line": 22,
      "err_msg": "conversion from ‘char’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "ans . push_back ( ' tmp ' ) ;"
      ],
      "err_line": 25,
      "err_msg": "no matching function for call to ‘std::vector<std::__cxx11::basic_string<char> >::push_back(int)’"
    },
    {
      "mod_line": [
        8,
        15,
        19,
        22
      ],
      "mod_code": [
        "string tmp = \" \" ;",
        "if ( m . end ( ) == m . end ( ) )",
        "string tmp = \" \" ;",
        "int tmp = tmp [ i ] ;"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        15,
        22
      ],
      "mod_code": [
        "string tmp = \" \" ;",
        "if ( m . end ( ) == m . end ( ) )",
        "int tmp = tmp [ i ] ;"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        15,
        22,
        31
      ],
      "mod_code": [
        "string tmp = \" \" ;",
        "if ( m . end ( ) == m . end ( ) )",
        "int tmp = tmp [ i ] ;",
        "for ( int i = 0 ; i < ans . size ( ) ; i ++ ) cout << ans [ i ] << \" \" ;"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        15,
        22,
        17
      ],
      "mod_code": [
        "string tmp = \" \" ;",
        "if ( m . end ( ) == m . end ( ) )",
        "int tmp = tmp [ i ] ;",
        "if ( cnt <= n )"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        19,
        22
      ],
      "mod_code": [
        "string tmp = \" \" ;",
        "string tmp = \" \" ;",
        "int tmp = tmp [ i ] ;"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        19,
        22,
        31
      ],
      "mod_code": [
        "string tmp = \" \" ;",
        "string tmp = \" \" ;",
        "int tmp = tmp [ i ] ;",
        "for ( int i = 0 ; i < ans . size ( ) ; i ++ ) cout << ans [ i ] << \" \" ;"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        19,
        22,
        17
      ],
      "mod_code": [
        "string tmp = \" \" ;",
        "string tmp = \" \" ;",
        "int tmp = tmp [ i ] ;",
        "if ( cnt <= n )"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        22
      ],
      "mod_code": [
        "string tmp = \" \" ;",
        "int tmp = tmp [ i ] ;"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        22,
        31
      ],
      "mod_code": [
        "string tmp = \" \" ;",
        "int tmp = tmp [ i ] ;",
        "for ( int i = 0 ; i < ans . size ( ) ; i ++ ) cout << ans [ i ] << \" \" ;"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        22,
        31,
        17
      ],
      "mod_code": [
        "string tmp = \" \" ;",
        "int tmp = tmp [ i ] ;",
        "for ( int i = 0 ; i < ans . size ( ) ; i ++ ) cout << ans [ i ] << \" \" ;",
        "if ( cnt <= n )"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8,
        22,
        17
      ],
      "mod_code": [
        "string tmp = \" \" ;",
        "int tmp = tmp [ i ] ;",
        "if ( cnt <= n )"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        19,
        22
      ],
      "mod_code": [
        "if ( m . end ( ) == m . end ( ) )",
        "string tmp = \" \" ;",
        "int tmp = tmp [ i ] ;"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        19,
        22,
        31
      ],
      "mod_code": [
        "if ( m . end ( ) == m . end ( ) )",
        "string tmp = \" \" ;",
        "int tmp = tmp [ i ] ;",
        "for ( int i = 0 ; i < ans . size ( ) ; i ++ ) cout << ans [ i ] << \" \" ;"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        19,
        22,
        17
      ],
      "mod_code": [
        "if ( m . end ( ) == m . end ( ) )",
        "string tmp = \" \" ;",
        "int tmp = tmp [ i ] ;",
        "if ( cnt <= n )"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        22
      ],
      "mod_code": [
        "if ( m . end ( ) == m . end ( ) )",
        "int tmp = tmp [ i ] ;"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        22,
        31
      ],
      "mod_code": [
        "if ( m . end ( ) == m . end ( ) )",
        "int tmp = tmp [ i ] ;",
        "for ( int i = 0 ; i < ans . size ( ) ; i ++ ) cout << ans [ i ] << \" \" ;"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        22,
        31,
        17
      ],
      "mod_code": [
        "if ( m . end ( ) == m . end ( ) )",
        "int tmp = tmp [ i ] ;",
        "for ( int i = 0 ; i < ans . size ( ) ; i ++ ) cout << ans [ i ] << \" \" ;",
        "if ( cnt <= n )"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        22,
        17
      ],
      "mod_code": [
        "if ( m . end ( ) == m . end ( ) )",
        "int tmp = tmp [ i ] ;",
        "if ( cnt <= n )"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        22
      ],
      "mod_code": [
        "string tmp = \" \" ;",
        "int tmp = tmp [ i ] ;"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        22,
        31
      ],
      "mod_code": [
        "string tmp = \" \" ;",
        "int tmp = tmp [ i ] ;",
        "for ( int i = 0 ; i < ans . size ( ) ; i ++ ) cout << ans [ i ] << \" \" ;"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        22,
        31,
        17
      ],
      "mod_code": [
        "string tmp = \" \" ;",
        "int tmp = tmp [ i ] ;",
        "for ( int i = 0 ; i < ans . size ( ) ; i ++ ) cout << ans [ i ] << \" \" ;",
        "if ( cnt <= n )"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        19,
        22,
        17
      ],
      "mod_code": [
        "string tmp = \" \" ;",
        "int tmp = tmp [ i ] ;",
        "if ( cnt <= n )"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        22,
        31
      ],
      "mod_code": [
        "int tmp = tmp [ i ] ;",
        "for ( int i = 0 ; i < ans . size ( ) ; i ++ ) cout << ans [ i ] << \" \" ;"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        22,
        31,
        17
      ],
      "mod_code": [
        "int tmp = tmp [ i ] ;",
        "for ( int i = 0 ; i < ans . size ( ) ; i ++ ) cout << ans [ i ] << \" \" ;",
        "if ( cnt <= n )"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        22,
        17
      ],
      "mod_code": [
        "int tmp = tmp [ i ] ;",
        "if ( cnt <= n )"
      ],
      "err_line": 22,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    }
  ]
}