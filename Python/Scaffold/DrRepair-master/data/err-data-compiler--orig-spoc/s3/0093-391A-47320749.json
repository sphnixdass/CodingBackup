{
  "meta": {
    "index": 93,
    "hitid": "302U8RURJZVOP2S1V75ZNX95NSBVNA",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "391A",
    "subid": "47320749"
  },
  "lines": [
    {
      "line": 0,
      "text": "s = string",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "l , r , cnt = int with cnt = 0",
      "code": "int l , r , cnt = 0 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "append ' . ' to s",
      "code": "s = s + ' . ' ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set l to 0",
      "code": "l = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for r = 0 to length of s",
      "code": "for ( r = 0 ; r < int ( s . length ( ) ) ; r ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if s [ r ] is not s [ l ]",
      "code": "if ( s [ r ] != s [ l ] )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if ( r - l ) bitwise - and 1 is 0 then increment cnt",
      "code": "if ( ! ( ( r - l ) & 1 ) ) { cnt ++ ; }",
      "indent": 3
    },
    {
      "line": 9,
      "text": "set l to r",
      "code": "l = r ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print cnt",
      "code": "cout << cnt << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) { cnt ++ ; }",
        "s >> s ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        3,
        7
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) { cnt ++ ; }",
        "s >> s ;",
        "if ( s [ r ] == s [ l ] )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        3,
        7,
        0
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) { cnt ++ ; }",
        "s >> s ;",
        "if ( s [ r ] == s [ l ] )",
        "char s ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        8,
        3,
        7,
        12
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) { cnt ++ ; }",
        "s >> s ;",
        "if ( s [ r ] == s [ l ] )",
        "cout << cnt ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        3,
        0
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) { cnt ++ ; }",
        "s >> s ;",
        "char s ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        8,
        3,
        0,
        12
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) { cnt ++ ; }",
        "s >> s ;",
        "char s ;",
        "cout << cnt ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        8,
        3,
        12
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) { cnt ++ ; }",
        "s >> s ;",
        "cout << cnt ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        7,
        0
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) { cnt ++ ; }",
        "if ( s [ r ] == s [ l ] )",
        "char s ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        8,
        7,
        0,
        12
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) { cnt ++ ; }",
        "if ( s [ r ] == s [ l ] )",
        "char s ;",
        "cout << cnt ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) { cnt ++ ; }",
        "char s ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        8,
        0,
        12
      ],
      "mod_code": [
        "if ( ( r - l ) & 1 ) { cnt ++ ; }",
        "char s ;",
        "cout << cnt ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ r ] == s [ l ] )"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        7,
        0
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ r ] == s [ l ] )",
        "char s ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3,
        7,
        0,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ r ] == s [ l ] )",
        "char s ;",
        "cout << cnt ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3,
        7,
        0,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ r ] == s [ l ] )",
        "char s ;",
        "if ( ( r - l ) & 1 ) cnt ++ ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3,
        7,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ r ] == s [ l ] )",
        "cout << cnt ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        7,
        12,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ r ] == s [ l ] )",
        "cout << cnt ;",
        "if ( ( r - l ) & 1 ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        7,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "if ( s [ r ] == s [ l ] )",
        "if ( ( r - l ) & 1 ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        0
      ],
      "mod_code": [
        "s >> s ;",
        "char s ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3,
        0,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "char s ;",
        "cout << cnt ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3,
        0,
        12,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "char s ;",
        "cout << cnt ;",
        "if ( ( r - l ) & 1 ) cnt ++ ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3,
        0,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "char s ;",
        "if ( ( r - l ) & 1 ) cnt ++ ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "s >> s ;",
        "cout << cnt ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        12,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "cout << cnt ;",
        "if ( ( r - l ) & 1 ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "s >> s ;",
        "if ( ( r - l ) & 1 ) cnt ++ ;"
      ],
      "err_line": 3,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        0
      ],
      "mod_code": [
        "if ( s [ r ] == s [ l ] )",
        "char s ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        7,
        0,
        12
      ],
      "mod_code": [
        "if ( s [ r ] == s [ l ] )",
        "char s ;",
        "cout << cnt ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        7,
        0,
        12,
        8
      ],
      "mod_code": [
        "if ( s [ r ] == s [ l ] )",
        "char s ;",
        "cout << cnt ;",
        "if ( ( r - l ) & 1 ) cnt ++ ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        7,
        0,
        8
      ],
      "mod_code": [
        "if ( s [ r ] == s [ l ] )",
        "char s ;",
        "if ( ( r - l ) & 1 ) cnt ++ ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        0,
        12
      ],
      "mod_code": [
        "char s ;",
        "cout << cnt ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        0,
        12,
        8
      ],
      "mod_code": [
        "char s ;",
        "cout << cnt ;",
        "if ( ( r - l ) & 1 ) cnt ++ ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        0,
        8
      ],
      "mod_code": [
        "char s ;",
        "if ( ( r - l ) & 1 ) cnt ++ ;"
      ],
      "err_line": 6,
      "err_msg": "request for member ‘length’ in ‘s’, which is of non-class type ‘char’"
    }
  ]
}