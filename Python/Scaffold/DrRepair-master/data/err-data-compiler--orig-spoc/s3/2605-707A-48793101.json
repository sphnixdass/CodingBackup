{
  "meta": {
    "index": 2605,
    "hitid": "3CZH926SIC8L1JW9IC1TOKFJVTKE4O",
    "workerid": "AIWEXPJAU66D9",
    "probid": "707A",
    "subid": "48793101"
  },
  "lines": [
    {
      "line": 0,
      "text": "create character 2d array s with size 105 by 105",
      "code": "char s [ 105 ] [ 105 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 2,
      "text": "n , m and flag are integers with flag = 0",
      "code": "int n , m , flag = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read character from input",
      "code": "getchar ( ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for integer i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for j = 0 to m exclusive",
      "code": "for ( int j = 0 ; j < m ; j ++ )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "read s [ i ] [ j ]",
      "code": "cin >> s [ i ] [ j ] ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "set flag to 1 if s [ i ] [ j ] = ' C ' | | s [ i ] [ j ] = ' M ' | | s [ i ] [ j ] = ' Y '",
      "code": "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' ) flag = 1 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if flag is greater than 0",
      "code": "if ( flag )",
      "indent": 1
    },
    {
      "line": 12,
      "text": "print \" # Color \"",
      "code": "cout << \" #Color \" << endl ;",
      "indent": 2
    },
    {
      "line": 13,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" # Black & White \"",
      "code": "cout << \" #Black&White \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 15,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "cout << \" # Black ( \" ) ;"
      ],
      "err_line": 14,
      "err_msg": "expected ‘;’ before ‘)’ token"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << \" #. \" ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        12,
        14
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << \" #. \" ;",
        "cout << \" # \" ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        12,
        14,
        7
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << \" #. \" ;",
        "cout << \" # \" ;",
        "cout << s [ i ] [ j ] ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        12,
        14,
        3
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << \" #. \" ;",
        "cout << \" # \" ;",
        "while ( cin >> n >> m )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        12,
        14,
        6
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << \" #. \" ;",
        "cout << \" # \" ;",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        12,
        7
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << \" #. \" ;",
        "cout << s [ i ] [ j ] ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        12,
        7,
        3
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << \" #. \" ;",
        "cout << s [ i ] [ j ] ;",
        "while ( cin >> n >> m )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        12,
        7,
        6
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << \" #. \" ;",
        "cout << s [ i ] [ j ] ;",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        12,
        3
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << \" #. \" ;",
        "while ( cin >> n >> m )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        12,
        3,
        6
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << \" #. \" ;",
        "while ( cin >> n >> m )",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        12,
        6
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << \" #. \" ;",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << \" # \" ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        14,
        7
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << \" # \" ;",
        "cout << s [ i ] [ j ] ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        14,
        7,
        3
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << \" # \" ;",
        "cout << s [ i ] [ j ] ;",
        "while ( cin >> n >> m )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        14,
        7,
        6
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << \" # \" ;",
        "cout << s [ i ] [ j ] ;",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        14,
        3
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << \" # \" ;",
        "while ( cin >> n >> m )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        14,
        3,
        6
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << \" # \" ;",
        "while ( cin >> n >> m )",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        14,
        6
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << \" # \" ;",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        7
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << s [ i ] [ j ] ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        7,
        3
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << s [ i ] [ j ] ;",
        "while ( cin >> n >> m )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        7,
        3,
        6
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << s [ i ] [ j ] ;",
        "while ( cin >> n >> m )",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        7,
        6
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "cout << s [ i ] [ j ] ;",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        3
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "while ( cin >> n >> m )"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        3,
        6
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "while ( cin >> n >> m )",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "if ( s [ i ] [ j ] == ' C ' || s [ i ] [ j ] == ' M ' || s [ i ] [ j ] == ' Y ' || s [ i ] [ j ] == ' Y ' )",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        14,
        7,
        6
      ],
      "mod_code": [
        "cout << \" #. \" ;",
        "cout << \" # \" ;",
        "cout << s [ i ] [ j ] ;",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        14,
        3,
        6
      ],
      "mod_code": [
        "cout << \" #. \" ;",
        "cout << \" # \" ;",
        "while ( cin >> n >> m )",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        14,
        6
      ],
      "mod_code": [
        "cout << \" #. \" ;",
        "cout << \" # \" ;",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        7,
        3,
        6
      ],
      "mod_code": [
        "cout << \" #. \" ;",
        "cout << s [ i ] [ j ] ;",
        "while ( cin >> n >> m )",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        7,
        6
      ],
      "mod_code": [
        "cout << \" #. \" ;",
        "cout << s [ i ] [ j ] ;",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        3,
        6
      ],
      "mod_code": [
        "cout << \" #. \" ;",
        "while ( cin >> n >> m )",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        6
      ],
      "mod_code": [
        "cout << \" #. \" ;",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        7,
        3,
        6
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "cout << s [ i ] [ j ] ;",
        "while ( cin >> n >> m )",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        7,
        6
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "cout << s [ i ] [ j ] ;",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        3,
        6
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "while ( cin >> n >> m )",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        6
      ],
      "mod_code": [
        "cout << \" # \" ;",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        3,
        6
      ],
      "mod_code": [
        "cout << s [ i ] [ j ] ;",
        "while ( cin >> n >> m )",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "cout << s [ i ] [ j ] ;",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "while ( cin >> n >> m )",
        "for ( j = 0 ; j < m ; j ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘j’ was not declared in this scope"
    }
  ]
}