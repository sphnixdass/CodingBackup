{
  "meta": {
    "index": 1144,
    "hitid": "3R0WOCG21M3FQBCO1NHRV6VSUU8UDZ",
    "workerid": "AIWEXPJAU66D9",
    "probid": "938A",
    "subid": "39451698"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant string V = \" aeiouy \"",
      "code": "const string V = \" aeiouy \" ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "boolean function vowel with character argument c",
      "code": "bool vowel ( char c )",
      "indent": 0
    },
    {
      "line": 2,
      "text": "return true if c is in V , else return - 1",
      "code": "return V . find ( c ) != - 1 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 5,
      "text": "create integer n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print s [ 0 ]",
      "code": "cout << s [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "for i = 1 to n exclusive",
      "code": "for ( int i = 1 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "if ! vowel ( s [ i - 1 ] ) | | ! vowel ( s [ i ] ) print s [ i ]",
      "code": "if ( ! vowel ( s [ i - 1 ] ) || ! vowel ( s [ i ] ) ) cout << s [ i ] ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "print new line",
      "code": "cout << endl ;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "bool vowel ( c )"
      ],
      "err_line": 1,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 9,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        6
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "cin >> N ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        10
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "cin >> N ;",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        10,
        1
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "cin >> N ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "bool vowel ( c )"
      ],
      "err_line": 1,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        10,
        8
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "cin >> N ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        10,
        0
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "cin >> N ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        1
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "cin >> N ;",
        "bool vowel ( c )"
      ],
      "err_line": 1,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        1,
        8
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "cin >> N ;",
        "bool vowel ( c )",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        1,
        0
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "cin >> N ;",
        "bool vowel ( c )",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        8
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "cin >> N ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        6,
        8,
        0
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "cin >> N ;",
        "s >> s ;",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        6,
        0
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "cin >> N ;",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        10,
        1
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "bool vowel ( c )"
      ],
      "err_line": 1,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        10,
        1,
        8
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "bool vowel ( c )",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        10,
        1,
        0
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "bool vowel ( c )",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        10,
        8
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        10,
        8,
        0
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "s >> s ;",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        10,
        0
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "bool vowel ( c )"
      ],
      "err_line": 1,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        1,
        8
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "bool vowel ( c )",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        1,
        8,
        0
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "bool vowel ( c )",
        "s >> s ;",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        1,
        0
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "bool vowel ( c )",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        2,
        8,
        0
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "s >> s ;",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        2,
        0
      ],
      "mod_code": [
        "return c ? true : - 1 ;",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        10
      ],
      "mod_code": [
        "cin >> N ;",
        "for ( int i = 1 ; i <= n ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        1
      ],
      "mod_code": [
        "cin >> N ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "bool vowel ( c )"
      ],
      "err_line": 1,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        1,
        8
      ],
      "mod_code": [
        "cin >> N ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "bool vowel ( c )",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        1,
        0
      ],
      "mod_code": [
        "cin >> N ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "bool vowel ( c )",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        10,
        8
      ],
      "mod_code": [
        "cin >> N ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        10,
        8,
        0
      ],
      "mod_code": [
        "cin >> N ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "s >> s ;",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        10,
        0
      ],
      "mod_code": [
        "cin >> N ;",
        "for ( int i = 1 ; i <= n ; i ++ )",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        1
      ],
      "mod_code": [
        "cin >> N ;",
        "bool vowel ( c )"
      ],
      "err_line": 1,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        8
      ],
      "mod_code": [
        "cin >> N ;",
        "bool vowel ( c )",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        1,
        8,
        0
      ],
      "mod_code": [
        "cin >> N ;",
        "bool vowel ( c )",
        "s >> s ;",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        1,
        0
      ],
      "mod_code": [
        "cin >> N ;",
        "bool vowel ( c )",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "cin >> N ;",
        "s >> s ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        6,
        8,
        0
      ],
      "mod_code": [
        "cin >> N ;",
        "s >> s ;",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        6,
        0
      ],
      "mod_code": [
        "cin >> N ;",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        1
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "bool vowel ( c )"
      ],
      "err_line": 1,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        1,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "bool vowel ( c )",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        10,
        1,
        8,
        0
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "bool vowel ( c )",
        "s >> s ;",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        1,
        0
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "bool vowel ( c )",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "s >> s ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        10,
        8,
        0
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "s >> s ;",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        10,
        0
      ],
      "mod_code": [
        "for ( int i = 1 ; i <= n ; i ++ )",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "bool vowel ( c )",
        "s >> s ;"
      ],
      "err_line": 1,
      "err_msg": "‘c’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        8,
        0
      ],
      "mod_code": [
        "bool vowel ( c )",
        "s >> s ;",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        0
      ],
      "mod_code": [
        "bool vowel ( c )",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "s >> s ;",
        "const int V = \" aeiouy \" ;"
      ],
      "err_line": 0,
      "err_msg": "invalid conversion from ‘const char*’ to ‘int’ [-fpermissive]"
    }
  ]
}