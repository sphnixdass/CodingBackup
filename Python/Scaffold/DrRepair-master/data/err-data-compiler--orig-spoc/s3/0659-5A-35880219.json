{
  "meta": {
    "index": 659,
    "hitid": "3VMHWJRYHVA45ZKFXYN43DXH0ANXFT",
    "workerid": "AIWEXPJAU66D9",
    "probid": "5A",
    "subid": "35880219"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integer olnum with value 0",
      "code": "int olnum = 0 ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "charnum and charsum are integers with charnum = 0 and charsum = 0",
      "code": "int charnum = 0 , charsum = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "let s be string",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "while can read input line into s",
      "code": "while ( getline ( cin , s ) )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "if s [ 0 ] is equal to ' + '",
      "code": "if ( s [ 0 ] == ' + ' )",
      "indent": 2
    },
    {
      "line": 6,
      "text": "increase olnum by one",
      "code": "olnum ++ ;",
      "indent": 3
    },
    {
      "line": 7,
      "text": "else if s [ 0 ] is equal to ' - '",
      "code": "else if ( s [ 0 ] == ' - ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "decrease olnum by one",
      "code": "olnum -- ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 10,
      "text": "for i = 1 to length of s exclusive",
      "code": "for ( int i = 1 ; i < s . size ( ) ; i ++ )",
      "indent": 3
    },
    {
      "line": 11,
      "text": "if character at index i of s is ' : '",
      "code": "if ( s . at ( i ) == ' : ' )",
      "indent": 4
    },
    {
      "line": 12,
      "text": "increase charnum by length of s - i - 1",
      "code": "charnum += s . size ( ) - i - 1 ;",
      "indent": 5
    },
    {
      "line": 13,
      "text": "increase charsum by charnum * olnum",
      "code": "charsum += charnum * olnum ;",
      "indent": 5
    },
    {
      "line": 14,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 17,
      "text": "set value of charnum to 0",
      "code": "charnum = 0 ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 20,
      "text": "print charsum and a new line",
      "code": "cout << charsum << endl ;",
      "indent": 1
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int charnum = 0 = 0 , charsum = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "lvalue required as left operand of assignment"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string s let"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "stop ;"
      ],
      "err_line": 14,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "* charnum = 0 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "while ( cin >> s )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        4,
        9,
        5
      ],
      "mod_code": [
        "while ( cin >> s )",
        "do",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        9,
        5,
        17
      ],
      "mod_code": [
        "while ( cin >> s )",
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "* charnum = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        9,
        5,
        7
      ],
      "mod_code": [
        "while ( cin >> s )",
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        9,
        5,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "string s let"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        9,
        17
      ],
      "mod_code": [
        "while ( cin >> s )",
        "do",
        "* charnum = 0 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        9,
        17,
        7
      ],
      "mod_code": [
        "while ( cin >> s )",
        "do",
        "* charnum = 0 ;",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        9,
        17,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "do",
        "* charnum = 0 ;",
        "string s let"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        4,
        9,
        7
      ],
      "mod_code": [
        "while ( cin >> s )",
        "do",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        9,
        7,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "do",
        "else if ( s [ 0 ] == \" - ' )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        9,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "do",
        "string s let"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "while ( cin >> s )",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5,
        17
      ],
      "mod_code": [
        "while ( cin >> s )",
        "if ( s [ 0 ] == \" + ' )",
        "* charnum = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5,
        17,
        7
      ],
      "mod_code": [
        "while ( cin >> s )",
        "if ( s [ 0 ] == \" + ' )",
        "* charnum = 0 ;",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5,
        17,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "if ( s [ 0 ] == \" + ' )",
        "* charnum = 0 ;",
        "string s let"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5,
        7
      ],
      "mod_code": [
        "while ( cin >> s )",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( s [ 0 ] == \" - ' )",
        "string s let"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        5,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "if ( s [ 0 ] == \" + ' )",
        "string s let"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        17
      ],
      "mod_code": [
        "while ( cin >> s )",
        "* charnum = 0 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        4,
        17,
        7
      ],
      "mod_code": [
        "while ( cin >> s )",
        "* charnum = 0 ;",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        17,
        7,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "* charnum = 0 ;",
        "else if ( s [ 0 ] == \" - ' )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        17,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "* charnum = 0 ;",
        "string s let"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "while ( cin >> s )",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        7,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "else if ( s [ 0 ] == \" - ' )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        4,
        3
      ],
      "mod_code": [
        "while ( cin >> s )",
        "string s let"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        9,
        5
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == \" + ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        5,
        17
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "* charnum = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        5,
        17,
        7
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "* charnum = 0 ;",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        5,
        17,
        3
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "* charnum = 0 ;",
        "string s let"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        5,
        7
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        5,
        7,
        3
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "else if ( s [ 0 ] == \" - ' )",
        "string s let"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        5,
        3
      ],
      "mod_code": [
        "do",
        "if ( s [ 0 ] == \" + ' )",
        "string s let"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        17
      ],
      "mod_code": [
        "do",
        "* charnum = 0 ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        9,
        17,
        7
      ],
      "mod_code": [
        "do",
        "* charnum = 0 ;",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        17,
        7,
        3
      ],
      "mod_code": [
        "do",
        "* charnum = 0 ;",
        "else if ( s [ 0 ] == \" - ' )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        17,
        3
      ],
      "mod_code": [
        "do",
        "* charnum = 0 ;",
        "string s let"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        9,
        7
      ],
      "mod_code": [
        "do",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        7,
        3
      ],
      "mod_code": [
        "do",
        "else if ( s [ 0 ] == \" - ' )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        9,
        3
      ],
      "mod_code": [
        "do",
        "string s let"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        5,
        17
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "* charnum = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        17,
        7
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "* charnum = 0 ;",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        17,
        7,
        3
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "* charnum = 0 ;",
        "else if ( s [ 0 ] == \" - ' )",
        "string s let"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        17,
        3
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "* charnum = 0 ;",
        "string s let"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        7,
        3
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "else if ( s [ 0 ] == \" - ' )",
        "string s let"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        5,
        3
      ],
      "mod_code": [
        "if ( s [ 0 ] == \" + ' )",
        "string s let"
      ],
      "err_line": 5,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        17,
        7
      ],
      "mod_code": [
        "* charnum = 0 ;",
        "else if ( s [ 0 ] == \" - ' )"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        17,
        7,
        3
      ],
      "mod_code": [
        "* charnum = 0 ;",
        "else if ( s [ 0 ] == \" - ' )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        17,
        3
      ],
      "mod_code": [
        "* charnum = 0 ;",
        "string s let"
      ],
      "err_line": 3,
      "err_msg": "expected initializer before ‘let’"
    },
    {
      "mod_line": [
        7,
        3
      ],
      "mod_code": [
        "else if ( s [ 0 ] == \" - ' )",
        "string s let"
      ],
      "err_line": 7,
      "err_msg": "missing terminating \" character"
    }
  ]
}