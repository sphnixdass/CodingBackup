{
  "meta": {
    "index": 827,
    "hitid": "3D0LPO3EABTNBHNI1XSW9LD4VJNOYW",
    "workerid": "A2QLFQ2ZYR6B7M",
    "probid": "987A",
    "subid": "48426930"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = array of 6 string filled with \" purple \" , \" green \" , \" blue \" , \" orange \" , \" red \" , \" yellow \"",
      "code": "string s [ 6 ] = { \" purple \" , \" green \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "output = array of 6 string filled with \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \"",
      "code": "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "n = int",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "input = array of n string , temp = string",
      "code": "string input [ n ] , temp ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "out = array of 6 bool",
      "code": "bool out [ 6 ] ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "fill out with true",
      "code": "for ( int i = 0 ; i < 6 ; i ++ ) { out [ i ] = true ; }",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "read input [ i ]",
      "code": "cin >> input [ i ] ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "for j = 0 to 6 exclusive",
      "code": "for ( int j = 0 ; j < 6 ; j ++ )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if s [ j ] is input [ i ]",
      "code": "if ( s [ j ] == input [ i ] )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "out [ j ] = false",
      "code": "out [ j ] = false ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "t = 0",
      "code": "long long t = 0 ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for i = 0 to 6 exclusive",
      "code": "for ( int i = 0 ; i < 6 ; i ++ )",
      "indent": 1
    },
    {
      "line": 19,
      "text": "if out [ i ] increment t",
      "code": "if ( out [ i ] ) { t ++ ; }",
      "indent": 2
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print t",
      "code": "cout << t << endl ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "for i = 0 to 6 exclusive",
      "code": "for ( int i = 0 ; i < 6 ; i ++ )",
      "indent": 1
    },
    {
      "line": 23,
      "text": "if out [ i ]",
      "code": "if ( out [ i ] )",
      "indent": 2
    },
    {
      "line": 24,
      "text": "print output [ i ]",
      "code": "cout << output [ i ] ;",
      "indent": 3
    },
    {
      "line": 25,
      "text": "print newline",
      "code": "cout << endl ;",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 4,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "memset ( out , true ) ;"
      ],
      "err_line": 7,
      "err_msg": "too few arguments to function ‘void* memset(void*, int, size_t)’"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( j = 0 ; j < 6 ; j ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "t = 0 ;"
      ],
      "err_line": 17,
      "err_msg": "‘t’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( i = 0 ; i < 6 ; i ++ )"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "for ( i = 0 ; i < 6 ; i ++ )"
      ],
      "err_line": 22,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        1,
        2,
        24
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "cout << output [ i ] << endl ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        1,
        2,
        24,
        23
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "cout << output [ i ] << endl ;",
        "if ( ! out [ i ] )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        1,
        2,
        24,
        10
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "cout << output [ i ] << endl ;",
        "for ( j = 0 ; j < 6 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        1,
        2,
        24,
        11
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "cout << output [ i ] << endl ;",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        1,
        2,
        23
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! out [ i ] )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        1,
        2,
        23,
        10
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! out [ i ] )",
        "for ( j = 0 ; j < 6 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        1,
        2,
        23,
        11
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! out [ i ] )",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        1,
        2,
        10
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "for ( j = 0 ; j < 6 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        1,
        2,
        10,
        11
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "for ( j = 0 ; j < 6 ; j ++ )",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        1,
        2,
        11
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        1,
        24,
        23,
        10
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "cout << output [ i ] << endl ;",
        "if ( ! out [ i ] )",
        "for ( j = 0 ; j < 6 ; j ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        24,
        23,
        11
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "cout << output [ i ] << endl ;",
        "if ( ! out [ i ] )",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        1,
        24,
        10
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "cout << output [ i ] << endl ;",
        "for ( j = 0 ; j < 6 ; j ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        24,
        10,
        11
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "cout << output [ i ] << endl ;",
        "for ( j = 0 ; j < 6 ; j ++ )",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        24,
        11
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "cout << output [ i ] << endl ;",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        1,
        23,
        10
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "if ( ! out [ i ] )",
        "for ( j = 0 ; j < 6 ; j ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        10,
        11
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "if ( ! out [ i ] )",
        "for ( j = 0 ; j < 6 ; j ++ )",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        23,
        11
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "if ( ! out [ i ] )",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "for ( j = 0 ; j < 6 ; j ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10,
        11
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "for ( j = 0 ; j < 6 ; j ++ )",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "string s [ 6 ] = { \" purple \" , \" blue \" , \" orange \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        2,
        24
      ],
      "mod_code": [
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "cout << output [ i ] << endl ;"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        2,
        24,
        23
      ],
      "mod_code": [
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "cout << output [ i ] << endl ;",
        "if ( ! out [ i ] )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        2,
        24,
        23,
        10
      ],
      "mod_code": [
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "cout << output [ i ] << endl ;",
        "if ( ! out [ i ] )",
        "for ( j = 0 ; j < 6 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        2,
        24,
        23,
        11
      ],
      "mod_code": [
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "cout << output [ i ] << endl ;",
        "if ( ! out [ i ] )",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        2,
        24,
        10
      ],
      "mod_code": [
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "cout << output [ i ] << endl ;",
        "for ( j = 0 ; j < 6 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        2,
        24,
        10,
        11
      ],
      "mod_code": [
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "cout << output [ i ] << endl ;",
        "for ( j = 0 ; j < 6 ; j ++ )",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        2,
        24,
        11
      ],
      "mod_code": [
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "cout << output [ i ] << endl ;",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        2,
        23
      ],
      "mod_code": [
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! out [ i ] )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        2,
        23,
        10
      ],
      "mod_code": [
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! out [ i ] )",
        "for ( j = 0 ; j < 6 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        2,
        23,
        10,
        11
      ],
      "mod_code": [
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! out [ i ] )",
        "for ( j = 0 ; j < 6 ; j ++ )",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        2,
        23,
        11
      ],
      "mod_code": [
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "if ( ! out [ i ] )",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        2,
        10
      ],
      "mod_code": [
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "for ( j = 0 ; j < 6 ; j ++ )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        2,
        10,
        11
      ],
      "mod_code": [
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "for ( j = 0 ; j < 6 ; j ++ )",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        2,
        11
      ],
      "mod_code": [
        "string output [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" , \" Mind \" } ;",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 2,
      "err_msg": "too many initializers for ‘std::__cxx11::string [6] {aka std::__cxx11::basic_string<char> [6]}’"
    },
    {
      "mod_line": [
        24,
        23,
        10
      ],
      "mod_code": [
        "cout << output [ i ] << endl ;",
        "if ( ! out [ i ] )",
        "for ( j = 0 ; j < 6 ; j ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        23,
        10,
        11
      ],
      "mod_code": [
        "cout << output [ i ] << endl ;",
        "if ( ! out [ i ] )",
        "for ( j = 0 ; j < 6 ; j ++ )",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        23,
        11
      ],
      "mod_code": [
        "cout << output [ i ] << endl ;",
        "if ( ! out [ i ] )",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        24,
        10
      ],
      "mod_code": [
        "cout << output [ i ] << endl ;",
        "for ( j = 0 ; j < 6 ; j ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        10,
        11
      ],
      "mod_code": [
        "cout << output [ i ] << endl ;",
        "for ( j = 0 ; j < 6 ; j ++ )",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        24,
        11
      ],
      "mod_code": [
        "cout << output [ i ] << endl ;",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        23,
        10
      ],
      "mod_code": [
        "if ( ! out [ i ] )",
        "for ( j = 0 ; j < 6 ; j ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        10,
        11
      ],
      "mod_code": [
        "if ( ! out [ i ] )",
        "for ( j = 0 ; j < 6 ; j ++ )",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        23,
        11
      ],
      "mod_code": [
        "if ( ! out [ i ] )",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 11,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        10,
        11
      ],
      "mod_code": [
        "for ( j = 0 ; j < 6 ; j ++ )",
        "if ( s [ j ] == ' input ' )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    }
  ]
}