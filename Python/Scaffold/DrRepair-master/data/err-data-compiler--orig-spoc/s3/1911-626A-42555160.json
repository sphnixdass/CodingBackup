{
  "meta": {
    "index": 1911,
    "hitid": "37VE3DA4YUBH6S8KNSJMH1I2X1SBH6",
    "workerid": "ACZC9ZJROQZO9",
    "probid": "626A",
    "subid": "42555160"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare bisa which takes argument subs = string",
      "code": "bool bisa ( string subs )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let u , d , r , l = int",
      "code": "int u , d , r , l ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "u = 0",
      "code": "u = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "d = 0",
      "code": "d = 0 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "r = 0",
      "code": "r = 0 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "l = 0",
      "code": "l = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to length of subs exclusive",
      "code": "for ( int i = 0 ; i < subs . length ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if subs [ i ] is U",
      "code": "if ( subs [ i ] == ' U ' )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "increment u",
      "code": "u ++ ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "else if subs [ i ] is D",
      "code": "else if ( subs [ i ] == ' D ' )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "increment d",
      "code": "d ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "else if subs [ i ] is R",
      "code": "else if ( subs [ i ] == ' R ' )",
      "indent": 2
    },
    {
      "line": 12,
      "text": "increment r",
      "code": "r ++ ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "else if subs [ i ] is L",
      "code": "else if ( subs [ i ] == ' L ' )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "increment l",
      "code": "l ++ ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "if l is r and u is d",
      "code": "if ( l == r && u == d )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "return true",
      "code": "return true ;",
      "indent": 2
    },
    {
      "line": 19,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 20,
      "text": "return false",
      "code": "return false ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 24,
      "text": "let n , counter = long",
      "code": "long n , counter ;",
      "indent": 1
    },
    {
      "line": 25,
      "text": "counter = 0",
      "code": "counter = 0 ;",
      "indent": 1
    },
    {
      "line": 26,
      "text": "let kata = string",
      "code": "string kata ;",
      "indent": 1
    },
    {
      "line": 27,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 28,
      "text": "read kata",
      "code": "cin >> kata ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "for pjg = 2 to n inclusive incrementing by 2",
      "code": "for ( int pjg = 2 ; pjg <= n ; pjg += 2 )",
      "indent": 1
    },
    {
      "line": 30,
      "text": "for imulai = 0 to n - pjg inclusive",
      "code": "for ( int imulai = 0 ; ( imulai + pjg ) <= n ; imulai ++ )",
      "indent": 2
    },
    {
      "line": 31,
      "text": "if bisa ( substr on kata with arguments imulai and pjg ) is true , increment counter",
      "code": "if ( bisa ( kata . substr ( imulai , pjg ) ) ) { counter ++ ; }",
      "indent": 3
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 34,
      "text": "print counter",
      "code": "cout << counter << endl ;",
      "indent": 1
    },
    {
      "line": 35,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 36,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "string bisa ( string subs )"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘true’ from ‘bool’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "int r = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "int counter = 0 ;"
      ],
      "err_line": 25,
      "err_msg": "conflicting declaration ‘int counter’"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }"
      ],
      "err_line": 31,
      "err_msg": "could not convert ‘kata.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size<char, std::char_traits<char>, std::allocator<char> >()’ from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int u , d , l , l ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "int u = 0 ;"
      ],
      "err_line": 2,
      "err_msg": "redeclaration of ‘int u’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int d = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "int l = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "redeclaration of ‘int l’"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "else if ( subs [ i ] == D )"
      ],
      "err_line": 9,
      "err_msg": "‘D’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "else if ( subs [ i ] == R )"
      ],
      "err_line": 11,
      "err_msg": "‘R’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "else if ( subs [ i ] == L )"
      ],
      "err_line": 13,
      "err_msg": "‘L’ was not declared in this scope"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 22,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "else"
      ],
      "err_line": 20,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        26
      ],
      "mod_code": [
        "char kata ;"
      ],
      "err_line": 31,
      "err_msg": "request for member ‘substr’ in ‘kata’, which is of non-class type ‘char’"
    },
    {
      "mod_line": [
        27
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 27,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        29
      ],
      "mod_code": [
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )"
      ],
      "err_line": 29,
      "err_msg": "‘pjg’ was not declared in this scope"
    },
    {
      "mod_line": [
        31
      ],
      "mod_code": [
        "if ( bisa ( imulai . size ( ) , pjg ) ) { counter ++ ; }"
      ],
      "err_line": 31,
      "err_msg": "request for member ‘size’ in ‘imulai’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        0,
        4
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "int r = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        0,
        4,
        25
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "int r = 0 ;",
        "int counter = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        0,
        4,
        25,
        31
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "int r = 0 ;",
        "int counter = 0 ;",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        0,
        4,
        25,
        29
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "int r = 0 ;",
        "int counter = 0 ;",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        0,
        4,
        25,
        28
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "int r = 0 ;",
        "int counter = 0 ;",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        0,
        4,
        31
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "int r = 0 ;",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        0,
        4,
        31,
        29
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "int r = 0 ;",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        0,
        4,
        31,
        28
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "int r = 0 ;",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        0,
        4,
        29
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "int r = 0 ;",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        0,
        4,
        29,
        28
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "int r = 0 ;",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        0,
        4,
        28
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "int r = 0 ;",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        0,
        25
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "int counter = 0 ;"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘true’ from ‘bool’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        25,
        31
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "int counter = 0 ;",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘true’ from ‘bool’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        25,
        31,
        29
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "int counter = 0 ;",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘true’ from ‘bool’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        25,
        31,
        28
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "int counter = 0 ;",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }",
        "cin . get ( ) ;"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘true’ from ‘bool’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        25,
        29
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "int counter = 0 ;",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘true’ from ‘bool’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        25,
        29,
        28
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "int counter = 0 ;",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )",
        "cin . get ( ) ;"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘true’ from ‘bool’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        25,
        28
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "int counter = 0 ;",
        "cin . get ( ) ;"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘true’ from ‘bool’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        31
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘true’ from ‘bool’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        31,
        29
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘true’ from ‘bool’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        31,
        29,
        28
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )",
        "cin . get ( ) ;"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘true’ from ‘bool’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        31,
        28
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }",
        "cin . get ( ) ;"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘true’ from ‘bool’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        29
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘true’ from ‘bool’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        29,
        28
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )",
        "cin . get ( ) ;"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘true’ from ‘bool’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        0,
        28
      ],
      "mod_code": [
        "string bisa ( string subs )",
        "cin . get ( ) ;"
      ],
      "err_line": 18,
      "err_msg": "could not convert ‘true’ from ‘bool’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        4,
        25
      ],
      "mod_code": [
        "int r = 0 ;",
        "int counter = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        4,
        25,
        31
      ],
      "mod_code": [
        "int r = 0 ;",
        "int counter = 0 ;",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        4,
        25,
        31,
        29
      ],
      "mod_code": [
        "int r = 0 ;",
        "int counter = 0 ;",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        4,
        25,
        31,
        28
      ],
      "mod_code": [
        "int r = 0 ;",
        "int counter = 0 ;",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        4,
        25,
        29
      ],
      "mod_code": [
        "int r = 0 ;",
        "int counter = 0 ;",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        4,
        25,
        29,
        28
      ],
      "mod_code": [
        "int r = 0 ;",
        "int counter = 0 ;",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        4,
        25,
        28
      ],
      "mod_code": [
        "int r = 0 ;",
        "int counter = 0 ;",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        4,
        31
      ],
      "mod_code": [
        "int r = 0 ;",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        4,
        31,
        29
      ],
      "mod_code": [
        "int r = 0 ;",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        4,
        31,
        29,
        28
      ],
      "mod_code": [
        "int r = 0 ;",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        4,
        31,
        28
      ],
      "mod_code": [
        "int r = 0 ;",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        4,
        29
      ],
      "mod_code": [
        "int r = 0 ;",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        4,
        29,
        28
      ],
      "mod_code": [
        "int r = 0 ;",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        4,
        28
      ],
      "mod_code": [
        "int r = 0 ;",
        "cin . get ( ) ;"
      ],
      "err_line": 4,
      "err_msg": "redeclaration of ‘int r’"
    },
    {
      "mod_line": [
        25,
        31
      ],
      "mod_code": [
        "int counter = 0 ;",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }"
      ],
      "err_line": 25,
      "err_msg": "conflicting declaration ‘int counter’"
    },
    {
      "mod_line": [
        25,
        31,
        29
      ],
      "mod_code": [
        "int counter = 0 ;",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )"
      ],
      "err_line": 25,
      "err_msg": "conflicting declaration ‘int counter’"
    },
    {
      "mod_line": [
        25,
        31,
        29,
        28
      ],
      "mod_code": [
        "int counter = 0 ;",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )",
        "cin . get ( ) ;"
      ],
      "err_line": 25,
      "err_msg": "conflicting declaration ‘int counter’"
    },
    {
      "mod_line": [
        25,
        31,
        28
      ],
      "mod_code": [
        "int counter = 0 ;",
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }",
        "cin . get ( ) ;"
      ],
      "err_line": 25,
      "err_msg": "conflicting declaration ‘int counter’"
    },
    {
      "mod_line": [
        25,
        29
      ],
      "mod_code": [
        "int counter = 0 ;",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )"
      ],
      "err_line": 25,
      "err_msg": "conflicting declaration ‘int counter’"
    },
    {
      "mod_line": [
        25,
        29,
        28
      ],
      "mod_code": [
        "int counter = 0 ;",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )",
        "cin . get ( ) ;"
      ],
      "err_line": 25,
      "err_msg": "conflicting declaration ‘int counter’"
    },
    {
      "mod_line": [
        25,
        28
      ],
      "mod_code": [
        "int counter = 0 ;",
        "cin . get ( ) ;"
      ],
      "err_line": 25,
      "err_msg": "conflicting declaration ‘int counter’"
    },
    {
      "mod_line": [
        31,
        29
      ],
      "mod_code": [
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )"
      ],
      "err_line": 29,
      "err_msg": "‘pjg’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        29,
        28
      ],
      "mod_code": [
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }",
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )",
        "cin . get ( ) ;"
      ],
      "err_line": 29,
      "err_msg": "‘pjg’ was not declared in this scope"
    },
    {
      "mod_line": [
        31,
        28
      ],
      "mod_code": [
        "if ( bisa ( kata . size ( ) , pjg ) ) { counter ++ ; }",
        "cin . get ( ) ;"
      ],
      "err_line": 31,
      "err_msg": "could not convert ‘kata.std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size<char, std::char_traits<char>, std::allocator<char> >()’ from ‘std::__cxx11::basic_string<char>::size_type {aka long unsigned int}’ to ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’"
    },
    {
      "mod_line": [
        29,
        28
      ],
      "mod_code": [
        "for ( pjg = 2 ; pjg <= n ; pjg += 2 )",
        "cin . get ( ) ;"
      ],
      "err_line": 29,
      "err_msg": "‘pjg’ was not declared in this scope"
    }
  ]
}