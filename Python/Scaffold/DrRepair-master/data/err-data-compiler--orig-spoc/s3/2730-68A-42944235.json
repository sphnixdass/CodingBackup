{
  "meta": {
    "index": 2730,
    "hitid": "39KV3A5D181JUPJAL5J5GD38O9GS7V",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "68A",
    "subid": "42944235"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create int p , a , b",
      "code": "int p , a , b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "set min to 99999999",
      "code": "int min = 99999999 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "for i = 1 to 4 inclusive",
      "code": "for ( int i = 1 ; i <= 4 ; i ++ )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read p",
      "code": "cin >> p ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "if p < min , min = p",
      "code": "if ( p < min ) min = p ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read a and b",
      "code": "cin >> a >> b ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if min > = a and < = b",
      "code": "if ( min >= a && min <= b )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "print min - a",
      "code": "cout << min - a << endl ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "else if min < a",
      "code": "else if ( min < a )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print 0",
      "code": "cout << 0 << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else if min > b",
      "code": "else if ( min > b )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print b - a + 1",
      "code": "cout << b - a + 1 << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "min = 99999999 ;"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( min >= a && < b )"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int p , a , n ;"
      ],
      "err_line": 7,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "gets ( p ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "if ( min >= a && <= b )"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<=’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else if ( min ( b ) )"
      ],
      "err_line": 12,
      "err_msg": "‘min’ cannot be used as a function"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "min = 99999999 ;",
        "if ( min >= a && < b )"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        2,
        8,
        12
      ],
      "mod_code": [
        "min = 99999999 ;",
        "if ( min >= a && < b )",
        "else if ( min ( b ) )"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        2,
        8,
        12,
        4
      ],
      "mod_code": [
        "min = 99999999 ;",
        "if ( min >= a && < b )",
        "else if ( min ( b ) )",
        "gets ( p ) ;"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        2,
        8,
        12,
        1
      ],
      "mod_code": [
        "min = 99999999 ;",
        "if ( min >= a && < b )",
        "else if ( min ( b ) )",
        "int p , a , n ;"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        2,
        8,
        4
      ],
      "mod_code": [
        "min = 99999999 ;",
        "if ( min >= a && < b )",
        "gets ( p ) ;"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        2,
        8,
        4,
        1
      ],
      "mod_code": [
        "min = 99999999 ;",
        "if ( min >= a && < b )",
        "gets ( p ) ;",
        "int p , a , n ;"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        2,
        8,
        1
      ],
      "mod_code": [
        "min = 99999999 ;",
        "if ( min >= a && < b )",
        "int p , a , n ;"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        2,
        12
      ],
      "mod_code": [
        "min = 99999999 ;",
        "else if ( min ( b ) )"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        2,
        12,
        4
      ],
      "mod_code": [
        "min = 99999999 ;",
        "else if ( min ( b ) )",
        "gets ( p ) ;"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        2,
        12,
        4,
        8
      ],
      "mod_code": [
        "min = 99999999 ;",
        "else if ( min ( b ) )",
        "gets ( p ) ;",
        "if ( min >= a && <= b )"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        2,
        12,
        4,
        1
      ],
      "mod_code": [
        "min = 99999999 ;",
        "else if ( min ( b ) )",
        "gets ( p ) ;",
        "int p , a , n ;"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        2,
        12,
        8
      ],
      "mod_code": [
        "min = 99999999 ;",
        "else if ( min ( b ) )",
        "if ( min >= a && <= b )"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        2,
        12,
        8,
        1
      ],
      "mod_code": [
        "min = 99999999 ;",
        "else if ( min ( b ) )",
        "if ( min >= a && <= b )",
        "int p , a , n ;"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        2,
        12,
        1
      ],
      "mod_code": [
        "min = 99999999 ;",
        "else if ( min ( b ) )",
        "int p , a , n ;"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "min = 99999999 ;",
        "gets ( p ) ;"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        2,
        4,
        8
      ],
      "mod_code": [
        "min = 99999999 ;",
        "gets ( p ) ;",
        "if ( min >= a && <= b )"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        2,
        4,
        8,
        1
      ],
      "mod_code": [
        "min = 99999999 ;",
        "gets ( p ) ;",
        "if ( min >= a && <= b )",
        "int p , a , n ;"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        2,
        4,
        1
      ],
      "mod_code": [
        "min = 99999999 ;",
        "gets ( p ) ;",
        "int p , a , n ;"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "min = 99999999 ;",
        "if ( min >= a && <= b )"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        2,
        8,
        1
      ],
      "mod_code": [
        "min = 99999999 ;",
        "if ( min >= a && <= b )",
        "int p , a , n ;"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "min = 99999999 ;",
        "int p , a , n ;"
      ],
      "err_line": 2,
      "err_msg": "overloaded function with no contextual type information"
    },
    {
      "mod_line": [
        8,
        12
      ],
      "mod_code": [
        "if ( min >= a && < b )",
        "else if ( min ( b ) )"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<’ token"
    },
    {
      "mod_line": [
        8,
        12,
        4
      ],
      "mod_code": [
        "if ( min >= a && < b )",
        "else if ( min ( b ) )",
        "gets ( p ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        12,
        4,
        1
      ],
      "mod_code": [
        "if ( min >= a && < b )",
        "else if ( min ( b ) )",
        "gets ( p ) ;",
        "int p , a , n ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        12,
        1
      ],
      "mod_code": [
        "if ( min >= a && < b )",
        "else if ( min ( b ) )",
        "int p , a , n ;"
      ],
      "err_line": 7,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "if ( min >= a && < b )",
        "gets ( p ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        4,
        1
      ],
      "mod_code": [
        "if ( min >= a && < b )",
        "gets ( p ) ;",
        "int p , a , n ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "if ( min >= a && < b )",
        "int p , a , n ;"
      ],
      "err_line": 7,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        4
      ],
      "mod_code": [
        "else if ( min ( b ) )",
        "gets ( p ) ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        4,
        8
      ],
      "mod_code": [
        "else if ( min ( b ) )",
        "gets ( p ) ;",
        "if ( min >= a && <= b )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        4,
        8,
        1
      ],
      "mod_code": [
        "else if ( min ( b ) )",
        "gets ( p ) ;",
        "if ( min >= a && <= b )",
        "int p , a , n ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        4,
        1
      ],
      "mod_code": [
        "else if ( min ( b ) )",
        "gets ( p ) ;",
        "int p , a , n ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        12,
        8
      ],
      "mod_code": [
        "else if ( min ( b ) )",
        "if ( min >= a && <= b )"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<=’ token"
    },
    {
      "mod_line": [
        12,
        8,
        1
      ],
      "mod_code": [
        "else if ( min ( b ) )",
        "if ( min >= a && <= b )",
        "int p , a , n ;"
      ],
      "err_line": 7,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        12,
        1
      ],
      "mod_code": [
        "else if ( min ( b ) )",
        "int p , a , n ;"
      ],
      "err_line": 7,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "gets ( p ) ;",
        "if ( min >= a && <= b )"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        8,
        1
      ],
      "mod_code": [
        "gets ( p ) ;",
        "if ( min >= a && <= b )",
        "int p , a , n ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "gets ( p ) ;",
        "int p , a , n ;"
      ],
      "err_line": 4,
      "err_msg": "invalid conversion from ‘int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        8,
        1
      ],
      "mod_code": [
        "if ( min >= a && <= b )",
        "int p , a , n ;"
      ],
      "err_line": 7,
      "err_msg": "‘b’ was not declared in this scope"
    }
  ]
}