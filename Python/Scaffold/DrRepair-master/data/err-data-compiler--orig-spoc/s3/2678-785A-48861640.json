{
  "meta": {
    "index": 2678,
    "hitid": "3MXX6RQ9EVZPYALZRQH4IWENANOP4X",
    "workerid": "AIWEXPJAU66D9",
    "probid": "785A",
    "subid": "48861640"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create integers face and size with face = 0",
      "code": "int face = 0 , size ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read input to size",
      "code": "cin >> size ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create string pointer arr pointed to the new array of strings with size = size",
      "code": "string * arr = new string [ size ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n elements into arr",
      "code": "for ( int i = 0 ; i < size ; i ++ ) { cin >> arr [ i ] ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "in a for loop , change i from 0 to size exclusive incrementing i",
      "code": "for ( int i = 0 ; i < size ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if arr [ i ] is equal to \" Tetrahedron \"",
      "code": "if ( arr [ i ] == \" Tetrahedron \" )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "change face to the sum of face and 4",
      "code": "face += 4 ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else if arr [ i ] = \" Cube \"",
      "code": "else if ( arr [ i ] == \" Cube \" )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increase face by 6",
      "code": "face += 6 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "else if arr [ i ] is equal to \" Octahedron \"",
      "code": "else if ( arr [ i ] == \" Octahedron \" )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "increase face by 8",
      "code": "face += 8 ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else if arr [ i ] is equal to \" Dodecahedron \"",
      "code": "else if ( arr [ i ] == \" Dodecahedron \" )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "increase face by 12",
      "code": "face += 12 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "else if arr [ i ] = \" Icosahedron \"",
      "code": "else if ( arr [ i ] == \" Icosahedron \" )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "increase face by 20",
      "code": "face += 20 ;",
      "indent": 3
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print face",
      "code": "cout << face << endl ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "+= face ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘+=’ token"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> input ;"
      ],
      "err_line": 2,
      "err_msg": "‘input’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) { cin >> arr [ i ] ; }"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "for ( i = 0 ; i < size ; i ++ )"
      ],
      "err_line": 5,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "else if ( arr [ i ] == ' Cube ' )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        ".. += 6 ;"
      ],
      "err_line": 9,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "else if ( arr [ i ] == ' Octahedron ' )"
      ],
      "err_line": 10,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        ".. += 8 ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "else if ( arr [ i ] == ' Dodecahedron ' )"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        ".. += 12 ;"
      ],
      "err_line": 13,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "else if ( arr [ i ] == ' Icosahedron ' )"
      ],
      "err_line": 14,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        ".. += 20 ;"
      ],
      "err_line": 15,
      "err_msg": "expected primary-expression before ‘.’ token"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        4,
        11
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "+= face ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        4,
        11,
        17
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "+= face ;",
        "cout << \" no\\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        4,
        11,
        12
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "+= face ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        4,
        11,
        1
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "+= face ;",
        "int face , size = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        4,
        17
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "cout << \" no\\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        4,
        17,
        12
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "cout << \" no\\n \" ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        4,
        17,
        1
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "cout << \" no\\n \" ;",
        "int face , size = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        4,
        12
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        4,
        12,
        1
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )",
        "int face , size = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        4,
        1
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "int face , size = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "+= face ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        11,
        17
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "+= face ;",
        "cout << \" no\\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        11,
        17,
        12
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "+= face ;",
        "cout << \" no\\n \" ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        11,
        17,
        1
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "+= face ;",
        "cout << \" no\\n \" ;",
        "int face , size = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        11,
        12
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "+= face ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        11,
        12,
        1
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "+= face ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )",
        "int face , size = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        11,
        1
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "+= face ;",
        "int face , size = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        17
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "cout << \" no\\n \" ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        17,
        12
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "cout << \" no\\n \" ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        17,
        12,
        1
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "cout << \" no\\n \" ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )",
        "int face , size = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        17,
        1
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "cout << \" no\\n \" ;",
        "int face , size = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        12
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        12,
        1
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )",
        "int face , size = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "string * arr = new int [ size ] ;",
        "int face , size = 0 ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘int*’ to ‘std::__cxx11::string* {aka std::__cxx11::basic_string<char>*}’ in initialization"
    },
    {
      "mod_line": [
        4,
        11
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "+= face ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        11,
        17
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "+= face ;",
        "cout << \" no\\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        11,
        17,
        12
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "+= face ;",
        "cout << \" no\\n \" ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        11,
        17,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "+= face ;",
        "cout << \" no\\n \" ;",
        "int face , size = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        11,
        12
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "+= face ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        11,
        12,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "+= face ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )",
        "int face , size = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        11,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "+= face ;",
        "int face , size = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        17
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "cout << \" no\\n \" ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        17,
        12
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "cout << \" no\\n \" ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        17,
        12,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "cout << \" no\\n \" ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )",
        "int face , size = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        17,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "cout << \" no\\n \" ;",
        "int face , size = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        12
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        12,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )",
        "int face , size = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        1
      ],
      "mod_code": [
        "for ( int i = 0 ; i < n ; i ++ ) cin >> arr [ i ] ;",
        "int face , size = 0 ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        11,
        17
      ],
      "mod_code": [
        "+= face ;",
        "cout << \" no\\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘+=’ token"
    },
    {
      "mod_line": [
        11,
        17,
        12
      ],
      "mod_code": [
        "+= face ;",
        "cout << \" no\\n \" ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘+=’ token"
    },
    {
      "mod_line": [
        11,
        17,
        12,
        1
      ],
      "mod_code": [
        "+= face ;",
        "cout << \" no\\n \" ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )",
        "int face , size = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘+=’ token"
    },
    {
      "mod_line": [
        11,
        17,
        1
      ],
      "mod_code": [
        "+= face ;",
        "cout << \" no\\n \" ;",
        "int face , size = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘+=’ token"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "+= face ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘+=’ token"
    },
    {
      "mod_line": [
        11,
        12,
        1
      ],
      "mod_code": [
        "+= face ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )",
        "int face , size = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘+=’ token"
    },
    {
      "mod_line": [
        11,
        1
      ],
      "mod_code": [
        "+= face ;",
        "int face , size = 0 ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘+=’ token"
    },
    {
      "mod_line": [
        17,
        12
      ],
      "mod_code": [
        "cout << \" no\\n \" ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        17,
        12,
        1
      ],
      "mod_code": [
        "cout << \" no\\n \" ;",
        "else if ( arr [ i ] == ' Dodecahedron ' )",
        "int face , size = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    },
    {
      "mod_line": [
        12,
        1
      ],
      "mod_code": [
        "else if ( arr [ i ] == ' Dodecahedron ' )",
        "int face , size = 0 ;"
      ],
      "err_line": 12,
      "err_msg": "no match for ‘operator==’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘int’)"
    }
  ]
}