{
  "meta": {
    "index": 1526,
    "hitid": "3FJ2RVH25Z0U39Q56N2J3RHAL5292I",
    "workerid": "A2J7P30MA3S6OV",
    "probid": "1097A",
    "subid": "49053748"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create string t [ 5 ]",
      "code": "string t [ 5 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to 5 exclusive , read t [ i ]",
      "code": "for ( long long i = 0 ; i < 5 ; i ++ ) { cin >> t [ i ] ; }",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set found = 0",
      "code": "long long found = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to 5 exclusive",
      "code": "for ( long long i = 0 ; i < 5 ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if t [ i ] [ 0 ] = s [ 0 ] or t [ i ] [ 1 ] = s [ 1 ]",
      "code": "if ( t [ i ] [ 0 ] == s [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set found to 1",
      "code": "found = 1 ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "break",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 12,
      "text": "if found = 1",
      "code": "if ( found == 1 )",
      "indent": 1
    },
    {
      "line": 13,
      "text": "print YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print NO and a newline",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int t [ 5 ] ;"
      ],
      "err_line": 7,
      "err_msg": "invalid types ‘int[int]’ for array subscript"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "found = 0 ;"
      ],
      "err_line": 5,
      "err_msg": "‘found’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        12,
        7,
        9
      ],
      "mod_code": [
        "if ( ! found )",
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        7,
        9,
        8
      ],
      "mod_code": [
        "if ( ! found )",
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "do",
        "int found = 1 ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        7,
        9,
        2
      ],
      "mod_code": [
        "if ( ! found )",
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        7,
        9,
        14
      ],
      "mod_code": [
        "if ( ! found )",
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "do",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        7,
        8,
        2
      ],
      "mod_code": [
        "if ( ! found )",
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "int found = 1 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        7,
        8,
        14
      ],
      "mod_code": [
        "if ( ! found )",
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "int found = 1 ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        12,
        7,
        2
      ],
      "mod_code": [
        "if ( ! found )",
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        7,
        2,
        14
      ],
      "mod_code": [
        "if ( ! found )",
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "s >> s ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        7,
        14
      ],
      "mod_code": [
        "if ( ! found )",
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        12,
        9
      ],
      "mod_code": [
        "if ( ! found )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        9,
        8
      ],
      "mod_code": [
        "if ( ! found )",
        "do",
        "int found = 1 ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        9,
        8,
        2
      ],
      "mod_code": [
        "if ( ! found )",
        "do",
        "int found = 1 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        9,
        8,
        14
      ],
      "mod_code": [
        "if ( ! found )",
        "do",
        "int found = 1 ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        9,
        2
      ],
      "mod_code": [
        "if ( ! found )",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        9,
        2,
        14
      ],
      "mod_code": [
        "if ( ! found )",
        "do",
        "s >> s ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        9,
        14
      ],
      "mod_code": [
        "if ( ! found )",
        "do",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        12,
        8,
        2
      ],
      "mod_code": [
        "if ( ! found )",
        "int found = 1 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        8,
        2,
        14
      ],
      "mod_code": [
        "if ( ! found )",
        "int found = 1 ;",
        "s >> s ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        8,
        14
      ],
      "mod_code": [
        "if ( ! found )",
        "int found = 1 ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        12,
        2
      ],
      "mod_code": [
        "if ( ! found )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        2,
        14
      ],
      "mod_code": [
        "if ( ! found )",
        "s >> s ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        12,
        14
      ],
      "mod_code": [
        "if ( ! found )",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        7,
        9
      ],
      "mod_code": [
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        9,
        8
      ],
      "mod_code": [
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "do",
        "int found = 1 ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        9,
        8,
        2
      ],
      "mod_code": [
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "do",
        "int found = 1 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        9,
        8,
        14
      ],
      "mod_code": [
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "do",
        "int found = 1 ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        9,
        2
      ],
      "mod_code": [
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        9,
        2,
        14
      ],
      "mod_code": [
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "do",
        "s >> s ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        9,
        14
      ],
      "mod_code": [
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "do",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        7,
        8,
        2
      ],
      "mod_code": [
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "int found = 1 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        8,
        2,
        14
      ],
      "mod_code": [
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "int found = 1 ;",
        "s >> s ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        8,
        14
      ],
      "mod_code": [
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "int found = 1 ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        7,
        2
      ],
      "mod_code": [
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        2,
        14
      ],
      "mod_code": [
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "s >> s ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        7,
        14
      ],
      "mod_code": [
        "if ( ! t [ i ] [ 0 ] || t [ i ] [ 1 ] == s [ 1 ] )",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "do",
        "int found = 1 ;"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        8,
        2
      ],
      "mod_code": [
        "do",
        "int found = 1 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        8,
        2,
        14
      ],
      "mod_code": [
        "do",
        "int found = 1 ;",
        "s >> s ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        8,
        14
      ],
      "mod_code": [
        "do",
        "int found = 1 ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        2,
        14
      ],
      "mod_code": [
        "do",
        "s >> s ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        14
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "int found = 1 ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        2,
        14
      ],
      "mod_code": [
        "int found = 1 ;",
        "s >> s ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        14
      ],
      "mod_code": [
        "int found = 1 ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        14
      ],
      "mod_code": [
        "s >> s ;",
        "do"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}