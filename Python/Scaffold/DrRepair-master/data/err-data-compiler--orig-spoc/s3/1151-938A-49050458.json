{
  "meta": {
    "index": 1151,
    "hitid": "34D9ZRXCYRO1DRH8S8VPQ45YPHIAS0",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "938A",
    "subid": "49050458"
  },
  "lines": [
    {
      "line": 0,
      "text": "n = int",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "s = string",
      "code": "string s ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "in function isVowel taking a char c and returning a bool",
      "code": "bool isVowel ( char c )",
      "indent": 0
    },
    {
      "line": 3,
      "text": "return true if c is ' a ' or ' e ' or ' i ' or ' o ' or ' u ' or ' y ' else return false",
      "code": "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' o ' || c == ' u ' || c == ' y ' ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 5,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 6,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print s [ 0 ]",
      "code": "cout << s [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if size of s is 1",
      "code": "if ( ( int ) s . size ( ) == 1 )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "print newline",
      "code": "cout << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i 0 1 to size of s - 1",
      "code": "for ( int i = 1 ; i <= ( int ) s . size ( ) - 1 ; i += 1 )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "if isVowel of s [ i ] is true and isVowel of s [ i - 1 ] is true continue",
      "code": "if ( isVowel ( s [ i ] ) && isVowel ( s [ i - 1 ] ) ) continue ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "print s [ i ]",
      "code": "cout << s [ i ] ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print newline",
      "code": "cout << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c : ' y ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s ;"
      ],
      "err_line": 8,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c is ' y ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘is’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 7,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c : ' y ' ;",
        "for ( int i = 1 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        3,
        13,
        14
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c : ' y ' ;",
        "for ( int i = 1 ; i < s . size ( ) - 1 ; i ++ )",
        "if ( ! isVowel ( s [ i ] ) && ! s [ i - 1 ] ) continue ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        3,
        13,
        14,
        6
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c : ' y ' ;",
        "for ( int i = 1 ; i < s . size ( ) - 1 ; i ++ )",
        "if ( ! isVowel ( s [ i ] ) && ! s [ i - 1 ] ) continue ;",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        3,
        13,
        6
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c : ' y ' ;",
        "for ( int i = 1 ; i < s . size ( ) - 1 ; i ++ )",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        3,
        14
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c : ' y ' ;",
        "if ( ! isVowel ( s [ i ] ) && ! s [ i - 1 ] ) continue ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        3,
        14,
        6
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c : ' y ' ;",
        "if ( ! isVowel ( s [ i ] ) && ! s [ i - 1 ] ) continue ;",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        3,
        14,
        6,
        13
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c : ' y ' ;",
        "if ( ! isVowel ( s [ i ] ) && ! s [ i - 1 ] ) continue ;",
        "cin >> N ;",
        "for ( int i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        3,
        14,
        13
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c : ' y ' ;",
        "if ( ! isVowel ( s [ i ] ) && ! s [ i - 1 ] ) continue ;",
        "for ( int i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c : ' y ' ;",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        3,
        6,
        13
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c : ' y ' ;",
        "cin >> N ;",
        "for ( int i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c : ' y ' ;",
        "for ( int i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘:’ token"
    },
    {
      "mod_line": [
        13,
        14,
        3
      ],
      "mod_code": [
        "for ( int i = 1 ; i < s . size ( ) - 1 ; i ++ )",
        "if ( ! isVowel ( s [ i ] ) && ! s [ i - 1 ] ) continue ;",
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c is ' y ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘is’"
    },
    {
      "mod_line": [
        13,
        14,
        3,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i < s . size ( ) - 1 ; i ++ )",
        "if ( ! isVowel ( s [ i ] ) && ! s [ i - 1 ] ) continue ;",
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c is ' y ' ;",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘is’"
    },
    {
      "mod_line": [
        13,
        14,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i < s . size ( ) - 1 ; i ++ )",
        "if ( ! isVowel ( s [ i ] ) && ! s [ i - 1 ] ) continue ;",
        "cin >> N ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        13,
        3
      ],
      "mod_code": [
        "for ( int i = 1 ; i < s . size ( ) - 1 ; i ++ )",
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c is ' y ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘is’"
    },
    {
      "mod_line": [
        13,
        3,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i < s . size ( ) - 1 ; i ++ )",
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c is ' y ' ;",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘is’"
    },
    {
      "mod_line": [
        13,
        6
      ],
      "mod_code": [
        "for ( int i = 1 ; i < s . size ( ) - 1 ; i ++ )",
        "cin >> N ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        3
      ],
      "mod_code": [
        "if ( ! isVowel ( s [ i ] ) && ! s [ i - 1 ] ) continue ;",
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c is ' y ' ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘is’"
    },
    {
      "mod_line": [
        14,
        3,
        6
      ],
      "mod_code": [
        "if ( ! isVowel ( s [ i ] ) && ! s [ i - 1 ] ) continue ;",
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c is ' y ' ;",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘is’"
    },
    {
      "mod_line": [
        14,
        3,
        6,
        13
      ],
      "mod_code": [
        "if ( ! isVowel ( s [ i ] ) && ! s [ i - 1 ] ) continue ;",
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c is ' y ' ;",
        "cin >> N ;",
        "for ( int i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘is’"
    },
    {
      "mod_line": [
        14,
        3,
        13
      ],
      "mod_code": [
        "if ( ! isVowel ( s [ i ] ) && ! s [ i - 1 ] ) continue ;",
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c is ' y ' ;",
        "for ( int i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘is’"
    },
    {
      "mod_line": [
        14,
        6
      ],
      "mod_code": [
        "if ( ! isVowel ( s [ i ] ) && ! s [ i - 1 ] ) continue ;",
        "cin >> N ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        14,
        6,
        13
      ],
      "mod_code": [
        "if ( ! isVowel ( s [ i ] ) && ! s [ i - 1 ] ) continue ;",
        "cin >> N ;",
        "for ( int i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        6
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c is ' y ' ;",
        "cin >> N ;"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘is’"
    },
    {
      "mod_line": [
        3,
        6,
        13
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c is ' y ' ;",
        "cin >> N ;",
        "for ( int i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘is’"
    },
    {
      "mod_line": [
        3,
        13
      ],
      "mod_code": [
        "return c == ' a ' || c == ' e ' || c == ' i ' || c == ' u ' || c is ' y ' ;",
        "for ( int i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 3,
      "err_msg": "expected ‘;’ before ‘is’"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "cin >> N ;",
        "for ( int i = 0 ; i < s . size ( ) - 1 ; i ++ )"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    }
  ]
}