{
  "meta": {
    "index": 1373,
    "hitid": "3JYPJ2TAYI2ZWQIOB7DN90BEYQUPF7",
    "workerid": "A1APYLD4DUK33J",
    "probid": "96A",
    "subid": "49071297"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string s",
      "code": "string s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read s",
      "code": "cin >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create integer sum with sum = 1",
      "code": "int sum = 1 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "create boolean no with no = true",
      "code": "bool no = true ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for i = 1 to size of s exclusive",
      "code": "for ( int i = 1 ; i < s . size ( ) ; i ++ )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "if s [ i ] is s [ i - 1 ]",
      "code": "if ( s [ i ] == s [ i - 1 ] )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "increment sum",
      "code": "sum ++ ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set sum by 1",
      "code": "sum = 1 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "if sum is greater than or equal to 7",
      "code": "if ( sum >= 7 )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "print \" YES \" print newline",
      "code": "cout << \" YES \" << endl ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "set no to false",
      "code": "no = false ;",
      "indent": 3
    },
    {
      "line": 13,
      "text": "break loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 16,
      "text": "if no is true , print \" NO \" print newline",
      "code": "if ( no ) cout << \" NO \" << endl ;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int s ;"
      ],
      "err_line": 5,
      "err_msg": "request for member ‘size’ in ‘s’, which is of non-class type ‘int’"
    },
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        16,
        6,
        8
      ],
      "mod_code": [
        "sum -- ;",
        "while ( no ) cout << \" NO \" << endl ;",
        "if ( s [ i ] == ' [ ' )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        9,
        16,
        6,
        13
      ],
      "mod_code": [
        "sum -- ;",
        "while ( no ) cout << \" NO \" << endl ;",
        "if ( s [ i ] == ' [ ' )",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        16,
        6,
        2
      ],
      "mod_code": [
        "sum -- ;",
        "while ( no ) cout << \" NO \" << endl ;",
        "if ( s [ i ] == ' [ ' )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        16,
        8
      ],
      "mod_code": [
        "sum -- ;",
        "while ( no ) cout << \" NO \" << endl ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        9,
        16,
        8,
        13
      ],
      "mod_code": [
        "sum -- ;",
        "while ( no ) cout << \" NO \" << endl ;",
        "do",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        9,
        16,
        8,
        2
      ],
      "mod_code": [
        "sum -- ;",
        "while ( no ) cout << \" NO \" << endl ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        16,
        13
      ],
      "mod_code": [
        "sum -- ;",
        "while ( no ) cout << \" NO \" << endl ;",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        16,
        13,
        2
      ],
      "mod_code": [
        "sum -- ;",
        "while ( no ) cout << \" NO \" << endl ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        16,
        2
      ],
      "mod_code": [
        "sum -- ;",
        "while ( no ) cout << \" NO \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        6,
        8
      ],
      "mod_code": [
        "sum -- ;",
        "if ( s [ i ] == ' [ ' )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        9,
        6,
        8,
        13
      ],
      "mod_code": [
        "sum -- ;",
        "if ( s [ i ] == ' [ ' )",
        "do",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        9,
        6,
        8,
        2
      ],
      "mod_code": [
        "sum -- ;",
        "if ( s [ i ] == ' [ ' )",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        6,
        13
      ],
      "mod_code": [
        "sum -- ;",
        "if ( s [ i ] == ' [ ' )",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        6,
        13,
        2
      ],
      "mod_code": [
        "sum -- ;",
        "if ( s [ i ] == ' [ ' )",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        6,
        2
      ],
      "mod_code": [
        "sum -- ;",
        "if ( s [ i ] == ' [ ' )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        8
      ],
      "mod_code": [
        "sum -- ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        9,
        8,
        13
      ],
      "mod_code": [
        "sum -- ;",
        "do",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        9,
        8,
        13,
        2
      ],
      "mod_code": [
        "sum -- ;",
        "do",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        8,
        2
      ],
      "mod_code": [
        "sum -- ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        13
      ],
      "mod_code": [
        "sum -- ;",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        9,
        13,
        2
      ],
      "mod_code": [
        "sum -- ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        9,
        2
      ],
      "mod_code": [
        "sum -- ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        6,
        8
      ],
      "mod_code": [
        "while ( no ) cout << \" NO \" << endl ;",
        "if ( s [ i ] == ' [ ' )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        16,
        6,
        8,
        13
      ],
      "mod_code": [
        "while ( no ) cout << \" NO \" << endl ;",
        "if ( s [ i ] == ' [ ' )",
        "do",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        16,
        6,
        8,
        2
      ],
      "mod_code": [
        "while ( no ) cout << \" NO \" << endl ;",
        "if ( s [ i ] == ' [ ' )",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        6,
        13
      ],
      "mod_code": [
        "while ( no ) cout << \" NO \" << endl ;",
        "if ( s [ i ] == ' [ ' )",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        6,
        13,
        2
      ],
      "mod_code": [
        "while ( no ) cout << \" NO \" << endl ;",
        "if ( s [ i ] == ' [ ' )",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        6,
        2
      ],
      "mod_code": [
        "while ( no ) cout << \" NO \" << endl ;",
        "if ( s [ i ] == ' [ ' )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        8
      ],
      "mod_code": [
        "while ( no ) cout << \" NO \" << endl ;",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        16,
        8,
        13
      ],
      "mod_code": [
        "while ( no ) cout << \" NO \" << endl ;",
        "do",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        16,
        8,
        13,
        2
      ],
      "mod_code": [
        "while ( no ) cout << \" NO \" << endl ;",
        "do",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        8,
        2
      ],
      "mod_code": [
        "while ( no ) cout << \" NO \" << endl ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        13
      ],
      "mod_code": [
        "while ( no ) cout << \" NO \" << endl ;",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        16,
        13,
        2
      ],
      "mod_code": [
        "while ( no ) cout << \" NO \" << endl ;",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        16,
        2
      ],
      "mod_code": [
        "while ( no ) cout << \" NO \" << endl ;",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        8
      ],
      "mod_code": [
        "if ( s [ i ] == ' [ ' )",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        6,
        8,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == ' [ ' )",
        "do",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        6,
        8,
        13,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ' [ ' )",
        "do",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        8,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ' [ ' )",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        13
      ],
      "mod_code": [
        "if ( s [ i ] == ' [ ' )",
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        6,
        13,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ' [ ' )",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "if ( s [ i ] == ' [ ' )",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 10,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        8,
        13,
        2
      ],
      "mod_code": [
        "do",
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        8,
        2
      ],
      "mod_code": [
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    },
    {
      "mod_line": [
        13,
        2
      ],
      "mod_code": [
        "do",
        "s >> s ;"
      ],
      "err_line": 2,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ and ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’)"
    }
  ]
}