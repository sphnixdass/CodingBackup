{
  "meta": {
    "index": 626,
    "hitid": "3MXX6RQ9EVZPYALZRQH4IWEN9L5P49",
    "workerid": "A1APYLD4DUK33J",
    "probid": "5A",
    "subid": "48953481"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create character array s1 with size 101 * 101 * 101 with s1 = { }",
      "code": "char s1 [ 101 * 101 * 101 ] = { } ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integers i , j , k , s , t with i = 1 , s = 0 , t = 0",
      "code": "int i = 1 , j , k , s = 0 , t = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "while read string into s1",
      "code": "while ( gets ( s1 ) )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "if s1 [ 0 ] is ' + '",
      "code": "if ( s1 [ 0 ] == ' + ' )",
      "indent": 2
    },
    {
      "line": 5,
      "text": "increment t",
      "code": "t ++ ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "else if s1 [ 0 ] is ' - '",
      "code": "else if ( s1 [ 0 ] == ' - ' )",
      "indent": 2
    },
    {
      "line": 7,
      "text": "decrement t",
      "code": "t -- ;",
      "indent": 3
    },
    {
      "line": 8,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set j to 0",
      "code": "j = 0 ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "while s1 [ j ] - ' : ' is true , increment j",
      "code": "while ( s1 [ j ] - ' : ' ) j ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "set s to s + ( string length of ( s1 + 1 ) - j ) * t",
      "code": "s = s + ( strlen ( s1 + 1 ) - j ) * t ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print s print newline",
      "code": "cout << s << endl ;",
      "indent": 1
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char s1’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘size’ in ‘s1’, which is of non-class type ‘char [1030301]’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 13,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "s = s + ( ( int ) ( s1 + 1 ) - j ) * t ;"
      ],
      "err_line": 11,
      "err_msg": "cast from ‘char*’ to ‘int’ loses precision [-fpermissive]"
    },
    {
      "mod_line": [
        1,
        3
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;",
        "while ( cin >> s1 )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char s1’"
    },
    {
      "mod_line": [
        1,
        3,
        11
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;",
        "while ( cin >> s1 )",
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char s1’"
    },
    {
      "mod_line": [
        1,
        3,
        11,
        6
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;",
        "while ( cin >> s1 )",
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;",
        "else if ( ! s1 [ 0 ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char s1’"
    },
    {
      "mod_line": [
        1,
        3,
        11,
        4
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;",
        "while ( cin >> s1 )",
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        3,
        11
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;",
        "while ( cin >> s1 )",
        "s = s + ( ( int ) ( s1 + 1 ) - j ) * t ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char s1’"
    },
    {
      "mod_line": [
        1,
        3,
        11,
        6
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;",
        "while ( cin >> s1 )",
        "s = s + ( ( int ) ( s1 + 1 ) - j ) * t ;",
        "else if ( ! s1 [ 0 ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char s1’"
    },
    {
      "mod_line": [
        1,
        3,
        11,
        4
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;",
        "while ( cin >> s1 )",
        "s = s + ( ( int ) ( s1 + 1 ) - j ) * t ;",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        3,
        6
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;",
        "while ( cin >> s1 )",
        "else if ( ! s1 [ 0 ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char s1’"
    },
    {
      "mod_line": [
        1,
        3,
        6,
        4
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;",
        "while ( cin >> s1 )",
        "else if ( ! s1 [ 0 ] == ' - ' )",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        3,
        4
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;",
        "while ( cin >> s1 )",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;",
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char s1’"
    },
    {
      "mod_line": [
        1,
        11,
        6
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;",
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;",
        "else if ( ! s1 [ 0 ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char s1’"
    },
    {
      "mod_line": [
        1,
        11,
        6,
        4
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;",
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;",
        "else if ( ! s1 [ 0 ] == ' - ' )",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        11,
        4
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;",
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        11
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;",
        "s = s + ( ( int ) ( s1 + 1 ) - j ) * t ;"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char s1’"
    },
    {
      "mod_line": [
        1,
        11,
        6
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;",
        "s = s + ( ( int ) ( s1 + 1 ) - j ) * t ;",
        "else if ( ! s1 [ 0 ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char s1’"
    },
    {
      "mod_line": [
        1,
        11,
        6,
        4
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;",
        "s = s + ( ( int ) ( s1 + 1 ) - j ) * t ;",
        "else if ( ! s1 [ 0 ] == ' - ' )",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        11,
        4
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;",
        "s = s + ( ( int ) ( s1 + 1 ) - j ) * t ;",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        6
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;",
        "else if ( ! s1 [ 0 ] == ' - ' )"
      ],
      "err_line": 1,
      "err_msg": "conflicting declaration ‘char s1’"
    },
    {
      "mod_line": [
        1,
        6,
        4
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;",
        "else if ( ! s1 [ 0 ] == ' - ' )",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "char s1 [ 101 * 101 ] = { } , s1 = { } ;",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "while ( cin >> s1 )",
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘size’ in ‘s1’, which is of non-class type ‘char [1030301]’"
    },
    {
      "mod_line": [
        3,
        11,
        6
      ],
      "mod_code": [
        "while ( cin >> s1 )",
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;",
        "else if ( ! s1 [ 0 ] == ' - ' )"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘size’ in ‘s1’, which is of non-class type ‘char [1030301]’"
    },
    {
      "mod_line": [
        3,
        11,
        6,
        4
      ],
      "mod_code": [
        "while ( cin >> s1 )",
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;",
        "else if ( ! s1 [ 0 ] == ' - ' )",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        11,
        4
      ],
      "mod_code": [
        "while ( cin >> s1 )",
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "while ( cin >> s1 )",
        "s = s + ( ( int ) ( s1 + 1 ) - j ) * t ;"
      ],
      "err_line": 11,
      "err_msg": "cast from ‘char*’ to ‘int’ loses precision [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        11,
        6
      ],
      "mod_code": [
        "while ( cin >> s1 )",
        "s = s + ( ( int ) ( s1 + 1 ) - j ) * t ;",
        "else if ( ! s1 [ 0 ] == ' - ' )"
      ],
      "err_line": 11,
      "err_msg": "cast from ‘char*’ to ‘int’ loses precision [-fpermissive]"
    },
    {
      "mod_line": [
        3,
        11,
        6,
        4
      ],
      "mod_code": [
        "while ( cin >> s1 )",
        "s = s + ( ( int ) ( s1 + 1 ) - j ) * t ;",
        "else if ( ! s1 [ 0 ] == ' - ' )",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        11,
        4
      ],
      "mod_code": [
        "while ( cin >> s1 )",
        "s = s + ( ( int ) ( s1 + 1 ) - j ) * t ;",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        6,
        4
      ],
      "mod_code": [
        "while ( cin >> s1 )",
        "else if ( ! s1 [ 0 ] == ' - ' )",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "while ( cin >> s1 )",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;",
        "else if ( ! s1 [ 0 ] == ' - ' )"
      ],
      "err_line": 11,
      "err_msg": "request for member ‘size’ in ‘s1’, which is of non-class type ‘char [1030301]’"
    },
    {
      "mod_line": [
        11,
        6,
        4
      ],
      "mod_code": [
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;",
        "else if ( ! s1 [ 0 ] == ' - ' )",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        4
      ],
      "mod_code": [
        "s = s + ( ( s1 . size ( ) + 1 ) - j ) * t ;",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        6
      ],
      "mod_code": [
        "s = s + ( ( int ) ( s1 + 1 ) - j ) * t ;",
        "else if ( ! s1 [ 0 ] == ' - ' )"
      ],
      "err_line": 11,
      "err_msg": "cast from ‘char*’ to ‘int’ loses precision [-fpermissive]"
    },
    {
      "mod_line": [
        11,
        6,
        4
      ],
      "mod_code": [
        "s = s + ( ( int ) ( s1 + 1 ) - j ) * t ;",
        "else if ( ! s1 [ 0 ] == ' - ' )",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        11,
        4
      ],
      "mod_code": [
        "s = s + ( ( int ) ( s1 + 1 ) - j ) * t ;",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        6,
        4
      ],
      "mod_code": [
        "else if ( ! s1 [ 0 ] == ' - ' )",
        "if ( s1 [ 0 ] == \" + ' )"
      ],
      "err_line": 4,
      "err_msg": "missing terminating \" character"
    }
  ]
}