{
  "meta": {
    "index": 2718,
    "hitid": "3WYZV0QBFJ7ESI8ZSW18KN6WMEABX9",
    "workerid": "AIWEXPJAU66D9",
    "probid": "710A",
    "subid": "48372576"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare new character variables n and m",
      "code": "char n , m ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read standard input to n and m",
      "code": "cin >> n >> m ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if ( m is ' 1 ' or ' 8 ' ) and ( n is ' a ' or ' h ' )",
      "code": "if ( ( m == ' 1 ' || m == ' 8 ' ) && ( n == ' a ' || n == ' h ' ) )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print 3 and ' \\ n '",
      "code": "cout << 3 << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 5,
      "text": "else if ( m = ' 1 ' or ' 8 ' ) or ( n = ' a ' or ' h ' )",
      "code": "else if ( m == ' 1 ' || m == ' 8 ' || n == ' a ' || n == ' h ' )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "print 5 and ' \\ n '",
      "code": "cout << 5 << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 8,
      "text": "print 8 and ' \\ n '",
      "code": "cout << 8 << ' \\n ' ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "char n and m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "if ( m == ' 1 ' || ( n == ' 8 ' ) && ( n == ' a ' || ( n == ' a ' ) )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "else if ( ( m == ' 1 ' || ( n == ' 8 ' ) || ( n == ' a ' || n == ' h ' ) )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "if ( m == ' 1 ' || ( n == ' 8 ' ) && ( n == ' a ' || n == ' h ' ) )",
        "char n and m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        1,
        5
      ],
      "mod_code": [
        "if ( m == ' 1 ' || ( n == ' 8 ' ) && ( n == ' a ' || n == ' h ' ) )",
        "char n and m ;",
        "else if ( ( m == ' 1 ' || ( n == ' 8 ' ) || ( n == ' a ' || n == ' h ' ) )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        1,
        5,
        7
      ],
      "mod_code": [
        "if ( m == ' 1 ' || ( n == ' 8 ' ) && ( n == ' a ' || n == ' h ' ) )",
        "char n and m ;",
        "else if ( ( m == ' 1 ' || ( n == ' 8 ' ) || ( n == ' a ' || n == ' h ' ) )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        1,
        7
      ],
      "mod_code": [
        "if ( m == ' 1 ' || ( n == ' 8 ' ) && ( n == ' a ' || n == ' h ' ) )",
        "char n and m ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "if ( m == ' 1 ' || ( n == ' 8 ' ) && ( n == ' a ' || n == ' h ' ) )",
        "else if ( ( m == ' 1 ' || ( n == ' 8 ' ) || ( n == ' a ' || n == ' h ' ) )"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        5,
        7
      ],
      "mod_code": [
        "if ( m == ' 1 ' || ( n == ' 8 ' ) && ( n == ' a ' || n == ' h ' ) )",
        "else if ( ( m == ' 1 ' || ( n == ' 8 ' ) || ( n == ' a ' || n == ' h ' ) )",
        "do"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "if ( m == ' 1 ' || ( n == ' 8 ' ) && ( n == ' a ' || n == ' h ' ) )",
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        1
      ],
      "mod_code": [
        "if ( m == ' 1 ' || ( n == ' 8 ' ) && ( n == ' a ' || ( n == ' a ' ) )",
        "char n and m ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        1,
        5
      ],
      "mod_code": [
        "if ( m == ' 1 ' || ( n == ' 8 ' ) && ( n == ' a ' || ( n == ' a ' ) )",
        "char n and m ;",
        "else if ( ( m == ' 1 ' || ( n == ' 8 ' ) || ( n == ' a ' || n == ' h ' ) )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        1,
        5,
        7
      ],
      "mod_code": [
        "if ( m == ' 1 ' || ( n == ' 8 ' ) && ( n == ' a ' || ( n == ' a ' ) )",
        "char n and m ;",
        "else if ( ( m == ' 1 ' || ( n == ' 8 ' ) || ( n == ' a ' || n == ' h ' ) )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        1,
        7
      ],
      "mod_code": [
        "if ( m == ' 1 ' || ( n == ' 8 ' ) && ( n == ' a ' || ( n == ' a ' ) )",
        "char n and m ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        3,
        5
      ],
      "mod_code": [
        "if ( m == ' 1 ' || ( n == ' 8 ' ) && ( n == ' a ' || ( n == ' a ' ) )",
        "else if ( ( m == ' 1 ' || ( n == ' 8 ' ) || ( n == ' a ' || n == ' h ' ) )"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        5,
        7
      ],
      "mod_code": [
        "if ( m == ' 1 ' || ( n == ' 8 ' ) && ( n == ' a ' || ( n == ' a ' ) )",
        "else if ( ( m == ' 1 ' || ( n == ' 8 ' ) || ( n == ' a ' || n == ' h ' ) )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "if ( m == ' 1 ' || ( n == ' 8 ' ) && ( n == ' a ' || ( n == ' a ' ) )",
        "do"
      ],
      "err_line": 4,
      "err_msg": "expected ‘)’ before ‘{’ token"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "char n and m ;",
        "else if ( ( m == ' 1 ' || ( n == ' 8 ' ) || ( n == ' a ' || n == ' h ' ) )"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        5,
        7
      ],
      "mod_code": [
        "char n and m ;",
        "else if ( ( m == ' 1 ' || ( n == ' 8 ' ) || ( n == ' a ' || n == ' h ' ) )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        1,
        7
      ],
      "mod_code": [
        "char n and m ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘and’ token"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "else if ( ( m == ' 1 ' || ( n == ' 8 ' ) || ( n == ' a ' || n == ' h ' ) )",
        "do"
      ],
      "err_line": 6,
      "err_msg": "expected ‘)’ before ‘{’ token"
    }
  ]
}