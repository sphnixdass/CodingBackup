{
  "meta": {
    "index": 2284,
    "hitid": "3VMV5CHJZ8932I7Q38SPWVCNPVIGTG",
    "workerid": "AIWEXPJAU66D9",
    "probid": "58A",
    "subid": "49070867"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create string variable a = \" hello \"",
      "code": "string a = \" hello \" ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "new string x",
      "code": "string x ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "read from the input to x",
      "code": "cin >> x ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "declare integer variable l = length of x",
      "code": "int l = x . length ( ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "define integer j = 0",
      "code": "int j = 0 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "i and c are integers with c = 0",
      "code": "int i , c = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to l exclusive",
      "code": "for ( i = 0 ; i < l ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "if x [ i ] is equal to a [ j ]",
      "code": "if ( x [ i ] == a [ j ] )",
      "indent": 2
    },
    {
      "line": 9,
      "text": "increment j",
      "code": "j ++ ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "increment c",
      "code": "c ++ ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "if c is equal to 5",
      "code": "if ( c == 5 )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "print \" YES \"",
      "code": "cout << \" YES \" << endl ;",
      "indent": 2
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 16,
      "text": "print \" NO \"",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "string x ="
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "gets ( x ) ;"
      ],
      "err_line": 3,
      "err_msg": "cannot convert ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ to ‘char*’ for argument ‘1’ to ‘char* gets(char*)’"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        2
      ],
      "mod_code": [
        "int i = 0 , c ;",
        "string x ="
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        2,
        13
      ],
      "mod_code": [
        "int i = 0 , c ;",
        "string x =",
        "if ( c == ' 5 ' )"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        2,
        13,
        1
      ],
      "mod_code": [
        "int i = 0 , c ;",
        "string x =",
        "if ( c == ' 5 ' )",
        "string a = \" , \" ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        2,
        13,
        15
      ],
      "mod_code": [
        "int i = 0 , c ;",
        "string x =",
        "if ( c == ' 5 ' )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        2,
        13,
        8
      ],
      "mod_code": [
        "int i = 0 , c ;",
        "string x =",
        "if ( c == ' 5 ' )",
        "if ( x [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        2,
        1
      ],
      "mod_code": [
        "int i = 0 , c ;",
        "string x =",
        "string a = \" , \" ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        2,
        1,
        15
      ],
      "mod_code": [
        "int i = 0 , c ;",
        "string x =",
        "string a = \" , \" ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        2,
        1,
        8
      ],
      "mod_code": [
        "int i = 0 , c ;",
        "string x =",
        "string a = \" , \" ;",
        "if ( x [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        2,
        15
      ],
      "mod_code": [
        "int i = 0 , c ;",
        "string x =",
        "do"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        2,
        15,
        8
      ],
      "mod_code": [
        "int i = 0 , c ;",
        "string x =",
        "do",
        "if ( x [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        2,
        8
      ],
      "mod_code": [
        "int i = 0 , c ;",
        "string x =",
        "if ( x [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        6,
        13,
        1,
        15
      ],
      "mod_code": [
        "int i = 0 , c ;",
        "if ( c == ' 5 ' )",
        "string a = \" , \" ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        13,
        15
      ],
      "mod_code": [
        "int i = 0 , c ;",
        "if ( c == ' 5 ' )",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        13,
        15,
        8
      ],
      "mod_code": [
        "int i = 0 , c ;",
        "if ( c == ' 5 ' )",
        "do",
        "if ( x [ i ] == ' [ ' )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        1,
        15
      ],
      "mod_code": [
        "int i = 0 , c ;",
        "string a = \" , \" ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        1,
        15,
        8
      ],
      "mod_code": [
        "int i = 0 , c ;",
        "string a = \" , \" ;",
        "do",
        "if ( x [ i ] == ' [ ' )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        15
      ],
      "mod_code": [
        "int i = 0 , c ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        6,
        15,
        8
      ],
      "mod_code": [
        "int i = 0 , c ;",
        "do",
        "if ( x [ i ] == ' [ ' )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        2,
        13
      ],
      "mod_code": [
        "string x =",
        "if ( c == ' 5 ' )"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        13,
        1
      ],
      "mod_code": [
        "string x =",
        "if ( c == ' 5 ' )",
        "string a = \" , \" ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        13,
        1,
        15
      ],
      "mod_code": [
        "string x =",
        "if ( c == ' 5 ' )",
        "string a = \" , \" ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        13,
        1,
        8
      ],
      "mod_code": [
        "string x =",
        "if ( c == ' 5 ' )",
        "string a = \" , \" ;",
        "if ( x [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        13,
        15
      ],
      "mod_code": [
        "string x =",
        "if ( c == ' 5 ' )",
        "do"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        13,
        15,
        8
      ],
      "mod_code": [
        "string x =",
        "if ( c == ' 5 ' )",
        "do",
        "if ( x [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        13,
        8
      ],
      "mod_code": [
        "string x =",
        "if ( c == ' 5 ' )",
        "if ( x [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        1
      ],
      "mod_code": [
        "string x =",
        "string a = \" , \" ;"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        1,
        15
      ],
      "mod_code": [
        "string x =",
        "string a = \" , \" ;",
        "do"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        1,
        15,
        8
      ],
      "mod_code": [
        "string x =",
        "string a = \" , \" ;",
        "do",
        "if ( x [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        1,
        8
      ],
      "mod_code": [
        "string x =",
        "string a = \" , \" ;",
        "if ( x [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        15
      ],
      "mod_code": [
        "string x =",
        "do"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        15,
        8
      ],
      "mod_code": [
        "string x =",
        "do",
        "if ( x [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        2,
        8
      ],
      "mod_code": [
        "string x =",
        "if ( x [ i ] == ' [ ' )"
      ],
      "err_line": 3,
      "err_msg": "conversion from ‘std::basic_istream<char>’ to non-scalar type ‘std::__cxx11::string {aka std::__cxx11::basic_string<char>}’ requested"
    },
    {
      "mod_line": [
        13,
        1,
        15
      ],
      "mod_code": [
        "if ( c == ' 5 ' )",
        "string a = \" , \" ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        13,
        1,
        15,
        8
      ],
      "mod_code": [
        "if ( c == ' 5 ' )",
        "string a = \" , \" ;",
        "do",
        "if ( x [ i ] == ' [ ' )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        13,
        15
      ],
      "mod_code": [
        "if ( c == ' 5 ' )",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        13,
        15,
        8
      ],
      "mod_code": [
        "if ( c == ' 5 ' )",
        "do",
        "if ( x [ i ] == ' [ ' )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "string a = \" , \" ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        1,
        15,
        8
      ],
      "mod_code": [
        "string a = \" , \" ;",
        "do",
        "if ( x [ i ] == ' [ ' )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        15,
        8
      ],
      "mod_code": [
        "do",
        "if ( x [ i ] == ' [ ' )"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before numeric constant"
    }
  ]
}