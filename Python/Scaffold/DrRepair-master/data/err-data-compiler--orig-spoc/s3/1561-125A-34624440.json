{
  "meta": {
    "index": 1561,
    "hitid": "3TL87MO8CMJ9553QJFKGSJ2UU3ULFH",
    "workerid": "AIWEXPJAU66D9",
    "probid": "125A",
    "subid": "34624440"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "define ints n , ft , inch and r",
      "code": "int n , ft , inch , r ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read variable n from the input",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "assign the new value = n / 36 to ft",
      "code": "ft = n / 36 ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "set inch to ( n modulo 36 ) / 3",
      "code": "inch = ( n % 36 ) / 3 ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "change the value of r to ( n % 36 ) % 3",
      "code": "r = ( n % 36 ) % 3 ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "increment inch if r is greater than 1",
      "code": "if ( r > 1 ) inch ++ ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "if inch is 12",
      "code": "if ( inch == 12 )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "add one to ft",
      "code": "ft ++ ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "set inch to 0",
      "code": "inch = 0 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print ft , \" \" and inch to the standard output",
      "code": "cout << ft << \" \" << inch << endl ;",
      "indent": 1
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 13,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "{ cin >> n ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        11,
        2
      ],
      "mod_code": [
        "cout << ft << \" \" ;",
        "{ cin >> n ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        11,
        2,
        4
      ],
      "mod_code": [
        "cout << ft << \" \" ;",
        "{ cin >> n ;",
        "inch %= 3 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        11,
        2,
        4,
        5
      ],
      "mod_code": [
        "cout << ft << \" \" ;",
        "{ cin >> n ;",
        "inch %= 3 ;",
        "r %= 3 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        11,
        2,
        4,
        7
      ],
      "mod_code": [
        "cout << ft << \" \" ;",
        "{ cin >> n ;",
        "inch %= 3 ;",
        "if ( ! inch )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        11,
        2,
        5
      ],
      "mod_code": [
        "cout << ft << \" \" ;",
        "{ cin >> n ;",
        "r %= 3 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        11,
        2,
        5,
        7
      ],
      "mod_code": [
        "cout << ft << \" \" ;",
        "{ cin >> n ;",
        "r %= 3 ;",
        "if ( ! inch )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        11,
        2,
        7
      ],
      "mod_code": [
        "cout << ft << \" \" ;",
        "{ cin >> n ;",
        "if ( ! inch )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "{ cin >> n ;",
        "inch %= 3 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        4,
        5
      ],
      "mod_code": [
        "{ cin >> n ;",
        "inch %= 3 ;",
        "r %= 3 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        4,
        5,
        7
      ],
      "mod_code": [
        "{ cin >> n ;",
        "inch %= 3 ;",
        "r %= 3 ;",
        "if ( ! inch )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        4,
        7
      ],
      "mod_code": [
        "{ cin >> n ;",
        "inch %= 3 ;",
        "if ( ! inch )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "{ cin >> n ;",
        "r %= 3 ;"
      ],
      "err_line": 13,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        5,
        7
      ],
      "mod_code": [
        "{ cin >> n ;",
        "r %= 3 ;",
        "if ( ! inch )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘}’ at end of input"
    },
    {
      "mod_line": [
        2,
        7
      ],
      "mod_code": [
        "{ cin >> n ;",
        "if ( ! inch )"
      ],
      "err_line": 13,
      "err_msg": "expected ‘}’ at end of input"
    }
  ]
}