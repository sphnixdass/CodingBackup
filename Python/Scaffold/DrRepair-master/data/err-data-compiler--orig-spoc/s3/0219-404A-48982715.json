{
  "meta": {
    "index": 219,
    "hitid": "30ZKOOGW2W01J7IEFPG5U3IPZHE1AG",
    "workerid": "A1MJVTR0PCKBWW",
    "probid": "404A",
    "subid": "48982715"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "integer as n",
      "code": "int n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "create character variable letters size n by n",
      "code": "char letters [ n ] [ n ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "for i = 0 to less than n do the following",
      "code": "for ( int i = 0 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "for j = 0 to less than n input letters [ i ] [ j ]",
      "code": "for ( int j = 0 ; j < n ; ++ j ) { cin >> letters [ i ] [ j ] ; }",
      "indent": 2
    },
    {
      "line": 6,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 7,
      "text": "set char diagonal_char to letters [ 0 ] [ 0 ]",
      "code": "char diagonal_char = letters [ 0 ] [ 0 ] ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "set char non_diagonal_char to letters [ 0 ] [ 1 ]",
      "code": "char non_diagonal_char = letters [ 0 ] [ 1 ] ;",
      "indent": 1
    },
    {
      "line": 9,
      "text": "if diagonal_char is non_diagonal_char then do the following",
      "code": "if ( diagonal_char == non_diagonal_char )",
      "indent": 1
    },
    {
      "line": 10,
      "text": "output NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 2
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 13,
      "text": "for i = 0 to less than n do the following",
      "code": "for ( int i = 0 ; i < n ; ++ i )",
      "indent": 1
    },
    {
      "line": 14,
      "text": "for j = 0 to less than n do the following",
      "code": "for ( int j = 0 ; j < n ; ++ j )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if i is j or i then do the following",
      "code": "if ( i == j || i == n - j - 1 )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "if letters [ i ] [ j ] is not equal to diagonal_char then do the following",
      "code": "if ( letters [ i ] [ j ] != diagonal_char )",
      "indent": 4
    },
    {
      "line": 17,
      "text": "output NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 5
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 5
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 20,
      "text": "else",
      "code": "else",
      "indent": 3
    },
    {
      "line": 21,
      "text": "if letters [ i ] [ j ] is not equal to non_diagonal_char then do the following",
      "code": "if ( letters [ i ] [ j ] != non_diagonal_char )",
      "indent": 4
    },
    {
      "line": 22,
      "text": "output NO",
      "code": "cout << \" NO \" << endl ;",
      "indent": 5
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 5
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "output YES",
      "code": "cout << \" YES \" << endl ;",
      "indent": 1
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "char letters [ n ] = { 0 } ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "while ( i == j || i == i )"
      ],
      "err_line": 20,
      "err_msg": "‘else’ without a previous ‘if’"
    },
    {
      "mod_line": [
        20
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        20
      ],
      "mod_code": [
        "if ( i == j || i == i )",
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        15,
        20,
        2
      ],
      "mod_code": [
        "if ( i == j || i == i )",
        "do",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        20,
        2,
        3
      ],
      "mod_code": [
        "if ( i == j || i == i )",
        "do",
        "cin >> N ;",
        "char letters [ n ] = { 0 } ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        20,
        3
      ],
      "mod_code": [
        "if ( i == j || i == i )",
        "do",
        "char letters [ n ] = { 0 } ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        2
      ],
      "mod_code": [
        "if ( i == j || i == i )",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        2,
        3
      ],
      "mod_code": [
        "if ( i == j || i == i )",
        "cin >> N ;",
        "char letters [ n ] = { 0 } ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        3
      ],
      "mod_code": [
        "if ( i == j || i == i )",
        "char letters [ n ] = { 0 } ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        20,
        15
      ],
      "mod_code": [
        "do",
        "while ( i == j || i == i )"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        20,
        15,
        2
      ],
      "mod_code": [
        "do",
        "while ( i == j || i == i )",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        15,
        2,
        3
      ],
      "mod_code": [
        "do",
        "while ( i == j || i == i )",
        "cin >> N ;",
        "char letters [ n ] = { 0 } ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        15,
        3
      ],
      "mod_code": [
        "do",
        "while ( i == j || i == i )",
        "char letters [ n ] = { 0 } ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        20,
        2
      ],
      "mod_code": [
        "do",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        2,
        3
      ],
      "mod_code": [
        "do",
        "cin >> N ;",
        "char letters [ n ] = { 0 } ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        20,
        3
      ],
      "mod_code": [
        "do",
        "char letters [ n ] = { 0 } ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        15,
        2
      ],
      "mod_code": [
        "while ( i == j || i == i )",
        "cin >> N ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        2,
        3
      ],
      "mod_code": [
        "while ( i == j || i == i )",
        "cin >> N ;",
        "char letters [ n ] = { 0 } ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        15,
        3
      ],
      "mod_code": [
        "while ( i == j || i == i )",
        "char letters [ n ] = { 0 } ;"
      ],
      "err_line": 5,
      "err_msg": "invalid types ‘char[int]’ for array subscript"
    },
    {
      "mod_line": [
        2,
        3
      ],
      "mod_code": [
        "cin >> N ;",
        "char letters [ n ] = { 0 } ;"
      ],
      "err_line": 2,
      "err_msg": "‘N’ was not declared in this scope"
    }
  ]
}