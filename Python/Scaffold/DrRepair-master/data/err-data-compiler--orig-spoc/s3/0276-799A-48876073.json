{
  "meta": {
    "index": 276,
    "hitid": "3TRB893CSJ4G4KAJQ5PORZK50YJG7W",
    "workerid": "A1NBHCFZKJGHKW",
    "probid": "799A",
    "subid": "48876073"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "n , t , k , d = int",
      "code": "int n , t , k , d ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read n then t then k then d",
      "code": "cin >> n >> t >> k >> d ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "if ( n - ( ( d / t ) * k ) ) is greater than k",
      "code": "if ( ( n - ( ( d / t ) * k ) ) > k )",
      "indent": 1
    },
    {
      "line": 4,
      "text": "print \" YES \"",
      "code": "cout << \" YES \"",
      "indent": 2
    },
    {
      "line": 5,
      "text": "print newline",
      "code": "<< \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 6,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 7,
      "text": "print \" NO \"",
      "code": "cout << \" NO \"",
      "indent": 2
    },
    {
      "line": 8,
      "text": "print newline",
      "code": "<< \" \\n \" ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cout << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cout << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int n , t , d , d ;"
      ],
      "err_line": 1,
      "err_msg": "redeclaration of ‘int d’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "cout << \" NO\\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cout << \" \\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        4,
        5,
        7
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        5,
        7,
        6
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        5,
        8
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        4,
        5,
        8,
        6
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "cout << endl ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        4,
        5,
        6
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        7,
        8
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        7,
        8,
        6
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        7,
        6
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << \" NO \" << endl ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        8
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        8,
        6
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "cout << endl ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "cout << \" YES \" << endl ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        7
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" NO \" << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        7,
        8
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        7,
        8,
        6
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << endl ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        7,
        4
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        7,
        4,
        6
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        5,
        7,
        6
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" NO \" << endl ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        8
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << endl ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        8,
        4
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << endl ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        8,
        4,
        6
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << endl ;",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        8,
        6
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << endl ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        5,
        4,
        6
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        5,
        6
      ],
      "mod_code": [
        "cout << endl ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        7,
        8,
        4
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << endl ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        8,
        4,
        6
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << endl ;",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        8,
        6
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << endl ;",
        "do"
      ],
      "err_line": 9,
      "err_msg": "expected ‘while’ before numeric constant"
    },
    {
      "mod_line": [
        7,
        4
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        4,
        6
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        7,
        6
      ],
      "mod_code": [
        "cout << \" NO \" << endl ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        8,
        4
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        8,
        4,
        6
      ],
      "mod_code": [
        "cout << endl ;",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<<’ token"
    },
    {
      "mod_line": [
        8,
        6
      ],
      "mod_code": [
        "cout << endl ;",
        "do"
      ],
      "err_line": 8,
      "err_msg": "expected ‘;’ before ‘cout’"
    },
    {
      "mod_line": [
        4,
        6
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 5,
      "err_msg": "expected primary-expression before ‘<<’ token"
    }
  ]
}