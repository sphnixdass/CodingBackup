{
  "meta": {
    "index": 844,
    "hitid": "3TKXBROM5T4NK6HGH2EOF12U66FIJ1",
    "workerid": "A1APYLD4DUK33J",
    "probid": "987A",
    "subid": "49065339"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare integer n",
      "code": "int n ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare string array gem size 6 = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" }",
      "code": "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Space \" , \" Soul \" , \" Reality \" , \" Mind \" } ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "declare string array color size 6 = { \" purple \" , \" green \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" }",
      "code": "string color [ 6 ] = { \" purple \" , \" green \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "declare string array inp size 6",
      "code": "string inp [ 6 ] ;",
      "indent": 0
    },
    {
      "line": 4,
      "text": "declare string vector out",
      "code": "vector < string > out ;",
      "indent": 0
    },
    {
      "line": 5,
      "text": "declare run with no arguments , returning void",
      "code": "void run ( )",
      "indent": 0
    },
    {
      "line": 6,
      "text": "read n",
      "code": "cin >> n ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "for i = 0 to n exclusive , read inp [ i ]",
      "code": "for ( int i = 0 ; i < n ; i ++ ) { cin >> inp [ i ] ; }",
      "indent": 1
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 9,
      "text": "declare solve with no arguments , returning void",
      "code": "void solve ( )",
      "indent": 0
    },
    {
      "line": 10,
      "text": "for i = 0 to 6 exclusive",
      "code": "for ( int i = 0 ; i < 6 ; i ++ )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "declare boolean have = false",
      "code": "bool have = false ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "for j = 0 to n exclusive",
      "code": "for ( int j = 0 ; j < n ; j ++ )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if color [ i ] is inp [ j ] , let have = true",
      "code": "if ( color [ i ] == inp [ j ] ) { have = true ; }",
      "indent": 3
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if have is false , add gem [ i ] to end of out",
      "code": "if ( have == false ) out . push_back ( gem [ i ] ) ;",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "print size of out and newline",
      "code": "cout << out . size ( ) << endl ;",
      "indent": 1
    },
    {
      "line": 18,
      "text": "for i = beginning of out to i is not end of out , incrementing i , print value of i and newline",
      "code": "for ( vector < string > :: iterator i = out . begin ( ) ; i != out . end ( ) ; i ++ ) cout << * i << endl ;",
      "indent": 1
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 21,
      "text": "run run",
      "code": "run ( ) ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "run solve",
      "code": "solve ( ) ;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "void no ( )"
      ],
      "err_line": 21,
      "err_msg": "‘run’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::vector<std::__cxx11::basic_string<char> >::iterator {aka __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > >}’)"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "string a [ 6 ] ;"
      ],
      "err_line": 7,
      "err_msg": "‘inp’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "vector < int > out ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘std::vector<int>::push_back(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "void with ( )"
      ],
      "err_line": 21,
      "err_msg": "‘run’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        9
      ],
      "mod_code": [
        "void solve ( ) ;"
      ],
      "err_line": 10,
      "err_msg": "expected unqualified-id before ‘{’ token"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( i = 0 ; i < 6 ; i ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "for ( j = 0 ; j < n ; j ++ )"
      ],
      "err_line": 12,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "for ( i = out . begin ( ) ; i != out . end ( ) ; i ++ ) cout << i << endl ;"
      ],
      "err_line": 18,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    },
    {
      "mod_line": [
        21
      ],
      "mod_code": [
        "b ( ) ;"
      ],
      "err_line": 21,
      "err_msg": "‘b’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "return solve ( ) ;"
      ],
      "err_line": 22,
      "err_msg": "void value not ignored as it ought to be"
    },
    {
      "mod_line": [
        1,
        2
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "string color [ 6 ] = { \" purple \" , \" blue \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "string color [ 6 ] = { \" purple \" , \" blue \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "void no ( )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        18
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "string color [ 6 ] = { \" purple \" , \" blue \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "void no ( )",
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        2,
        5,
        4
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "string color [ 6 ] = { \" purple \" , \" blue \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "void no ( )",
        "vector < int > out ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        2,
        18
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "string color [ 6 ] = { \" purple \" , \" blue \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        2,
        18,
        4
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "string color [ 6 ] = { \" purple \" , \" blue \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;",
        "vector < int > out ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        2,
        18,
        5
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "string color [ 6 ] = { \" purple \" , \" blue \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;",
        "void with ( )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        2,
        4
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "string color [ 6 ] = { \" purple \" , \" blue \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "vector < int > out ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        2,
        4,
        5
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "string color [ 6 ] = { \" purple \" , \" blue \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "vector < int > out ;",
        "void with ( )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        2,
        5
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "string color [ 6 ] = { \" purple \" , \" blue \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "void with ( )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "void no ( )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        5,
        18
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "void no ( )",
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        5,
        18,
        4
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "void no ( )",
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;",
        "vector < int > out ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        5,
        4
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "void no ( )",
        "vector < int > out ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        18
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        18,
        4
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;",
        "vector < int > out ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        18,
        4,
        5
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;",
        "vector < int > out ;",
        "void with ( )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        18,
        5
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;",
        "void with ( )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        4
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "vector < int > out ;"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        4,
        5
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "vector < int > out ;",
        "void with ( )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "string gem [ 6 ] = { \" Power \" , \" Time \" , \" Time \" , \" Soul \" , \" Reality \" , \" Mind \" } } ;",
        "void with ( )"
      ],
      "err_line": 1,
      "err_msg": "expected ‘,’ or ‘;’ before ‘}’ token"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "string color [ 6 ] = { \" purple \" , \" blue \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "void no ( )"
      ],
      "err_line": 21,
      "err_msg": "‘run’ was not declared in this scope"
    },
    {
      "mod_line": [
        2,
        5,
        18
      ],
      "mod_code": [
        "string color [ 6 ] = { \" purple \" , \" blue \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "void no ( )",
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::vector<std::__cxx11::basic_string<char> >::iterator {aka __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > >}’)"
    },
    {
      "mod_line": [
        2,
        5,
        18,
        4
      ],
      "mod_code": [
        "string color [ 6 ] = { \" purple \" , \" blue \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "void no ( )",
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;",
        "vector < int > out ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘std::vector<int>::push_back(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        2,
        5,
        4
      ],
      "mod_code": [
        "string color [ 6 ] = { \" purple \" , \" blue \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "void no ( )",
        "vector < int > out ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘std::vector<int>::push_back(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        2,
        18
      ],
      "mod_code": [
        "string color [ 6 ] = { \" purple \" , \" blue \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::vector<std::__cxx11::basic_string<char> >::iterator {aka __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > >}’)"
    },
    {
      "mod_line": [
        2,
        18,
        4
      ],
      "mod_code": [
        "string color [ 6 ] = { \" purple \" , \" blue \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;",
        "vector < int > out ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘std::vector<int>::push_back(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        2,
        18,
        4,
        5
      ],
      "mod_code": [
        "string color [ 6 ] = { \" purple \" , \" blue \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;",
        "vector < int > out ;",
        "void with ( )"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘std::vector<int>::push_back(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        2,
        18,
        5
      ],
      "mod_code": [
        "string color [ 6 ] = { \" purple \" , \" blue \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;",
        "void with ( )"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::vector<std::__cxx11::basic_string<char> >::iterator {aka __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > >}’)"
    },
    {
      "mod_line": [
        2,
        4
      ],
      "mod_code": [
        "string color [ 6 ] = { \" purple \" , \" blue \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "vector < int > out ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘std::vector<int>::push_back(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        2,
        4,
        5
      ],
      "mod_code": [
        "string color [ 6 ] = { \" purple \" , \" blue \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "vector < int > out ;",
        "void with ( )"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘std::vector<int>::push_back(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        2,
        5
      ],
      "mod_code": [
        "string color [ 6 ] = { \" purple \" , \" blue \" , \" blue \" , \" orange \" , \" red \" , \" yellow \" } ;",
        "void with ( )"
      ],
      "err_line": 21,
      "err_msg": "‘run’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        18
      ],
      "mod_code": [
        "void no ( )",
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::vector<std::__cxx11::basic_string<char> >::iterator {aka __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > >}’)"
    },
    {
      "mod_line": [
        5,
        18,
        4
      ],
      "mod_code": [
        "void no ( )",
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;",
        "vector < int > out ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘std::vector<int>::push_back(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        5,
        4
      ],
      "mod_code": [
        "void no ( )",
        "vector < int > out ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘std::vector<int>::push_back(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        18,
        4
      ],
      "mod_code": [
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;",
        "vector < int > out ;"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘std::vector<int>::push_back(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        18,
        4,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;",
        "vector < int > out ;",
        "void with ( )"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘std::vector<int>::push_back(std::__cxx11::string&)’"
    },
    {
      "mod_line": [
        18,
        5
      ],
      "mod_code": [
        "for ( int i = 0 ; i < out . end ( ) ; i ++ ) cout << i << endl ;",
        "void with ( )"
      ],
      "err_line": 18,
      "err_msg": "no match for ‘operator<’ (operand types are ‘int’ and ‘std::vector<std::__cxx11::basic_string<char> >::iterator {aka __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char> > >}’)"
    },
    {
      "mod_line": [
        4,
        5
      ],
      "mod_code": [
        "vector < int > out ;",
        "void with ( )"
      ],
      "err_line": 15,
      "err_msg": "no matching function for call to ‘std::vector<int>::push_back(std::__cxx11::string&)’"
    }
  ]
}