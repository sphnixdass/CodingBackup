{
  "meta": {
    "index": 1894,
    "hitid": "3VLL1PIENQING7XNXJUFNSM61DMOZI",
    "workerid": "A1AYVATMT88U1W",
    "probid": "447A",
    "subid": "32785858"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let p , n be integers",
      "code": "int p , n ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read p , n",
      "code": "cin >> p >> n ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "hash = array of integers of length 305",
      "code": "int hash [ 305 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "memset of hash , 0 , sizeof ( hash )",
      "code": "memset ( hash , 0 , sizeof ( hash ) ) ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "let x be a integer",
      "code": "int x ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "for i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 7,
      "text": "read x",
      "code": "cin >> x ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "set x to x modulo p",
      "code": "x = x % p ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if hash [ x ] is true",
      "code": "if ( hash [ x ] )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "print + + i and newline",
      "code": "cout << ++ i << endl ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "increase hash [ x ] by 1",
      "code": "hash [ x ] ++ ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 15,
      "text": "print - 1 and newline",
      "code": "cout << - 1 << endl ;",
      "indent": 1
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "cout << ++ *** \" ;"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "int a [ 305 ] ;"
      ],
      "err_line": 4,
      "err_msg": "‘hash’ was not declared in this scope"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "memset ( hash , 0 , sizeof ( hash ) )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        10,
        3
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "int a [ 305 ] ;"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        3,
        4
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "int a [ 305 ] ;",
        "memset ( hash , 0 , sizeof ( hash ) )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        3,
        4,
        7
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "int a [ 305 ] ;",
        "memset ( hash , 0 , sizeof ( hash ) )",
        "x >> x ;"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        3,
        4,
        2
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "int a [ 305 ] ;",
        "memset ( hash , 0 , sizeof ( hash ) )",
        "cin >> p >> p ;"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        3,
        4,
        9
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "int a [ 305 ] ;",
        "memset ( hash , 0 , sizeof ( hash ) )",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        3,
        7
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "int a [ 305 ] ;",
        "x >> x ;"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        3,
        7,
        2
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "int a [ 305 ] ;",
        "x >> x ;",
        "cin >> p >> p ;"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        3,
        7,
        9
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "int a [ 305 ] ;",
        "x >> x ;",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        3,
        2
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "int a [ 305 ] ;",
        "cin >> p >> p ;"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        3,
        2,
        9
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "int a [ 305 ] ;",
        "cin >> p >> p ;",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        3,
        9
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "int a [ 305 ] ;",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        4
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "memset ( hash , 0 , sizeof ( hash ) )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        4,
        7
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "memset ( hash , 0 , sizeof ( hash ) )",
        "x >> x ;"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        4,
        7,
        2
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "memset ( hash , 0 , sizeof ( hash ) )",
        "x >> x ;",
        "cin >> p >> p ;"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        4,
        7,
        9
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "memset ( hash , 0 , sizeof ( hash ) )",
        "x >> x ;",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        4,
        2
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "memset ( hash , 0 , sizeof ( hash ) )",
        "cin >> p >> p ;"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        4,
        2,
        9
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "memset ( hash , 0 , sizeof ( hash ) )",
        "cin >> p >> p ;",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        4,
        9
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "memset ( hash , 0 , sizeof ( hash ) )",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        7
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "x >> x ;"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        7,
        2
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "x >> x ;",
        "cin >> p >> p ;"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        7,
        2,
        9
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "x >> x ;",
        "cin >> p >> p ;",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        7,
        9
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "x >> x ;",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        2
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "cin >> p >> p ;"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        2,
        9
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "cin >> p >> p ;",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        10,
        9
      ],
      "mod_code": [
        "cout << ++ *** \" ;",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 10,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        3,
        4
      ],
      "mod_code": [
        "int a [ 305 ] ;",
        "memset ( hash , 0 , sizeof ( hash ) )"
      ],
      "err_line": 4,
      "err_msg": "‘hash’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        7
      ],
      "mod_code": [
        "int a [ 305 ] ;",
        "memset ( hash , 0 , sizeof ( hash ) )",
        "x >> x ;"
      ],
      "err_line": 4,
      "err_msg": "‘hash’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        2
      ],
      "mod_code": [
        "int a [ 305 ] ;",
        "memset ( hash , 0 , sizeof ( hash ) )",
        "x >> x ;",
        "cin >> p >> p ;"
      ],
      "err_line": 4,
      "err_msg": "‘hash’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        7,
        9
      ],
      "mod_code": [
        "int a [ 305 ] ;",
        "memset ( hash , 0 , sizeof ( hash ) )",
        "x >> x ;",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 4,
      "err_msg": "‘hash’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        2
      ],
      "mod_code": [
        "int a [ 305 ] ;",
        "memset ( hash , 0 , sizeof ( hash ) )",
        "cin >> p >> p ;"
      ],
      "err_line": 4,
      "err_msg": "‘hash’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        2,
        9
      ],
      "mod_code": [
        "int a [ 305 ] ;",
        "memset ( hash , 0 , sizeof ( hash ) )",
        "cin >> p >> p ;",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 4,
      "err_msg": "‘hash’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        4,
        9
      ],
      "mod_code": [
        "int a [ 305 ] ;",
        "memset ( hash , 0 , sizeof ( hash ) )",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 4,
      "err_msg": "‘hash’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7
      ],
      "mod_code": [
        "int a [ 305 ] ;",
        "x >> x ;"
      ],
      "err_line": 4,
      "err_msg": "‘hash’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        2
      ],
      "mod_code": [
        "int a [ 305 ] ;",
        "x >> x ;",
        "cin >> p >> p ;"
      ],
      "err_line": 4,
      "err_msg": "‘hash’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        2,
        9
      ],
      "mod_code": [
        "int a [ 305 ] ;",
        "x >> x ;",
        "cin >> p >> p ;",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 4,
      "err_msg": "‘hash’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        7,
        9
      ],
      "mod_code": [
        "int a [ 305 ] ;",
        "x >> x ;",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 4,
      "err_msg": "‘hash’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2
      ],
      "mod_code": [
        "int a [ 305 ] ;",
        "cin >> p >> p ;"
      ],
      "err_line": 4,
      "err_msg": "‘hash’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        2,
        9
      ],
      "mod_code": [
        "int a [ 305 ] ;",
        "cin >> p >> p ;",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 4,
      "err_msg": "‘hash’ was not declared in this scope"
    },
    {
      "mod_line": [
        3,
        9
      ],
      "mod_code": [
        "int a [ 305 ] ;",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 4,
      "err_msg": "‘hash’ was not declared in this scope"
    },
    {
      "mod_line": [
        4,
        7
      ],
      "mod_code": [
        "memset ( hash , 0 , sizeof ( hash ) )",
        "x >> x ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        4,
        7,
        2
      ],
      "mod_code": [
        "memset ( hash , 0 , sizeof ( hash ) )",
        "x >> x ;",
        "cin >> p >> p ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        4,
        7,
        2,
        9
      ],
      "mod_code": [
        "memset ( hash , 0 , sizeof ( hash ) )",
        "x >> x ;",
        "cin >> p >> p ;",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        4,
        7,
        9
      ],
      "mod_code": [
        "memset ( hash , 0 , sizeof ( hash ) )",
        "x >> x ;",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        4,
        2
      ],
      "mod_code": [
        "memset ( hash , 0 , sizeof ( hash ) )",
        "cin >> p >> p ;"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        4,
        2,
        9
      ],
      "mod_code": [
        "memset ( hash , 0 , sizeof ( hash ) )",
        "cin >> p >> p ;",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘int’"
    },
    {
      "mod_line": [
        4,
        9
      ],
      "mod_code": [
        "memset ( hash , 0 , sizeof ( hash ) )",
        "if ( ! hash [ x ] )"
      ],
      "err_line": 5,
      "err_msg": "expected ‘;’ before ‘int’"
    }
  ]
}