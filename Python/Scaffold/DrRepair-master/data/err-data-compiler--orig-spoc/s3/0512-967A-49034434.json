{
  "meta": {
    "index": 512,
    "hitid": "3OREP8RUT2536WD93M14W161JOHBGK",
    "workerid": "AIWEXPJAU66D9",
    "probid": "967A",
    "subid": "49034434"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "define integers n and s",
      "code": "int n , s ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "read input to n and s",
      "code": "cin >> n >> s ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare new array of integers a with size n",
      "code": "int a [ n ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "start for loop from i = 0 to n exclusive",
      "code": "for ( int i = 0 ; i < n ; i ++ )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "declare integer variables u and v",
      "code": "int u , v ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "read from the input to u and v",
      "code": "cin >> u >> v ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "assign u * 60 + v to a [ i ]",
      "code": "a [ i ] = u * 60 + v ;",
      "indent": 2
    },
    {
      "line": 8,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 9,
      "text": "sort a",
      "code": "sort ( a , a + n ) ;",
      "indent": 1
    },
    {
      "line": 10,
      "text": "if a [ 0 ] > = s + 1",
      "code": "if ( a [ 0 ] >= s + 1 )",
      "indent": 1
    },
    {
      "line": 11,
      "text": "print \" 0 0 \"",
      "code": "cout << \" 0 0 \" << endl ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 1
    },
    {
      "line": 13,
      "text": "create integer variable i",
      "code": "int i ;",
      "indent": 2
    },
    {
      "line": 14,
      "text": "for i from 1 to n exclusive incrementing i",
      "code": "for ( i = 1 ; i < n ; i ++ )",
      "indent": 2
    },
    {
      "line": 15,
      "text": "if a [ i ] - a [ i - 1 ] > = 2 * s + 2",
      "code": "if ( a [ i ] - a [ i - 1 ] >= 2 * s + 2 )",
      "indent": 3
    },
    {
      "line": 16,
      "text": "create new integer called t = a [ i - 1 ] + s + 1",
      "code": "int t = a [ i - 1 ] + s + 1 ;",
      "indent": 4
    },
    {
      "line": 17,
      "text": "print t / 60 , \" \" and t % 60",
      "code": "cout << t / 60 << \" \" << t % 60 << endl ;",
      "indent": 4
    },
    {
      "line": 18,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 21,
      "text": "if i = n",
      "code": "if ( i == n )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "declare new integer variable t with value a [ n - 1 ] + s + 1",
      "code": "int t = a [ n - 1 ] + s + 1 ;",
      "indent": 3
    },
    {
      "line": 23,
      "text": "print t / 60 , \" \" and t % 60",
      "code": "cout << t / 60 << \" \" << t % 60 << endl ;",
      "indent": 3
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        2
      ],
      "mod_code": [
        "while ( cin >> n >> s )"
      ],
      "err_line": 7,
      "err_msg": "‘a’ was not declared in this scope"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        14,
        18
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "for ( int i = 1 ; i < n ; i ++ )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        14,
        18,
        10
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "for ( int i = 1 ; i < n ; i ++ )",
        "do",
        "if ( a [ 0 ] >= ' s ' + 1 )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        14,
        18,
        23
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "for ( int i = 1 ; i < n ; i ++ )",
        "do",
        "cout << t / 60 << \" \" << t % 60 ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        14,
        18,
        12
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "for ( int i = 1 ; i < n ; i ++ )",
        "do",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        14,
        10,
        12
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "for ( int i = 1 ; i < n ; i ++ )",
        "if ( a [ 0 ] >= ' s ' + 1 )",
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        14,
        23,
        12
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "for ( int i = 1 ; i < n ; i ++ )",
        "cout << t / 60 << \" \" << t % 60 ;",
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        14,
        12
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "for ( int i = 1 ; i < n ; i ++ )",
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        18
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        18,
        10
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "do",
        "if ( a [ 0 ] >= ' s ' + 1 )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        18,
        10,
        23
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "do",
        "if ( a [ 0 ] >= ' s ' + 1 )",
        "cout << t / 60 << \" \" << t % 60 ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        18,
        10,
        12
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "do",
        "if ( a [ 0 ] >= ' s ' + 1 )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        18,
        23
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "do",
        "cout << t / 60 << \" \" << t % 60 ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        18,
        23,
        12
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "do",
        "cout << t / 60 << \" \" << t % 60 ;",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        18,
        12
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "do",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        10,
        23,
        12
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "if ( a [ 0 ] >= ' s ' + 1 )",
        "cout << t / 60 << \" \" << t % 60 ;",
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        10,
        12
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "if ( a [ 0 ] >= ' s ' + 1 )",
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        23,
        12
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "cout << t / 60 << \" \" << t % 60 ;",
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        11,
        12
      ],
      "mod_code": [
        "cout << \" 0 \" << endl ;",
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        18
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        18,
        10
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "do",
        "if ( a [ 0 ] >= ' s ' + 1 )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        18,
        10,
        23
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "do",
        "if ( a [ 0 ] >= ' s ' + 1 )",
        "cout << t / 60 << \" \" << t % 60 ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        18,
        10,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "do",
        "if ( a [ 0 ] >= ' s ' + 1 )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        18,
        23
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "do",
        "cout << t / 60 << \" \" << t % 60 ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        18,
        23,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "do",
        "cout << t / 60 << \" \" << t % 60 ;",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        18,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "do",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        10,
        23,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "if ( a [ 0 ] >= ' s ' + 1 )",
        "cout << t / 60 << \" \" << t % 60 ;",
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        10,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "if ( a [ 0 ] >= ' s ' + 1 )",
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        23,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "cout << t / 60 << \" \" << t % 60 ;",
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        12
      ],
      "mod_code": [
        "for ( int i = 1 ; i < n ; i ++ )",
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        10
      ],
      "mod_code": [
        "do",
        "if ( a [ 0 ] >= ' s ' + 1 )"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        10,
        23
      ],
      "mod_code": [
        "do",
        "if ( a [ 0 ] >= ' s ' + 1 )",
        "cout << t / 60 << \" \" << t % 60 ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        10,
        23,
        12
      ],
      "mod_code": [
        "do",
        "if ( a [ 0 ] >= ' s ' + 1 )",
        "cout << t / 60 << \" \" << t % 60 ;",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        10,
        12
      ],
      "mod_code": [
        "do",
        "if ( a [ 0 ] >= ' s ' + 1 )",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        23
      ],
      "mod_code": [
        "do",
        "cout << t / 60 << \" \" << t % 60 ;"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        23,
        12
      ],
      "mod_code": [
        "do",
        "cout << t / 60 << \" \" << t % 60 ;",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        18,
        12
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        23,
        12
      ],
      "mod_code": [
        "if ( a [ 0 ] >= ' s ' + 1 )",
        "cout << t / 60 << \" \" << t % 60 ;",
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        12
      ],
      "mod_code": [
        "if ( a [ 0 ] >= ' s ' + 1 )",
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        23,
        12
      ],
      "mod_code": [
        "cout << t / 60 << \" \" << t % 60 ;",
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}