{
  "meta": {
    "index": 2053,
    "hitid": "3421H3BM9ABU95ODD88B283RNGNJ9E",
    "workerid": "AGRKG3YT3KMD8",
    "probid": "633A",
    "subid": "48987130"
  },
  "lines": [
    {
      "line": 0,
      "text": "in the bool function cmp with inputs constant long long & a and long long & b",
      "code": "bool cmp ( const long long & a , long long & b )",
      "indent": 0
    },
    {
      "line": 1,
      "text": "return whether a is less than b",
      "code": "return a < b ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "a , b , c = integers",
      "code": "int a , b , c ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "while reading a , b , c",
      "code": "while ( cin >> a >> b >> c )",
      "indent": 1
    },
    {
      "line": 6,
      "text": "let int flag be 0",
      "code": "int flag = 0 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for i = 0 to a * i < = c inclusive",
      "code": "for ( int i = 0 ; a * i <= c ; i ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "if ( c - a * i ) % b = = 0",
      "code": "if ( ( c - a * i ) % b == 0 )",
      "indent": 3
    },
    {
      "line": 9,
      "text": "set flag to 1",
      "code": "flag = 1 ;",
      "indent": 4
    },
    {
      "line": 10,
      "text": "break",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 11,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 12,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 13,
      "text": "if flag is 1",
      "code": "if ( flag == 1 )",
      "indent": 2
    },
    {
      "line": 14,
      "text": "print Yes",
      "code": "cout << \" Yes \" << endl ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 16,
      "text": "print No",
      "code": "cout << \" No \" << endl ;",
      "indent": 3
    },
    {
      "line": 17,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 18,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "return whether ( b ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "return whether ( a ) ;"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "int flag be ;"
      ],
      "err_line": 6,
      "err_msg": "expected initializer before ‘be’"
    },
    {
      "mod_line": [
        7
      ],
      "mod_code": [
        "for ( i = 0 ; a * i <= c ; i ++ )"
      ],
      "err_line": 7,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        15
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        1,
        5
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "while ( cin >> a >> b >> c >> c )"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        10
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "while ( cin >> a >> b >> c >> c )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        10,
        8
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "while ( cin >> a >> b >> c >> c )",
        "do",
        "if ( ( c - ( a * i ) % b == 0 ) )"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        10,
        14
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "while ( cin >> a >> b >> c >> c )",
        "do",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        10,
        15
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "while ( cin >> a >> b >> c >> c )",
        "do",
        "do"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        8
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "while ( cin >> a >> b >> c >> c )",
        "if ( ( c - ( a * i ) % b == 0 ) )"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        14
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "while ( cin >> a >> b >> c >> c )",
        "if ( ( c - ( a * i ) % b == 0 ) )",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        8,
        15
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "while ( cin >> a >> b >> c >> c )",
        "if ( ( c - ( a * i ) % b == 0 ) )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        14
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "while ( cin >> a >> b >> c >> c )",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        14,
        15
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "while ( cin >> a >> b >> c >> c )",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        5,
        15
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "while ( cin >> a >> b >> c >> c )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10,
        8
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "do",
        "if ( ( c - ( a * i ) % b == 0 ) )"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10,
        8,
        14
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "do",
        "if ( ( c - ( a * i ) % b == 0 ) )",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10,
        8,
        15
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "do",
        "if ( ( c - ( a * i ) % b == 0 ) )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10,
        14
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "do",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10,
        14,
        15
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "do",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        10,
        15
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "do",
        "do"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        8
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "if ( ( c - ( a * i ) % b == 0 ) )"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        8,
        14
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "if ( ( c - ( a * i ) % b == 0 ) )",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        8,
        14,
        15
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "if ( ( c - ( a * i ) % b == 0 ) )",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        8,
        15
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "if ( ( c - ( a * i ) % b == 0 ) )",
        "do"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        14
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        14,
        15
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        1,
        15
      ],
      "mod_code": [
        "return whether ( b ) ;",
        "do"
      ],
      "err_line": 1,
      "err_msg": "‘whether’ was not declared in this scope"
    },
    {
      "mod_line": [
        5,
        10
      ],
      "mod_code": [
        "while ( cin >> a >> b >> c >> c )",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        10,
        8
      ],
      "mod_code": [
        "while ( cin >> a >> b >> c >> c )",
        "do",
        "if ( ( c - ( a * i ) % b == 0 ) )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        10,
        8,
        14
      ],
      "mod_code": [
        "while ( cin >> a >> b >> c >> c )",
        "do",
        "if ( ( c - ( a * i ) % b == 0 ) )",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        10,
        8,
        15
      ],
      "mod_code": [
        "while ( cin >> a >> b >> c >> c )",
        "do",
        "if ( ( c - ( a * i ) % b == 0 ) )",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        10,
        14
      ],
      "mod_code": [
        "while ( cin >> a >> b >> c >> c )",
        "do",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        10,
        14,
        15
      ],
      "mod_code": [
        "while ( cin >> a >> b >> c >> c )",
        "do",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        10,
        15
      ],
      "mod_code": [
        "while ( cin >> a >> b >> c >> c )",
        "do",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        8,
        14,
        15
      ],
      "mod_code": [
        "while ( cin >> a >> b >> c >> c )",
        "if ( ( c - ( a * i ) % b == 0 ) )",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        8,
        15
      ],
      "mod_code": [
        "while ( cin >> a >> b >> c >> c )",
        "if ( ( c - ( a * i ) % b == 0 ) )",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        14,
        15
      ],
      "mod_code": [
        "while ( cin >> a >> b >> c >> c )",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        5,
        15
      ],
      "mod_code": [
        "while ( cin >> a >> b >> c >> c )",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        8
      ],
      "mod_code": [
        "do",
        "if ( ( c - ( a * i ) % b == 0 ) )"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        8,
        14
      ],
      "mod_code": [
        "do",
        "if ( ( c - ( a * i ) % b == 0 ) )",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        8,
        14,
        15
      ],
      "mod_code": [
        "do",
        "if ( ( c - ( a * i ) % b == 0 ) )",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        8,
        15
      ],
      "mod_code": [
        "do",
        "if ( ( c - ( a * i ) % b == 0 ) )",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        14
      ],
      "mod_code": [
        "do",
        "cout << \" YES\\n \" ;"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        14,
        15
      ],
      "mod_code": [
        "do",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        10,
        15
      ],
      "mod_code": [
        "do",
        "do"
      ],
      "err_line": 11,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        14,
        15
      ],
      "mod_code": [
        "if ( ( c - ( a * i ) % b == 0 ) )",
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        8,
        15
      ],
      "mod_code": [
        "if ( ( c - ( a * i ) % b == 0 ) )",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        14,
        15
      ],
      "mod_code": [
        "cout << \" YES\\n \" ;",
        "do"
      ],
      "err_line": 17,
      "err_msg": "expected ‘while’ before ‘}’ token"
    }
  ]
}