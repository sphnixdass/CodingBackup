{
  "meta": {
    "index": 2070,
    "hitid": "35O6H0UNLSAB8IM1AIVUQSYP1KC5JH",
    "workerid": "AIWEXPJAU66D9",
    "probid": "402A",
    "subid": "46576080"
  },
  "lines": [
    {
      "line": 0,
      "text": "declare constant long long integer INF = ( 1LL < < 60 ) - 1",
      "code": "const long long int INF = ( 1LL << 60 ) - 1 ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "create constant long long integer MAX with value 100000000001",
      "code": "const long long int MAX = 100000000001 ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "define constant long long integer MOD = 1000000007",
      "code": "const long long int MOD = 1000000007 ;",
      "indent": 0
    },
    {
      "line": 3,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 4,
      "text": "define integers k , a , b and v",
      "code": "int k , a , b , v ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "read k , a , b and v from the user input",
      "code": "cin >> k >> a >> b >> v ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "create integer variable i = 0",
      "code": "int i = 0 ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "start for loop from i = 1 to 10000 exclusive",
      "code": "for ( i = 1 ; i < 10000 ; i ++ )",
      "indent": 1
    },
    {
      "line": 8,
      "text": "new integer space = 1",
      "code": "int space = 1 ;",
      "indent": 2
    },
    {
      "line": 9,
      "text": "if b > = k - 1",
      "code": "if ( b >= ( k - 1 ) )",
      "indent": 2
    },
    {
      "line": 10,
      "text": "decrease b by k - 1",
      "code": "b -= ( k - 1 ) ;",
      "indent": 3
    },
    {
      "line": 11,
      "text": "assign the new value = k to space",
      "code": "space = k ;",
      "indent": 3
    },
    {
      "line": 12,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 13,
      "text": "set space to b + 1",
      "code": "space = b + 1 ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "assign the new value = 0 to b",
      "code": "b = 0 ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if a is greater than space * v",
      "code": "if ( a > space * v )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "change a to a - space * v",
      "code": "a -= space * v ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "else",
      "code": "else",
      "indent": 2
    },
    {
      "line": 19,
      "text": "stop the loop",
      "code": "break ;",
      "indent": 3
    },
    {
      "line": 20,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 21,
      "text": "print i and ' \\ n ' to the standard output",
      "code": "cout << i << ' \\n ' ;",
      "indent": 1
    },
    {
      "line": 22,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 23,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int 1 = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "a = a - \" \" * * v ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "i = 0 ;"
      ],
      "err_line": 6,
      "err_msg": "‘i’ was not declared in this scope"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "int \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "\" = k ;"
      ],
      "err_line": 11,
      "err_msg": "missing terminating \" character"
    },
    {
      "mod_line": [
        12
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 16,
      "err_msg": "expected ‘while’ before ‘(’ token"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "string b + 1 ;"
      ],
      "err_line": 13,
      "err_msg": "expected initializer before ‘+’ token"
    },
    {
      "mod_line": [
        16
      ],
      "mod_code": [
        "if ( a > \" \" )"
      ],
      "err_line": 16,
      "err_msg": "ISO C++ forbids comparison between pointer and integer [-fpermissive]"
    },
    {
      "mod_line": [
        17
      ],
      "mod_code": [
        "a = a - \" \" << * v ;"
      ],
      "err_line": 17,
      "err_msg": "invalid operands of types ‘int’ and ‘const char [2]’ to binary ‘operator-’"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 20,
      "err_msg": "expected ‘while’ before ‘}’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "stop ;"
      ],
      "err_line": 19,
      "err_msg": "‘stop’ was not declared in this scope"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < 10000 ; i ++ )",
        "int 1 = 1 ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        7,
        8,
        11
      ],
      "mod_code": [
        "for ( int i = 1 ; i < 10000 ; i ++ )",
        "int 1 = 1 ;",
        "cout << k << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        7,
        8,
        11,
        13
      ],
      "mod_code": [
        "for ( int i = 1 ; i < 10000 ; i ++ )",
        "int 1 = 1 ;",
        "cout << k << endl ;",
        "cout << b + 1 << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        7,
        8,
        11,
        17
      ],
      "mod_code": [
        "for ( int i = 1 ; i < 10000 ; i ++ )",
        "int 1 = 1 ;",
        "cout << k << endl ;",
        "a = a - \" \" * * v ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        7,
        8,
        13
      ],
      "mod_code": [
        "for ( int i = 1 ; i < 10000 ; i ++ )",
        "int 1 = 1 ;",
        "cout << b + 1 << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        7,
        8,
        13,
        17
      ],
      "mod_code": [
        "for ( int i = 1 ; i < 10000 ; i ++ )",
        "int 1 = 1 ;",
        "cout << b + 1 << endl ;",
        "a = a - \" \" * * v ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        7,
        8,
        17
      ],
      "mod_code": [
        "for ( int i = 1 ; i < 10000 ; i ++ )",
        "int 1 = 1 ;",
        "a = a - \" \" * * v ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        7,
        11,
        13,
        17
      ],
      "mod_code": [
        "for ( int i = 1 ; i < 10000 ; i ++ )",
        "cout << k << endl ;",
        "cout << b + 1 << endl ;",
        "a = a - \" \" * * v ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7,
        11,
        13,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < 10000 ; i ++ )",
        "cout << k << endl ;",
        "cout << b + 1 << endl ;",
        "int \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        7,
        11,
        17
      ],
      "mod_code": [
        "for ( int i = 1 ; i < 10000 ; i ++ )",
        "cout << k << endl ;",
        "a = a - \" \" * * v ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7,
        11,
        17,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < 10000 ; i ++ )",
        "cout << k << endl ;",
        "a = a - \" \" * * v ;",
        "int \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        7,
        11,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < 10000 ; i ++ )",
        "cout << k << endl ;",
        "int \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        7,
        13,
        17
      ],
      "mod_code": [
        "for ( int i = 1 ; i < 10000 ; i ++ )",
        "cout << b + 1 << endl ;",
        "a = a - \" \" * * v ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7,
        13,
        17,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < 10000 ; i ++ )",
        "cout << b + 1 << endl ;",
        "a = a - \" \" * * v ;",
        "int \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        7,
        13,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < 10000 ; i ++ )",
        "cout << b + 1 << endl ;",
        "int \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        7,
        17
      ],
      "mod_code": [
        "for ( int i = 1 ; i < 10000 ; i ++ )",
        "a = a - \" \" * * v ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        7,
        17,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < 10000 ; i ++ )",
        "a = a - \" \" * * v ;",
        "int \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        7,
        8
      ],
      "mod_code": [
        "for ( int i = 1 ; i < 10000 ; i ++ )",
        "int \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "int 1 = 1 ;",
        "cout << k << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        8,
        11,
        13
      ],
      "mod_code": [
        "int 1 = 1 ;",
        "cout << k << endl ;",
        "cout << b + 1 << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        8,
        11,
        13,
        17
      ],
      "mod_code": [
        "int 1 = 1 ;",
        "cout << k << endl ;",
        "cout << b + 1 << endl ;",
        "a = a - \" \" * * v ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        8,
        11,
        17
      ],
      "mod_code": [
        "int 1 = 1 ;",
        "cout << k << endl ;",
        "a = a - \" \" * * v ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        8,
        13
      ],
      "mod_code": [
        "int 1 = 1 ;",
        "cout << b + 1 << endl ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        8,
        13,
        17
      ],
      "mod_code": [
        "int 1 = 1 ;",
        "cout << b + 1 << endl ;",
        "a = a - \" \" * * v ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        8,
        17
      ],
      "mod_code": [
        "int 1 = 1 ;",
        "a = a - \" \" * * v ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before numeric constant"
    },
    {
      "mod_line": [
        11,
        13,
        17
      ],
      "mod_code": [
        "cout << k << endl ;",
        "cout << b + 1 << endl ;",
        "a = a - \" \" * * v ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11,
        13,
        17,
        8
      ],
      "mod_code": [
        "cout << k << endl ;",
        "cout << b + 1 << endl ;",
        "a = a - \" \" * * v ;",
        "int \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        11,
        13,
        8
      ],
      "mod_code": [
        "cout << k << endl ;",
        "cout << b + 1 << endl ;",
        "int \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        11,
        17
      ],
      "mod_code": [
        "cout << k << endl ;",
        "a = a - \" \" * * v ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        11,
        17,
        8
      ],
      "mod_code": [
        "cout << k << endl ;",
        "a = a - \" \" * * v ;",
        "int \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        11,
        8
      ],
      "mod_code": [
        "cout << k << endl ;",
        "int \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        13,
        17
      ],
      "mod_code": [
        "cout << b + 1 << endl ;",
        "a = a - \" \" * * v ;"
      ],
      "err_line": 17,
      "err_msg": "invalid type argument of unary ‘*’ (have ‘int’)"
    },
    {
      "mod_line": [
        13,
        17,
        8
      ],
      "mod_code": [
        "cout << b + 1 << endl ;",
        "a = a - \" \" * * v ;",
        "int \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        13,
        8
      ],
      "mod_code": [
        "cout << b + 1 << endl ;",
        "int \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    },
    {
      "mod_line": [
        17,
        8
      ],
      "mod_code": [
        "a = a - \" \" * * v ;",
        "int \" \" ;"
      ],
      "err_line": 8,
      "err_msg": "expected unqualified-id before string constant"
    }
  ]
}