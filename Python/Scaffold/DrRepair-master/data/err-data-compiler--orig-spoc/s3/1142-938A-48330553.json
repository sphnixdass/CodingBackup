{
  "meta": {
    "index": 1142,
    "hitid": "3NCN4N1H1GB9GOUVQQEZMLFYJD4BNI",
    "workerid": "AIWEXPJAU66D9",
    "probid": "938A",
    "subid": "48330553"
  },
  "lines": [
    {
      "line": 0,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 1,
      "text": "declare integer num",
      "code": "int num ;",
      "indent": 1
    },
    {
      "line": 2,
      "text": "create integer counts = 0",
      "code": "int counts = 0 ;",
      "indent": 1
    },
    {
      "line": 3,
      "text": "declare integer array res with size 101",
      "code": "int res [ 101 ] ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read num",
      "code": "cin >> num ;",
      "indent": 1
    },
    {
      "line": 5,
      "text": "char pointer * words = new char [ num + 1 ]",
      "code": "char * words = new char [ num + 1 ] ;",
      "indent": 1
    },
    {
      "line": 6,
      "text": "read words",
      "code": "cin >> words ;",
      "indent": 1
    },
    {
      "line": 7,
      "text": "integer array dics with elements ' a ' , ' i ' , ' e ' , ' u ' , ' y ' , ' o '",
      "code": "int dics [ 6 ] = { ' a ' , ' i ' , ' e ' , ' u ' , ' y ' , ' o ' } ;",
      "indent": 1
    },
    {
      "line": 8,
      "text": "for integer i = 0 to num exclusive",
      "code": "for ( int i = 0 ; i < num ; i ++ )",
      "indent": 1
    },
    {
      "line": 9,
      "text": "res [ i ] = 1",
      "code": "res [ i ] = 1 ;",
      "indent": 2
    },
    {
      "line": 10,
      "text": "for j = 0 to 6 exclusive",
      "code": "for ( int j = 0 ; j < 6 ; j ++ )",
      "indent": 2
    },
    {
      "line": 11,
      "text": "if words [ i ] casted to int = dics [ j ]",
      "code": "if ( ( int ) words [ i ] == dics [ j ] )",
      "indent": 3
    },
    {
      "line": 12,
      "text": "assign value of 0 to res [ i ]",
      "code": "res [ i ] = 0 ;",
      "indent": 4
    },
    {
      "line": 13,
      "text": "break the loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 14,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 17,
      "text": "for i = 0 to num - 1 exclusive",
      "code": "for ( int i = 0 ; i < num - 1 ; i ++ )",
      "indent": 1
    },
    {
      "line": 18,
      "text": "if res [ i ] = 0",
      "code": "if ( res [ i ] == 0 )",
      "indent": 2
    },
    {
      "line": 19,
      "text": "for j = i + 1 to num exclusive",
      "code": "for ( int j = i + 1 ; j < num ; j ++ )",
      "indent": 3
    },
    {
      "line": 20,
      "text": "if res [ j ] = 0 , change res [ j ] to - 1",
      "code": "if ( res [ j ] == 0 ) { res [ j ] = - 1 ; }",
      "indent": 4
    },
    {
      "line": 21,
      "text": "if res [ j ] = 1",
      "code": "if ( res [ j ] == 1 )",
      "indent": 4
    },
    {
      "line": 22,
      "text": "set i to j",
      "code": "i = j ;",
      "indent": 5
    },
    {
      "line": 23,
      "text": "break the loop",
      "code": "break ;",
      "indent": 5
    },
    {
      "line": 24,
      "text": "DUMMY",
      "code": "}",
      "indent": 4
    },
    {
      "line": 25,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 28,
      "text": "for i = 0 to num exclusive",
      "code": "for ( int i = 0 ; i < num ; i ++ )",
      "indent": 1
    },
    {
      "line": 29,
      "text": "if res [ i ] = 0 | | res [ i ] = 1 , print words [ i ]",
      "code": "if ( res [ i ] == 0 || res [ i ] == 1 ) { cout << words [ i ] ; }",
      "indent": 2
    },
    {
      "line": 30,
      "text": "if i = num - 1 print new line",
      "code": "if ( i == num - 1 ) { cout << endl ; }",
      "indent": 2
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 32,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 33,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "cin >> n ;"
      ],
      "err_line": 4,
      "err_msg": "‘n’ was not declared in this scope"
    },
    {
      "mod_line": [
        5
      ],
      "mod_code": [
        "char words = new char [ num + 1 ] ;"
      ],
      "err_line": 5,
      "err_msg": "invalid conversion from ‘char*’ to ‘char’ [-fpermissive]"
    },
    {
      "mod_line": [
        6
      ],
      "mod_code": [
        "cin >> N ;"
      ],
      "err_line": 6,
      "err_msg": "‘N’ was not declared in this scope"
    },
    {
      "mod_line": [
        10
      ],
      "mod_code": [
        "for ( j = 0 ; j < 6 ; j ++ )"
      ],
      "err_line": 10,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        13
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 14,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        19
      ],
      "mod_code": [
        "for ( j = i + 1 ; j < num ; j ++ )"
      ],
      "err_line": 19,
      "err_msg": "‘j’ was not declared in this scope"
    },
    {
      "mod_line": [
        22
      ],
      "mod_code": [
        "i to ;"
      ],
      "err_line": 22,
      "err_msg": "expected ‘;’ before ‘to’"
    },
    {
      "mod_line": [
        23
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 24,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        28
      ],
      "mod_code": [
        "for ( i = 0 ; i < num ; i ++ )"
      ],
      "err_line": 28,
      "err_msg": "name lookup of ‘i’ changed for ISO ‘for’ scoping [-fpermissive]"
    }
  ]
}