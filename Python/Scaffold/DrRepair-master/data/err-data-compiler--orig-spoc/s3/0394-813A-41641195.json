{
  "meta": {
    "index": 394,
    "hitid": "39I4RL8QGJBXLTNB8D9Z9NCWOW84H1",
    "workerid": "A1R0Q9CUUBSM5F",
    "probid": "813A",
    "subid": "41641195"
  },
  "lines": [
    {
      "line": 0,
      "text": "create int array a of size 1000",
      "code": "int a [ 1000 ] ;",
      "indent": 0
    },
    {
      "line": 1,
      "text": "let int array b of size 100005",
      "code": "int b [ 100005 ] ;",
      "indent": 0
    },
    {
      "line": 2,
      "text": "DUMMY",
      "code": "int main() {",
      "indent": 0
    },
    {
      "line": 3,
      "text": "create long long integers x , y , l , r , i , j , n , l , ans , m , and ggg",
      "code": "long long x , y , l , r , i , j , n , k , ans , m , ggg ;",
      "indent": 1
    },
    {
      "line": 4,
      "text": "read n and while n is truthy",
      "code": "while ( cin >> n )",
      "indent": 1
    },
    {
      "line": 5,
      "text": "set everything in b to 0",
      "code": "memset ( b , 0 , sizeof ( b ) ) ;",
      "indent": 2
    },
    {
      "line": 6,
      "text": "create int sum = 0",
      "code": "int sum = 0 ;",
      "indent": 2
    },
    {
      "line": 7,
      "text": "for i = 1 to n",
      "code": "for ( i = 1 ; i <= n ; i ++ )",
      "indent": 2
    },
    {
      "line": 8,
      "text": "read a [ i ]",
      "code": "cin >> a [ i ] ;",
      "indent": 3
    },
    {
      "line": 9,
      "text": "set sum to sum + a [ i ]",
      "code": "sum += a [ i ] ;",
      "indent": 3
    },
    {
      "line": 10,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 11,
      "text": "read m",
      "code": "cin >> m ;",
      "indent": 2
    },
    {
      "line": 12,
      "text": "for i = 1 to m",
      "code": "for ( i = 1 ; i <= m ; i ++ )",
      "indent": 2
    },
    {
      "line": 13,
      "text": "read l and r",
      "code": "cin >> l >> r ;",
      "indent": 3
    },
    {
      "line": 14,
      "text": "for j = 1 to r , set b [ j ] to 1",
      "code": "for ( j = l ; j <= r ; j ++ ) b [ j ] = 1 ;",
      "indent": 3
    },
    {
      "line": 15,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 16,
      "text": "if sum is greater than sum",
      "code": "if ( sum > 100000 )",
      "indent": 2
    },
    {
      "line": 17,
      "text": "print \" - 1 \"",
      "code": "cout << \" -1 \" << endl ;",
      "indent": 3
    },
    {
      "line": 18,
      "text": "continue loop",
      "code": "continue ;",
      "indent": 3
    },
    {
      "line": 19,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 20,
      "text": "set k to 0",
      "code": "k = 0 ;",
      "indent": 2
    },
    {
      "line": 21,
      "text": "for i = sum to 100000",
      "code": "for ( i = sum ; i <= 100000 ; i ++ )",
      "indent": 2
    },
    {
      "line": 22,
      "text": "if b [ i ] is 1",
      "code": "if ( b [ i ] == 1 )",
      "indent": 3
    },
    {
      "line": 23,
      "text": "print i",
      "code": "cout << i << endl ;",
      "indent": 4
    },
    {
      "line": 24,
      "text": "set k to 1",
      "code": "k = 1 ;",
      "indent": 4
    },
    {
      "line": 25,
      "text": "break loop",
      "code": "break ;",
      "indent": 4
    },
    {
      "line": 26,
      "text": "DUMMY",
      "code": "}",
      "indent": 3
    },
    {
      "line": 27,
      "text": "DUMMY",
      "code": "}",
      "indent": 2
    },
    {
      "line": 28,
      "text": "if k is 0 , print \" - 1 \"",
      "code": "if ( k == 0 ) cout << \" -1 \" << endl ;",
      "indent": 2
    },
    {
      "line": 29,
      "text": "DUMMY",
      "code": "}",
      "indent": 1
    },
    {
      "line": 30,
      "text": "DUMMY",
      "code": "return 0;",
      "indent": 1
    },
    {
      "line": 31,
      "text": "DUMMY",
      "code": "}",
      "indent": 0
    }
  ],
  "errors": [
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        0
      ],
      "mod_code": [
        "int a [ 1000 ] [ 1000 ] ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1000]’)"
    },
    {
      "mod_line": [
        1
      ],
      "mod_code": [
        "int b [ 100005 ] of ;"
      ],
      "err_line": 1,
      "err_msg": "expected initializer before ‘of’"
    },
    {
      "mod_line": [
        3
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , m ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        4
      ],
      "mod_code": [
        "for ( cin >> n ; )"
      ],
      "err_line": 4,
      "err_msg": "expected primary-expression before ‘)’ token"
    },
    {
      "mod_line": [
        8
      ],
      "mod_code": [
        "cin >> a . size ( ) ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘int [1000]’"
    },
    {
      "mod_line": [
        11
      ],
      "mod_code": [
        "gets ( m ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘long long int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        18
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 19,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        25
      ],
      "mod_code": [
        "do"
      ],
      "err_line": 26,
      "err_msg": "expected primary-expression before ‘}’ token"
    },
    {
      "mod_line": [
        3,
        8
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "cin >> a . size ( ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        8,
        16
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "cin >> a . size ( ) ;",
        "if ( sum >= sum )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        8,
        16,
        0
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "cin >> a . size ( ) ;",
        "if ( sum >= sum )",
        "int a [ 1000 ] [ 1000 ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        8,
        16,
        11
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "cin >> a . size ( ) ;",
        "if ( sum >= sum )",
        "gets ( m ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        8,
        16,
        22
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "cin >> a . size ( ) ;",
        "if ( sum >= sum )",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        8,
        0
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "cin >> a . size ( ) ;",
        "int a [ 1000 ] [ 1000 ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        8,
        0,
        11
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "cin >> a . size ( ) ;",
        "int a [ 1000 ] [ 1000 ] ;",
        "gets ( m ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        8,
        0,
        22
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "cin >> a . size ( ) ;",
        "int a [ 1000 ] [ 1000 ] ;",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        8,
        11
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "cin >> a . size ( ) ;",
        "gets ( m ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        8,
        11,
        22
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "cin >> a . size ( ) ;",
        "gets ( m ) ;",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        8,
        22
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "cin >> a . size ( ) ;",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        16
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "if ( sum >= sum )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        16,
        0
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "if ( sum >= sum )",
        "int a [ 1000 ] [ 1000 ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        16,
        0,
        11
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "if ( sum >= sum )",
        "int a [ 1000 ] [ 1000 ] ;",
        "gets ( m ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        16,
        0,
        22
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "if ( sum >= sum )",
        "int a [ 1000 ] [ 1000 ] ;",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        16,
        11
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "if ( sum >= sum )",
        "gets ( m ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        16,
        11,
        22
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "if ( sum >= sum )",
        "gets ( m ) ;",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        16,
        22
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "if ( sum >= sum )",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        0
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "int a [ 1000 ] [ 1000 ] ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        0,
        11
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "int a [ 1000 ] [ 1000 ] ;",
        "gets ( m ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        0,
        11,
        22
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "int a [ 1000 ] [ 1000 ] ;",
        "gets ( m ) ;",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        0,
        22
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "int a [ 1000 ] [ 1000 ] ;",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        11
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "gets ( m ) ;"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        11,
        22
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "gets ( m ) ;",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        3,
        22
      ],
      "mod_code": [
        "long long int x , y , l , r , i , j , n , l , ans , m , ggg ;",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 3,
      "err_msg": "redeclaration of ‘long long int l’"
    },
    {
      "mod_line": [
        8,
        16
      ],
      "mod_code": [
        "cin >> a . size ( ) ;",
        "if ( sum >= sum )"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘int [1000]’"
    },
    {
      "mod_line": [
        8,
        16,
        0
      ],
      "mod_code": [
        "cin >> a . size ( ) ;",
        "if ( sum >= sum )",
        "int a [ 1000 ] [ 1000 ] ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘int [1000][1000]’"
    },
    {
      "mod_line": [
        8,
        16,
        0,
        11
      ],
      "mod_code": [
        "cin >> a . size ( ) ;",
        "if ( sum >= sum )",
        "int a [ 1000 ] [ 1000 ] ;",
        "gets ( m ) ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘int [1000][1000]’"
    },
    {
      "mod_line": [
        8,
        16,
        0,
        22
      ],
      "mod_code": [
        "cin >> a . size ( ) ;",
        "if ( sum >= sum )",
        "int a [ 1000 ] [ 1000 ] ;",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘int [1000][1000]’"
    },
    {
      "mod_line": [
        8,
        16,
        11
      ],
      "mod_code": [
        "cin >> a . size ( ) ;",
        "if ( sum >= sum )",
        "gets ( m ) ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘int [1000]’"
    },
    {
      "mod_line": [
        8,
        16,
        11,
        22
      ],
      "mod_code": [
        "cin >> a . size ( ) ;",
        "if ( sum >= sum )",
        "gets ( m ) ;",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘int [1000]’"
    },
    {
      "mod_line": [
        8,
        16,
        22
      ],
      "mod_code": [
        "cin >> a . size ( ) ;",
        "if ( sum >= sum )",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘int [1000]’"
    },
    {
      "mod_line": [
        8,
        0
      ],
      "mod_code": [
        "cin >> a . size ( ) ;",
        "int a [ 1000 ] [ 1000 ] ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘int [1000][1000]’"
    },
    {
      "mod_line": [
        8,
        0,
        11
      ],
      "mod_code": [
        "cin >> a . size ( ) ;",
        "int a [ 1000 ] [ 1000 ] ;",
        "gets ( m ) ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘int [1000][1000]’"
    },
    {
      "mod_line": [
        8,
        0,
        11,
        22
      ],
      "mod_code": [
        "cin >> a . size ( ) ;",
        "int a [ 1000 ] [ 1000 ] ;",
        "gets ( m ) ;",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘int [1000][1000]’"
    },
    {
      "mod_line": [
        8,
        0,
        22
      ],
      "mod_code": [
        "cin >> a . size ( ) ;",
        "int a [ 1000 ] [ 1000 ] ;",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘int [1000][1000]’"
    },
    {
      "mod_line": [
        8,
        11
      ],
      "mod_code": [
        "cin >> a . size ( ) ;",
        "gets ( m ) ;"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘int [1000]’"
    },
    {
      "mod_line": [
        8,
        11,
        22
      ],
      "mod_code": [
        "cin >> a . size ( ) ;",
        "gets ( m ) ;",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘int [1000]’"
    },
    {
      "mod_line": [
        8,
        22
      ],
      "mod_code": [
        "cin >> a . size ( ) ;",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 8,
      "err_msg": "request for member ‘size’ in ‘a’, which is of non-class type ‘int [1000]’"
    },
    {
      "mod_line": [
        16,
        0
      ],
      "mod_code": [
        "if ( sum >= sum )",
        "int a [ 1000 ] [ 1000 ] ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1000]’)"
    },
    {
      "mod_line": [
        16,
        0,
        11
      ],
      "mod_code": [
        "if ( sum >= sum )",
        "int a [ 1000 ] [ 1000 ] ;",
        "gets ( m ) ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1000]’)"
    },
    {
      "mod_line": [
        16,
        0,
        11,
        22
      ],
      "mod_code": [
        "if ( sum >= sum )",
        "int a [ 1000 ] [ 1000 ] ;",
        "gets ( m ) ;",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1000]’)"
    },
    {
      "mod_line": [
        16,
        0,
        22
      ],
      "mod_code": [
        "if ( sum >= sum )",
        "int a [ 1000 ] [ 1000 ] ;",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1000]’)"
    },
    {
      "mod_line": [
        16,
        11
      ],
      "mod_code": [
        "if ( sum >= sum )",
        "gets ( m ) ;"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘long long int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        16,
        11,
        22
      ],
      "mod_code": [
        "if ( sum >= sum )",
        "gets ( m ) ;",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘long long int’ to ‘char*’ [-fpermissive]"
    },
    {
      "mod_line": [
        0,
        11
      ],
      "mod_code": [
        "int a [ 1000 ] [ 1000 ] ;",
        "gets ( m ) ;"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1000]’)"
    },
    {
      "mod_line": [
        0,
        11,
        22
      ],
      "mod_code": [
        "int a [ 1000 ] [ 1000 ] ;",
        "gets ( m ) ;",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1000]’)"
    },
    {
      "mod_line": [
        0,
        22
      ],
      "mod_code": [
        "int a [ 1000 ] [ 1000 ] ;",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 8,
      "err_msg": "no match for ‘operator>>’ (operand types are ‘std::istream {aka std::basic_istream<char>}’ and ‘int [1000]’)"
    },
    {
      "mod_line": [
        11,
        22
      ],
      "mod_code": [
        "gets ( m ) ;",
        "if ( b [ i ] == ' 1 ' )"
      ],
      "err_line": 11,
      "err_msg": "invalid conversion from ‘long long int’ to ‘char*’ [-fpermissive]"
    }
  ]
}